<?xml version='1.0' encoding='UTF-8'?>
<workflow>
  <meta name="jira.description" />
  <meta name="jira.update.author.key">arianna.fabbri</meta>
  <meta name="jira.updated.date">1621344400549</meta>
  <initial-actions>
    <action id="1" name="Create">
      <validators>
        <validator name="" type="class">
          <arg name="permission">Create Issue</arg>
          <arg name="class.name">com.atlassian.jira.workflow.validator.PermissionValidator</arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="žée" status="¢—§" step="2">
          <post-functions>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueCreateFunction</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">ãyq®zãÎovwiÞ^{üÓOõÍkÝÝ</arg>
              <arg name="FIELD_NOTES">Create sub-tasks for each user in PRODUCTION_USERS groups</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
              <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.issue.IssueManager
import com.atlassian.jira.bc.user.search.UserSearchService
import com.atlassian.jira.user.ApplicationUser
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.index.IssueIndexingService
import org.apache.log4j.Category
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

def issueFactory = ComponentAccessor.getIssueFactory()
def constantManager = ComponentAccessor.getConstantsManager()
def LoggedInUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
def subTaskManager = ComponentAccessor.getSubTaskManager()

/* Get Insight IQL Facade from plugin accessor */
Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade"); 
def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);
/* Get Insight Object Facade from plugin accessor */
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");
def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);
IssueIndexingService issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)

/* Get issue "Group Assignee" custom field value */
IssueManager issueManager = ComponentAccessor.getIssueManager()
//MutableIssue issue = issueManager.getIssueByKeyIgnoreCase("OPUT-2")
//20901 - Production Users
def value = issue.getCustomFieldValue(ComponentAccessor.getCustomFieldManager().getCustomFieldObject(21903))
def userSearchService = ComponentAccessor.getComponent(UserSearchService)
log.debug "value: " + value
if (value != null &amp;&amp; value != ""){
    /* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include " around value */
    //log.debug "value[0].name = " + value[0].getName()
    //log.debug "value.size: " + value.size
    //log.debug "value: " + value
    String queryParam
    
    if (value.size&gt;1){
        int counter = 0
        for (item in value){
            if (counter == 0){
            	queryParam = "\"" + item.getName() + "\""
            }else{
                queryParam = queryParam + ",\"" + item.getName() + "\""
        	}
            counter++
        }
    }else{
        queryParam = "\"" + value[0].getName() + "\""
    }
    log.debug "queryParam: " + queryParam
    def objects = iqlFacade.findObjectsByIQLAndSchema(10, "objectType=Technician AND object HAVING outboundReferences(\"Name\" IN (" + queryParam + "))"); // See the complete list of possible IQL on the Insight Query Language documentation page
    log.debug "objects: " + objects
    log.debug "objectType=Technician AND object HAVING outboundReferences(\"Name\" IN (" + queryParam + ")"
    
    ApplicationUser user
    def counter = 1

    for (obj in objects){
        //log.debug objectFacade.loadObjectAttributeBean(obj.getId(), 1100).getObjectAttributeValueBeans()[0].getValue() //attribute id    
        //log.debug "obj id: " + obj.getId()
        user = userSearchService.findUsersByEmail(objectFacade.loadObjectAttributeBean(obj.getId(), 679).getObjectAttributeValueBeans()[0].getValue())[0]
        log.debug "user: " + user
        /* Create sub-task to be assigned to user */
        MutableIssue newSubTask = issueFactory.getIssue()
        newSubTask.setAssignee(user)
        //newSubTask.setSummary(issue.key.toString() + " - Prod Task " + counter)
        newSubTask.setSummary("Production Task - " + user.displayName)
        newSubTask.setParentObject(issue)
        newSubTask.setProjectObject(issue.getProjectObject())
        newSubTask.setIssueTypeId(constantManager.getAllIssueTypeObjects().find{
            it.getName() == "Sub-task"
        }.id)
        def userObject = iqlFacade.findObjectsByIQLAndSchema(10, "\"Employee User\" = \"" + newSubTask.getAssignee().getEmailAddress() + "\"");
        //log.debug "object: " + userObject
        newSubTask.setCustomFieldValue(ComponentAccessor.getCustomFieldManager().getCustomFieldObject(20901), [objectFacade.loadObjectBean(userObject[0].getId())])
        
        def newIssueParams = ["issue" : newSubTask] as Map&lt;String,Object&gt;

        issueManager.createIssueObject(LoggedInUser, newIssueParams)
        subTaskManager.createSubTaskIssueLink(issue, newSubTask, LoggedInUser)

        log.debug "Issue with summary ${newSubTask.summary} created"
        
        issueIndexingService.reIndex(newSubTask)
        //ComponentAccessor.getIssueManager().updateIssue(ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser(), newSubTask, EventDispatchOption.DO_NOT_DISPATCH, false)
        
        counter ++
    }

}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">1</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </initial-actions>
  <steps>
    <step id="2" name="In Progress">
      <meta name="jira.status.id">3</meta>
      <actions>
        <action id="11" name="Complete Job">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="²Ö­ºÇ¬">6,11436</arg>
                <arg name="class.name">com.atlassian.jira.workflow.condition.SubTaskBlockingCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="3">
              <post-functions>
                <function type="class">
                  <arg name="field.name">resolution</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
                  <arg name="field.value">6</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">k·¼çgúõÇtÛÝu{]ûóá¾:oNÝ×Vëg</arg>
                  <arg name="FIELD_ACTION">21 Close Job</arg>
                  <arg name="FIELD_NOTES">Close Production Tasks without SubTasks</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.FasttrackTransition</arg>
                  <arg name="FIELD_CONDITION">import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.fields.CustomField;
 
def value = issue.getCustomFieldValue(ComponentAccessor.getCustomFieldManager().getCustomFieldObject(21903)); // Change ID to the correct one     
 
/* If an insight custom field has an object called "Microsoft" it will fail */
for (assignee in value){
    
    if (assignee != null &amp;&amp; "HUB Delivery Center".equals(assignee.getName())){
        return true
    }
    
}

return false|||</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_TRANSITION_OPTIONS" />
                  <arg name="FIELD_ADDITIONAL_SCRIPT">`!`</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="41" name="RigeneraSubTask">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">false|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="2">
              <post-functions>
                <function type="class">
                  <arg name="FIELD_NOTES">Create sub-tasks for each user in PRODUCTION_USERS groups</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.issue.IssueManager
import com.atlassian.jira.bc.user.search.UserSearchService
import com.atlassian.jira.user.ApplicationUser
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.index.IssueIndexingService
import org.apache.log4j.Category
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

def issueFactory = ComponentAccessor.getIssueFactory()
def constantManager = ComponentAccessor.getConstantsManager()
def LoggedInUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
def subTaskManager = ComponentAccessor.getSubTaskManager()

/* Get Insight IQL Facade from plugin accessor */
Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade"); 
def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);
/* Get Insight Object Facade from plugin accessor */
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");
def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);
IssueIndexingService issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)

/* Get issue "Group Assignee" custom field value */
IssueManager issueManager = ComponentAccessor.getIssueManager()
//MutableIssue issue = issueManager.getIssueByKeyIgnoreCase("OPUT-2")
//20901 - Production Users
def value = issue.getCustomFieldValue(ComponentAccessor.getCustomFieldManager().getCustomFieldObject(21903))
def userSearchService = ComponentAccessor.getComponent(UserSearchService)
log.debug "value: " + value
if (value != null &amp;&amp; value != ""){
    /* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include " around value */
    //log.debug "value[0].name = " + value[0].getName()
    //log.debug "value.size: " + value.size
    //log.debug "value: " + value
    String queryParam
    
    if (value.size&gt;1){
        int counter = 0
        for (item in value){
            if (counter == 0){
            	queryParam = "\"" + item.getName() + "\""
            }else{
                queryParam = queryParam + ",\"" + item.getName() + "\""
        	}
            counter++
        }
    }else{
        queryParam = "\"" + value[0].getName() + "\""
    }
    log.debug "queryParam: " + queryParam
    def objects = iqlFacade.findObjectsByIQLAndSchema(10, "objectType=Technician AND object HAVING outboundReferences(\"Name\" IN (" + queryParam + "))"); // See the complete list of possible IQL on the Insight Query Language documentation page
    log.debug "objects: " + objects
    log.debug "objectType=Technician AND object HAVING outboundReferences(\"Name\" IN (" + queryParam + ")"
    
    ApplicationUser user
    def counter = 1

    for (obj in objects){
        //log.debug objectFacade.loadObjectAttributeBean(obj.getId(), 1100).getObjectAttributeValueBeans()[0].getValue() //attribute id    
        //log.debug "obj id: " + obj.getId()
        user = userSearchService.findUsersByEmail(objectFacade.loadObjectAttributeBean(obj.getId(), 679).getObjectAttributeValueBeans()[0].getValue())[0]
        log.debug "user: " + user
        /* Create sub-task to be assigned to user */
        MutableIssue newSubTask = issueFactory.getIssue()
        newSubTask.setAssignee(user)
        //newSubTask.setSummary(issue.key.toString() + " - Prod Task " + counter)
        newSubTask.setSummary(user.displayName)
        newSubTask.setParentObject(issue)
        newSubTask.setProjectObject(issue.getProjectObject())
        newSubTask.setIssueTypeId(constantManager.getAllIssueTypeObjects().find{
            it.getName() == "Sub-task"
        }.id)
        def userObject = iqlFacade.findObjectsByIQLAndSchema(10, "\"Employee User\" = \"" + newSubTask.getAssignee().getEmailAddress() + "\"");
        //log.debug "object: " + userObject
        newSubTask.setCustomFieldValue(ComponentAccessor.getCustomFieldManager().getCustomFieldObject(20901), [objectFacade.loadObjectBean(userObject[0].getId())])
        
        def newIssueParams = ["issue" : newSubTask] as Map&lt;String,Object&gt;

        issueManager.createIssueObject(LoggedInUser, newIssueParams)
        subTaskManager.createSubTaskIssueLink(issue, newSubTask, LoggedInUser)

        log.debug "Issue with summary ${newSubTask.summary} created"
        
        issueIndexingService.reIndex(newSubTask)
        //ComponentAccessor.getIssueManager().updateIssue(ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser(), newSubTask, EventDispatchOption.DO_NOT_DISPATCH, false)
        
        counter ++
    }

}</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="3" name="Completed">
      <meta name="jira.status.id">11328</meta>
      <actions>
        <action id="21" name="Close Job">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <results>
            <unconditional-result old-status="žée" status="žée" step="4">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="51" name="Back to Progress">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <results>
            <unconditional-result old-status="žée" status="žée" step="2">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="4" name="Closed">
      <meta name="jira.status.id">6</meta>
      <actions>
        <action id="31" name="Reopen Job">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <results>
            <unconditional-result old-status="žée" status="žée" step="2">
              <post-functions>
                <function type="class">
                  <arg name="field.name">resolution</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
                  <arg name="field.value" />
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
  </steps>
</workflow>