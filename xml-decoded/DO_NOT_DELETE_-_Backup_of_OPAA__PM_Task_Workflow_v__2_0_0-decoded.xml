<?xml version='1.0' encoding='UTF-8'?>
<workflow>
  <meta name="jira.description">Backup del 2024-06-24</meta>
  <meta name="jira.update.author.key">JIRAUSER64223</meta>
  <meta name="jira.updated.date">1719237032263</meta>
  <initial-actions>
    <action id="1" name="Create">
      <validators>
        <validator name="" type="class">
          <arg name="permission">Create Issue</arg>
          <arg name="class.name">com.atlassian.jira.workflow.validator.PermissionValidator</arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="žée" status="¢—§" step="6">
          <post-functions>
            <function type="class">
              <arg name="field.copyFieldSource2" />
              <arg name="field.copyFieldSource1">customfield_24200</arg>
              <arg name="scopeSource-linkEnd" />
              <arg name="maxAllowed-integerValue" />
              <arg name="field.createTargetValue1" />
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field.copyFieldMode1">OVERWRITE</arg>
              <arg name="ºè">27deef27-5d37-4109-9af0-2ddb6fd43e39</arg>
              <arg name="field.copyFieldDestination1">customfield_24200</arg>
              <arg name="field.copyFieldSeparator1" />
              <arg name="scopeType">PARENT</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiescopyValueFromOtherField-function</arg>
              <arg name="scopeDestination-linkEnd" />
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="source-scopeTarget">PARENT</arg>
              <arg name="scopeDestination-jql" />
              <arg name="class.name">com.googlecode.jsu.workflow.function.CopyValueFromOtherFieldPostFunction</arg>
              <arg name="scopeSource-jql" />
            </function>
            <function type="class">
              <arg name="FIELD_SECURITY_LEVEL_ID">11600</arg>
              <arg name="FIELD_FUNCTION_ID">b147e317-65f4-48be-b1ac-48c5afcd21bd</arg>
              <arg name="FIELD_NOTES">Set "Operation Portal - FAAC Service" Issue Security Level</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
              <arg name="FIELD_CONDITION" />
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd" />
              <arg name="append.value" />
              <arg name="maxAllowed-integerValue" />
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field.value">MAINTENANCE_ENABLED</arg>
              <arg name="field.name">customfield_22814</arg>
              <arg name="scopeType">H</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd" />
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql" />
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql" />
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueCreateFunction</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">60128cc4-e32f-420c-91a3-919a2271e93f</arg>
              <arg name="FIELD_NOTES">Create obj "Dynamic Risk Assessment"</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":" import com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.issue.Issue\r\nimport com.atlassian.jira.issue.MutableIssue;\r\nimport com.atlassian.jira.event.type.EventDispatchOption;\r\nimport org.apache.log4j.Level\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File('/var/atlassian/application-data/shared/scripts/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\"); \r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n  \r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\r\n  \r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\"); \r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n  \r\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\"); \r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\r\n\r\nIssue issue = issue\r\n\r\ndef ticketVisKey = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectByName(\"OP_TKT_VISIBILITY_KEY\")\r\n\r\n//30.03.2022 - ora messa condizione fissa in base alla company code, aggiungere flag sull'oggetto Company che la abiliti o meno alla dynamic risk assessment. Solo se la company referenziata nella visibility key \r\n//ha la dynamic risk assessment attiva fare quanto sotto\r\nif(!issue.getIssueType().name.toString().equals(\"Planned Maintenance Ticket\") &amp;&amp; (issue.getCustomFieldValue(ticketVisKey)[0].toString().contains(\"1108\") || issue.getCustomFieldValue(ticketVisKey)[0].toString().contains(\"1179\") || issue.getCustomFieldValue(ticketVisKey)[0].toString().contains(\"1078\"))){\r\n    \r\n    def dynamicRiskField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectByName(\"OP_ASSET_RISKS_ASSESSMENT\")\r\n    def dynamicRisk = issue.getCustomFieldValue(ComponentAccessor.getCustomFieldManager().getCustomFieldObjectByName(\"OP_ASSET_RISKS_ASSESSMENT\"))\r\n    def dynamicRiskObjects = new ArrayList();\r\n    \r\n    def DYNAMIC_RISK_OBJ_TYPE=properties['iobj.dynamicRisk'].toString().toInteger()\r\n    def DYNAMIC_RISK_ATTR_NAME=properties['iobj.dynamicRisk.name.id'].toString().toInteger()\r\n    def DYNAMIC_RISK_ATTR_COMPLETED=properties['iobj.dynamicRisk.completed.id'].toString().toInteger()\r\n    \r\n    def objectAttributeBeans = new ArrayList();\r\n    def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(DYNAMIC_RISK_ATTR_NAME); \r\n    def completedObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(DYNAMIC_RISK_ATTR_COMPLETED); \r\n    \r\n    def objectTypeDynamicRisk = objectTypeFacade.loadObjectTypeBean(DYNAMIC_RISK_OBJ_TYPE);\r\n    def newObjectBean = objectTypeDynamicRisk.createMutableObjectBean();\r\n    \r\n    objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, nameObjectTypeAttributeBean, issue.key.toString()));\r\n    objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, completedObjectTypeAttributeBean, \"false\"));\r\n    \r\n    newObjectBean.setObjectAttributeBeans(objectAttributeBeans);\r\n    /* Store the object into Insight. The new ObjectBean will be updated with an unique ID */\r\n    try {\r\n        newObjectBean = objectFacade.storeObjectBean(newObjectBean);\r\n        log.warn(\"newObjectBean: \" + newObjectBean);\r\n    } catch (Exception vie) {\r\n        log.warn(\"Could not create issue due to validation exception:\" + vie.getMessage());\r\n    }\r\n    \r\n    dynamicRiskObjects.add(newObjectBean)\r\n    \r\n    log.info (\"dynamicRiskObjects: \" + dynamicRiskObjects)\r\n    def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\r\n    \r\n    if (!dynamicRiskObjects.isEmpty()) {\r\n        MutableIssue mi = (MutableIssue) issue;\r\n        mi.setCustomFieldValue(dynamicRiskField, dynamicRiskObjects);\r\n        ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n    }\r\n}     ","scriptPath":null,"parameters":{}}</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">1</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">5eec2e6a-a9b1-4b1b-bbfc-a379ffb2a7fa</arg>
              <arg name="FIELD_NOTES">Update Parent Ticket OP_PM_INVOLVED_INSTALLATIONS_NUMBER field with tot numb of sub-tasks</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.link.IssueLink\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef subTasksNum =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_PM_INVOLVED_INSTALLATIONS_NUMBER\")[0]\n\n//Per test da console\n//def issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-165776\")\n\ndef parentTkt = issue.getParentObject()\n\nsubTasksNum.updateValue(null, parentTkt, new ModifiedValue(parentTkt.getCustomFieldValue(subTasksNum), (issue.getParentObject().getSubTaskObjects().findAll{!it.getStatus().name.toString().equals(\"Removed\")}.size()+1).toDouble()), new DefaultIssueChangeHolder())\nlog.debug issue.getParentObject().getSubTaskObjects().findAll{!it.getStatus().name.toString().equals(\"Removed\")}.size()\n","scriptPath":null,"parameters":{}}</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </initial-actions>
  <global-actions>
    <action id="141" name="Eseguita con cartaceo">
      <meta name="jira.description" />
      <meta name="jira.fieldscreen.id" />
      <validators>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">32a67932-b290-4d96-9333-4b1480b4c5c8</arg>
          <arg name="FIELD_NOTES">SAP: update SN status &amp; Update SO + Confirmation - Do not update if last PM Task closed</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport com.atlassian.jira.config.SubTaskManager\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager()\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-52821\")\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef supplier =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplier'] ? properties['cf.supplier'].toString() : \"OP_SUPPLIER\")[0]\ndef sapSO =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_ORDER\")[0]\ndef requestMethod\ndef baseURL\ndef body_req\ndef output = new ArrayList()\ndef eList = new ArrayList()\ndef eListErrors = new ArrayList()\ndef errorMsgs = new ArrayList()\n\nSubTaskManager subTaskManager = ComponentAccessor.getSubTaskManager();\nCollection subTasks = issue.getParentObject().getSubTaskObjects()\ndef last = true\nif (!subTasks.empty) {\n    subTasks.each {\n        if(!it.getStatus().name.toString().equals(\"Done\") &amp;&amp; it.key != issue.key){\n            last=false\n            log.info \"last\"\n        }\n    }\n    if(!last){\n\n        requestMethod = \"POST\";\n\n        body_req = []\n        body_req = [\n            \"issueKey\": issue.key,\n            \"status\": \"INP\"\n        ] \n\n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n        log.debug \"baseURL SN: \" + baseURL\n        log.debug \"body_req SN: \" + body_req\n        url = new URL(baseURL)\n        connection = (HttpURLConnection)url.openConnection();\n        connection.setRequestMethod(requestMethod);\n        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n        connection.setRequestProperty(\"Accept\", \"*/*\");\n        connection.setDoOutput(true);\n        connection.setDoInput(true);\n        connection.outputStream\n        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n        log.debug connection.outputStream\n        connection.connect();\n\n        if (!connection.getResponseCode().toString().equals(\"200\") &amp;&amp; !connection.getResponseCode().toString().equals(\"201\")){\n            log.debug \"url: \" + url\n            log.debug \"ResponseCode:\" + connection.getResponseCode()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n            eListErrors.add(\"E\")\n            eListErrors.add(\"SN_UPDATE\")\n            errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n            eListErrors.add(errorMsgs)\n            eList.add(eListErrors)\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        }else{\n            /** SERVICE ORDER UPDATE **/\n            URL url\n            HttpURLConnection connection\n\n            body_req = []\n            requestMethod = \"POST\";\n            body_req = [\n                \"issueKey\": issue.key,\n                \"include\": \"LABOUR\"\n            ] \n            baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\n\n            log.debug \"baseURL SO: \" + baseURL\n            log.debug \"body_req SO: \" + body_req\n            url = new URL(baseURL)\n            connection = (HttpURLConnection)url.openConnection();\n            connection.setRequestMethod(requestMethod);\n            connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n            connection.setRequestProperty(\"Accept\", \"*/*\");\n            connection.setDoOutput(true);\n            connection.setDoInput(true);\n            connection.outputStream\n            connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n            log.debug connection.outputStream\n            connection.connect();\n\n            output = new ArrayList()\n            eList = new ArrayList()\n            eListErrors = new ArrayList()\n            errorMsgs = new ArrayList()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n            log.debug \"SO ResponseCode:\" + connection.getResponseCode()\n            if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n                log.debug \"url: \" + url\n                log.debug \"ResponseCode:\" + connection.getResponseCode()\n                log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n                def outputMsg = ((HttpURLConnection)connection).errorStream.text\n                log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n                def jsonSlurper = new JsonSlurper()\n                def json_object = jsonSlurper.parseText(outputMsg)\n                assert json_object instanceof Map  \n                log.debug \"message: \" +  json_object.message\n                log.debug \"errors: \" +  json_object.errors.toString()\n\n                eListErrors.add(\"E\")\n                eListErrors.add(\"OP-SAP-SO-CREATE\")\n                errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n                eListErrors.add(errorMsgs)\n                eList.add(eListErrors)\n\n                output.add(eList)\n                throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n            }else{\n                /** DA FARE SC SOLO IN CASO DI TECNICI INTERNI **/\n                if(issue.getCustomFieldValue(supplier)==null){ /** se OP_SUPPLIER = NULL il ticket ha proseguito sul flusso tecnici interni **/\n\n                    body_req = [\n                        \"issueKey\": issue.key\n                    ] \n\n                    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/order/confirmation\"\n                    log.debug \"body_req SC: \" + body_req\n                    log.debug \"baseURL SC: \" + baseURL\n                    url = new URL(baseURL)\n                    connection = (HttpURLConnection)url.openConnection();\n                    connection.setRequestMethod(requestMethod);\n                    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n                    connection.setRequestProperty(\"Accept\", \"*/*\");\n                    connection.setDoOutput(true);\n                    connection.setDoInput(true);\n                    connection.outputStream\n                    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n                    log.debug connection.outputStream\n                    connection.connect();\n\n                    output = new ArrayList()\n                    eList = new ArrayList()\n                    eListErrors = new ArrayList()\n                    errorMsgs = new ArrayList()\n                    log.debug \"SC ResponseCode:\" + connection.getResponseCode()\n                    if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n                        log.debug \"url: \" + url\n                        log.debug \"ResponseCode:\" + connection.getResponseCode()\n                        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n                        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n                        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n                        def jsonSlurper = new JsonSlurper()\n                        def json_object = jsonSlurper.parseText(outputMsg)\n                        assert json_object instanceof Map  \n                        log.debug \"message: \" +  json_object.message\n                        log.debug \"errors: \" +  json_object.errors.toString()\n                        \n                        eListErrors.add(\"E\")\n                        eListErrors.add(\"OP-SAP-SC-CREATE\")\n                        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n                        eListErrors.add(errorMsgs)\n                        eList.add(eListErrors)\n\n                        output.add(eList)\n                        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n                    }\n                }\n            }\n        }\n    }else{\n        if(issue.getCustomFieldValue(sapSO) == null){\n            /** SERVICE ORDER CREATION **/\n            URL url\n            HttpURLConnection connection\n\n            body_req = []\n            requestMethod = \"POST\";\n            body_req = [\n                \"issueKey\": issue.key,\n                \"include\": \"MATERIALS\"\n            ] \n            baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\n\n            log.debug \"baseURL SO: \" + baseURL\n            log.debug \"body_req SO: \" + body_req\n            url = new URL(baseURL)\n            connection = (HttpURLConnection)url.openConnection();\n            connection.setRequestMethod(requestMethod);\n            connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n            connection.setRequestProperty(\"Accept\", \"*/*\");\n            connection.setDoOutput(true);\n            connection.setDoInput(true);\n            connection.outputStream\n            connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n            log.debug connection.outputStream\n            connection.connect();\n\n            output = new ArrayList()\n            eList = new ArrayList()\n            eListErrors = new ArrayList()\n            errorMsgs = new ArrayList()\n\n            if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n                log.debug \"url: \" + url\n                log.debug \"ResponseCode:\" + connection.getResponseCode()\n                log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n                \n                def outputMsg = ((HttpURLConnection)connection).errorStream.text\n                log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n                \n                def jsonSlurper = new JsonSlurper()\n                def json_object = jsonSlurper.parseText(outputMsg)\n                assert json_object instanceof Map  \n                log.debug \"message: \" +  json_object.message\n                log.debug \"errors: \" +  json_object.errors.toString()\n\n                eListErrors.add(\"E\")\n                eListErrors.add(\"SO_CREATE\")\n                errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n                eListErrors.add(errorMsgs)\n                eList.add(eListErrors)\n\n                output.add(eList)\n                throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n            }\n        }\n    }\n}","scriptPath":null,"parameters":{}}</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="žée" status="žée" step="5">
          <post-functions>
            <function type="class">
              <arg name="field.name">resolution</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
              <arg name="field.value">6</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="161" name="&#09;©‹zWù">
      <meta name="jira.description" />
      <meta name="jira.fieldscreen.id" />
      <results>
        <unconditional-result old-status="žée" status="žée" step="8">
          <post-functions>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">81773586-8020-4dd5-a0db-9b6a5eb4edbb</arg>
              <arg name="FIELD_NOTES">Log Timestamp for Tech activity &amp; Update Job Completed - Do not update Job Completed for the LAST PM Task executed</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":" /* ------------------ ACTION END WORKING ------------------ */\r\n/* ------------------ TRACE_ACTION_STATUS = WORK ------------------ */\r\n/* ------------------ ACTION = JOB_COMPLETED ------------------ */\r\n\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.issue.Issue\r\nimport com.atlassian.jira.issue.MutableIssue;\r\nimport com.atlassian.jira.event.type.EventDispatchOption;\r\nimport org.apache.log4j.Level\r\nimport java.sql.Timestamp\r\nimport com.atlassian.jira.config.SubTaskManager\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport groovy.json.JsonSlurper;\r\nimport groovy.json.StreamingJsonBuilder;\r\nimport com.atlassian.jira.issue.IssueManager;\r\nimport com.atlassian.jira.jql.parser.JqlQueryParser\r\nimport com.atlassian.jira.web.bean.PagerFilter\r\nimport com.atlassian.jira.issue.search.SearchProvider\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File('/var/atlassian/application-data/shared/scripts/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\"); \r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n  \r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\r\n  \r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\"); \r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n  \r\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\"); \r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\r\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \r\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\r\ndef jqlQueryParser = ComponentAccessor.getComponent(JqlQueryParser)\r\n\r\nIssueManager issueManager = ComponentAccessor.getIssueManager()\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-69410\")\r\n\r\n/*25.11.22*/\r\ndef localTimeStamp\r\ndef localDate\r\n/*03.10.23*/\r\ndef DATETIME_OFFSET = properties['wf.tr.datetimewithoffset'].toString()\r\nlog.debug \"DATETIME_OFFSET: \" + DATETIME_OFFSET\r\nif (DATETIME_OFFSET != null &amp;&amp; DATETIME_OFFSET != 'null'){\r\n\r\ndef siteCF = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SITE\")[0];\r\ndef site, siteKey, siteObject, visibility, visibilityKey\r\nif (issue.getCustomFieldValue(siteCF) != null) {\r\n    site = issue.getCustomFieldValue(siteCF).toString()\r\n    siteKey = site.substring(site.lastIndexOf('(') + 1, site.lastIndexOf(')'))\r\n    siteObject = objectFacade.loadObjectBean(siteKey)\r\n    visibility = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_VISIBILITY_KEY\")[0]\r\n    visibilityKey = issue.getCustomFieldValue(visibility)[0].toString().substring(issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf('(') + 1, issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf(')'))\r\n} else {\r\n    visibility = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_INDIRECT_JOB_TKT_VISIBILITY\")[0]\r\n    visibilityKey = issue.getCustomFieldValue(visibility)[0].toString().substring(issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf('(') + 1, issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf(')'))\r\n}\r\ndef timeZone\r\ndef companyRef = objectFacade.loadObjectAttributeBean(objectFacade.loadObjectBean(visibilityKey).getId(), properties['iobj.visibilityKey.companyRef'].toString()).getObjectAttributeValueBeans();\r\nlog.info \"companyRef: \" + companyRef\r\ndef companyRefId = companyRef[0].getReferencedObjectBeanId()\r\nlog.debug \"companyRefId:\" + companyRefId\r\nif (issue.getCustomFieldValue(siteCF) != null &amp;&amp; objectFacade.loadObjectAttributeBean(siteObject.getId(), \"SITE_REF\")) {\r\n    obTriage = objectFacade.loadObjectAttributeBean(siteObject.getId(), \"SITE_REF\").createMutable()\r\n    s = obTriage.getObjectAttributeValueBeans()\r\n    s = s.toString()\r\n    sKey = s.substring(s.lastIndexOf('(') + 1, s.lastIndexOf(')'))\r\n    if (objectFacade.loadObjectAttributeBean(sKey.toInteger(), \"TIME_ZONE\")) {\r\n        obTriage = objectFacade.loadObjectAttributeBean(sKey.toInteger(), \"TIME_ZONE\").createMutable()\r\n        timeZone = obTriage.getObjectAttributeValueBeans()\r\n        timeZone = timeZone[0].getValue()\r\n        log.debug \"TimeZone da Site: \" + timeZone\r\n    } else {\r\n        if (objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\")) {\r\n            obTriage = objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\").createMutable()\r\n            timeZone = obTriage.getObjectAttributeValueBeans()\r\n            timeZone = timeZone[0].getValue()\r\n            log.debug \"TimeZone da Company: \" + timeZone\r\n        }\r\n    }\r\n} else {\r\n    if (objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\")) {\r\n        obTriage = objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\").createMutable()\r\n        timeZone = obTriage.getObjectAttributeValueBeans()\r\n        timeZone = timeZone[0].getValue()\r\n        log.debug \"TimeZone da Company: \" + timeZone\r\n    }\r\n}\r\nif (!timeZone) {\r\n    timeZone = \"Europe/Rome\"\r\n}\r\nlog.debug \"timeZone: \" + timeZone\r\nlocalTimeStamp = (new Timestamp((new Date(new Date().getTime() - TimeZone.getDefault().getRawOffset() + TimeZone.getTimeZone(timeZone.toString()).getRawOffset())).time)).toString()\r\nlocalDate = new Date(new Date().getTime() - TimeZone.getDefault().getRawOffset() + TimeZone.getTimeZone(timeZone.toString()).getRawOffset())\r\n\r\n}else{\r\n\r\n    localTimeStamp =  (new Timestamp((new Date()).time)).toString()\r\n    localDate =  new Date()\r\n\r\n}\r\n\r\nlog.debug \"localTimeStamp: \" + localTimeStamp\r\nlog.debug \"localDate: \" + localDate\r\n/*25.11.22*/\r\n\r\ndef searchService = ComponentAccessor.getComponent(SearchProvider)\r\n\r\ndef trovato=false, reopened=false\r\nfor (s in ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplier'].toString())){\r\n    if (issue.getCustomFieldValue(s) != null){\r\n        trovato=true\r\n    }\r\n}\r\n\r\ndef user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\r\n\r\n//Se il ticket \u00e8 eseguito da tecnici interni eseguo il trace automatico dei tempi\r\nif(!trovato){\r\n    \r\n    def currentUser = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENT_USER\")[0]\r\n    def onSiteTechsTraceField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIAN_ACTIVITIES_TRACE_WORK\")[0];\r\n    def onSiteTechsField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIANS_ONSITE\")[0];\r\n    def OnSiteTechObjects = new ArrayList();\r\n    int OPAA = properties['ischema.aa.id'].toString().toInteger()\r\n    int DBO = properties['ischema.dbo.id'].toString().toInteger()\r\n    \r\n    /* ------------ DEFINE ACTION TO BE TRACED AND SET TO BE DONE ------------- */\r\n    def ACTION = properties['wf.tr.jobCompleted.action'].toString()\r\n    def SET = properties['wf.tr.jobCompleted.set'].toString()\r\n    \r\n    def ONSITE_TECH_REPORT_OBJ_TYPE=properties['iobj.onSiteTechReport'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_NAME=properties['iobj.onSiteTechReport.name.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF=properties['iobj.onSiteTechReport.technicianRef.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED=properties['iobj.onSiteTechReport.jobCompleted.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_JOB_STARTED=properties['iobj.onSiteTechReport.jobStarted.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_TRACE_ACTION=properties['iobj.onSiteTechReport.traceAction.id'].toString().toInteger()\r\n    \r\n    log.warn \"********************** CONFIRM ASSET **********************\"\r\n    def objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = Technician AND TECHNICIAN_REF.TECH_ACCOUNT =\\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\"\")\r\n    log.info \"iql: \" + \"objectType = Technician AND TECHNICIAN_REF.TECH_ACCOUNT =\\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\"\"\r\n    \r\n    for(technician in objects){\r\n        //extract insight key ang get object\r\n        def tech=technician.toString()\r\n        def techKey = tech.substring(tech.lastIndexOf('(')+1,tech.lastIndexOf(')'))\r\n        def techName = tech.substring(0,tech.lastIndexOf('(')-1)\r\n        def techObject = objectFacade.loadObjectBean(techKey)\r\n        log.info \"techKey: \" + techKey\r\n        log.info (\"techName: \" + techName)\r\n        log.info (\"techObject: \" + techObject)\r\n        log.info \"SET: \" +SET\r\n        if (SET == \"JOB_COMPLETED\"){\r\n            /*SEARCH OBJECT TO BE UPDATED*/\r\n            objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key=\\\"\" + issue.key + \"\\\")\")\r\n            log.warn \"iql: \" + \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key=\\\"\" + issue.key + \"\\\")\"\r\n            \r\n            if(objects.size() &gt; 0){\r\n                /*UPDATE JOB_COMPLETED ON SELECTED OBJECT*/     \r\n                /*30.06.2022 AF Se \u00e8 l'ultimo sub-task a essere completato NON salvo il timestamp di fine lavoro che verr\u00e0 compilato a chiusura del ticket padre*/\r\n                SubTaskManager subTaskManager = ComponentAccessor.getSubTaskManager();\r\n                Collection subTasks = issue.getParentObject().getSubTaskObjects()\r\n                def last = true\r\n                if (!subTasks.empty) {\r\n                    subTasks.each {\r\n                        if(!it.getStatus().name.toString().equals(\"Done\") &amp;&amp; it.key != issue.key){\r\n                            last=false\r\n                            log.info \"last\"\r\n                        }\r\n                    }\r\n\r\n                    if(!last){\r\n                        def obj = objectFacade.loadObjectBean(objects[0].getId());\r\n                        attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED); \r\n                        log.info \"attribType: \" + attribType.toString()\r\n                        newAttrib = obj.createObjectAttributeBean(attribType);\r\n                        def newAttribValue = newAttrib.createObjectAttributeValueBean();\r\n            \r\n                        try {\r\n                            newAttribValue.setDateValue(localDate);\r\n                        } catch (Exception vie) {\r\n                            log.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType.toString() + \" to \" + localTimeStamp + \". Exiting.\");\r\n                            log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                            return false;\r\n                        }\r\n                        \r\n                        def attribValues = newAttrib.getObjectAttributeValueBeans();\r\n                        attribValues.add(newAttribValue);\r\n                        newAttrib.setObjectAttributeValueBeans(attribValues);\r\n                        \r\n                        try {\r\n                            newAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\r\n                        } catch (Exception vie) {\r\n                            log.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\r\n                            log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                            return false;\r\n                        }\r\n                    }else{\r\n                        /*Verificare se un altro PM Task prima di questo era stato considerato ultimo (ad es. perch\u00e8 dopo averli completati tutti ho fatto aggiungi impianto)*/\r\n                        /*Se si, aggiornare JOB_COMPLETED sul precedente = a JOB_STARTED di quello corrente e considerare questo come ultimo*/\r\n                        /*SEARCH OBJECT TO BE UPDATED*/\r\n\r\n                        lastObjects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key IN (\" + issue.getParentObject().getSubTaskObjects().minus(issue).toString().replaceAll(\"[\\\\[\\\\]]\", \"\") + \"))\")\r\n                        log.warn \"iql: \" + \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key IN (\" + issue.getParentObject().getSubTaskObjects().minus(issue).toString().replaceAll(\"[\\\\[\\\\]]\", \"\") + \"))\"\r\n\r\n                        if(lastObjects.size()&gt;0){\r\n                            log.debug lastObjects[0]\r\n                            def lastObj = objectFacade.loadObjectBean(lastObjects[0].getId());\r\n                            attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED); \r\n                            log.info \"attribType: \" + attribType.toString()\r\n                            newAttrib = lastObj.createObjectAttributeBean(attribType);\r\n                            def newAttribValue = newAttrib.createObjectAttributeValueBean();\r\n                \r\n                            /*Get JOB_STARTED from current obj*/\r\n                            def obTriage = objectFacade.loadObjectAttributeBean(objects[0].getId(), \"JOB_STARTED\").createMutable()\r\n                            def started = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n\r\n                            try {\r\n                                newAttribValue.setDateValue(started);\r\n                            } catch (Exception vie) {\r\n                                log.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType.toString() + \" to \" + localTimeStamp + \". Exiting.\");\r\n                                log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                                return false;\r\n                            }\r\n                            \r\n                            def attribValues = newAttrib.getObjectAttributeValueBeans();\r\n                            attribValues.add(newAttribValue);\r\n                            newAttrib.setObjectAttributeValueBeans(attribValues);\r\n                            \r\n                            try {\r\n                                newAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\r\n                            } catch (Exception vie) {\r\n                                log.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\r\n                                log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                                return false;\r\n                            }\r\n\r\n                            def jqlSearch = \"project = '\" + issue.getProjectObject().name + \"' AND issuetype IN ('Planned Maintenance Task') AND key != '\" + issue.key.toString() + \"' AND OP_TECHNICIAN_ACTIVITIES_TRACE_WORK IN iqlFunction('objectSchema = \\\"Operation Portal AA\\\" AND objectType = OnSite_Tech_Report AND objectKey = OPAA-\" + lastObjects[0].getId() + \"')\"\r\n                            log.debug \"ricerca: \" + jqlSearch\r\n                            def query = jqlQueryParser.parseQuery(jqlSearch)\r\n                            log.debug \"query: \" + query\r\n                            def search = searchService.search(user, query, PagerFilter.getUnlimitedFilter())\r\n                            def found=false\r\n                            def foundOutward=false\r\n                            def linkedIssue\r\n                            if (search.results) {\r\n                                //Execute update SO e SC on the resulting issue\r\n                                def i = search.results.first()\r\n                                def requestMethod\r\n                                def baseURL\r\n                                URL url\r\n                                HttpURLConnection connection\r\n\r\n                                requestMethod = \"POST\";\r\n\r\n                                def body_req = []\r\n                                body_req = [\r\n                                    \"issueKey\": i.key,\r\n                                    \"status\": \"CLO\"\r\n                                ] \r\n\r\n                                baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\r\n                                log.debug \"body_req SN: \" + body_req\r\n                                log.debug \"baseURL SN: \" + baseURL\r\n                                url = new URL(baseURL)\r\n                                connection = (HttpURLConnection)url.openConnection();\r\n                                connection.setRequestMethod(requestMethod);\r\n                                connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n                                connection.setRequestProperty(\"Accept\", \"*/*\");\r\n                                connection.setDoOutput(true);\r\n                                connection.setDoInput(true);\r\n                                connection.outputStream\r\n                                connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\r\n                                log.debug connection.outputStream\r\n                                connection.connect();\r\n\r\n                                def output = new ArrayList()\r\n                                def eList = new ArrayList()\r\n                                def eListErrors = new ArrayList()\r\n                                def errorMsgs = new ArrayList()\r\n\r\n                                if (!connection.getResponseCode().toString().equals(\"200\")){\r\n                                    log.debug \"url: \" + url\r\n                                    log.debug \"ResponseCode:\" + connection.getResponseCode()\r\n                                    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\r\n                                    eListErrors.add(\"E\")\r\n                                    eListErrors.add(\"SN_UPDATE\")\r\n                                    errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\r\n                                    eListErrors.add(errorMsgs)\r\n                                    eList.add(eListErrors)\r\n\r\n                                    output.add(eList)\r\n                                    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\r\n                                }else{\r\n                                    /** La service confirmation va generata solo nel caso di tecnici interni **/\r\n                                    if(false){ /** --&gt; sostituire il false con la verifica dei tecnici interni **/\r\n                                            body_req = [\r\n                                            \"issueKey\": i.key,\r\n                                        ] \r\n\r\n                                        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/order/confirmation\"\r\n                                        log.debug \"body_req SC: \" + body_req\r\n                                        log.debug \"baseURL SC: \" + baseURL\r\n                                        url = new URL(baseURL)\r\n                                        connection = (HttpURLConnection)url.openConnection();\r\n                                        connection.setRequestMethod(requestMethod);\r\n                                        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n                                        connection.setRequestProperty(\"Accept\", \"*/*\");\r\n                                        connection.setDoOutput(true);\r\n                                        connection.setDoInput(true);\r\n                                        connection.outputStream\r\n                                        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\r\n                                        log.debug connection.outputStream\r\n                                        connection.connect();\r\n\r\n                                        output = new ArrayList()\r\n                                        eList = new ArrayList()\r\n                                        eListErrors = new ArrayList()\r\n                                        errorMsgs = new ArrayList()\r\n\r\n                                        if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\r\n                                            log.debug \"url: \" + url\r\n                                            log.debug \"ResponseCode:\" + connection.getResponseCode()\r\n                                            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\r\n                                            eListErrors.add(\"E\")\r\n                                            eListErrors.add(\"SC_CREATE\")\r\n                                            errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\r\n                                            eListErrors.add(errorMsgs)\r\n                                            eList.add(eListErrors)\r\n\r\n                                            output.add(eList)\r\n                                            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                }                \r\n                \r\n            }else{\r\n                /*ERROR!!*/\r\n            }\r\n            \r\n        }else{\r\n            /*CREATE NEW OBJECT: ONSITE_TECH_REPORT_OBJ_TYPE*/\r\n            def objectTypeOnSiteTechReport = objectTypeFacade.loadObjectTypeBean(ONSITE_TECH_REPORT_OBJ_TYPE);\r\n            def newObjectBean = objectTypeOnSiteTechReport.createMutableObjectBean();\r\n            \r\n            def objectAttributeBeans = new ArrayList();\r\n            def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_NAME); \r\n            def startedObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_JOB_STARTED); \r\n            def actionObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TRACE_ACTION); \r\n            \r\n            objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, nameObjectTypeAttributeBean, techName));\r\n            objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, startedObjectTypeAttributeBean, (new Timestamp((new Date()).time)).toString()));\r\n            objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, actionObjectTypeAttributeBean, ACTION));\r\n            \r\n            newObjectBean.setObjectAttributeBeans(objectAttributeBeans);\r\n            /* Store the object into Insight. The new ObjectBean will be updated with an unique ID */\r\n            try {\r\n                newObjectBean = objectFacade.storeObjectBean(newObjectBean);\r\n                log.warn(\"newObjectBean: \" + newObjectBean);\r\n            } catch (Exception vie) {\r\n                log.warn(\"Could not create issue due to validation exception:\" + vie.getMessage());\r\n            }\r\n            \r\n            /* Update TECHNICIAN_REF on the newObject */\t\t        \r\n            def objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF).createMutable() //The id of the attribute\r\n            \r\n            /* Create the new attribute bean based on the value */\r\n            def newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, techKey);\r\n            /* Load the attribute bean */\r\n            def objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), techKey);\r\n            if (objectAttributeBean != null) {\r\n                /* If attribute exist reuse the old id for the new attribute */\r\n                newObjectAttributeBean.setId(objectAttributeBean.getId());\r\n            }\r\n            /* Store the object attribute into Insight. */\r\n            try {\r\n                objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);\r\n            } catch (Exception vie) {\r\n                log.warn(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\r\n            }  \r\n            \r\n            OnSiteTechObjects.add(newObjectBean)\r\n         \r\n            log.info (\"OnSiteTechObjects: \" + OnSiteTechObjects)\r\n            \r\n            if (!OnSiteTechObjects.isEmpty()) {\r\n                MutableIssue mi = (MutableIssue) issue;\r\n                mi.setCustomFieldValue(onSiteTechsTraceField, OnSiteTechObjects);\r\n                ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n                \r\n                mi.setCustomFieldValue(onSiteTechsField, OnSiteTechObjects);\r\n                ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n            }\r\n        }\r\n    }   \r\n}    ","scriptPath":null,"parameters":{}}</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="field.name">resolution</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
              <arg name="field.value">10103</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="171" name="EèÞr×">
      <meta name="jira.description" />
      <meta name="jira.fieldscreen.id" />
      <results>
        <unconditional-result old-status="žée" status="žée" step="9">
          <post-functions>
            <function type="class">
              <arg name="field.name">resolution</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
              <arg name="field.value">10103</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">8d09b726-03cc-4515-bffe-8a5f6410435d</arg>
              <arg name="FIELD_NOTES">Log Timestamp for Tech activity &amp; Update Job Completed - Do not update Job Completed for the LAST PM Task executed</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":" /* ------------------ ACTION END WORKING ------------------ */\r\n/* ------------------ TRACE_ACTION_STATUS = WORK ------------------ */\r\n/* ------------------ ACTION = JOB_COMPLETED ------------------ */\r\n\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.issue.Issue\r\nimport com.atlassian.jira.issue.MutableIssue;\r\nimport com.atlassian.jira.event.type.EventDispatchOption;\r\nimport org.apache.log4j.Level\r\nimport java.sql.Timestamp\r\nimport com.atlassian.jira.config.SubTaskManager\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport groovy.json.JsonSlurper;\r\nimport groovy.json.StreamingJsonBuilder;\r\nimport com.atlassian.jira.issue.IssueManager;\r\nimport com.atlassian.jira.jql.parser.JqlQueryParser\r\nimport com.atlassian.jira.web.bean.PagerFilter\r\nimport com.atlassian.jira.issue.search.SearchProvider\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File('/var/atlassian/application-data/shared/scripts/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\"); \r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n  \r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\r\n  \r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\"); \r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n  \r\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\"); \r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\r\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \r\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\r\ndef jqlQueryParser = ComponentAccessor.getComponent(JqlQueryParser)\r\n\r\nIssueManager issueManager = ComponentAccessor.getIssueManager()\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-69410\")\r\n\r\n/*25.11.22*/\r\ndef localTimeStamp\r\ndef localDate\r\n/*03.10.23*/\r\ndef DATETIME_OFFSET = properties['wf.tr.datetimewithoffset'].toString()\r\nlog.debug \"DATETIME_OFFSET: \" + DATETIME_OFFSET\r\nif (DATETIME_OFFSET != null &amp;&amp; DATETIME_OFFSET != 'null'){\r\n\r\ndef siteCF = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SITE\")[0];\r\ndef site, siteKey, siteObject, visibility, visibilityKey\r\nif (issue.getCustomFieldValue(siteCF) != null) {\r\n    site = issue.getCustomFieldValue(siteCF).toString()\r\n    siteKey = site.substring(site.lastIndexOf('(') + 1, site.lastIndexOf(')'))\r\n    siteObject = objectFacade.loadObjectBean(siteKey)\r\n    visibility = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_VISIBILITY_KEY\")[0]\r\n    visibilityKey = issue.getCustomFieldValue(visibility)[0].toString().substring(issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf('(') + 1, issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf(')'))\r\n} else {\r\n    visibility = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_INDIRECT_JOB_TKT_VISIBILITY\")[0]\r\n    visibilityKey = issue.getCustomFieldValue(visibility)[0].toString().substring(issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf('(') + 1, issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf(')'))\r\n}\r\ndef timeZone\r\ndef companyRef = objectFacade.loadObjectAttributeBean(objectFacade.loadObjectBean(visibilityKey).getId(), properties['iobj.visibilityKey.companyRef'].toString()).getObjectAttributeValueBeans();\r\nlog.info \"companyRef: \" + companyRef\r\ndef companyRefId = companyRef[0].getReferencedObjectBeanId()\r\nlog.debug \"companyRefId:\" + companyRefId\r\nif (issue.getCustomFieldValue(siteCF) != null &amp;&amp; objectFacade.loadObjectAttributeBean(siteObject.getId(), \"SITE_REF\")) {\r\n    obTriage = objectFacade.loadObjectAttributeBean(siteObject.getId(), \"SITE_REF\").createMutable()\r\n    s = obTriage.getObjectAttributeValueBeans()\r\n    s = s.toString()\r\n    sKey = s.substring(s.lastIndexOf('(') + 1, s.lastIndexOf(')'))\r\n    if (objectFacade.loadObjectAttributeBean(sKey.toInteger(), \"TIME_ZONE\")) {\r\n        obTriage = objectFacade.loadObjectAttributeBean(sKey.toInteger(), \"TIME_ZONE\").createMutable()\r\n        timeZone = obTriage.getObjectAttributeValueBeans()\r\n        timeZone = timeZone[0].getValue()\r\n        log.debug \"TimeZone da Site: \" + timeZone\r\n    } else {\r\n        if (objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\")) {\r\n            obTriage = objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\").createMutable()\r\n            timeZone = obTriage.getObjectAttributeValueBeans()\r\n            timeZone = timeZone[0].getValue()\r\n            log.debug \"TimeZone da Company: \" + timeZone\r\n        }\r\n    }\r\n} else {\r\n    if (objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\")) {\r\n        obTriage = objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\").createMutable()\r\n        timeZone = obTriage.getObjectAttributeValueBeans()\r\n        timeZone = timeZone[0].getValue()\r\n        log.debug \"TimeZone da Company: \" + timeZone\r\n    }\r\n}\r\nif (!timeZone) {\r\n    timeZone = \"Europe/Rome\"\r\n}\r\nlog.debug \"timeZone: \" + timeZone\r\nlocalTimeStamp = (new Timestamp((new Date(new Date().getTime() - TimeZone.getDefault().getRawOffset() + TimeZone.getTimeZone(timeZone.toString()).getRawOffset())).time)).toString()\r\nlocalDate = new Date(new Date().getTime() - TimeZone.getDefault().getRawOffset() + TimeZone.getTimeZone(timeZone.toString()).getRawOffset())\r\n\r\n}else{\r\n\r\n    localTimeStamp =  (new Timestamp((new Date()).time)).toString()\r\n    localDate =  new Date()\r\n\r\n}\r\n\r\nlog.debug \"localTimeStamp: \" + localTimeStamp\r\nlog.debug \"localDate: \" + localDate\r\n/*25.11.22*/\r\n\r\ndef searchService = ComponentAccessor.getComponent(SearchProvider)\r\n\r\ndef trovato=false, reopened=false\r\nfor (s in ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplier'].toString())){\r\n    if (issue.getCustomFieldValue(s) != null){\r\n        trovato=true\r\n    }\r\n}\r\n\r\ndef user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\r\n\r\n//Se il ticket \u00e8 eseguito da tecnici interni eseguo il trace automatico dei tempi\r\nif(!trovato){\r\n    \r\n    def currentUser = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENT_USER\")[0]\r\n    def onSiteTechsTraceField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIAN_ACTIVITIES_TRACE_WORK\")[0];\r\n    def onSiteTechsField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIANS_ONSITE\")[0];\r\n    def OnSiteTechObjects = new ArrayList();\r\n    int OPAA = properties['ischema.aa.id'].toString().toInteger()\r\n    int DBO = properties['ischema.dbo.id'].toString().toInteger()\r\n    \r\n    /* ------------ DEFINE ACTION TO BE TRACED AND SET TO BE DONE ------------- */\r\n    def ACTION = properties['wf.tr.jobCompleted.action'].toString()\r\n    def SET = properties['wf.tr.jobCompleted.set'].toString()\r\n    \r\n    def ONSITE_TECH_REPORT_OBJ_TYPE=properties['iobj.onSiteTechReport'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_NAME=properties['iobj.onSiteTechReport.name.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF=properties['iobj.onSiteTechReport.technicianRef.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED=properties['iobj.onSiteTechReport.jobCompleted.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_JOB_STARTED=properties['iobj.onSiteTechReport.jobStarted.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_TRACE_ACTION=properties['iobj.onSiteTechReport.traceAction.id'].toString().toInteger()\r\n    \r\n    log.warn \"********************** CONFIRM ASSET **********************\"\r\n    def objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = Technician AND TECHNICIAN_REF.TECH_ACCOUNT =\\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\"\")\r\n    log.info \"iql: \" + \"objectType = Technician AND TECHNICIAN_REF.TECH_ACCOUNT =\\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\"\"\r\n    \r\n    for(technician in objects){\r\n        //extract insight key ang get object\r\n        def tech=technician.toString()\r\n        def techKey = tech.substring(tech.lastIndexOf('(')+1,tech.lastIndexOf(')'))\r\n        def techName = tech.substring(0,tech.lastIndexOf('(')-1)\r\n        def techObject = objectFacade.loadObjectBean(techKey)\r\n        log.info \"techKey: \" + techKey\r\n        log.info (\"techName: \" + techName)\r\n        log.info (\"techObject: \" + techObject)\r\n        log.info \"SET: \" +SET\r\n        if (SET == \"JOB_COMPLETED\"){\r\n            /*SEARCH OBJECT TO BE UPDATED*/\r\n            objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key=\\\"\" + issue.key + \"\\\")\")\r\n            log.warn \"iql: \" + \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key=\\\"\" + issue.key + \"\\\")\"\r\n            \r\n            if(objects.size() &gt; 0){\r\n                /*UPDATE JOB_COMPLETED ON SELECTED OBJECT*/     \r\n                /*30.06.2022 AF Se \u00e8 l'ultimo sub-task a essere completato NON salvo il timestamp di fine lavoro che verr\u00e0 compilato a chiusura del ticket padre*/\r\n                SubTaskManager subTaskManager = ComponentAccessor.getSubTaskManager();\r\n                Collection subTasks = issue.getParentObject().getSubTaskObjects()\r\n                def last = true\r\n                if (!subTasks.empty) {\r\n                    subTasks.each {\r\n                        if(!it.getStatus().name.toString().equals(\"Done\") &amp;&amp; it.key != issue.key){\r\n                            last=false\r\n                            log.info \"last\"\r\n                        }\r\n                    }\r\n\r\n                    if(!last){\r\n                        def obj = objectFacade.loadObjectBean(objects[0].getId());\r\n                        attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED); \r\n                        log.info \"attribType: \" + attribType.toString()\r\n                        newAttrib = obj.createObjectAttributeBean(attribType);\r\n                        def newAttribValue = newAttrib.createObjectAttributeValueBean();\r\n            \r\n                        try {\r\n                            newAttribValue.setDateValue(localDate);\r\n                        } catch (Exception vie) {\r\n                            log.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType.toString() + \" to \" +localTimeStamp+ \". Exiting.\");\r\n                            log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                            return false;\r\n                        }\r\n                        \r\n                        def attribValues = newAttrib.getObjectAttributeValueBeans();\r\n                        attribValues.add(newAttribValue);\r\n                        newAttrib.setObjectAttributeValueBeans(attribValues);\r\n                        \r\n                        try {\r\n                            newAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\r\n                        } catch (Exception vie) {\r\n                            log.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\r\n                            log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                            return false;\r\n                        }\r\n                    }else{\r\n                        /*Verificare se un altro PM Task prima di questo era stato considerato ultimo (ad es. perch\u00e8 dopo averli completati tutti ho fatto aggiungi impianto)*/\r\n                        /*Se si, aggiornare JOB_COMPLETED sul precedente = a JOB_STARTED di quello corrente e considerare questo come ultimo*/\r\n                        /*SEARCH OBJECT TO BE UPDATED*/\r\n\r\n                        lastObjects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key IN (\" + issue.getParentObject().getSubTaskObjects().minus(issue).toString().replaceAll(\"[\\\\[\\\\]]\", \"\") + \"))\")\r\n                        log.warn \"iql: \" + \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key IN (\" + issue.getParentObject().getSubTaskObjects().minus(issue).toString().replaceAll(\"[\\\\[\\\\]]\", \"\") + \"))\"\r\n\r\n                        if(lastObjects.size()&gt;0){\r\n                            log.debug lastObjects[0]\r\n                            def lastObj = objectFacade.loadObjectBean(lastObjects[0].getId());\r\n                            attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED); \r\n                            log.info \"attribType: \" + attribType.toString()\r\n                            newAttrib = lastObj.createObjectAttributeBean(attribType);\r\n                            def newAttribValue = newAttrib.createObjectAttributeValueBean();\r\n                \r\n                            /*Get JOB_STARTED from current obj*/\r\n                            def obTriage = objectFacade.loadObjectAttributeBean(objects[0].getId(), \"JOB_STARTED\").createMutable()\r\n                            def started = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n\r\n                            try {\r\n                                newAttribValue.setDateValue(started);\r\n                            } catch (Exception vie) {\r\n                                log.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType.toString() + \" to \" + localTimeStamp + \". Exiting.\");\r\n                                log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                                return false;\r\n                            }\r\n                            \r\n                            def attribValues = newAttrib.getObjectAttributeValueBeans();\r\n                            attribValues.add(newAttribValue);\r\n                            newAttrib.setObjectAttributeValueBeans(attribValues);\r\n                            \r\n                            try {\r\n                                newAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\r\n                            } catch (Exception vie) {\r\n                                log.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\r\n                                log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                                return false;\r\n                            }\r\n\r\n                            def jqlSearch = \"project = '\" + issue.getProjectObject().name + \"' AND issuetype IN ('Planned Maintenance Task') AND key != '\" + issue.key.toString() + \"' AND OP_TECHNICIAN_ACTIVITIES_TRACE_WORK IN iqlFunction('objectSchema = \\\"Operation Portal AA\\\" AND objectType = OnSite_Tech_Report AND objectKey = OPAA-\" + lastObjects[0].getId() + \"')\"\r\n                            log.debug \"ricerca: \" + jqlSearch\r\n                            def query = jqlQueryParser.parseQuery(jqlSearch)\r\n                            log.debug \"query: \" + query\r\n                            def search = searchService.search(user, query, PagerFilter.getUnlimitedFilter())\r\n                            def found=false\r\n                            def foundOutward=false\r\n                            def linkedIssue\r\n                            if (search.results) {\r\n                                //Execute update SO e SC on the resulting issue\r\n                                def i = search.results.first()\r\n                                def requestMethod\r\n                                def baseURL\r\n                                URL url\r\n                                HttpURLConnection connection\r\n\r\n                                requestMethod = \"POST\";\r\n\r\n                                def body_req = []\r\n                                body_req = [\r\n                                    \"issueKey\": i.key,\r\n                                    \"status\": \"CLO\"\r\n                                ] \r\n\r\n                                baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\r\n                                log.debug \"body_req SN: \" + body_req\r\n                                log.debug \"baseURL SN: \" + baseURL\r\n                                url = new URL(baseURL)\r\n                                connection = (HttpURLConnection)url.openConnection();\r\n                                connection.setRequestMethod(requestMethod);\r\n                                connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n                                connection.setRequestProperty(\"Accept\", \"*/*\");\r\n                                connection.setDoOutput(true);\r\n                                connection.setDoInput(true);\r\n                                connection.outputStream\r\n                                connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\r\n                                log.debug connection.outputStream\r\n                                connection.connect();\r\n\r\n                                def output = new ArrayList()\r\n                                def eList = new ArrayList()\r\n                                def eListErrors = new ArrayList()\r\n                                def errorMsgs = new ArrayList()\r\n\r\n                                if (!connection.getResponseCode().toString().equals(\"200\")){\r\n                                    log.debug \"url: \" + url\r\n                                    log.debug \"ResponseCode:\" + connection.getResponseCode()\r\n                                    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\r\n                                    eListErrors.add(\"E\")\r\n                                    eListErrors.add(\"SN_UPDATE\")\r\n                                    errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\r\n                                    eListErrors.add(errorMsgs)\r\n                                    eList.add(eListErrors)\r\n\r\n                                    output.add(eList)\r\n                                    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\r\n                                }else{\r\n                                    /** La service confirmation va generata solo nel caso di tecnici interni **/\r\n                                    if(false){ /** --&gt; sostituire il false con la verifica dei tecnici interni **/\r\n                                            body_req = [\r\n                                            \"issueKey\": i.key,\r\n                                        ] \r\n\r\n                                        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/order/confirmation\"\r\n                                        log.debug \"body_req SC: \" + body_req\r\n                                        log.debug \"baseURL SC: \" + baseURL\r\n                                        url = new URL(baseURL)\r\n                                        connection = (HttpURLConnection)url.openConnection();\r\n                                        connection.setRequestMethod(requestMethod);\r\n                                        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n                                        connection.setRequestProperty(\"Accept\", \"*/*\");\r\n                                        connection.setDoOutput(true);\r\n                                        connection.setDoInput(true);\r\n                                        connection.outputStream\r\n                                        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\r\n                                        log.debug connection.outputStream\r\n                                        connection.connect();\r\n\r\n                                        output = new ArrayList()\r\n                                        eList = new ArrayList()\r\n                                        eListErrors = new ArrayList()\r\n                                        errorMsgs = new ArrayList()\r\n\r\n                                        if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\r\n                                            log.debug \"url: \" + url\r\n                                            log.debug \"ResponseCode:\" + connection.getResponseCode()\r\n                                            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\r\n                                            eListErrors.add(\"E\")\r\n                                            eListErrors.add(\"SC_CREATE\")\r\n                                            errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\r\n                                            eListErrors.add(errorMsgs)\r\n                                            eList.add(eListErrors)\r\n\r\n                                            output.add(eList)\r\n                                            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                }                \r\n                \r\n            }else{\r\n                /*ERROR!!*/\r\n            }\r\n            \r\n        }else{\r\n            /*CREATE NEW OBJECT: ONSITE_TECH_REPORT_OBJ_TYPE*/\r\n            def objectTypeOnSiteTechReport = objectTypeFacade.loadObjectTypeBean(ONSITE_TECH_REPORT_OBJ_TYPE);\r\n            def newObjectBean = objectTypeOnSiteTechReport.createMutableObjectBean();\r\n            \r\n            def objectAttributeBeans = new ArrayList();\r\n            def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_NAME); \r\n            def startedObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_JOB_STARTED); \r\n            def actionObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TRACE_ACTION); \r\n            \r\n            objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, nameObjectTypeAttributeBean, techName));\r\n            objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, startedObjectTypeAttributeBean, localTimeStamp));\r\n            objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, actionObjectTypeAttributeBean, ACTION));\r\n            \r\n            newObjectBean.setObjectAttributeBeans(objectAttributeBeans);\r\n            /* Store the object into Insight. The new ObjectBean will be updated with an unique ID */\r\n            try {\r\n                newObjectBean = objectFacade.storeObjectBean(newObjectBean);\r\n                log.warn(\"newObjectBean: \" + newObjectBean);\r\n            } catch (Exception vie) {\r\n                log.warn(\"Could not create issue due to validation exception:\" + vie.getMessage());\r\n            }\r\n            \r\n            /* Update TECHNICIAN_REF on the newObject */\t\t        \r\n            def objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF).createMutable() //The id of the attribute\r\n            \r\n            /* Create the new attribute bean based on the value */\r\n            def newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, techKey);\r\n            /* Load the attribute bean */\r\n            def objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), techKey);\r\n            if (objectAttributeBean != null) {\r\n                /* If attribute exist reuse the old id for the new attribute */\r\n                newObjectAttributeBean.setId(objectAttributeBean.getId());\r\n            }\r\n            /* Store the object attribute into Insight. */\r\n            try {\r\n                objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);\r\n            } catch (Exception vie) {\r\n                log.warn(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\r\n            }  \r\n            \r\n            OnSiteTechObjects.add(newObjectBean)\r\n         \r\n            log.info (\"OnSiteTechObjects: \" + OnSiteTechObjects)\r\n            \r\n            if (!OnSiteTechObjects.isEmpty()) {\r\n                MutableIssue mi = (MutableIssue) issue;\r\n                mi.setCustomFieldValue(onSiteTechsTraceField, OnSiteTechObjects);\r\n                ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n                \r\n                mi.setCustomFieldValue(onSiteTechsField, OnSiteTechObjects);\r\n                ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n            }\r\n        }\r\n    }   \r\n}    ","scriptPath":null,"parameters":{}}</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="261" name="Removed">
      <meta name="jira.description" />
      <meta name="jira.fieldscreen.id" />
      <restrict-to>
        <conditions>
          <condition type="class">
            <arg name="FIELD_FUNCTION_ID">774f95a6-6a1f-40c0-bbda-dba593051be9</arg>
            <arg name="FIELD_INVERT_CONDITION" />
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
            <arg name="FIELD_USER_IDS">arianna.fabbri|||atlassian_faac_service_desk</arg>
          </condition>
        </conditions>
      </restrict-to>
      <results>
        <unconditional-result old-status="žée" status="žée" step="11">
          <post-functions>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">cbd57251-e455-4a52-8a5f-a5bd31941d93</arg>
              <arg name="FIELD_NOTES">Log Timestamp for Tech activity &amp; Update Job Completed - Do not update Job Completed for the LAST PM Task executed</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":" /* ------------------ ACTION END WORKING ------------------ */\r\n/* ------------------ TRACE_ACTION_STATUS = WORK ------------------ */\r\n/* ------------------ ACTION = JOB_COMPLETED ------------------ */\r\n\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.issue.Issue\r\nimport com.atlassian.jira.issue.MutableIssue;\r\nimport com.atlassian.jira.event.type.EventDispatchOption;\r\nimport org.apache.log4j.Level\r\nimport java.sql.Timestamp\r\nimport com.atlassian.jira.config.SubTaskManager\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport groovy.json.JsonSlurper;\r\nimport groovy.json.StreamingJsonBuilder;\r\nimport com.atlassian.jira.issue.IssueManager;\r\nimport com.atlassian.jira.jql.parser.JqlQueryParser\r\nimport com.atlassian.jira.web.bean.PagerFilter\r\nimport com.atlassian.jira.issue.search.SearchProvider\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File('/var/atlassian/application-data/shared/scripts/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\"); \r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n  \r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\r\n  \r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\"); \r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n  \r\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\"); \r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\r\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \r\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\r\ndef jqlQueryParser = ComponentAccessor.getComponent(JqlQueryParser)\r\n\r\nIssueManager issueManager = ComponentAccessor.getIssueManager()\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-69410\")\r\n\r\n/*25.11.22*/\r\ndef localTimeStamp\r\ndef localDate\r\n/*03.10.23*/\r\ndef DATETIME_OFFSET = properties['wf.tr.datetimewithoffset'].toString()\r\nlog.debug \"DATETIME_OFFSET: \" + DATETIME_OFFSET\r\nif (DATETIME_OFFSET != null &amp;&amp; DATETIME_OFFSET != 'null'){\r\n\r\ndef siteCF = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SITE\")[0];\r\ndef site, siteKey, siteObject, visibility, visibilityKey\r\nif (issue.getCustomFieldValue(siteCF) != null) {\r\n    site = issue.getCustomFieldValue(siteCF).toString()\r\n    siteKey = site.substring(site.lastIndexOf('(') + 1, site.lastIndexOf(')'))\r\n    siteObject = objectFacade.loadObjectBean(siteKey)\r\n    visibility = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_VISIBILITY_KEY\")[0]\r\n    visibilityKey = issue.getCustomFieldValue(visibility)[0].toString().substring(issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf('(') + 1, issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf(')'))\r\n} else {\r\n    visibility = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_INDIRECT_JOB_TKT_VISIBILITY\")[0]\r\n    visibilityKey = issue.getCustomFieldValue(visibility)[0].toString().substring(issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf('(') + 1, issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf(')'))\r\n}\r\ndef timeZone\r\ndef companyRef = objectFacade.loadObjectAttributeBean(objectFacade.loadObjectBean(visibilityKey).getId(), properties['iobj.visibilityKey.companyRef'].toString()).getObjectAttributeValueBeans();\r\nlog.info \"companyRef: \" + companyRef\r\ndef companyRefId = companyRef[0].getReferencedObjectBeanId()\r\nlog.debug \"companyRefId:\" + companyRefId\r\nif (issue.getCustomFieldValue(siteCF) != null &amp;&amp; objectFacade.loadObjectAttributeBean(siteObject.getId(), \"SITE_REF\")) {\r\n    obTriage = objectFacade.loadObjectAttributeBean(siteObject.getId(), \"SITE_REF\").createMutable()\r\n    s = obTriage.getObjectAttributeValueBeans()\r\n    s = s.toString()\r\n    sKey = s.substring(s.lastIndexOf('(') + 1, s.lastIndexOf(')'))\r\n    if (objectFacade.loadObjectAttributeBean(sKey.toInteger(), \"TIME_ZONE\")) {\r\n        obTriage = objectFacade.loadObjectAttributeBean(sKey.toInteger(), \"TIME_ZONE\").createMutable()\r\n        timeZone = obTriage.getObjectAttributeValueBeans()\r\n        timeZone = timeZone[0].getValue()\r\n        log.debug \"TimeZone da Site: \" + timeZone\r\n    } else {\r\n        if (objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\")) {\r\n            obTriage = objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\").createMutable()\r\n            timeZone = obTriage.getObjectAttributeValueBeans()\r\n            timeZone = timeZone[0].getValue()\r\n            log.debug \"TimeZone da Company: \" + timeZone\r\n        }\r\n    }\r\n} else {\r\n    if (objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\")) {\r\n        obTriage = objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\").createMutable()\r\n        timeZone = obTriage.getObjectAttributeValueBeans()\r\n        timeZone = timeZone[0].getValue()\r\n        log.debug \"TimeZone da Company: \" + timeZone\r\n    }\r\n}\r\nif (!timeZone) {\r\n    timeZone = \"Europe/Rome\"\r\n}\r\nlog.debug \"timeZone: \" + timeZone\r\nlocalTimeStamp = (new Timestamp((new Date(new Date().getTime() - TimeZone.getDefault().getRawOffset() + TimeZone.getTimeZone(timeZone.toString()).getRawOffset())).time)).toString()\r\nlocalDate = new Date(new Date().getTime() - TimeZone.getDefault().getRawOffset() + TimeZone.getTimeZone(timeZone.toString()).getRawOffset())\r\n\r\n}else{\r\n\r\n    localTimeStamp =  (new Timestamp((new Date()).time)).toString()\r\n    localDate =  new Date()\r\n\r\n}\r\n\r\nlog.debug \"localTimeStamp: \" + localTimeStamp\r\nlog.debug \"localDate: \" + localDate\r\n/*25.11.22*/\r\n\r\ndef searchService = ComponentAccessor.getComponent(SearchProvider)\r\n\r\ndef trovato=false, reopened=false\r\nfor (s in ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplier'].toString())){\r\n    if (issue.getCustomFieldValue(s) != null){\r\n        trovato=true\r\n    }\r\n}\r\n\r\ndef user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\r\n\r\n//Se il ticket \u00e8 eseguito da tecnici interni eseguo il trace automatico dei tempi\r\nif(!trovato){\r\n    \r\n    def currentUser = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENT_USER\")[0]\r\n    def onSiteTechsTraceField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIAN_ACTIVITIES_TRACE_WORK\")[0];\r\n    def onSiteTechsField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIANS_ONSITE\")[0];\r\n    def OnSiteTechObjects = new ArrayList();\r\n    int OPAA = properties['ischema.aa.id'].toString().toInteger()\r\n    int DBO = properties['ischema.dbo.id'].toString().toInteger()\r\n    \r\n    /* ------------ DEFINE ACTION TO BE TRACED AND SET TO BE DONE ------------- */\r\n    def ACTION = properties['wf.tr.jobCompleted.action'].toString()\r\n    def SET = properties['wf.tr.jobCompleted.set'].toString()\r\n    \r\n    def ONSITE_TECH_REPORT_OBJ_TYPE=properties['iobj.onSiteTechReport'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_NAME=properties['iobj.onSiteTechReport.name.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF=properties['iobj.onSiteTechReport.technicianRef.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED=properties['iobj.onSiteTechReport.jobCompleted.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_JOB_STARTED=properties['iobj.onSiteTechReport.jobStarted.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_TRACE_ACTION=properties['iobj.onSiteTechReport.traceAction.id'].toString().toInteger()\r\n    \r\n    log.warn \"********************** CONFIRM ASSET **********************\"\r\n    def objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = Technician AND TECHNICIAN_REF.TECH_ACCOUNT =\\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\"\")\r\n    log.info \"iql: \" + \"objectType = Technician AND TECHNICIAN_REF.TECH_ACCOUNT =\\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\"\"\r\n    \r\n    for(technician in objects){\r\n        //extract insight key ang get object\r\n        def tech=technician.toString()\r\n        def techKey = tech.substring(tech.lastIndexOf('(')+1,tech.lastIndexOf(')'))\r\n        def techName = tech.substring(0,tech.lastIndexOf('(')-1)\r\n        def techObject = objectFacade.loadObjectBean(techKey)\r\n        log.info \"techKey: \" + techKey\r\n        log.info (\"techName: \" + techName)\r\n        log.info (\"techObject: \" + techObject)\r\n        log.info \"SET: \" +SET\r\n        if (SET == \"JOB_COMPLETED\"){\r\n            /*SEARCH OBJECT TO BE UPDATED*/\r\n            objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key=\\\"\" + issue.key + \"\\\")\")\r\n            log.warn \"iql: \" + \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key=\\\"\" + issue.key + \"\\\")\"\r\n            \r\n            if(objects.size() &gt; 0){\r\n                /*UPDATE JOB_COMPLETED ON SELECTED OBJECT*/     \r\n                /*30.06.2022 AF Se \u00e8 l'ultimo sub-task a essere completato NON salvo il timestamp di fine lavoro che verr\u00e0 compilato a chiusura del ticket padre*/\r\n                SubTaskManager subTaskManager = ComponentAccessor.getSubTaskManager();\r\n                Collection subTasks = issue.getParentObject().getSubTaskObjects()\r\n                def last = true\r\n                if (!subTasks.empty) {\r\n                    subTasks.each {\r\n                        if(!it.getStatus().name.toString().equals(\"Done\") &amp;&amp; it.key != issue.key){\r\n                            last=false\r\n                            log.info \"last\"\r\n                        }\r\n                    }\r\n\r\n                    if(!last){\r\n                        def obj = objectFacade.loadObjectBean(objects[0].getId());\r\n                        attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED); \r\n                        log.info \"attribType: \" + attribType.toString()\r\n                        newAttrib = obj.createObjectAttributeBean(attribType);\r\n                        def newAttribValue = newAttrib.createObjectAttributeValueBean();\r\n            \r\n                        try {\r\n                            newAttribValue.setDateValue(localDate);\r\n                        } catch (Exception vie) {\r\n                            log.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType.toString() + \" to \" + localTimeStamp + \". Exiting.\");\r\n                            log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                            return false;\r\n                        }\r\n                        \r\n                        def attribValues = newAttrib.getObjectAttributeValueBeans();\r\n                        attribValues.add(newAttribValue);\r\n                        newAttrib.setObjectAttributeValueBeans(attribValues);\r\n                        \r\n                        try {\r\n                            newAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\r\n                        } catch (Exception vie) {\r\n                            log.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\r\n                            log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                            return false;\r\n                        }\r\n                    }else{\r\n                        /*Verificare se un altro PM Task prima di questo era stato considerato ultimo (ad es. perch\u00e8 dopo averli completati tutti ho fatto aggiungi impianto)*/\r\n                        /*Se si, aggiornare JOB_COMPLETED sul precedente = a JOB_STARTED di quello corrente e considerare questo come ultimo*/\r\n                        /*SEARCH OBJECT TO BE UPDATED*/\r\n\r\n                        lastObjects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key IN (\" + issue.getParentObject().getSubTaskObjects().minus(issue).toString().replaceAll(\"[\\\\[\\\\]]\", \"\") + \"))\")\r\n                        log.warn \"iql: \" + \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key IN (\" + issue.getParentObject().getSubTaskObjects().minus(issue).toString().replaceAll(\"[\\\\[\\\\]]\", \"\") + \"))\"\r\n\r\n                        if(lastObjects.size()&gt;0){\r\n                            log.debug lastObjects[0]\r\n                            def lastObj = objectFacade.loadObjectBean(lastObjects[0].getId());\r\n                            attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED); \r\n                            log.info \"attribType: \" + attribType.toString()\r\n                            newAttrib = lastObj.createObjectAttributeBean(attribType);\r\n                            def newAttribValue = newAttrib.createObjectAttributeValueBean();\r\n                \r\n                            /*Get JOB_STARTED from current obj*/\r\n                            def obTriage = objectFacade.loadObjectAttributeBean(objects[0].getId(), \"JOB_STARTED\").createMutable()\r\n                            def started = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n\r\n                            try {\r\n                                newAttribValue.setDateValue(started);\r\n                            } catch (Exception vie) {\r\n                                log.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType.toString() + \" to \" + localTimeStamp+ \". Exiting.\");\r\n                                log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                                return false;\r\n                            }\r\n                            \r\n                            def attribValues = newAttrib.getObjectAttributeValueBeans();\r\n                            attribValues.add(newAttribValue);\r\n                            newAttrib.setObjectAttributeValueBeans(attribValues);\r\n                            \r\n                            try {\r\n                                newAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\r\n                            } catch (Exception vie) {\r\n                                log.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\r\n                                log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                                return false;\r\n                            }\r\n\r\n                            def jqlSearch = \"project = '\" + issue.getProjectObject().name + \"' AND issuetype IN ('Planned Maintenance Task') AND key != '\" + issue.key.toString() + \"' AND OP_TECHNICIAN_ACTIVITIES_TRACE_WORK IN iqlFunction('objectSchema = \\\"Operation Portal AA\\\" AND objectType = OnSite_Tech_Report AND objectKey = OPAA-\" + lastObjects[0].getId() + \"')\"\r\n                            log.debug \"ricerca: \" + jqlSearch\r\n                            def query = jqlQueryParser.parseQuery(jqlSearch)\r\n                            log.debug \"query: \" + query\r\n                            def search = searchService.search(user, query, PagerFilter.getUnlimitedFilter())\r\n                            def found=false\r\n                            def foundOutward=false\r\n                            def linkedIssue\r\n                            if (search.results) {\r\n                                //Execute update SO e SC on the resulting issue\r\n                                def i = search.results.first()\r\n                                def requestMethod\r\n                                def baseURL\r\n                                URL url\r\n                                HttpURLConnection connection\r\n\r\n                                requestMethod = \"POST\";\r\n\r\n                                def body_req = []\r\n                                body_req = [\r\n                                    \"issueKey\": i.key,\r\n                                    \"status\": \"CLO\"\r\n                                ] \r\n\r\n                                baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\r\n                                log.debug \"body_req SN: \" + body_req\r\n                                log.debug \"baseURL SN: \" + baseURL\r\n                                url = new URL(baseURL)\r\n                                connection = (HttpURLConnection)url.openConnection();\r\n                                connection.setRequestMethod(requestMethod);\r\n                                connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n                                connection.setRequestProperty(\"Accept\", \"*/*\");\r\n                                connection.setDoOutput(true);\r\n                                connection.setDoInput(true);\r\n                                connection.outputStream\r\n                                connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\r\n                                log.debug connection.outputStream\r\n                                connection.connect();\r\n\r\n                                def output = new ArrayList()\r\n                                def eList = new ArrayList()\r\n                                def eListErrors = new ArrayList()\r\n                                def errorMsgs = new ArrayList()\r\n\r\n                                if (!connection.getResponseCode().toString().equals(\"200\")){\r\n                                    log.debug \"url: \" + url\r\n                                    log.debug \"ResponseCode:\" + connection.getResponseCode()\r\n                                    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\r\n                                    eListErrors.add(\"E\")\r\n                                    eListErrors.add(\"SN_UPDATE\")\r\n                                    errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\r\n                                    eListErrors.add(errorMsgs)\r\n                                    eList.add(eListErrors)\r\n\r\n                                    output.add(eList)\r\n                                    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\r\n                                }else{\r\n                                    /** La service confirmation va generata solo nel caso di tecnici interni **/\r\n                                    if(false){ /** --&gt; sostituire il false con la verifica dei tecnici interni **/\r\n                                            body_req = [\r\n                                            \"issueKey\": i.key,\r\n                                        ] \r\n\r\n                                        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/order/confirmation\"\r\n                                        log.debug \"body_req SC: \" + body_req\r\n                                        log.debug \"baseURL SC: \" + baseURL\r\n                                        url = new URL(baseURL)\r\n                                        connection = (HttpURLConnection)url.openConnection();\r\n                                        connection.setRequestMethod(requestMethod);\r\n                                        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n                                        connection.setRequestProperty(\"Accept\", \"*/*\");\r\n                                        connection.setDoOutput(true);\r\n                                        connection.setDoInput(true);\r\n                                        connection.outputStream\r\n                                        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\r\n                                        log.debug connection.outputStream\r\n                                        connection.connect();\r\n\r\n                                        output = new ArrayList()\r\n                                        eList = new ArrayList()\r\n                                        eListErrors = new ArrayList()\r\n                                        errorMsgs = new ArrayList()\r\n\r\n                                        if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\r\n                                            log.debug \"url: \" + url\r\n                                            log.debug \"ResponseCode:\" + connection.getResponseCode()\r\n                                            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\r\n                                            eListErrors.add(\"E\")\r\n                                            eListErrors.add(\"SC_CREATE\")\r\n                                            errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\r\n                                            eListErrors.add(errorMsgs)\r\n                                            eList.add(eListErrors)\r\n\r\n                                            output.add(eList)\r\n                                            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                }                \r\n                \r\n            }else{\r\n                /*ERROR!!*/\r\n            }\r\n            \r\n        }else{\r\n            /*CREATE NEW OBJECT: ONSITE_TECH_REPORT_OBJ_TYPE*/\r\n            def objectTypeOnSiteTechReport = objectTypeFacade.loadObjectTypeBean(ONSITE_TECH_REPORT_OBJ_TYPE);\r\n            def newObjectBean = objectTypeOnSiteTechReport.createMutableObjectBean();\r\n            \r\n            def objectAttributeBeans = new ArrayList();\r\n            def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_NAME); \r\n            def startedObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_JOB_STARTED); \r\n            def actionObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TRACE_ACTION); \r\n            \r\n            objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, nameObjectTypeAttributeBean, techName));\r\n            objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, startedObjectTypeAttributeBean, localTimeStamp));\r\n            objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, actionObjectTypeAttributeBean, ACTION));\r\n            \r\n            newObjectBean.setObjectAttributeBeans(objectAttributeBeans);\r\n            /* Store the object into Insight. The new ObjectBean will be updated with an unique ID */\r\n            try {\r\n                newObjectBean = objectFacade.storeObjectBean(newObjectBean);\r\n                log.warn(\"newObjectBean: \" + newObjectBean);\r\n            } catch (Exception vie) {\r\n                log.warn(\"Could not create issue due to validation exception:\" + vie.getMessage());\r\n            }\r\n            \r\n            /* Update TECHNICIAN_REF on the newObject */\t\t        \r\n            def objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF).createMutable() //The id of the attribute\r\n            \r\n            /* Create the new attribute bean based on the value */\r\n            def newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, techKey);\r\n            /* Load the attribute bean */\r\n            def objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), techKey);\r\n            if (objectAttributeBean != null) {\r\n                /* If attribute exist reuse the old id for the new attribute */\r\n                newObjectAttributeBean.setId(objectAttributeBean.getId());\r\n            }\r\n            /* Store the object attribute into Insight. */\r\n            try {\r\n                objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);\r\n            } catch (Exception vie) {\r\n                log.warn(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\r\n            }  \r\n            \r\n            OnSiteTechObjects.add(newObjectBean)\r\n         \r\n            log.info (\"OnSiteTechObjects: \" + OnSiteTechObjects)\r\n            \r\n            if (!OnSiteTechObjects.isEmpty()) {\r\n                MutableIssue mi = (MutableIssue) issue;\r\n                mi.setCustomFieldValue(onSiteTechsTraceField, OnSiteTechObjects);\r\n                ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n                \r\n                mi.setCustomFieldValue(onSiteTechsField, OnSiteTechObjects);\r\n                ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n            }\r\n        }\r\n    }   \r\n}    ","scriptPath":null,"parameters":{}}</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="field.name">resolution</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
              <arg name="field.value">10103</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </global-actions>
  <common-actions>
    <action id="41" name="Start Progress" view="fieldscreen">
      <meta name="jira.description" />
      <meta name="jira.fieldscreen.id">19910</meta>
      <restrict-to>
        <conditions type="AND">
          <conditions type="OR">
            <condition type="class">
              <arg name="conditionList">3</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
              <arg name="comparisonType">1</arg>
              <arg name="class.name">com.googlecode.jsu.workflow.condition.ValueFieldCondition</arg>
              <arg name="ºè">f78b5e13-a779-44f3-bc72-27a44c6ee749</arg>
              <arg name="fieldValue" />
              <arg name="fieldsList">customfield_23929</arg>
            </condition>
            <condition type="class">
              <arg name="FIELD_FUNCTION_ID">169f9e32-777e-4c33-ba96-d598a11d602e</arg>
              <arg name="FIELD_NOTES">Current status is Risks Assessment</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
              <arg name="FIELD_CONDITION">{"script":"issue.getStatus().name == \"Risks Assessment\"","scriptPath":null}</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
            </condition>
          </conditions>
          <condition type="class">
            <arg name="FIELD_FUNCTION_ID">519e584f-1e24-4d74-bbb9-ec343c3be7f1</arg>
            <arg name="FIELD_NOTES">Enabled only if parent task is "In Progress" and OP_TKT_ASSIGNED_TO != ASSISTANT</arg>
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
            <arg name="FIELD_CONDITION">{"script":"import com.atlassian.jira.issue.Issue\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport org.apache.log4j.Category\r\nimport groovy.json.JsonBuilder\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\nimport com.atlassian.jira.issue.IssueManager\r\nimport com.atlassian.jira.issue.ModifiedValue\r\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\r\nimport java.text.SimpleDateFormat;\r\nimport com.atlassian.jira.issue.index.IssueIndexingService\r\n\r\ndef assignedTo =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_ASSIGNED_TO\")[0]\r\nlog.debug \"issue.getCustomFieldValue(assignedTo): \" + issue.getParentObject().getCustomFieldValue(assignedTo)\r\n\r\n((issue.parentObject?.status?.name == \"Finalizing Work\" || issue.parentObject?.status?.name == \"In Progress\") &amp;&amp; !issue.getParentObject().getCustomFieldValue(assignedTo).toString().equals(\"ASSISTANT\"))","scriptPath":null,"parameters":{}}</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
          </condition>
        </conditions>
      </restrict-to>
      <validators>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">da95600f-b12d-41a9-ba8a-97f002bd20c1</arg>
          <arg name="FIELD_NOTES">Check PM operations on PM task &amp;&amp; Required fields if RISKS_ASSESSMENT NOT NULL</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport com.atlassian.jira.issue.IssueManager\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport java.text.SimpleDateFormat;\nimport com.atlassian.jira.issue.index.IssueIndexingService\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-4159\")\n\nlog.debug \"Transazione Complete - Primo validator\"\nlog.debug \"Transazione Complete - Primo validator - Issue: \" + issue\n\ndef errors = false\ndef warnings = false\ndef missingPMoperations = false\n\ndef pmOperations =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_PM_OPERATIONS_ODS\")[0]\ndef assignedTo =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_ASSIGNED_TO\")[0]\n\nlog.debug \"issue.getCustomFieldValue(pmOperations): \" + issue.getCustomFieldValue(pmOperations)\nlog.debug \"issue.getCustomFieldValue(assignedTo): \" + issue.getParentObject().getCustomFieldValue(assignedTo)\nif(issue.getCustomFieldValue(pmOperations)==null &amp;&amp; !issue.getParentObject().getCustomFieldValue(assignedTo).toString().equals(\"ASSISTANT\")){\n    errors=true\n    missingPMoperations=true\n}\n\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]\ndef dynamicRisksAss =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_ASSET_RISKS_ASSESSMENT\")[0]\n\ndef errorMandatoryFields = new ArrayList()\ndef errorRejectedTkt = false\n\nif(issue.getCustomFieldValue(dynamicRisksAss)!=null &amp;&amp; (String)issue.getCustomFieldValue(dynamicRisksAss) != \"\" &amp;&amp; !issue.getCustomFieldValue(dynamicRisksAss).toString().equals(\"\")){\n    /*Ciclare tutti gli oggetti associati al campo*/\n    //insight classes &amp; components\n    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n    def risksAssessment = issue.getCustomFieldValue(dynamicRisksAss)\n    def dra5, dra6\n    log.debug \"risksAssessment: \" + risksAssessment\n    for(i in risksAssessment){\n        //extract insight key ang get object\n        def risk=i.toString()\n        def riskKey = risk.substring(risk.lastIndexOf('(')+1,risk.lastIndexOf(')'))\n        def riskObject = objectFacade.loadObjectBean(riskKey)\n\n        def obTriage\n        if(objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA1\")==null){\n            errors=true\n            errorMandatoryFields.add(\"Dynamic Risk Assessment Completed for the job\")\n            log.debug \"errorMandatoryFields.add(Dynamic Risk Assessment Completed for the job)\"\n        }\n\n        if(objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA2\")==null){\n            errors=true\n            errorMandatoryFields.add(\"All hazards covered by the Risk Assessment?\")\n            log.debug \"errorMandatoryFields.add(All hazards covered by the Risk Assessment?)\"\n        }\n\n        if(objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA2\")!=null &amp;&amp; objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA2\").createMutable().getObjectAttributeValueBeans()[0].value.toString()==\"NO\" &amp;&amp; (objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA3\")==null || objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA3\").toString()==\"\" )){\n            errors=true\n            errorMandatoryFields.add(\"Complete additional outlining hazards and control measures\")\n            log.debug \"errorMandatoryFields.add(Complete additional outlining hazards and control measures)\"\n        }\n\n        if(objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA4\")==null){\n            errors=true\n            errorMandatoryFields.add(\"Method Statement available for the job?\")\n            log.debug \"errorMandatoryFields.add(Method Statement available for the job?)\"\n        }\n\n        if(objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA5\")==null){\n            errors=true\n            errorMandatoryFields.add(\"Do you have the correct tools and PPE to carry out the task?\")\n            log.debug \"errorMandatoryFields.add(Do you have the correct tools and PPE to carry out the task?)\"\n        }else{\n            obTriage = objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA5\").createMutable()\n            dra5 = obTriage.getObjectAttributeValueBeans()[0].value.toString()\n            if(dra5.equals(\"NO\")){\n                errorRejectedTkt=true\n                warnings=true\n                log.debug \"dra5: \" + dra5\n            }\n        }\n\n        if(objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA6\")==null){\n            errors=true\n            errorMandatoryFields.add(\"Do you have all the information and training to complete the task?\")\n            log.debug \"errorMandatoryFields.add(Do you have all the information and training to complete the task?)\"\n        }else{\n            obTriage = objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA6\").createMutable()\n            dra6 = obTriage.getObjectAttributeValueBeans()[0].value.toString()\n            if(dra6.equals(\"NO\")){\n                errorRejectedTkt=true\n                warnings=true\n                log.debug \"dra6: \" + dra6\n            }\n        }\n\n        log.debug issue.getCustomFieldValue(transitionCheck)\n        log.debug errorMandatoryFields\n\n    }\n}\n\n\ndef output = new ArrayList()\n\nif (!errors &amp;&amp; !warnings){\n    return true\n}else{\n    if(!errors &amp;&amp; warnings){\n        //Se ci sono solo warnings verifico se l'utente ha gi\u00e0 dichiarato di voler proseguire comunque\n        // - transition field \"OPAA_CHECK_AND_CONFIRM\"=\"Yes\"\n        // - in caso contrario invio i warning a FE\n\n        //log.debug \"transitionCheck: \" + issue.getCustomFieldValue(transitionCheck)\n        //log.debug \"result: \" + issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")\n        if(issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")){\n            //log.debug \"return true\"\n            return true\n        }else{\n            def wList = new ArrayList()\n\n            if(errorRejectedTkt){\n                def eListRejected = new ArrayList()\n                eListRejected.add(\"W\")\n                eListRejected.add(\"REJECTED_DUE_TO_RISKS_ASSESSMENT\")\n                eListRejected.add(null)\n                wList.add(eListRejected)\n            }\n            output.add(wList)\n            log.debug \"throw exception: \" + output.toString()\n            throw new InvalidInputException('{\"W\":\"' + output.toString() + '\"}')\n            //throw new InvalidInputException(\"W\", output.toString())   \n        }\n\n    }\n    if(errors &amp;&amp; !warnings){\n        def eList = new ArrayList()\n\n        if(errorMandatoryFields.size() &gt; 0){\n            def eListMandatory = new ArrayList()\n            eListMandatory.add(\"E\")\n            eListMandatory.add(\"MANDATORY_FIELDS\")\n            eListMandatory.add(null)\n            eListMandatory.add(errorMandatoryFields)\n            eList.add(eListMandatory)\n        }\n\n        if(missingPMoperations){\n            def eListSubTaskCompleted = new ArrayList()\n            eListSubTaskCompleted.add(\"E\")\n            eListSubTaskCompleted.add(\"MISSING_PM_OPERATIONS\")\n            eListSubTaskCompleted.add(null)\n            eList.add(eListSubTaskCompleted)\n        }\n\n        output.add(eList)\n        log.debug \"throw exception: \" + output.toString()\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        //throw new InvalidInputException(\"E\", output.toString())  \n\n        output.add(eList)\n        log.debug \"throw exception: \" + output.toString()\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        //throw new InvalidInputException(\"E\", output.toString())   \n    }\n    if(errors &amp;&amp; warnings){\n        def eList = new ArrayList()\n        def wList = new ArrayList()\n        if(errorMandatoryFields.size() &gt; 0){\n            def eListMandatory = new ArrayList()\n            eListMandatory.add(\"E\")\n            eListMandatory.add(\"MANDATORY_FIELDS\")\n            eListMandatory.add(null)\n            eListMandatory.add(errorMandatoryFields)\n            eList.add(eListMandatory)\n        }\n\n        if(errorRejectedTkt){\n            def eListRejected = new ArrayList()\n            eListRejected.add(\"W\")\n            eListRejected.add(\"REJECTED_DUE_TO_RISKS_ASSESSMENT\")\n            eListRejected.add(null)\n            wList.add(eListRejected)\n        }\n\n        if(missingPMoperations){\n            def eListSubTaskCompleted = new ArrayList()\n            eListSubTaskCompleted.add(\"E\")\n            eListSubTaskCompleted.add(\"MISSING_PM_OPERATIONS\")\n            eListSubTaskCompleted.add(null)\n            eList.add(eListSubTaskCompleted)\n        }\n\n        output.add(eList)\n        output.add(wList)\n        log.debug \"throw exception: \" + output.toString()\n        throw new InvalidInputException('{\"WE\":\"' + output.toString() + '\"}')\n        //throw new InvalidInputException(\"WE\", output.toString())  \n    }\n}\n","scriptPath":null,"parameters":{}}</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="v+nWù">¶»ž</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">b24b77fd-c8bd-438e-bfca-049838725b25</arg>
          <arg name="FIELD_NOTES">SAP: update SN status</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\n\nrequestMethod = \"POST\";\n\ndef body_req = []\nbody_req = [\n    \"issueKey\": issue.key,\n    \"status\": \"INP\"\n] \n\n    \nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\nlog.debug \"baseURL SN: \" + baseURL\nlog.debug \"body_req SN: \" + body_req\nurl = new URL(baseURL)\nconnection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.outputStream\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\nlog.debug connection.outputStream\nconnection.connect();\n\ndef output = new ArrayList()\ndef eList = new ArrayList()\ndef eListErrors = new ArrayList()\ndef errorMsgs = new ArrayList()\n\nif (!connection.getResponseCode().toString().equals(\"200\") &amp;&amp; !connection.getResponseCode().toString().equals(\"201\")){\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n    eListErrors.add(\"E\")\n    eListErrors.add(\"SN_UPDATE\")\n    errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n    eListErrors.add(errorMsgs)\n    eList.add(eListErrors)\n\n    output.add(eList)\n    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n}else{\n    /** SERVICE ORDER CREATION **/\n    body_req = [\n        \"issueKey\": issue.key\n    ] \n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\n\n    log.debug \"baseURL SO: \" + baseURL\n    log.debug \"body_req SO: \" + body_req\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    output = new ArrayList()\n    eList = new ArrayList()\n    eListErrors = new ArrayList()\n    errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        \n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n        \n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n        log.debug \"errors: \" +  json_object.errors.toString()\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"SO_CREATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n}","scriptPath":null,"parameters":{}}</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="v+nWù">¶»ž</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">0beaf9db-411f-4805-a98b-8af2e6f07abc</arg>
          <arg name="FIELD_NOTES">OP : validator backend call</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.issue.fields.CustomField\r\nimport com.atlassian.jira.issue.CustomFieldManager\r\nimport com.atlassian.jira.workflow.JiraWorkflow\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenLayoutItem\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenTab\r\nimport com.atlassian.jira.issue.fields.FieldManager\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreen\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenManager\r\nimport com.opensymphony.workflow.loader.ActionDescriptor\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.workflow.WorkflowManager\r\nimport groovy.json.StreamingJsonBuilder\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\n\r\ndef baseURL\r\ndef responseBody\r\n\r\ntry {\r\n    Properties properties = new Properties()\r\n    File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\r\n    propertiesFile.withInputStream {\r\n        properties.load(it)\r\n    }\r\n\r\n    def serverBase = String.format(\"http://%s/op\", properties['api.env'])\r\n    def transactionAction = \"validators\"\r\n\r\n    URL url\r\n    def requestMethod = \"POST\"\r\n\r\n    baseURL = String.format(\"%s/rest/jira/workflows/%s/%s\", serverBase, transientVars.actionId, transactionAction)\r\n\r\n    log.debug(\"Composing baseURL as '${baseURL}'\")\r\n\r\n    WorkflowManager workflowManager = ComponentAccessor.getWorkflowManager()\r\n    JiraWorkflow jiraWorkflow = workflowManager.getWorkflow(transientVars.issue)\r\n\r\n    CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager()\r\n\r\n    log.debug(jiraWorkflow.getName())\r\n\r\n    ActionDescriptor ad = workflowManager.getActionDescriptor(transientVars.issue, transientVars.actionId)\r\n\r\n    log.debug(\"ActionDescriptor Name: ${ad.getName()}\") // Genera Rapporto di Intervento FAAC\r\n    log.debug(\"ActionDescriptor MetaAttrs: ${ad.getMetaAttributes()}\") // {opsbar-sequence=10, jira.description=, jira.fieldscreen.id=19910}\r\n\r\n    def adMeta = ad.getMetaAttributes()\r\n    String fieldScreenId = adMeta.get(\"jira.fieldscreen.id\");\r\n    log.debug(\"Field screen id: ${fieldScreenId}\")\r\n\r\n    Map&lt;String, Object&gt; customFieldMap = new HashMap&lt;&gt;()\r\n    if (fieldScreenId) {\r\n        FieldScreenManager fieldScreenManager = ComponentAccessor.getComponent(FieldScreenManager.class);\r\n        FieldScreen fieldScreen = fieldScreenManager.getFieldScreen(Long.valueOf(fieldScreenId.toString()));\r\n        List&lt;FieldScreenTab&gt; fsts = fieldScreen.getTabs();\r\n        for (FieldScreenTab fst: fsts) {\r\n            List&lt;FieldScreenLayoutItem&gt; qwe = fst.getFieldScreenLayoutItems();\r\n            for (FieldScreenLayoutItem fsli: qwe) {\r\n                if (fsli.getFieldId() == null) {\r\n                    continue;\r\n                }\r\n                CustomField customField = customFieldManager.getCustomFieldObject(fsli.getFieldId());\r\n                if (customField == null) {\r\n                    continue;\r\n                }\r\n                def customFieldValue = issue.getCustomFieldValue(customField);\r\n                customFieldMap.put(fsli.getFieldId(), customFieldValue == null ? null : customFieldValue.toString())\r\n            }\r\n        }\r\n    }\r\n    log.debug(\"customFieldMap: ${customFieldMap}\")\r\n\r\n    def bodyReq = [\r\n        \"issueTypeId\": issue.issueTypeId,\r\n        \"issueKey\": issue.key,\r\n        \"actionName\": ad.getName(),\r\n        \"jiraWorkflowName\": jiraWorkflow.getName(),\r\n        \"customFieldMap\": customFieldMap,\r\n        \"properties\": properties\r\n    ]\r\n\r\n    log.debug(\"Calling [${requestMethod}] ${baseURL} with body ${bodyReq}\")\r\n\r\n    url = new URL(baseURL)\r\n    HttpURLConnection connection = (HttpURLConnection) url.openConnection()\r\n    connection.setRequestMethod(requestMethod)\r\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\")\r\n    connection.setRequestProperty(\"Accept\", \"*/*\")\r\n    connection.setDoOutput(true)\r\n    connection.setDoInput(true)\r\n    connection.outputStream.withWriter(\"UTF-8\") {\r\n        new StreamingJsonBuilder(it, bodyReq)\r\n    }\r\n\r\n    connection.connect()\r\n    def responseCode = connection.getResponseCode().toString()\r\n\r\n    log.debug(\"Response HttpStatusCode: ${responseCode}\")\r\n\r\n    // If backend replies with 200 then the condition is passed\r\n    if (\"200\".equals(responseCode)) {\r\n        log.debug(\"Validator passed!\")\r\n    } else {\r\n\r\n        responseBody = ((HttpURLConnection) connection).errorStream.text\r\n        log.debug(\"Validator not passed, responseBody: ${responseBody}\")\r\n\r\n        // testing without redeploying each time\r\n        //responseBody = '{\"W\": \"[[[W, CONFIRM_RISK_ANALYSIS, null]]]\"}'\r\n\r\n        throw new InvalidInputException(responseBody)\r\n    }\r\n} catch (Exception e) {\r\n    //This is an exception in the script\r\n    log.debug(\"Exception raised calling endpoint ${baseURL}\")\r\n    log.error(e)\r\n    if (e instanceof InvalidInputException) {\r\n        throw e\r\n    }\r\n    throw new InvalidInputException('{\"E\": \"[[[ Validator failed ]]]\" }')\r\n}","scriptPath":null}</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="Not Done" status="‰Þ" step="7">
          <post-functions>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">e6bbfb07-a70c-482d-b861-b5ad194fda33</arg>
              <arg name="FIELD_NOTES">Create obj "Checklist" - NOT for ASSISTANT tickets</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":" import com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.issue.Issue\r\nimport com.atlassian.jira.issue.MutableIssue;\r\nimport com.atlassian.jira.event.type.EventDispatchOption;\r\nimport org.apache.log4j.Level\r\nimport com.atlassian.jira.issue.IssueManager\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File('/var/atlassian/application-data/shared/scripts/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\"); \r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n  \r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\r\n  \r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\"); \r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n  \r\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\"); \r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\r\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \r\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\r\n\r\nIssueManager issueManager = ComponentAccessor.getIssueManager()\r\n//issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-196938\")\r\n\r\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\r\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\r\n\r\ndef asset = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_ASSET\")[0]\r\ndef ticketVisKey = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_VISIBILITY_KEY\")[0]\r\ndef checklistField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_ASSET_CHECKLIST\")[0]\r\ndef assignedTo = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_ASSIGNED_TO\")[0]\r\n\r\n/*27.01.2023 AF - Map issue type to filter available checklists*/\r\ndef issueTypeMap\r\nif(issue.issueType.name == \"Maintenance Ticket\"){\r\n    issueTypeMap = \"REPAIR_TICKET\"\r\n}\r\nif(issue.issueType.name == \"New Installation\"){\r\n    issueTypeMap = \"NEW_INSTALLATION_TICKET\"\r\n}\r\nif(issue.issueType.name == \"Modernization\"){\r\n    issueTypeMap = \"MODERNIZATION\"\r\n}\r\nif(issue.issueType.name == \"Planned Maintenance Task\"){\r\n    issueTypeMap = \"PM_TASK\"\r\n}\r\n    \r\n//30.03.2022 - ora messa condizione fissa in base alla company code, aggiungere flag sull'oggetto Company che la abiliti o meno alla dynamic risk assessment. Solo se la company referenziata nella visibility key \r\n//ha la dynamic risk assessment attiva fare quanto sotto\r\n//27.01.2023 - AF - tolta condizione che lega la generazione della checklist al codice company o alla presenza della dynamic risks assessment - se ci sono elementi Checklist viene creato, viceversa non viene creato nulla\r\n//if(issue.getCustomFieldValue(ticketVisKey)[0].toString().contains(\"1179\") || issue.getCustomFieldValue(ticketVisKey)[0].toString().contains(\"1078\")){\r\n\r\nif(issue.getCustomFieldValue(checklistField) == null &amp;&amp; issue.issueType.name != \"Planned Maintenance Ticket\" &amp;&amp; (issue.getCustomFieldValue(assignedTo) == null || !issue.getCustomFieldValue(assignedTo).toString().equals(\"ASSISTANT\"))){\r\n    log.info issue.getCustomFieldValue(asset)[0].toString()\r\n    def ass=issue.getCustomFieldValue(asset)[0].toString()\r\n    def assKey = ass.substring(ass.lastIndexOf('(')+1,ass.lastIndexOf(')'))\r\n    def assName = ass.substring(0,ass.lastIndexOf('(')-1)\r\n    def assObject = objectFacade.loadObjectBean(assKey)\r\n    log.info \"assKey: \" + assKey\r\n    log.info (\"assName: \" + assName)\r\n    log.info (\"assObject: \" + assObject)\r\n    \r\n    log.info objectFacade.loadObjectAttributeBean(assObject.getId(), \"PUBLIC_PRODUCT_TYPE_REF\").toString()\r\n    obTriage = objectFacade.loadObjectAttributeBean(assObject.getId(), \"PUBLIC_PRODUCT_TYPE_REF\").createMutable()\r\n    prodType = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n    log.info prodType.toString()\r\n\r\n    log.info issue.getCustomFieldValue(ticketVisKey)[0].toString()\r\n    def vis=issue.getCustomFieldValue(ticketVisKey)[0].toString()\r\n    def visKey = vis.substring(vis.lastIndexOf('(')+1,vis.lastIndexOf(')'))\r\n    def objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = Checklists AND ISSUE_TYPE IN (\" + issueTypeMap + \") AND PRODUCT_TYPE_REF.Key = DO-\" + prodType.toString() + \" AND object HAVING outboundReferences(objectType = Company AND object HAVING inboundReferences(objectType = \\\"Visibility Key\\\" AND Key = \" + visKey.toString() + \"))\")\r\n    log.warn \"iql: \" + \"objectType = Checklists AND ISSUE_TYPE IN (\" + issueTypeMap + \") AND PRODUCT_TYPE_REF.Key = DO-\" + prodType.toString() + \" AND object HAVING outboundReferences(objectType = Company AND object HAVING inboundReferences(objectType = \\\"Visibility Key\\\" AND Key = \" + visKey.toString() + \"))\"\r\n\r\n    if(objects.size() == 0){\r\n        objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = Checklists AND ISSUE_TYPE IN (\" + issueTypeMap + \") AND DEFAULT = true AND object HAVING outboundReferences(objectType = Company AND object HAVING inboundReferences(objectType = \\\"Visibility Key\\\" AND Key = \" + visKey.toString() + \"))\")\r\n        log.warn \"iql: \" + \"objectType = Checklists AND ISSUE_TYPE IN (\" + issueTypeMap + \") AND DEFAULT = true AND object HAVING outboundReferences(objectType = Company AND object HAVING inboundReferences(objectType = \\\"Visibility Key\\\" AND Key = \" + visKey.toString() + \"))\"\r\n    }\r\n\r\n    if(objects){\r\n        log.info objects[0].toString()\r\n        \r\n        log.info objectFacade.loadObjectAttributeBean(objects[0].getId(), \"CHECKLIST_NAME\").toString()\r\n        obTriage = objectFacade.loadObjectAttributeBean(objects[0].getId(), \"CHECKLIST_NAME\").createMutable()\r\n        checklist = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n        log.info checklist.toString().replaceAll(' - ','').replaceAll(' ','')\r\n        \r\n        def newObjId = properties['iobj.' + checklist.toString().replaceAll(' - ','').replaceAll(' ','') + '.id'].toInteger()\r\n        log.info \"id: \" + properties['iobj.' + checklist.toString().replaceAll(' - ','').replaceAll(' ','') + '.id'].toString()\r\n        def newObjNameId = properties['iobj.' + checklist.toString().replaceAll(' - ','').replaceAll(' ','') + '.Name.id'].toInteger()\r\n        def newObjCompletedId = properties['iobj.' + checklist.toString().replaceAll(' - ','').replaceAll(' ','') + '.completed.id'].toInteger()\r\n        log.info newObjNameId.toString()\r\n        \r\n        def checklistObjects = new ArrayList();\r\n        def objectAttributeBeans = new ArrayList();\r\n        def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(newObjNameId); \r\n        def completedObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(newObjCompletedId); \r\n        \r\n        def objectTypeChecklist = objectTypeFacade.loadObjectTypeBean(newObjId);\r\n        def newObjectBean = objectTypeChecklist.createMutableObjectBean();\r\n        \r\n        objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, nameObjectTypeAttributeBean, issue.key.toString()));\r\n        objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, completedObjectTypeAttributeBean, \"false\"));\r\n        \r\n        newObjectBean.setObjectAttributeBeans(objectAttributeBeans);\r\n        /* Store the object into Insight. The new ObjectBean will be updated with an unique ID */\r\n        try {\r\n            newObjectBean = objectFacade.storeObjectBean(newObjectBean);\r\n            log.warn(\"newObjectBean: \" + newObjectBean);\r\n        } catch (Exception vie) {\r\n            log.warn(\"Could not create issue due to validation exception:\" + vie.getMessage());\r\n        }\r\n        \r\n        checklistObjects.add(newObjectBean)\r\n        \r\n        log.info (\"checklistObjects: \" + checklistObjects)\r\n        def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\r\n        \r\n        if (!checklistObjects.isEmpty()) {\r\n            MutableIssue mi = (MutableIssue) issue;\r\n            mi.setCustomFieldValue(checklistField, checklistObjects);\r\n            ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n        }\r\n    }\r\n}     ","scriptPath":null,"parameters":{}}</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">2af2c064-c890-4054-9752-e564ed179102</arg>
              <arg name="FIELD_NOTES">Copy TRAVEL time from PM Ticket to PM Task if it is the first started</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport org.apache.log4j.Category\r\nimport groovy.json.JsonBuilder\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\nimport com.atlassian.jira.issue.IssueManager\r\nimport com.atlassian.jira.issue.ModifiedValue\r\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\r\nimport java.text.SimpleDateFormat;\r\nimport com.atlassian.jira.issue.index.IssueIndexingService\r\nimport com.atlassian.jira.jql.parser.JqlQueryParser\r\nimport com.atlassian.jira.bc.issue.search.SearchService\r\nimport com.atlassian.jira.user.util.UserUtil\r\nimport com.atlassian.jira.web.bean.PagerFilter\r\nimport com.atlassian.jira.issue.MutableIssue\r\nimport com.atlassian.jira.event.type.EventDispatchOption\r\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\r\nimport com.atlassian.jira.issue.index.IssueIndexingService\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.issue.Issue\r\nimport com.atlassian.jira.issue.MutableIssue;\r\nimport com.atlassian.jira.event.type.EventDispatchOption;\r\nimport org.apache.log4j.Level\r\nimport java.sql.Timestamp\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File('/var/atlassian/application-data/shared/scripts/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\"); \r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n  \r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\r\n  \r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\"); \r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n  \r\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\"); \r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\r\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \r\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\r\n\r\n\r\nIssueManager issueManager = ComponentAccessor.getIssueManager()\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-41566\")\r\ndef onSiteTechsTravelTraceField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIAN_ACTIVITIES_TRACE\")[0];\r\ndef toBeCopied=true\r\nfor (st in issue.getParentObject().getSubTaskObjects()){\r\n    if (st.getCustomFieldValue(onSiteTechsTravelTraceField) != null){\r\n        log.debug issue.getCustomFieldValue(onSiteTechsTravelTraceField)\r\n        toBeCopied=false\r\n    }\r\n}\r\n\r\nif(toBeCopied){\r\n    def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\r\n    MutableIssue mi = (MutableIssue) issue;\r\n    mi.setCustomFieldValue(onSiteTechsTravelTraceField, issue.getParentObject().getCustomFieldValue(onSiteTechsTravelTraceField));\r\n    ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n}","scriptPath":null}</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">27be30be-e476-4795-8f2e-5631bae4e69d</arg>
              <arg name="FIELD_NOTES"> IF OP_SUPPLIER IS EMPTY --&gt; Log Timestamp for Tech activity &amp; Link object to the ticket (OP_TECHNICIANS_ONSITE) </arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"   /* ------------------ ACTION START WORKING ------------------ */\r\n/* ------------------ TRACE_ACTION_STATUS = WORK ------------------ */\r\n/* ------------------ ACTION = JOB_STARTED ------------------ */\r\n\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.issue.Issue\r\nimport com.atlassian.jira.issue.MutableIssue;\r\nimport com.atlassian.jira.event.type.EventDispatchOption;\r\nimport org.apache.log4j.Level\r\nimport java.sql.Timestamp\r\nimport com.atlassian.jira.config.SubTaskManager\r\nimport com.atlassian.jira.issue.IssueManager;\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File('/var/atlassian/application-data/shared/scripts/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\"); \r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n  \r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\r\n  \r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\"); \r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n  \r\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\"); \r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\r\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \r\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\r\n\r\nIssueManager issueManager = ComponentAccessor.getIssueManager()\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-69415\")\r\n\r\ndef currentUser = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENT_USER\")[0]\r\ndef onSiteTechsTraceField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIAN_ACTIVITIES_TRACE_WORK\")[0];\r\ndef onSiteTechsField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIANS_ONSITE\")[0];\r\ndef OnSiteTechObjects = new ArrayList();\r\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\r\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\r\n\r\n/*25.11.22*/\r\ndef localTimeStamp\r\ndef localDate\r\n/*03.10.23*/\r\ndef DATETIME_OFFSET = properties['wf.tr.datetimewithoffset'].toString()\r\nlog.debug \"DATETIME_OFFSET: \" + DATETIME_OFFSET\r\nif (DATETIME_OFFSET != null &amp;&amp; DATETIME_OFFSET != 'null'){\r\n\r\ndef siteCF = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SITE\")[0];\r\ndef site, siteKey, siteObject, visibility, visibilityKey\r\nif (issue.getCustomFieldValue(siteCF) != null) {\r\n    site = issue.getCustomFieldValue(siteCF).toString()\r\n    siteKey = site.substring(site.lastIndexOf('(') + 1, site.lastIndexOf(')'))\r\n    siteObject = objectFacade.loadObjectBean(siteKey)\r\n    visibility = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_VISIBILITY_KEY\")[0]\r\n    visibilityKey = issue.getCustomFieldValue(visibility)[0].toString().substring(issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf('(') + 1, issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf(')'))\r\n} else {\r\n    visibility = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_INDIRECT_JOB_TKT_VISIBILITY\")[0]\r\n    visibilityKey = issue.getCustomFieldValue(visibility)[0].toString().substring(issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf('(') + 1, issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf(')'))\r\n}\r\ndef timeZone\r\ndef companyRef = objectFacade.loadObjectAttributeBean(objectFacade.loadObjectBean(visibilityKey).getId(), properties['iobj.visibilityKey.companyRef'].toString()).getObjectAttributeValueBeans();\r\nlog.info \"companyRef: \" + companyRef\r\ndef companyRefId = companyRef[0].getReferencedObjectBeanId()\r\nlog.debug \"companyRefId:\" + companyRefId\r\nif (issue.getCustomFieldValue(siteCF) != null &amp;&amp; objectFacade.loadObjectAttributeBean(siteObject.getId(), \"SITE_REF\")) {\r\n    obTriage = objectFacade.loadObjectAttributeBean(siteObject.getId(), \"SITE_REF\").createMutable()\r\n    s = obTriage.getObjectAttributeValueBeans()\r\n    s = s.toString()\r\n    sKey = s.substring(s.lastIndexOf('(') + 1, s.lastIndexOf(')'))\r\n    if (objectFacade.loadObjectAttributeBean(sKey.toInteger(), \"TIME_ZONE\")) {\r\n        obTriage = objectFacade.loadObjectAttributeBean(sKey.toInteger(), \"TIME_ZONE\").createMutable()\r\n        timeZone = obTriage.getObjectAttributeValueBeans()\r\n        timeZone = timeZone[0].getValue()\r\n        log.debug \"TimeZone da Site: \" + timeZone\r\n    } else {\r\n        if (objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\")) {\r\n            obTriage = objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\").createMutable()\r\n            timeZone = obTriage.getObjectAttributeValueBeans()\r\n            timeZone = timeZone[0].getValue()\r\n            log.debug \"TimeZone da Company: \" + timeZone\r\n        }\r\n    }\r\n} else {\r\n    if (objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\")) {\r\n        obTriage = objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\").createMutable()\r\n        timeZone = obTriage.getObjectAttributeValueBeans()\r\n        timeZone = timeZone[0].getValue()\r\n        log.debug \"TimeZone da Company: \" + timeZone\r\n    }\r\n}\r\nif (!timeZone) {\r\n    timeZone = \"Europe/Rome\"\r\n}\r\nlog.debug \"timeZone: \" + timeZone\r\nlocalTimeStamp = (new Timestamp((new Date(new Date().getTime() - TimeZone.getDefault().getRawOffset() + TimeZone.getTimeZone(timeZone.toString()).getRawOffset())).time)).toString()\r\nlocalDate = new Date(new Date().getTime() - TimeZone.getDefault().getRawOffset() + TimeZone.getTimeZone(timeZone.toString()).getRawOffset())\r\n\r\n}else{\r\n\r\n    localTimeStamp =  (new Timestamp((new Date()).time)).toString()\r\n    localDate =  new Date()\r\n\r\n}\r\n\r\nlog.debug \"localTimeStamp: \" + localTimeStamp\r\nlog.debug \"localDate: \" + localDate\r\n/*25.11.22*/\r\n\r\n/*Solo se ticket eseguito da tecnici interni eseguo track automatico dei tempi*/\r\ndef trovato=false, reopened=false\r\nfor (s in ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplier'].toString())){\r\n    if (issue.getCustomFieldValue(s) != null){\r\n        trovato=true\r\n    }\r\n}\r\n\r\nif(!trovato){\r\n    \r\n    /* ------------ DEFINE ACTION TO BE TRACED AND SET TO BE DONE ------------- */\r\n    def ACTION = properties['wf.tr.startWorking.action'].toString()\r\n    def SET = properties['wf.tr.startWorking.set'].toString()\r\n    \r\n    def ONSITE_TECH_REPORT_OBJ_TYPE=properties['iobj.onSiteTechReport'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_NAME=properties['iobj.onSiteTechReport.name.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF=properties['iobj.onSiteTechReport.technicianRef.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED=properties['iobj.onSiteTechReport.jobCompleted.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_JOB_STARTED=properties['iobj.onSiteTechReport.jobStarted.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_TRACE_ACTION=properties['iobj.onSiteTechReport.traceAction.id'].toString().toInteger()\r\n    \r\n    log.warn \"********************** CONFIRM ASSET **********************\"\r\n    def objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = Technician AND TECHNICIAN_REF.TECH_ACCOUNT =\\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\"\")\r\n    log.warn \"iql: \" + \"objectType = Technician AND TECHNICIAN_REF.TECH_ACCOUNT =\\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\"\"\r\n\r\n    for(technician in objects){\r\n        //extract insight key ang get object\r\n        def tech=technician.toString()\r\n        def techKey = tech.substring(tech.lastIndexOf('(')+1,tech.lastIndexOf(')'))\r\n        def techName = tech.substring(0,tech.lastIndexOf('(')-1)\r\n        def techObject = objectFacade.loadObjectBean(techKey)\r\n        log.info \"techKey: \" + techKey\r\n        log.info (\"techName: \" + techName)\r\n        log.info (\"techObject: \" + techObject)\r\n        \r\n        if (SET == \"JOB_COMPLETED\"){\r\n            /*SEARCH OBJECT TO BE UPDATED*/\r\n            objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key=\\\"\" + issue.key + \"\\\")\")\r\n            log.warn \"iql: \" + \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key=\\\"\" + issue.key + \"\\\")\"\r\n            \r\n            if(objects.size() &gt; 0){\r\n                /*UPDATE JOB_COMPLETED ON SELECTED OBJECT*/          \r\n                def obj = objectFacade.loadObjectBean(objects[0].getId());\r\n                attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED); \r\n                log.info \"attribType: \" + attribType.toString()\r\n                newAttrib = obj.createObjectAttributeBean(attribType);\r\n                def newAttribValue = newAttrib.createObjectAttributeValueBean();\r\n                \r\n                try {\r\n                    newAttribValue.setDateValue(localDate);\r\n                } catch (Exception vie) {\r\n                    log.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType.toString() + \" to \" + localTimeStamp + \". Exiting.\");\r\n                    log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                    return false;\r\n                }\r\n                \r\n                def attribValues = newAttrib.getObjectAttributeValueBeans();\r\n                attribValues.add(newAttribValue);\r\n                newAttrib.setObjectAttributeValueBeans(attribValues);\r\n                \r\n                try {\r\n                    newAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\r\n                } catch (Exception vie) {\r\n                    log.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\r\n                    log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                    return false;\r\n                }\r\n                \r\n            }else{\r\n                /*ERROR!!*/\r\n            }\r\n            \r\n        }else{\r\n            /*CREATE NEW OBJECT: ONSITE_TECH_REPORT_OBJ_TYPE*/\r\n            def existingObjects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key=\\\"\" + issue.key + \"\\\")\")\r\n            log.warn \"iql: \" + \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key=\\\"\" + issue.key + \"\\\")\"\r\n            \r\n            if(existingObjects.size()==0){\r\n                def objectTypeOnSiteTechReport = objectTypeFacade.loadObjectTypeBean(ONSITE_TECH_REPORT_OBJ_TYPE);\r\n                def newObjectBean = objectTypeOnSiteTechReport.createMutableObjectBean();\r\n                \r\n                def objectAttributeBeans = new ArrayList();\r\n                def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_NAME); \r\n                def startedObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_JOB_STARTED); \r\n                def actionObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TRACE_ACTION); \r\n                \r\n                objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, nameObjectTypeAttributeBean, techName));\r\n                def parentStarted\r\n\r\n                //Se \u00e8 il primo sub-task ad essere avviato eredito lo stesso timestamp di start working definito sul ticket padre come inizio lavoro del tecnico\r\n                //Recupero l'oggetto OnSite_Tech_Report del PM Ticket e ricavo il campo JOB_STARTED\r\n                SubTaskManager subTaskManager = ComponentAccessor.getSubTaskManager();\r\n                Collection subTasks = issue.getParentObject().getSubTaskObjects()\r\n                def first = true\r\n                if (!subTasks.empty) {\r\n                    subTasks.each {\r\n                        if(!it.getStatus().name.toString().equals(\"Confirmed and Planned\") &amp;&amp; it.key != issue.key){\r\n                            first=false\r\n                        }\r\n                    }\r\n                    if(first){\r\n                        log.debug \"primo sub-task\"\r\n                        //Estrarre JOB_STARTED sull'oggetto OnSite_Tech_Report referenziato nel PM ticket padre\r\n                        def parentTask = issue.getParentObject()\r\n                        def parentObjects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND TRACE_ACTION_STATUS=WORK AND object HAVING connectedTickets(key=\\\"\" + parentTask.key + \"\\\")\")\r\n                        log.warn \"iql: \" + \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND TRACE_ACTION_STATUS='WORK' AND object HAVING connectedTickets(key=\\\"\" + parentTask.key + \"\\\")\"\r\n                        \r\n                        if(parentObjects.size() &gt; 0){\r\n                            /*GET JOB_STARTED FROM SELECTED OBJECT*/          \r\n                            def obTriage = objectFacade.loadObjectAttributeBean(parentObjects[0].getId(), \"JOB_STARTED\").createMutable()\r\n                            parentStarted = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n                            log.debug \"parentStarted: \" + parentStarted\r\n                            objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, startedObjectTypeAttributeBean, localTimeStamp));\r\n                        }\r\n                    }else{\r\n                        objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, startedObjectTypeAttributeBean, localTimeStamp));\r\n                    }\r\n                }\r\n\r\n                objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, actionObjectTypeAttributeBean, ACTION));\r\n                \r\n                newObjectBean.setObjectAttributeBeans(objectAttributeBeans);\r\n                /* Store the object into Insight. The new ObjectBean will be updated with an unique ID */\r\n                try {\r\n                    newObjectBean = objectFacade.storeObjectBean(newObjectBean);\r\n                    log.warn(\"newObjectBean: \" + newObjectBean);\r\n                } catch (Exception vie) {\r\n                    log.warn(\"Could not create issue due to validation exception:\" + vie.getMessage());\r\n                }\r\n                \r\n                /* Update TECHNICIAN_REF on the newObject */\t\t        \r\n                def objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF).createMutable() //The id of the attribute\r\n                \r\n                /* Create the new attribute bean based on the value */\r\n                def newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, techKey);\r\n                /* Load the attribute bean */\r\n                def objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), techKey);\r\n                if (objectAttributeBean != null) {\r\n                    /* If attribute exist reuse the old id for the new attribute */\r\n                    newObjectAttributeBean.setId(objectAttributeBean.getId());\r\n                }\r\n                /* Store the object attribute into Insight. */\r\n                try {\r\n                    objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);\r\n                } catch (Exception vie) {\r\n                    log.warn(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\r\n                }  \r\n                \r\n                OnSiteTechObjects.add(newObjectBean)\r\n                \r\n                log.info (\"OnSiteTechObjects: \" + OnSiteTechObjects)\r\n                def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\r\n                \r\n                if (!OnSiteTechObjects.isEmpty()) {\r\n                    MutableIssue mi = (MutableIssue) issue;\r\n                    mi.setCustomFieldValue(onSiteTechsTraceField, OnSiteTechObjects);\r\n                    ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n                    \r\n                    mi.setCustomFieldValue(onSiteTechsField, OnSiteTechObjects);\r\n                    ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n                }\r\n\r\n\r\n            }\r\n\r\n        }\r\n    }   \r\n} ","scriptPath":null,"parameters":{}}</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">c854eb78-c909-433f-8314-5f20619f0feb</arg>
              <arg name="FIELD_NOTES"> IF OP_SUPPLIER IS NOT EMPTY --&gt; Create OnSite_Tech_Report objects to be associated to the issue's customfield OP_TECHNICIANS_ONSITE </arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":" import com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.issue.Issue\r\nimport com.atlassian.jira.issue.MutableIssue;\r\nimport com.atlassian.jira.event.type.EventDispatchOption;\r\nimport org.apache.log4j.Level\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File('/var/atlassian/application-data/shared/scripts/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\"); \r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n  \r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\r\n  \r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\"); \r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n  \r\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\"); \r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\r\n\r\nIssue issue = issue\r\n\r\ndef plannedTechsField = issue.getCustomFieldValue(ComponentAccessor.getCustomFieldManager().getCustomFieldObjectByName(properties['cf.technicians'].toString()))\r\ndef onSiteTechsField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.techniciansOnsite'].toString())[0];\r\ndef OnSiteTechObjects = new ArrayList();\r\n\r\ndef automaticallyClosedField = issue.getCustomFieldValue(ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString()))\r\n\r\ndef ONSITE_TECH_REPORT_OBJ_TYPE=properties['iobj.onSiteTechReport'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_NAME=properties['iobj.onSiteTechReport.name.id'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF=properties['iobj.onSiteTechReport.technicianRef.id'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_SUPPLIER_REF=properties['iobj.onSiteTechReport.supplierRef.id'] ? properties['iobj.onSiteTechReport.supplierRef.id'].toString().toInteger() : 3073\r\n\r\n/*Solo se ticket eseguito da tecnici interni eseguo track automatico dei tempi*/\r\ndef trovato=false, reopened=false\r\nfor (s in ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplier'].toString())){\r\n    if (issue.getCustomFieldValue(s) != null){\r\n        trovato=true\r\n    }\r\n}\r\n\r\nif(trovato){\r\nif(automaticallyClosedField==null || automaticallyClosedField.toString().equals(\"No\")){\r\n    if(plannedTechsField){\r\n        \r\n        for(technician in plannedTechsField){\r\n            \r\n            //extract insight key ang get object\r\n            def tech=technician.toString()\r\n            def techKey = tech.substring(tech.lastIndexOf('(')+1,tech.lastIndexOf(')'))\r\n            def techName = tech.substring(0,tech.lastIndexOf('(')-1)\r\n            def techObject = objectFacade.loadObjectBean(techKey)\r\n            log.info \"techKey: \" + techKey\r\n            log.info (\"techName: \" + techName)\r\n            log.info (\"techObject: \" + techObject)\r\n            \r\n            def objectTypeOnSiteTechReport = objectTypeFacade.loadObjectTypeBean(ONSITE_TECH_REPORT_OBJ_TYPE);\r\n            def newObjectBean = objectTypeOnSiteTechReport.createMutableObjectBean();\r\n            \r\n            def objectAttributeBeans = new ArrayList();\r\n            def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_NAME); \r\n            \r\n            objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, nameObjectTypeAttributeBean, techName));\r\n                    \r\n            newObjectBean.setObjectAttributeBeans(objectAttributeBeans);\r\n            /* Store the object into Insight. The new ObjectBean will be updated with an unique ID */\r\n            try {\r\n                newObjectBean = objectFacade.storeObjectBean(newObjectBean);\r\n                log.warn(\"newObjectBean: \" + newObjectBean);\r\n            } catch (Exception vie) {\r\n                log.warn(\"Could not create issue due to validation exception:\" + vie.getMessage());\r\n            }\r\n    \r\n            /* Update TECHNICIAN_REF on the newObject */\t\t        \r\n            def objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF).createMutable() //The id of the attribute\r\n\r\n            /* Create the new attribute bean based on the value */\r\n            def newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, techKey);\r\n            /* Load the attribute bean */\r\n            def objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), techKey);\r\n            if (objectAttributeBean != null) {\r\n               /* If attribute exist reuse the old id for the new attribute */\r\n               newObjectAttributeBean.setId(objectAttributeBean.getId());\r\n            }\r\n            /* Store the object attribute into Insight. */\r\n            try {\r\n                objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);\r\n            } catch (Exception vie) {\r\n                log.warn(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\r\n            }  \r\n            \r\n            /* Update SUPPLIER_REF on the newObject */\t\r\n            /* Get SUPPLIER_REF from Tech */\r\n            def obTriage = objectFacade.loadObjectAttributeBean(techObject.getId(), (properties['iobj.techOnsite.supplierRef'] ? properties['iobj.techOnsite.supplierRef'].toString() : \"SUPPLIER_REF\")).createMutable()\r\n            def suppRef = obTriage.getObjectAttributeValueBeans().toString()\r\n            def supp = suppRef.toString()\r\n            log.info \"supp: \" + supp\r\n            suppRefId = supp.substring(supp.lastIndexOf('(')+1,supp.lastIndexOf(')'))\r\n            log.info \"suppRefId: \" + suppRefId\r\n            suppRefKey = properties['ischema.aa'].toString() + \"-\" + suppRefId\r\n            log.info \"suppRefKey: \" + suppRefKey\r\n            suppRefObj = objectFacade.loadObjectBean(properties['ischema.aa'].toString() + \"-\" + suppRefId)\r\n\t\t\tlog.info \"suppRefObj: \" + suppRefObj\r\n            \r\n            def suppObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_SUPPLIER_REF).createMutable() //The id of the attribute\r\n            \r\n            /* Create the new attribute bean based on the value */\r\n            newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, suppObjectTypeAttributeBean, suppRefKey);\r\n            /* Load the attribute bean */\r\n            objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), suppRefKey);\r\n            if (objectAttributeBean != null) {\r\n               /* If attribute exist reuse the old id for the new attribute */\r\n               newObjectAttributeBean.setId(objectAttributeBean.getId());\r\n            }\r\n            /* Store the object attribute into Insight. */\r\n            try {\r\n                objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);\r\n            } catch (Exception vie) {\r\n                log.warn(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\r\n            }  \r\n            \r\n            OnSiteTechObjects.add(newObjectBean)\r\n         }\r\n    }\r\n    log.info (\"OnSiteTechObjects: \" + OnSiteTechObjects)\r\n    def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\r\n    \r\n    if (!OnSiteTechObjects.isEmpty()) {\r\n        MutableIssue mi = (MutableIssue) issue;\r\n        mi.setCustomFieldValue(onSiteTechsField, OnSiteTechObjects);\r\n        ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n    }   \r\n}   \r\n    } ","scriptPath":null,"parameters":{}}</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">709d8322-0eb1-47b9-883e-35bcb6014ae0</arg>
              <arg name="FIELD_NOTES">Log Timestamp for Tech activity &amp; Link object to the ticket (OP_TECHNICIANS_ONSITE)</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"/* ------------------ ACTION START WORKING ------------------ */\r\n/* ------------------ TRACE_ACTION_STATUS = WORK ------------------ */\r\n/* ------------------ ACTION = JOB_STARTED ------------------ */\r\n\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.issue.Issue\r\nimport com.atlassian.jira.issue.MutableIssue;\r\nimport com.atlassian.jira.event.type.EventDispatchOption;\r\nimport org.apache.log4j.Level\r\nimport java.sql.Timestamp\r\nimport com.atlassian.jira.config.SubTaskManager\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File('/var/atlassian/application-data/shared/scripts/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\"); \r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n  \r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\r\n  \r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\"); \r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n  \r\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\"); \r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\r\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \r\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\r\n\r\ndef trovato=false, reopened=false\r\nfor (s in ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplier'].toString())){\r\n    if (issue.getCustomFieldValue(s) != null){\r\n        trovato=true\r\n    }\r\n}\r\n\r\n//Se il ticket \u00e8 eseguito da tecnici interni eseguo il trace automatico dei tempi\r\nif(!trovato){\r\n    Issue issue = issue\r\n    \r\n    def currentUser = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENT_USER\")[0]\r\n    def onSiteTechsTraceField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIAN_ACTIVITIES_TRACE_WORK\")[0];\r\n    def onSiteTechsField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIANS_ONSITE\")[0];\r\n    def OnSiteTechObjects = new ArrayList();\r\n    int OPAA = properties['ischema.aa.id'].toString().toInteger()\r\n    int DBO = properties['ischema.dbo.id'].toString().toInteger()\r\n    \r\n    /* ------------ DEFINE ACTION TO BE TRACED AND SET TO BE DONE ------------- */\r\n    def ACTION = properties['wf.tr.startWorking.action'].toString()\r\n    def SET = properties['wf.tr.startWorking.set'].toString()\r\n    \r\n    def ONSITE_TECH_REPORT_OBJ_TYPE=properties['iobj.onSiteTechReport'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_NAME=properties['iobj.onSiteTechReport.name.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF=properties['iobj.onSiteTechReport.technicianRef.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED=properties['iobj.onSiteTechReport.jobCompleted.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_JOB_STARTED=properties['iobj.onSiteTechReport.jobStarted.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_TRACE_ACTION=properties['iobj.onSiteTechReport.traceAction.id'].toString().toInteger()\r\n    \r\n    log.warn \"********************** CONFIRM ASSET **********************\"\r\n    def objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = Technician AND TECHNICIAN_REF.TECH_ACCOUNT =\\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\"\")\r\n    log.warn \"iql: \" + \"objectType = Technician AND TECHNICIAN_REF.TECH_ACCOUNT =\\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\"\"\r\n    \r\n    for(technician in objects){\r\n        //extract insight key ang get object\r\n        def tech=technician.toString()\r\n        def techKey = tech.substring(tech.indexOf('(')+1,tech.indexOf(')'))\r\n        def techName = tech.substring(0,tech.indexOf('(')-1)\r\n        def techObject = objectFacade.loadObjectBean(techKey)\r\n        log.info \"techKey: \" + techKey\r\n        log.info (\"techName: \" + techName)\r\n        log.info (\"techObject: \" + techObject)\r\n        \r\n        if (SET == \"JOB_COMPLETED\"){\r\n            /*SEARCH OBJECT TO BE UPDATED*/\r\n            objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key=\\\"\" + issue.key + \"\\\")\")\r\n            log.warn \"iql: \" + \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key=\\\"\" + issue.key + \"\\\")\"\r\n            \r\n            if(objects.size() &gt; 0){\r\n                /*UPDATE JOB_COMPLETED ON SELECTED OBJECT*/          \r\n                def obj = objectFacade.loadObjectBean(objects[0].getId());\r\n                attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED); \r\n                log.info \"attribType: \" + attribType.toString()\r\n                newAttrib = obj.createObjectAttributeBean(attribType);\r\n                def newAttribValue = newAttrib.createObjectAttributeValueBean();\r\n    \r\n                try {\r\n                    newAttribValue.setDateValue(new Date());\r\n                } catch (Exception vie) {\r\n                    log.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType.toString() + \" to \" + (new Timestamp((new Date()).time)).toString() + \". Exiting.\");\r\n                    log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                    return false;\r\n                }\r\n                \r\n                def attribValues = newAttrib.getObjectAttributeValueBeans();\r\n                attribValues.add(newAttribValue);\r\n                newAttrib.setObjectAttributeValueBeans(attribValues);\r\n                \r\n                try {\r\n                    newAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\r\n                } catch (Exception vie) {\r\n                    log.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\r\n                    log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                    return false;\r\n                }\r\n                \r\n            }else{\r\n                /*ERROR!!*/\r\n            }\r\n            \r\n        }else{\r\n            /*CREATE NEW OBJECT: ONSITE_TECH_REPORT_OBJ_TYPE*/\r\n            def objectTypeOnSiteTechReport = objectTypeFacade.loadObjectTypeBean(ONSITE_TECH_REPORT_OBJ_TYPE);\r\n            def newObjectBean = objectTypeOnSiteTechReport.createMutableObjectBean();\r\n            \r\n            def objectAttributeBeans = new ArrayList();\r\n            def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_NAME); \r\n            def startedObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_JOB_STARTED); \r\n            def actionObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TRACE_ACTION); \r\n            \r\n            objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, nameObjectTypeAttributeBean, techName));\r\n            objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, startedObjectTypeAttributeBean, (new Timestamp((new Date()).time)).toString()));\r\n            objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, actionObjectTypeAttributeBean, ACTION));\r\n            \r\n            newObjectBean.setObjectAttributeBeans(objectAttributeBeans);\r\n            /* Store the object into Insight. The new ObjectBean will be updated with an unique ID */\r\n            try {\r\n                newObjectBean = objectFacade.storeObjectBean(newObjectBean);\r\n                log.warn(\"newObjectBean: \" + newObjectBean);\r\n            } catch (Exception vie) {\r\n                log.warn(\"Could not create issue due to validation exception:\" + vie.getMessage());\r\n            }\r\n            \r\n            /* Update TECHNICIAN_REF on the newObject */\t\t        \r\n            def objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF).createMutable() //The id of the attribute\r\n            \r\n            /* Create the new attribute bean based on the value */\r\n            def newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, techKey);\r\n            /* Load the attribute bean */\r\n            def objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), techKey);\r\n            if (objectAttributeBean != null) {\r\n                /* If attribute exist reuse the old id for the new attribute */\r\n                newObjectAttributeBean.setId(objectAttributeBean.getId());\r\n            }\r\n            /* Store the object attribute into Insight. */\r\n            try {\r\n                objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);\r\n            } catch (Exception vie) {\r\n                log.warn(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\r\n            }  \r\n            \r\n            OnSiteTechObjects.add(newObjectBean)\r\n         \r\n            log.info (\"OnSiteTechObjects: \" + OnSiteTechObjects)\r\n            def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\r\n            \r\n            if (!OnSiteTechObjects.isEmpty()) {\r\n                MutableIssue mi = (MutableIssue) issue;\r\n                mi.setCustomFieldValue(onSiteTechsTraceField, OnSiteTechObjects);\r\n                ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n                \r\n                mi.setCustomFieldValue(onSiteTechsField, OnSiteTechObjects);\r\n                ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n            }\r\n            \r\n            //Se \u00e8 il primo sub-task ad essere avviato lo stesso timestamp lo salvo anche sul ticket padre come inizio lavoro del tecnico\r\n            //Recupero l'oggetto OnSite_Tech_Report del PM Ticket e compilo il campo JOB_STARTED\r\n            SubTaskManager subTaskManager = ComponentAccessor.getSubTaskManager();\r\n            Collection subTasks = issue.getParentObject().getSubTaskObjects()\r\n            def first = true\r\n            if (!subTasks.empty) {\r\n                subTasks.each {\r\n                    if(!it.getStatus().name.toString().equals(\"Confirmed and Planned\") &amp;&amp; it.key != issue.key){\r\n                        first=false\r\n                    }\r\n                }\r\n                if(first){\r\n                    //Aggiornare JOB_STARTED sull'oggetto OnSite_Tech_Report referenziato nel PM ticket padre\r\n                    def parentTask = issue.getParentObject()\r\n                    objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND object HAVING connectedTickets(key=\\\"\" + parentTask.key + \"\\\")\")\r\n                    log.warn \"iql: \" + \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND object HAVING connectedTickets(key=\\\"\" + parentTask.key + \"\\\")\"\r\n                    \r\n                    if(objects.size() &gt; 0){\r\n                        /*UPDATE JOB_STARTED ON SELECTED OBJECT*/          \r\n                        def obj = objectFacade.loadObjectBean(objects[0].getId());\r\n                        attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_JOB_STARTED); \r\n                        log.info \"attribType: \" + attribType.toString()\r\n                        newAttrib = obj.createObjectAttributeBean(attribType);\r\n                        def newAttribValue = newAttrib.createObjectAttributeValueBean();\r\n                        \r\n                        try {\r\n                            newAttribValue.setDateValue(new Date());\r\n                        } catch (Exception vie) {\r\n                            log.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType.toString() + \" to \" + (new Timestamp((new Date()).time)).toString() + \". Exiting.\");\r\n                            log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                            return false;\r\n                        }\r\n                        \r\n                        def attribValues = newAttrib.getObjectAttributeValueBeans();\r\n                        attribValues.add(newAttribValue);\r\n                        newAttrib.setObjectAttributeValueBeans(attribValues);\r\n                        \r\n                        try {\r\n                            newAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\r\n                        } catch (Exception vie) {\r\n                            log.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\r\n                            log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }   \r\n}  ","scriptPath":null}</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">83147c97-077d-4f1d-a5e0-b46805373d48</arg>
              <arg name="FIELD_ACTION">141 Eseguita con cartaceo</arg>
              <arg name="FIELD_NOTES">Automatically Reject tkts based on Dynamic Risks Assessment result</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.FasttrackTransition</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.FasttrackTransition</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="FIELD_CONDITION">{"script":"import com.atlassian.jira.issue.Issue\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport org.apache.log4j.Category\r\nimport groovy.json.JsonBuilder\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\nimport com.atlassian.jira.issue.IssueManager\r\nimport com.atlassian.jira.issue.ModifiedValue\r\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\r\nimport java.text.SimpleDateFormat;\r\nimport com.atlassian.jira.issue.index.IssueIndexingService\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\r\npropertiesFile.withInputStream {\r\n    properties.load(it)\r\n}\r\nlog.setLevel(org.apache.log4j.Level.DEBUG)\r\n\r\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-41755\")\r\n\r\nlog.debug \"Transazione CONFIRM ASSET - Issue: \" + issue\r\n\r\ndef errors = false\r\ndef warnings = false\r\n\r\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]\r\ndef dynamicRisksAss =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_ASSET_RISKS_ASSESSMENT\")[0]\r\n\r\ndef errorMandatoryFields = new ArrayList()\r\ndef errorRejectedTkt = false\r\n\r\nif(issue.getCustomFieldValue(dynamicRisksAss)!=null &amp;&amp; (String)issue.getCustomFieldValue(dynamicRisksAss) != \"\" &amp;&amp; !issue.getCustomFieldValue(dynamicRisksAss).toString().equals(\"\")){\r\n    /*Ciclare tutti gli oggetti associati al campo*/\r\n    //insight classes &amp; components\r\n    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \r\n    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\r\n    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n\r\n    def risksAssessment = issue.getCustomFieldValue(dynamicRisksAss)\r\n    def dra5, dra6\r\n\r\n    for(i in risksAssessment){\r\n        //extract insight key ang get object\r\n        def risk=i.toString()\r\n        def riskKey = risk.substring(risk.lastIndexOf('(')+1,risk.lastIndexOf(')'))\r\n        def riskObject = objectFacade.loadObjectBean(riskKey)\r\n\r\n        def obTriage\r\n        \r\n\r\n        if(objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA5\")!=null){\r\n            obTriage = objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA5\").createMutable()\r\n            dra5 = obTriage.getObjectAttributeValueBeans()[0].value.toString()\r\n            if(dra5.equals(\"NO\")){\r\n                errorRejectedTkt=true\r\n            }\r\n        }\r\n\r\n        if(objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA6\")!=null){\r\n            obTriage = objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA6\").createMutable()\r\n            dra6 = obTriage.getObjectAttributeValueBeans()[0].value.toString()\r\n            if(dra6.equals(\"NO\")){\r\n                errorRejectedTkt=true\r\n            }\r\n        }\r\n    }\r\n\r\n    return errorRejectedTkt\r\n}else{\r\n    return false\r\n}\r\n","scriptPath":null}</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_TRANSITION_OPTIONS" />
              <arg name="events" />
              <arg name="FIELD_ADDITIONAL_SCRIPT" />
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="201" name="Start Maintenance">
      <meta name="jira.description" />
      <meta name="jira.fieldscreen.id" />
      <restrict-to>
        <conditions>
          <condition type="class">
            <arg name="FIELD_FUNCTION_ID">a0e36b7d-84dd-4008-9e6c-fb58e808a064</arg>
            <arg name="FIELD_NOTES">Enabled only if parent task is "In Progress" AND OP_TKT_ASSIGNED_TO = ASSISTANT AND NO Risks Assessment required -- OR if current status is Risks Assessment AND OP_TKT_ASSIGNED_TO = ASSISTANT -- /*OR if parent task is "In Progress" AND NO Risks Assessment required*/</arg>
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
            <arg name="FIELD_CONDITION">{"script":"import com.atlassian.jira.issue.Issue\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport org.apache.log4j.Category\r\nimport groovy.json.JsonBuilder\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\nimport com.atlassian.jira.issue.IssueManager\r\nimport com.atlassian.jira.issue.ModifiedValue\r\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\r\nimport java.text.SimpleDateFormat;\r\nimport com.atlassian.jira.issue.index.IssueIndexingService\r\n\r\ndef assignedTo =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_ASSIGNED_TO\")[0]\r\ndef pmOperations =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_PM_OPERATIONS_ODS\")[0]\r\ndef risksAssessment = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_ASSET_RISKS_ASSESSMENT\")[0]\r\n//log.debug \"issue.getCustomFieldValue(assignedTo): \" + issue.getParentObject().getCustomFieldValue(assignedTo)\r\n\r\n//log.debug ((issue.parentObject?.status?.name.toString().equals(\"Finalizing Work\") || issue.parentObject?.status?.name.toString().equals(\"In Progress\")) &amp;&amp; issue.getParentObject().getCustomFieldValue(assignedTo) != null &amp;&amp; issue.getParentObject().getCustomFieldValue(assignedTo).toString().equals(\"ASSISTANT\"))\r\n\r\n(issue.status.name == \"Risks Assessment\" &amp;&amp; issue.getParentObject().getCustomFieldValue(assignedTo) != null &amp;&amp; issue.getParentObject().getCustomFieldValue(assignedTo).toString().equals(\"ASSISTANT\")) ||\r\n/*((issue.parentObject?.status?.name.toString().equals(\"Finalizing Work\") || issue.parentObject?.status?.name.toString().equals(\"In Progress\")) &amp;&amp; issue.getCustomFieldValue(risksAssessment) == null) || */\r\n((issue.parentObject?.status?.name.toString().equals(\"Finalizing Work\") || issue.parentObject?.status?.name.toString().equals(\"In Progress\")) &amp;&amp; issue.getCustomFieldValue(risksAssessment) == null &amp;&amp; issue.getParentObject().getCustomFieldValue(assignedTo) != null &amp;&amp; issue.getParentObject().getCustomFieldValue(assignedTo).toString().equals(\"ASSISTANT\"))","scriptPath":null,"parameters":{}}</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
            <arg name="FIELD_PREVIEW_ISSUE">AAS-153459</arg>
          </condition>
        </conditions>
      </restrict-to>
      <validators>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">1e7898cd-ceab-4ba0-955d-6b0604bf8c9b</arg>
          <arg name="FIELD_NOTES">Check PM operations on PM task &amp;&amp; Required fields if RISKS_ASSESSMENT NOT NULL</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport org.apache.log4j.Category\r\nimport groovy.json.JsonBuilder\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\nimport com.atlassian.jira.issue.IssueManager\r\nimport com.atlassian.jira.issue.ModifiedValue\r\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\r\nimport java.text.SimpleDateFormat;\r\nimport com.atlassian.jira.issue.index.IssueIndexingService\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\nlog.setLevel(org.apache.log4j.Level.DEBUG)\r\n\r\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-4159\")\r\n\r\nlog.debug \"Transazione Complete - Primo validator\"\r\nlog.debug \"Transazione Complete - Primo validator - Issue: \" + issue\r\n\r\ndef errors = false\r\ndef warnings = false\r\ndef missingPMoperations = false\r\n\r\ndef pmOperations =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_PM_OPERATIONS_ODS\")[0]\r\ndef assignedTo =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_ASSIGNED_TO\")[0]\r\n\r\nlog.debug \"issue.getCustomFieldValue(pmOperations): \" + issue.getCustomFieldValue(pmOperations)\r\nlog.debug \"issue.getCustomFieldValue(assignedTo): \" + issue.getParentObject().getCustomFieldValue(assignedTo)\r\nif(issue.getCustomFieldValue(pmOperations)==null &amp;&amp; !issue.getParentObject().getCustomFieldValue(assignedTo).toString().equals(\"ASSISTANT\")){\r\n    errors=true\r\n    missingPMoperations=true\r\n}\r\n\r\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]\r\ndef dynamicRisksAss =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_ASSET_RISKS_ASSESSMENT\")[0]\r\n\r\ndef errorMandatoryFields = new ArrayList()\r\ndef errorRejectedTkt = false\r\n\r\nif(issue.getCustomFieldValue(dynamicRisksAss)!=null &amp;&amp; (String)issue.getCustomFieldValue(dynamicRisksAss) != \"\" &amp;&amp; !issue.getCustomFieldValue(dynamicRisksAss).toString().equals(\"\")){\r\n    /*Ciclare tutti gli oggetti associati al campo*/\r\n    //insight classes &amp; components\r\n    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \r\n    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\r\n    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n\r\n    def risksAssessment = issue.getCustomFieldValue(dynamicRisksAss)\r\n    def dra5, dra6\r\n    log.debug \"risksAssessment: \" + risksAssessment\r\n    for(i in risksAssessment){\r\n        //extract insight key ang get object\r\n        def risk=i.toString()\r\n        def riskKey = risk.substring(risk.lastIndexOf('(')+1,risk.lastIndexOf(')'))\r\n        def riskObject = objectFacade.loadObjectBean(riskKey)\r\n\r\n        def obTriage\r\n        if(objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA1\")==null){\r\n            errors=true\r\n            errorMandatoryFields.add(\"Dynamic Risk Assessment Completed for the job\")\r\n            log.debug \"errorMandatoryFields.add(Dynamic Risk Assessment Completed for the job)\"\r\n        }\r\n\r\n        if(objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA2\")==null){\r\n            errors=true\r\n            errorMandatoryFields.add(\"All hazards covered by the Risk Assessment?\")\r\n            log.debug \"errorMandatoryFields.add(All hazards covered by the Risk Assessment?)\"\r\n        }\r\n\r\n        if(objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA2\")!=null &amp;&amp; objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA2\").createMutable().getObjectAttributeValueBeans()[0].value.toString()==\"NO\" &amp;&amp; (objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA3\")==null || objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA3\").toString()==\"\" )){\r\n            errors=true\r\n            errorMandatoryFields.add(\"Complete additional outlining hazards and control measures\")\r\n            log.debug \"errorMandatoryFields.add(Complete additional outlining hazards and control measures)\"\r\n        }\r\n\r\n        if(objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA4\")==null){\r\n            errors=true\r\n            errorMandatoryFields.add(\"Method Statement available for the job?\")\r\n            log.debug \"errorMandatoryFields.add(Method Statement available for the job?)\"\r\n        }\r\n\r\n        if(objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA5\")==null){\r\n            errors=true\r\n            errorMandatoryFields.add(\"Do you have the correct tools and PPE to carry out the task?\")\r\n            log.debug \"errorMandatoryFields.add(Do you have the correct tools and PPE to carry out the task?)\"\r\n        }else{\r\n            obTriage = objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA5\").createMutable()\r\n            dra5 = obTriage.getObjectAttributeValueBeans()[0].value.toString()\r\n            if(dra5.equals(\"NO\")){\r\n                errorRejectedTkt=true\r\n                warnings=true\r\n                log.debug \"dra5: \" + dra5\r\n            }\r\n        }\r\n\r\n        if(objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA6\")==null){\r\n            errors=true\r\n            errorMandatoryFields.add(\"Do you have all the information and training to complete the task?\")\r\n            log.debug \"errorMandatoryFields.add(Do you have all the information and training to complete the task?)\"\r\n        }else{\r\n            obTriage = objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA6\").createMutable()\r\n            dra6 = obTriage.getObjectAttributeValueBeans()[0].value.toString()\r\n            if(dra6.equals(\"NO\")){\r\n                errorRejectedTkt=true\r\n                warnings=true\r\n                log.debug \"dra6: \" + dra6\r\n            }\r\n        }\r\n\r\n        log.debug issue.getCustomFieldValue(transitionCheck)\r\n        log.debug errorMandatoryFields\r\n\r\n    }\r\n}\r\n\r\n\r\ndef output = new ArrayList()\r\n\r\nif (!errors &amp;&amp; !warnings){\r\n    return true\r\n}else{\r\n    if(!errors &amp;&amp; warnings){\r\n        //Se ci sono solo warnings verifico se l'utente ha gi\u00e0 dichiarato di voler proseguire comunque\r\n        // - transition field \"OPAA_CHECK_AND_CONFIRM\"=\"Yes\"\r\n        // - in caso contrario invio i warning a FE\r\n\r\n        //log.debug \"transitionCheck: \" + issue.getCustomFieldValue(transitionCheck)\r\n        //log.debug \"result: \" + issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")\r\n        if(issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")){\r\n            //log.debug \"return true\"\r\n            return true\r\n        }else{\r\n            def wList = new ArrayList()\r\n\r\n            if(errorRejectedTkt){\r\n                def eListRejected = new ArrayList()\r\n                eListRejected.add(\"W\")\r\n                eListRejected.add(\"REJECTED_DUE_TO_RISKS_ASSESSMENT\")\r\n                eListRejected.add(null)\r\n                wList.add(eListRejected)\r\n            }\r\n            output.add(wList)\r\n            log.debug \"throw exception: \" + output.toString()\r\n            throw new InvalidInputException('{\"W\":\"' + output.toString() + '\"}')\r\n            //throw new InvalidInputException(\"W\", output.toString())   \r\n        }\r\n\r\n    }\r\n    if(errors &amp;&amp; !warnings){\r\n        def eList = new ArrayList()\r\n\r\n        if(errorMandatoryFields.size() &gt; 0){\r\n            def eListMandatory = new ArrayList()\r\n            eListMandatory.add(\"E\")\r\n            eListMandatory.add(\"MANDATORY_FIELDS\")\r\n            eListMandatory.add(null)\r\n            eListMandatory.add(errorMandatoryFields)\r\n            eList.add(eListMandatory)\r\n        }\r\n\r\n        if(missingPMoperations){\r\n            def eListSubTaskCompleted = new ArrayList()\r\n            eListSubTaskCompleted.add(\"E\")\r\n            eListSubTaskCompleted.add(\"MISSING_PM_OPERATIONS\")\r\n            eListSubTaskCompleted.add(null)\r\n            eList.add(eListSubTaskCompleted)\r\n        }\r\n\r\n        output.add(eList)\r\n        log.debug \"throw exception: \" + output.toString()\r\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\r\n        //throw new InvalidInputException(\"E\", output.toString())  \r\n\r\n        output.add(eList)\r\n        log.debug \"throw exception: \" + output.toString()\r\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\r\n        //throw new InvalidInputException(\"E\", output.toString())   \r\n    }\r\n    if(errors &amp;&amp; warnings){\r\n        def eList = new ArrayList()\r\n        def wList = new ArrayList()\r\n        if(errorMandatoryFields.size() &gt; 0){\r\n            def eListMandatory = new ArrayList()\r\n            eListMandatory.add(\"E\")\r\n            eListMandatory.add(\"MANDATORY_FIELDS\")\r\n            eListMandatory.add(null)\r\n            eListMandatory.add(errorMandatoryFields)\r\n            eList.add(eListMandatory)\r\n        }\r\n\r\n        if(errorRejectedTkt){\r\n            def eListRejected = new ArrayList()\r\n            eListRejected.add(\"W\")\r\n            eListRejected.add(\"REJECTED_DUE_TO_RISKS_ASSESSMENT\")\r\n            eListRejected.add(null)\r\n            wList.add(eListRejected)\r\n        }\r\n\r\n        if(missingPMoperations){\r\n            def eListSubTaskCompleted = new ArrayList()\r\n            eListSubTaskCompleted.add(\"E\")\r\n            eListSubTaskCompleted.add(\"MISSING_PM_OPERATIONS\")\r\n            eListSubTaskCompleted.add(null)\r\n            eList.add(eListSubTaskCompleted)\r\n        }\r\n\r\n        output.add(eList)\r\n        output.add(wList)\r\n        log.debug \"throw exception: \" + output.toString()\r\n        throw new InvalidInputException('{\"WE\":\"' + output.toString() + '\"}')\r\n        //throw new InvalidInputException(\"WE\", output.toString())  \r\n    }\r\n}\r\n","scriptPath":null,"parameters":{}}</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="v+nWù">¶»ž</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">e8c6556e-6560-4bee-8b97-fc1f556f1d4a</arg>
          <arg name="FIELD_NOTES">SAP: update SN status</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\r\nimport groovy.json.StreamingJsonBuilder;\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.issue.CustomFieldManager;\r\nimport com.atlassian.jira.issue.fields.CustomField;\r\nimport com.atlassian.jira.issue.IssueManager;\r\nimport com.atlassian.jira.component.ComponentAccessor;\r\nimport com.atlassian.jira.issue.Issue;\r\nimport com.atlassian.jira.issue.MutableIssue\r\nimport org.apache.commons.codec.binary.Base64;\r\nimport org.apache.log4j.Category\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\nlog.setLevel(org.apache.log4j.Level.DEBUG)\r\nimport com.atlassian.jira.issue.link.IssueLink\r\n\r\nIssueManager issueManager = ComponentAccessor.getIssueManager();\r\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\r\ndef requestMethod\r\ndef baseURL\r\n\r\nURL url\r\nHttpURLConnection connection\r\n\r\nrequestMethod = \"POST\";\r\n\r\ndef body_req = []\r\nbody_req = [\r\n    \"issueKey\": issue.key,\r\n    \"status\": \"INP\"\r\n] \r\n\r\n    \r\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\r\n\r\nlog.debug \"baseURL SN: \" + baseURL\r\nlog.debug \"body_req SN: \" + body_req\r\nurl = new URL(baseURL)\r\nconnection = (HttpURLConnection)url.openConnection();\r\nconnection.setRequestMethod(requestMethod);\r\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\nconnection.setRequestProperty(\"Accept\", \"*/*\");\r\nconnection.setDoOutput(true);\r\nconnection.setDoInput(true);\r\nconnection.outputStream\r\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\r\nlog.debug connection.outputStream\r\nconnection.connect();\r\n\r\ndef output = new ArrayList()\r\ndef eList = new ArrayList()\r\ndef eListErrors = new ArrayList()\r\ndef errorMsgs = new ArrayList()\r\n\r\nif (!connection.getResponseCode().toString().equals(\"200\") &amp;&amp; !connection.getResponseCode().toString().equals(\"201\")){\r\n    log.debug \"url: \" + url\r\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\r\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\r\n    eListErrors.add(\"E\")\r\n    eListErrors.add(\"SN_UPDATE\")\r\n    errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\r\n    eListErrors.add(errorMsgs)\r\n    eList.add(eListErrors)\r\n\r\n    output.add(eList)\r\n    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\r\n}else{\r\n    /** SERVICE ORDER CREATION **/\r\n    body_req = [\r\n        \"issueKey\": issue.key\r\n    ] \r\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\r\n\r\n    log.debug \"baseURL SO: \" + baseURL\r\n    log.debug \"body_req SO: \" + body_req\r\n    url = new URL(baseURL)\r\n    connection = (HttpURLConnection)url.openConnection();\r\n    connection.setRequestMethod(requestMethod);\r\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n    connection.setRequestProperty(\"Accept\", \"*/*\");\r\n    connection.setDoOutput(true);\r\n    connection.setDoInput(true);\r\n    connection.outputStream\r\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\r\n    log.debug connection.outputStream\r\n    connection.connect();\r\n\r\n    output = new ArrayList()\r\n    eList = new ArrayList()\r\n    eListErrors = new ArrayList()\r\n    errorMsgs = new ArrayList()\r\n\r\n    if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\r\n        log.debug \"url: \" + url\r\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\r\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\r\n        \r\n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\r\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\r\n        \r\n        def jsonSlurper = new JsonSlurper()\r\n        def json_object = jsonSlurper.parseText(outputMsg)\r\n        assert json_object instanceof Map  \r\n        log.debug \"message: \" +  json_object.message\r\n        log.debug \"errors: \" +  json_object.errors.toString()\r\n\r\n        eListErrors.add(\"E\")\r\n        eListErrors.add(\"SO_CREATE\")\r\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\r\n        eListErrors.add(errorMsgs)\r\n        eList.add(eListErrors)\r\n\r\n        output.add(eList)\r\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\r\n    }\r\n}","scriptPath":null}</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="v+nWù">¶»ž</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">07a8cfa1-a0bb-40df-90b6-40fdefc1ac46</arg>
          <arg name="FIELD_NOTES">OperationPortal - Call to BE validator</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.issue.fields.CustomField\r\nimport com.atlassian.jira.issue.CustomFieldManager\r\nimport com.atlassian.jira.workflow.JiraWorkflow\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenLayoutItem\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenTab\r\nimport com.atlassian.jira.issue.fields.FieldManager\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreen\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenManager\r\nimport com.opensymphony.workflow.loader.ActionDescriptor\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.workflow.WorkflowManager\r\nimport groovy.json.StreamingJsonBuilder\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\n\r\ndef baseURL\r\ndef responseBody\r\n\r\ntry {\r\n    Properties properties = new Properties()\r\n    File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\r\n    propertiesFile.withInputStream {\r\n        properties.load(it)\r\n    }\r\n\r\n    def serverBase = String.format(\"http://%s/op\", properties['api.env'])\r\n    def transactionAction = \"validators\"\r\n\r\n    URL url\r\n    def requestMethod = \"POST\"\r\n\r\n    baseURL = String.format(\"%s/rest/jira/workflows/%s/%s\", serverBase, transientVars.actionId, transactionAction)\r\n\r\n    log.debug(\"Composing baseURL as '${baseURL}'\")\r\n\r\n    WorkflowManager workflowManager = ComponentAccessor.getWorkflowManager()\r\n    JiraWorkflow jiraWorkflow = workflowManager.getWorkflow(transientVars.issue)\r\n\r\n    CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager()\r\n\r\n    log.debug(jiraWorkflow.getName())\r\n\r\n    ActionDescriptor ad = workflowManager.getActionDescriptor(transientVars.issue, transientVars.actionId)\r\n\r\n    log.debug(\"ActionDescriptor Name: ${ad.getName()}\") // Genera Rapporto di Intervento FAAC\r\n    log.debug(\"ActionDescriptor MetaAttrs: ${ad.getMetaAttributes()}\") // {opsbar-sequence=10, jira.description=, jira.fieldscreen.id=19910}\r\n\r\n    def adMeta = ad.getMetaAttributes()\r\n    String fieldScreenId = adMeta.get(\"jira.fieldscreen.id\");\r\n    log.debug(\"Field screen id: ${fieldScreenId}\")\r\n\r\n    Map&lt;String, Object&gt; customFieldMap = new HashMap&lt;&gt;()\r\n    if (fieldScreenId) {\r\n        FieldScreenManager fieldScreenManager = ComponentAccessor.getComponent(FieldScreenManager.class);\r\n        FieldScreen fieldScreen = fieldScreenManager.getFieldScreen(Long.valueOf(fieldScreenId.toString()));\r\n        List&lt;FieldScreenTab&gt; fsts = fieldScreen.getTabs();\r\n        for (FieldScreenTab fst: fsts) {\r\n            List&lt;FieldScreenLayoutItem&gt; qwe = fst.getFieldScreenLayoutItems();\r\n            for (FieldScreenLayoutItem fsli: qwe) {\r\n                if (fsli.getFieldId() == null) {\r\n                    continue;\r\n                }\r\n                CustomField customField = customFieldManager.getCustomFieldObject(fsli.getFieldId());\r\n                if (customField == null) {\r\n                    continue;\r\n                }\r\n                def customFieldValue = issue.getCustomFieldValue(customField);\r\n                customFieldMap.put(fsli.getFieldId(), customFieldValue == null ? null : customFieldValue.toString())\r\n            }\r\n        }\r\n    }\r\n    log.debug(\"customFieldMap: ${customFieldMap}\")\r\n\r\n    def bodyReq = [\r\n        \"issueKey\": issue.key,\r\n        \"actionName\": ad.getName(),\r\n        \"jiraWorkflowName\": jiraWorkflow.getName(),\r\n        \"customFieldMap\": customFieldMap,\r\n        \"properties\": properties\r\n    ]\r\n\r\n    log.debug(\"Calling [${requestMethod}] ${baseURL} with body ${bodyReq}\")\r\n\r\n    url = new URL(baseURL)\r\n    HttpURLConnection connection = (HttpURLConnection) url.openConnection()\r\n    connection.setRequestMethod(requestMethod)\r\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\")\r\n    connection.setRequestProperty(\"Accept\", \"*/*\")\r\n    connection.setDoOutput(true)\r\n    connection.setDoInput(true)\r\n    connection.outputStream.withWriter(\"UTF-8\") {\r\n        new StreamingJsonBuilder(it, bodyReq)\r\n    }\r\n\r\n    connection.connect()\r\n    def responseCode = connection.getResponseCode().toString()\r\n\r\n    log.debug(\"Response HttpStatusCode: ${responseCode}\")\r\n\r\n    // If backend replies with 200 then the condition is passed\r\n    if (\"200\".equals(responseCode)) {\r\n        log.debug(\"Validator passed!\")\r\n    } else {\r\n\r\n        responseBody = ((HttpURLConnection) connection).errorStream.text\r\n        log.debug(\"Validator not passed, responseBody: ${responseBody}\")\r\n\r\n        // testing without redeploying each time\r\n        //responseBody = '{\"W\": \"[[[W, CONFIRM_RISK_ANALYSIS, null]]]\"}'\r\n\r\n        throw new InvalidInputException(responseBody)\r\n    }\r\n} catch (Exception e) {\r\n    //This is an exception in the script\r\n    log.debug(\"Exception raised calling endpoint ${baseURL}\")\r\n    log.error(e)\r\n    if (e instanceof InvalidInputException) {\r\n        throw e\r\n    }\r\n    throw new InvalidInputException('{\"E\": \"[[[ Validator failed ]]]\" }')\r\n}","scriptPath":null}</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="Not Done" status="‰Þ" step="4">
          <post-functions>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">214ff8cf-8a1b-49c7-b960-9195e3954c57</arg>
              <arg name="FIELD_NOTES">Create obj "Checklist" - NOT for ASSISTANT tickets</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":" import com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.issue.Issue\r\nimport com.atlassian.jira.issue.MutableIssue;\r\nimport com.atlassian.jira.event.type.EventDispatchOption;\r\nimport org.apache.log4j.Level\r\nimport com.atlassian.jira.issue.IssueManager\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File('/var/atlassian/application-data/shared/scripts/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\"); \r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n  \r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\r\n  \r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\"); \r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n  \r\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\"); \r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\r\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \r\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\r\n\r\nIssueManager issueManager = ComponentAccessor.getIssueManager()\r\n//issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-196938\")\r\n\r\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\r\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\r\n\r\ndef asset = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_ASSET\")[0]\r\ndef ticketVisKey = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_VISIBILITY_KEY\")[0]\r\ndef checklistField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_ASSET_CHECKLIST\")[0]\r\ndef assignedTo = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_ASSIGNED_TO\")[0]\r\n\r\n/*27.01.2023 AF - Map issue type to filter available checklists*/\r\ndef issueTypeMap\r\nif(issue.issueType.name == \"Maintenance Ticket\"){\r\n    issueTypeMap = \"REPAIR_TICKET\"\r\n}\r\nif(issue.issueType.name == \"New Installation\"){\r\n    issueTypeMap = \"NEW_INSTALLATION_TICKET\"\r\n}\r\nif(issue.issueType.name == \"Modernization\"){\r\n    issueTypeMap = \"MODERNIZATION\"\r\n}\r\nif(issue.issueType.name == \"Planned Maintenance Task\"){\r\n    issueTypeMap = \"PM_TASK\"\r\n}\r\n    \r\n//30.03.2022 - ora messa condizione fissa in base alla company code, aggiungere flag sull'oggetto Company che la abiliti o meno alla dynamic risk assessment. Solo se la company referenziata nella visibility key \r\n//ha la dynamic risk assessment attiva fare quanto sotto\r\n//27.01.2023 - AF - tolta condizione che lega la generazione della checklist al codice company o alla presenza della dynamic risks assessment - se ci sono elementi Checklist viene creato, viceversa non viene creato nulla\r\n//if(issue.getCustomFieldValue(ticketVisKey)[0].toString().contains(\"1179\") || issue.getCustomFieldValue(ticketVisKey)[0].toString().contains(\"1078\")){\r\n\r\nif(issue.getCustomFieldValue(checklistField) == null &amp;&amp; issue.issueType.name != \"Planned Maintenance Ticket\" &amp;&amp; (issue.getCustomFieldValue(assignedTo) == null || !issue.getCustomFieldValue(assignedTo).toString().equals(\"ASSISTANT\"))){\r\n    log.info issue.getCustomFieldValue(asset)[0].toString()\r\n    def ass=issue.getCustomFieldValue(asset)[0].toString()\r\n    def assKey = ass.substring(ass.lastIndexOf('(')+1,ass.lastIndexOf(')'))\r\n    def assName = ass.substring(0,ass.lastIndexOf('(')-1)\r\n    def assObject = objectFacade.loadObjectBean(assKey)\r\n    log.info \"assKey: \" + assKey\r\n    log.info (\"assName: \" + assName)\r\n    log.info (\"assObject: \" + assObject)\r\n    \r\n    log.info objectFacade.loadObjectAttributeBean(assObject.getId(), \"PUBLIC_PRODUCT_TYPE_REF\").toString()\r\n    obTriage = objectFacade.loadObjectAttributeBean(assObject.getId(), \"PUBLIC_PRODUCT_TYPE_REF\").createMutable()\r\n    prodType = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n    log.info prodType.toString()\r\n\r\n    log.info issue.getCustomFieldValue(ticketVisKey)[0].toString()\r\n    def vis=issue.getCustomFieldValue(ticketVisKey)[0].toString()\r\n    def visKey = vis.substring(vis.lastIndexOf('(')+1,vis.lastIndexOf(')'))\r\n    def objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = Checklists AND ISSUE_TYPE IN (\" + issueTypeMap + \") AND PRODUCT_TYPE_REF.Key = DO-\" + prodType.toString() + \" AND object HAVING outboundReferences(objectType = Company AND object HAVING inboundReferences(objectType = \\\"Visibility Key\\\" AND Key = \" + visKey.toString() + \"))\")\r\n    log.warn \"iql: \" + \"objectType = Checklists AND ISSUE_TYPE IN (\" + issueTypeMap + \") AND PRODUCT_TYPE_REF.Key = DO-\" + prodType.toString() + \" AND object HAVING outboundReferences(objectType = Company AND object HAVING inboundReferences(objectType = \\\"Visibility Key\\\" AND Key = \" + visKey.toString() + \"))\"\r\n\r\n    if(objects.size() == 0){\r\n        objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = Checklists AND ISSUE_TYPE IN (\" + issueTypeMap + \") AND DEFAULT = true AND object HAVING outboundReferences(objectType = Company AND object HAVING inboundReferences(objectType = \\\"Visibility Key\\\" AND Key = \" + visKey.toString() + \"))\")\r\n        log.warn \"iql: \" + \"objectType = Checklists AND ISSUE_TYPE IN (\" + issueTypeMap + \") AND DEFAULT = true AND object HAVING outboundReferences(objectType = Company AND object HAVING inboundReferences(objectType = \\\"Visibility Key\\\" AND Key = \" + visKey.toString() + \"))\"\r\n    }\r\n\r\n    if(objects){\r\n        log.info objects[0].toString()\r\n        \r\n        log.info objectFacade.loadObjectAttributeBean(objects[0].getId(), \"CHECKLIST_NAME\").toString()\r\n        obTriage = objectFacade.loadObjectAttributeBean(objects[0].getId(), \"CHECKLIST_NAME\").createMutable()\r\n        checklist = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n        log.info checklist.toString().replaceAll(' - ','').replaceAll(' ','')\r\n        \r\n        def newObjId = properties['iobj.' + checklist.toString().replaceAll(' - ','').replaceAll(' ','') + '.id'].toInteger()\r\n        log.info \"id: \" + properties['iobj.' + checklist.toString().replaceAll(' - ','').replaceAll(' ','') + '.id'].toString()\r\n        def newObjNameId = properties['iobj.' + checklist.toString().replaceAll(' - ','').replaceAll(' ','') + '.Name.id'].toInteger()\r\n        def newObjCompletedId = properties['iobj.' + checklist.toString().replaceAll(' - ','').replaceAll(' ','') + '.completed.id'].toInteger()\r\n        log.info newObjNameId.toString()\r\n        \r\n        def checklistObjects = new ArrayList();\r\n        def objectAttributeBeans = new ArrayList();\r\n        def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(newObjNameId); \r\n        def completedObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(newObjCompletedId); \r\n        \r\n        def objectTypeChecklist = objectTypeFacade.loadObjectTypeBean(newObjId);\r\n        def newObjectBean = objectTypeChecklist.createMutableObjectBean();\r\n        \r\n        objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, nameObjectTypeAttributeBean, issue.key.toString()));\r\n        objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, completedObjectTypeAttributeBean, \"false\"));\r\n        \r\n        newObjectBean.setObjectAttributeBeans(objectAttributeBeans);\r\n        /* Store the object into Insight. The new ObjectBean will be updated with an unique ID */\r\n        try {\r\n            newObjectBean = objectFacade.storeObjectBean(newObjectBean);\r\n            log.warn(\"newObjectBean: \" + newObjectBean);\r\n        } catch (Exception vie) {\r\n            log.warn(\"Could not create issue due to validation exception:\" + vie.getMessage());\r\n        }\r\n        \r\n        checklistObjects.add(newObjectBean)\r\n        \r\n        log.info (\"checklistObjects: \" + checklistObjects)\r\n        def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\r\n        \r\n        if (!checklistObjects.isEmpty()) {\r\n            MutableIssue mi = (MutableIssue) issue;\r\n            mi.setCustomFieldValue(checklistField, checklistObjects);\r\n            ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n        }\r\n    }\r\n}     ","scriptPath":null,"parameters":{}}</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">38fe5036-ea9d-4a96-89fe-da1ee0c5fcaf</arg>
              <arg name="FIELD_NOTES">Copy TRAVEL time from PM Ticket to PM Task if it is the first started</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport org.apache.log4j.Category\r\nimport groovy.json.JsonBuilder\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\nimport com.atlassian.jira.issue.IssueManager\r\nimport com.atlassian.jira.issue.ModifiedValue\r\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\r\nimport java.text.SimpleDateFormat;\r\nimport com.atlassian.jira.issue.index.IssueIndexingService\r\nimport com.atlassian.jira.jql.parser.JqlQueryParser\r\nimport com.atlassian.jira.bc.issue.search.SearchService\r\nimport com.atlassian.jira.user.util.UserUtil\r\nimport com.atlassian.jira.web.bean.PagerFilter\r\nimport com.atlassian.jira.issue.MutableIssue\r\nimport com.atlassian.jira.event.type.EventDispatchOption\r\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\r\nimport com.atlassian.jira.issue.index.IssueIndexingService\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.issue.Issue\r\nimport com.atlassian.jira.issue.MutableIssue;\r\nimport com.atlassian.jira.event.type.EventDispatchOption;\r\nimport org.apache.log4j.Level\r\nimport java.sql.Timestamp\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File('/var/atlassian/application-data/shared/scripts/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\"); \r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n  \r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\r\n  \r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\"); \r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n  \r\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\"); \r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\r\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \r\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\r\n\r\n\r\nIssueManager issueManager = ComponentAccessor.getIssueManager()\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-41566\")\r\ndef onSiteTechsTravelTraceField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIAN_ACTIVITIES_TRACE\")[0];\r\ndef toBeCopied=true\r\nfor (st in issue.getParentObject().getSubTaskObjects()){\r\n    if (st.getCustomFieldValue(onSiteTechsTravelTraceField) != null){\r\n        log.debug issue.getCustomFieldValue(onSiteTechsTravelTraceField)\r\n        toBeCopied=false\r\n    }\r\n}\r\n\r\nif(toBeCopied){\r\n    def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\r\n    MutableIssue mi = (MutableIssue) issue;\r\n    mi.setCustomFieldValue(onSiteTechsTravelTraceField, issue.getParentObject().getCustomFieldValue(onSiteTechsTravelTraceField));\r\n    ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n}","scriptPath":null}</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">a8d464fc-1a20-4de2-a7a4-a597903e3f4c</arg>
              <arg name="FIELD_NOTES"> IF OP_SUPPLIER IS EMPTY --&gt; Log Timestamp for Tech activity &amp; Link object to the ticket (OP_TECHNICIANS_ONSITE) </arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"   /* ------------------ ACTION START WORKING ------------------ */\r\n/* ------------------ TRACE_ACTION_STATUS = WORK ------------------ */\r\n/* ------------------ ACTION = JOB_STARTED ------------------ */\r\n\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.issue.Issue\r\nimport com.atlassian.jira.issue.MutableIssue;\r\nimport com.atlassian.jira.event.type.EventDispatchOption;\r\nimport org.apache.log4j.Level\r\nimport java.sql.Timestamp\r\nimport com.atlassian.jira.config.SubTaskManager\r\nimport com.atlassian.jira.issue.IssueManager;\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File('/var/atlassian/application-data/shared/scripts/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\"); \r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n  \r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\r\n  \r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\"); \r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n  \r\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\"); \r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\r\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \r\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\r\n\r\nIssueManager issueManager = ComponentAccessor.getIssueManager()\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-69415\")\r\n\r\ndef currentUser = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENT_USER\")[0]\r\ndef onSiteTechsTraceField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIAN_ACTIVITIES_TRACE_WORK\")[0];\r\ndef onSiteTechsField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIANS_ONSITE\")[0];\r\ndef OnSiteTechObjects = new ArrayList();\r\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\r\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\r\n\r\n/*25.11.22*/\r\ndef localTimeStamp\r\ndef localDate\r\n/*03.10.23*/\r\ndef DATETIME_OFFSET = properties['wf.tr.datetimewithoffset'].toString()\r\nlog.debug \"DATETIME_OFFSET: \" + DATETIME_OFFSET\r\nif (DATETIME_OFFSET != null &amp;&amp; DATETIME_OFFSET != 'null'){\r\n\r\ndef siteCF = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SITE\")[0];\r\ndef site, siteKey, siteObject, visibility, visibilityKey\r\nif (issue.getCustomFieldValue(siteCF) != null) {\r\n    site = issue.getCustomFieldValue(siteCF).toString()\r\n    siteKey = site.substring(site.lastIndexOf('(') + 1, site.lastIndexOf(')'))\r\n    siteObject = objectFacade.loadObjectBean(siteKey)\r\n    visibility = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_VISIBILITY_KEY\")[0]\r\n    visibilityKey = issue.getCustomFieldValue(visibility)[0].toString().substring(issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf('(') + 1, issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf(')'))\r\n} else {\r\n    visibility = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_INDIRECT_JOB_TKT_VISIBILITY\")[0]\r\n    visibilityKey = issue.getCustomFieldValue(visibility)[0].toString().substring(issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf('(') + 1, issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf(')'))\r\n}\r\ndef timeZone\r\ndef companyRef = objectFacade.loadObjectAttributeBean(objectFacade.loadObjectBean(visibilityKey).getId(), properties['iobj.visibilityKey.companyRef'].toString()).getObjectAttributeValueBeans();\r\nlog.info \"companyRef: \" + companyRef\r\ndef companyRefId = companyRef[0].getReferencedObjectBeanId()\r\nlog.debug \"companyRefId:\" + companyRefId\r\nif (issue.getCustomFieldValue(siteCF) != null &amp;&amp; objectFacade.loadObjectAttributeBean(siteObject.getId(), \"SITE_REF\")) {\r\n    obTriage = objectFacade.loadObjectAttributeBean(siteObject.getId(), \"SITE_REF\").createMutable()\r\n    s = obTriage.getObjectAttributeValueBeans()\r\n    s = s.toString()\r\n    sKey = s.substring(s.lastIndexOf('(') + 1, s.lastIndexOf(')'))\r\n    if (objectFacade.loadObjectAttributeBean(sKey.toInteger(), \"TIME_ZONE\")) {\r\n        obTriage = objectFacade.loadObjectAttributeBean(sKey.toInteger(), \"TIME_ZONE\").createMutable()\r\n        timeZone = obTriage.getObjectAttributeValueBeans()\r\n        timeZone = timeZone[0].getValue()\r\n        log.debug \"TimeZone da Site: \" + timeZone\r\n    } else {\r\n        if (objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\")) {\r\n            obTriage = objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\").createMutable()\r\n            timeZone = obTriage.getObjectAttributeValueBeans()\r\n            timeZone = timeZone[0].getValue()\r\n            log.debug \"TimeZone da Company: \" + timeZone\r\n        }\r\n    }\r\n} else {\r\n    if (objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\")) {\r\n        obTriage = objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\").createMutable()\r\n        timeZone = obTriage.getObjectAttributeValueBeans()\r\n        timeZone = timeZone[0].getValue()\r\n        log.debug \"TimeZone da Company: \" + timeZone\r\n    }\r\n}\r\nif (!timeZone) {\r\n    timeZone = \"Europe/Rome\"\r\n}\r\nlog.debug \"timeZone: \" + timeZone\r\nlocalTimeStamp = (new Timestamp((new Date(new Date().getTime() - TimeZone.getDefault().getRawOffset() + TimeZone.getTimeZone(timeZone.toString()).getRawOffset())).time)).toString()\r\nlocalDate = new Date(new Date().getTime() - TimeZone.getDefault().getRawOffset() + TimeZone.getTimeZone(timeZone.toString()).getRawOffset())\r\n\r\n}else{\r\n\r\n    localTimeStamp =  (new Timestamp((new Date()).time)).toString()\r\n    localDate =  new Date()\r\n\r\n}\r\nlog.debug localTimeStamp\r\nlog.debug localDate\r\n/*25.11.22*/\r\n\r\n/*Solo se ticket eseguito da tecnici interni eseguo track automatico dei tempi*/\r\ndef trovato=false, reopened=false\r\nfor (s in ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplier'].toString())){\r\n    if (issue.getCustomFieldValue(s) != null){\r\n        trovato=true\r\n    }\r\n}\r\n\r\nif(!trovato){\r\n    \r\n    /* ------------ DEFINE ACTION TO BE TRACED AND SET TO BE DONE ------------- */\r\n    def ACTION = properties['wf.tr.startWorking.action'].toString()\r\n    def SET = properties['wf.tr.startWorking.set'].toString()\r\n    \r\n    def ONSITE_TECH_REPORT_OBJ_TYPE=properties['iobj.onSiteTechReport'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_NAME=properties['iobj.onSiteTechReport.name.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF=properties['iobj.onSiteTechReport.technicianRef.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED=properties['iobj.onSiteTechReport.jobCompleted.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_JOB_STARTED=properties['iobj.onSiteTechReport.jobStarted.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_TRACE_ACTION=properties['iobj.onSiteTechReport.traceAction.id'].toString().toInteger()\r\n    \r\n    log.warn \"********************** CONFIRM ASSET **********************\"\r\n    def objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = Technician AND TECHNICIAN_REF.TECH_ACCOUNT =\\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\"\")\r\n    log.warn \"iql: \" + \"objectType = Technician AND TECHNICIAN_REF.TECH_ACCOUNT =\\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\"\"\r\n\r\n    for(technician in objects){\r\n        //extract insight key ang get object\r\n        def tech=technician.toString()\r\n        def techKey = tech.substring(tech.lastIndexOf('(')+1,tech.lastIndexOf(')'))\r\n        def techName = tech.substring(0,tech.lastIndexOf('(')-1)\r\n        def techObject = objectFacade.loadObjectBean(techKey)\r\n        log.info \"techKey: \" + techKey\r\n        log.info (\"techName: \" + techName)\r\n        log.info (\"techObject: \" + techObject)\r\n        \r\n        if (SET == \"JOB_COMPLETED\"){\r\n            /*SEARCH OBJECT TO BE UPDATED*/\r\n            objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key=\\\"\" + issue.key + \"\\\")\")\r\n            log.warn \"iql: \" + \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key=\\\"\" + issue.key + \"\\\")\"\r\n            \r\n            if(objects.size() &gt; 0){\r\n                /*UPDATE JOB_COMPLETED ON SELECTED OBJECT*/          \r\n                def obj = objectFacade.loadObjectBean(objects[0].getId());\r\n                attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED); \r\n                log.info \"attribType: \" + attribType.toString()\r\n                newAttrib = obj.createObjectAttributeBean(attribType);\r\n                def newAttribValue = newAttrib.createObjectAttributeValueBean();\r\n                \r\n                try {\r\n                    newAttribValue.setDateValue(localDate);\r\n                } catch (Exception vie) {\r\n                    log.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType.toString() + \" to \" + localTimeStamp + \". Exiting.\");\r\n                    log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                    return false;\r\n                }\r\n                \r\n                def attribValues = newAttrib.getObjectAttributeValueBeans();\r\n                attribValues.add(newAttribValue);\r\n                newAttrib.setObjectAttributeValueBeans(attribValues);\r\n                \r\n                try {\r\n                    newAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\r\n                } catch (Exception vie) {\r\n                    log.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\r\n                    log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                    return false;\r\n                }\r\n                \r\n            }else{\r\n                /*ERROR!!*/\r\n            }\r\n            \r\n        }else{\r\n            /*CREATE NEW OBJECT: ONSITE_TECH_REPORT_OBJ_TYPE*/\r\n            def existingObjects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key=\\\"\" + issue.key + \"\\\")\")\r\n            log.warn \"iql: \" + \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key=\\\"\" + issue.key + \"\\\")\"\r\n            \r\n            if(existingObjects.size()==0){\r\n                def objectTypeOnSiteTechReport = objectTypeFacade.loadObjectTypeBean(ONSITE_TECH_REPORT_OBJ_TYPE);\r\n                def newObjectBean = objectTypeOnSiteTechReport.createMutableObjectBean();\r\n                \r\n                def objectAttributeBeans = new ArrayList();\r\n                def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_NAME); \r\n                def startedObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_JOB_STARTED); \r\n                def actionObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TRACE_ACTION); \r\n                \r\n                objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, nameObjectTypeAttributeBean, techName));\r\n                def parentStarted\r\n\r\n                //Se \u00e8 il primo sub-task ad essere avviato eredito lo stesso timestamp di start working definito sul ticket padre come inizio lavoro del tecnico\r\n                //Recupero l'oggetto OnSite_Tech_Report del PM Ticket e ricavo il campo JOB_STARTED\r\n                SubTaskManager subTaskManager = ComponentAccessor.getSubTaskManager();\r\n                Collection subTasks = issue.getParentObject().getSubTaskObjects()\r\n                def first = true\r\n                if (!subTasks.empty) {\r\n                    subTasks.each {\r\n                        if(!it.getStatus().name.toString().equals(\"Confirmed and Planned\") &amp;&amp; it.key != issue.key){\r\n                            first=false\r\n                        }\r\n                    }\r\n                    if(first){\r\n                        log.debug \"primo sub-task\"\r\n                        //Estrarre JOB_STARTED sull'oggetto OnSite_Tech_Report referenziato nel PM ticket padre\r\n                        def parentTask = issue.getParentObject()\r\n                        def parentObjects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND TRACE_ACTION_STATUS=WORK AND object HAVING connectedTickets(key=\\\"\" + parentTask.key + \"\\\")\")\r\n                        log.warn \"iql: \" + \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND TRACE_ACTION_STATUS='WORK' AND object HAVING connectedTickets(key=\\\"\" + parentTask.key + \"\\\")\"\r\n                        \r\n                        if(parentObjects.size() &gt; 0){\r\n                            /*GET JOB_STARTED FROM SELECTED OBJECT*/          \r\n                            def obTriage = objectFacade.loadObjectAttributeBean(parentObjects[0].getId(), \"JOB_STARTED\").createMutable()\r\n                            parentStarted = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n                            log.debug \"parentStarted: \" + parentStarted\r\n                            objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, startedObjectTypeAttributeBean, localTimeStamp));\r\n                        }\r\n                    }else{\r\n                        objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, startedObjectTypeAttributeBean, localTimeStamp));\r\n                    }\r\n                }\r\n\r\n                objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, actionObjectTypeAttributeBean, ACTION));\r\n                \r\n                newObjectBean.setObjectAttributeBeans(objectAttributeBeans);\r\n                /* Store the object into Insight. The new ObjectBean will be updated with an unique ID */\r\n                try {\r\n                    newObjectBean = objectFacade.storeObjectBean(newObjectBean);\r\n                    log.warn(\"newObjectBean: \" + newObjectBean);\r\n                } catch (Exception vie) {\r\n                    log.warn(\"Could not create issue due to validation exception:\" + vie.getMessage());\r\n                }\r\n                \r\n                /* Update TECHNICIAN_REF on the newObject */\t\t        \r\n                def objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF).createMutable() //The id of the attribute\r\n                \r\n                /* Create the new attribute bean based on the value */\r\n                def newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, techKey);\r\n                /* Load the attribute bean */\r\n                def objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), techKey);\r\n                if (objectAttributeBean != null) {\r\n                    /* If attribute exist reuse the old id for the new attribute */\r\n                    newObjectAttributeBean.setId(objectAttributeBean.getId());\r\n                }\r\n                /* Store the object attribute into Insight. */\r\n                try {\r\n                    objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);\r\n                } catch (Exception vie) {\r\n                    log.warn(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\r\n                }  \r\n                \r\n                OnSiteTechObjects.add(newObjectBean)\r\n                \r\n                log.info (\"OnSiteTechObjects: \" + OnSiteTechObjects)\r\n                def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\r\n                \r\n                if (!OnSiteTechObjects.isEmpty()) {\r\n                    MutableIssue mi = (MutableIssue) issue;\r\n                    mi.setCustomFieldValue(onSiteTechsTraceField, OnSiteTechObjects);\r\n                    ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n                    \r\n                    mi.setCustomFieldValue(onSiteTechsField, OnSiteTechObjects);\r\n                    ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n                }\r\n\r\n\r\n            }\r\n\r\n        }\r\n    }   \r\n} ","scriptPath":null,"parameters":{}}</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">8cb604ed-cc24-4816-bf1d-7b7808e8f680</arg>
              <arg name="FIELD_NOTES"> IF OP_SUPPLIER IS NOT EMPTY --&gt; Create OnSite_Tech_Report objects to be associated to the issue's customfield OP_TECHNICIANS_ONSITE </arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":" import com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.issue.Issue\r\nimport com.atlassian.jira.issue.MutableIssue;\r\nimport com.atlassian.jira.event.type.EventDispatchOption;\r\nimport org.apache.log4j.Level\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File('/var/atlassian/application-data/shared/scripts/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\"); \r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n  \r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\r\n  \r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\"); \r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n  \r\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\"); \r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\r\n\r\nIssue issue = issue\r\n\r\ndef plannedTechsField = issue.getCustomFieldValue(ComponentAccessor.getCustomFieldManager().getCustomFieldObjectByName(properties['cf.technicians'].toString()))\r\ndef onSiteTechsField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.techniciansOnsite'].toString())[0];\r\ndef OnSiteTechObjects = new ArrayList();\r\n\r\ndef automaticallyClosedField = issue.getCustomFieldValue(ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString()))\r\n\r\ndef ONSITE_TECH_REPORT_OBJ_TYPE=properties['iobj.onSiteTechReport'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_NAME=properties['iobj.onSiteTechReport.name.id'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF=properties['iobj.onSiteTechReport.technicianRef.id'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_SUPPLIER_REF=properties['iobj.onSiteTechReport.supplierRef.id'] ? properties['iobj.onSiteTechReport.supplierRef.id'].toString().toInteger() : 3073\r\n\r\n/*Solo se ticket eseguito da tecnici interni eseguo track automatico dei tempi*/\r\ndef trovato=false, reopened=false\r\nfor (s in ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplier'].toString())){\r\n    if (issue.getCustomFieldValue(s) != null){\r\n        trovato=true\r\n    }\r\n}\r\n\r\nif(trovato){\r\nif(automaticallyClosedField==null || automaticallyClosedField.toString().equals(\"No\")){\r\n    if(plannedTechsField){\r\n        \r\n        for(technician in plannedTechsField){\r\n            \r\n            //extract insight key ang get object\r\n            def tech=technician.toString()\r\n            def techKey = tech.substring(tech.lastIndexOf('(')+1,tech.lastIndexOf(')'))\r\n            def techName = tech.substring(0,tech.lastIndexOf('(')-1)\r\n            def techObject = objectFacade.loadObjectBean(techKey)\r\n            log.info \"techKey: \" + techKey\r\n            log.info (\"techName: \" + techName)\r\n            log.info (\"techObject: \" + techObject)\r\n            \r\n            def objectTypeOnSiteTechReport = objectTypeFacade.loadObjectTypeBean(ONSITE_TECH_REPORT_OBJ_TYPE);\r\n            def newObjectBean = objectTypeOnSiteTechReport.createMutableObjectBean();\r\n            \r\n            def objectAttributeBeans = new ArrayList();\r\n            def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_NAME); \r\n            \r\n            objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, nameObjectTypeAttributeBean, techName));\r\n                    \r\n            newObjectBean.setObjectAttributeBeans(objectAttributeBeans);\r\n            /* Store the object into Insight. The new ObjectBean will be updated with an unique ID */\r\n            try {\r\n                newObjectBean = objectFacade.storeObjectBean(newObjectBean);\r\n                log.warn(\"newObjectBean: \" + newObjectBean);\r\n            } catch (Exception vie) {\r\n                log.warn(\"Could not create issue due to validation exception:\" + vie.getMessage());\r\n            }\r\n    \r\n            /* Update TECHNICIAN_REF on the newObject */\t\t        \r\n            def objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF).createMutable() //The id of the attribute\r\n\r\n            /* Create the new attribute bean based on the value */\r\n            def newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, techKey);\r\n            /* Load the attribute bean */\r\n            def objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), techKey);\r\n            if (objectAttributeBean != null) {\r\n               /* If attribute exist reuse the old id for the new attribute */\r\n               newObjectAttributeBean.setId(objectAttributeBean.getId());\r\n            }\r\n            /* Store the object attribute into Insight. */\r\n            try {\r\n                objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);\r\n            } catch (Exception vie) {\r\n                log.warn(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\r\n            }  \r\n            \r\n            /* Update SUPPLIER_REF on the newObject */\t\r\n            /* Get SUPPLIER_REF from Tech */\r\n            def obTriage = objectFacade.loadObjectAttributeBean(techObject.getId(), (properties['iobj.techOnsite.supplierRef'] ? properties['iobj.techOnsite.supplierRef'].toString() : \"SUPPLIER_REF\")).createMutable()\r\n            def suppRef = obTriage.getObjectAttributeValueBeans().toString()\r\n            def supp = suppRef.toString()\r\n            log.info \"supp: \" + supp\r\n            suppRefId = supp.substring(supp.lastIndexOf('(')+1,supp.lastIndexOf(')'))\r\n            log.info \"suppRefId: \" + suppRefId\r\n            suppRefKey = properties['ischema.aa'].toString() + \"-\" + suppRefId\r\n            log.info \"suppRefKey: \" + suppRefKey\r\n            suppRefObj = objectFacade.loadObjectBean(properties['ischema.aa'].toString() + \"-\" + suppRefId)\r\n\t\t\tlog.info \"suppRefObj: \" + suppRefObj\r\n            \r\n            def suppObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_SUPPLIER_REF).createMutable() //The id of the attribute\r\n            \r\n            /* Create the new attribute bean based on the value */\r\n            newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, suppObjectTypeAttributeBean, suppRefKey);\r\n            /* Load the attribute bean */\r\n            objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), suppRefKey);\r\n            if (objectAttributeBean != null) {\r\n               /* If attribute exist reuse the old id for the new attribute */\r\n               newObjectAttributeBean.setId(objectAttributeBean.getId());\r\n            }\r\n            /* Store the object attribute into Insight. */\r\n            try {\r\n                objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);\r\n            } catch (Exception vie) {\r\n                log.warn(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\r\n            }  \r\n            \r\n            OnSiteTechObjects.add(newObjectBean)\r\n         }\r\n    }\r\n    log.info (\"OnSiteTechObjects: \" + OnSiteTechObjects)\r\n    def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\r\n    \r\n    if (!OnSiteTechObjects.isEmpty()) {\r\n        MutableIssue mi = (MutableIssue) issue;\r\n        mi.setCustomFieldValue(onSiteTechsField, OnSiteTechObjects);\r\n        ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n    }   \r\n}   \r\n    } ","scriptPath":null,"parameters":{}}</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">0beb416e-cd06-497d-8927-d550c9363082</arg>
              <arg name="FIELD_ACTION">141 Eseguita con cartaceo</arg>
              <arg name="FIELD_NOTES">Automatically Reject tkts based on Dynamic Risks Assessment result</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.FasttrackTransition</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.FasttrackTransition</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="FIELD_CONDITION">{"script":"import com.atlassian.jira.issue.Issue\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport org.apache.log4j.Category\r\nimport groovy.json.JsonBuilder\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\nimport com.atlassian.jira.issue.IssueManager\r\nimport com.atlassian.jira.issue.ModifiedValue\r\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\r\nimport java.text.SimpleDateFormat;\r\nimport com.atlassian.jira.issue.index.IssueIndexingService\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\r\npropertiesFile.withInputStream {\r\n    properties.load(it)\r\n}\r\nlog.setLevel(org.apache.log4j.Level.DEBUG)\r\n\r\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-41755\")\r\n\r\nlog.debug \"Transazione CONFIRM ASSET - Issue: \" + issue\r\n\r\ndef errors = false\r\ndef warnings = false\r\n\r\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]\r\ndef dynamicRisksAss =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_ASSET_RISKS_ASSESSMENT\")[0]\r\n\r\ndef errorMandatoryFields = new ArrayList()\r\ndef errorRejectedTkt = false\r\n\r\nif(issue.getCustomFieldValue(dynamicRisksAss)!=null &amp;&amp; (String)issue.getCustomFieldValue(dynamicRisksAss) != \"\" &amp;&amp; !issue.getCustomFieldValue(dynamicRisksAss).toString().equals(\"\")){\r\n    /*Ciclare tutti gli oggetti associati al campo*/\r\n    //insight classes &amp; components\r\n    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \r\n    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\r\n    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n\r\n    def risksAssessment = issue.getCustomFieldValue(dynamicRisksAss)\r\n    def dra5, dra6\r\n\r\n    for(i in risksAssessment){\r\n        //extract insight key ang get object\r\n        def risk=i.toString()\r\n        def riskKey = risk.substring(risk.lastIndexOf('(')+1,risk.lastIndexOf(')'))\r\n        def riskObject = objectFacade.loadObjectBean(riskKey)\r\n\r\n        def obTriage\r\n        \r\n\r\n        if(objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA5\")!=null){\r\n            obTriage = objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA5\").createMutable()\r\n            dra5 = obTriage.getObjectAttributeValueBeans()[0].value.toString()\r\n            if(dra5.equals(\"NO\")){\r\n                errorRejectedTkt=true\r\n            }\r\n        }\r\n\r\n        if(objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA6\")!=null){\r\n            obTriage = objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA6\").createMutable()\r\n            dra6 = obTriage.getObjectAttributeValueBeans()[0].value.toString()\r\n            if(dra6.equals(\"NO\")){\r\n                errorRejectedTkt=true\r\n            }\r\n        }\r\n    }\r\n\r\n    return errorRejectedTkt\r\n}else{\r\n    return false\r\n}\r\n","scriptPath":null}</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_TRANSITION_OPTIONS" />
              <arg name="events" />
              <arg name="FIELD_ADDITIONAL_SCRIPT" />
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </common-actions>
  <steps>
    <step id="3" name="Confirmed and Planned">
      <meta name="jira.status.id">14329</meta>
      <actions>
<common-action id="41" />
<common-action id="201" />
        <action id="111" name="Genera Operazioni di Manutenzione ODS">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">56d285d0-3b7f-4146-a3ed-b1319013939d</arg>
                <arg name="FIELD_NOTES">PM Task senza PM operations NON ASSISTANT (i tkt assistant NON devono ripetere le PM Operations)</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="v+nWù">false</arg>
                <arg name="FIELD_CONDITION">{"script":"import com.atlassian.jira.issue.Issue\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport org.apache.log4j.Category\r\nimport groovy.json.JsonBuilder\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\nimport com.atlassian.jira.issue.IssueManager\r\nimport com.atlassian.jira.issue.ModifiedValue\r\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\r\nimport java.text.SimpleDateFormat;\r\nimport com.atlassian.jira.issue.index.IssueIndexingService\r\n\r\ndef assignedTo =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_ASSIGNED_TO\")[0]\r\ndef pmOperations =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_PM_OPERATIONS_ODS\")[0]\r\nlog.debug \"issue.getCustomFieldValue(assignedTo): \" + issue.getParentObject().getCustomFieldValue(assignedTo)\r\n\r\nissue.getCustomFieldValue(pmOperations) == null &amp;&amp; (issue.getParentObject().getCustomFieldValue(assignedTo) == null || !issue.getParentObject().getCustomFieldValue(assignedTo).toString().equals(\"ASSISTANT\"))","scriptPath":null,"parameters":{}}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">36237cda-1b88-49eb-8e62-354285079ef6</arg>
              <arg name="FIELD_NOTES">PM Task: genera operazioni di manutenzione</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport com.atlassian.jira.issue.index.IssueIndexingService\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\n\ndef pmOperations = issue.getCustomFieldValue(ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_PM_OPERATIONS_ODS\")[0])\nif(pmOperations == null){\n\n    /* REST API per pulizia cache issue linkata */\n    requestMethod = \"PUT\";\n    /*Script Variables*/\n    //Per test da console\n    //Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-32535\")\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/pm-subtask/\" + issue.key + \"/operations\"\n    URL url = new URL(baseURL)\n    HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.connect();\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n    }\n    IssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\n    issueIndexingService.reIndex(issue)\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">6c1c89cf-5218-4613-a288-008b311ebe3c</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.issue.fields.CustomField\r\nimport com.atlassian.jira.issue.CustomFieldManager\r\nimport com.atlassian.jira.workflow.JiraWorkflow\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenLayoutItem\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenTab\r\nimport com.atlassian.jira.issue.fields.FieldManager\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreen\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenManager\r\nimport com.opensymphony.workflow.loader.ActionDescriptor\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.workflow.WorkflowManager\r\nimport groovy.json.StreamingJsonBuilder;\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner;\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl;\r\n\r\ndef requestMethod\r\ndef baseURL\r\ndef responseCode\r\ndef responseMessage\r\ndef bodyReq = []\r\ndef br\r\nMap&lt;String, Object&gt; customFieldMap = new HashMap&lt;String,Object&gt;();\r\n\r\ntry {\r\n    Properties properties = new Properties()\r\n    File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\r\n    propertiesFile.withInputStream {\r\n        properties.load(it)\r\n    }\r\n\r\n    def serverBase = String.format(\"http://%s/op\", properties['api.env'])\r\n    def transactionAction = \"validators\"\r\n\r\n    URL url\r\n    HttpURLConnection connection\r\n    requestMethod = \"POST\";\r\n\r\n    baseURL = String.format(\"%s/rest/jira/workflows/%s/%s\", serverBase, transientVars.actionId, transactionAction);\r\n\r\n    log.debug baseURL;\r\n\r\n    WorkflowManager workflowManager = ComponentAccessor.getWorkflowManager();\r\n    JiraWorkflow jiraWorkflow = workflowManager.getWorkflow(transientVars.issue);\r\n\r\n    CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\r\n    \r\n    log.debug jiraWorkflow.getName();\r\n    \r\n    ActionDescriptor ad = workflowManager.getActionDescriptor(transientVars.issue, transientVars.actionId);\r\n\r\n    log.debug ad.getName()              //Genera Operazioni di Manutenzione ODS\r\n    log.debug ad.getMetaAttributes()    //{opsbar-sequence=10, jira.description=, jira.fieldscreen.id=19910}\r\n\r\n    def adMeta = ad.getMetaAttributes();\r\n    def fieldScreenId = adMeta.get(\"jira.fieldscreen.id\");\r\n    log.debug \"Field screen id: \" + fieldScreenId\r\n\r\n    if(fieldScreenId != null &amp;&amp; fieldScreenId != \"\") {\r\n        FieldScreenManager fieldScreenManager = ComponentAccessor.getComponent(FieldScreenManager.class);\r\n        FieldScreen fieldScreen = fieldScreenManager.getFieldScreen(Long.valueOf(fieldScreenId.toString()));\r\n        List&lt;FieldScreenTab&gt; fsts = fieldScreen.getTabs();\r\n        for (FieldScreenTab fst : fsts) {\r\n            List&lt;FieldScreenLayoutItem&gt; qwe = fst.getFieldScreenLayoutItems();\r\n            for (FieldScreenLayoutItem fsli : qwe) {\r\n                if (fsli.getFieldId() == null) {\r\n                    continue;\r\n                }\r\n                CustomField customField = customFieldManager.getCustomFieldObject(fsli.getFieldId());\r\n                if (customField == null) {\r\n                    continue;\r\n                }\r\n                def customFieldValue = issue.getCustomFieldValue(customField);\r\n                customFieldMap.put(fsli.getFieldId(), customFieldValue == null ? null : customFieldValue.toString());\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        customFieldMap = null;\r\n    }\r\n    log.debug customFieldMap\r\n\r\n    bodyReq = [ \r\n        \"issueKey\": issue.key,\r\n        \"actionName\": ad.getName(),\r\n        \"jiraWorkflowName\": jiraWorkflow.getName(),\r\n        \"customFieldMap\": customFieldMap,\r\n        \"properties\": properties\r\n    ] \r\n\r\n    log.debug \"baseURL SN: \" + baseURL\r\n    log.debug \"bodyReq SN: \" + bodyReq\r\n\r\n    url = new URL(baseURL)\r\n    connection = (HttpURLConnection)url.openConnection();\r\n    connection.setRequestMethod(requestMethod);\r\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n    connection.setRequestProperty(\"Accept\", \"*/*\");\r\n    connection.setDoOutput(true);\r\n    connection.setDoInput(true);\r\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, bodyReq) }\r\n    \r\n    connection.connect();\r\n    responseCode = connection.getResponseCode().toString()    \r\n        \r\n    log.debug \"Response HttpStatusCode: \" + responseCode\r\n        \r\n    // If backend replies with 200 then the condition is passed    \r\n    if(\"200\".equals(responseCode)){\r\n        log.debug \"OK\"\r\n    } else {\r\n        //This is a backend error.. log\r\n        log.debug \"Backend error\"\r\n\r\n        def output = new ArrayList()\r\n        def eList = new ArrayList()\r\n        def eListErrors = new ArrayList()\r\n        def errorMsgs = new ArrayList()\r\n\r\n        eListErrors.add(\"E\")\r\n        eListErrors.add(\"ERROR\") //if dynamic, better\r\n        eListErrors.add(null)   //it sounds it is used as separator\r\n\r\n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\r\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\r\n\r\n        def jsonSlurper = new JsonSlurper()\r\n        def json_object = jsonSlurper.parseText(outputMsg)\r\n        if(json_object instanceof Map){\r\n            //errorMsgs.add(connection.getResponseCode() + \" \" + json_object.message)\r\n            if(json_object.errors instanceof List){\r\n                for(def cur : (List)json_object.errors){\r\n                    errorMsgs.add(cur.toString())\r\n                }\r\n            } else {\r\n                errorMsgs.add(json_object.errors.toString())\r\n            }            \r\n        }\r\n        eListErrors.add(errorMsgs)\r\n        eList.add(eListErrors)\r\n\r\n        output.add(eList)\r\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\r\n    }\r\n} catch (Exception e){\r\n    //This is an exception in the script\r\n    log.debug \"Exception raised\"\r\n    log.error e\r\n    if(e instanceof InvalidInputException){\r\n        throw e;\r\n    }\r\n    throw new InvalidInputException(\"Validators failed\");\r\n}\r\n","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="3">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="131" name="Back to Open">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">bd043487-de88-4d19-be05-d40a8c6c131b</arg>
                <arg name="FIELD_INVERT_CONDITION" />
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_USER_IDS">arianna.fabbri</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="181" name="Risks Assessment" view="fieldscreen">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19910</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="conditionList">6</arg>
                <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
                <arg name="comparisonType">1</arg>
                <arg name="class.name">com.googlecode.jsu.workflow.condition.ValueFieldCondition</arg>
                <arg name="ºè">f78b5e13-a779-44f3-bc72-27a44c6ee749</arg>
                <arg name="fieldValue" />
                <arg name="fieldsList">customfield_23929</arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">519e584f-1e24-4d74-bbb9-ec343c3be7f1</arg>
                <arg name="FIELD_NOTES">Enabled only if parent task is "In Progress" or "Finalizing Work"</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"issue.parentObject?.status?.name == \"In Progress\" || issue.parentObject?.status?.name == \"Finalizing Work\"","scriptPath":null,"parameters":{}}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">da95600f-b12d-41a9-ba8a-97f002bd20c1</arg>
              <arg name="FIELD_NOTES">Check PM operations on PM task</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport com.atlassian.jira.issue.IssueManager\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport java.text.SimpleDateFormat;\nimport com.atlassian.jira.issue.index.IssueIndexingService\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-4159\")\n\nlog.debug \"Transazione Complete - Primo validator\"\nlog.debug \"Transazione Complete - Primo validator - Issue: \" + issue\n\ndef errors = false\ndef warnings = false\n\ndef pmOperations =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_PM_OPERATIONS_ODS\")[0]\ndef assignedTo =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_ASSIGNED_TO\")[0]\n\nlog.debug \"issue.getCustomFieldValue(pmOperations): \" + issue.getCustomFieldValue(pmOperations)\nlog.debug \"issue.getCustomFieldValue(assignedTo): \" + issue.getParentObject().getCustomFieldValue(assignedTo)\nif(issue.getCustomFieldValue(pmOperations)==null &amp;&amp; !issue.getParentObject().getCustomFieldValue(assignedTo).toString().equals(\"ASSISTANT\")){\n    errors=true\n}\n\ndef output = new ArrayList()\n\nif (!errors){\n    return true\n}else{\n    def eList = new ArrayList()           \n    def eListSubTaskCompleted = new ArrayList()\n    eListSubTaskCompleted.add(\"E\")\n    eListSubTaskCompleted.add(\"MISSING_PM_OPERATIONS\")\n    eListSubTaskCompleted.add(null)\n    eList.add(eListSubTaskCompleted)\n\n    output.add(eList)\n    log.debug \"throw exception: \" + output.toString()\n    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    //throw new InvalidInputException(\"E\", output.toString())   \n}\n","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">b24b77fd-c8bd-438e-bfca-049838725b25</arg>
              <arg name="FIELD_NOTES">SAP: update SN status</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\n\nrequestMethod = \"POST\";\n\ndef body_req = []\nbody_req = [\n    \"issueKey\": issue.key,\n    \"status\": \"INP\"\n] \n\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\nurl = new URL(baseURL)\nconnection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.outputStream\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\nlog.debug connection.outputStream\nconnection.connect();\n\ndef output = new ArrayList()\ndef eList = new ArrayList()\ndef eListErrors = new ArrayList()\ndef errorMsgs = new ArrayList()\n\nif (!connection.getResponseCode().toString().startsWith(\"20\")){\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n    eListErrors.add(\"E\")\n    eListErrors.add(\"SN_UPDATE\")\n    errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n    eListErrors.add(errorMsgs)\n    eList.add(eListErrors)\n\n    output.add(eList)\n    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n}\n\n","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">0465e2d8-92f8-467a-abce-bd2394e9db31</arg>
              <arg name="FIELD_NOTES">Call FSM backend</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.issue.fields.CustomField\r\nimport com.atlassian.jira.issue.CustomFieldManager\r\nimport com.atlassian.jira.workflow.JiraWorkflow\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenLayoutItem\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenTab\r\nimport com.atlassian.jira.issue.fields.FieldManager\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreen\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenManager\r\nimport com.opensymphony.workflow.loader.ActionDescriptor\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.workflow.WorkflowManager\r\nimport groovy.json.StreamingJsonBuilder;\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner;\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl;\r\n\r\ndef baseURL\r\ndef responseBody\r\n\r\ntry {\r\n    Properties properties = new Properties()\r\n    File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\r\n    propertiesFile.withInputStream {\r\n        properties.load(it)\r\n    }\r\n\r\n    def serverBase = String.format(\"http://%s/op\", properties['api.env'])\r\n    def transactionAction = \"validators\"\r\n\r\n    URL url\r\n    def requestMethod = \"POST\";\r\n\r\n    baseURL = String.format(\"%s/rest/jira/workflows/%s/%s\", serverBase, transientVars.actionId, transactionAction);\r\n\r\n    log.debug(\"Composing baseURL as '${baseURL}'\");\r\n\r\n    WorkflowManager workflowManager = ComponentAccessor.getWorkflowManager();\r\n    JiraWorkflow jiraWorkflow = workflowManager.getWorkflow(transientVars.issue);\r\n\r\n    CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\r\n    \r\n    log.debug( jiraWorkflow.getName())\r\n    \r\n    ActionDescriptor ad = workflowManager.getActionDescriptor(transientVars.issue, transientVars.actionId);\r\n\r\n    log.debug(\"ActionDescriptor Name: ${ad.getName()}\")                     // Genera Rapporto di Intervento FAAC\r\n    log.debug(\"ActionDescriptor MetaAttrs: ${ad.getMetaAttributes()}\")      // {opsbar-sequence=10, jira.description=, jira.fieldscreen.id=19910}\r\n\r\n    def adMeta = ad.getMetaAttributes();\r\n    def fieldScreenId = Long.valueOf(adMeta.get(\"jira.fieldscreen.id\").toString());\r\n    log.debug(\"Field screen id: ${fieldScreenId}\")\r\n\r\n    Map&lt;String, Object&gt; customFieldMap = new HashMap&lt;String,Object&gt;();\r\n\r\n    FieldScreenManager fieldScreenManager = ComponentAccessor.getComponent(FieldScreenManager.class);\r\n    FieldScreen fieldScreen = fieldScreenManager.getFieldScreen(fieldScreenId);\r\n    for(FieldScreenTab fst : fieldScreen.getTabs()){\r\n        List&lt;FieldScreenLayoutItem&gt; qwe = fst.getFieldScreenLayoutItems();\r\n        for (FieldScreenLayoutItem fsli: qwe){\r\n            if (fsli.getFieldId() == null) {\r\n                continue;\r\n            }\r\n            CustomField customField = customFieldManager.getCustomFieldObject(fsli.getFieldId());\r\n            if (customField == null){\r\n                continue;\r\n            }\r\n            def customFieldValue = issue.getCustomFieldValue(customField);\r\n            customFieldMap.put(fsli.getFieldId(), customFieldValue == null ? null : customFieldValue.toString());\r\n        }    \r\n    }\r\n\r\n    log.debug(\"customFieldMap: ${customFieldMap}\")\r\n\r\n    def bodyReq = [ \r\n        \"issueKey\": issue.key,\r\n        \"actionName\": ad.getName(),\r\n        \"jiraWorkflowName\": jiraWorkflow.getName(),\r\n        \"customFieldMap\": customFieldMap,\r\n        \"properties\": properties\r\n    ];\r\n\r\n    log.debug(\"Calling [${requestMethod}] ${baseURL} with body ${bodyReq}\");\r\n\r\n    url = new URL(baseURL)\r\n    HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n    connection.setRequestMethod(requestMethod);\r\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n    connection.setRequestProperty(\"Accept\", \"*/*\");\r\n    connection.setDoOutput(true);\r\n    connection.setDoInput(true);\r\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, bodyReq) }\r\n    \r\n    connection.connect();\r\n    def responseCode = connection.getResponseCode().toString()    \r\n        \r\n    log.debug(\"Response HttpStatusCode: ${responseCode}\")\r\n        \r\n    // If backend replies with 200 then the condition is passed    \r\n    if(\"200\".equals(responseCode)){\r\n        log.debug(\"Validator passed!\");\r\n    } else {\r\n        List&lt;String&gt; outputErrors = new ArrayList&lt;&gt;();\r\n        List&lt;String&gt; outputWarnings = new ArrayList&lt;&gt;();\r\n        \r\n        responseBody = ((HttpURLConnection) connection).errorStream.text;\r\n        log.debug(\"Validator not passed, responseBody: ${responseBody}\");\r\n\r\n        // testing without redeploying each time\r\n        //responseBody = '{\"W\": \"[[[W, CONFIRM_RISK_ANALYSIS, null]]]\"}'\r\n\r\n        throw new InvalidInputException(responseBody);\r\n    }\r\n} catch (Exception e){\r\n    //This is an exception in the script\r\n    log.debug(\"Exception raised calling endpoint ${baseURL}\")\r\n    log.error(e)\r\n    if (e instanceof InvalidInputException){\r\n        throw e;\r\n    }\r\n    throw new InvalidInputException('{\"E\": \"[[[ Validator failed ]]]\" }');\r\n}","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="10">
              <post-functions>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">5227bd43-2025-46c0-9798-81f69a361004</arg>
                  <arg name="FIELD_NOTES">Create obj "Checklist" - NOT for ASSISTANT tickets</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":" import com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.issue.Issue\r\nimport com.atlassian.jira.issue.MutableIssue;\r\nimport com.atlassian.jira.event.type.EventDispatchOption;\r\nimport org.apache.log4j.Level\r\nimport com.atlassian.jira.issue.IssueManager\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File('/var/atlassian/application-data/shared/scripts/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\"); \r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n  \r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\r\n  \r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\"); \r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n  \r\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\"); \r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\r\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \r\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\r\n\r\nIssueManager issueManager = ComponentAccessor.getIssueManager()\r\n//issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-196938\")\r\n\r\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\r\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\r\n\r\ndef asset = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_ASSET\")[0]\r\ndef ticketVisKey = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_VISIBILITY_KEY\")[0]\r\ndef checklistField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_ASSET_CHECKLIST\")[0]\r\ndef assignedTo = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_ASSIGNED_TO\")[0]\r\n\r\n/*27.01.2023 AF - Map issue type to filter available checklists*/\r\ndef issueTypeMap\r\nif(issue.issueType.name == \"Maintenance Ticket\"){\r\n    issueTypeMap = \"REPAIR_TICKET\"\r\n}\r\nif(issue.issueType.name == \"New Installation\"){\r\n    issueTypeMap = \"NEW_INSTALLATION_TICKET\"\r\n}\r\nif(issue.issueType.name == \"Modernization\"){\r\n    issueTypeMap = \"MODERNIZATION\"\r\n}\r\nif(issue.issueType.name == \"Planned Maintenance Task\"){\r\n    issueTypeMap = \"PM_TASK\"\r\n}\r\n    \r\n//30.03.2022 - ora messa condizione fissa in base alla company code, aggiungere flag sull'oggetto Company che la abiliti o meno alla dynamic risk assessment. Solo se la company referenziata nella visibility key \r\n//ha la dynamic risk assessment attiva fare quanto sotto\r\n//27.01.2023 - AF - tolta condizione che lega la generazione della checklist al codice company o alla presenza della dynamic risks assessment - se ci sono elementi Checklist viene creato, viceversa non viene creato nulla\r\n//if(issue.getCustomFieldValue(ticketVisKey)[0].toString().contains(\"1179\") || issue.getCustomFieldValue(ticketVisKey)[0].toString().contains(\"1078\")){\r\n\r\nif(issue.getCustomFieldValue(checklistField) == null &amp;&amp; issue.issueType.name != \"Planned Maintenance Ticket\" &amp;&amp; (issue.getCustomFieldValue(assignedTo) == null || !issue.getCustomFieldValue(assignedTo).toString().equals(\"ASSISTANT\"))){\r\n    log.info issue.getCustomFieldValue(asset)[0].toString()\r\n    def ass=issue.getCustomFieldValue(asset)[0].toString()\r\n    def assKey = ass.substring(ass.lastIndexOf('(')+1,ass.lastIndexOf(')'))\r\n    def assName = ass.substring(0,ass.lastIndexOf('(')-1)\r\n    def assObject = objectFacade.loadObjectBean(assKey)\r\n    log.info \"assKey: \" + assKey\r\n    log.info (\"assName: \" + assName)\r\n    log.info (\"assObject: \" + assObject)\r\n    \r\n    log.info objectFacade.loadObjectAttributeBean(assObject.getId(), \"PUBLIC_PRODUCT_TYPE_REF\").toString()\r\n    obTriage = objectFacade.loadObjectAttributeBean(assObject.getId(), \"PUBLIC_PRODUCT_TYPE_REF\").createMutable()\r\n    prodType = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n    log.info prodType.toString()\r\n\r\n    log.info issue.getCustomFieldValue(ticketVisKey)[0].toString()\r\n    def vis=issue.getCustomFieldValue(ticketVisKey)[0].toString()\r\n    def visKey = vis.substring(vis.lastIndexOf('(')+1,vis.lastIndexOf(')'))\r\n    def objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = Checklists AND ISSUE_TYPE IN (\" + issueTypeMap + \") AND PRODUCT_TYPE_REF.Key = DO-\" + prodType.toString() + \" AND object HAVING outboundReferences(objectType = Company AND object HAVING inboundReferences(objectType = \\\"Visibility Key\\\" AND Key = \" + visKey.toString() + \"))\")\r\n    log.warn \"iql: \" + \"objectType = Checklists AND ISSUE_TYPE IN (\" + issueTypeMap + \") AND PRODUCT_TYPE_REF.Key = DO-\" + prodType.toString() + \" AND object HAVING outboundReferences(objectType = Company AND object HAVING inboundReferences(objectType = \\\"Visibility Key\\\" AND Key = \" + visKey.toString() + \"))\"\r\n\r\n    if(objects.size() == 0){\r\n        objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = Checklists AND ISSUE_TYPE IN (\" + issueTypeMap + \") AND DEFAULT = true AND object HAVING outboundReferences(objectType = Company AND object HAVING inboundReferences(objectType = \\\"Visibility Key\\\" AND Key = \" + visKey.toString() + \"))\")\r\n        log.warn \"iql: \" + \"objectType = Checklists AND ISSUE_TYPE IN (\" + issueTypeMap + \") AND DEFAULT = true AND object HAVING outboundReferences(objectType = Company AND object HAVING inboundReferences(objectType = \\\"Visibility Key\\\" AND Key = \" + visKey.toString() + \"))\"\r\n    }\r\n\r\n    if(objects){\r\n        log.info objects[0].toString()\r\n        \r\n        log.info objectFacade.loadObjectAttributeBean(objects[0].getId(), \"CHECKLIST_NAME\").toString()\r\n        obTriage = objectFacade.loadObjectAttributeBean(objects[0].getId(), \"CHECKLIST_NAME\").createMutable()\r\n        checklist = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n        log.info checklist.toString().replaceAll(' - ','').replaceAll(' ','')\r\n        \r\n        def newObjId = properties['iobj.' + checklist.toString().replaceAll(' - ','').replaceAll(' ','') + '.id'].toInteger()\r\n        log.info \"id: \" + properties['iobj.' + checklist.toString().replaceAll(' - ','').replaceAll(' ','') + '.id'].toString()\r\n        def newObjNameId = properties['iobj.' + checklist.toString().replaceAll(' - ','').replaceAll(' ','') + '.Name.id'].toInteger()\r\n        def newObjCompletedId = properties['iobj.' + checklist.toString().replaceAll(' - ','').replaceAll(' ','') + '.completed.id'].toInteger()\r\n        log.info newObjNameId.toString()\r\n        \r\n        def checklistObjects = new ArrayList();\r\n        def objectAttributeBeans = new ArrayList();\r\n        def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(newObjNameId); \r\n        def completedObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(newObjCompletedId); \r\n        \r\n        def objectTypeChecklist = objectTypeFacade.loadObjectTypeBean(newObjId);\r\n        def newObjectBean = objectTypeChecklist.createMutableObjectBean();\r\n        \r\n        objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, nameObjectTypeAttributeBean, issue.key.toString()));\r\n        objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, completedObjectTypeAttributeBean, \"false\"));\r\n        \r\n        newObjectBean.setObjectAttributeBeans(objectAttributeBeans);\r\n        /* Store the object into Insight. The new ObjectBean will be updated with an unique ID */\r\n        try {\r\n            newObjectBean = objectFacade.storeObjectBean(newObjectBean);\r\n            log.warn(\"newObjectBean: \" + newObjectBean);\r\n        } catch (Exception vie) {\r\n            log.warn(\"Could not create issue due to validation exception:\" + vie.getMessage());\r\n        }\r\n        \r\n        checklistObjects.add(newObjectBean)\r\n        \r\n        log.info (\"checklistObjects: \" + checklistObjects)\r\n        def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\r\n        \r\n        if (!checklistObjects.isEmpty()) {\r\n            MutableIssue mi = (MutableIssue) issue;\r\n            mi.setCustomFieldValue(checklistField, checklistObjects);\r\n            ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n        }\r\n    }\r\n}     ","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="v+nWù">¶»ž</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="ºè">3c8b59b8-8f1c-42c4-80b7-e41c4489cf6a</arg>
                  <arg name="field.name">customfield_22628</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">2af2c064-c890-4054-9752-e564ed179102</arg>
                  <arg name="FIELD_NOTES">Copy TRAVEL time from PM Ticket to PM Task if it is the first started</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport org.apache.log4j.Category\r\nimport groovy.json.JsonBuilder\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\nimport com.atlassian.jira.issue.IssueManager\r\nimport com.atlassian.jira.issue.ModifiedValue\r\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\r\nimport java.text.SimpleDateFormat;\r\nimport com.atlassian.jira.issue.index.IssueIndexingService\r\nimport com.atlassian.jira.jql.parser.JqlQueryParser\r\nimport com.atlassian.jira.bc.issue.search.SearchService\r\nimport com.atlassian.jira.user.util.UserUtil\r\nimport com.atlassian.jira.web.bean.PagerFilter\r\nimport com.atlassian.jira.issue.MutableIssue\r\nimport com.atlassian.jira.event.type.EventDispatchOption\r\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\r\nimport com.atlassian.jira.issue.index.IssueIndexingService\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.issue.Issue\r\nimport com.atlassian.jira.issue.MutableIssue;\r\nimport com.atlassian.jira.event.type.EventDispatchOption;\r\nimport org.apache.log4j.Level\r\nimport java.sql.Timestamp\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File('/var/atlassian/application-data/shared/scripts/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\"); \r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n  \r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\r\n  \r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\"); \r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n  \r\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\"); \r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\r\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \r\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\r\n\r\n\r\nIssueManager issueManager = ComponentAccessor.getIssueManager()\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-41566\")\r\ndef onSiteTechsTravelTraceField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIAN_ACTIVITIES_TRACE\")[0];\r\ndef toBeCopied=true\r\nfor (st in issue.getParentObject().getSubTaskObjects()){\r\n    if (st.getCustomFieldValue(onSiteTechsTravelTraceField) != null){\r\n        log.debug issue.getCustomFieldValue(onSiteTechsTravelTraceField)\r\n        toBeCopied=false\r\n    }\r\n}\r\n\r\nif(toBeCopied){\r\n    def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\r\n    MutableIssue mi = (MutableIssue) issue;\r\n    mi.setCustomFieldValue(onSiteTechsTravelTraceField, issue.getParentObject().getCustomFieldValue(onSiteTechsTravelTraceField));\r\n    ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n}","scriptPath":null}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="v+nWù">¶»ž</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">27be30be-e476-4795-8f2e-5631bae4e69d</arg>
                  <arg name="FIELD_NOTES"> IF OP_SUPPLIER IS EMPTY --&gt; Log Timestamp for Tech activity &amp; Link object to the ticket (OP_TECHNICIANS_ONSITE) </arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"   /* ------------------ ACTION START WORKING ------------------ */\r\n/* ------------------ TRACE_ACTION_STATUS = WORK ------------------ */\r\n/* ------------------ ACTION = JOB_STARTED ------------------ */\r\n\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.issue.Issue\r\nimport com.atlassian.jira.issue.MutableIssue;\r\nimport com.atlassian.jira.event.type.EventDispatchOption;\r\nimport org.apache.log4j.Level\r\nimport java.sql.Timestamp\r\nimport com.atlassian.jira.config.SubTaskManager\r\nimport com.atlassian.jira.issue.IssueManager;\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File('/var/atlassian/application-data/shared/scripts/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\"); \r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n  \r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\r\n  \r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\"); \r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n  \r\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\"); \r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\r\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \r\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\r\n\r\nIssueManager issueManager = ComponentAccessor.getIssueManager()\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-69415\")\r\n\r\ndef currentUser = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENT_USER\")[0]\r\ndef onSiteTechsTraceField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIAN_ACTIVITIES_TRACE_WORK\")[0];\r\ndef onSiteTechsField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIANS_ONSITE\")[0];\r\ndef OnSiteTechObjects = new ArrayList();\r\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\r\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\r\n\r\n/*25.11.22*/\r\ndef localTimeStamp\r\ndef localDate\r\n/*03.10.23*/\r\ndef DATETIME_OFFSET = properties['wf.tr.datetimewithoffset'].toString()\r\nlog.debug \"DATETIME_OFFSET: \" + DATETIME_OFFSET\r\nif (DATETIME_OFFSET != null &amp;&amp; DATETIME_OFFSET != 'null'){\r\n\r\ndef siteCF = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SITE\")[0];\r\ndef site, siteKey, siteObject, visibility, visibilityKey\r\nif (issue.getCustomFieldValue(siteCF) != null) {\r\n    site = issue.getCustomFieldValue(siteCF).toString()\r\n    siteKey = site.substring(site.lastIndexOf('(') + 1, site.lastIndexOf(')'))\r\n    siteObject = objectFacade.loadObjectBean(siteKey)\r\n    visibility = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_VISIBILITY_KEY\")[0]\r\n    visibilityKey = issue.getCustomFieldValue(visibility)[0].toString().substring(issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf('(') + 1, issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf(')'))\r\n} else {\r\n    visibility = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_INDIRECT_JOB_TKT_VISIBILITY\")[0]\r\n    visibilityKey = issue.getCustomFieldValue(visibility)[0].toString().substring(issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf('(') + 1, issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf(')'))\r\n}\r\ndef timeZone\r\ndef companyRef = objectFacade.loadObjectAttributeBean(objectFacade.loadObjectBean(visibilityKey).getId(), properties['iobj.visibilityKey.companyRef'].toString()).getObjectAttributeValueBeans();\r\nlog.info \"companyRef: \" + companyRef\r\ndef companyRefId = companyRef[0].getReferencedObjectBeanId()\r\nlog.debug \"companyRefId:\" + companyRefId\r\nif (issue.getCustomFieldValue(siteCF) != null &amp;&amp; objectFacade.loadObjectAttributeBean(siteObject.getId(), \"SITE_REF\")) {\r\n    obTriage = objectFacade.loadObjectAttributeBean(siteObject.getId(), \"SITE_REF\").createMutable()\r\n    s = obTriage.getObjectAttributeValueBeans()\r\n    s = s.toString()\r\n    sKey = s.substring(s.lastIndexOf('(') + 1, s.lastIndexOf(')'))\r\n    if (objectFacade.loadObjectAttributeBean(sKey.toInteger(), \"TIME_ZONE\")) {\r\n        obTriage = objectFacade.loadObjectAttributeBean(sKey.toInteger(), \"TIME_ZONE\").createMutable()\r\n        timeZone = obTriage.getObjectAttributeValueBeans()\r\n        timeZone = timeZone[0].getValue()\r\n        log.debug \"TimeZone da Site: \" + timeZone\r\n    } else {\r\n        if (objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\")) {\r\n            obTriage = objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\").createMutable()\r\n            timeZone = obTriage.getObjectAttributeValueBeans()\r\n            timeZone = timeZone[0].getValue()\r\n            log.debug \"TimeZone da Company: \" + timeZone\r\n        }\r\n    }\r\n} else {\r\n    if (objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\")) {\r\n        obTriage = objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\").createMutable()\r\n        timeZone = obTriage.getObjectAttributeValueBeans()\r\n        timeZone = timeZone[0].getValue()\r\n        log.debug \"TimeZone da Company: \" + timeZone\r\n    }\r\n}\r\nif (!timeZone) {\r\n    timeZone = \"Europe/Rome\"\r\n}\r\nlog.debug \"timeZone: \" + timeZone\r\nlocalTimeStamp = (new Timestamp((new Date(new Date().getTime() - TimeZone.getDefault().getRawOffset() + TimeZone.getTimeZone(timeZone.toString()).getRawOffset())).time)).toString()\r\nlocalDate = new Date(new Date().getTime() - TimeZone.getDefault().getRawOffset() + TimeZone.getTimeZone(timeZone.toString()).getRawOffset())\r\n\r\n}else{\r\n\r\n    localTimeStamp =  (new Timestamp((new Date()).time)).toString()\r\n    localDate =  new Date()\r\n\r\n}\r\n\r\nlog.debug \"localTimeStamp: \" + localTimeStamp\r\nlog.debug \"localDate: \" + localDate\r\n/*25.11.22*/\r\n/*Solo se ticket eseguito da tecnici interni eseguo track automatico dei tempi*/\r\ndef trovato=false, reopened=false\r\nfor (s in ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplier'].toString())){\r\n    if (issue.getCustomFieldValue(s) != null){\r\n        trovato=true\r\n    }\r\n}\r\n\r\nif(!trovato){\r\n    \r\n    /* ------------ DEFINE ACTION TO BE TRACED AND SET TO BE DONE ------------- */\r\n    def ACTION = properties['wf.tr.startWorking.action'].toString()\r\n    def SET = properties['wf.tr.startWorking.set'].toString()\r\n    \r\n    def ONSITE_TECH_REPORT_OBJ_TYPE=properties['iobj.onSiteTechReport'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_NAME=properties['iobj.onSiteTechReport.name.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF=properties['iobj.onSiteTechReport.technicianRef.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED=properties['iobj.onSiteTechReport.jobCompleted.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_JOB_STARTED=properties['iobj.onSiteTechReport.jobStarted.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_TRACE_ACTION=properties['iobj.onSiteTechReport.traceAction.id'].toString().toInteger()\r\n    \r\n    log.warn \"********************** CONFIRM ASSET **********************\"\r\n    def objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = Technician AND TECHNICIAN_REF.TECH_ACCOUNT =\\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\"\")\r\n    log.warn \"iql: \" + \"objectType = Technician AND TECHNICIAN_REF.TECH_ACCOUNT =\\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\"\"\r\n\r\n    for(technician in objects){\r\n        //extract insight key ang get object\r\n        def tech=technician.toString()\r\n        def techKey = tech.substring(tech.lastIndexOf('(')+1,tech.lastIndexOf(')'))\r\n        def techName = tech.substring(0,tech.lastIndexOf('(')-1)\r\n        def techObject = objectFacade.loadObjectBean(techKey)\r\n        log.info \"techKey: \" + techKey\r\n        log.info (\"techName: \" + techName)\r\n        log.info (\"techObject: \" + techObject)\r\n        \r\n        if (SET == \"JOB_COMPLETED\"){\r\n            /*SEARCH OBJECT TO BE UPDATED*/\r\n            objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key=\\\"\" + issue.key + \"\\\")\")\r\n            log.warn \"iql: \" + \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key=\\\"\" + issue.key + \"\\\")\"\r\n            \r\n            if(objects.size() &gt; 0){\r\n                /*UPDATE JOB_COMPLETED ON SELECTED OBJECT*/          \r\n                def obj = objectFacade.loadObjectBean(objects[0].getId());\r\n                attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED); \r\n                log.info \"attribType: \" + attribType.toString()\r\n                newAttrib = obj.createObjectAttributeBean(attribType);\r\n                def newAttribValue = newAttrib.createObjectAttributeValueBean();\r\n                \r\n                try {\r\n                    newAttribValue.setDateValue(localDate);\r\n                } catch (Exception vie) {\r\n                    log.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType.toString() + \" to \" + localTimeStamp + \". Exiting.\");\r\n                    log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                    return false;\r\n                }\r\n                \r\n                def attribValues = newAttrib.getObjectAttributeValueBeans();\r\n                attribValues.add(newAttribValue);\r\n                newAttrib.setObjectAttributeValueBeans(attribValues);\r\n                \r\n                try {\r\n                    newAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\r\n                } catch (Exception vie) {\r\n                    log.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\r\n                    log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                    return false;\r\n                }\r\n                \r\n            }else{\r\n                /*ERROR!!*/\r\n            }\r\n            \r\n        }else{\r\n            /*CREATE NEW OBJECT: ONSITE_TECH_REPORT_OBJ_TYPE*/\r\n            def existingObjects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key=\\\"\" + issue.key + \"\\\")\")\r\n            log.warn \"iql: \" + \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key=\\\"\" + issue.key + \"\\\")\"\r\n            \r\n            if(existingObjects.size()==0){\r\n                def objectTypeOnSiteTechReport = objectTypeFacade.loadObjectTypeBean(ONSITE_TECH_REPORT_OBJ_TYPE);\r\n                def newObjectBean = objectTypeOnSiteTechReport.createMutableObjectBean();\r\n                \r\n                def objectAttributeBeans = new ArrayList();\r\n                def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_NAME); \r\n                def startedObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_JOB_STARTED); \r\n                def actionObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TRACE_ACTION); \r\n                \r\n                objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, nameObjectTypeAttributeBean, techName));\r\n                def parentStarted\r\n\r\n                //Se \u00e8 il primo sub-task ad essere avviato eredito lo stesso timestamp di start working definito sul ticket padre come inizio lavoro del tecnico\r\n                //Recupero l'oggetto OnSite_Tech_Report del PM Ticket e ricavo il campo JOB_STARTED\r\n                SubTaskManager subTaskManager = ComponentAccessor.getSubTaskManager();\r\n                Collection subTasks = issue.getParentObject().getSubTaskObjects()\r\n                def first = true\r\n                if (!subTasks.empty) {\r\n                    subTasks.each {\r\n                        if(!it.getStatus().name.toString().equals(\"Confirmed and Planned\") &amp;&amp; it.key != issue.key){\r\n                            first=false\r\n                        }\r\n                    }\r\n                    if(first){\r\n                        log.debug \"primo sub-task\"\r\n                        //Estrarre JOB_STARTED sull'oggetto OnSite_Tech_Report referenziato nel PM ticket padre\r\n                        def parentTask = issue.getParentObject()\r\n                        def parentObjects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND TRACE_ACTION_STATUS=WORK AND object HAVING connectedTickets(key=\\\"\" + parentTask.key + \"\\\")\")\r\n                        log.warn \"iql: \" + \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND TRACE_ACTION_STATUS='WORK' AND object HAVING connectedTickets(key=\\\"\" + parentTask.key + \"\\\")\"\r\n                        \r\n                        if(parentObjects.size() &gt; 0){\r\n                            /*GET JOB_STARTED FROM SELECTED OBJECT*/          \r\n                            def obTriage = objectFacade.loadObjectAttributeBean(parentObjects[0].getId(), \"JOB_STARTED\").createMutable()\r\n                            parentStarted = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n                            log.debug \"parentStarted: \" + parentStarted\r\n                            objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, startedObjectTypeAttributeBean, localTimeStamp));\r\n                        }\r\n                    }else{\r\n                        objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, startedObjectTypeAttributeBean, localTimeStamp));\r\n                    }\r\n                }\r\n\r\n                objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, actionObjectTypeAttributeBean, ACTION));\r\n                \r\n                newObjectBean.setObjectAttributeBeans(objectAttributeBeans);\r\n                /* Store the object into Insight. The new ObjectBean will be updated with an unique ID */\r\n                try {\r\n                    newObjectBean = objectFacade.storeObjectBean(newObjectBean);\r\n                    log.warn(\"newObjectBean: \" + newObjectBean);\r\n                } catch (Exception vie) {\r\n                    log.warn(\"Could not create issue due to validation exception:\" + vie.getMessage());\r\n                }\r\n                \r\n                /* Update TECHNICIAN_REF on the newObject */\t\t        \r\n                def objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF).createMutable() //The id of the attribute\r\n                \r\n                /* Create the new attribute bean based on the value */\r\n                def newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, techKey);\r\n                /* Load the attribute bean */\r\n                def objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), techKey);\r\n                if (objectAttributeBean != null) {\r\n                    /* If attribute exist reuse the old id for the new attribute */\r\n                    newObjectAttributeBean.setId(objectAttributeBean.getId());\r\n                }\r\n                /* Store the object attribute into Insight. */\r\n                try {\r\n                    objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);\r\n                } catch (Exception vie) {\r\n                    log.warn(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\r\n                }  \r\n                \r\n                OnSiteTechObjects.add(newObjectBean)\r\n                \r\n                log.info (\"OnSiteTechObjects: \" + OnSiteTechObjects)\r\n                def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\r\n                \r\n                if (!OnSiteTechObjects.isEmpty()) {\r\n                    MutableIssue mi = (MutableIssue) issue;\r\n                    mi.setCustomFieldValue(onSiteTechsTraceField, OnSiteTechObjects);\r\n                    ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n                    \r\n                    mi.setCustomFieldValue(onSiteTechsField, OnSiteTechObjects);\r\n                    ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n                }\r\n\r\n\r\n            }\r\n\r\n        }\r\n    }   \r\n} ","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="v+nWù">¶»ž</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">c854eb78-c909-433f-8314-5f20619f0feb</arg>
                  <arg name="FIELD_NOTES"> IF OP_SUPPLIER IS NOT EMPTY --&gt; Create OnSite_Tech_Report objects to be associated to the issue's customfield OP_TECHNICIANS_ONSITE </arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":" import com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.issue.Issue\r\nimport com.atlassian.jira.issue.MutableIssue;\r\nimport com.atlassian.jira.event.type.EventDispatchOption;\r\nimport org.apache.log4j.Level\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File('/var/atlassian/application-data/shared/scripts/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\"); \r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n  \r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\r\n  \r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\"); \r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n  \r\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\"); \r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\r\n\r\nIssue issue = issue\r\n\r\ndef plannedTechsField = issue.getCustomFieldValue(ComponentAccessor.getCustomFieldManager().getCustomFieldObjectByName(properties['cf.technicians'].toString()))\r\ndef onSiteTechsField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.techniciansOnsite'].toString())[0];\r\ndef OnSiteTechObjects = new ArrayList();\r\n\r\ndef automaticallyClosedField = issue.getCustomFieldValue(ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString()))\r\n\r\ndef ONSITE_TECH_REPORT_OBJ_TYPE=properties['iobj.onSiteTechReport'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_NAME=properties['iobj.onSiteTechReport.name.id'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF=properties['iobj.onSiteTechReport.technicianRef.id'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_SUPPLIER_REF=properties['iobj.onSiteTechReport.supplierRef.id'] ? properties['iobj.onSiteTechReport.supplierRef.id'].toString().toInteger() : 3073\r\n\r\n/*Solo se ticket eseguito da tecnici interni eseguo track automatico dei tempi*/\r\ndef trovato=false, reopened=false\r\nfor (s in ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplier'].toString())){\r\n    if (issue.getCustomFieldValue(s) != null){\r\n        trovato=true\r\n    }\r\n}\r\n\r\nif(trovato){\r\nif(automaticallyClosedField==null || automaticallyClosedField.toString().equals(\"No\")){\r\n    if(plannedTechsField){\r\n        \r\n        for(technician in plannedTechsField){\r\n            \r\n            //extract insight key ang get object\r\n            def tech=technician.toString()\r\n            def techKey = tech.substring(tech.indexOf('(')+1,tech.indexOf(')'))\r\n            def techName = tech.substring(0,tech.indexOf('(')-1)\r\n            def techObject = objectFacade.loadObjectBean(techKey)\r\n            log.info \"techKey: \" + techKey\r\n            log.info (\"techName: \" + techName)\r\n            log.info (\"techObject: \" + techObject)\r\n            \r\n            def objectTypeOnSiteTechReport = objectTypeFacade.loadObjectTypeBean(ONSITE_TECH_REPORT_OBJ_TYPE);\r\n            def newObjectBean = objectTypeOnSiteTechReport.createMutableObjectBean();\r\n            \r\n            def objectAttributeBeans = new ArrayList();\r\n            def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_NAME); \r\n            \r\n            objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, nameObjectTypeAttributeBean, techName));\r\n                    \r\n            newObjectBean.setObjectAttributeBeans(objectAttributeBeans);\r\n            /* Store the object into Insight. The new ObjectBean will be updated with an unique ID */\r\n            try {\r\n                newObjectBean = objectFacade.storeObjectBean(newObjectBean);\r\n                log.warn(\"newObjectBean: \" + newObjectBean);\r\n            } catch (Exception vie) {\r\n                log.warn(\"Could not create issue due to validation exception:\" + vie.getMessage());\r\n            }\r\n    \r\n            /* Update TECHNICIAN_REF on the newObject */\t\t        \r\n            def objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF).createMutable() //The id of the attribute\r\n\r\n            /* Create the new attribute bean based on the value */\r\n            def newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, techKey);\r\n            /* Load the attribute bean */\r\n            def objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), techKey);\r\n            if (objectAttributeBean != null) {\r\n               /* If attribute exist reuse the old id for the new attribute */\r\n               newObjectAttributeBean.setId(objectAttributeBean.getId());\r\n            }\r\n            /* Store the object attribute into Insight. */\r\n            try {\r\n                objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);\r\n            } catch (Exception vie) {\r\n                log.warn(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\r\n            }  \r\n            \r\n            /* Update SUPPLIER_REF on the newObject */\t\r\n            /* Get SUPPLIER_REF from Tech */\r\n            def obTriage = objectFacade.loadObjectAttributeBean(techObject.getId(), (properties['iobj.techOnsite.supplierRef'] ? properties['iobj.techOnsite.supplierRef'].toString() : \"SUPPLIER_REF\")).createMutable()\r\n            def suppRef = obTriage.getObjectAttributeValueBeans().toString()\r\n            def supp = suppRef.toString()\r\n            log.info \"supp: \" + supp\r\n            suppRefId = supp.substring(supp.indexOf('(')+1,supp.indexOf(')'))\r\n            log.info \"suppRefId: \" + suppRefId\r\n            suppRefKey = properties['ischema.aa'].toString() + \"-\" + suppRefId\r\n            log.info \"suppRefKey: \" + suppRefKey\r\n            suppRefObj = objectFacade.loadObjectBean(properties['ischema.aa'].toString() + \"-\" + suppRefId)\r\n\t\t\tlog.info \"suppRefObj: \" + suppRefObj\r\n            \r\n            def suppObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_SUPPLIER_REF).createMutable() //The id of the attribute\r\n            \r\n            /* Create the new attribute bean based on the value */\r\n            newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, suppObjectTypeAttributeBean, suppRefKey);\r\n            /* Load the attribute bean */\r\n            objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), suppRefKey);\r\n            if (objectAttributeBean != null) {\r\n               /* If attribute exist reuse the old id for the new attribute */\r\n               newObjectAttributeBean.setId(objectAttributeBean.getId());\r\n            }\r\n            /* Store the object attribute into Insight. */\r\n            try {\r\n                objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);\r\n            } catch (Exception vie) {\r\n                log.warn(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\r\n            }  \r\n            \r\n            OnSiteTechObjects.add(newObjectBean)\r\n         }\r\n    }\r\n    log.info (\"OnSiteTechObjects: \" + OnSiteTechObjects)\r\n    def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\r\n    \r\n    if (!OnSiteTechObjects.isEmpty()) {\r\n        MutableIssue mi = (MutableIssue) issue;\r\n        mi.setCustomFieldValue(onSiteTechsField, OnSiteTechObjects);\r\n        ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n    }   \r\n}   \r\n    } ","scriptPath":null}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="v+nWù">¶»ž</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">709d8322-0eb1-47b9-883e-35bcb6014ae0</arg>
                  <arg name="FIELD_NOTES">Log Timestamp for Tech activity &amp; Link object to the ticket (OP_TECHNICIANS_ONSITE)</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"/* ------------------ ACTION START WORKING ------------------ */\r\n/* ------------------ TRACE_ACTION_STATUS = WORK ------------------ */\r\n/* ------------------ ACTION = JOB_STARTED ------------------ */\r\n\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.issue.Issue\r\nimport com.atlassian.jira.issue.MutableIssue;\r\nimport com.atlassian.jira.event.type.EventDispatchOption;\r\nimport org.apache.log4j.Level\r\nimport java.sql.Timestamp\r\nimport com.atlassian.jira.config.SubTaskManager\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File('/var/atlassian/application-data/shared/scripts/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\"); \r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n  \r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\r\n  \r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\"); \r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n  \r\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\"); \r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\r\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \r\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\r\n\r\ndef trovato=false, reopened=false\r\nfor (s in ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplier'].toString())){\r\n    if (issue.getCustomFieldValue(s) != null){\r\n        trovato=true\r\n    }\r\n}\r\n\r\n//Se il ticket \u00e8 eseguito da tecnici interni eseguo il trace automatico dei tempi\r\nif(!trovato){\r\n    Issue issue = issue\r\n    \r\n    def currentUser = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENT_USER\")[0]\r\n    def onSiteTechsTraceField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIAN_ACTIVITIES_TRACE_WORK\")[0];\r\n    def onSiteTechsField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIANS_ONSITE\")[0];\r\n    def OnSiteTechObjects = new ArrayList();\r\n    int OPAA = properties['ischema.aa.id'].toString().toInteger()\r\n    int DBO = properties['ischema.dbo.id'].toString().toInteger()\r\n    \r\n    /* ------------ DEFINE ACTION TO BE TRACED AND SET TO BE DONE ------------- */\r\n    def ACTION = properties['wf.tr.startWorking.action'].toString()\r\n    def SET = properties['wf.tr.startWorking.set'].toString()\r\n    \r\n    def ONSITE_TECH_REPORT_OBJ_TYPE=properties['iobj.onSiteTechReport'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_NAME=properties['iobj.onSiteTechReport.name.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF=properties['iobj.onSiteTechReport.technicianRef.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED=properties['iobj.onSiteTechReport.jobCompleted.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_JOB_STARTED=properties['iobj.onSiteTechReport.jobStarted.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_TRACE_ACTION=properties['iobj.onSiteTechReport.traceAction.id'].toString().toInteger()\r\n    \r\n    log.warn \"********************** CONFIRM ASSET **********************\"\r\n    def objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = Technician AND TECHNICIAN_REF.TECH_ACCOUNT =\\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\"\")\r\n    log.warn \"iql: \" + \"objectType = Technician AND TECHNICIAN_REF.TECH_ACCOUNT =\\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\"\"\r\n    \r\n    for(technician in objects){\r\n        //extract insight key ang get object\r\n        def tech=technician.toString()\r\n        def techKey = tech.substring(tech.indexOf('(')+1,tech.indexOf(')'))\r\n        def techName = tech.substring(0,tech.indexOf('(')-1)\r\n        def techObject = objectFacade.loadObjectBean(techKey)\r\n        log.info \"techKey: \" + techKey\r\n        log.info (\"techName: \" + techName)\r\n        log.info (\"techObject: \" + techObject)\r\n        \r\n        if (SET == \"JOB_COMPLETED\"){\r\n            /*SEARCH OBJECT TO BE UPDATED*/\r\n            objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key=\\\"\" + issue.key + \"\\\")\")\r\n            log.warn \"iql: \" + \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key=\\\"\" + issue.key + \"\\\")\"\r\n            \r\n            if(objects.size() &gt; 0){\r\n                /*UPDATE JOB_COMPLETED ON SELECTED OBJECT*/          \r\n                def obj = objectFacade.loadObjectBean(objects[0].getId());\r\n                attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED); \r\n                log.info \"attribType: \" + attribType.toString()\r\n                newAttrib = obj.createObjectAttributeBean(attribType);\r\n                def newAttribValue = newAttrib.createObjectAttributeValueBean();\r\n    \r\n                try {\r\n                    newAttribValue.setDateValue(new Date());\r\n                } catch (Exception vie) {\r\n                    log.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType.toString() + \" to \" + (new Timestamp((new Date()).time)).toString() + \". Exiting.\");\r\n                    log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                    return false;\r\n                }\r\n                \r\n                def attribValues = newAttrib.getObjectAttributeValueBeans();\r\n                attribValues.add(newAttribValue);\r\n                newAttrib.setObjectAttributeValueBeans(attribValues);\r\n                \r\n                try {\r\n                    newAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\r\n                } catch (Exception vie) {\r\n                    log.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\r\n                    log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                    return false;\r\n                }\r\n                \r\n            }else{\r\n                /*ERROR!!*/\r\n            }\r\n            \r\n        }else{\r\n            /*CREATE NEW OBJECT: ONSITE_TECH_REPORT_OBJ_TYPE*/\r\n            def objectTypeOnSiteTechReport = objectTypeFacade.loadObjectTypeBean(ONSITE_TECH_REPORT_OBJ_TYPE);\r\n            def newObjectBean = objectTypeOnSiteTechReport.createMutableObjectBean();\r\n            \r\n            def objectAttributeBeans = new ArrayList();\r\n            def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_NAME); \r\n            def startedObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_JOB_STARTED); \r\n            def actionObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TRACE_ACTION); \r\n            \r\n            objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, nameObjectTypeAttributeBean, techName));\r\n            objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, startedObjectTypeAttributeBean, (new Timestamp((new Date()).time)).toString()));\r\n            objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, actionObjectTypeAttributeBean, ACTION));\r\n            \r\n            newObjectBean.setObjectAttributeBeans(objectAttributeBeans);\r\n            /* Store the object into Insight. The new ObjectBean will be updated with an unique ID */\r\n            try {\r\n                newObjectBean = objectFacade.storeObjectBean(newObjectBean);\r\n                log.warn(\"newObjectBean: \" + newObjectBean);\r\n            } catch (Exception vie) {\r\n                log.warn(\"Could not create issue due to validation exception:\" + vie.getMessage());\r\n            }\r\n            \r\n            /* Update TECHNICIAN_REF on the newObject */\t\t        \r\n            def objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF).createMutable() //The id of the attribute\r\n            \r\n            /* Create the new attribute bean based on the value */\r\n            def newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, techKey);\r\n            /* Load the attribute bean */\r\n            def objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), techKey);\r\n            if (objectAttributeBean != null) {\r\n                /* If attribute exist reuse the old id for the new attribute */\r\n                newObjectAttributeBean.setId(objectAttributeBean.getId());\r\n            }\r\n            /* Store the object attribute into Insight. */\r\n            try {\r\n                objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);\r\n            } catch (Exception vie) {\r\n                log.warn(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\r\n            }  \r\n            \r\n            OnSiteTechObjects.add(newObjectBean)\r\n         \r\n            log.info (\"OnSiteTechObjects: \" + OnSiteTechObjects)\r\n            def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\r\n            \r\n            if (!OnSiteTechObjects.isEmpty()) {\r\n                MutableIssue mi = (MutableIssue) issue;\r\n                mi.setCustomFieldValue(onSiteTechsTraceField, OnSiteTechObjects);\r\n                ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n                \r\n                mi.setCustomFieldValue(onSiteTechsField, OnSiteTechObjects);\r\n                ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n            }\r\n            \r\n            //Se \u00e8 il primo sub-task ad essere avviato lo stesso timestamp lo salvo anche sul ticket padre come inizio lavoro del tecnico\r\n            //Recupero l'oggetto OnSite_Tech_Report del PM Ticket e compilo il campo JOB_STARTED\r\n            SubTaskManager subTaskManager = ComponentAccessor.getSubTaskManager();\r\n            Collection subTasks = issue.getParentObject().getSubTaskObjects()\r\n            def first = true\r\n            if (!subTasks.empty) {\r\n                subTasks.each {\r\n                    if(!it.getStatus().name.toString().equals(\"Confirmed and Planned\") &amp;&amp; it.key != issue.key){\r\n                        first=false\r\n                    }\r\n                }\r\n                if(first){\r\n                    //Aggiornare JOB_STARTED sull'oggetto OnSite_Tech_Report referenziato nel PM ticket padre\r\n                    def parentTask = issue.getParentObject()\r\n                    objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND object HAVING connectedTickets(key=\\\"\" + parentTask.key + \"\\\")\")\r\n                    log.warn \"iql: \" + \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND object HAVING connectedTickets(key=\\\"\" + parentTask.key + \"\\\")\"\r\n                    \r\n                    if(objects.size() &gt; 0){\r\n                        /*UPDATE JOB_STARTED ON SELECTED OBJECT*/          \r\n                        def obj = objectFacade.loadObjectBean(objects[0].getId());\r\n                        attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_JOB_STARTED); \r\n                        log.info \"attribType: \" + attribType.toString()\r\n                        newAttrib = obj.createObjectAttributeBean(attribType);\r\n                        def newAttribValue = newAttrib.createObjectAttributeValueBean();\r\n                        \r\n                        try {\r\n                            newAttribValue.setDateValue(new Date());\r\n                        } catch (Exception vie) {\r\n                            log.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType.toString() + \" to \" + (new Timestamp((new Date()).time)).toString() + \". Exiting.\");\r\n                            log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                            return false;\r\n                        }\r\n                        \r\n                        def attribValues = newAttrib.getObjectAttributeValueBeans();\r\n                        attribValues.add(newAttribValue);\r\n                        newAttrib.setObjectAttributeValueBeans(attribValues);\r\n                        \r\n                        try {\r\n                            newAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\r\n                        } catch (Exception vie) {\r\n                            log.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\r\n                            log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }   \r\n}  ","scriptPath":null}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="v+nWù">¶»ž</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="221" name="Clear OP_SUPPLIER">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">92c7bf91-5f62-49c4-bba0-b13767297b6d</arg>
                <arg name="FIELD_INVERT_CONDITION" />
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_USER_IDS">arianna.fabbri</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="3">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="ºè">bc2c77b9-422d-4c36-9198-94c3d5bcc1cb</arg>
                  <arg name="field">customfield_23235</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="field2">customfield_22813</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="281" name="Set Security">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">1b7d5faf-f701-433b-bfff-28879be13db0</arg>
                <arg name="FIELD_INVERT_CONDITION" />
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_USER_IDS">arianna.fabbri|||JIRAUSER58800</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="3">
              <post-functions>
                <function type="class">
                  <arg name="FIELD_SECURITY_LEVEL_ID">11600</arg>
                  <arg name="FIELD_FUNCTION_ID">006f388b-2114-4b75-aba7-ff0b7afc0cb2</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
                  <arg name="FIELD_CONDITION" />
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="4" name="In Progress">
      <meta name="jira.status.id">3</meta>
      <actions>
        <action id="51" name="Maintenance Completed" view="fieldscreen">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20204</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">4c38acf4-2d87-4197-a86b-51b844dcbe39</arg>
              <arg name="FIELD_NOTES">Check RISK_DESCRIPTION if RISK FOUND = true</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper\nimport com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport com.atlassian.jira.issue.IssueManager\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport java.text.SimpleDateFormat;\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport java.util.Map;\n\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n    properties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\n\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-4159\")\n\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");\n\n\ndef errors = false\ndef warnings = false\ndef riskFound = false\ndef errorMandatoryFields = false\ndef reqAndModerror = false;\n\n\ndef requestMethod = \"GET\"\ndef baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/AA/ticket/\"+ issue +\"/getRiskFoundWithDescription\"\n\n\nlog.debug baseURL\nURL url = new URL(baseURL)\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.connect();\n\n\ndef output = new ArrayList()\ndef eList = new ArrayList()\ndef eListErrors = new ArrayList()\ndef errorMsgs = new ArrayList()\nlog.debug \"url: \" + url\n\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n    log.debug \"ErrorStream: \" + connection.getErrorStream().toString()\n    log.debug \"getHeaderFields(): \" + connection.getHeaderFields()\n    def outputMsg = ((HttpURLConnection)connection).errorStream.text\n    log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n\n    def jsonSlurper = new JsonSlurper()\n    def json_object = jsonSlurper.parseText(outputMsg)\n    assert json_object instanceof Map  \n    log.debug \"message: \" +  json_object.message\n\n\n    eListErrors.add(\"E\")\n    eListErrors.add(\"MANDATORY_RISK_DETAILS\")\n    errorMsgs.add(connection.getResponseCode() + \" \" + json_object.message)\n    eListErrors.add(errorMsgs)\n    eList.add(eListErrors)\n\n\n    output.add(eList)\n    throw new InvalidInputException(\"E\", output.toString())\n}\n\n\ndef jsonSlurper = new JsonSlurper()\ndef json_object_resp = jsonSlurper.parse(connection.getInputStream())\n\n\nriskFound = ((Map&lt;String,String&gt;)json_object_resp).get(\"RISKFOUND\");\n\n\n\nif(riskFound == \"true\"){\n    errors = true\n    errorMandatoryFields = true\n}\n\n// NON \u00e8 possibile compilare sia modernization che req materials\ndef allDeleted=true;\ndef allDeletedMod=true;\ndef reqMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.requiredMaterials'].toString())[0];\ndef modMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_MODERNIZATION_MATERIALS\")[0];\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\nif(issue.getCustomFieldValue(reqMaterials)!=null &amp;&amp; issue.getCustomFieldValue(modMaterials)!=null){\n//28.02.2023 - Errore se ci sono sia req che mod materials non deleted\n    for(req in issue.getCustomFieldValue(reqMaterials)){\n    /*check DELETED - IF AT LEAST 1 OBJ WITH DELETED=false --&gt; ERROR*/\n        if(objectFacade.loadObjectAttributeBean(req.getId(), \"DELETED\")){\n            if(objectFacade.loadObjectAttributeBean(req.getId(), \"DELETED\").getObjectAttributeValueBeans()[0].value!=true){ \n                allDeleted=false;\n                break;\n            }\n        }\n        else{ \n            allDeleted=false;\n            break;\n        }\n    }\n\n    for(mod in issue.getCustomFieldValue(modMaterials)){\n    /*check DELETED - IF AT LEAST 1 OBJ WITH DELETED=false --&gt; ERROR*/\n        if(objectFacade.loadObjectAttributeBean(mod.getId(), \"DELETED\")){\n            if(objectFacade.loadObjectAttributeBean(mod.getId(), \"DELETED\").getObjectAttributeValueBeans()[0].value!=true){ \n                allDeletedMod=false;\n                break;\n            }\n        }else{ \n            allDeletedMod=false; \n            break \n        }\n    }\n}\n\nif(!allDeleted &amp;&amp; !allDeletedMod){ \n    errors = true; \n    reqAndModerror = true; \n}\n\nif (!errors){\n    return true\n}else{\n    if(errors){\n        if(errorMandatoryFields){\n            def eListMandatory = new ArrayList()\n            eListMandatory.add(\"E\")\n            eListMandatory.add(\"MANDATORY_RISK_DETAILS\")\n            eListMandatory.add(null)\n            eList.add(eListMandatory)\n        }\n\n        if(reqAndModerror){ \n            def eListErrorReqAndModerror = new ArrayList();\n            eListErrorReqAndModerror.add(\"E\");\n            eListErrorReqAndModerror.add(\"SELECT_REQUIRED_OR_MODERNIZATION_PARTS\");\n            eListErrorReqAndModerror.add(null);\n            eList.add(eListErrorReqAndModerror);\n        }\n        output.add(eList)\n        log.debug \"throw exception: \" + output.toString()\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">3cfcef78-5d10-4849-85dd-55c3e0e0b17a</arg>
              <arg name="FIELD_NOTES">Log Timestamp for Tech activity &amp; Update Job Completed - Do not update Job Completed for the LAST PM Task executed</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":" /* ------------------ ACTION END WORKING ------------------ */\r\n/* ------------------ TRACE_ACTION_STATUS = WORK ------------------ */\r\n/* ------------------ ACTION = JOB_COMPLETED ------------------ */\r\n\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.issue.Issue\r\nimport com.atlassian.jira.issue.MutableIssue;\r\nimport com.atlassian.jira.event.type.EventDispatchOption;\r\nimport org.apache.log4j.Level\r\nimport java.sql.Timestamp\r\nimport com.atlassian.jira.config.SubTaskManager\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport groovy.json.JsonSlurper;\r\nimport groovy.json.StreamingJsonBuilder;\r\nimport com.atlassian.jira.issue.IssueManager;\r\nimport com.atlassian.jira.jql.parser.JqlQueryParser\r\nimport com.atlassian.jira.web.bean.PagerFilter\r\nimport com.atlassian.jira.issue.search.SearchProvider\r\nimport static java.net.HttpURLConnection.HTTP_OK\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File('/var/atlassian/application-data/shared/scripts/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\n\r\n\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\"); \r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n  \r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\r\n  \r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\"); \r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n  \r\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\"); \r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\r\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \r\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\r\ndef jqlQueryParser = ComponentAccessor.getComponent(JqlQueryParser)\r\n\r\nIssueManager issueManager = ComponentAccessor.getIssueManager()\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-196069\")\r\n\r\ndef searchService = ComponentAccessor.getComponent(SearchProvider)\r\ndef jsonSlurper = new JsonSlurper()\r\n/*25.11.22*/\r\ndef localTimeStamp\r\ndef localDate\r\n/*03.10.23*/\r\ndef DATETIME_OFFSET = properties['wf.tr.datetimewithoffset'].toString()\r\nlog.debug \"DATETIME_OFFSET: \" + DATETIME_OFFSET\r\nif (DATETIME_OFFSET != null &amp;&amp; DATETIME_OFFSET != 'null'){\r\n\r\ndef siteCF = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SITE\")[0];\r\ndef site, siteKey, siteObject, visibility, visibilityKey\r\nif (issue.getCustomFieldValue(siteCF) != null) {\r\n    site = issue.getCustomFieldValue(siteCF).toString()\r\n    siteKey = site.substring(site.lastIndexOf('(') + 1, site.lastIndexOf(')'))\r\n    siteObject = objectFacade.loadObjectBean(siteKey)\r\n    visibility = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_VISIBILITY_KEY\")[0]\r\n    visibilityKey = issue.getCustomFieldValue(visibility)[0].toString().substring(issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf('(') + 1, issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf(')'))\r\n} else {\r\n    visibility = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_INDIRECT_JOB_TKT_VISIBILITY\")[0]\r\n    visibilityKey = issue.getCustomFieldValue(visibility)[0].toString().substring(issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf('(') + 1, issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf(')'))\r\n}\r\ndef timeZone\r\ndef companyRef = objectFacade.loadObjectAttributeBean(objectFacade.loadObjectBean(visibilityKey).getId(), properties['iobj.visibilityKey.companyRef'].toString()).getObjectAttributeValueBeans();\r\nlog.info \"companyRef: \" + companyRef\r\ndef companyRefId = companyRef[0].getReferencedObjectBeanId()\r\nlog.debug \"companyRefId:\" + companyRefId\r\nif (issue.getCustomFieldValue(siteCF) != null &amp;&amp; objectFacade.loadObjectAttributeBean(siteObject.getId(), \"SITE_REF\")) {\r\n    obTriage = objectFacade.loadObjectAttributeBean(siteObject.getId(), \"SITE_REF\").createMutable()\r\n    s = obTriage.getObjectAttributeValueBeans()\r\n    s = s.toString()\r\n    sKey = s.substring(s.lastIndexOf('(') + 1, s.lastIndexOf(')'))\r\n    if (objectFacade.loadObjectAttributeBean(sKey.toInteger(), \"TIME_ZONE\")) {\r\n        obTriage = objectFacade.loadObjectAttributeBean(sKey.toInteger(), \"TIME_ZONE\").createMutable()\r\n        timeZone = obTriage.getObjectAttributeValueBeans()\r\n        timeZone = timeZone[0].getValue()\r\n        log.debug \"TimeZone da Site: \" + timeZone\r\n    } else {\r\n        if (objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\")) {\r\n            obTriage = objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\").createMutable()\r\n            timeZone = obTriage.getObjectAttributeValueBeans()\r\n            timeZone = timeZone[0].getValue()\r\n            log.debug \"TimeZone da Company: \" + timeZone\r\n        }\r\n    }\r\n} else {\r\n    if (objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\")) {\r\n        obTriage = objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\").createMutable()\r\n        timeZone = obTriage.getObjectAttributeValueBeans()\r\n        timeZone = timeZone[0].getValue()\r\n        log.debug \"TimeZone da Company: \" + timeZone\r\n    }\r\n}\r\nif (!timeZone) {\r\n    timeZone = \"Europe/Rome\"\r\n}\r\nlog.debug \"timeZone: \" + timeZone\r\nlocalTimeStamp = (new Timestamp((new Date(new Date().getTime() - TimeZone.getDefault().getRawOffset() + TimeZone.getTimeZone(timeZone.toString()).getRawOffset())).time)).toString()\r\nlocalDate = new Date(new Date().getTime() - TimeZone.getDefault().getRawOffset() + TimeZone.getTimeZone(timeZone.toString()).getRawOffset())\r\n\r\n}else{\r\n\r\n    localTimeStamp =  (new Timestamp((new Date()).time)).toString()\r\n    localDate =  new Date()\r\n\r\n}\r\n\r\nlog.debug \"localTimeStamp: \" + localTimeStamp\r\nlog.debug \"localDate: \" + localDate\r\n/*25.11.22*/\r\n\r\ndef trovato=false, reopened=false\r\nfor (s in ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplier'].toString())){\r\n    if (issue.getCustomFieldValue(s) != null){\r\n        trovato=true\r\n    }\r\n}\r\n\r\ndef user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\r\n\r\n//Se il ticket \u00e8 eseguito da tecnici interni eseguo il trace automatico dei tempi\r\nif(!trovato){\r\n    \r\n    def currentUser = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENT_USER\")[0]\r\n    def onSiteTechsTraceField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIAN_ACTIVITIES_TRACE_WORK\")[0];\r\n    def onSiteTechsField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIANS_ONSITE\")[0];\r\n    def OnSiteTechObjects = new ArrayList();\r\n    int OPAA = properties['ischema.aa.id'].toString().toInteger()\r\n    int DBO = properties['ischema.dbo.id'].toString().toInteger()\r\n    \r\n    /* ------------ DEFINE ACTION TO BE TRACED AND SET TO BE DONE ------------- */\r\n    def ACTION = properties['wf.tr.jobCompleted.action'].toString()\r\n    def SET = properties['wf.tr.jobCompleted.set'].toString()\r\n    \r\n    def ONSITE_TECH_REPORT_OBJ_TYPE=properties['iobj.onSiteTechReport'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_NAME=properties['iobj.onSiteTechReport.name.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF=properties['iobj.onSiteTechReport.technicianRef.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED=properties['iobj.onSiteTechReport.jobCompleted.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_JOB_STARTED=properties['iobj.onSiteTechReport.jobStarted.id'].toString().toInteger()\r\n    def ONSITE_TECH_REPORT_ATTR_TRACE_ACTION=properties['iobj.onSiteTechReport.traceAction.id'].toString().toInteger()\r\n    \r\n    log.warn \"********************** CONFIRM ASSET **********************\"\r\n    def objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = Technician AND TECHNICIAN_REF.TECH_ACCOUNT =\\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\"\")\r\n    log.info \"iql: \" + \"objectType = Technician AND TECHNICIAN_REF.TECH_ACCOUNT =\\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\"\"\r\n    \r\n    for(technician in objects){\r\n        //extract insight key ang get object\r\n        def tech=technician.toString()\r\n        def techKey = tech.substring(tech.lastIndexOf('(')+1,tech.lastIndexOf(')'))\r\n        def techName = tech.substring(0,tech.lastIndexOf('(')-1)\r\n        def techObject = objectFacade.loadObjectBean(techKey)\r\n        log.info \"techKey: \" + techKey\r\n        log.info (\"techName: \" + techName)\r\n        log.info (\"techObject: \" + techObject)\r\n        log.info \"SET: \" +SET\r\n        if (SET == \"JOB_COMPLETED\"){\r\n            /*SEARCH OBJECT TO BE UPDATED*/\r\n              def findTechonsiteUrl = new URL(\"http://\" + properties.getProperty(\"api.env\") + \"/op/rest/jira/find-conntectedTicket-tech-action-started-noCompleted\")\r\n\t\t\t   requestMethod = \"POST\";\r\n                body_req = [\r\n                            \"issueKey\": [issue.key],\r\n                            \"techKey\": techKey,\r\n                            \"traceActionStatus\": ACTION\r\n                                            ] \r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n                                \r\n            log.info(\"calling URL: \" + body_req)\r\n            def findTechonsiteRequest = (HttpURLConnection) findTechonsiteUrl.openConnection()\r\n\t\t\t\tfindTechonsiteRequest.setRequestMethod(requestMethod);\r\n                findTechonsiteRequest.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n                findTechonsiteRequest.setRequestProperty(\"Accept\", \"*/*\");\r\n                findTechonsiteRequest.setDoOutput(true);\r\n                findTechonsiteRequest.setDoInput(true);\r\n                findTechonsiteRequest.outputStream\r\n                findTechonsiteRequest.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\r\n                log.debug findTechonsiteRequest.outputStream\r\n                findTechonsiteRequest.connect();\r\n            def findTechonsiteStatusCode = findTechonsiteRequest.getResponseCode()\r\n            def findTechonsiteString = findTechonsiteRequest.getInputStream().getText()\r\n            log.info(\"findTechonsiteStatusCode: \" + findTechonsiteStatusCode)\r\n            log.info(\"findTechonsiteString: \" + findTechonsiteString)\r\n\r\n            if (findTechonsiteStatusCode != HTTP_OK) {\r\n                throw new Exception(\"INDIRECT_JOB reports endpoint returned response code != 200 OK\");\r\n            }\r\n\r\n            objects = jsonSlurper.parseText(findTechonsiteString)\r\n\r\n            log.info(\"------- objects ---------- \"+objects)\r\n            //objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key=\\\"\" + issue.key + \"\\\")\")\r\n            \r\n            //log.warn \"iql: \" + \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key=\\\"\" + issue.key + \"\\\")\"\r\n            \r\n            if(objects.size() &gt; 0){\r\n                /*UPDATE JOB_COMPLETED ON SELECTED OBJECT*/     \r\n                /*30.06.2022 AF Se \u00e8 l'ultimo sub-task a essere completato NON salvo il timestamp di fine lavoro che verr\u00e0 compilato a chiusura del ticket padre*/\r\n                SubTaskManager subTaskManager = ComponentAccessor.getSubTaskManager();\r\n                Collection subTasks = issue.getParentObject().getSubTaskObjects()\r\n                def last = true\r\n                if (!subTasks.empty) {\r\n                    subTasks.each {\r\n                        if(!it.getStatus().name.toString().equals(\"Done\") &amp;&amp; it.key != issue.key){\r\n                            last=false\r\n                            log.info \"last\"\r\n                        }\r\n                    }\r\n\r\n                    if(!last){\r\n                        def obj = objectFacade.loadObjectBean(objects[0].id);\r\n                        attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED); \r\n                        log.info \"attribType: \" + attribType.toString()\r\n                        newAttrib = obj.createObjectAttributeBean(attribType);\r\n                        def newAttribValue = newAttrib.createObjectAttributeValueBean();\r\n            \r\n                        try {\r\n                            newAttribValue.setDateValue(localDate);\r\n                        } catch (Exception vie) {\r\n                            log.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType.toString() + \" to \" + localTimeStamp + \". Exiting.\");\r\n                            log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                            return false;\r\n                        }\r\n                        \r\n                        def attribValues = newAttrib.getObjectAttributeValueBeans();\r\n                        attribValues.add(newAttribValue);\r\n                        newAttrib.setObjectAttributeValueBeans(attribValues);\r\n                        \r\n                        try {\r\n                            newAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\r\n                        } catch (Exception vie) {\r\n                            log.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\r\n                            log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                            return false;\r\n                        }\r\n                    }else{\r\n                        /*Verificare se un altro PM Task prima di questo era stato considerato ultimo (ad es. perch\u00e8 dopo averli completati tutti ho fatto aggiungi impianto)*/\r\n                        /*Se si, aggiornare JOB_COMPLETED sul precedente = a JOB_STARTED di quello corrente e considerare questo come ultimo*/\r\n                        /*SEARCH OBJECT TO BE UPDATED*/\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tdef linkedTickets=new ArrayList()\r\n\r\n\t\t\t\t\t\tfor(tt in issue.getParentObject().getSubTaskObjects().minus(issue)){\r\n       \r\n\t\t\t\t\t\t\tlinkedTickets.add(tt.toString())\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(!linkedTickets.isEmpty()){\r\n\t\t\t\t\t\t \r\n\t\t\t\t\t\trequestMethod = \"POST\";\r\n\t\t\t\t\t\tbody_req = [\r\n                            \"issueKey\": [issue.key],\r\n                            \"techKey\": techKey,\r\n                            \"traceActionStatus\": ACTION\r\n                                            ] \r\n\t\t\t\t\t\t     \r\n\t\t\t\t\t\tlog.info(\"calling URL: \" + body_req)\r\n\t\t\t\t\t\t    findTechonsiteRequest = (HttpURLConnection) findTechonsiteUrl.openConnection()\r\n\t\t\t\t\t\t\tfindTechonsiteRequest.setRequestMethod(requestMethod);\r\n\t\t\t\t\t\t\tfindTechonsiteRequest.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n\t\t\t\t\t\t\tfindTechonsiteRequest.setRequestProperty(\"Accept\", \"*/*\");\r\n\t\t\t\t\t\t\tfindTechonsiteRequest.setDoOutput(true);\r\n\t\t\t\t\t\t\tfindTechonsiteRequest.setDoInput(true);\r\n\t\t\t\t\t\t\tfindTechonsiteRequest.outputStream\r\n\t\t\t\t\t\t\tfindTechonsiteRequest.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\r\n\t\t\t\t\t\t\tlog.debug findTechonsiteRequest.outputStream\r\n\t\t\t\t\t\t\tfindTechonsiteRequest.connect();\r\n\t\t\t\t\t\t findTechonsiteStatusCode = findTechonsiteRequest.getResponseCode()\r\n\t\t\t\t\t\t findTechonsiteString = findTechonsiteRequest.getInputStream().getText()\r\n\t\t\t\t\t\tlog.info(\"findTechonsiteStatusCode: \" + findTechonsiteStatusCode)\r\n\t\t\t\t\t\tlog.info(\"findTechonsiteString: \" + findTechonsiteString)\r\n\r\n\t\t\t\t\t\tif (findTechonsiteStatusCode != HTTP_OK) {\r\n\t\t\t\t\t\t\tthrow new Exception(\"INDIRECT_JOB reports endpoint returned response code != 200 OK\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlastObjects = jsonSlurper.parseText(findTechonsiteString)\r\n\r\n                        //lastObjects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key IN (\" + issue.getParentObject().getSubTaskObjects().minus(issue).toString().replaceAll(\"[\\\\[\\\\]]\", \"\") + \"))\")\r\n                        //log.warn \"iql: \" + \"objectType = OnSite_Tech_Report AND TECHNICIAN_REF =\\\"\" + techKey + \"\\\" AND JOB_STARTED IS NOT EMPTY AND JOB_COMPLETED IS EMPTY AND TRACE_ACTION_STATUS = \\\"\" + ACTION + \"\\\" AND object HAVING connectedTickets(key IN (\" + issue.getParentObject().getSubTaskObjects().minus(issue).toString().replaceAll(\"[\\\\[\\\\]]\", \"\") + \"))\"\r\n\r\n                        if(lastObjects.size()&gt;0){\r\n                            log.debug lastObjects[0]\r\n                            def lastObj = objectFacade.loadObjectBean(lastObjects[0].id);\r\n                            attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED); \r\n                            log.info \"attribType: \" + attribType.toString()\r\n                            newAttrib = lastObj.createObjectAttributeBean(attribType);\r\n                            def newAttribValue = newAttrib.createObjectAttributeValueBean();\r\n                \r\n                            /*Get JOB_STARTED from current obj*/\r\n                            def obTriage = objectFacade.loadObjectAttributeBean(objects[0].id, \"JOB_STARTED\").createMutable()\r\n                            def started = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n\r\n                            try {\r\n                                newAttribValue.setDateValue(started);\r\n                            } catch (Exception vie) {\r\n                                log.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType.toString() + \" to \" + localTimeStamp + \". Exiting.\");\r\n                                log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                                return false;\r\n                            }\r\n                            \r\n                            def attribValues = newAttrib.getObjectAttributeValueBeans();\r\n                            attribValues.add(newAttribValue);\r\n                            newAttrib.setObjectAttributeValueBeans(attribValues);\r\n                            \r\n                            try {\r\n                                newAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\r\n                            } catch (Exception vie) {\r\n                                log.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\r\n                                log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                                return false;\r\n                            }\r\n\r\n                            def jqlSearch = \"project = '\" + issue.getProjectObject().name + \"' AND issuetype IN ('Planned Maintenance Task') AND key != '\" + issue.key.toString() + \"' AND OP_TECHNICIAN_ACTIVITIES_TRACE_WORK IN iqlFunction('objectSchema = \\\"Operation Portal AA\\\" AND objectType = OnSite_Tech_Report AND objectKey = OPAA-\" + lastObjects[0].id + \"')\"\r\n                            log.debug \"ricerca: \" + jqlSearch\r\n                            def query = jqlQueryParser.parseQuery(jqlSearch)\r\n                            log.debug \"query: \" + query\r\n                            def search = searchService.search(user, query, PagerFilter.getUnlimitedFilter())\r\n                            def found=false\r\n                            def foundOutward=false\r\n                            def linkedIssue\r\n                            if (search.results) {\r\n                                //Execute update SO e SC on the resulting issue\r\n                                def i = search.results.first()\r\n                                def requestMethod\r\n                                def baseURL\r\n\r\n                                /** SERVICE ORDER UPDATE **/\r\n                                URL url\r\n                                HttpURLConnection connection\r\n\r\n                                def body_req = []\r\n                                requestMethod = \"POST\";\r\n                                body_req = []\r\n                                body_req = [\r\n                                    \"issueKey\": i.key\r\n                                ] \r\n                                baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\r\n\r\n                                log.debug \"baseURL SO: \" + baseURL\r\n                                log.debug \"body_req SO: \" + body_req\r\n                                url = new URL(baseURL)\r\n                                connection = (HttpURLConnection)url.openConnection();\r\n                                connection.setRequestMethod(requestMethod);\r\n                                connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n                                connection.setRequestProperty(\"Accept\", \"*/*\");\r\n                                connection.setDoOutput(true);\r\n                                connection.setDoInput(true);\r\n                                connection.outputStream\r\n                                connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\r\n                                log.debug connection.outputStream\r\n                                connection.connect();\r\n\r\n                                def output = new ArrayList()\r\n                                def eList = new ArrayList()\r\n                                def eListErrors = new ArrayList()\r\n                                def errorMsgs = new ArrayList()\r\n                                log.debug \"ResponseMessage:\" + connection.getResponseMessage()\r\n                                log.debug \"SO ResponseCode:\" + connection.getResponseCode()\r\n                                if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\r\n                                    log.debug \"url: \" + url\r\n                                    log.debug \"ResponseCode:\" + connection.getResponseCode()\r\n                                    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\r\n\r\n                                    def outputMsg = ((HttpURLConnection)connection).errorStream.text\r\n                                    log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\r\n\r\n                                   \r\n                                    def json_object = jsonSlurper.parseText(outputMsg)\r\n                                    assert json_object instanceof Map  \r\n                                    log.debug \"message: \" +  json_object.message\r\n                                    log.debug \"errors: \" +  json_object.errors.toString()\r\n\r\n                                    eListErrors.add(\"E\")\r\n                                    eListErrors.add(\"OP-SAP-SO-CREATE\")\r\n                                    errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\r\n                                    eListErrors.add(errorMsgs)\r\n                                    eList.add(eListErrors)\r\n\r\n                                    output.add(eList)\r\n                                    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\r\n                                }else{\r\n                                    /** DA FARE SC SOLO IN CASO DI TECNICI INTERNI **/\r\n                                    if(!trovato){ /** se OP_SUPPLIER = NULL il ticket ha proseguito sul flusso tecnici interni **/\r\n\r\n                                        body_req = [\r\n                                            \"issueKey\": i.key,\r\n                                        ] \r\n\r\n                                        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/order/confirmation\"\r\n                                        log.debug \"body_req SC: \" + body_req\r\n                                        log.debug \"baseURL SC: \" + baseURL\r\n                                        url = new URL(baseURL)\r\n                                        connection = (HttpURLConnection)url.openConnection();\r\n                                        connection.setRequestMethod(requestMethod);\r\n                                        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n                                        connection.setRequestProperty(\"Accept\", \"*/*\");\r\n                                        connection.setDoOutput(true);\r\n                                        connection.setDoInput(true);\r\n                                        connection.outputStream\r\n                                        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\r\n                                        log.debug connection.outputStream\r\n                                        connection.connect();\r\n\r\n                                        output = new ArrayList()\r\n                                        eList = new ArrayList()\r\n                                        eListErrors = new ArrayList()\r\n                                        errorMsgs = new ArrayList()\r\n                                        log.debug \"SC ResponseCode:\" + connection.getResponseCode()\r\n                                        if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\r\n                                            log.debug \"url: \" + url\r\n                                            log.debug \"ResponseCode:\" + connection.getResponseCode()\r\n                                            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\r\n\r\n                                            def outputMsg = ((HttpURLConnection)connection).errorStream.text\r\n                                            log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\r\n\r\n                                            \r\n                                            def json_object = jsonSlurper.parseText(outputMsg)\r\n                                            assert json_object instanceof Map  \r\n                                            log.debug \"message: \" +  json_object.message\r\n                                            log.debug \"errors: \" +  json_object.errors.toString()\r\n                                            \r\n                                            eListErrors.add(\"E\")\r\n                                            eListErrors.add(\"OP-SAP-SC-CREATE\")\r\n                                            errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\r\n                                            eListErrors.add(errorMsgs)\r\n                                            eList.add(eListErrors)\r\n\r\n                                            output.add(eList)\r\n                                            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\r\n                                        }else{\r\n                                            requestMethod = \"POST\";\r\n                                            body_req = [\r\n                                                \"issueKey\": i.key,\r\n                                                \"status\": \"CLO\"\r\n                                            ] \r\n\r\n                                            baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\r\n                                            log.debug \"body_req SN: \" + body_req\r\n                                            log.debug \"baseURL SN: \" + baseURL\r\n                                            url = new URL(baseURL)\r\n                                            connection = (HttpURLConnection)url.openConnection();\r\n                                            connection.setRequestMethod(requestMethod);\r\n                                            connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n                                            connection.setRequestProperty(\"Accept\", \"*/*\");\r\n                                            connection.setDoOutput(true);\r\n                                            connection.setDoInput(true);\r\n                                            connection.outputStream\r\n                                            connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\r\n                                            log.debug connection.outputStream\r\n                                            connection.connect();\r\n\r\n                                            output = new ArrayList()\r\n                                            eList = new ArrayList()\r\n                                            eListErrors = new ArrayList()\r\n                                            errorMsgs = new ArrayList()\r\n\r\n                                            if (!connection.getResponseCode().toString().equals(\"200\")){\r\n                                                log.debug \"url: \" + url\r\n                                                log.debug \"ResponseCode:\" + connection.getResponseCode()\r\n                                                log.debug \"ResponseMessage:\" + connection.getResponseMessage()\r\n                                                eListErrors.add(\"E\")\r\n                                                eListErrors.add(\"SN_UPDATE\")\r\n                                                errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\r\n                                                eListErrors.add(errorMsgs)\r\n                                                eList.add(eListErrors)\r\n\r\n                                                output.add(eList)\r\n                                                throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\r\n                                            }\r\n                                        }\r\n                                    }else{\r\n                                        requestMethod = \"POST\";\r\n                                        body_req = [\r\n                                            \"issueKey\": i.key,\r\n                                            \"status\": \"CLO\"\r\n                                        ] \r\n\r\n                                        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\r\n                                        log.debug \"body_req SN: \" + body_req\r\n                                        log.debug \"baseURL SN: \" + baseURL\r\n                                        url = new URL(baseURL)\r\n                                        connection = (HttpURLConnection)url.openConnection();\r\n                                        connection.setRequestMethod(requestMethod);\r\n                                        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n                                        connection.setRequestProperty(\"Accept\", \"*/*\");\r\n                                        connection.setDoOutput(true);\r\n                                        connection.setDoInput(true);\r\n                                        connection.outputStream\r\n                                        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\r\n                                        log.debug connection.outputStream\r\n                                        connection.connect();\r\n\r\n                                        output = new ArrayList()\r\n                                        eList = new ArrayList()\r\n                                        eListErrors = new ArrayList()\r\n                                        errorMsgs = new ArrayList()\r\n\r\n                                        if (!connection.getResponseCode().toString().equals(\"200\")){\r\n                                            log.debug \"url: \" + url\r\n                                            log.debug \"ResponseCode:\" + connection.getResponseCode()\r\n                                            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\r\n                                            eListErrors.add(\"E\")\r\n                                            eListErrors.add(\"SN_UPDATE\")\r\n                                            errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\r\n                                            eListErrors.add(errorMsgs)\r\n                                            eList.add(eListErrors)\r\n\r\n                                            output.add(eList)\r\n                                            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                        }\r\n\t\t\t\t\t\t}\r\n                    }\r\n                }                \r\n                \r\n            }else{\r\n                /*ERROR!!*/\r\n            }\r\n            \r\n        }else{\r\n            /*CREATE NEW OBJECT: ONSITE_TECH_REPORT_OBJ_TYPE*/\r\n            def objectTypeOnSiteTechReport = objectTypeFacade.loadObjectTypeBean(ONSITE_TECH_REPORT_OBJ_TYPE);\r\n            def newObjectBean = objectTypeOnSiteTechReport.createMutableObjectBean();\r\n            \r\n            def objectAttributeBeans = new ArrayList();\r\n            def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_NAME); \r\n            def startedObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_JOB_STARTED); \r\n            def actionObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TRACE_ACTION); \r\n            \r\n            objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, nameObjectTypeAttributeBean, techName));\r\n            objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, startedObjectTypeAttributeBean, localTimeStamp));\r\n            objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, actionObjectTypeAttributeBean, ACTION));\r\n            \r\n            newObjectBean.setObjectAttributeBeans(objectAttributeBeans);\r\n            /* Store the object into Insight. The new ObjectBean will be updated with an unique ID */\r\n            try {\r\n                newObjectBean = objectFacade.storeObjectBean(newObjectBean);\r\n                log.warn(\"newObjectBean: \" + newObjectBean);\r\n            } catch (Exception vie) {\r\n                log.warn(\"Could not create issue due to validation exception:\" + vie.getMessage());\r\n            }\r\n            \r\n            /* Update TECHNICIAN_REF on the newObject */\t\t        \r\n            def objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF).createMutable() //The id of the attribute\r\n            \r\n            /* Create the new attribute bean based on the value */\r\n            def newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, techKey);\r\n            /* Load the attribute bean */\r\n            def objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), techKey);\r\n            if (objectAttributeBean != null) {\r\n                /* If attribute exist reuse the old id for the new attribute */\r\n                newObjectAttributeBean.setId(objectAttributeBean.getId());\r\n            }\r\n            /* Store the object attribute into Insight. */\r\n            try {\r\n                objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);\r\n            } catch (Exception vie) {\r\n                log.warn(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\r\n            }  \r\n            \r\n            OnSiteTechObjects.add(newObjectBean)\r\n         \r\n            log.info (\"OnSiteTechObjects: \" + OnSiteTechObjects)\r\n            \r\n            if (!OnSiteTechObjects.isEmpty()) {\r\n                MutableIssue mi = (MutableIssue) issue;\r\n                mi.setCustomFieldValue(onSiteTechsTraceField, OnSiteTechObjects);\r\n                ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n                \r\n                mi.setCustomFieldValue(onSiteTechsField, OnSiteTechObjects);\r\n                ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n            }\r\n        }\r\n    }   \r\n}    ","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">5da0be63-d7e9-42df-b2d7-82f837a60fb5</arg>
              <arg name="FIELD_NOTES">SAP: update SN status &amp; Update SO + Confirmation - If last PM Task closed: do not update SAP SO for LABOUR, update SAP SO sending only MATERIALS</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport com.atlassian.jira.config.SubTaskManager\nimport static java.net.HttpURLConnection.HTTP_OK\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager()\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-41566\")\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef supplier =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplier'] ? properties['cf.supplier'].toString() : \"OP_SUPPLIER\")[0]\ndef requestMethod\ndef baseURL\n\ndef trovato = false\ndef internalSupplier = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_INTERNAL_SUPPLIER\")[0]\ndef opManuallyReopened = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_MANUALLY_REOPENED\")[0]\n\nfor (s in ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplier'].toString())) {\n    if (issue.getCustomFieldValue(s) != null &amp;&amp; issue.getCustomFieldValue(s) != issue.getCustomFieldValue(internalSupplier)) {\n        trovato = true\n    }\n}\n\nSubTaskManager subTaskManager = ComponentAccessor.getSubTaskManager();\nCollection&lt;Issue&gt; subTasks = issue.getParentObject().getSubTaskObjects()\ndef last = true\nsubTasks.each {\n    if (!it.status.name.toString().equals(\"Done\") &amp;&amp; !it.key.equals(issue.key)) {\n        last = false\n    }\n}\n\nlog.info(\"[\" + issue.key + \"] this Planned Maintenance Task is \" + (last ? \"\" : \"NOT \") + \"the last subtask\")\n\ndef opManuallyReopenedValue = issue.getCustomFieldValue(opManuallyReopened)\n\nif (opManuallyReopenedValue != null &amp;&amp; opManuallyReopenedValue.toString().equals(\"Yes\")) {\n    // OP_MANUALLY_REOPENED is \"Yes\"\n    if (!last) {\n        log.info(\"[\" + issue.key + \"] this Planned Maintenance Task is manually reopened and it's not the last subtask, update service notification and exit\")\n\n        def body_req = [\n            \"issueKey\": issue.key,\n            \"status\": \"CLO\"\n        ]\n\n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n        log.debug \"URL SN: \" + baseURL\n        log.debug \"request body of SN: \" + body_req\n        URL url = new URL(baseURL)\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(\"POST\");\n        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n        connection.setRequestProperty(\"Accept\", \"*/*\");\n        connection.setDoOutput(true);\n        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n        connection.connect();\n\n        def output = new ArrayList()\n        def eList = new ArrayList()\n        def eListErrors = new ArrayList()\n        def errorMsgs = new ArrayList()\n\n        if (connection.getResponseCode() != HTTP_OK) {\n            log.debug \"url: \" + url\n            log.debug \"ResponseCode:\" + connection.getResponseCode()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n            eListErrors.add(\"E\")\n            eListErrors.add(\"SN_UPDATE\")\n            errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n            eListErrors.add(errorMsgs)\n            eList.add(eListErrors)\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        }\n    }\n} else {\n    // OP_MANUALLY_REOPENED is NOT \"Yes\"\n    if (!last) {\n        /** SERVICE ORDER UPDATE **/\n        URL url\n        HttpURLConnection connection\n\n        def body_req = [\n            \"issueKey\": issue.key\n        ]\n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\n\n        log.debug \"baseURL SO: \" + baseURL\n        log.debug \"body_req SO: \" + body_req\n        url = new URL(baseURL)\n        connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(\"POST\");\n        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n        connection.setRequestProperty(\"Accept\", \"*/*\");\n        connection.setDoOutput(true);\n        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n        connection.connect();\n\n        def output = new ArrayList()\n        def eList = new ArrayList()\n        def eListErrors = new ArrayList()\n        def errorMsgs = new ArrayList()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        log.debug \"SO ResponseCode:\" + connection.getResponseCode()\n        if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")) {\n            log.debug \"url: \" + url\n            log.debug \"ResponseCode:\" + connection.getResponseCode()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n            def outputMsg = ((HttpURLConnection)connection).errorStream.text\n            log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n            def jsonSlurper = new JsonSlurper()\n            def json_object = jsonSlurper.parseText(outputMsg)\n            assert json_object instanceof Map  \n            log.debug \"message: \" +  json_object.message\n            log.debug \"errors: \" +  json_object.errors.toString()\n\n            eListErrors.add(\"E\")\n            eListErrors.add(\"OP-SAP-SO-CREATE\")\n            errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n            eListErrors.add(errorMsgs)\n            eList.add(eListErrors)\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        } else {\n            /** DA FARE SC SOLO IN CASO DI TECNICI INTERNI **/\n            if (!trovato) { /** se OP_SUPPLIER = NULL il ticket ha proseguito sul flusso tecnici interni **/\n\n                body_req = [\n                    \"issueKey\": issue.key,\n                ]\n\n                baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/order/confirmation\"\n                log.debug \"body_req SC: \" + body_req\n                log.debug \"baseURL SC: \" + baseURL\n                url = new URL(baseURL)\n                connection = (HttpURLConnection) url.openConnection();\n                connection.setRequestMethod(\"POST\");\n                connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n                connection.setRequestProperty(\"Accept\", \"*/*\");\n                connection.setDoOutput(true);\n                connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n                connection.connect();\n\n                output = new ArrayList()\n                eList = new ArrayList()\n                eListErrors = new ArrayList()\n                errorMsgs = new ArrayList()\n                log.debug \"SC ResponseCode:\" + connection.getResponseCode()\n                if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")) {\n                    log.debug \"url: \" + url\n                    log.debug \"ResponseCode:\" + connection.getResponseCode()\n                    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n                    def outputMsg = ((HttpURLConnection)connection).errorStream.text\n                    log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n                    def jsonSlurper = new JsonSlurper()\n                    def json_object = jsonSlurper.parseText(outputMsg)\n                    assert json_object instanceof Map  \n                    log.debug \"message: \" +  json_object.message\n                    log.debug \"errors: \" +  json_object.errors.toString()\n                    \n                    eListErrors.add(\"E\")\n                    eListErrors.add(\"OP-SAP-SC-CREATE\")\n                    errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n                    eListErrors.add(errorMsgs)\n                    eList.add(eListErrors)\n\n                    output.add(eList)\n                    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n                } else {\n                    body_req = [\n                        \"issueKey\": issue.key,\n                        \"status\": \"CLO\"\n                    ]\n\n                    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n                    log.debug \"body_req SN: \" + body_req\n                    log.debug \"baseURL SN: \" + baseURL\n                    url = new URL(baseURL)\n                    connection = (HttpURLConnection) url.openConnection();\n                    connection.setRequestMethod(\"POST\");\n                    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n                    connection.setRequestProperty(\"Accept\", \"*/*\");\n                    connection.setDoOutput(true);\n                    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n                    connection.connect();\n\n                    output = new ArrayList()\n                    eList = new ArrayList()\n                    eListErrors = new ArrayList()\n                    errorMsgs = new ArrayList()\n\n                    if (!connection.getResponseCode().toString().equals(\"200\")) {\n                        log.debug \"url: \" + url\n                        log.debug \"ResponseCode:\" + connection.getResponseCode()\n                        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n                        eListErrors.add(\"E\")\n                        eListErrors.add(\"SN_UPDATE\")\n                        errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n                        eListErrors.add(errorMsgs)\n                        eList.add(eListErrors)\n\n                        output.add(eList)\n                        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n                    }\n                }\n            } else {\n                body_req = [\n                    \"issueKey\": issue.key,\n                    \"status\": \"CLO\"\n                ]\n\n                baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n                log.debug \"body_req SN: \" + body_req\n                log.debug \"baseURL SN: \" + baseURL\n                url = new URL(baseURL)\n                connection = (HttpURLConnection) url.openConnection();\n                connection.setRequestMethod(\"POST\");\n                connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n                connection.setRequestProperty(\"Accept\", \"*/*\");\n                connection.setDoOutput(true);\n                connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n                connection.connect();\n\n                output = new ArrayList()\n                eList = new ArrayList()\n                eListErrors = new ArrayList()\n                errorMsgs = new ArrayList()\n\n                if (!connection.getResponseCode().toString().equals(\"200\")) {\n                    log.debug \"url: \" + url\n                    log.debug \"ResponseCode:\" + connection.getResponseCode()\n                    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n                    eListErrors.add(\"E\")\n                    eListErrors.add(\"SN_UPDATE\")\n                    errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n                    eListErrors.add(errorMsgs)\n                    eList.add(eListErrors)\n\n                    output.add(eList)\n                    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n                }\n            }\n        }\n    } else {\n        //18.03.2024 - if last --&gt; send to SAP only parts - no labour (it will be sent at the parent ticket closure)\n        /** SERVICE ORDER UPDATE **/\n        URL url\n        HttpURLConnection connection\n\n        def body_req = [\n            \"issueKey\": issue.key,\n            \"include\":\"MATERIALS\"\n        ]\n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\n\n        log.debug \"baseURL SO: \" + baseURL\n        log.debug \"body_req SO: \" + body_req\n        url = new URL(baseURL)\n        connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(\"POST\");\n        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n        connection.setRequestProperty(\"Accept\", \"*/*\");\n        connection.setDoOutput(true);\n        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n        connection.connect();\n\n        def output = new ArrayList()\n        def eList = new ArrayList()\n        def eListErrors = new ArrayList()\n        def errorMsgs = new ArrayList()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        log.debug \"SO ResponseCode:\" + connection.getResponseCode()\n        if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")) {\n            log.debug \"url: \" + url\n            log.debug \"ResponseCode:\" + connection.getResponseCode()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n            def outputMsg = ((HttpURLConnection)connection).errorStream.text\n            log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n            def jsonSlurper = new JsonSlurper()\n            def json_object = jsonSlurper.parseText(outputMsg)\n            assert json_object instanceof Map  \n            log.debug \"message: \" +  json_object.message\n            log.debug \"errors: \" +  json_object.errors.toString()\n\n            eListErrors.add(\"E\")\n            eListErrors.add(\"OP-SAP-SO-CREATE\")\n            errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n            eListErrors.add(errorMsgs)\n            eList.add(eListErrors)\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        }\n    }\n}\n","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="v+nWù">false</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="5">
              <post-functions>
                <function type="class">
                  <arg name="field.name">resolution</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
                  <arg name="field.value">6</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">3d910af6-4e19-48fc-91c2-ef43a546b15e</arg>
                  <arg name="FIELD_NOTES">Update COMPLETED on Risk Assessment</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"  import com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.issue.Issue\r\nimport com.atlassian.jira.issue.MutableIssue;\r\nimport com.atlassian.jira.event.type.EventDispatchOption;\r\nimport org.apache.log4j.Level\r\nimport java.sql.Timestamp\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File('/var/atlassian/application-data/shared/scripts/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\"); \r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n  \r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\r\n  \r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\"); \r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n  \r\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\"); \r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\r\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \r\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\r\n\r\nIssue issue = issue\r\n\r\ndef currentUser = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENT_USER\")[0]\r\ndef riskAssField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_ASSET_RISKS_ASSESSMENT\")[0];\r\ndef checklistField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_ASSET_CHECKLIST\")[0];\r\n\r\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\r\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\r\n\r\nlog.warn \"********************** RISKS ASSESSMENT **********************\"\r\nlog.info issue.getCustomFieldValue(riskAssField).toString() \r\nriskAssObj = issue.getCustomFieldValue(riskAssField)\r\n\r\nif(issue.getCustomFieldValue(riskAssField) != null){\r\n    //def obj = objectFacade.loadObjectBean(objects[0].getId());\r\n    def r=riskAssObj.toString()\r\n    def rKey = r.substring(r.lastIndexOf('(')+1,r.lastIndexOf(')'))\r\n    def rName = r.substring(0,r.lastIndexOf('(')-1)\r\n    def rObject = objectFacade.loadObjectBean(rKey)    \r\n    int attributeID \r\n    riskAssObj.objectAttributeBeans.each {\r\n        it.objectTypeAttributeId.each{\r\n            log.info \"it: \" + it\r\n            if(objectTypeAttributeFacade.loadObjectTypeAttributeBean(it).name == \"COMPLETED\"){\r\n                attributeID = it\r\n            }\r\n        }\r\n    }\r\n\r\n    def attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(attributeID); \r\n    log.info \"attribType: \" + attribType.toString()\r\n    def obj = objectFacade.loadObjectBean(rObject.getId());\r\n    def newAttrib = obj.createObjectAttributeBean(attribType);\r\n    def newAttribValue = newAttrib.createObjectAttributeValueBean();\r\n\r\n    try {\r\n        newAttribValue.setBooleanValue(true);\r\n    } catch (Exception vie) {\r\n        log.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType.toString() + \" to true. Exiting.\");\r\n        log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n        return false;\r\n    }\r\n\r\n    def attribValues = newAttrib.getObjectAttributeValueBeans();\r\n    attribValues.add(newAttribValue);\r\n    newAttrib.setObjectAttributeValueBeans(attribValues);\r\n\r\n    try {\r\n        newAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\r\n    } catch (Exception vie) {\r\n        log.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\r\n        log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n        return false;\r\n    } \r\n}","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">d0ff0e0c-0d1c-4309-b2d2-89ce8055a4a1</arg>
                  <arg name="FIELD_NOTES">Check and fill in OP_PM_ASSET_RISKS_RESULT - OP_ASSET_TO_BE_STOPPED</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport com.atlassian.jira.issue.IssueManager\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.atlassian.jira.issue.MutableIssue\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n    properties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-23678\")\n\ndef risk = false\ndef check = false\ndef completed = true\ndef not_completed = 0\n\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\ndef asset =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_ASSET\")[0]\ndef customer =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CUSTOMER\")[0]\ndef pmstatus = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_PM_ASSET_RISKS_RESULT\")[0]\ndef pmStopAsset = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_ASSET_TO_BE_STOPPED\")[0]\n\nif(issue.getCustomFieldValue(asset)!=null &amp;&amp; (String)issue.getCustomFieldValue(asset) != \"\" &amp;&amp; !issue.getCustomFieldValue(asset).toString().equals(\"\")){\n    //insight classes &amp; components\n    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n    def pmAsset = issue.getCustomFieldValue(asset)\n    log.debug \"pmAsset: \" + pmAsset\n\n    //extract insight key ang get object\n    def installation=pmAsset.toString()\n    def installationKey = installation.substring(installation.lastIndexOf('(')+1,installation.lastIndexOf(')'))\n    def installationObj = objectFacade.loadObjectBean(installationKey)\n    log.debug \"installationObj: \" + installationObj\n    log.debug \"installationObj.getId(): \" + installationObj.getId()\n    def obTriage\n    def prodType, uscitaSicurezza, sfondamento, anteSfondano, sfondamentoOstacoli, sfondamentoFerma, batterie, anticadutaCarter, anticadutaFunzionanti, radar, radarFunzionanti, sensoriPresenza, sensoriPresenzaLati, fotocellule, fotocelluleFunzionanti, schiacciamento, cesoiamento, altriRischi, forzaImpatto\n\n    //TIPO IMPIANTO\n    if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PRODUCT_FAMILY_REF\")){\n        obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PRODUCT_FAMILY_REF\").createMutable()\n        def prodTypeId = obTriage.getObjectAttributeValueBeans()[0].getValue()\n        prodType = objectFacade.loadObjectAttributeBean(prodTypeId, \"Name\").createMutable().getObjectAttributeValueBeans()[0].getValue().toString()\n    }\n    log.debug \"prodType: \" + prodType\n    def status\n    def tobeStopped = false\n    def cfNewValue, fieldConfig\n    \n    def tfRischi, tfImpiantoANorma\n    if(!prodType.equals(\"PORTE AUTOMATICHE\") &amp;&amp; !prodType.equals(\"CANCELLI AUTOMATICI\") &amp;&amp; !prodType.equals(\"BARRIERE\")){\n        //ALTRI RISCHI\n        //TF_RISCHI_RILEVATI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"TF_RISCHI_RILEVATI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"TF_RISCHI_RILEVATI\").createMutable()\n            tfRischi = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"tfRischi: \" + tfRischi\n        \n        //IMPIANTO NON A NORMA\n        //TF_IMPIANTO_A_NORMA\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"TF_IMPIANTO_A_NORMA\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"TF_IMPIANTO_A_NORMA\").createMutable()\n            tfImpiantoANorma = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"tfImpiantoANorma: \" + tfImpiantoANorma\n        \n        if(tfRischi!=null || tfImpiantoANorma.toString().equals(\"NO\"))\n        {\n            risk = true\n        }\n\n        if (risk){\n            status = \"RISK_DETECTED\"\n        }else{\n            status = \"RISK_ANALYSIS_OK\"\n        }\n        log.debug \"status: \" + status\n        def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n        def mi = (MutableIssue) issue\n\n        fieldConfig = pmstatus.getRelevantConfig(issue)\n        //log.warn \"fieldConfig: \" + fieldConfig\n        cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == status }\n\n        pmstatus.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(pmstatus), cfNewValue), new DefaultIssueChangeHolder())\n        issueIndexingService.reIndex(issue)\n        \n    }\n    \n    //PORTE AUTOMATICHE\n    if(prodType.equals(\"PORTE AUTOMATICHE\")){\n        //A\tPORTE_USCITA_SICUREZZA\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_USCITA_SICUREZZA\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_USCITA_SICUREZZA\").createMutable()\n            uscitaSicurezza = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"uscitaSicurezza: \" + uscitaSicurezza\n\n        //B\tPORTE_SFONDAMENTO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_SFONDAMENTO\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_SFONDAMENTO\").createMutable()\n            sfondamento = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"sfondamento: \" + sfondamento\n\n        //C\tPORTE_SFONDAMENTO_ANTE_POSIZIONE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_SFONDAMENTO_ANTE_POSIZIONE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_SFONDAMENTO_ANTE_POSIZIONE\").createMutable()\n            anteSfondano = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"anteSfondano: \" + anteSfondano\n\n        //D\tPORTE_OSTACOLI_SFONDAMENTO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_OSTACOLI_SFONDAMENTO\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_OSTACOLI_SFONDAMENTO\").createMutable()\n            sfondamentoOstacoli = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"sfondamentoOstacoli: \" + sfondamentoOstacoli\n\n        //E\tPORTE_DISPOSITIVO_STOP\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_DISPOSITIVO_STOP\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_DISPOSITIVO_STOP\").createMutable()\n            sfondamentoFerma = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"sfondamentoFerma: \" + sfondamentoFerma\n\n        //F\tPORTE_BATTERIE_EMERGENZA\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_BATTERIE_EMERGENZA\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_BATTERIE_EMERGENZA\").createMutable()\n            batterie = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"batterie: \" + batterie\n\n        //G\tPORTE_DISPOSITIVO_ANTICADUTA_CARTER\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_DISPOSITIVO_ANTICADUTA_CARTER\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_DISPOSITIVO_ANTICADUTA_CARTER\").createMutable()\n            anticadutaCarter = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"anticadutaCarter: \" + anticadutaCarter\n\n        //H\tPORTE_ANTICADUTA_CARTER_FUNZIONANTE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_ANTICADUTA_CARTER_FUNZIONANTE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_ANTICADUTA_CARTER_FUNZIONANTE\").createMutable()\n            anticadutaFunzionanti = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"anticadutaFunzionanti: \" + anticadutaFunzionanti\n\n        //I\tPORTE_RADAR_TYPE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_RADAR_TYPE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_RADAR_TYPE\").createMutable()\n            radar = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"radar: \" + radar\n\n        //L\tPORTE_RADAR_FUNZIONANTI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_RADAR_FUNZIONANTI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_RADAR_FUNZIONANTI\").createMutable()\n            radarFunzionanti = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"radarFunzionanti: \" + radarFunzionanti\n\n        //M\tPORTE_PRESENZA_50MM_ANTE_MOBILI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PRESENZA_50MM_ANTE_MOBILI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PRESENZA_50MM_ANTE_MOBILI\").createMutable()\n            sensoriPresenza = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"sensoriPresenza: \" + sensoriPresenza\n\n        //N\tPORTE_PRESENZA_50MM_ANTE_MOBILI_LATI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PRESENZA_50MM_ANTE_MOBILI_LATI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PRESENZA_50MM_ANTE_MOBILI_LATI\").createMutable()\n            sensoriPresenzaLati = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"sensoriPresenzaLati: \" + sensoriPresenzaLati\n\n        //O\tPORTE_FOTOCELLULE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FOTOCELLULE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FOTOCELLULE\").createMutable()\n            fotocellule = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"fotocellule: \" + fotocellule\n\n        //P\tPORTE_FOTOCELLULE_FUNZIONANTI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FOTOCELLULE_FUNZIONANTI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FOTOCELLULE_FUNZIONANTI\").createMutable()\n            fotocelluleFunzionanti = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"fotocelluleFunzionanti: \" + fotocelluleFunzionanti\n\n        //Q\tPORTE_PROTEZIONE_SCHIACCIAMENTO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PROTEZIONE_SCHIACCIAMENTO\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PROTEZIONE_SCHIACCIAMENTO\").createMutable()\n            schiacciamento = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"schiacciamento: \" + schiacciamento\n\n        //R\tPORTE_PROTEZIONE_CESOIAMENTO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PROTEZIONE_CESOIAMENTO\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PROTEZIONE_CESOIAMENTO\").createMutable()\n            cesoiamento = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cesoiamento: \" + cesoiamento\n\n        //S\tPORTE_ALTRI_RISCHI_DA_SEGNALARE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_ALTRI_RISCHI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_ALTRI_RISCHI\").createMutable()\n            altriRischi = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"altriRischi: \" + altriRischi\n\n        //T\tPORTE_FORZA_IMPATTO_NEI_LIMITI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FORZA_IMPATTO_NEI_LIMITI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FORZA_IMPATTO_NEI_LIMITI\").createMutable()\n            forzaImpatto = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"forzaImpatto: \" + forzaImpatto   \n        \n\n        log.debug \"customer: \" + issue.getCustomFieldValue(customer).toString()\n        if(\n            (uscitaSicurezza.toString().equals(\"SI\") &amp;&amp; sfondamento.toString().equals(\"NESSUNO\")) ||\n            (uscitaSicurezza.toString().equals(\"SI\") &amp;&amp; sfondamento.toString().equals(\"SFONDAMENTO MECCANICO\") &amp;&amp; (anteSfondano.toString().equals(\"NO\") || sfondamentoOstacoli.toString().equals(\"SI\") || sfondamentoFerma.toString().equals(\"NO\"))) ||\n            (uscitaSicurezza.toString().equals(\"SI\") &amp;&amp; sfondamento.toString().equals(\"RIDONDANTE\") &amp;&amp; batterie.toString().equals(\"NO\")) ||\n            anticadutaCarter.toString().equals(\"NO\") ||\n            (anticadutaCarter.toString().equals(\"SI\") &amp;&amp; anticadutaFunzionanti.toString().equals(\"NO\")) ||\n            ((radar.toString().equals(\"MOVIMENTO E PRESENZA\") || radar.toString().equals(\"SOLO MOVIMENTO\")) &amp;&amp; radarFunzionanti.toString().equals(\"NO\")) ||\n            (radar.toString().equals(\"MOVIMENTO E PRESENZA\") &amp;&amp; (sensoriPresenza.toString().equals(\"NO\") || sensoriPresenzaLati.toString().equals(\"NO\"))) || \n            (radar.toString().equals(\"SOLO MOVIMENTO\") &amp;&amp; fotocellule.toString().equals(\"SI\") &amp;&amp; fotocelluleFunzionanti.toString().equals(\"NO\")) ||\n            schiacciamento.toString().equals(\"NO\") ||\n            cesoiamento.toString().equals(\"NO\") ||\n            altriRischi.toString().equals(\"SI\") ||\n            //solo per cliente ALLEANZA 3.0\n            (forzaImpatto.toString().equals(\"NO\") &amp;&amp; issue.getCustomFieldValue(customer).toString().contains(\"ALLEANZA\"))\n        ){\n            risk = true\n        }\n\n        \n        if (risk){\n            status = \"RISK_DETECTED\"\n        }else{\n            status = \"RISK_ANALYSIS_OK\"\n        }\n        log.debug \"status: \" + status\n        def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n        def mi = (MutableIssue) issue\n\n        fieldConfig = pmstatus.getRelevantConfig(issue)\n        //log.warn \"fieldConfig: \" + fieldConfig\n        cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == status }\n\n        pmstatus.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(pmstatus), cfNewValue), new DefaultIssueChangeHolder())\n        issueIndexingService.reIndex(issue)\n\t\t/*\n        if(\n            radarFunzionanti.toString().equals(\"NO\") ||\n            (radar.toString().equals(\"SOLO MOVIMENTO\") &amp;&amp; fotocellule.toString().equals(\"NO\")) ||\n            (forzaImpatto.toString().equals(\"NO\") &amp;&amp; issue.getCustomFieldValue(customer).toString().contains(\"ALLEANZA\")) ||\n            (sfondamento.toString().equals(\"RIDONDANTE\") &amp;&amp; batterie.toString().equals(\"NO\"))\n        ){\n            tobeStopped = true\n        }*/\n    }\n    \n    def cancelloUomoPresente, cancelloAnticaduta, cancelloAnticadutaFunzionante, cancelloExtracorsa, cancelloExtracorsaFunzionante, cancelloAltriRischi, cancelloRischi, cancelloCosteFunzionanti, cancelloCoste, cancelloImpatto\n    //CANCELLI AUTOMATICI\n    if(prodType.equals(\"CANCELLI AUTOMATICI\")){\n        //1. CANCELLO_MACCHINA_UOMO_PRESENTE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_MACCHINA_UOMO_PRESENTE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_MACCHINA_UOMO_PRESENTE\").createMutable()\n            cancelloUomoPresente = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloUomoPresente: \" + cancelloUomoPresente\n\n        //2. CANCELLO_DISPOSITIVI_ANTICADUTA\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_DISPOSITIVI_ANTICADUTA\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_DISPOSITIVI_ANTICADUTA\").createMutable()\n            cancelloAnticaduta = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloAnticaduta: \" + cancelloAnticaduta\n\n        //3. CANCELLO_ANTICADUTA_FUNZIONANTE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ANTICADUTA_FUNZIONANTE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ANTICADUTA_FUNZIONANTE\").createMutable()\n            cancelloAnticadutaFunzionante = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloAnticadutaFunzionante: \" + cancelloAnticadutaFunzionante\n\n        //4. CANCELLO_ARRESTO_EXTRACORSA\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ARRESTO_EXTRACORSA\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ARRESTO_EXTRACORSA\").createMutable()\n            cancelloExtracorsa = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloExtracorsa: \" + cancelloExtracorsa\n\n        //5. CANCELLO_ARRESTO_EXTRACORSA_FUNZIONANTI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ARRESTO_EXTRACORSA_FUNZIONANTI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ARRESTO_EXTRACORSA_FUNZIONANTI\").createMutable()\n            cancelloExtracorsaFunzionante = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloExtracorsaFunzionante: \" + cancelloExtracorsaFunzionante\n\n        //6. CANCELLO_ALTRI_RISCHI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ALTRI_RISCHI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ALTRI_RISCHI\").createMutable()\n            cancelloAltriRischi = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloAltriRischi: \" + cancelloAltriRischi\n\n        //7. CANCELLO_RISCHI_RILEVATI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_RISCHI_RILEVATI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_RISCHI_RILEVATI\").createMutable()\n            cancelloRischi = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloRischi: \" + cancelloRischi\n\n        //8. CANCELLO_COSTE_SICUREZZA\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_COSTE_SICUREZZA\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_COSTE_SICUREZZA\").createMutable()\n            cancelloCoste = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloCoste: \" + cancelloCoste\n\n        //9. CANCELLO_COSTE_FUNZIONANTI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_COSTE_FUNZIONANTI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_COSTE_FUNZIONANTI\").createMutable()\n            cancelloCosteFunzionanti = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloCosteFunzionanti: \" + cancelloCosteFunzionanti\n\n        //10. CANCELLO_VALORE_IMPATTO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_FORZA_IMPATTO_NEI_LIMITI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_FORZA_IMPATTO_NEI_LIMITI\").createMutable()\n            cancelloImpatto = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloImpatto: \" + cancelloImpatto\n\n        if(cancelloUomoPresente.toString().equals(\"SI\") &amp;&amp; \n           (\n               cancelloAnticaduta.toString().equals(\"NO\") || \n               (cancelloAnticaduta.toString().equals(\"SI\") &amp;&amp; cancelloAnticadutaFunzionante.toString().equals(\"NO\")) || \n               cancelloExtracorsa.toString().equals(\"NO\") || \n               (cancelloExtracorsa.toString().equals(\"SI\") &amp;&amp; cancelloExtracorsaFunzionante.toString().equals(\"NO\")) ||\n               cancelloAltriRischi.toString().equals(\"SI\")\n           ))\n        {\n            risk = true\n        }\n\n        if(cancelloUomoPresente.toString().equals(\"NO\") &amp;&amp; \n           (\n               cancelloRischi != null || \n               cancelloCoste.toString().equals(\"NO\") ||\n               (cancelloCoste.toString().equals(\"SI\") &amp;&amp; cancelloCosteFunzionanti.toString().equals(\"NO\")) || \n               cancelloAnticaduta.toString().equals(\"NO\") || \n               (cancelloAnticaduta.toString().equals(\"SI\") &amp;&amp; cancelloAnticadutaFunzionante.toString().equals(\"NO\")) || \n               cancelloExtracorsa.toString().equals(\"NO\") || \n               (cancelloExtracorsa.toString().equals(\"SI\") &amp;&amp; cancelloExtracorsaFunzionante.toString().equals(\"NO\")) ||\n               cancelloAltriRischi.toString().equals(\"SI\") ||\n               cancelloImpatto.toString().equals(\"NO\")\n           ))\n        {\n            risk = true\n        }\n\n\n        if (risk){\n            status = \"RISK_DETECTED\"\n        }else{\n            status = \"RISK_ANALYSIS_OK\"\n        }\n        log.debug \"status: \" + status\n        def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n        def mi = (MutableIssue) issue\n\n        fieldConfig = pmstatus.getRelevantConfig(issue)\n        //log.warn \"fieldConfig: \" + fieldConfig\n        cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == status }\n\n        pmstatus.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(pmstatus), cfNewValue), new DefaultIssueChangeHolder())\n        issueIndexingService.reIndex(issue)\n\n    }\n    def barrieraUomoPresente, barrieraRischi, barrieraAltriRischi, barrieraFotocellule, barrieraFotocelluleFunzionanti, barrieraPassaggioPedonale, barrieraPassaggioPedonaleSegnalato, barrieraInversione, barrieraImpatto\n    //BARRIERE\n    if(prodType.equals(\"BARRIERE\")){\n        //1. BARRIERA_MACCHINA_UOMO_PRESENTE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_MACCHINA_UOMO_PRESENTE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_MACCHINA_UOMO_PRESENTE\").createMutable()\n            barrieraUomoPresente = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraUomoPresente: \" + barrieraUomoPresente\n\n        //2. BARRIERA_ALTRI_RISCHI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_ALTRI_RISCHI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_ALTRI_RISCHI\").createMutable()\n            barrieraAltriRischi = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraAltriRischi: \" + barrieraAltriRischi\n        \n        //3. BARRIERA_RISCHI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_RISCHI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_RISCHI\").createMutable()\n            barrieraRischi = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraRischi: \" + barrieraRischi\n        \n        //4. BARRIERA_FOTOCELLULE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_FOTOCELLULE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_FOTOCELLULE\").createMutable()\n            barrieraFotocellule = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraFotocellule: \" + barrieraFotocellule\n\n        //5. CANCELLO_ANTICADUTA_FUNZIONANTE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_FOTOCELLULE_FUNZIONANTI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_FOTOCELLULE_FUNZIONANTI\").createMutable()\n            barrieraFotocelluleFunzionanti = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraFotocelluleFunzionanti: \" + barrieraFotocelluleFunzionanti\n\n        //6. BARRIERA_PASSAGGIO_PEDONALE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_PASSAGGIO_PEDONALE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_PASSAGGIO_PEDONALE\").createMutable()\n            barrieraPassaggioPedonale = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraPassaggioPedonale: \" + barrieraPassaggioPedonale\n        \n        //7. BARRIERA_PASSAGGIO_PEDONALE_SEGREGATO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_PASSAGGIO_PEDONALE_SEGREGATO\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_PASSAGGIO_PEDONALE_SEGREGATO\").createMutable()\n            barrieraPassaggioPedonaleSegnalato = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraPassaggioPedonaleSegnalato: \" + barrieraPassaggioPedonaleSegnalato\n        \n        //8. BARRIERA_INVERSIONE_SU_OSTACOLO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_INVERSIONE_SU_OSTACOLO\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_INVERSIONE_SU_OSTACOLO\").createMutable()\n            barrieraInversione = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraInversione: \" + barrieraInversione\n        \n        //9. BARRIERA_VALORE_IMPATTO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_VALORE_IMPATTO\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_VALORE_IMPATTO\").createMutable()\n            barrieraImpatto = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraImpatto: \" + barrieraImpatto\n\n        if(barrieraUomoPresente.toString().equals(\"SI\") &amp;&amp; barrieraAltriRischi.toString().equals(\"SI\"))\n        {\n            risk = true\n        }\n\n        if(barrieraUomoPresente.toString().equals(\"NO\") &amp;&amp; \n           (\n               barrieraRischi != null || \n               barrieraFotocellule.toString().equals(\"NO\") ||\n               (barrieraFotocellule.toString().equals(\"SI\") &amp;&amp; barrieraFotocelluleFunzionanti.toString().equals(\"NO\")) || \n               barrieraPassaggioPedonale.toString().equals(\"NO\") || \n               (barrieraPassaggioPedonale.toString().equals(\"SI\") &amp;&amp; barrieraPassaggioPedonaleSegnalato.toString().equals(\"NO\")) || \n               barrieraInversione.toString().equals(\"NO\") || \n               barrieraAltriRischi.toString().equals(\"SI\") ||\n               barrieraImpatto.toString().equals(\"NO\")\n           ))\n        {\n            risk = true\n        }\n\n\n        if (risk){\n            status = \"RISK_DETECTED\"\n        }else{\n            status = \"RISK_ANALYSIS_OK\"\n        }\n        log.debug \"status: \" + status\n        def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n        def mi = (MutableIssue) issue\n\n        fieldConfig = pmstatus.getRelevantConfig(issue)\n        //log.warn \"fieldConfig: \" + fieldConfig\n        cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == status }\n\n        pmstatus.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(pmstatus), cfNewValue), new DefaultIssueChangeHolder())\n        issueIndexingService.reIndex(issue)\n    }\n    \n    if(tobeStopped){\n        fieldConfig = pmStopAsset.getRelevantConfig(issue)\n        //log.warn \"fieldConfig: \" + fieldConfig\n        cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"YES\" }\n\n        pmStopAsset.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(pmStopAsset), cfNewValue), new DefaultIssueChangeHolder())\n        issueIndexingService.reIndex(issue)\n    }else{\n        fieldConfig = pmStopAsset.getRelevantConfig(issue)\n        //log.warn \"fieldConfig: \" + fieldConfig\n        cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"NO\" }\n\n        pmStopAsset.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(pmStopAsset), cfNewValue), new DefaultIssueChangeHolder())\n        issueIndexingService.reIndex(issue)\n    }\n\n}","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">1124ddc0-cc6a-4547-83f0-1f4955ae1cac</arg>
                  <arg name="FIELD_NOTES">Check and fill in OP_PM_ASSET_RESULT</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport com.atlassian.jira.issue.IssueManager\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.atlassian.jira.issue.MutableIssue\nimport groovy.json.JsonSlurper;\nimport java.util.Map;\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-226186\")\n\ndef risk = false\ndef check = false\ndef completed = true\ndef not_completed = 0\n\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\ndef pmstatus = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_PM_ASSET_RESULT\")[0]\n\ndef requestMethod = \"GET\"\ndef baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/AA/ticket/\"+ issue +\"/getRiskDetected\"\n\nlog.debug baseURL\nURL url = new URL(baseURL)\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.connect();\n\ndef output = new ArrayList()\ndef eList = new ArrayList()\ndef eListErrors = new ArrayList()\ndef errorMsgs = new ArrayList()\nlog.debug \"url: \" + url\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n    log.debug \"ErrorStream: \" + connection.getErrorStream().toString()\n    log.debug \"getHeaderFields(): \" + connection.getHeaderFields()\n    def outputMsg = ((HttpURLConnection)connection).errorStream.text\n    log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n    def jsonSlurper = new JsonSlurper()\n    def json_object = jsonSlurper.parseText(outputMsg)\n    assert json_object instanceof Map  \n    log.debug \"message: \" +  json_object.message\n\n    eListErrors.add(\"E\")\n    eListErrors.add(\"OP-SET-PM-RESULTS\")\n    errorMsgs.add(connection.getResponseCode() + \" \" + json_object.message)\n    eListErrors.add(errorMsgs)\n    eList.add(eListErrors)\n\n    output.add(eList)\n    throw new InvalidInputException(\"E\", output.toString())\n}\n\ndef status\ndef jsonSlurper = new JsonSlurper()\ndef json_object_resp = jsonSlurper.parse(connection.getInputStream())\n\nrisk = ((Map&lt;String,String&gt;)json_object_resp).get(\"DANGEROUS\");\nif (risk == \"true\"){\n    log.debug \"Risk value:\" + risk\n    status = \"RISK_DETECTED\"\n}else{\n    completed = ((Map&lt;String,String&gt;)json_object_resp).get(\"COMPLETED\");\n    log.debug \"Completed value:\" + completed\n    if(completed == \"false\"){\n        status = \"MAINTENANCE_KO\"\n    }else{\n        status = \"MAINTENANCE_OK\"\n    }\n}\n\ndef currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\ndef mi = (MutableIssue) issue\n\ndef fieldConfig = pmstatus.getRelevantConfig(issue)\n//log.warn \"fieldConfig: \" + fieldConfig\ndef cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == status }\n\npmstatus.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(pmstatus), cfNewValue), new DefaultIssueChangeHolder())\nissueIndexingService.reIndex(issue)    ","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_COPY_ORGANIZATIONS" />
                  <arg name="FIELD_COPY_SUBTASKS" />
                  <arg name="FIELD_NOTES">FSM: create new Repair if chargable spares have been added</arg>
                  <arg name="FIELD_COPY_COMMENTS" />
                  <arg name="FIELD_COPY_FIELDS">COPY_CUSTOM_FIELDS</arg>
                  <arg name="FIELD_LINK_TYPE">10801</arg>
                  <arg name="FIELD_FUNCTION_ID">48439710-eeb7-4e16-8b91-724f16735dd3</arg>
                  <arg name="FIELD_TARGET_ISSUE_TYPE">13001</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CloneIssue</arg>
                  <arg name="FIELD_USER_KEY" />
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CloneIssue</arg>
                  <arg name="FIELD_CONDITION">{"script":"import com.atlassian.jira.issue.Issue\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport org.apache.log4j.Category\r\nimport groovy.json.JsonBuilder\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\nimport com.atlassian.jira.issue.IssueManager\r\nimport com.atlassian.jira.issue.ModifiedValue\r\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\r\nimport java.text.SimpleDateFormat;\r\nimport com.atlassian.jira.issue.index.IssueIndexingService\r\nimport com.atlassian.jira.issue.MutableIssue;\r\nimport com.atlassian.jira.event.type.EventDispatchOption\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\r\npropertiesFile.withInputStream {\r\n    properties.load(it)\r\n}\r\nlog.setLevel(org.apache.log4j.Level.DEBUG)\r\n\r\nIssueManager issueManager = ComponentAccessor.getIssueManager()\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-59669\")\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\"); \r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n  \r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\r\n  \r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\"); \r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n  \r\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\"); \r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\r\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \r\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\r\n\r\ndef replacedMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_REPLACED_MATERIALS\")[0]\r\ndef chargableSpares =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_PM_CHARGABLE_SPARES\")[0]\r\ndef asset =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_ASSET\")[0]\r\ndef repairLinked =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_MAINTENANCE_LINKED_ISSUE\")[0]\r\n\r\n\r\nif(issue.getCustomFieldValue(repairLinked) == null){\r\n\r\n    /*Check asset's Contract Type*/\r\n    def aName = issue.getCustomFieldValue(asset)\r\n    log.debug aName\r\n    def aKey = aName.toString().substring(aName.toString().lastIndexOf('(')+1,aName.toString().lastIndexOf(')'))\r\n    def aObject = objectFacade.loadObjectBean(aKey)\r\n    //get \"CUSTOMER_CONTRACT_REF\"\r\n    def contractId, feeContract=false\r\n    if(objectFacade.loadObjectAttributeBean(aObject.getId(), \"CUSTOMER_CONTRACT_REF\")){\r\n        obTriage = objectFacade.loadObjectAttributeBean(aObject.getId(), \"CUSTOMER_CONTRACT_REF\").createMutable()\r\n        contractId = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n\r\n        /*Load Contract and check if it is a MAINTENANCE FEE CONTRACT*/\r\n        obTriage = objectFacade.loadObjectAttributeBean(contractId, \"CONTRACT_TYPE\").createMutable()\r\n        if(obTriage.getObjectAttributeValueBeans()[0].getValue().toString().equals(\"MAINTENANCE FEE CONTRACT\")){\r\n            feeContract=true\r\n        }\r\n\r\n        log.debug contractId\r\n        log.debug feeContract\r\n\r\n        /*\r\n        If the contract linked to the asset is MAINTENANCE FEE CONTRACT\r\n        1. check for each spare in the ticket if the selected \"Replace Reason\" is one of those that make the part chargable \r\n        --&gt; if at least one part is chargable --&gt; a new repair ticket has to be created\r\n        --&gt; if no one of the selected \"Replace Reason\" makes the part chargable --&gt; \r\n        2. for each spare not chargable due to the \"Replace Reason\" check if it is included or not in the customer contract\r\n        --&gt; if at least one part is not included --&gt; a new repair ticket has to be created\r\n        --&gt; if all parts are included no ticket has to be created\r\n\r\n        If the contract linked to the asset is MAINTENANCE TICKET CONTRACT --&gt; all logged spares are chargable --&gt; a new repair ticket has to be created\r\n        */\r\n        def materials = issue.getCustomFieldValue(replacedMaterials)\r\n        def toBeCharged = false\r\n\r\n        if(feeContract){\r\n\r\n            for(m in materials){\r\n                //extract insight key and get object\r\n                m=m.toString()\r\n                def mKey = m.substring(m.lastIndexOf('(')+1,m.lastIndexOf(')'))\r\n                def mObject = objectFacade.loadObjectBean(mKey)\r\n                log.debug \"-------------------- Compoment: \" + m + \"---------------------\"\r\n                def matCode, matObj\r\n                //Get Component's MATERIAL_REF\r\n                if(objectFacade.loadObjectAttributeBean(mObject.getId(), \"MATERIAL_REF\")){\r\n                    obTriage = objectFacade.loadObjectAttributeBean(mObject.getId(), \"MATERIAL_REF\").createMutable()\r\n                    matObj = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n                    matCode = objectFacade.loadObjectAttributeBean(obTriage.getObjectAttributeValueBeans()[0].getValue(), \"MATNR\").createMutable().getObjectAttributeValueBeans()[0].getValue()\r\n                }\r\n                log.debug \"matObj: \" + matObj\r\n                log.debug \"matCode: \" + matCode\r\n                //get \"Replace Reason\" for that Technician\r\n                def obTriage\r\n                def replaceReason\r\n                if(objectFacade.loadObjectAttributeBean(mObject.getId(), \"PROBLEM_REF\")){\r\n                    obTriage = objectFacade.loadObjectAttributeBean(mObject.getId(), \"PROBLEM_REF\").createMutable()\r\n                    replaceReason = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n\r\n                    /*Check if the selected problem is one of the Exclusions selected in the contract package*/\r\n                    obTriage = objectFacade.loadObjectAttributeBean(contractId, \"PACKAGE_REF\").createMutable()\r\n                    def packageId = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n                    if(objectFacade.loadObjectAttributeBean(packageId, \"ALL_REPAIR_INCLUDED_EXCLUSIONS\")){\r\n                        obTriage = objectFacade.loadObjectAttributeBean(packageId, \"ALL_REPAIR_INCLUDED_EXCLUSIONS\").createMutable()\r\n                        /*Check if at least one exclusion has been selected*/\r\n                        if(obTriage.getObjectAttributeValueBeans().size() &gt; 0){\r\n                            for (e in obTriage.getObjectAttributeValueBeans()){\r\n                                /*Check if the selected \"Replace Reason\" is included in Contract Excpetions*/\r\n                                if(e.getValue() == replaceReason){\r\n                                    toBeCharged=true\r\n                                    log.debug \"trovato spare escluso dal contratto\"\r\n                                    break\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                    def matInContract=false, matInPackage=false\r\n                    if(toBeCharged){\r\n                        break\r\n                    }else{\r\n                        /*Check if the part is included in the contract package or in the contract - SPARES_INCLUDED / SPARES_INCLUDED*/\r\n                        if(objectFacade.loadObjectAttributeBean(contractId, \"SPARES_INCLUDED\")){\r\n                            obTriage = objectFacade.loadObjectAttributeBean(contractId, \"SPARES_INCLUDED\").createMutable()\r\n                            def spareInContract = obTriage.getObjectAttributeValueBeans()\r\n                            log.debug \"spareInContract: \" + spareInContract\r\n                            for (s in obTriage.getObjectAttributeValueBeans()){\r\n                                /*Check if the selected \"Replace Reason\" is included in Contract Excpetions*/\r\n                                if(s.getValue() == matObj){\r\n                                    matInContract = true\r\n                                    log.debug \"trovato spare incluso nel contratto\"\r\n                                    break\r\n                                }\r\n                            }\r\n                        }\r\n                        if(objectFacade.loadObjectAttributeBean(packageId, \"SPARES_INCLUDED\")){\r\n                            obTriage = objectFacade.loadObjectAttributeBean(packageId, \"SPARES_INCLUDED\").createMutable()\r\n                            def spareInPackage = obTriage.getObjectAttributeValueBeans()\r\n                            log.debug \"spareInPackage: \" + spareInPackage\r\n                            for (s in obTriage.getObjectAttributeValueBeans()){\r\n                                /*Check if the selected \"Replace Reason\" is included in Contract Excpetions*/\r\n                                if(s.getValue() == matObj){\r\n                                    matInPackage = true\r\n                                    log.debug \"trovato spare incluso nel pacchetto\"\r\n                                    break\r\n                                }\r\n                            }\r\n                        }\r\n                        if(!matInContract &amp;&amp; !matInPackage){\r\n                            log.debug \"materiale NON incluso nel contratto e nel pacchetto --&gt; da fatturare\"\r\n                            toBeCharged=true\r\n                            break\r\n                        }\r\n                        matInContract=false\r\n                        matInPackage=false\r\n                    }\r\n                    \r\n                }else{\r\n                    toBeCharged=true\r\n                    break\r\n                }\r\n\r\n            }\r\n\r\n        }else{\r\n            if(issue.getCustomFieldValue(replacedMaterials) != null){\r\n                toBeCharged=true\r\n            }\r\n        }\r\n\r\n        def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\r\n        MutableIssue mi = (MutableIssue) issue;\r\n        def fieldConfig = chargableSpares.getRelevantConfig(issue)\r\n        //log.warn \"fieldConfig: \" + fieldConfig\r\n        def cfNewValue\r\n        if(toBeCharged){\r\n            cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\r\n            log.debug \"generate repair\"\r\n            return true\r\n        }else{\r\n            cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"No\" }\r\n            log.debug \"do not generate repair\"\r\n            return false\r\n        }\r\n        mi.setCustomFieldValue(chargableSpares, cfNewValue);\r\n        ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n\r\n    }else{\r\n        log.debug issue.getCustomFieldValue(replacedMaterials)\r\n        if(issue.getCustomFieldValue(replacedMaterials) != null){\r\n            def toBeCharged=true\r\n\r\n            def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\r\n            MutableIssue mi = (MutableIssue) issue;\r\n            def fieldConfig = chargableSpares.getRelevantConfig(issue)\r\n            //log.warn \"fieldConfig: \" + fieldConfig\r\n            def cfNewValue\r\n            if(toBeCharged){\r\n                cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\r\n                log.debug \"generate repair\"\r\n                return true\r\n            }else{\r\n                cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"No\" }\r\n                log.debug \"do not generate repair\"\r\n                return false\r\n            }\r\n            mi.setCustomFieldValue(chargableSpares, cfNewValue);\r\n            ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n        }\r\n    }\r\n}","scriptPath":null,"parameters":{}}</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_TARGET_PROJECT">AAS</arg>
                  <arg name="FIELD_SELECTED_FIELDS">customfield_22607|||customfield_22602|||customfield_23237|||customfield_22600|||customfield_22822|||customfield_22629|||customfield_22814|||customfield_22601|||customfield_22813|||customfield_22613|||customfield_23203|||customfield_21909|||customfield_22700|||customfield_23918</arg>
                  <arg name="FIELD_ADDITIONAL_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport org.apache.log4j.Category\r\nimport groovy.json.JsonBuilder\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\nimport com.atlassian.jira.issue.IssueManager\r\nimport com.atlassian.jira.issue.ModifiedValue\r\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\r\nimport java.text.SimpleDateFormat;\r\nimport com.atlassian.jira.issue.index.IssueIndexingService\r\nimport com.atlassian.jira.issue.MutableIssue;\r\nimport com.atlassian.jira.event.type.EventDispatchOption\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\r\npropertiesFile.withInputStream {\r\n    properties.load(it)\r\n}\r\nlog.setLevel(org.apache.log4j.Level.DEBUG)\r\n\r\nIssueManager issueManager = ComponentAccessor.getIssueManager()\r\n\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-200655\")\r\n//Issue sourceIssue = issueManager.getIssueByKeyIgnoreCase(\"AAS-63249\")\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\"); \r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n  \r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\r\n  \r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\"); \r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n  \r\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\"); \r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\r\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \r\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\r\n\r\ndef replacedMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_REPLACED_MATERIALS\")[0]\r\ndef chargableSpares =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_PM_CHARGABLE_SPARES\")[0]\r\ndef repairIssue = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_MAINTENANCE_LINKED_ISSUE\")[0]\r\ndef techOnSite = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIANS_ONSITE\")[0]\r\ndef asset =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_ASSET\")[0]\r\n\r\ndef customFieldManager = ComponentAccessor.getCustomFieldManager()\r\n\r\n/*Check asset's Contract Type*/\r\ndef aName = sourceIssue.getCustomFieldValue(asset)\r\nlog.debug aName\r\ndef aKey = aName.toString().substring(aName.toString().lastIndexOf('(')+1,aName.toString().lastIndexOf(')'))\r\ndef aObject = objectFacade.loadObjectBean(aKey)\r\nlog.debug \"aObject: \" + objectFacade.loadObjectAttributeBean(aObject.getId(), \"CUSTOMER_CONTRACT_REF\")\r\ndef componentsToCharge = new ArrayList()\r\n\r\n//get \"CUSTOMER_CONTRACT_REF\"\r\ndef contractId, feeContract=false\r\ndef materials = sourceIssue.getCustomFieldValue(replacedMaterials)\r\ndef toBeCharged = false\r\nif(objectFacade.loadObjectAttributeBean(aObject.getId(), \"CUSTOMER_CONTRACT_REF\")){\r\n    obTriage = objectFacade.loadObjectAttributeBean(aObject.getId(), \"CUSTOMER_CONTRACT_REF\").createMutable()\r\n    contractId = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n\r\n    /*Load Contract and check if it is a MAINTENANCE FEE CONTRACT*/\r\n    obTriage = objectFacade.loadObjectAttributeBean(contractId, \"CONTRACT_TYPE\").createMutable()\r\n    if(obTriage.getObjectAttributeValueBeans()[0].getValue().toString().equals(\"MAINTENANCE FEE CONTRACT\")){\r\n        feeContract=true\r\n    }\r\n\r\n    log.debug contractId\r\n    log.debug feeContract\r\n\r\n    /*\r\n    If the contract linked to the asset is MAINTENANCE FEE CONTRACT\r\n    1. check for each spare in the ticket if the selected \"Replace Reason\" is one of those that make the part chargable \r\n    --&gt; if at least one part is chargable --&gt; a new repair ticket has to be created\r\n    --&gt; if no one of the selected \"Replace Reason\" makes the part chargable --&gt; \r\n    2. for each spare not chargable due to the \"Replace Reason\" check if it is included or not in the customer contract\r\n    --&gt; if at least one part is not included --&gt; a new repair ticket has to be created\r\n    --&gt; if all parts are included no ticket has to be created\r\n\r\n    If the contract linked to the asset is MAINTENANCE TICKET CONTRACT --&gt; all logged spares are chargable --&gt; a new repair ticket has to be created\r\n    */\r\n\r\n    if(feeContract){\r\n\r\n        for(m in materials){\r\n            //extract insight key and get object\r\n            m=m.toString()\r\n            def mKey = m.substring(m.lastIndexOf('(')+1,m.lastIndexOf(')'))\r\n            def mObject = objectFacade.loadObjectBean(mKey)\r\n            log.debug \"-------------------- Compoment: \" + m + \"---------------------\"\r\n            def matCode, matObj\r\n            def deleted = false\r\n            def disabled = false\r\n\r\n            //Get Component's DELETED flag\r\n            if(objectFacade.loadObjectAttributeBean(mObject.getId(), \"DELETED\")){\r\n                obTriage = objectFacade.loadObjectAttributeBean(mObject.getId(), \"DELETED\").createMutable()\r\n                deleted = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n            }\r\n            log.debug \"deleted: \" + deleted\r\n\r\n            //Get Component's DISABLED flag\r\n            if(objectFacade.loadObjectAttributeBean(mObject.getId(), \"DISABLED\")){\r\n                obTriage = objectFacade.loadObjectAttributeBean(mObject.getId(), \"DISABLED\").createMutable()\r\n                disabled = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n            }\r\n            log.debug \"deleted: \" + deleted\r\n            log.debug \"disabled: \" + disabled\r\n\r\n            if(!deleted &amp;&amp; !disabled){\r\n                //Get Component's MATERIAL_REF\r\n                if(objectFacade.loadObjectAttributeBean(mObject.getId(), \"MATERIAL_REF\")){\r\n                    obTriage = objectFacade.loadObjectAttributeBean(mObject.getId(), \"MATERIAL_REF\").createMutable()\r\n                    matObj = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n                    matCode = objectFacade.loadObjectAttributeBean(obTriage.getObjectAttributeValueBeans()[0].getValue(), \"MATNR\").createMutable().getObjectAttributeValueBeans()[0].getValue()\r\n                }\r\n                log.debug \"matObj: \" + matObj\r\n                log.debug \"matCode: \" + matCode\r\n\r\n                //get \"Replace Reason\" for that Technician\r\n                def obTriage\r\n                def replaceReason\r\n                if(objectFacade.loadObjectAttributeBean(mObject.getId(), \"PROBLEM_REF\")){\r\n                    obTriage = objectFacade.loadObjectAttributeBean(mObject.getId(), \"PROBLEM_REF\").createMutable()\r\n                    replaceReason = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n\r\n                    /*Check if the selected problem is one of the Exclusions selected in the contract package*/\r\n                    obTriage = objectFacade.loadObjectAttributeBean(contractId, \"PACKAGE_REF\").createMutable()\r\n                    def packageId = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n                    if(objectFacade.loadObjectAttributeBean(packageId, \"ALL_REPAIR_INCLUDED_EXCLUSIONS\")){\r\n                        obTriage = objectFacade.loadObjectAttributeBean(packageId, \"ALL_REPAIR_INCLUDED_EXCLUSIONS\").createMutable()\r\n                        /*Check if at least one exclusion has been selected*/\r\n                        if(obTriage.getObjectAttributeValueBeans().size() &gt; 0){\r\n                            for (e in obTriage.getObjectAttributeValueBeans()){\r\n                                /*Check if the selected \"Replace Reason\" is included in Contract Excpetions*/\r\n                                if(e.getValue() == replaceReason){\r\n                                    toBeCharged=true\r\n                                    log.debug \"Materiale: \" + m + \" sostituito per \" + obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n                                    componentsToCharge.add(mObject)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    \r\n                    def matInContract=false, matInPackage=false\r\n                    if(!toBeCharged){\r\n                        /*Check if the part is included in the contract package or in the contract - SPARES_INCLUDED / SPARES_INCLUDED*/\r\n                        if(objectFacade.loadObjectAttributeBean(contractId, \"SPARES_INCLUDED\")){\r\n                            obTriage = objectFacade.loadObjectAttributeBean(contractId, \"SPARES_INCLUDED\").createMutable()\r\n                            def spareInContract = obTriage.getObjectAttributeValueBeans()\r\n                            log.debug \"spareInContract: \" + spareInContract\r\n                            for (s in obTriage.getObjectAttributeValueBeans()){\r\n                                /*Check if the selected \"Replace Reason\" is included in Contract Excpetions*/\r\n                                if(s.getValue() == matObj){\r\n                                    matInContract = true\r\n                                    log.debug \"trovato spare incluso nel contratto\"\r\n                                    break\r\n                                }\r\n                            }\r\n                        }\r\n                        if(!matInContract &amp;&amp; objectFacade.loadObjectAttributeBean(packageId, \"SPARES_INCLUDED\")){\r\n                            obTriage = objectFacade.loadObjectAttributeBean(packageId, \"SPARES_INCLUDED\").createMutable()\r\n                            def spareInPackage = obTriage.getObjectAttributeValueBeans()\r\n                            log.debug \"spareInPackage: \" + spareInPackage\r\n                            for (s in obTriage.getObjectAttributeValueBeans()){\r\n                                /*Check if the selected \"Replace Reason\" is included in Contract Excpetions*/\r\n                                if(s.getValue() == matObj){\r\n                                    matInPackage = true\r\n                                    log.debug \"trovato spare incluso nel pacchetto\"\r\n                                    break\r\n                                }\r\n                            }\r\n                        }\r\n                        if(!matInContract &amp;&amp; !matInPackage){\r\n                            log.debug \"Materiale: \" + m + \" non incluso n\u00e8 nel contratto n\u00e8 nel pacchetto\"\r\n                            componentsToCharge.add(mObject)\r\n                        }\r\n                        matInContract=false\r\n                        matInPackage=false\r\n                    }\r\n                    \r\n                    toBeCharged=false                    \r\n                    \r\n                }                \r\n            }\r\n        }\r\n    }else{\r\n        /*07.03.2023 AF - se il contratto non \u00e8 a pacchetto --&gt; tutti i materiali sono da fatturare */\r\n        for(m in materials){\r\n            //extract insight key and get object\r\n            m=m.toString()\r\n            def mKey = m.substring(m.lastIndexOf('(')+1,m.lastIndexOf(')'))\r\n            def mObject = objectFacade.loadObjectBean(mKey)\r\n            log.debug \"-------------------- Compoment: \" + m + \"---------------------\"\r\n            def matCode, matObj\r\n            def deleted = false\r\n            def disabled = false\r\n\r\n            //Get Component's DELETED flag\r\n            if(objectFacade.loadObjectAttributeBean(mObject.getId(), \"DELETED\")){\r\n                obTriage = objectFacade.loadObjectAttributeBean(mObject.getId(), \"DELETED\").createMutable()\r\n                deleted = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n            }\r\n            log.debug \"deleted: \" + deleted\r\n\r\n            //Get Component's DISABLED flag\r\n            if(objectFacade.loadObjectAttributeBean(mObject.getId(), \"DISABLED\")){\r\n                obTriage = objectFacade.loadObjectAttributeBean(mObject.getId(), \"DISABLED\").createMutable()\r\n                disabled = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n            }\r\n            log.debug \"deleted: \" + deleted\r\n            log.debug \"disabled: \" + disabled\r\n\r\n            if(!deleted &amp;&amp; !disabled){\r\n                //Get Component's MATERIAL_REF\r\n                if(objectFacade.loadObjectAttributeBean(mObject.getId(), \"MATERIAL_REF\")){\r\n                    obTriage = objectFacade.loadObjectAttributeBean(mObject.getId(), \"MATERIAL_REF\").createMutable()\r\n                    matObj = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n                    matCode = objectFacade.loadObjectAttributeBean(obTriage.getObjectAttributeValueBeans()[0].getValue(), \"MATNR\").createMutable().getObjectAttributeValueBeans()[0].getValue()\r\n                }\r\n                log.debug \"matObj: \" + matObj\r\n                log.debug \"matCode: \" + matCode\r\n\r\n                componentsToCharge.add(mObject)\r\n            }\r\n        }        \r\n    }\r\n    log.debug \"IN POST - END CHECK\"\r\n    log.debug \"componentsToCharge: \" + componentsToCharge\r\n    //Update OP_REPLACED_MATERIALS setting only the ones included in componentsToCharge.add(mObject.getId())\r\n\r\n    if (!componentsToCharge.isEmpty()) {\r\n        log.debug \"update replaced materials \" + componentsToCharge\r\n        def cf = customFieldManager.getCustomFieldObjects(issue).find {it.name == 'OP_REPLACED_MATERIALS'}\r\n        issue.setCustomFieldValue(cf, componentsToCharge)\r\n    }\r\n}else{\r\n    /*AF 27.02.2023 se l'impianto NON ha + contratto (caso anomalo ma possibile se viene rimossa l'associazione contratto dopo la generazione del ticket PM) tutti i componenti sono chargable */\r\n    for(m in materials){\r\n        //extract insight key and get object\r\n        m=m.toString()\r\n        def mKey = m.substring(m.lastIndexOf('(')+1,m.lastIndexOf(')'))\r\n        def mObject = objectFacade.loadObjectBean(mKey)\r\n        log.debug \"-------------------- Compoment: \" + m + \"---------------------\"\r\n        def matCode, matObj\r\n        def deleted = false\r\n        def disabled = false\r\n\r\n        //Get Component's DELETED flag\r\n        if(objectFacade.loadObjectAttributeBean(mObject.getId(), \"DELETED\")){\r\n            obTriage = objectFacade.loadObjectAttributeBean(mObject.getId(), \"DELETED\").createMutable()\r\n            deleted = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n        }\r\n        log.debug \"deleted: \" + deleted\r\n\r\n        //Get Component's DISABLED flag\r\n        if(objectFacade.loadObjectAttributeBean(mObject.getId(), \"DISABLED\")){\r\n            obTriage = objectFacade.loadObjectAttributeBean(mObject.getId(), \"DISABLED\").createMutable()\r\n            disabled = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n        }\r\n        log.debug \"deleted: \" + deleted\r\n        log.debug \"disabled: \" + disabled\r\n\r\n        if(!deleted &amp;&amp; !disabled){\r\n            //Get Component's MATERIAL_REF\r\n            if(objectFacade.loadObjectAttributeBean(mObject.getId(), \"MATERIAL_REF\")){\r\n                obTriage = objectFacade.loadObjectAttributeBean(mObject.getId(), \"MATERIAL_REF\").createMutable()\r\n                matObj = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n                matCode = objectFacade.loadObjectAttributeBean(obTriage.getObjectAttributeValueBeans()[0].getValue(), \"MATNR\").createMutable().getObjectAttributeValueBeans()[0].getValue()\r\n            }\r\n            log.debug \"matObj: \" + matObj\r\n            log.debug \"matCode: \" + matCode\r\n            \r\n            toBeCharged=true\r\n            log.debug \"Materiale: \" + m + \" sostituito per \" + obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n            componentsToCharge.add(mObject)\r\n        }\r\n    }\r\n\r\n    log.debug \"--- NO CONTRACT ---\"\r\n    log.debug \"componentsToCharge: \" + componentsToCharge\r\n    //Update OP_REPLACED_MATERIALS setting only the ones included in componentsToCharge.add(mObject.getId())\r\n\r\n    if (!componentsToCharge.isEmpty()) {\r\n        log.debug \"update replaced materials (\" + issue.key + \")\" + componentsToCharge\r\n        def cf = customFieldManager.getCustomFieldObjects(issue).find {it.name == 'OP_REPLACED_MATERIALS'}\r\n        issue.setCustomFieldValue(cf, componentsToCharge)\r\n    }\r\n}\r\n\r\nissue.summary = \"Maintenance Ticket\"\r\ndef cfReporter = customFieldManager.getCustomFieldObjects(issue).find {it.name == 'OP_REPORTER'}\r\nissue.setCustomFieldValue(cfReporter, sourceIssue.getCustomFieldValue(cfReporter))\r\n\r\n/*AF 07.02.2023 - se il PM Task \u00e8 eseguito da un utente di backoffice non si creano gli oggetti da referenziare nei campi OP_TECHNICIANS_ONSITE e *TRACE / *TRACE_WORK - In questo caso l'unico riferimento ai tempi di esecuzione del ticekt (nel suo insieme) \r\n\u00e8 l'oggetto compilato manualmente dal backoffice nel campo OP_TECHNICIANS_ONSITE del PM Ticket padre - l'utente che contabilizza il ticket deve essere consapevole che i tempi tracciati sul ticket di Repair eventualmente scatenato dai materiali sostituiti\r\nconterr\u00e0 un tempo di mdo pari al tempo totale tracciato sul PM Tickeet - nel caso in cui vada contabilizzata una mdo inferiore va modificata la quantit\u00e0 della tariffa di mdo applicata in fase di chiusura del ticket*/\r\nif(issue.getCustomFieldValue(techOnSite) == null){\r\n    issue.setCustomFieldValue(techOnSite, sourceIssue.getParentObject().getCustomFieldValue(techOnSite))  \r\n}\r\n\r\ndef cfGeneratedFromPM = customFieldManager.getCustomFieldObjects(issue).find {it.name == 'OP_TKT_GENERATED_FROM_PM'}\r\ndef cfNewValue\r\ndef fieldConfig = cfGeneratedFromPM.getRelevantConfig(issue)\r\ncfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\r\nissue.setCustomFieldValue(cfGeneratedFromPM, cfNewValue)\r\n\r\ndef pmIssueField = customFieldManager.getCustomFieldObjects(issue).find {it.name == 'OP_PM_LINKED_ISSUE'}\r\ndef offerFromRepair =  customFieldManager.getCustomFieldObjects(issue).find {it.name == 'OP_TKT_GENERATED_FROM_PM'}\r\n\r\nfieldConfig = offerFromRepair.getRelevantConfig(issue)\r\ncfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\r\nissue.setCustomFieldValue(pmIssueField, sourceIssue.key.toString())\r\nissue.setCustomFieldValue(offerFromRepair, cfNewValue)\r\n\r\ndef executionDate = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_EXECUTION_DATE\")[0]\r\n\r\nif(issue.getCustomFieldValue(replacedMaterials)!=null &amp;&amp; (String)issue.getCustomFieldValue(replacedMaterials) != \"\" &amp;&amp; !issue.getCustomFieldValue(replacedMaterials).toString().equals(\"\")){\r\n    /*Ciclare tutti gli oggetti associati al campo*/\r\n    //insight classes &amp; components\r\n    Date replacedOn\r\n    materials = issue.getCustomFieldValue(replacedMaterials)\r\n    for(m in materials){\r\n        //extract insight key ang get object\r\n        def mat=m.toString()\r\n        def matKey = mat.substring(mat.lastIndexOf('(')+1,mat.lastIndexOf(')'))\r\n        def matObj = objectFacade.loadObjectBean(matKey)\r\n        def obTriage\r\n        \r\n        if(objectFacade.loadObjectAttributeBean(matObj.getId(), \"INSTALLATION_DATE\")){\r\n            obTriage = objectFacade.loadObjectAttributeBean(matObj.getId(), \"INSTALLATION_DATE\").createMutable()\r\n            replacedOn = (Date) obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n        }        \r\n    }    \r\n    issue.setCustomFieldValue(executionDate, replacedOn.toTimestamp())\r\n}","scriptPath":null,"parameters":{}}</arg>
                  <arg name="events" />
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">f4557d40-9640-47ad-ad04-1972ca6b2217</arg>
                  <arg name="FIELD_NOTES">OP: Update status on just created Repair issue</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.issue.IssueManager\r\nimport org.apache.log4j.Category\r\nimport groovy.json.JsonBuilder\r\nimport groovy.json.JsonSlurper\r\nimport groovy.json.StreamingJsonBuilder\r\nimport com.atlassian.jira.config.util.JiraHome\r\nimport com.atlassian.jira.issue.MutableIssue\r\nimport com.atlassian.jira.event.type.EventDispatchOption\r\nimport java.text.SimpleDateFormat\r\nimport java.text.ParseException\r\nimport com.atlassian.jira.config.properties.APKeys\r\nimport com.atlassian.jira.issue.link.LinkCollectionImpl;\r\nimport com.atlassian.jira.issue.link.IssueLink;\r\nimport com.atlassian.jira.issue.ModifiedValue\r\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\r\nimport com.atlassian.jira.issue.index.IssueIndexingService\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\nimport java.sql.Timestamp\r\n\r\nProperties properties = new Properties()\r\nlog.debug \"Percorso properties: \" + ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay()\r\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\n\r\nlog.setLevel(org.apache.log4j.Level.DEBUG)\r\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\r\n\r\n/*Script Variables*/\r\n//Per Post Function\r\nissue = issue\r\n//Per test da console\r\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\r\n//issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-257\")\r\nlog.debug \"Issue: \" + issue\r\ndef found=false\r\ndef linkedIssue\r\ndef issueService = ComponentAccessor.getIssueService()\r\n\r\ndef offerFromRepair =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_GENERATED_FROM_PM\")[0]\r\n\r\ndef currentUserTransition =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENT_USER_GENERATE_REPAIR_QUOTE\")[0]\r\n\r\nList&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId());\r\nlog.debug \"allInIssueLink: \" + allInIssueLink\r\nfor (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\r\n    IssueLink issueLink = (IssueLink) outIterator.next();\r\n    def linkedIssueTemp = issueLink.getSourceObject()\r\n    String type = linkedIssueTemp.getIssueType().getName();\r\n\r\n    log.debug(issueLink.issueLinkType.getName()) \r\n    \r\n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsDefect'].toString())){\r\n        linkedIssue=linkedIssueTemp\r\n        log.debug \"linked issue: \" + linkedIssue\r\n        //log.debug \"linked issue status: \" + linkedIssue.getStatusObject().name\r\n        if(linkedIssue.getStatusObject().name == properties['wf.open'].toString()){\r\n            found=true\r\n        }\r\n    }\r\n}\r\n\r\nList&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId());\r\nlog.debug \"allOutIssueLink: \" + allOutIssueLink\r\nfor (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\r\n    IssueLink issueLink = (IssueLink) outIterator.next();\r\n    def linkedIssueTemp = issueLink.getDestinationObject()\r\n    String type = linkedIssueTemp.getIssueType().getName();\r\n\r\n    log.debug(issueLink.issueLinkType.getName()) \r\n    \r\n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsDefect'].toString())){\r\n        linkedIssue=linkedIssueTemp\r\n        log.debug \"linked issue: \" + linkedIssue\r\n        //log.debug \"linked issue status: \" + linkedIssue.getStatusObject().name\r\n        if(linkedIssue.getStatusObject().name == properties['wf.open'].toString()){\r\n            found=true\r\n        }\r\n    }\r\n}\r\n//log.debug \"found: \" + found\r\n\r\nif(found){\r\n\tdef destStatusObject = linkedIssue.getStatusObject()\r\n    //log.debug \"destStatusObject: \" + destStatusObject\r\n    //log.debug \"linkedIssue: \" + linkedIssue\r\n    def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\r\n\t// Is the status of the linked issue \"Installing\" ?\r\n    \r\n    def customFieldManager = ComponentAccessor.customFieldManager\r\n    def maintenanceIssueField = customFieldManager.getCustomFieldObjectsByName(properties['cf.maintenanceLinkedIssue'] ? properties['cf.maintenanceLinkedIssue'].toString() : \"OP_MAINTENANCE_LINKED_ISSUE\").first()\r\n    \r\n    def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\r\n    def mi = (MutableIssue) linkedIssue\r\n   \r\n    maintenanceIssueField.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(maintenanceIssueField), linkedIssue.key.toString()), new DefaultIssueChangeHolder())\r\n    \r\n    if (destStatusObject.name == properties['wf.open'].toString()) {\r\n        // Prepare our input for the transition\r\n        def issueInputParameters = issueService.newIssueInputParameters()\r\n        issueInputParameters.with {\r\n            setSkipScreenCheck(true)\r\n        }\r\n        // Validate transitioning the linked issue to \"Signs Needed\"\r\n        def validationResult = issueService.validateTransition(user, linkedIssue.id, 831, issueInputParameters)\r\n        if (validationResult.isValid()) {\r\n            // Perform the transition\r\n            def issueResult = issueService.transition(user, validationResult)\r\n            if (! issueResult.isValid()) {\r\n                log.debug(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\r\n            }else{\r\n                log.debug(\"Transazione fatta\")\r\n            }\r\n        } else {\r\n            log.debug(\"Could not transition task ${linkedIssue.key}, errors: ${validationResult.errorCollection}\")\r\n        }\r\n    }\r\n    \r\n}","scriptPath":null}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">de214eee-f1d5-4b5e-9d94-e4aed63a38e7</arg>
                  <arg name="FIELD_NOTES">Clear cache</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\r\nimport groovy.json.StreamingJsonBuilder;\r\nimport com.atlassian.jira.issue.CustomFieldManager;\r\nimport com.atlassian.jira.issue.fields.CustomField;\r\nimport com.atlassian.jira.issue.IssueManager;\r\nimport com.atlassian.jira.component.ComponentAccessor;\r\nimport com.atlassian.jira.issue.Issue;\r\nimport com.atlassian.jira.issue.MutableIssue\r\nimport org.apache.commons.codec.binary.Base64;\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport org.apache.log4j.Category\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\nlog.setLevel(org.apache.log4j.Level.DEBUG)\r\n\r\nIssueManager issueManager = ComponentAccessor.getIssueManager();\r\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\r\ndef requestMethod\r\ndef baseURL\r\n\r\n/* REST API per Generazione Allegato Rapporto di Intervento */\r\nrequestMethod = \"POST\";\r\n/*Script Variables*/\r\n//Per test da console\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-14062\")\r\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/clearCache/dataObject\"\r\ndef body_req = []\r\nURL url = new URL(baseURL)\r\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\r\nconnection.setRequestMethod(requestMethod);\r\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\nconnection.setRequestProperty(\"Accept\", \"*/*\");\r\nconnection.setDoOutput(true);\r\nconnection.setDoInput(true);\r\nconnection.outputStream\r\nlog.debug \"body_req: \" + body_req\r\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\r\nlog.debug connection.outputStream\r\nconnection.connect();\r\n\r\nif (!connection.getResponseCode().toString().equals(\"200\")){\r\n    log.debug \"url: \" + url\r\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\r\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\r\n}","scriptPath":null}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="диюбwbХ*'">¶»ž</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue" />
                  <arg name="ºè">5a3e276c-208b-4dd3-b234-0ee4c8543081</arg>
                  <arg name="fieldValue" />
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">customfield_22657</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="targetIssueTypeDefinedByCfSelection" />
                  <arg name="ºè">ede3c31a-1c8e-406b-bb01-6cfb4159d0f1</arg>
                  <arg name="issueTypeId">13001</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.43.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">H</arg>
                  <arg name="maxAllowed-integerValue" />
                  <arg name="transitionAttachmentsOperation">rr</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="╡крz╙ыв7Ь╡'еy╦^t+м╢ЙЕЙщ]" />
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">11100:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId">customfield_22609</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="²æÅºw-ì">[{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22609","destinationFieldId":"customfield_22658"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22600","destinationFieldId":"customfield_22600"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22822","destinationFieldId":"customfield_22822"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22601","destinationFieldId":"customfield_22601"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22602","destinationFieldId":"customfield_22602"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22813","destinationFieldId":"customfield_22813"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23235","destinationFieldId":"customfield_23235"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22651","destinationFieldId":"customfield_22651"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22700","destinationFieldId":"customfield_22700"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22607","destinationFieldId":"customfield_22607"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"priority","destinationFieldId":"priority"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23203","destinationFieldId":"customfield_23203"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23237","destinationFieldId":"customfield_23237"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_21909","destinationFieldId":"customfield_21909"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"Yes","destinationFieldId":"customfield_22681"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23401","destinationFieldId":"customfield_21908"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"Maintenance Ticket","destinationFieldId":"summary"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"Yes","destinationFieldId":"customfield_23409"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22649","destinationFieldId":"customfield_22629"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23607","destinationFieldId":"customfield_23607"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23906","destinationFieldId":"customfield_23906"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23907","destinationFieldId":"customfield_23907"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23908","destinationFieldId":"customfield_23908"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23909","destinationFieldId":"customfield_23909"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22689","destinationFieldId":"customfield_22689"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22691","destinationFieldId":"customfield_22691"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22690","destinationFieldId":"customfield_22690"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"Yes","destinationFieldId":"customfield_23409"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"Maintenance Ticket","destinationFieldId":"summary"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23401","destinationFieldId":"customfield_23237"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"REPAIR_ENABLED","destinationFieldId":"customfield_22814"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22614","destinationFieldId":"customfield_22614"}}]</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">22601</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">71a4764e-ec7c-4759-97f5-5775b6c349ed</arg>
                  <arg name="FIELD_NOTES">OP: Update status on just created Repair Quotation issue</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport com.atlassian.jira.issue.IssueManager\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport groovy.json.JsonSlurper\nimport groovy.json.StreamingJsonBuilder\nimport com.atlassian.jira.config.util.JiraHome\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport java.text.SimpleDateFormat\nimport java.text.ParseException\nimport com.atlassian.jira.config.properties.APKeys\nimport com.atlassian.jira.issue.link.LinkCollectionImpl;\nimport com.atlassian.jira.issue.link.IssueLink;\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nlog.debug \"Percorso properties: \" + ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\n\n/*Script Variables*/\n//Per Post Function\nissue = issue\n//Per test da console\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\n//issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-257\")\nlog.debug \"Issue: \" + issue\ndef found=false\ndef linkedIssue\ndef issueService = ComponentAccessor.getIssueService()\ndef groupManager = ComponentAccessor.getGroupManager()\ndef userManager = ComponentAccessor.getUserManager()\ndef offerFromRepair =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_GENERATED_FROM_PM\")[0]\ndef currentUserTransition =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENT_USER_GENERATE_REPAIR_QUOTE\")[0]\ndef transitionCheck = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CHECK_AND_CONFIRM\")[0]\nString supplierAdm = \"OPROLE_AA_SUPPLIER_ADM\"\nString supplierTech = \"OPROLE_AA_SUPPLIER_TECH\"\nList&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId());\nlog.debug \"allOutIssueLink: \" + allOutIssueLink\nfor (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n    def linkedIssueTemp = issueLink.getDestinationObject()\n    String type = linkedIssueTemp.getIssueType().getName();\n\n    log.debug(issueLink.issueLinkType.getName()) \n    \n    if( issueLink.getDestinationObject() != null &amp;&amp; issueLink.getDestinationObject().getIssueType().getName().toString().equals(\"Maintenance Ticket\") &amp;&amp; issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsProblem'].toString())){\n        linkedIssue=linkedIssueTemp\n        log.debug \"linked issue: \" + linkedIssue\n        //log.debug \"linked issue status: \" + linkedIssue.getStatusObject().name\n        if(linkedIssue.getStatusObject().name == properties['wf.open'].toString()){\n            found=true\n        }\n    }\n}\n\nList&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId());\nlog.debug \"allInIssueLink: \" + allInIssueLink\nfor (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n    def linkedIssueTemp = issueLink.getSourceObject()\n    String type = linkedIssueTemp.getIssueType().getName();\n\n    log.debug(issueLink.issueLinkType.getName()) \n    \n    if(issueLink.getSourceObject() != null &amp;&amp; issueLink.getSourceObject().getIssueType().getName().toString().equals(\"Maintenance Ticket\") &amp;&amp; issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsProblem'].toString())){\n        linkedIssue=linkedIssueTemp\n        log.debug \"linked issue: \" + linkedIssue\n        //log.debug \"linked issue status: \" + linkedIssue.getStatusObject().name\n        if(linkedIssue.getStatusObject().name == properties['wf.open'].toString()){\n            found=true\n        }\n    }\n}\n//log.debug \"found: \" + found\n\nif(found){\n\tdef destStatusObject = linkedIssue.getStatusObject()\n    //log.debug \"destStatusObject: \" + destStatusObject\n    //log.debug \"linkedIssue: \" + linkedIssue\n    def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n\t// Is the status of the linked issue \"Installing\" ?\n    \n    def customFieldManager = ComponentAccessor.customFieldManager\n    def pmIssueField = customFieldManager.getCustomFieldObjectsByName(\"OP_PM_LINKED_ISSUE\").first()\n    def offerIssueField = customFieldManager.getCustomFieldObjectsByName(\"OP_OFFER_LINKED_ISSUE\").first()\n    def offerIssueBoolField = customFieldManager.getCustomFieldObjectsByName(properties['cf.offerTkt'].toString()).first()\n    \n    //Set OPAA_OFFER_TKT=Yes on just created linkedIssue\n    def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n    def mi = (MutableIssue) linkedIssue\n\n    def fieldConfig = offerFromRepair.getRelevantConfig(linkedIssue)\n    //log.warn \"fieldConfig: \" + fieldConfig\n    def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n    log.debug \"transition field value: \" + issue.getCustomFieldValue(currentUserTransition)\n    //log.debug \"currentUserTransition: \" + currentUserTransition\n    pmIssueField.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(pmIssueField), issue.key.toString()), new DefaultIssueChangeHolder())\n    offerFromRepair.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(offerIssueBoolField), cfNewValue), new DefaultIssueChangeHolder())\n    \n\n    fieldConfig = offerIssueBoolField.getRelevantConfig(linkedIssue)\n    //log.warn \"fieldConfig: \" + fieldConfig\n    cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n    offerIssueBoolField.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(offerIssueBoolField), cfNewValue), new DefaultIssueChangeHolder())\n    \n    def userTransition = userManager.getUserByName(issue.getCustomFieldValue(currentUserTransition).toString())\n\tlog.debug \"userTransition: \" + userTransition\n    if (userTransition != null &amp;&amp; (groupManager.getUsersInGroup(supplierAdm).contains(userTransition) || groupManager.getUsersInGroup(supplierTech).contains(userTransition))) {\n        // Transition executed by external user --&gt; to be added also internal techs role groups\n        // Email has not to be sent\n        // SN will be created as soon as the quotation has been confirmed - to be checked when to create SN if no quotation from supplier is needed - when the quotation has been sent to the customer?\n        log.debug \"in utente supplier\"\n        transitionCheck.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(transitionCheck), cfNewValue), new DefaultIssueChangeHolder())\n        offerFromRepair.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(offerFromRepair), cfNewValue), new DefaultIssueChangeHolder())\n\t}\n    \n    ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n    issueIndexingService.reIndex(linkedIssue)    \n    \n    offerIssueField.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(offerIssueField), linkedIssue.key.toString()), new DefaultIssueChangeHolder())\n    \n    if (destStatusObject.name == properties['wf.open'].toString()) {\n        // Prepare our input for the transition\n        def issueInputParameters = issueService.newIssueInputParameters()\n        issueInputParameters.with {\n            setSkipScreenCheck(true)\n        }\n        // Validate transitioning the linked issue to \"Signs Needed\"\n        def validationResult = issueService.validateTransition(user, linkedIssue.id, (properties['wf.tr.askQuote'] ? properties['wf.tr.askQuote'].toInteger() : 11), issueInputParameters)\n        if (validationResult.isValid()) {\n            // Perform the transition\n            def issueResult = issueService.transition(user, validationResult)\n            if (! issueResult.isValid()) {\n                log.debug(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n            }else{\n                log.debug(\"Transazione fatta\")\n            }\n        } else {\n            log.debug(\"Could not transition task ${linkedIssue.key}, errors: ${validationResult.errorCollection}\")\n        }\n    }\n    \n}","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">00edbe12-4a7a-49dc-b5c0-c3f556043537</arg>
                  <arg name="FIELD_NOTES">Clear cache</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\n\n/* REST API per Generazione Allegato Rapporto di Intervento */\nrequestMethod = \"POST\";\n/*Script Variables*/\n//Per test da console\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-14062\")\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/clearCache/dataObject\"\ndef body_req = []\nURL url = new URL(baseURL)\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.outputStream\nlog.debug \"body_req: \" + body_req\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\nlog.debug connection.outputStream\nconnection.connect();\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n}","scriptPath":null}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="диюбwbХ*'">¶»ž</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue" />
                  <arg name="ºè">5a3e276c-208b-4dd3-b234-0ee4c8543081</arg>
                  <arg name="fieldValue" />
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">customfield_23922</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="targetIssueTypeDefinedByCfSelection" />
                  <arg name="ºè">ede3c31a-1c8e-406b-bb01-6cfb4159d0f1</arg>
                  <arg name="issueTypeId">13401</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">H</arg>
                  <arg name="maxAllowed-integerValue" />
                  <arg name="transitionAttachmentsOperation">rr</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="╡крz╙ыв7Ь╡'еy╦^t+м╢ЙЕЙщ]" />
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">11100:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId">customfield_23923</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="²æÅºw-ì">[{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23923","destinationFieldId":"customfield_22658"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22600","destinationFieldId":"customfield_22600"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22822","destinationFieldId":"customfield_22822"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22601","destinationFieldId":"customfield_22601"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22602","destinationFieldId":"customfield_22602"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22813","destinationFieldId":"customfield_22813"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23235","destinationFieldId":"customfield_23235"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22651","destinationFieldId":"customfield_22651"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22700","destinationFieldId":"customfield_22700"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22607","destinationFieldId":"customfield_22607"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"priority","destinationFieldId":"priority"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22814","destinationFieldId":"customfield_22814"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23203","destinationFieldId":"customfield_23203"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23237","destinationFieldId":"customfield_23237"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_21909","destinationFieldId":"customfield_21909"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"issuekey","destinationFieldId":"customfield_22629"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"Yes","destinationFieldId":"customfield_22681"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23401","destinationFieldId":"customfield_21908"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"Maintenance Ticket","destinationFieldId":"summary"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"Yes","destinationFieldId":"customfield_23409"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22649","destinationFieldId":"customfield_22629"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23237","destinationFieldId":"customfield_23401"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23607","destinationFieldId":"customfield_23607"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23237","destinationFieldId":"customfield_21908"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23906","destinationFieldId":"customfield_23906"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23907","destinationFieldId":"customfield_23907"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23908","destinationFieldId":"customfield_23908"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23909","destinationFieldId":"customfield_23909"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22689","destinationFieldId":"customfield_22689"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22691","destinationFieldId":"customfield_22691"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22690","destinationFieldId":"customfield_22690"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"Yes","destinationFieldId":"customfield_23409"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"Maintenance Ticket","destinationFieldId":"summary"}}]</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">71a4764e-ec7c-4759-97f5-5775b6c349ed</arg>
                  <arg name="FIELD_NOTES">OP: Update status on just created Repair Quotation issue</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport com.atlassian.jira.issue.IssueManager\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport groovy.json.JsonSlurper\nimport groovy.json.StreamingJsonBuilder\nimport com.atlassian.jira.config.util.JiraHome\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport java.text.SimpleDateFormat\nimport java.text.ParseException\nimport com.atlassian.jira.config.properties.APKeys\nimport com.atlassian.jira.issue.link.LinkCollectionImpl;\nimport com.atlassian.jira.issue.link.IssueLink;\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nlog.debug \"Percorso properties: \" + ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\n\n/*Script Variables*/\n//Per Post Function\nissue = issue\n//Per test da console\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\n//issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-257\")\nlog.debug \"Issue: \" + issue\ndef found=false\ndef linkedIssue\ndef issueService = ComponentAccessor.getIssueService()\ndef groupManager = ComponentAccessor.getGroupManager()\ndef userManager = ComponentAccessor.getUserManager()\ndef offerFromRepair =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_GENERATED_FROM_PM\")[0]\n\ndef currentUserTransition =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENT_USER_GENERATE_REPAIR_QUOTE\")[0]\ndef transitionCheck = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CHECK_AND_CONFIRM\")[0]\nString supplierAdm = \"OPROLE_AA_SUPPLIER_ADM\"\nString supplierTech = \"OPROLE_AA_SUPPLIER_TECH\"\n\nList&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId());\nlog.debug \"allOutIssueLink: \" + allOutIssueLink\nfor (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n    def linkedIssueTemp = issueLink.getDestinationObject()\n    String type = linkedIssueTemp.getIssueType().getName();\n\n    log.debug(issueLink.issueLinkType.getName()) \n    \n    if(issueLink.getDestinationObject() != null &amp;&amp; issueLink.getDestinationObject().getIssueType().getName().toString().equals(\"Modernization\") &amp;&amp; issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsProblem'].toString())){\n        linkedIssue=linkedIssueTemp\n        log.debug \"linked issue: \" + linkedIssue\n        //log.debug \"linked issue status: \" + linkedIssue.getStatusObject().name\n        if(linkedIssue.getStatusObject().name == properties['wf.open'].toString()){\n            found=true\n        }\n    }\n}\n\nList&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId());\nlog.debug \"allInIssueLink: \" + allInIssueLink\nfor (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n    def linkedIssueTemp = issueLink.getSourceObject()\n    String type = linkedIssueTemp.getIssueType().getName();\n\n    log.debug(issueLink.issueLinkType.getName()) \n    \n    if(issueLink.getSourceObject() != null &amp;&amp; issueLink.getSourceObject().getIssueType().getName().toString().equals(\"Modernization\") &amp;&amp; issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsProblem'].toString())){\n        linkedIssue=linkedIssueTemp\n        log.debug \"linked issue: \" + linkedIssue\n        //log.debug \"linked issue status: \" + linkedIssue.getStatusObject().name\n        if(linkedIssue.getStatusObject().name == properties['wf.open'].toString()){\n            found=true\n        }\n    }\n}\n//log.debug \"found: \" + found\n\nif(found){\n\tdef destStatusObject = linkedIssue.getStatusObject()\n    //log.debug \"destStatusObject: \" + destStatusObject\n    //log.debug \"linkedIssue: \" + linkedIssue\n    def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n\t// Is the status of the linked issue \"Installing\" ?\n    \n    def customFieldManager = ComponentAccessor.customFieldManager\n    def pmIssueField = customFieldManager.getCustomFieldObjectsByName(\"OP_PM_LINKED_ISSUE\").first()\n    def offerIssueField = customFieldManager.getCustomFieldObjectsByName(\"OP_MODERNIZATION_LINKED_ISSUE\").first()\n    def offerIssueBoolField = customFieldManager.getCustomFieldObjectsByName(properties['cf.offerTkt'].toString()).first()\n    \n    //Set OPAA_OFFER_TKT=Yes on just created linkedIssue\n    def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n    def mi = (MutableIssue) linkedIssue\n\n    def fieldConfig = offerFromRepair.getRelevantConfig(linkedIssue)\n    //log.warn \"fieldConfig: \" + fieldConfig\n    def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n    log.debug \"transition field value: \" + issue.getCustomFieldValue(currentUserTransition)\n    //log.debug \"currentUserTransition: \" + currentUserTransition\n    pmIssueField.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(pmIssueField), issue.key.toString()), new DefaultIssueChangeHolder())\n    offerFromRepair.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(offerIssueBoolField), cfNewValue), new DefaultIssueChangeHolder())\n    \n    fieldConfig = offerIssueBoolField.getRelevantConfig(linkedIssue)\n    //log.warn \"fieldConfig: \" + fieldConfig\n    cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n    offerIssueBoolField.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(offerIssueBoolField), cfNewValue), new DefaultIssueChangeHolder())\n    \n    def userTransition = userManager.getUserByName(issue.getCustomFieldValue(currentUserTransition).toString())\n\tlog.debug \"userTransition: \" + userTransition\n    if (userTransition != null &amp;&amp; (groupManager.getUsersInGroup(supplierAdm).contains(userTransition) || groupManager.getUsersInGroup(supplierTech).contains(userTransition))) {\n        // Transition executed by external user --&gt; to be added also internal techs role groups\n        // Email has not to be sent\n        // SN will be created as soon as the quotation has been confirmed - to be checked when to create SN if no quotation from supplier is needed - when the quotation has been sent to the customer?\n        log.debug \"in utente supplier\"\n        transitionCheck.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(transitionCheck), cfNewValue), new DefaultIssueChangeHolder())\n        offerFromRepair.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(offerFromRepair), cfNewValue), new DefaultIssueChangeHolder())\n\t}\n    \n    ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n    issueIndexingService.reIndex(linkedIssue)    \n    \n    offerIssueField.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(offerIssueField), linkedIssue.key.toString()), new DefaultIssueChangeHolder())\n    \n    if (destStatusObject.name == properties['wf.open'].toString()) {\n        // Prepare our input for the transition\n        def issueInputParameters = issueService.newIssueInputParameters()\n        issueInputParameters.with {\n            setSkipScreenCheck(true)\n        }\n        // Validate transitioning the linked issue to \"Signs Needed\"\n        def validationResult = issueService.validateTransition(user, linkedIssue.id, (properties['wf.tr.askQuote'] ? properties['wf.tr.askQuote'].toInteger() : 11), issueInputParameters)\n        if (validationResult.isValid()) {\n            // Perform the transition\n            def issueResult = issueService.transition(user, validationResult)\n            if (! issueResult.isValid()) {\n                log.debug(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n            }else{\n                log.debug(\"Transazione fatta\")\n            }\n        } else {\n            log.debug(\"Could not transition task ${linkedIssue.key}, errors: ${validationResult.errorCollection}\")\n        }\n    }\n    \n}","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">00edbe12-4a7a-49dc-b5c0-c3f556043537</arg>
                  <arg name="FIELD_NOTES">Clear cache</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\n\n/* REST API per Generazione Allegato Rapporto di Intervento */\nrequestMethod = \"POST\";\n/*Script Variables*/\n//Per test da console\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-14062\")\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/clearCache/dataObject\"\ndef body_req = []\nURL url = new URL(baseURL)\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.outputStream\nlog.debug \"body_req: \" + body_req\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\nlog.debug connection.outputStream\nconnection.connect();\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n}","scriptPath":null}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23401</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="81" name="Modifica Analisi dei Rischi">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">545a177d-7402-4393-ad16-ddacdcc93582</arg>
                <arg name="FIELD_NOTES">OP_TKT_ASSIGNED_TO != ASSISTANT</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"import com.atlassian.jira.issue.Issue\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport org.apache.log4j.Category\r\nimport groovy.json.JsonBuilder\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\nimport com.atlassian.jira.issue.IssueManager\r\nimport com.atlassian.jira.issue.ModifiedValue\r\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\r\nimport java.text.SimpleDateFormat;\r\nimport com.atlassian.jira.issue.index.IssueIndexingService\r\n\r\ndef assignedTo =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_ASSIGNED_TO\")[0]\r\nlog.debug \"issue.getCustomFieldValue(assignedTo): \" + issue.getParentObject().getCustomFieldValue(assignedTo)\r\n\r\n!issue.getParentObject().getCustomFieldValue(assignedTo).toString().equals(\"ASSISTANT\")","scriptPath":null}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="7">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23411</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="field3">customfield_23601</arg>
                  <arg name="field2">customfield_23600</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="field4">customfield_22693</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="241" name="Clear OP_SUPPLIER">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">92c7bf91-5f62-49c4-bba0-b13767297b6d</arg>
                <arg name="FIELD_INVERT_CONDITION" />
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_USER_IDS">arianna.fabbri</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="4">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="ºè">bc2c77b9-422d-4c36-9198-94c3d5bcc1cb</arg>
                  <arg name="field">customfield_23235</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="field2">customfield_22813</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="331" name="Genera Operazioni di Manutenzione ODS">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">a7f76fba-0345-4820-a2e4-606ba2b00e30</arg>
                <arg name="FIELD_NOTES">PM Task senza PM operations NON ASSISTANT (i tkt assistant NON devono ripetere le PM Operations)</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="v+nWù">false</arg>
                <arg name="FIELD_CONDITION">{"script":"import com.atlassian.jira.issue.Issue\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport org.apache.log4j.Category\r\nimport groovy.json.JsonBuilder\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\nimport com.atlassian.jira.issue.IssueManager\r\nimport com.atlassian.jira.issue.ModifiedValue\r\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\r\nimport java.text.SimpleDateFormat;\r\nimport com.atlassian.jira.issue.index.IssueIndexingService\r\n\r\ndef assignedTo =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_ASSIGNED_TO\")[0]\r\ndef pmOperations =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_PM_OPERATIONS_ODS\")[0]\r\nlog.debug \"issue.getCustomFieldValue(assignedTo): \" + issue.getParentObject().getCustomFieldValue(assignedTo)\r\n\r\nissue.getCustomFieldValue(pmOperations) == null &amp;&amp; (issue.getParentObject().getCustomFieldValue(assignedTo) == null || !issue.getParentObject().getCustomFieldValue(assignedTo).toString().equals(\"ASSISTANT\"))","scriptPath":null}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">8b47115e-3d2f-45b3-8019-a9a7d45a9ae4</arg>
              <arg name="FIELD_NOTES">PM Task: genera operazioni di manutenzione</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\r\nimport groovy.json.StreamingJsonBuilder;\r\nimport com.atlassian.jira.issue.CustomFieldManager;\r\nimport com.atlassian.jira.issue.fields.CustomField;\r\nimport com.atlassian.jira.issue.IssueManager;\r\nimport com.atlassian.jira.component.ComponentAccessor;\r\nimport com.atlassian.jira.issue.Issue;\r\nimport com.atlassian.jira.issue.MutableIssue\r\nimport org.apache.commons.codec.binary.Base64;\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport org.apache.log4j.Category\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\nimport com.atlassian.jira.issue.index.IssueIndexingService\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\nlog.setLevel(org.apache.log4j.Level.DEBUG)\r\n\r\nIssueManager issueManager = ComponentAccessor.getIssueManager();\r\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\r\ndef requestMethod\r\ndef baseURL\r\n\r\ndef pmOperations = issue.getCustomFieldValue(ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_PM_OPERATIONS_ODS\")[0])\r\nif(pmOperations == null){\r\n\r\n    /* REST API per pulizia cache issue linkata */\r\n    requestMethod = \"PUT\";\r\n    /*Script Variables*/\r\n    //Per test da console\r\n    //Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-32535\")\r\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/pm-subtask/\" + issue.key + \"/operations\"\r\n    URL url = new URL(baseURL)\r\n    HttpURLConnection connection = (HttpURLConnection)url.openConnection();\r\n    connection.setRequestMethod(requestMethod);\r\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n    connection.setRequestProperty(\"Accept\", \"*/*\");\r\n    connection.setDoOutput(true);\r\n    connection.setDoInput(true);\r\n    connection.connect();\r\n    log.debug \"url: \" + url\r\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\r\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\r\n\r\n    if (!connection.getResponseCode().toString().equals(\"200\")){\r\n        log.debug \"url: \" + url\r\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\r\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\r\n    }\r\n    IssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\r\n    issueIndexingService.reIndex(issue)\r\n}","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">3f04f6dd-7343-490f-aa00-b6c36291a7d0</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.issue.fields.CustomField\r\nimport com.atlassian.jira.issue.CustomFieldManager\r\nimport com.atlassian.jira.workflow.JiraWorkflow\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenLayoutItem\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenTab\r\nimport com.atlassian.jira.issue.fields.FieldManager\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreen\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenManager\r\nimport com.opensymphony.workflow.loader.ActionDescriptor\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.workflow.WorkflowManager\r\nimport groovy.json.StreamingJsonBuilder;\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner;\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl;\r\n\r\ndef requestMethod\r\ndef baseURL\r\ndef responseCode\r\ndef responseMessage\r\ndef bodyReq = []\r\ndef br\r\nMap&lt;String, Object&gt; customFieldMap = new HashMap&lt;String,Object&gt;();\r\n\r\ntry {\r\n    Properties properties = new Properties()\r\n    File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\r\n    propertiesFile.withInputStream {\r\n        properties.load(it)\r\n    }\r\n\r\n    def serverBase = String.format(\"http://%s/op\", properties['api.env'])\r\n    def transactionAction = \"validators\"\r\n\r\n    URL url\r\n    HttpURLConnection connection\r\n    requestMethod = \"POST\";\r\n\r\n    baseURL = String.format(\"%s/rest/jira/workflows/%s/%s\", serverBase, transientVars.actionId, transactionAction);\r\n\r\n    log.debug baseURL;\r\n\r\n    WorkflowManager workflowManager = ComponentAccessor.getWorkflowManager();\r\n    JiraWorkflow jiraWorkflow = workflowManager.getWorkflow(transientVars.issue);\r\n\r\n    CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\r\n    \r\n    log.debug jiraWorkflow.getName();\r\n    \r\n    ActionDescriptor ad = workflowManager.getActionDescriptor(transientVars.issue, transientVars.actionId);\r\n\r\n    log.debug ad.getName()              //Genera Operazioni di Manutenzione ODS\r\n    log.debug ad.getMetaAttributes()    //{opsbar-sequence=10, jira.description=, jira.fieldscreen.id=19910}\r\n\r\n    def adMeta = ad.getMetaAttributes();\r\n    def fieldScreenId = adMeta.get(\"jira.fieldscreen.id\");\r\n    log.debug \"Field screen id: \" + fieldScreenId\r\n\r\n    if(fieldScreenId != null &amp;&amp; fieldScreenId != \"\") {\r\n        FieldScreenManager fieldScreenManager = ComponentAccessor.getComponent(FieldScreenManager.class);\r\n        FieldScreen fieldScreen = fieldScreenManager.getFieldScreen(Long.valueOf(fieldScreenId.toString()));\r\n        List&lt;FieldScreenTab&gt; fsts = fieldScreen.getTabs();\r\n        for (FieldScreenTab fst : fsts) {\r\n            List&lt;FieldScreenLayoutItem&gt; qwe = fst.getFieldScreenLayoutItems();\r\n            for (FieldScreenLayoutItem fsli : qwe) {\r\n                if (fsli.getFieldId() == null) {\r\n                    continue;\r\n                }\r\n                CustomField customField = customFieldManager.getCustomFieldObject(fsli.getFieldId());\r\n                if (customField == null) {\r\n                    continue;\r\n                }\r\n                def customFieldValue = issue.getCustomFieldValue(customField);\r\n                customFieldMap.put(fsli.getFieldId(), customFieldValue == null ? null : customFieldValue.toString());\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        customFieldMap = null;\r\n    }\r\n    log.debug customFieldMap\r\n\r\n    bodyReq = [ \r\n        \"issueKey\": issue.key,\r\n        \"actionName\": ad.getName(),\r\n        \"jiraWorkflowName\": jiraWorkflow.getName(),\r\n        \"customFieldMap\": customFieldMap,\r\n        \"properties\": properties\r\n    ] \r\n\r\n    log.debug \"baseURL SN: \" + baseURL\r\n    log.debug \"bodyReq SN: \" + bodyReq\r\n\r\n    url = new URL(baseURL)\r\n    connection = (HttpURLConnection)url.openConnection();\r\n    connection.setRequestMethod(requestMethod);\r\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n    connection.setRequestProperty(\"Accept\", \"*/*\");\r\n    connection.setDoOutput(true);\r\n    connection.setDoInput(true);\r\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, bodyReq) }\r\n    \r\n    connection.connect();\r\n    responseCode = connection.getResponseCode().toString()    \r\n        \r\n    log.debug \"Response HttpStatusCode: \" + responseCode\r\n        \r\n    // If backend replies with 200 then the condition is passed    \r\n    if(\"200\".equals(responseCode)){\r\n        log.debug \"OK\"\r\n    } else {\r\n        //This is a backend error.. log\r\n        log.debug \"Backend error\"\r\n\r\n        def output = new ArrayList()\r\n        def eList = new ArrayList()\r\n        def eListErrors = new ArrayList()\r\n        def errorMsgs = new ArrayList()\r\n\r\n        eListErrors.add(\"E\")\r\n        eListErrors.add(\"ERROR\") //if dynamic, better\r\n        eListErrors.add(null)   //it sounds it is used as separator\r\n\r\n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\r\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\r\n\r\n        def jsonSlurper = new JsonSlurper()\r\n        def json_object = jsonSlurper.parseText(outputMsg)\r\n        if(json_object instanceof Map){\r\n            //errorMsgs.add(connection.getResponseCode() + \" \" + json_object.message)\r\n            if(json_object.errors instanceof List){\r\n                for(def cur : (List)json_object.errors){\r\n                    errorMsgs.add(cur.toString())\r\n                }\r\n            } else {\r\n                errorMsgs.add(json_object.errors.toString())\r\n            }            \r\n        }\r\n        eListErrors.add(errorMsgs)\r\n        eList.add(eListErrors)\r\n\r\n        output.add(eList)\r\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\r\n    }\r\n} catch (Exception e){\r\n    //This is an exception in the script\r\n    log.debug \"Exception raised\"\r\n    log.error e\r\n    if(e instanceof InvalidInputException){\r\n        throw e;\r\n    }\r\n    throw new InvalidInputException(\"Validators failed\");\r\n}\r\n","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="Not Done" status="‰Þ" step="4">
              <post-functions>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="5" name="‰Þ">
      <meta name="jira.status.id">10007</meta>
      <actions>
        <action id="71" name="Riapri Manutenzione">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">7d8ccd98-77a0-4688-93c3-e444762d6232</arg>
                <arg name="FIELD_NOTES">Not available if parent ticket has been closed or completed</arg>
                <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"issue.parentObject?.status?.name != \"Completed to be Closed\" &amp;&amp; issue.parentObject?.status?.name != \"Closed\"","scriptPath":null}</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.CustomScriptCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">55b452ad-e5af-46ca-a948-dfb76b57fa1b</arg>
              <arg name="FIELD_NOTES">SAP: update SN status to INP</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\r\nimport groovy.json.StreamingJsonBuilder;\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.issue.CustomFieldManager;\r\nimport com.atlassian.jira.issue.fields.CustomField;\r\nimport com.atlassian.jira.issue.IssueManager;\r\nimport com.atlassian.jira.component.ComponentAccessor;\r\nimport com.atlassian.jira.issue.Issue;\r\nimport com.atlassian.jira.issue.MutableIssue\r\nimport org.apache.commons.codec.binary.Base64;\r\nimport org.apache.log4j.Category\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\nimport com.atlassian.jira.config.SubTaskManager\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\nlog.setLevel(org.apache.log4j.Level.DEBUG)\r\nimport com.atlassian.jira.issue.link.IssueLink\r\n\r\nIssueManager issueManager = ComponentAccessor.getIssueManager()\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-239824\")\r\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\r\ndef supplier =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplier'] ? properties['cf.supplier'].toString() : \"OP_SUPPLIER\")[0]\r\ndef requestMethod\r\ndef baseURL\r\nURL url\r\nHttpURLConnection connection\r\n\r\ndef body_req = []\r\nrequestMethod = \"POST\";\r\n\r\nbody_req = [\r\n    \"issueKey\": issue.key,\r\n    \"status\": \"INP\"\r\n] \r\n\r\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\r\nlog.debug \"body_req SN: \" + body_req\r\nlog.debug \"baseURL SN: \" + baseURL\r\nurl = new URL(baseURL)\r\nconnection = (HttpURLConnection)url.openConnection();\r\nconnection.setRequestMethod(requestMethod);\r\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\nconnection.setRequestProperty(\"Accept\", \"*/*\");\r\nconnection.setDoOutput(true);\r\nconnection.setDoInput(true);\r\nconnection.outputStream\r\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\r\nlog.debug connection.outputStream\r\nconnection.connect();\r\n\r\ndef output = new ArrayList()\r\ndef eList = new ArrayList()\r\ndef eListErrors = new ArrayList()\r\ndef errorMsgs = new ArrayList()\r\n\r\nif (!connection.getResponseCode().toString().equals(\"200\")){\r\n    log.debug \"url: \" + url\r\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\r\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\r\n    eListErrors.add(\"E\")\r\n    eListErrors.add(\"SN_UPDATE\")\r\n    errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\r\n    eListErrors.add(errorMsgs)\r\n    eList.add(eListErrors)\r\n\r\n    output.add(eList)\r\n    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\r\n}","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="4">
              <post-functions>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">abdc5f30-4e69-401f-b00b-a66eb9ce6634</arg>
                  <arg name="FIELD_NOTES">Hide issues eventually created for replaced materials and required materials</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.component.ComponentAccessor\nimport com.atlassian.jira.issue.IssueManager\nimport com.atlassian.jira.issue.Issue\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.index.IssueIndexingService;\nimport org.ofbiz.core.entity.DelegatorInterface\nimport com.atlassian.jira.util.BuildUtilsInfo\nimport com.atlassian.jira.issue.issuetype.IssueType\nimport com.atlassian.jira.issue.link.IssueLink\nimport com.atlassian.jira.config.ResolutionManager\n\nIssueManager issueManager = ComponentAccessor.getIssueManager()\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-58786\")\n\n//finding the issue you want to delete\ndef repairTktField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_MAINTENANCE_LINKED_ISSUE\")[0]\ndef modernizationTktField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_MODERNIZATION_LINKED_ISSUE\")[0]\ndef offerTktField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_QUOTE_LINKED_ISSUE\")[0]\ndef repairTkt = issue.getCustomFieldValue(repairTktField)\ndef offerTkt = issue.getCustomFieldValue(offerTktField)\ndef modernizationTkt = issue.getCustomFieldValue(modernizationTktField)\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\ndef delegatorInterface = ComponentAccessor.getComponent(DelegatorInterface)\ndef buildUtilsInfo = ComponentAccessor.getComponent(BuildUtilsInfo)\ndef constantsManager = ComponentAccessor.getConstantsManager()\n\ndef customer = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CUSTOMER\")[0]\ndef site = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SITE\")[0]\ndef asset = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_ASSET\")[0]\ndef supplier = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SUPPLIER\")\ndef visKey = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_VISIBILITY_KEY\")[0]\ndef deletedFrom = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_DELETED_FROM_ISSUE\")[0]\nlog.debug \"repairTkt to be deleted: \" + repairTkt\nlog.debug \"offerTkt to be deleted: \" + offerTkt\nlog.debug \"modernizationTkt to be deleted: \" + modernizationTkt\n\ndef currentUser = ComponentAccessor.jiraAuthenticationContext.loggedInUser\ndef resolutionManager = ComponentAccessor.getComponent(ResolutionManager)\nList&lt;IssueLink&gt; allInIssueLink\nList&lt;IssueLink&gt; allOutIssueLink\n\nif(repairTkt){\n    deletedFrom.updateValue(null, issueManager.getIssueObject(repairTkt), new ModifiedValue(issueManager.getIssueObject(repairTkt).getCustomFieldValue(deletedFrom), issue.key), new DefaultIssueChangeHolder())\n    customer.updateValue(null, issueManager.getIssueObject(repairTkt), new ModifiedValue(issueManager.getIssueObject(repairTkt).getCustomFieldValue(customer), null), new DefaultIssueChangeHolder())\n    site.updateValue(null, issueManager.getIssueObject(repairTkt), new ModifiedValue(issueManager.getIssueObject(repairTkt).getCustomFieldValue(site), null), new DefaultIssueChangeHolder())\n    asset.updateValue(null, issueManager.getIssueObject(repairTkt), new ModifiedValue(issueManager.getIssueObject(repairTkt).getCustomFieldValue(asset), null), new DefaultIssueChangeHolder())\n    visKey.updateValue(null, issueManager.getIssueObject(repairTkt), new ModifiedValue(issueManager.getIssueObject(repairTkt).getCustomFieldValue(visKey), null), new DefaultIssueChangeHolder())\n    for(cs in supplier){\n        cs.updateValue(null, issueManager.getIssueObject(repairTkt), new ModifiedValue(issueManager.getIssueObject(repairTkt).getCustomFieldValue(cs), null), new DefaultIssueChangeHolder())\n    }\n    \n    allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; inIterator = allInIssueLink.iterator(); inIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) inIterator.next();\n\n        log.warn \"Issue con relatesInIssueLink\"\n        /*Eseguire transazione di stato della destinationIssue*/\n        def linkedIssue = issueLink.getSourceObject()\n        log.debug \"repairTkt.toString(): \" + repairTkt.toString()\n        if(linkedIssue.toString() == repairTkt.toString()){\n            ComponentAccessor.issueLinkManager.removeIssueLink(issueLink, currentUser)\n        }\n    }\n\n    allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; inIterator = allOutIssueLink.iterator(); inIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) inIterator.next();\n\n        log.warn \"Issue con relatesOutIssueLink\"\n        /*Eseguire transazione di stato della destinationIssue*/\n        def linkedIssue = issueLink.getDestinationObject()\n        log.debug \"repairTkt.toString(): \" + repairTkt.toString()\n        if(linkedIssue.toString() == repairTkt.toString()){\n            ComponentAccessor.issueLinkManager.removeIssueLink(issueLink, currentUser)\n        }\n    }\n\n    repairTkt.setResolution(resolutionManager.getResolutionByName(\"Canceled\"))\n    repairTkt.store()\n \tissueIndexingService.reIndex(issueManager.getIssueObject(repairTkt))\n}\n\nif(offerTkt){\n    log.debug \"in offerTkt\"\n    deletedFrom.updateValue(null, issueManager.getIssueObject(offerTkt), new ModifiedValue(issueManager.getIssueObject(offerTkt).getCustomFieldValue(deletedFrom), issue.key), new DefaultIssueChangeHolder())\n    customer.updateValue(null, issueManager.getIssueObject(offerTkt), new ModifiedValue(issueManager.getIssueObject(offerTkt).getCustomFieldValue(customer), null), new DefaultIssueChangeHolder())\n    site.updateValue(null, issueManager.getIssueObject(offerTkt), new ModifiedValue(issueManager.getIssueObject(offerTkt).getCustomFieldValue(site), null), new DefaultIssueChangeHolder())\n    asset.updateValue(null, issueManager.getIssueObject(offerTkt), new ModifiedValue(issueManager.getIssueObject(offerTkt).getCustomFieldValue(asset), null), new DefaultIssueChangeHolder())\n    visKey.updateValue(null, issueManager.getIssueObject(offerTkt), new ModifiedValue(issueManager.getIssueObject(offerTkt).getCustomFieldValue(visKey), null), new DefaultIssueChangeHolder())\n    for(cs in supplier){\n        cs.updateValue(null, issueManager.getIssueObject(offerTkt), new ModifiedValue(issueManager.getIssueObject(offerTkt).getCustomFieldValue(cs), null), new DefaultIssueChangeHolder())\n    }\n    \n    allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; inIterator = allInIssueLink.iterator(); inIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) inIterator.next();\n\n        log.warn \"Issue con relatesInIssueLink\"\n        /*Eseguire transazione di stato della destinationIssue*/\n        def linkedIssue = issueLink.getSourceObject()\n        log.debug \"offerTkt.toString(): \" + offerTkt.toString()\n        log.debug \"linkedIssue: \" + linkedIssue\n        if(linkedIssue.toString() == offerTkt.toString()){\n            ComponentAccessor.issueLinkManager.removeIssueLink(issueLink, currentUser)\n        }\n    }\n\n    allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; inIterator = allOutIssueLink.iterator(); inIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) inIterator.next();\n\n        log.warn \"Issue con relatesOutIssueLink\"\n        /*Eseguire transazione di stato della destinationIssue*/\n        def linkedIssue = issueLink.getDestinationObject()\n        log.debug \"offerTkt.toString(): \" + offerTkt.toString()\n        log.debug \"linkedIssue: \" + linkedIssue\n        if(linkedIssue.toString() == offerTkt.toString()){\n            ComponentAccessor.issueLinkManager.removeIssueLink(issueLink, currentUser)\n        }\n    }\n\n    offerTkt.setResolution(resolutionManager.getResolutionByName(\"Canceled\"))\n    offerTkt.store()\n \tissueIndexingService.reIndex(issueManager.getIssueObject(offerTkt))\n}\n\nif(modernizationTkt){\n    deletedFrom.updateValue(null, issueManager.getIssueObject(modernizationTkt), new ModifiedValue(issueManager.getIssueObject(modernizationTkt).getCustomFieldValue(deletedFrom), issue.key), new DefaultIssueChangeHolder())\n    customer.updateValue(null, issueManager.getIssueObject(modernizationTkt), new ModifiedValue(issueManager.getIssueObject(modernizationTkt).getCustomFieldValue(customer), null), new DefaultIssueChangeHolder())\n    site.updateValue(null, issueManager.getIssueObject(modernizationTkt), new ModifiedValue(issueManager.getIssueObject(modernizationTkt).getCustomFieldValue(site), null), new DefaultIssueChangeHolder())\n    asset.updateValue(null, issueManager.getIssueObject(modernizationTkt), new ModifiedValue(issueManager.getIssueObject(modernizationTkt).getCustomFieldValue(asset), null), new DefaultIssueChangeHolder())\n    visKey.updateValue(null, issueManager.getIssueObject(modernizationTkt), new ModifiedValue(issueManager.getIssueObject(modernizationTkt).getCustomFieldValue(visKey), null), new DefaultIssueChangeHolder())\n    for(cs in supplier){\n        cs.updateValue(null, issueManager.getIssueObject(modernizationTkt), new ModifiedValue(issueManager.getIssueObject(modernizationTkt).getCustomFieldValue(cs), null), new DefaultIssueChangeHolder())\n    }\n    \n    allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; inIterator = allInIssueLink.iterator(); inIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) inIterator.next();\n\n        log.warn \"Issue con relatesInIssueLink\"\n        /*Eseguire transazione di stato della destinationIssue*/\n        def linkedIssue = issueLink.getSourceObject()\n        log.debug \"modernizationTkt.toString(): \" + modernizationTkt.toString()\n        if(linkedIssue.toString() == modernizationTkt.toString()){\n            ComponentAccessor.issueLinkManager.removeIssueLink(issueLink, currentUser)\n        }\n    }\n\n    allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; inIterator = allOutIssueLink.iterator(); inIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) inIterator.next();\n\n        log.warn \"Issue con relatesOutIssueLink\"\n        /*Eseguire transazione di stato della destinationIssue*/\n        def linkedIssue = issueLink.getDestinationObject()\n        log.debug \"modernizationTkt.toString(): \" + modernizationTkt.toString()\n        if(linkedIssue.toString() == modernizationTkt.toString()){\n            ComponentAccessor.issueLinkManager.removeIssueLink(issueLink, currentUser)\n        }\n    }\n\n    modernizationTkt.setResolution(resolutionManager.getResolutionByName(\"Canceled\"))\n    modernizationTkt.store()\n \tissueIndexingService.reIndex(issueManager.getIssueObject(modernizationTkt))\n}","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="v+nWù">¶»ž</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">0a6b8edc-fe5d-475d-ad18-c45d3ab183eb</arg>
                  <arg name="FIELD_NOTES">Clear cache</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\n\n/* REST API per Generazione Allegato Rapporto di Intervento */\nrequestMethod = \"POST\";\n/*Script Variables*/\n//Per test da console\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-14062\")\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/clearCache/dataObject\"\ndef body_req = []\nURL url = new URL(baseURL)\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.outputStream\nlog.debug \"body_req: \" + body_req\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\nlog.debug connection.outputStream\nconnection.connect();\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n}","scriptPath":null}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="v+nWù">¶»ž</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="ºè">7f450205-af42-43f8-b48f-99d8bf922011</arg>
                  <arg name="field">customfield_23410</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="field3">resolution</arg>
                  <arg name="field2">customfield_23411</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="151" name="Update SN/SO">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">966eceb6-5b0d-4823-9779-1c13ed57eee9</arg>
                <arg name="FIELD_INVERT_CONDITION" />
                <arg name="FIELD_NOTES">Enabled for arianna.fabbri</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_USER_IDS">arianna.fabbri</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">830e4fa6-bc1b-4339-b964-3db55e8b236b</arg>
              <arg name="FIELD_NOTES">SAP: update SN status &amp; Update SO + Confirmation - Do not update if last PM Task closed</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport com.atlassian.jira.config.SubTaskManager\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager()\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-41566\")\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef supplier =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplier'] ? properties['cf.supplier'].toString() : \"OP_SUPPLIER\")[0]\ndef requestMethod\ndef baseURL\n\nSubTaskManager subTaskManager = ComponentAccessor.getSubTaskManager();\nCollection subTasks = issue.getParentObject().getSubTaskObjects()\ndef last = true\nif (!subTasks.empty) {\n    subTasks.each {\n        if(!it.getStatus().name.toString().equals(\"Done\") &amp;&amp; it.key != issue.key){\n            last=false\n            log.info \"last\"\n        }\n    }\n    if(!last){\n        /** SERVICE ORDER UPDATE **/\n        URL url\n        HttpURLConnection connection\n\n        def body_req = []\n        requestMethod = \"POST\";\n        body_req = []\n        body_req = [\n            \"issueKey\": issue.key,\n            \"include\": \"LABOUR\"\n        ] \n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\n\n        log.debug \"baseURL SO: \" + baseURL\n        log.debug \"body_req SO: \" + body_req\n        url = new URL(baseURL)\n        connection = (HttpURLConnection)url.openConnection();\n        connection.setRequestMethod(requestMethod);\n        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n        connection.setRequestProperty(\"Accept\", \"*/*\");\n        connection.setDoOutput(true);\n        connection.setDoInput(true);\n        connection.outputStream\n        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n        log.debug connection.outputStream\n        connection.connect();\n\n        def output = new ArrayList()\n        def eList = new ArrayList()\n        def eListErrors = new ArrayList()\n        def errorMsgs = new ArrayList()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        log.debug \"SO ResponseCode:\" + connection.getResponseCode()\n        if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n            log.debug \"url: \" + url\n            log.debug \"ResponseCode:\" + connection.getResponseCode()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n            def outputMsg = ((HttpURLConnection)connection).errorStream.text\n            log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n            def jsonSlurper = new JsonSlurper()\n            def json_object = jsonSlurper.parseText(outputMsg)\n            assert json_object instanceof Map  \n            log.debug \"message: \" +  json_object.message\n            log.debug \"errors: \" +  json_object.errors.toString()\n\n            eListErrors.add(\"E\")\n            eListErrors.add(\"OP-SAP-SO-CREATE\")\n            errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n            eListErrors.add(errorMsgs)\n            eList.add(eListErrors)\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        }else{\n            /** DA FARE SC SOLO IN CASO DI TECNICI INTERNI **/\n            if(issue.getCustomFieldValue(supplier)==null){ /** se OP_SUPPLIER = NULL il ticket ha proseguito sul flusso tecnici interni **/\n\n                body_req = [\n                    \"issueKey\": issue.key,\n                ] \n\n                baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/order/confirmation\"\n                log.debug \"body_req SC: \" + body_req\n                log.debug \"baseURL SC: \" + baseURL\n                url = new URL(baseURL)\n                connection = (HttpURLConnection)url.openConnection();\n                connection.setRequestMethod(requestMethod);\n                connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n                connection.setRequestProperty(\"Accept\", \"*/*\");\n                connection.setDoOutput(true);\n                connection.setDoInput(true);\n                connection.outputStream\n                connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n                log.debug connection.outputStream\n                connection.connect();\n\n                output = new ArrayList()\n                eList = new ArrayList()\n                eListErrors = new ArrayList()\n                errorMsgs = new ArrayList()\n                log.debug \"SC ResponseCode:\" + connection.getResponseCode()\n                if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n                    log.debug \"url: \" + url\n                    log.debug \"ResponseCode:\" + connection.getResponseCode()\n                    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n                    def outputMsg = ((HttpURLConnection)connection).errorStream.text\n                    log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n                    def jsonSlurper = new JsonSlurper()\n                    def json_object = jsonSlurper.parseText(outputMsg)\n                    assert json_object instanceof Map  \n                    log.debug \"message: \" +  json_object.message\n                    log.debug \"errors: \" +  json_object.errors.toString()\n                    \n                    eListErrors.add(\"E\")\n                    eListErrors.add(\"OP-SAP-SC-CREATE\")\n                    errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n                    eListErrors.add(errorMsgs)\n                    eList.add(eListErrors)\n\n                    output.add(eList)\n                    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n                }\n            }\n        }\n    }\n}","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="5">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="211" name="Clear OP_SUPPLIER">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">92c7bf91-5f62-49c4-bba0-b13767297b6d</arg>
                <arg name="FIELD_INVERT_CONDITION" />
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_USER_IDS">arianna.fabbri</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="5">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="ºè">bc2c77b9-422d-4c36-9198-94c3d5bcc1cb</arg>
                  <arg name="field">customfield_23235</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="field2">customfield_22813</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="271" name="Maintenance Completed - Rifai" view="fieldscreen">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20204</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">6478ebc1-073e-417a-9a74-f32b52233da8</arg>
                <arg name="FIELD_INVERT_CONDITION" />
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_USER_IDS">arianna.fabbri</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="5">
              <post-functions>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="targetIssueTypeDefinedByCfSelection" />
                  <arg name="ºè">ede3c31a-1c8e-406b-bb01-6cfb4159d0f1</arg>
                  <arg name="issueTypeId">13001</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">H</arg>
                  <arg name="maxAllowed-integerValue" />
                  <arg name="transitionAttachmentsOperation">rr</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="╡крz╙ыв7Ь╡'еy╦^t+м╢ЙЕЙщ]" />
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">11100:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId">customfield_22609</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="²æÅºw-ì">[{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22609","destinationFieldId":"customfield_22658"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22600","destinationFieldId":"customfield_22600"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22822","destinationFieldId":"customfield_22822"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22601","destinationFieldId":"customfield_22601"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22602","destinationFieldId":"customfield_22602"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22813","destinationFieldId":"customfield_22813"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23235","destinationFieldId":"customfield_23235"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22651","destinationFieldId":"customfield_22651"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22700","destinationFieldId":"customfield_22700"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22607","destinationFieldId":"customfield_22607"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"priority","destinationFieldId":"priority"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23203","destinationFieldId":"customfield_23203"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23237","destinationFieldId":"customfield_23237"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_21909","destinationFieldId":"customfield_21909"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"Yes","destinationFieldId":"customfield_22681"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23401","destinationFieldId":"customfield_21908"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"Maintenance Ticket","destinationFieldId":"summary"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"Yes","destinationFieldId":"customfield_23409"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22649","destinationFieldId":"customfield_22629"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23607","destinationFieldId":"customfield_23607"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23906","destinationFieldId":"customfield_23906"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23907","destinationFieldId":"customfield_23907"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23908","destinationFieldId":"customfield_23908"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23909","destinationFieldId":"customfield_23909"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22689","destinationFieldId":"customfield_22689"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22691","destinationFieldId":"customfield_22691"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22690","destinationFieldId":"customfield_22690"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"Yes","destinationFieldId":"customfield_23409"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"Maintenance Ticket","destinationFieldId":"summary"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23401","destinationFieldId":"customfield_23237"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"REPAIR_ENABLED","destinationFieldId":"customfield_22814"}}]</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">71a4764e-ec7c-4759-97f5-5775b6c349ed</arg>
                  <arg name="FIELD_NOTES">OP: Update status on just created Repair Quotation issue</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport com.atlassian.jira.issue.IssueManager\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport groovy.json.JsonSlurper\nimport groovy.json.StreamingJsonBuilder\nimport com.atlassian.jira.config.util.JiraHome\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport java.text.SimpleDateFormat\nimport java.text.ParseException\nimport com.atlassian.jira.config.properties.APKeys\nimport com.atlassian.jira.issue.link.LinkCollectionImpl;\nimport com.atlassian.jira.issue.link.IssueLink;\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nlog.debug \"Percorso properties: \" + ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\n\n/*Script Variables*/\n//Per Post Function\nissue = issue\n//Per test da console\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\n//issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-257\")\nlog.debug \"Issue: \" + issue\ndef found=false\ndef linkedIssue\ndef issueService = ComponentAccessor.getIssueService()\ndef groupManager = ComponentAccessor.getGroupManager()\ndef userManager = ComponentAccessor.getUserManager()\ndef offerFromRepair =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_GENERATED_FROM_PM\")[0]\n\ndef currentUserTransition =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENT_USER_GENERATE_REPAIR_QUOTE\")[0]\ndef transitionCheck = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CHECK_AND_CONFIRM\")[0]\nString supplierAdm = \"OPROLE_AA_SUPPLIER_ADM\"\nString supplierTech = \"OPROLE_AA_SUPPLIER_TECH\"\nList&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId());\nlog.debug \"allOutIssueLink: \" + allOutIssueLink\nfor (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n    def linkedIssueTemp = issueLink.getDestinationObject()\n    String type = linkedIssueTemp.getIssueType().getName();\n\n    log.debug(issueLink.issueLinkType.getName()) \n    \n    if( issueLink.getDestinationObject() != null &amp;&amp; issueLink.getDestinationObject().getIssueType().getName().toString().equals(\"Maintenance Ticket\") &amp;&amp; issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsProblem'].toString())){\n        linkedIssue=linkedIssueTemp\n        log.debug \"linked issue: \" + linkedIssue\n        //log.debug \"linked issue status: \" + linkedIssue.getStatusObject().name\n        if(linkedIssue.getStatusObject().name == properties['wf.open'].toString()){\n            found=true\n        }\n    }\n}\n\nList&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId());\nlog.debug \"allInIssueLink: \" + allInIssueLink\nfor (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n    def linkedIssueTemp = issueLink.getSourceObject()\n    String type = linkedIssueTemp.getIssueType().getName();\n\n    log.debug(issueLink.issueLinkType.getName()) \n    \n    if(issueLink.getSourceObject() != null &amp;&amp; issueLink.getSourceObject().getIssueType().getName().toString().equals(\"Maintenance Ticket\") &amp;&amp; issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsProblem'].toString())){\n        linkedIssue=linkedIssueTemp\n        log.debug \"linked issue: \" + linkedIssue\n        //log.debug \"linked issue status: \" + linkedIssue.getStatusObject().name\n        if(linkedIssue.getStatusObject().name == properties['wf.open'].toString()){\n            found=true\n        }\n    }\n}\n//log.debug \"found: \" + found\n\nif(found){\n\tdef destStatusObject = linkedIssue.getStatusObject()\n    //log.debug \"destStatusObject: \" + destStatusObject\n    //log.debug \"linkedIssue: \" + linkedIssue\n    def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n\t// Is the status of the linked issue \"Installing\" ?\n    \n    def customFieldManager = ComponentAccessor.customFieldManager\n    def pmIssueField = customFieldManager.getCustomFieldObjectsByName(\"OP_PM_LINKED_ISSUE\").first()\n    def offerIssueField = customFieldManager.getCustomFieldObjectsByName(\"OP_QUOTE_LINKED_ISSUE\").first()\n    def offerIssueBoolField = customFieldManager.getCustomFieldObjectsByName(properties['cf.offerTkt'].toString()).first()\n    \n    //Set OPAA_OFFER_TKT=Yes on just created linkedIssue\n    def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n    def mi = (MutableIssue) linkedIssue\n\n    def fieldConfig = offerFromRepair.getRelevantConfig(linkedIssue)\n    //log.warn \"fieldConfig: \" + fieldConfig\n    def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n    log.debug \"transition field value: \" + issue.getCustomFieldValue(currentUserTransition)\n    //log.debug \"currentUserTransition: \" + currentUserTransition\n    pmIssueField.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(pmIssueField), issue.key.toString()), new DefaultIssueChangeHolder())\n    offerFromRepair.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(offerIssueBoolField), cfNewValue), new DefaultIssueChangeHolder())\n    \n    fieldConfig = offerIssueBoolField.getRelevantConfig(linkedIssue)\n    //log.warn \"fieldConfig: \" + fieldConfig\n    cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n    offerIssueBoolField.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(offerIssueBoolField), cfNewValue), new DefaultIssueChangeHolder())\n    \n    def userTransition = userManager.getUserByName(issue.getCustomFieldValue(currentUserTransition).toString())\n\tlog.debug \"userTransition: \" + userTransition\n    if (userTransition != null &amp;&amp; (groupManager.getUsersInGroup(supplierAdm).contains(userTransition) || groupManager.getUsersInGroup(supplierTech).contains(userTransition))) {\n        // Transition executed by external user --&gt; to be added also internal techs role groups\n        // Email has not to be sent\n        // SN will be created as soon as the quotation has been confirmed - to be checked when to create SN if no quotation from supplier is needed - when the quotation has been sent to the customer?\n        log.debug \"in utente supplier\"\n        transitionCheck.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(transitionCheck), cfNewValue), new DefaultIssueChangeHolder())\n        offerFromRepair.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(offerFromRepair), cfNewValue), new DefaultIssueChangeHolder())\n\t}\n    \n    ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n    issueIndexingService.reIndex(linkedIssue)    \n    \n    offerIssueField.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(offerIssueField), linkedIssue.key.toString()), new DefaultIssueChangeHolder())\n    \n    if (destStatusObject.name == properties['wf.open'].toString()) {\n        // Prepare our input for the transition\n        def issueInputParameters = issueService.newIssueInputParameters()\n        issueInputParameters.with {\n            setSkipScreenCheck(true)\n        }\n        // Validate transitioning the linked issue to \"Signs Needed\"\n        def validationResult = issueService.validateTransition(user, linkedIssue.id, (properties['wf.tr.askQuote'] ? properties['wf.tr.askQuote'].toInteger() : 11), issueInputParameters)\n        if (validationResult.isValid()) {\n            // Perform the transition\n            def issueResult = issueService.transition(user, validationResult)\n            if (! issueResult.isValid()) {\n                log.debug(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n            }else{\n                log.debug(\"Transazione fatta\")\n            }\n        } else {\n            log.debug(\"Could not transition task ${linkedIssue.key}, errors: ${validationResult.errorCollection}\")\n        }\n    }\n    \n}","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">00edbe12-4a7a-49dc-b5c0-c3f556043537</arg>
                  <arg name="FIELD_NOTES">Clear cache</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\n\n/* REST API per Generazione Allegato Rapporto di Intervento */\nrequestMethod = \"POST\";\n/*Script Variables*/\n//Per test da console\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-14062\")\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/clearCache/dataObject\"\ndef body_req = []\nURL url = new URL(baseURL)\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.outputStream\nlog.debug \"body_req: \" + body_req\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\nlog.debug connection.outputStream\nconnection.connect();\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n}","scriptPath":null}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="targetIssueTypeDefinedByCfSelection" />
                  <arg name="ºè">ede3c31a-1c8e-406b-bb01-6cfb4159d0f1</arg>
                  <arg name="issueTypeId">13401</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">H</arg>
                  <arg name="maxAllowed-integerValue" />
                  <arg name="transitionAttachmentsOperation">rr</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="╡крz╙ыв7Ь╡'еy╦^t+м╢ЙЕЙщ]" />
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">11100:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId">customfield_23923</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="²æÅºw-ì">[{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22609","destinationFieldId":"customfield_22658"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22600","destinationFieldId":"customfield_22600"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22822","destinationFieldId":"customfield_22822"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22601","destinationFieldId":"customfield_22601"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22602","destinationFieldId":"customfield_22602"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22813","destinationFieldId":"customfield_22813"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23235","destinationFieldId":"customfield_23235"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22651","destinationFieldId":"customfield_22651"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22700","destinationFieldId":"customfield_22700"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22607","destinationFieldId":"customfield_22607"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"priority","destinationFieldId":"priority"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22814","destinationFieldId":"customfield_22814"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23203","destinationFieldId":"customfield_23203"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23237","destinationFieldId":"customfield_23237"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_21909","destinationFieldId":"customfield_21909"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"issuekey","destinationFieldId":"customfield_22629"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"Yes","destinationFieldId":"customfield_22681"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23401","destinationFieldId":"customfield_21908"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"Maintenance Ticket","destinationFieldId":"summary"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"Yes","destinationFieldId":"customfield_23409"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22649","destinationFieldId":"customfield_22629"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23237","destinationFieldId":"customfield_23401"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23607","destinationFieldId":"customfield_23607"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23237","destinationFieldId":"customfield_21908"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23906","destinationFieldId":"customfield_23906"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23907","destinationFieldId":"customfield_23907"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23908","destinationFieldId":"customfield_23908"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23909","destinationFieldId":"customfield_23909"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22689","destinationFieldId":"customfield_22689"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22691","destinationFieldId":"customfield_22691"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22690","destinationFieldId":"customfield_22690"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"Yes","destinationFieldId":"customfield_23409"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"Maintenance Ticket","destinationFieldId":"summary"}}]</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">71a4764e-ec7c-4759-97f5-5775b6c349ed</arg>
                  <arg name="FIELD_NOTES">OP: Update status on just created Repair Quotation issue</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport com.atlassian.jira.issue.IssueManager\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport groovy.json.JsonSlurper\nimport groovy.json.StreamingJsonBuilder\nimport com.atlassian.jira.config.util.JiraHome\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport java.text.SimpleDateFormat\nimport java.text.ParseException\nimport com.atlassian.jira.config.properties.APKeys\nimport com.atlassian.jira.issue.link.LinkCollectionImpl;\nimport com.atlassian.jira.issue.link.IssueLink;\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nlog.debug \"Percorso properties: \" + ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\n\n/*Script Variables*/\n//Per Post Function\nissue = issue\n//Per test da console\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\n//issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-257\")\nlog.debug \"Issue: \" + issue\ndef found=false\ndef linkedIssue\ndef issueService = ComponentAccessor.getIssueService()\ndef groupManager = ComponentAccessor.getGroupManager()\ndef userManager = ComponentAccessor.getUserManager()\ndef offerFromRepair =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_GENERATED_FROM_PM\")[0]\n\ndef currentUserTransition =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENT_USER_GENERATE_REPAIR_QUOTE\")[0]\ndef transitionCheck = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CHECK_AND_CONFIRM\")[0]\nString supplierAdm = \"OPROLE_AA_SUPPLIER_ADM\"\nString supplierTech = \"OPROLE_AA_SUPPLIER_TECH\"\n\nList&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId());\nlog.debug \"allOutIssueLink: \" + allOutIssueLink\nfor (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n    def linkedIssueTemp = issueLink.getDestinationObject()\n    String type = linkedIssueTemp.getIssueType().getName();\n\n    log.debug(issueLink.issueLinkType.getName()) \n    \n    if(issueLink.getDestinationObject() != null &amp;&amp; issueLink.getDestinationObject().getIssueType().getName().toString().equals(\"Modernization\") &amp;&amp; issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsProblem'].toString())){\n        linkedIssue=linkedIssueTemp\n        log.debug \"linked issue: \" + linkedIssue\n        //log.debug \"linked issue status: \" + linkedIssue.getStatusObject().name\n        if(linkedIssue.getStatusObject().name == properties['wf.open'].toString()){\n            found=true\n        }\n    }\n}\n\nList&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId());\nlog.debug \"allInIssueLink: \" + allInIssueLink\nfor (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n    def linkedIssueTemp = issueLink.getSourceObject()\n    String type = linkedIssueTemp.getIssueType().getName();\n\n    log.debug(issueLink.issueLinkType.getName()) \n    \n    if(issueLink.getSourceObject() != null &amp;&amp; issueLink.getSourceObject().getIssueType().getName().toString().equals(\"Modernization\") &amp;&amp; issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsProblem'].toString())){\n        linkedIssue=linkedIssueTemp\n        log.debug \"linked issue: \" + linkedIssue\n        //log.debug \"linked issue status: \" + linkedIssue.getStatusObject().name\n        if(linkedIssue.getStatusObject().name == properties['wf.open'].toString()){\n            found=true\n        }\n    }\n}\n//log.debug \"found: \" + found\n\nif(found){\n\tdef destStatusObject = linkedIssue.getStatusObject()\n    //log.debug \"destStatusObject: \" + destStatusObject\n    //log.debug \"linkedIssue: \" + linkedIssue\n    def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n\t// Is the status of the linked issue \"Installing\" ?\n    \n    def customFieldManager = ComponentAccessor.customFieldManager\n    def pmIssueField = customFieldManager.getCustomFieldObjectsByName(\"OP_PM_LINKED_ISSUE\").first()\n    def offerIssueField = customFieldManager.getCustomFieldObjectsByName(\"OP_MODERNIZATION_LINKED_ISSUE\").first()\n    def offerIssueBoolField = customFieldManager.getCustomFieldObjectsByName(properties['cf.offerTkt'].toString()).first()\n    \n    //Set OPAA_OFFER_TKT=Yes on just created linkedIssue\n    def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n    def mi = (MutableIssue) linkedIssue\n\n    def fieldConfig = offerFromRepair.getRelevantConfig(linkedIssue)\n    //log.warn \"fieldConfig: \" + fieldConfig\n    def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n    log.debug \"transition field value: \" + issue.getCustomFieldValue(currentUserTransition)\n    //log.debug \"currentUserTransition: \" + currentUserTransition\n    pmIssueField.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(pmIssueField), issue.key.toString()), new DefaultIssueChangeHolder())\n    offerFromRepair.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(offerIssueBoolField), cfNewValue), new DefaultIssueChangeHolder())\n    \n    fieldConfig = offerIssueBoolField.getRelevantConfig(linkedIssue)\n    //log.warn \"fieldConfig: \" + fieldConfig\n    cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n    offerIssueBoolField.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(offerIssueBoolField), cfNewValue), new DefaultIssueChangeHolder())\n    \n    def userTransition = userManager.getUserByName(issue.getCustomFieldValue(currentUserTransition).toString())\n\tlog.debug \"userTransition: \" + userTransition\n    if (userTransition != null &amp;&amp; (groupManager.getUsersInGroup(supplierAdm).contains(userTransition) || groupManager.getUsersInGroup(supplierTech).contains(userTransition))) {\n        // Transition executed by external user --&gt; to be added also internal techs role groups\n        // Email has not to be sent\n        // SN will be created as soon as the quotation has been confirmed - to be checked when to create SN if no quotation from supplier is needed - when the quotation has been sent to the customer?\n        log.debug \"in utente supplier\"\n        transitionCheck.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(transitionCheck), cfNewValue), new DefaultIssueChangeHolder())\n        offerFromRepair.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(offerFromRepair), cfNewValue), new DefaultIssueChangeHolder())\n\t}\n    \n    ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n    issueIndexingService.reIndex(linkedIssue)    \n    \n    offerIssueField.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(offerIssueField), linkedIssue.key.toString()), new DefaultIssueChangeHolder())\n    \n    if (destStatusObject.name == properties['wf.open'].toString()) {\n        // Prepare our input for the transition\n        def issueInputParameters = issueService.newIssueInputParameters()\n        issueInputParameters.with {\n            setSkipScreenCheck(true)\n        }\n        // Validate transitioning the linked issue to \"Signs Needed\"\n        def validationResult = issueService.validateTransition(user, linkedIssue.id, (properties['wf.tr.askQuote'] ? properties['wf.tr.askQuote'].toInteger() : 11), issueInputParameters)\n        if (validationResult.isValid()) {\n            // Perform the transition\n            def issueResult = issueService.transition(user, validationResult)\n            if (! issueResult.isValid()) {\n                log.debug(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n            }else{\n                log.debug(\"Transazione fatta\")\n            }\n        } else {\n            log.debug(\"Could not transition task ${linkedIssue.key}, errors: ${validationResult.errorCollection}\")\n        }\n    }\n    \n}","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">00edbe12-4a7a-49dc-b5c0-c3f556043537</arg>
                  <arg name="FIELD_NOTES">Clear cache</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\n\n/* REST API per Generazione Allegato Rapporto di Intervento */\nrequestMethod = \"POST\";\n/*Script Variables*/\n//Per test da console\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-14062\")\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/clearCache/dataObject\"\ndef body_req = []\nURL url = new URL(baseURL)\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.outputStream\nlog.debug \"body_req: \" + body_req\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\nlog.debug connection.outputStream\nconnection.connect();\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n}","scriptPath":null}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="291" name="Set Security">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">1b7d5faf-f701-433b-bfff-28879be13db0</arg>
                <arg name="FIELD_INVERT_CONDITION" />
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_USER_IDS">arianna.fabbri|||JIRAUSER58800</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="5">
              <post-functions>
                <function type="class">
                  <arg name="FIELD_SECURITY_LEVEL_ID">11600</arg>
                  <arg name="FIELD_FUNCTION_ID">006f388b-2114-4b75-aba7-ff0b7afc0cb2</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
                  <arg name="FIELD_CONDITION" />
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="6" name=":—§">
      <meta name="jira.status.id">1</meta>
      <actions>
        <action id="31" name="Confirm and Plan">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">f831b08d-05d9-4e70-bd3c-40fbd9da208c</arg>
              <arg name="FIELD_NOTES">SAP: update SN status</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\n\nrequestMethod = \"POST\";\n\ndef body_req = []\nbody_req = [\n    \"issueKey\": issue.key,\n    \"status\": \"PLA\"\n] \n\ndef serviceNotification = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_NOTIFICATION\")[0]\nif(issue.getCustomFieldValue(serviceNotification) != null){\n        \n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n    log.debug \"baseURL SN: \" + baseURL\n    log.debug \"body_req SN: \" + body_req\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"200\") &amp;&amp; !connection.getResponseCode().toString().equals(\"201\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        eListErrors.add(\"E\")\n        eListErrors.add(\"SN_UPDATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }else{\n        /** SERVICE ORDER CREATION **/\n        body_req = [\n            \"issueKey\": issue.key\n        ] \n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\n\n        log.debug \"baseURL SO: \" + baseURL\n        log.debug \"body_req SO: \" + body_req\n        url = new URL(baseURL)\n        connection = (HttpURLConnection)url.openConnection();\n        connection.setRequestMethod(requestMethod);\n        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n        connection.setRequestProperty(\"Accept\", \"*/*\");\n        connection.setDoOutput(true);\n        connection.setDoInput(true);\n        connection.outputStream\n        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n        log.debug connection.outputStream\n        connection.connect();\n\n        output = new ArrayList()\n        eList = new ArrayList()\n        eListErrors = new ArrayList()\n        errorMsgs = new ArrayList()\n\n        if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n            log.debug \"url: \" + url\n            log.debug \"ResponseCode:\" + connection.getResponseCode()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n            \n            def outputMsg = ((HttpURLConnection)connection).errorStream.text\n            log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n            \n            def jsonSlurper = new JsonSlurper()\n            def json_object = jsonSlurper.parseText(outputMsg)\n            assert json_object instanceof Map  \n            log.debug \"message: \" +  json_object.message\n            log.debug \"errors: \" +  json_object.errors.toString()\n\n            eListErrors.add(\"E\")\n            eListErrors.add(\"SO_CREATE\")\n            errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n            eListErrors.add(errorMsgs)\n            eList.add(eListErrors)\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        }\n    }\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="Not Done" status="‰Þ" step="3">
              <post-functions>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">e05070cf-b7e1-4333-a13e-22d55ac3d7d1</arg>
                  <arg name="FIELD_NOTES">Clear cache</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\n\n/* REST API per Generazione Allegato Rapporto di Intervento */\nrequestMethod = \"POST\";\n/*Script Variables*/\n//Per test da console\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-14062\")\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/clearCache/dataObject\"\ndef body_req = []\nURL url = new URL(baseURL)\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.outputStream\nlog.debug \"body_req: \" + body_req\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\nlog.debug connection.outputStream\nconnection.connect();\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n}","scriptPath":null}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="101" name="Genera Operazioni di Manutenzione">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">56d285d0-3b7f-4146-a3ed-b1319013939d</arg>
                <arg name="FIELD_NOTES">PM Task senza PM operations</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="v+nWù">false</arg>
                <arg name="FIELD_CONDITION">{"script":"cfValues['OP_PM_OPERATIONS_ODS'] == null","scriptPath":null,"parameters":{}}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">36237cda-1b88-49eb-8e62-354285079ef6</arg>
              <arg name="FIELD_NOTES">PM Task: genera operazioni di manutenzione</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\n\n/* REST API per pulizia cache issue linkata */\nrequestMethod = \"PUT\";\n/*Script Variables*/\n//Per test da console\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-32535\")\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/pm-subtask/\" + issue.key + \"/operations\"\nURL url = new URL(baseURL)\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.connect();\nlog.debug \"url: \" + url\nlog.debug \"ResponseCode:\" + connection.getResponseCode()\nlog.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n}","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">56673115-3813-4abf-96a6-27892999a488</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.issue.fields.CustomField\r\nimport com.atlassian.jira.issue.CustomFieldManager\r\nimport com.atlassian.jira.workflow.JiraWorkflow\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenLayoutItem\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenTab\r\nimport com.atlassian.jira.issue.fields.FieldManager\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreen\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenManager\r\nimport com.opensymphony.workflow.loader.ActionDescriptor\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.workflow.WorkflowManager\r\nimport groovy.json.StreamingJsonBuilder;\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner;\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl;\r\n\r\ndef requestMethod\r\ndef baseURL\r\ndef responseCode\r\ndef responseMessage\r\ndef bodyReq = []\r\ndef br\r\nMap&lt;String, Object&gt; customFieldMap = new HashMap&lt;String,Object&gt;();\r\n\r\ntry {\r\n    Properties properties = new Properties()\r\n    File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\r\n    propertiesFile.withInputStream {\r\n        properties.load(it)\r\n    }\r\n\r\n    def serverBase = String.format(\"http://%s/op\", properties['api.env'])\r\n    def transactionAction = \"validators\"\r\n\r\n    URL url\r\n    HttpURLConnection connection\r\n    requestMethod = \"POST\";\r\n\r\n    baseURL = String.format(\"%s/rest/jira/workflows/%s/%s\", serverBase, transientVars.actionId, transactionAction);\r\n\r\n    log.debug baseURL;\r\n\r\n    WorkflowManager workflowManager = ComponentAccessor.getWorkflowManager();\r\n    JiraWorkflow jiraWorkflow = workflowManager.getWorkflow(transientVars.issue);\r\n\r\n    CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\r\n    \r\n    log.debug jiraWorkflow.getName();\r\n    \r\n    ActionDescriptor ad = workflowManager.getActionDescriptor(transientVars.issue, transientVars.actionId);\r\n\r\n    log.debug ad.getName()              //Genera Operazioni di Manutenzione\r\n    log.debug ad.getMetaAttributes()    //{opsbar-sequence=10, jira.description=, jira.fieldscreen.id=19910}\r\n\r\n    def adMeta = ad.getMetaAttributes();\r\n    def fieldScreenId = adMeta.get(\"jira.fieldscreen.id\");\r\n    log.debug \"Field screen id: \" + fieldScreenId\r\n\r\n    if(fieldScreenId != null &amp;&amp; fieldScreenId != \"\") {\r\n        FieldScreenManager fieldScreenManager = ComponentAccessor.getComponent(FieldScreenManager.class);\r\n        FieldScreen fieldScreen = fieldScreenManager.getFieldScreen(Long.valueOf(fieldScreenId.toString()));\r\n        List&lt;FieldScreenTab&gt; fsts = fieldScreen.getTabs();\r\n        for (FieldScreenTab fst : fsts) {\r\n            List&lt;FieldScreenLayoutItem&gt; qwe = fst.getFieldScreenLayoutItems();\r\n            for (FieldScreenLayoutItem fsli : qwe) {\r\n                if (fsli.getFieldId() == null) {\r\n                    continue;\r\n                }\r\n                CustomField customField = customFieldManager.getCustomFieldObject(fsli.getFieldId());\r\n                if (customField == null) {\r\n                    continue;\r\n                }\r\n                def customFieldValue = issue.getCustomFieldValue(customField);\r\n                customFieldMap.put(fsli.getFieldId(), customFieldValue == null ? null : customFieldValue.toString());\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        customFieldMap = null;\r\n    }\r\n    log.debug customFieldMap\r\n\r\n    bodyReq = [ \r\n        \"issueKey\": issue.key,\r\n        \"actionName\": ad.getName(),\r\n        \"jiraWorkflowName\": jiraWorkflow.getName(),\r\n        \"customFieldMap\": customFieldMap,\r\n        \"properties\": properties\r\n    ] \r\n\r\n    log.debug \"baseURL SN: \" + baseURL\r\n    log.debug \"bodyReq SN: \" + bodyReq\r\n\r\n    url = new URL(baseURL)\r\n    connection = (HttpURLConnection)url.openConnection();\r\n    connection.setRequestMethod(requestMethod);\r\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n    connection.setRequestProperty(\"Accept\", \"*/*\");\r\n    connection.setDoOutput(true);\r\n    connection.setDoInput(true);\r\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, bodyReq) }\r\n    \r\n    connection.connect();\r\n    responseCode = connection.getResponseCode().toString()    \r\n        \r\n    log.debug \"Response HttpStatusCode: \" + responseCode\r\n        \r\n    // If backend replies with 200 then the condition is passed    \r\n    if(\"200\".equals(responseCode)){\r\n        log.debug \"OK\"\r\n    } else {\r\n        //This is a backend error.. log\r\n        log.debug \"Backend error\"\r\n\r\n        def output = new ArrayList()\r\n        def eList = new ArrayList()\r\n        def eListErrors = new ArrayList()\r\n        def errorMsgs = new ArrayList()\r\n\r\n        eListErrors.add(\"E\")\r\n        eListErrors.add(\"ERROR\") //if dynamic, better\r\n        eListErrors.add(null)   //it sounds it is used as separator\r\n\r\n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\r\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\r\n\r\n        def jsonSlurper = new JsonSlurper()\r\n        def json_object = jsonSlurper.parseText(outputMsg)\r\n        if(json_object instanceof Map){\r\n            //errorMsgs.add(connection.getResponseCode() + \" \" + json_object.message)\r\n            if(json_object.errors instanceof List){\r\n                for(def cur : (List)json_object.errors){\r\n                    errorMsgs.add(cur.toString())\r\n                }\r\n            } else {\r\n                errorMsgs.add(json_object.errors.toString())\r\n            }            \r\n        }\r\n        eListErrors.add(errorMsgs)\r\n        eList.add(eListErrors)\r\n\r\n        output.add(eList)\r\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\r\n    }\r\n} catch (Exception e){\r\n    //This is an exception in the script\r\n    log.debug \"Exception raised\"\r\n    log.error e\r\n    if(e instanceof InvalidInputException){\r\n        throw e;\r\n    }\r\n    throw new InvalidInputException(\"Validators failed\");\r\n}\r\n","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="231" name="Clear OP_SUPPLIER">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">92c7bf91-5f62-49c4-bba0-b13767297b6d</arg>
                <arg name="FIELD_INVERT_CONDITION" />
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_USER_IDS">arianna.fabbri</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="6">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="ºè">bc2c77b9-422d-4c36-9198-94c3d5bcc1cb</arg>
                  <arg name="field">customfield_23235</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="field2">customfield_22813</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="7" name="Asset Check">
      <meta name="jira.status.id">14730</meta>
      <actions>
        <action id="61" name="Check Completed" view="fieldscreen">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20400</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">d776b1a4-116c-43ec-b6a8-f2045af9fc90</arg>
              <arg name="FIELD_NOTES">OP: Check Required Fields</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport org.apache.log4j.Category\r\nimport groovy.json.JsonBuilder\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\nimport com.atlassian.jira.issue.IssueManager\r\nimport com.atlassian.jira.issue.ModifiedValue\r\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\r\nimport java.text.SimpleDateFormat;\r\nimport com.atlassian.jira.issue.index.IssueIndexingService\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\r\npropertiesFile.withInputStream {\r\n    properties.load(it)\r\n}\r\nlog.setLevel(org.apache.log4j.Level.DEBUG)\r\n\r\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-41755\")\r\n\r\nlog.debug \"Transazione CONFIRM ASSET - Issue: \" + issue\r\n\r\ndef errors = false\r\ndef warnings = false\r\n\r\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]\r\ndef dynamicRisksAss =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_ASSET_RISKS_ASSESSMENT\")[0]\r\n\r\ndef errorMandatoryFields = new ArrayList()\r\ndef errorRejectedTkt = false\r\n\r\nif(issue.getCustomFieldValue(dynamicRisksAss)!=null &amp;&amp; (String)issue.getCustomFieldValue(dynamicRisksAss) != \"\" &amp;&amp; !issue.getCustomFieldValue(dynamicRisksAss).toString().equals(\"\")){\r\n    /*Ciclare tutti gli oggetti associati al campo*/\r\n    //insight classes &amp; components\r\n    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \r\n    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\r\n    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n\r\n    def risksAssessment = issue.getCustomFieldValue(dynamicRisksAss)\r\n    def dra5, dra6\r\n    log.debug \"risksAssessment: \" + risksAssessment\r\n    for(i in risksAssessment){\r\n        //extract insight key ang get object\r\n        def risk=i.toString()\r\n        def riskKey = risk.substring(risk.lastIndexOf('(')+1,risk.lastIndexOf(')'))\r\n        def riskObject = objectFacade.loadObjectBean(riskKey)\r\n\r\n        def obTriage\r\n        if(objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA1\")==null){\r\n            errors=true\r\n            errorMandatoryFields.add(\"Dynamic Risk Assessment Completed for the job\")\r\n            log.debug \"errorMandatoryFields.add(Dynamic Risk Assessment Completed for the job)\"\r\n        }\r\n\r\n        if(objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA2\")==null){\r\n            errors=true\r\n            errorMandatoryFields.add(\"All hazards covered by the Risk Assessment?\")\r\n            log.debug \"errorMandatoryFields.add(All hazards covered by the Risk Assessment?)\"\r\n        }\r\n\r\n        if(objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA2\")!=null &amp;&amp; objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA2\").createMutable().getObjectAttributeValueBeans()[0].value.toString()==\"NO\" &amp;&amp; (objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA3\")==null || objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA3\").toString()==\"\" )){\r\n            errors=true\r\n            errorMandatoryFields.add(\"Complete additional outlining hazards and control measures\")\r\n            log.debug \"errorMandatoryFields.add(Complete additional outlining hazards and control measures)\"\r\n        }\r\n\r\n        if(objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA4\")==null){\r\n            errors=true\r\n            errorMandatoryFields.add(\"Method Statement available for the job?\")\r\n            log.debug \"errorMandatoryFields.add(Method Statement available for the job?)\"\r\n        }\r\n\r\n        if(objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA5\")==null){\r\n            errors=true\r\n            errorMandatoryFields.add(\"Do you have the correct tools and PPE to carry out the task?\")\r\n            log.debug \"errorMandatoryFields.add(Do you have the correct tools and PPE to carry out the task?)\"\r\n        }else{\r\n            obTriage = objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA5\").createMutable()\r\n            dra5 = obTriage.getObjectAttributeValueBeans()[0].value.toString()\r\n            if(dra5.equals(\"NO\")){\r\n                errorRejectedTkt=true\r\n                warnings=true\r\n                log.debug \"dra5: \" + dra5\r\n            }\r\n        }\r\n\r\n        if(objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA6\")==null){\r\n            errors=true\r\n            errorMandatoryFields.add(\"Do you have all the information and training to complete the task?\")\r\n            log.debug \"errorMandatoryFields.add(Do you have all the information and training to complete the task?)\"\r\n        }else{\r\n            obTriage = objectFacade.loadObjectAttributeBean(riskObject.getId(), \"DRA6\").createMutable()\r\n            dra6 = obTriage.getObjectAttributeValueBeans()[0].value.toString()\r\n            if(dra6.equals(\"NO\")){\r\n                errorRejectedTkt=true\r\n                warnings=true\r\n                log.debug \"dra6: \" + dra6\r\n            }\r\n        }\r\n\r\n        log.debug issue.getCustomFieldValue(transitionCheck)\r\n        log.debug errorMandatoryFields\r\n\r\n        def output = new ArrayList()\r\n\r\n        if (!errors &amp;&amp; !warnings){\r\n            return true\r\n        }else{\r\n            if(!errors &amp;&amp; warnings){\r\n                //Se ci sono solo warnings verifico se l'utente ha gi\u00e0 dichiarato di voler proseguire comunque\r\n                // - transition field \"OPAA_CHECK_AND_CONFIRM\"=\"Yes\"\r\n                // - in caso contrario invio i warning a FE\r\n\r\n                //log.debug \"transitionCheck: \" + issue.getCustomFieldValue(transitionCheck)\r\n                //log.debug \"result: \" + issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")\r\n                if(issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")){\r\n                    //log.debug \"return true\"\r\n                    return true\r\n                }else{\r\n                    def wList = new ArrayList()\r\n\r\n                    if(errorRejectedTkt){\r\n                        def eListRejected = new ArrayList()\r\n                        eListRejected.add(\"W\")\r\n                        eListRejected.add(\"REJECTED_DUE_TO_RISKS_ASSESSMENT\")\r\n                        eListRejected.add(null)\r\n                        wList.add(eListRejected)\r\n                    }\r\n                    output.add(wList)\r\n                    log.debug \"throw exception: \" + output.toString()\r\n                    throw new InvalidInputException('{\"W\":\"' + output.toString() + '\"}')\r\n                    //throw new InvalidInputException(\"W\", output.toString())   \r\n                }\r\n\r\n            }\r\n            if(errors &amp;&amp; !warnings){\r\n                def eList = new ArrayList()\r\n\r\n                if(errorMandatoryFields.size() &gt; 0){\r\n                    def eListMandatory = new ArrayList()\r\n                    eListMandatory.add(\"E\")\r\n                    eListMandatory.add(\"MANDATORY_FIELDS\")\r\n                    eListMandatory.add(null)\r\n                    eListMandatory.add(errorMandatoryFields)\r\n                    eList.add(eListMandatory)\r\n                }\r\n\r\n                output.add(eList)\r\n                log.debug \"throw exception: \" + output.toString()\r\n                throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\r\n                //throw new InvalidInputException(\"E\", output.toString())   \r\n            }\r\n            if(errors &amp;&amp; warnings){\r\n                def eList = new ArrayList()\r\n                def wList = new ArrayList()\r\n                if(errorMandatoryFields.size() &gt; 0){\r\n                    def eListMandatory = new ArrayList()\r\n                    eListMandatory.add(\"E\")\r\n                    eListMandatory.add(\"MANDATORY_FIELDS\")\r\n                    eListMandatory.add(null)\r\n                    eListMandatory.add(errorMandatoryFields)\r\n                    eList.add(eListMandatory)\r\n                }\r\n\r\n                if(errorRejectedTkt){\r\n                    def eListRejected = new ArrayList()\r\n                    eListRejected.add(\"W\")\r\n                    eListRejected.add(\"REJECTED_DUE_TO_RISKS_ASSESSMENT\")\r\n                    eListRejected.add(null)\r\n                    wList.add(eListRejected)\r\n                }\r\n\r\n                output.add(eList)\r\n                output.add(wList)\r\n                log.debug \"throw exception: \" + output.toString()\r\n                throw new InvalidInputException('{\"WE\":\"' + output.toString() + '\"}')\r\n                //throw new InvalidInputException(\"WE\", output.toString())  \r\n            }\r\n        }\r\n    }\r\n}else{\r\n    return true\r\n}\r\n","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">8ab72aa0-1422-40dd-9c13-8008a9e2b0dd</arg>
              <arg name="FIELD_NOTES">Confirm Risk Analysis</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport com.atlassian.jira.issue.IssueManager\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport java.text.SimpleDateFormat;\nimport com.atlassian.jira.issue.index.IssueIndexingService\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\ndef wList = new ArrayList()\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]\ndef warningEmptyFields = new ArrayList()\ndef output = new ArrayList()\ndef customer =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CUSTOMER\")[0]\ndef asset =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_ASSET\")[0]\ndef sfondamento, batterie, radar, radarFunzionanti, fotocellule, forzaImpatto\ndef requiredFields = new ArrayList()\n\n//insight classes &amp; components\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\ndef pmAsset = issue.getCustomFieldValue(asset)\nlog.debug \"pmAsset: \" + pmAsset\n\n//extract insight key ang get object\ndef installation=pmAsset.toString()\ndef installationKey = installation.substring(installation.lastIndexOf('(')+1,installation.lastIndexOf(')'))\ndef installationObj = objectFacade.loadObjectBean(installationKey)\nlog.debug \"installationObj: \" + installationObj\nlog.debug \"installationObj.getId(): \" + installationObj.getId()\ndef obTriage, prodType\n\n//TIPO IMPIANTO\nif(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PUBLIC_PRODUCT_FAMILY_REF\")){\n    obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PUBLIC_PRODUCT_FAMILY_REF\").createMutable()\n    def prodTypeId = obTriage.getObjectAttributeValueBeans()[0].getValue()\n    prodType = objectFacade.loadObjectAttributeBean(prodTypeId, \"Name\").createMutable().getObjectAttributeValueBeans()[0].getValue().toString()\n}\nlog.debug \"prodType: \" + prodType\ndef status\ndef tobeStopped = false\ndef cfNewValue, fieldConfig\n\n//PORTE AUTOMATICHE\nif(prodType.equals(\"PORTE AUTOMATICHE\")){\n\n    //I\tPORTE_RADAR_TYPE\n    if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_RADAR_TYPE\")){\n        obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_RADAR_TYPE\").createMutable()\n        radar = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n    }\n    log.debug \"radar: \" + radar\n    //O\tPORTE_FOTOCELLULE\n    if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FOTOCELLULE\")){\n        obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FOTOCELLULE\").createMutable()\n        fotocellule = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n    }\n    log.debug \"fotocellule: \" + fotocellule\n    //T\tPORTE_FORZA_IMPATTO_NEI_LIMITI\n    if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FORZA_IMPATTO_NEI_LIMITI\")){\n        obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FORZA_IMPATTO_NEI_LIMITI\").createMutable()\n        forzaImpatto = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n    }\n    log.debug \"forzaImpatto: \" + forzaImpatto\n    //F\tPORTE_BATTERIE_EMERGENZA\n    if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_BATTERIE_EMERGENZA\")){\n        obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_BATTERIE_EMERGENZA\").createMutable()\n        batterie = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n    }\n    log.debug \"batterie: \" + batterie\n    //B\tPORTE_SFONDAMENTO\n    if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_SFONDAMENTO\")){\n        obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_SFONDAMENTO\").createMutable()\n        sfondamento = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n    }\n    log.debug \"sfondamento: \" + sfondamento\n    //L\tPORTE_RADAR_FUNZIONANTI\n    if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_RADAR_FUNZIONANTI\")){\n        obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_RADAR_FUNZIONANTI\").createMutable()\n        radarFunzionanti = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n    }\n}\n\nif(issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")){\n    //log.debug \"return true\"\n    return true\n}else{\n/*\n    if( prodType.equals(\"PORTE AUTOMATICHE\") &amp;&amp; (\n        radarFunzionanti.toString().equals(\"NO\") ||\n        (radar.toString().equals(\"SOLO MOVIMENTO\") &amp;&amp; fotocellule.toString().equals(\"NO\")) ||\n        (forzaImpatto.toString().equals(\"NO\") &amp;&amp; issue.getCustomFieldValue(customer).toString().contains(\"ALLEANZA\")) ||\n        (sfondamento.toString().equals(\"RIDONDANTE\") &amp;&amp; batterie.toString().equals(\"NO\")))\n    ){\n        requiredFields.add(\"OP_ASSET_STOPPED\")\n        def fList = new ArrayList()\n\n        def fListDetail = new ArrayList()\n        fListDetail.add(\"F\")\n        fListDetail.add(\"USER_INPUT_STOP_ASSET\")\n        fListDetail.add(null)\n        fListDetail.add(requiredFields)\n        fList.add(fListDetail)\n\n        output.add(fList)\n        throw new InvalidInputException('{\"F\":\"' + output.toString() + '\"}')\n        //throw new InvalidInputException(\"F\", output.toString())   \n\n            \n    }else{*/\n        def wListConfirmEmpty = new ArrayList()\n        wListConfirmEmpty.add(\"W\")\n        wListConfirmEmpty.add(\"CONFIRM_RISK_ANALYSIS\")\n        wListConfirmEmpty.add(null)\n\n        wList.add(wListConfirmEmpty)\n\n        output.add(wList)\n        log.debug \"throw exception: \" + output.toString()\n        throw new InvalidInputException('{\"W\":\"' + output.toString() + '\"}')\n    //}\n    \n    \n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">b3b3e533-3478-4dec-85eb-5fed7a6f02ec</arg>
              <arg name="FIELD_NOTES">OperationPortal - Call to BE validator</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.issue.fields.CustomField\r\nimport com.atlassian.jira.issue.CustomFieldManager\r\nimport com.atlassian.jira.workflow.JiraWorkflow\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenLayoutItem\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenTab\r\nimport com.atlassian.jira.issue.fields.FieldManager\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreen\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenManager\r\nimport com.opensymphony.workflow.loader.ActionDescriptor\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.workflow.WorkflowManager\r\nimport groovy.json.StreamingJsonBuilder;\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner;\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl;\r\n\r\ndef baseURL\r\ndef responseBody\r\n\r\ntry {\r\n    Properties properties = new Properties()\r\n    File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\r\n    propertiesFile.withInputStream {\r\n        properties.load(it)\r\n    }\r\n\r\n    def serverBase = String.format(\"http://%s/op\", properties['api.env'])\r\n    def transactionAction = \"validators\"\r\n\r\n    URL url\r\n    def requestMethod = \"POST\";\r\n\r\n    baseURL = String.format(\"%s/rest/jira/workflows/%s/%s\", serverBase, transientVars.actionId, transactionAction);\r\n\r\n    log.debug(\"Composing baseURL as '${baseURL}'\");\r\n\r\n    WorkflowManager workflowManager = ComponentAccessor.getWorkflowManager();\r\n    JiraWorkflow jiraWorkflow = workflowManager.getWorkflow(transientVars.issue);\r\n\r\n    CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\r\n    \r\n    log.debug( jiraWorkflow.getName())\r\n    \r\n    ActionDescriptor ad = workflowManager.getActionDescriptor(transientVars.issue, transientVars.actionId);\r\n\r\n    log.debug(\"ActionDescriptor Name: ${ad.getName()}\")                     // Genera Rapporto di Intervento FAAC\r\n    log.debug(\"ActionDescriptor MetaAttrs: ${ad.getMetaAttributes()}\")      // {opsbar-sequence=10, jira.description=, jira.fieldscreen.id=19910}\r\n\r\n    def adMeta = ad.getMetaAttributes();\r\n    def fieldScreenId = Long.valueOf(adMeta.get(\"jira.fieldscreen.id\").toString());\r\n    log.debug(\"Field screen id: ${fieldScreenId}\")\r\n\r\n    Map&lt;String, Object&gt; customFieldMap = new HashMap&lt;String,Object&gt;();\r\n\r\n    FieldScreenManager fieldScreenManager = ComponentAccessor.getComponent(FieldScreenManager.class);\r\n    FieldScreen fieldScreen = fieldScreenManager.getFieldScreen(fieldScreenId);\r\n    for(FieldScreenTab fst : fieldScreen.getTabs()){\r\n        List&lt;FieldScreenLayoutItem&gt; qwe = fst.getFieldScreenLayoutItems();\r\n        for (FieldScreenLayoutItem fsli: qwe){\r\n            if (fsli.getFieldId() == null) {\r\n                continue;\r\n            }\r\n            CustomField customField = customFieldManager.getCustomFieldObject(fsli.getFieldId());\r\n            if (customField == null){\r\n                continue;\r\n            }\r\n            def customFieldValue = issue.getCustomFieldValue(customField);\r\n            customFieldMap.put(fsli.getFieldId(), customFieldValue == null ? null : customFieldValue.toString());\r\n        }    \r\n    }\r\n\r\n    log.debug(\"customFieldMap: ${customFieldMap}\")\r\n\r\n    def bodyReq = [ \r\n        \"issueKey\": issue.key,\r\n        \"actionName\": ad.getName(),\r\n        \"jiraWorkflowName\": jiraWorkflow.getName(),\r\n        \"customFieldMap\": customFieldMap,\r\n        \"properties\": properties\r\n    ];\r\n\r\n    log.debug(\"Calling [${requestMethod}] ${baseURL} with body ${bodyReq}\");\r\n\r\n    url = new URL(baseURL)\r\n    HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n    connection.setRequestMethod(requestMethod);\r\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n    connection.setRequestProperty(\"Accept\", \"*/*\");\r\n    connection.setDoOutput(true);\r\n    connection.setDoInput(true);\r\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, bodyReq) }\r\n    \r\n    connection.connect();\r\n    def responseCode = connection.getResponseCode().toString()    \r\n        \r\n    log.debug(\"Response HttpStatusCode: ${responseCode}\")\r\n        \r\n    // If backend replies with 200 then the condition is passed    \r\n    if(\"200\".equals(responseCode)){\r\n        log.debug(\"Validator passed!\");\r\n    } else {\r\n        List&lt;String&gt; outputErrors = new ArrayList&lt;&gt;();\r\n        List&lt;String&gt; outputWarnings = new ArrayList&lt;&gt;();\r\n        \r\n        responseBody = ((HttpURLConnection) connection).errorStream.text;\r\n        log.debug(\"Validator not passed, responseBody: ${responseBody}\");\r\n\r\n        // testing without redeploying each time\r\n        //responseBody = '{\"W\": \"[[[W, CONFIRM_RISK_ANALYSIS, null]]]\"}'\r\n\r\n        throw new InvalidInputException(responseBody);\r\n    }\r\n} catch (Exception e){\r\n    //This is an exception in the script\r\n    log.debug(\"Exception raised calling endpoint ${baseURL}\")\r\n    log.error(e)\r\n    if (e instanceof InvalidInputException){\r\n        throw e;\r\n    }\r\n    throw new InvalidInputException('{\"E\": \"[[[ Validator failed ]]]\" }');\r\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="4">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">d0ff0e0c-0d1c-4309-b2d2-89ce8055a4a1</arg>
                  <arg name="FIELD_NOTES">Check and fill in OP_PM_ASSET_RISKS_RESULT - OP_ASSET_TO_BE_STOPPED</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport com.atlassian.jira.issue.IssueManager\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.atlassian.jira.issue.MutableIssue\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n    properties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-23678\")\n\ndef risk = false\ndef check = false\ndef completed = true\ndef not_completed = 0\n\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\ndef asset =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_ASSET\")[0]\ndef customer =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CUSTOMER\")[0]\ndef pmstatus = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_PM_ASSET_RISKS_RESULT\")[0]\ndef pmStopAsset = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_ASSET_TO_BE_STOPPED\")[0]\n\nif(issue.getCustomFieldValue(asset)!=null &amp;&amp; (String)issue.getCustomFieldValue(asset) != \"\" &amp;&amp; !issue.getCustomFieldValue(asset).toString().equals(\"\")){\n    //insight classes &amp; components\n    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n    def pmAsset = issue.getCustomFieldValue(asset)\n    log.debug \"pmAsset: \" + pmAsset\n\n    //extract insight key ang get object\n    def installation=pmAsset.toString()\n    def installationKey = installation.substring(installation.lastIndexOf('(')+1,installation.lastIndexOf(')'))\n    def installationObj = objectFacade.loadObjectBean(installationKey)\n    log.debug \"installationObj: \" + installationObj\n    log.debug \"installationObj.getId(): \" + installationObj.getId()\n    def obTriage\n    def prodType, uscitaSicurezza, sfondamento, anteSfondano, sfondamentoOstacoli, sfondamentoFerma, batterie, anticadutaCarter, anticadutaFunzionanti, radar, radarFunzionanti, sensoriPresenza, sensoriPresenzaLati, fotocellule, fotocelluleFunzionanti, schiacciamento, cesoiamento, altriRischi, forzaImpatto\n\n    //TIPO IMPIANTO\n    if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PUBLIC_PRODUCT_FAMILY_REF\")){\n        obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PUBLIC_PRODUCT_FAMILY_REF\").createMutable()\n        def prodTypeId = obTriage.getObjectAttributeValueBeans()[0].getValue()\n        prodType = objectFacade.loadObjectAttributeBean(prodTypeId, \"Name\").createMutable().getObjectAttributeValueBeans()[0].getValue().toString()\n    }\n    log.debug \"prodType: \" + prodType\n    def status\n    def tobeStopped = false\n    def cfNewValue, fieldConfig\n    \n    def tfRischi, tfImpiantoANorma\n    if(!prodType.equals(\"PORTE AUTOMATICHE\") &amp;&amp; !prodType.equals(\"CANCELLI AUTOMATICI\") &amp;&amp; !prodType.equals(\"BARRIERE\")){\n        //ALTRI RISCHI\n        //TF_RISCHI_RILEVATI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"TF_RISCHI_RILEVATI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"TF_RISCHI_RILEVATI\").createMutable()\n            tfRischi = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"tfRischi: \" + tfRischi\n        \n        //IMPIANTO NON A NORMA\n        //TF_IMPIANTO_A_NORMA\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"TF_IMPIANTO_A_NORMA\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"TF_IMPIANTO_A_NORMA\").createMutable()\n            tfImpiantoANorma = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"tfImpiantoANorma: \" + tfImpiantoANorma\n        \n        if(tfRischi!=null || tfImpiantoANorma.toString().equals(\"NO\"))\n        {\n            risk = true\n        }\n\n        if (risk){\n            status = \"RISK_DETECTED\"\n        }else{\n            status = \"RISK_ANALYSIS_OK\"\n        }\n        log.debug \"status: \" + status\n        def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n        def mi = (MutableIssue) issue\n\n        fieldConfig = pmstatus.getRelevantConfig(issue)\n        //log.warn \"fieldConfig: \" + fieldConfig\n        cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == status }\n\n        pmstatus.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(pmstatus), cfNewValue), new DefaultIssueChangeHolder())\n        issueIndexingService.reIndex(issue)\n        \n    }\n    \n    //PORTE AUTOMATICHE\n    if(prodType.equals(\"PORTE AUTOMATICHE\")){\n        //A\tPORTE_USCITA_SICUREZZA\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_USCITA_SICUREZZA\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_USCITA_SICUREZZA\").createMutable()\n            uscitaSicurezza = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"uscitaSicurezza: \" + uscitaSicurezza\n\n        //B\tPORTE_SFONDAMENTO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_SFONDAMENTO\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_SFONDAMENTO\").createMutable()\n            sfondamento = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"sfondamento: \" + sfondamento\n\n        //C\tPORTE_SFONDAMENTO_ANTE_POSIZIONE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_SFONDAMENTO_ANTE_POSIZIONE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_SFONDAMENTO_ANTE_POSIZIONE\").createMutable()\n            anteSfondano = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"anteSfondano: \" + anteSfondano\n\n        //D\tPORTE_OSTACOLI_SFONDAMENTO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_OSTACOLI_SFONDAMENTO\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_OSTACOLI_SFONDAMENTO\").createMutable()\n            sfondamentoOstacoli = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"sfondamentoOstacoli: \" + sfondamentoOstacoli\n\n        //E\tPORTE_DISPOSITIVO_STOP\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_DISPOSITIVO_STOP\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_DISPOSITIVO_STOP\").createMutable()\n            sfondamentoFerma = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"sfondamentoFerma: \" + sfondamentoFerma\n\n        //F\tPORTE_BATTERIE_EMERGENZA\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_BATTERIE_EMERGENZA\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_BATTERIE_EMERGENZA\").createMutable()\n            batterie = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"batterie: \" + batterie\n\n        //G\tPORTE_DISPOSITIVO_ANTICADUTA_CARTER\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_DISPOSITIVO_ANTICADUTA_CARTER\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_DISPOSITIVO_ANTICADUTA_CARTER\").createMutable()\n            anticadutaCarter = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"anticadutaCarter: \" + anticadutaCarter\n\n        //H\tPORTE_ANTICADUTA_CARTER_FUNZIONANTE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_ANTICADUTA_CARTER_FUNZIONANTE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_ANTICADUTA_CARTER_FUNZIONANTE\").createMutable()\n            anticadutaFunzionanti = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"anticadutaFunzionanti: \" + anticadutaFunzionanti\n\n        //I\tPORTE_RADAR_TYPE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_RADAR_TYPE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_RADAR_TYPE\").createMutable()\n            radar = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"radar: \" + radar\n\n        //L\tPORTE_RADAR_FUNZIONANTI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_RADAR_FUNZIONANTI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_RADAR_FUNZIONANTI\").createMutable()\n            radarFunzionanti = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"radarFunzionanti: \" + radarFunzionanti\n\n        //M\tPORTE_PRESENZA_50MM_ANTE_MOBILI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PRESENZA_50MM_ANTE_MOBILI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PRESENZA_50MM_ANTE_MOBILI\").createMutable()\n            sensoriPresenza = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"sensoriPresenza: \" + sensoriPresenza\n\n        //N\tPORTE_PRESENZA_50MM_ANTE_MOBILI_LATI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PRESENZA_50MM_ANTE_MOBILI_LATI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PRESENZA_50MM_ANTE_MOBILI_LATI\").createMutable()\n            sensoriPresenzaLati = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"sensoriPresenzaLati: \" + sensoriPresenzaLati\n\n        //O\tPORTE_FOTOCELLULE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FOTOCELLULE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FOTOCELLULE\").createMutable()\n            fotocellule = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"fotocellule: \" + fotocellule\n\n        //P\tPORTE_FOTOCELLULE_FUNZIONANTI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FOTOCELLULE_FUNZIONANTI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FOTOCELLULE_FUNZIONANTI\").createMutable()\n            fotocelluleFunzionanti = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"fotocelluleFunzionanti: \" + fotocelluleFunzionanti\n\n        //Q\tPORTE_PROTEZIONE_SCHIACCIAMENTO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PROTEZIONE_SCHIACCIAMENTO\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PROTEZIONE_SCHIACCIAMENTO\").createMutable()\n            schiacciamento = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"schiacciamento: \" + schiacciamento\n\n        //R\tPORTE_PROTEZIONE_CESOIAMENTO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PROTEZIONE_CESOIAMENTO\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PROTEZIONE_CESOIAMENTO\").createMutable()\n            cesoiamento = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cesoiamento: \" + cesoiamento\n\n        //S\tPORTE_ALTRI_RISCHI_DA_SEGNALARE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_ALTRI_RISCHI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_ALTRI_RISCHI\").createMutable()\n            altriRischi = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"altriRischi: \" + altriRischi\n\n        //T\tPORTE_FORZA_IMPATTO_NEI_LIMITI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FORZA_IMPATTO_NEI_LIMITI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FORZA_IMPATTO_NEI_LIMITI\").createMutable()\n            forzaImpatto = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"forzaImpatto: \" + forzaImpatto   \n        \n\n        log.debug \"customer: \" + issue.getCustomFieldValue(customer).toString()\n        if(\n            (uscitaSicurezza.toString().equals(\"SI\") &amp;&amp; sfondamento.toString().equals(\"NESSUNO\")) ||\n            (uscitaSicurezza.toString().equals(\"SI\") &amp;&amp; sfondamento.toString().equals(\"SFONDAMENTO MECCANICO\") &amp;&amp; (anteSfondano.toString().equals(\"NO\") || sfondamentoOstacoli.toString().equals(\"SI\") || sfondamentoFerma.toString().equals(\"NO\"))) ||\n            (uscitaSicurezza.toString().equals(\"SI\") &amp;&amp; sfondamento.toString().equals(\"RIDONDANTE\") &amp;&amp; batterie.toString().equals(\"NO\")) ||\n            anticadutaCarter.toString().equals(\"NO\") ||\n            (anticadutaCarter.toString().equals(\"SI\") &amp;&amp; anticadutaFunzionanti.toString().equals(\"NO\")) ||\n            ((radar.toString().equals(\"MOVIMENTO E PRESENZA\") || radar.toString().equals(\"SOLO MOVIMENTO\")) &amp;&amp; radarFunzionanti.toString().equals(\"NO\")) ||\n            (radar.toString().equals(\"MOVIMENTO E PRESENZA\") &amp;&amp; (sensoriPresenza.toString().equals(\"NO\") || sensoriPresenzaLati.toString().equals(\"NO\"))) || \n            (radar.toString().equals(\"SOLO MOVIMENTO\") &amp;&amp; fotocellule.toString().equals(\"SI\") &amp;&amp; fotocelluleFunzionanti.toString().equals(\"NO\")) ||\n            schiacciamento.toString().equals(\"NO\") ||\n            cesoiamento.toString().equals(\"NO\") ||\n            altriRischi.toString().equals(\"SI\") ||\n            //solo per cliente ALLEANZA 3.0\n            (forzaImpatto.toString().equals(\"NO\") &amp;&amp; issue.getCustomFieldValue(customer).toString().contains(\"ALLEANZA\"))\n        ){\n            risk = true\n        }\n\n        \n        if (risk){\n            status = \"RISK_DETECTED\"\n        }else{\n            status = \"RISK_ANALYSIS_OK\"\n        }\n        log.debug \"status: \" + status\n        def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n        def mi = (MutableIssue) issue\n\n        fieldConfig = pmstatus.getRelevantConfig(issue)\n        //log.warn \"fieldConfig: \" + fieldConfig\n        cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == status }\n\n        pmstatus.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(pmstatus), cfNewValue), new DefaultIssueChangeHolder())\n        issueIndexingService.reIndex(issue)\n\t\t/*\n        if(\n            radarFunzionanti.toString().equals(\"NO\") ||\n            (radar.toString().equals(\"SOLO MOVIMENTO\") &amp;&amp; fotocellule.toString().equals(\"NO\")) ||\n            (forzaImpatto.toString().equals(\"NO\") &amp;&amp; issue.getCustomFieldValue(customer).toString().contains(\"ALLEANZA\")) ||\n            (sfondamento.toString().equals(\"RIDONDANTE\") &amp;&amp; batterie.toString().equals(\"NO\"))\n        ){\n            tobeStopped = true\n        }*/\n    }\n    \n    def cancelloUomoPresente, cancelloAnticaduta, cancelloAnticadutaFunzionante, cancelloExtracorsa, cancelloExtracorsaFunzionante, cancelloAltriRischi, cancelloRischi, cancelloCosteFunzionanti, cancelloCoste, cancelloImpatto\n    //CANCELLI AUTOMATICI\n    if(prodType.equals(\"CANCELLI AUTOMATICI\")){\n        //1. CANCELLO_MACCHINA_UOMO_PRESENTE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_MACCHINA_UOMO_PRESENTE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_MACCHINA_UOMO_PRESENTE\").createMutable()\n            cancelloUomoPresente = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloUomoPresente: \" + cancelloUomoPresente\n\n        //2. CANCELLO_DISPOSITIVI_ANTICADUTA\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_DISPOSITIVI_ANTICADUTA\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_DISPOSITIVI_ANTICADUTA\").createMutable()\n            cancelloAnticaduta = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloAnticaduta: \" + cancelloAnticaduta\n\n        //3. CANCELLO_ANTICADUTA_FUNZIONANTE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ANTICADUTA_FUNZIONANTE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ANTICADUTA_FUNZIONANTE\").createMutable()\n            cancelloAnticadutaFunzionante = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloAnticadutaFunzionante: \" + cancelloAnticadutaFunzionante\n\n        //4. CANCELLO_ARRESTO_EXTRACORSA\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ARRESTO_EXTRACORSA\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ARRESTO_EXTRACORSA\").createMutable()\n            cancelloExtracorsa = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloExtracorsa: \" + cancelloExtracorsa\n\n        //5. CANCELLO_ARRESTO_EXTRACORSA_FUNZIONANTI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ARRESTO_EXTRACORSA_FUNZIONANTI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ARRESTO_EXTRACORSA_FUNZIONANTI\").createMutable()\n            cancelloExtracorsaFunzionante = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloExtracorsaFunzionante: \" + cancelloExtracorsaFunzionante\n\n        //6. CANCELLO_ALTRI_RISCHI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ALTRI_RISCHI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ALTRI_RISCHI\").createMutable()\n            cancelloAltriRischi = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloAltriRischi: \" + cancelloAltriRischi\n\n        //7. CANCELLO_RISCHI_RILEVATI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_RISCHI_RILEVATI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_RISCHI_RILEVATI\").createMutable()\n            cancelloRischi = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloRischi: \" + cancelloRischi\n\n        //8. CANCELLO_COSTE_SICUREZZA\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_COSTE_SICUREZZA\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_COSTE_SICUREZZA\").createMutable()\n            cancelloCoste = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloCoste: \" + cancelloCoste\n\n        //9. CANCELLO_COSTE_FUNZIONANTI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_COSTE_FUNZIONANTI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_COSTE_FUNZIONANTI\").createMutable()\n            cancelloCosteFunzionanti = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloCosteFunzionanti: \" + cancelloCosteFunzionanti\n\n        //10. CANCELLO_VALORE_IMPATTO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_FORZA_IMPATTO_NEI_LIMITI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_FORZA_IMPATTO_NEI_LIMITI\").createMutable()\n            cancelloImpatto = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloImpatto: \" + cancelloImpatto\n\n        if(cancelloUomoPresente.toString().equals(\"SI\") &amp;&amp; \n           (\n               cancelloAnticaduta.toString().equals(\"NO\") || \n               (cancelloAnticaduta.toString().equals(\"SI\") &amp;&amp; cancelloAnticadutaFunzionante.toString().equals(\"NO\")) || \n               cancelloExtracorsa.toString().equals(\"NO\") || \n               (cancelloExtracorsa.toString().equals(\"SI\") &amp;&amp; cancelloExtracorsaFunzionante.toString().equals(\"NO\")) ||\n               cancelloAltriRischi.toString().equals(\"SI\")\n           ))\n        {\n            risk = true\n        }\n\n        if(cancelloUomoPresente.toString().equals(\"NO\") &amp;&amp; \n           (\n               cancelloRischi != null || \n               cancelloCoste.toString().equals(\"NO\") ||\n               (cancelloCoste.toString().equals(\"SI\") &amp;&amp; cancelloCosteFunzionanti.toString().equals(\"NO\")) || \n               cancelloAnticaduta.toString().equals(\"NO\") || \n               (cancelloAnticaduta.toString().equals(\"SI\") &amp;&amp; cancelloAnticadutaFunzionante.toString().equals(\"NO\")) || \n               cancelloExtracorsa.toString().equals(\"NO\") || \n               (cancelloExtracorsa.toString().equals(\"SI\") &amp;&amp; cancelloExtracorsaFunzionante.toString().equals(\"NO\")) ||\n               cancelloAltriRischi.toString().equals(\"SI\") ||\n               cancelloImpatto.toString().equals(\"NO\")\n           ))\n        {\n            risk = true\n        }\n\n\n        if (risk){\n            status = \"RISK_DETECTED\"\n        }else{\n            status = \"RISK_ANALYSIS_OK\"\n        }\n        log.debug \"status: \" + status\n        def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n        def mi = (MutableIssue) issue\n\n        fieldConfig = pmstatus.getRelevantConfig(issue)\n        //log.warn \"fieldConfig: \" + fieldConfig\n        cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == status }\n\n        pmstatus.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(pmstatus), cfNewValue), new DefaultIssueChangeHolder())\n        issueIndexingService.reIndex(issue)\n\n    }\n    def barrieraUomoPresente, barrieraRischi, barrieraAltriRischi, barrieraFotocellule, barrieraFotocelluleFunzionanti, barrieraPassaggioPedonale, barrieraPassaggioPedonaleSegnalato, barrieraInversione, barrieraImpatto\n    //BARRIERE\n    if(prodType.equals(\"BARRIERE\")){\n        //1. BARRIERA_MACCHINA_UOMO_PRESENTE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_MACCHINA_UOMO_PRESENTE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_MACCHINA_UOMO_PRESENTE\").createMutable()\n            barrieraUomoPresente = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraUomoPresente: \" + barrieraUomoPresente\n\n        //2. BARRIERA_ALTRI_RISCHI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_ALTRI_RISCHI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_ALTRI_RISCHI\").createMutable()\n            barrieraAltriRischi = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraAltriRischi: \" + barrieraAltriRischi\n        \n        //3. BARRIERA_RISCHI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_RISCHI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_RISCHI\").createMutable()\n            barrieraRischi = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraRischi: \" + barrieraRischi\n        \n        //4. BARRIERA_FOTOCELLULE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_FOTOCELLULE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_FOTOCELLULE\").createMutable()\n            barrieraFotocellule = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraFotocellule: \" + barrieraFotocellule\n\n        //5. CANCELLO_ANTICADUTA_FUNZIONANTE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_FOTOCELLULE_FUNZIONANTI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_FOTOCELLULE_FUNZIONANTI\").createMutable()\n            barrieraFotocelluleFunzionanti = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraFotocelluleFunzionanti: \" + barrieraFotocelluleFunzionanti\n\n        //6. BARRIERA_PASSAGGIO_PEDONALE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_PASSAGGIO_PEDONALE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_PASSAGGIO_PEDONALE\").createMutable()\n            barrieraPassaggioPedonale = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraPassaggioPedonale: \" + barrieraPassaggioPedonale\n        \n        //7. BARRIERA_PASSAGGIO_PEDONALE_SEGREGATO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_PASSAGGIO_PEDONALE_SEGREGATO\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_PASSAGGIO_PEDONALE_SEGREGATO\").createMutable()\n            barrieraPassaggioPedonaleSegnalato = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraPassaggioPedonaleSegnalato: \" + barrieraPassaggioPedonaleSegnalato\n        \n        //8. BARRIERA_INVERSIONE_SU_OSTACOLO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_INVERSIONE_SU_OSTACOLO\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_INVERSIONE_SU_OSTACOLO\").createMutable()\n            barrieraInversione = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraInversione: \" + barrieraInversione\n        \n        //9. BARRIERA_VALORE_IMPATTO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_VALORE_IMPATTO\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_VALORE_IMPATTO\").createMutable()\n            barrieraImpatto = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraImpatto: \" + barrieraImpatto\n\n        if(barrieraUomoPresente.toString().equals(\"SI\") &amp;&amp; barrieraAltriRischi.toString().equals(\"SI\"))\n        {\n            risk = true\n        }\n\n        if(barrieraUomoPresente.toString().equals(\"NO\") &amp;&amp; \n           (\n               barrieraRischi != null || \n               barrieraFotocellule.toString().equals(\"NO\") ||\n               (barrieraFotocellule.toString().equals(\"SI\") &amp;&amp; barrieraFotocelluleFunzionanti.toString().equals(\"NO\")) || \n               barrieraPassaggioPedonale.toString().equals(\"NO\") || \n               (barrieraPassaggioPedonale.toString().equals(\"SI\") &amp;&amp; barrieraPassaggioPedonaleSegnalato.toString().equals(\"NO\")) || \n               barrieraInversione.toString().equals(\"NO\") || \n               barrieraAltriRischi.toString().equals(\"SI\") ||\n               barrieraImpatto.toString().equals(\"NO\")\n           ))\n        {\n            risk = true\n        }\n\n\n        if (risk){\n            status = \"RISK_DETECTED\"\n        }else{\n            status = \"RISK_ANALYSIS_OK\"\n        }\n        log.debug \"status: \" + status\n        def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n        def mi = (MutableIssue) issue\n\n        fieldConfig = pmstatus.getRelevantConfig(issue)\n        //log.warn \"fieldConfig: \" + fieldConfig\n        cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == status }\n\n        pmstatus.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(pmstatus), cfNewValue), new DefaultIssueChangeHolder())\n        issueIndexingService.reIndex(issue)\n    }\n    \n    if(tobeStopped){\n        fieldConfig = pmStopAsset.getRelevantConfig(issue)\n        //log.warn \"fieldConfig: \" + fieldConfig\n        cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"YES\" }\n\n        pmStopAsset.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(pmStopAsset), cfNewValue), new DefaultIssueChangeHolder())\n        issueIndexingService.reIndex(issue)\n    }else{\n        fieldConfig = pmStopAsset.getRelevantConfig(issue)\n        //log.warn \"fieldConfig: \" + fieldConfig\n        cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"NO\" }\n\n        pmStopAsset.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(pmStopAsset), cfNewValue), new DefaultIssueChangeHolder())\n        issueIndexingService.reIndex(issue)\n    }\n\n}","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="v+nWù">¶»ž</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="121" name="Back to Conf&amp;Planned">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <results>
            <unconditional-result old-status="žée" status="žée" step="3">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="341" name="Genera Operazioni di Manutenzione ODS">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">7837ddc9-2bc7-4753-a1ad-2f15075bbddc</arg>
                <arg name="FIELD_NOTES">PM Task senza PM operations NON ASSISTANT (i tkt assistant NON devono ripetere le PM Operations)</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="v+nWù">false</arg>
                <arg name="FIELD_CONDITION">{"script":"import com.atlassian.jira.issue.Issue\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport org.apache.log4j.Category\r\nimport groovy.json.JsonBuilder\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\nimport com.atlassian.jira.issue.IssueManager\r\nimport com.atlassian.jira.issue.ModifiedValue\r\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\r\nimport java.text.SimpleDateFormat;\r\nimport com.atlassian.jira.issue.index.IssueIndexingService\r\n\r\ndef assignedTo =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_ASSIGNED_TO\")[0]\r\ndef pmOperations =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_PM_OPERATIONS_ODS\")[0]\r\nlog.debug \"issue.getCustomFieldValue(assignedTo): \" + issue.getParentObject().getCustomFieldValue(assignedTo)\r\n\r\nissue.getCustomFieldValue(pmOperations) == null &amp;&amp; (issue.getParentObject().getCustomFieldValue(assignedTo) == null || !issue.getParentObject().getCustomFieldValue(assignedTo).toString().equals(\"ASSISTANT\"))","scriptPath":null}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">8b9939c3-4e05-46fa-a583-7e053e5251af</arg>
              <arg name="FIELD_NOTES">PM Task: genera operazioni di manutenzione</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\r\nimport groovy.json.StreamingJsonBuilder;\r\nimport com.atlassian.jira.issue.CustomFieldManager;\r\nimport com.atlassian.jira.issue.fields.CustomField;\r\nimport com.atlassian.jira.issue.IssueManager;\r\nimport com.atlassian.jira.component.ComponentAccessor;\r\nimport com.atlassian.jira.issue.Issue;\r\nimport com.atlassian.jira.issue.MutableIssue\r\nimport org.apache.commons.codec.binary.Base64;\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport org.apache.log4j.Category\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\nimport com.atlassian.jira.issue.index.IssueIndexingService\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\nlog.setLevel(org.apache.log4j.Level.DEBUG)\r\n\r\nIssueManager issueManager = ComponentAccessor.getIssueManager();\r\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\r\ndef requestMethod\r\ndef baseURL\r\n\r\ndef pmOperations = issue.getCustomFieldValue(ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_PM_OPERATIONS_ODS\")[0])\r\nif(pmOperations == null){\r\n\r\n    /* REST API per pulizia cache issue linkata */\r\n    requestMethod = \"PUT\";\r\n    /*Script Variables*/\r\n    //Per test da console\r\n    //Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-32535\")\r\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/pm-subtask/\" + issue.key + \"/operations\"\r\n    URL url = new URL(baseURL)\r\n    HttpURLConnection connection = (HttpURLConnection)url.openConnection();\r\n    connection.setRequestMethod(requestMethod);\r\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n    connection.setRequestProperty(\"Accept\", \"*/*\");\r\n    connection.setDoOutput(true);\r\n    connection.setDoInput(true);\r\n    connection.connect();\r\n    log.debug \"url: \" + url\r\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\r\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\r\n\r\n    if (!connection.getResponseCode().toString().equals(\"200\")){\r\n        log.debug \"url: \" + url\r\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\r\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\r\n    }\r\n    IssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\r\n    issueIndexingService.reIndex(issue)\r\n}","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">0870052d-fbad-4ee4-aa1a-8d4cacc9726e</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.issue.fields.CustomField\r\nimport com.atlassian.jira.issue.CustomFieldManager\r\nimport com.atlassian.jira.workflow.JiraWorkflow\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenLayoutItem\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenTab\r\nimport com.atlassian.jira.issue.fields.FieldManager\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreen\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenManager\r\nimport com.opensymphony.workflow.loader.ActionDescriptor\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.workflow.WorkflowManager\r\nimport groovy.json.StreamingJsonBuilder;\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner;\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl;\r\n\r\ndef requestMethod\r\ndef baseURL\r\ndef responseCode\r\ndef responseMessage\r\ndef bodyReq = []\r\ndef br\r\nMap&lt;String, Object&gt; customFieldMap = new HashMap&lt;String,Object&gt;();\r\n\r\ntry {\r\n    Properties properties = new Properties()\r\n    File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\r\n    propertiesFile.withInputStream {\r\n        properties.load(it)\r\n    }\r\n\r\n    def serverBase = String.format(\"http://%s/op\", properties['api.env'])\r\n    def transactionAction = \"validators\"\r\n\r\n    URL url\r\n    HttpURLConnection connection\r\n    requestMethod = \"POST\";\r\n\r\n    baseURL = String.format(\"%s/rest/jira/workflows/%s/%s\", serverBase, transientVars.actionId, transactionAction);\r\n\r\n    log.debug baseURL;\r\n\r\n    WorkflowManager workflowManager = ComponentAccessor.getWorkflowManager();\r\n    JiraWorkflow jiraWorkflow = workflowManager.getWorkflow(transientVars.issue);\r\n\r\n    CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\r\n    \r\n    log.debug jiraWorkflow.getName();\r\n    \r\n    ActionDescriptor ad = workflowManager.getActionDescriptor(transientVars.issue, transientVars.actionId);\r\n\r\n    log.debug ad.getName()              //Genera Operazioni di Manutenzione ODS\r\n    log.debug ad.getMetaAttributes()    //{opsbar-sequence=10, jira.description=, jira.fieldscreen.id=19910}\r\n\r\n    def adMeta = ad.getMetaAttributes();\r\n    def fieldScreenId = adMeta.get(\"jira.fieldscreen.id\");\r\n    log.debug \"Field screen id: \" + fieldScreenId\r\n\r\n    if(fieldScreenId != null &amp;&amp; fieldScreenId != \"\") {\r\n        FieldScreenManager fieldScreenManager = ComponentAccessor.getComponent(FieldScreenManager.class);\r\n        FieldScreen fieldScreen = fieldScreenManager.getFieldScreen(Long.valueOf(fieldScreenId.toString()));\r\n        List&lt;FieldScreenTab&gt; fsts = fieldScreen.getTabs();\r\n        for (FieldScreenTab fst : fsts) {\r\n            List&lt;FieldScreenLayoutItem&gt; qwe = fst.getFieldScreenLayoutItems();\r\n            for (FieldScreenLayoutItem fsli : qwe) {\r\n                if (fsli.getFieldId() == null) {\r\n                    continue;\r\n                }\r\n                CustomField customField = customFieldManager.getCustomFieldObject(fsli.getFieldId());\r\n                if (customField == null) {\r\n                    continue;\r\n                }\r\n                def customFieldValue = issue.getCustomFieldValue(customField);\r\n                customFieldMap.put(fsli.getFieldId(), customFieldValue == null ? null : customFieldValue.toString());\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        customFieldMap = null;\r\n    }\r\n    log.debug customFieldMap\r\n\r\n    bodyReq = [ \r\n        \"issueKey\": issue.key,\r\n        \"actionName\": ad.getName(),\r\n        \"jiraWorkflowName\": jiraWorkflow.getName(),\r\n        \"customFieldMap\": customFieldMap,\r\n        \"properties\": properties\r\n    ] \r\n\r\n    log.debug \"baseURL SN: \" + baseURL\r\n    log.debug \"bodyReq SN: \" + bodyReq\r\n\r\n    url = new URL(baseURL)\r\n    connection = (HttpURLConnection)url.openConnection();\r\n    connection.setRequestMethod(requestMethod);\r\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n    connection.setRequestProperty(\"Accept\", \"*/*\");\r\n    connection.setDoOutput(true);\r\n    connection.setDoInput(true);\r\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, bodyReq) }\r\n    \r\n    connection.connect();\r\n    responseCode = connection.getResponseCode().toString()    \r\n        \r\n    log.debug \"Response HttpStatusCode: \" + responseCode\r\n        \r\n    // If backend replies with 200 then the condition is passed    \r\n    if(\"200\".equals(responseCode)){\r\n        log.debug \"OK\"\r\n    } else {\r\n        //This is a backend error.. log\r\n        log.debug \"Backend error\"\r\n\r\n        def output = new ArrayList()\r\n        def eList = new ArrayList()\r\n        def eListErrors = new ArrayList()\r\n        def errorMsgs = new ArrayList()\r\n\r\n        eListErrors.add(\"E\")\r\n        eListErrors.add(\"ERROR\") //if dynamic, better\r\n        eListErrors.add(null)   //it sounds it is used as separator\r\n\r\n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\r\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\r\n\r\n        def jsonSlurper = new JsonSlurper()\r\n        def json_object = jsonSlurper.parseText(outputMsg)\r\n        if(json_object instanceof Map){\r\n            //errorMsgs.add(connection.getResponseCode() + \" \" + json_object.message)\r\n            if(json_object.errors instanceof List){\r\n                for(def cur : (List)json_object.errors){\r\n                    errorMsgs.add(cur.toString())\r\n                }\r\n            } else {\r\n                errorMsgs.add(json_object.errors.toString())\r\n            }            \r\n        }\r\n        eListErrors.add(errorMsgs)\r\n        eList.add(eListErrors)\r\n\r\n        output.add(eList)\r\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\r\n    }\r\n} catch (Exception e){\r\n    //This is an exception in the script\r\n    log.debug \"Exception raised\"\r\n    log.error e\r\n    if(e instanceof InvalidInputException){\r\n        throw e;\r\n    }\r\n    throw new InvalidInputException(\"Validators failed\");\r\n}\r\n","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="Not Done" status="‰Þ" step="7">
              <post-functions>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="8" name="&#09;©‹zWù">
      <meta name="jira.status.id">11728</meta>
      <actions>
        <action id="251" name="Recupera Ticket">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <results>
            <unconditional-result old-status="žée" status="žée" step="6">
              <post-functions>
                <function type="class">
                  <arg name="field.name">resolution</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
                  <arg name="field.value" />
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="321" name="Set Security">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">1b7d5faf-f701-433b-bfff-28879be13db0</arg>
                <arg name="FIELD_INVERT_CONDITION" />
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_USER_IDS">arianna.fabbri|||JIRAUSER58800</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="8">
              <post-functions>
                <function type="class">
                  <arg name="FIELD_SECURITY_LEVEL_ID">11600</arg>
                  <arg name="FIELD_FUNCTION_ID">006f388b-2114-4b75-aba7-ff0b7afc0cb2</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
                  <arg name="FIELD_CONDITION" />
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="9" name="EèÞr×">
      <meta name="jira.status.id">11436</meta>
      <actions>
        <action id="301" name="Set Security">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">1b7d5faf-f701-433b-bfff-28879be13db0</arg>
                <arg name="FIELD_INVERT_CONDITION" />
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_USER_IDS">arianna.fabbri|||JIRAUSER58800</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="9">
              <post-functions>
                <function type="class">
                  <arg name="FIELD_SECURITY_LEVEL_ID">11600</arg>
                  <arg name="FIELD_FUNCTION_ID">006f388b-2114-4b75-aba7-ff0b7afc0cb2</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
                  <arg name="FIELD_CONDITION" />
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="10" name="Risks Assessment">
      <meta name="jira.status.id">15228</meta>
      <actions>
<common-action id="41" />
<common-action id="201" />
        <action id="351" name="Genera Operazioni di Manutenzione ODS">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">552ba1da-de56-4386-aba4-d68c6b072866</arg>
                <arg name="FIELD_NOTES">PM Task senza PM operations NON ASSISTANT (i tkt assistant NON devono ripetere le PM Operations)</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="v+nWù">false</arg>
                <arg name="FIELD_CONDITION">{"script":"import com.atlassian.jira.issue.Issue\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport org.apache.log4j.Category\r\nimport groovy.json.JsonBuilder\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\nimport com.atlassian.jira.issue.IssueManager\r\nimport com.atlassian.jira.issue.ModifiedValue\r\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\r\nimport java.text.SimpleDateFormat;\r\nimport com.atlassian.jira.issue.index.IssueIndexingService\r\n\r\ndef assignedTo =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_ASSIGNED_TO\")[0]\r\ndef pmOperations =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_PM_OPERATIONS_ODS\")[0]\r\nlog.debug \"issue.getCustomFieldValue(assignedTo): \" + issue.getParentObject().getCustomFieldValue(assignedTo)\r\n\r\nissue.getCustomFieldValue(pmOperations) == null &amp;&amp; (issue.getParentObject().getCustomFieldValue(assignedTo) == null || !issue.getParentObject().getCustomFieldValue(assignedTo).toString().equals(\"ASSISTANT\"))","scriptPath":null}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">108a0c19-913e-4bc0-b3cc-ca4f9f18411f</arg>
              <arg name="FIELD_NOTES">PM Task: genera operazioni di manutenzione</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\r\nimport groovy.json.StreamingJsonBuilder;\r\nimport com.atlassian.jira.issue.CustomFieldManager;\r\nimport com.atlassian.jira.issue.fields.CustomField;\r\nimport com.atlassian.jira.issue.IssueManager;\r\nimport com.atlassian.jira.component.ComponentAccessor;\r\nimport com.atlassian.jira.issue.Issue;\r\nimport com.atlassian.jira.issue.MutableIssue\r\nimport org.apache.commons.codec.binary.Base64;\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport org.apache.log4j.Category\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\nimport com.atlassian.jira.issue.index.IssueIndexingService\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\nlog.setLevel(org.apache.log4j.Level.DEBUG)\r\n\r\nIssueManager issueManager = ComponentAccessor.getIssueManager();\r\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\r\ndef requestMethod\r\ndef baseURL\r\n\r\ndef pmOperations = issue.getCustomFieldValue(ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_PM_OPERATIONS_ODS\")[0])\r\nif(pmOperations == null){\r\n\r\n    /* REST API per pulizia cache issue linkata */\r\n    requestMethod = \"PUT\";\r\n    /*Script Variables*/\r\n    //Per test da console\r\n    //Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-32535\")\r\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/pm-subtask/\" + issue.key + \"/operations\"\r\n    URL url = new URL(baseURL)\r\n    HttpURLConnection connection = (HttpURLConnection)url.openConnection();\r\n    connection.setRequestMethod(requestMethod);\r\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n    connection.setRequestProperty(\"Accept\", \"*/*\");\r\n    connection.setDoOutput(true);\r\n    connection.setDoInput(true);\r\n    connection.connect();\r\n    log.debug \"url: \" + url\r\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\r\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\r\n\r\n    if (!connection.getResponseCode().toString().equals(\"200\")){\r\n        log.debug \"url: \" + url\r\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\r\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\r\n    }\r\n    IssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\r\n    issueIndexingService.reIndex(issue)\r\n}","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">2a6bb4a1-8923-479f-a196-7b64e7901962</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.issue.fields.CustomField\r\nimport com.atlassian.jira.issue.CustomFieldManager\r\nimport com.atlassian.jira.workflow.JiraWorkflow\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenLayoutItem\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenTab\r\nimport com.atlassian.jira.issue.fields.FieldManager\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreen\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenManager\r\nimport com.opensymphony.workflow.loader.ActionDescriptor\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.workflow.WorkflowManager\r\nimport groovy.json.StreamingJsonBuilder;\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner;\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl;\r\n\r\ndef requestMethod\r\ndef baseURL\r\ndef responseCode\r\ndef responseMessage\r\ndef bodyReq = []\r\ndef br\r\nMap&lt;String, Object&gt; customFieldMap = new HashMap&lt;String,Object&gt;();\r\n\r\ntry {\r\n    Properties properties = new Properties()\r\n    File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\r\n    propertiesFile.withInputStream {\r\n        properties.load(it)\r\n    }\r\n\r\n    def serverBase = String.format(\"http://%s/op\", properties['api.env'])\r\n    def transactionAction = \"validators\"\r\n\r\n    URL url\r\n    HttpURLConnection connection\r\n    requestMethod = \"POST\";\r\n\r\n    baseURL = String.format(\"%s/rest/jira/workflows/%s/%s\", serverBase, transientVars.actionId, transactionAction);\r\n\r\n    log.debug baseURL;\r\n\r\n    WorkflowManager workflowManager = ComponentAccessor.getWorkflowManager();\r\n    JiraWorkflow jiraWorkflow = workflowManager.getWorkflow(transientVars.issue);\r\n\r\n    CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\r\n    \r\n    log.debug jiraWorkflow.getName();\r\n    \r\n    ActionDescriptor ad = workflowManager.getActionDescriptor(transientVars.issue, transientVars.actionId);\r\n\r\n    log.debug ad.getName()              //Genera Operazioni di Manutenzione ODS\r\n    log.debug ad.getMetaAttributes()    //{opsbar-sequence=10, jira.description=, jira.fieldscreen.id=19910}\r\n\r\n    def adMeta = ad.getMetaAttributes();\r\n    def fieldScreenId = adMeta.get(\"jira.fieldscreen.id\");\r\n    log.debug \"Field screen id: \" + fieldScreenId\r\n\r\n    if(fieldScreenId != null &amp;&amp; fieldScreenId != \"\") {\r\n        FieldScreenManager fieldScreenManager = ComponentAccessor.getComponent(FieldScreenManager.class);\r\n        FieldScreen fieldScreen = fieldScreenManager.getFieldScreen(Long.valueOf(fieldScreenId.toString()));\r\n        List&lt;FieldScreenTab&gt; fsts = fieldScreen.getTabs();\r\n        for (FieldScreenTab fst : fsts) {\r\n            List&lt;FieldScreenLayoutItem&gt; qwe = fst.getFieldScreenLayoutItems();\r\n            for (FieldScreenLayoutItem fsli : qwe) {\r\n                if (fsli.getFieldId() == null) {\r\n                    continue;\r\n                }\r\n                CustomField customField = customFieldManager.getCustomFieldObject(fsli.getFieldId());\r\n                if (customField == null) {\r\n                    continue;\r\n                }\r\n                def customFieldValue = issue.getCustomFieldValue(customField);\r\n                customFieldMap.put(fsli.getFieldId(), customFieldValue == null ? null : customFieldValue.toString());\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        customFieldMap = null;\r\n    }\r\n    log.debug customFieldMap\r\n\r\n    bodyReq = [ \r\n        \"issueKey\": issue.key,\r\n        \"actionName\": ad.getName(),\r\n        \"jiraWorkflowName\": jiraWorkflow.getName(),\r\n        \"customFieldMap\": customFieldMap,\r\n        \"properties\": properties\r\n    ] \r\n\r\n    log.debug \"baseURL SN: \" + baseURL\r\n    log.debug \"bodyReq SN: \" + bodyReq\r\n\r\n    url = new URL(baseURL)\r\n    connection = (HttpURLConnection)url.openConnection();\r\n    connection.setRequestMethod(requestMethod);\r\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n    connection.setRequestProperty(\"Accept\", \"*/*\");\r\n    connection.setDoOutput(true);\r\n    connection.setDoInput(true);\r\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, bodyReq) }\r\n    \r\n    connection.connect();\r\n    responseCode = connection.getResponseCode().toString()    \r\n        \r\n    log.debug \"Response HttpStatusCode: \" + responseCode\r\n        \r\n    // If backend replies with 200 then the condition is passed    \r\n    if(\"200\".equals(responseCode)){\r\n        log.debug \"OK\"\r\n    } else {\r\n        //This is a backend error.. log\r\n        log.debug \"Backend error\"\r\n\r\n        def output = new ArrayList()\r\n        def eList = new ArrayList()\r\n        def eListErrors = new ArrayList()\r\n        def errorMsgs = new ArrayList()\r\n\r\n        eListErrors.add(\"E\")\r\n        eListErrors.add(\"ERROR\") //if dynamic, better\r\n        eListErrors.add(null)   //it sounds it is used as separator\r\n\r\n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\r\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\r\n\r\n        def jsonSlurper = new JsonSlurper()\r\n        def json_object = jsonSlurper.parseText(outputMsg)\r\n        if(json_object instanceof Map){\r\n            //errorMsgs.add(connection.getResponseCode() + \" \" + json_object.message)\r\n            if(json_object.errors instanceof List){\r\n                for(def cur : (List)json_object.errors){\r\n                    errorMsgs.add(cur.toString())\r\n                }\r\n            } else {\r\n                errorMsgs.add(json_object.errors.toString())\r\n            }            \r\n        }\r\n        eListErrors.add(errorMsgs)\r\n        eList.add(eListErrors)\r\n\r\n        output.add(eList)\r\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\r\n    }\r\n} catch (Exception e){\r\n    //This is an exception in the script\r\n    log.debug \"Exception raised\"\r\n    log.error e\r\n    if(e instanceof InvalidInputException){\r\n        throw e;\r\n    }\r\n    throw new InvalidInputException(\"Validators failed\");\r\n}\r\n","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="Not Done" status="‰Þ" step="10">
              <post-functions>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="11" name="Removed">
      <meta name="jira.status.id">15327</meta>
      <actions>
        <action id="311" name="Set Security">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">1b7d5faf-f701-433b-bfff-28879be13db0</arg>
                <arg name="FIELD_INVERT_CONDITION" />
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_USER_IDS">arianna.fabbri|||JIRAUSER58800</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="11">
              <post-functions>
                <function type="class">
                  <arg name="FIELD_SECURITY_LEVEL_ID">11600</arg>
                  <arg name="FIELD_FUNCTION_ID">006f388b-2114-4b75-aba7-ff0b7afc0cb2</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
                  <arg name="FIELD_CONDITION" />
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
  </steps>
</workflow>