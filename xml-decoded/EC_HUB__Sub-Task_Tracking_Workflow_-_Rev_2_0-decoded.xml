<?xml version='1.0' encoding='UTF-8'?>
<workflow>
  <meta name="jira.description">Progress-Done Workflow</meta>
  <meta name="jira.update.author.key">arianna.fabbri</meta>
  <meta name="jira.updated.date">1634568045475</meta>
  <initial-actions>
    <action id="1" name="Create">
      <validators>
        <validator name="" type="class">
          <arg name="permission">Create Issue</arg>
          <arg name="class.name">com.atlassian.jira.workflow.validator.PermissionValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="hidFieldsList">assignee@@</arg>
          <arg name="class.name">com.googlecode.jsu.workflow.validator.FieldsRequiredValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="permissionKey">ASSIGN_ISSUES</arg>
          <arg name="class.name">com.atlassian.jira.workflow.validator.PermissionValidator</arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="žée" status="¢—§" step="4">
          <post-functions>
            <function type="class">
              <arg name="FIELD_SECURITY_LEVEL_ID">10500</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
              <arg name="FIELD_CONDITION">issue.getProjectObject().key == 'DPEC'</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueCreateFunction</arg>
            </function>
            <function type="class">
              <arg name="FIELD_NOTES" />
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
              <arg name="FIELD_INLINE_SCRIPT" />
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_SCRIPT_FILE">customScripts\EC_UpdateVisibilityGroups.groovy</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">1</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </initial-actions>
  <common-actions>
    <action id="21" name="ReOpen" view="fieldscreen">
      <meta name="jira.description" />
      <meta name="jira.fieldscreen.id">11613</meta>
      <restrict-to>
        <conditions>
          <condition type="class">
            <arg name="jira.projectrole.id">10002</arg>
            <arg name="class.name">com.atlassian.jira.workflow.condition.InProjectRoleCondition</arg>
          </condition>
        </conditions>
      </restrict-to>
      <results>
        <unconditional-result old-status="žée" status="žée" step="2">
          <post-functions>
            <function type="class">
              <arg name="field.name">resolution</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
              <arg name="field.value" />
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="field.name">customfield_13210</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="field.value">%%CURRENT_DATETIME%%</arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
            </function>
            <function type="class">
              <arg name="field.name">customfield_13200</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="field.value">%%CURRENT_DATETIME%%</arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="41" name="Back to Open">
      <meta name="jira.description" />
      <meta name="jira.fieldscreen.id" />
      <results>
        <unconditional-result old-status="žée" status="žée" step="4">
          <post-functions>
            <function type="class">
              <arg name="field.name">resolution</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
              <arg name="field.value" />
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
            </function>
            <function type="class">
              <arg name="field.name">jË"w</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
              <arg name="field.value" />
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="61" name="Back to To Do">
      <meta name="jira.description" />
      <meta name="jira.fieldscreen.id" />
      <results>
        <unconditional-result old-status="žée" status="žée" step="5">
          <post-functions>
            <function type="class">
              <arg name="field.name">resolution</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
              <arg name="field.value" />
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="31" name="Start Progress" view="fieldscreen">
      <meta name="jira.description" />
      <meta name="jira.fieldscreen.id">11613</meta>
      <results>
        <unconditional-result old-status="žée" status="žée" step="2">
          <post-functions>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </common-actions>
  <steps>
    <step id="2" name="In Progress">
      <meta name="jira.status.id">3</meta>
      <actions>
        <action id="11" name="‰Þ" view="fieldscreen">
          <meta name="jira.field.resolution.include">6,10005,4,5</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20123</meta>
          <restrict-to>
            <conditions type="OR">
              <condition type="class">
                <arg name="class.name">com.atlassian.jira.workflow.condition.AllowOnlyAssignee</arg>
              </condition>
              <condition type="class">
                <arg name="jira.projectrole.id">10002</arg>
                <arg name="class.name">com.atlassian.jira.workflow.condition.InProjectRoleCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="contextHandling" />
              <arg name="hidFieldsList">timespent@@</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="class.name">com.googlecode.jsu.workflow.validator.FieldsRequiredValidator</arg>
              <arg name="customErrorMessage-textValue" />
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="3">
              <post-functions>
                <function type="class">
                  <arg name="field.name">resolution</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
                  <arg name="field.value">6</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">76b49328-6f15-4c6a-acfd-99c94b694482</arg>
                  <arg name="FIELD_NOTES">EC HUB: Transition next sub-task to TO DO</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.bc.issue.IssueService;\nimport com.atlassian.jira.issue.IssueInputParametersImpl;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.Level;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.event.issue.IssueEventBundle;\nimport com.atlassian.jira.event.issue.IssueEventManager;\nimport com.atlassian.jira.event.issue.IssueEventBundleFactory;\nimport com.atlassian.jira.event.issue.IssueEvent;\nimport com.opensymphony.workflow.WorkflowContext\nimport com.atlassian.jira.workflow.WorkflowTransitionUtil;\nimport com.atlassian.jira.workflow.WorkflowTransitionUtilImpl;\nimport com.atlassian.jira.util.JiraUtils;\nimport com.opensymphony.workflow.loader.StepDescriptor;\nimport com.atlassian.jira.*;\nimport com.atlassian.jira.workflow.WorkflowManager;\nimport com.atlassian.jira.workflow.JiraWorkflow;\nimport com.opensymphony.workflow.loader.ActionDescriptor;\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.issue.link.IssueLink\n\nlog.level = Level.DEBUG\n\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\")\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass)\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\")\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass)\ndef customFieldManager = ComponentAccessor.getCustomFieldManager()\ndef subTaskManager = ComponentAccessor.getSubTaskManager()\ndef issueManager = ComponentAccessor.getIssueManager()\ndef issueEventManager = ComponentAccessor.getIssueEventManager()\ndef user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n//Issue issue = issueManager.getIssueObject('EC-9852')\n\n//ID of \"HUB Engineering Cell\" Insight Schema\nint schemaId = 30\n\ndef activity=issue.getCustomFieldValue(customFieldManager.getCustomFieldObjectsByName(\"EC_ACTIVITY_REF\")[0]);\nactivity=activity[0].toString().substring(0,activity[0].toString().lastIndexOf('(')-1)\n\ndef parentIssue=issue.getParentObject()\ndef subTaskIssueLinks = parentIssue.getSubTaskObjects()\ndef ecNumber = customFieldManager.getCustomFieldObjectsByName(\"EC Number\")[0]\ndef minIndex=0\ndef issueToTransition = new ArrayList()\ndef toBeFinishedBefore = null, canBeMoved=true, matWFdepending=false\ndef issueToBeCompleted = new ArrayList()\n\ndef objects = iqlFacade.findObjectsByIQLAndSchema(schemaId, \"objectType=Activities AND TRIGGERED_BY IN (\\\"\" + activity + \"\\\") ORDER BY INDEX ASC\");\n\nif (objects != null &amp;&amp; objects.size() &gt; 0){\n    for(act in objects){\n        def actIndex = objectFacade.loadObjectAttributeBean(act.getId(), \"INDEX\") ? objectFacade.loadObjectAttributeBean(act.getId(), \"INDEX\").getObjectAttributeValueBeans() : null;\n\t\tactIndex = actIndex.value[0]\n        if(minIndex==0 &amp;&amp; actIndex&gt;minIndex){\n            for(st in subTaskIssueLinks){\n                def stSummary = ComponentAccessor.getIssueManager().getIssueByCurrentKey(st.toString()).getSummary()\n                if(stSummary.equals(parentIssue.getCustomFieldValue(ecNumber).toString() + \" - \" + act.toString().substring(0,act.toString().lastIndexOf('(')-1))){\n                    minIndex=actIndex\n                }\n            }  \n        }\n        act = act.toString().substring(0,act.toString().lastIndexOf('(')-1)\n\n        for(st in subTaskIssueLinks){\n            def currentSubTaskSummary = ComponentAccessor.getIssueManager().getIssueByCurrentKey(st.toString()).getSummary()\n            if(actIndex==minIndex &amp;&amp; currentSubTaskSummary.equals(parentIssue.getCustomFieldValue(ecNumber).toString() + \" - \" + act)){\n\n                def summary = st.summary.substring(11)\n                def actObj = iqlFacade.findObjectsByIQLAndSchema(schemaId, \"objectType=Activities AND Name = \\\"\" + summary + \"\\\"\");\n                if (actObj != null &amp;&amp; actObj.size() &gt; 0){\n                    toBeFinishedBefore = objectFacade.loadObjectAttributeBean(actObj[0].getId(), \"TO_BE_FINISHED_TO_BE_STARTED\") ? objectFacade.loadObjectAttributeBean(actObj[0].getId(), \"TO_BE_FINISHED_TO_BE_STARTED\").getObjectAttributeValueBeans() : null;\n                    matWFdepending = objectFacade.loadObjectAttributeBean(actObj[0].getId(), \"MAT_WORKFLOW_COMPLETED\") ? objectFacade.loadObjectAttributeBean(actObj[0].getId(), \"MAT_WORKFLOW_COMPLETED\").getObjectAttributeValueBeans() : null;\n                    /*Se il task dipende dal completamento dei workflow di tutti gli Involved Codes, verifico lo stato di ciascuno di essi. Se tutti completed ok, se no, non posso procedere.*/\n                    if(matWFdepending!=null &amp;&amp; matWFdepending[0].value){\n                        List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(parentIssue.getId());\n                        for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n                            IssueLink issueLink = (IssueLink) outIterator.next();\n                                def linkedIssue = issueLink.getDestinationObject()\n                                String type = linkedIssue.getIssueType().getName();\n\t\t\t\t\t\t\t\n                            if(type.equals(\"Involved Code\")){\n                                if(linkedIssue.resolution==null){\n                                    canBeMoved=false\n                                }\n                            }\n                        }\n                    }\n                }\n                for (i in toBeFinishedBefore){\n                    def actObjToBeFinished = iqlFacade.findObjectsByIQLAndSchema(schemaId, \"objectType=Activities AND Key = \\\"\" +\"HUBEC-\" + i.value + \"\\\"\");\n                    \n                    for(subt in subTaskIssueLinks){\n                        def currentSubTSummary = ComponentAccessor.getIssueManager().getIssueByCurrentKey(subt.toString()).getSummary()\n            \t\t\tif(currentSubTSummary!=issue.summary &amp;&amp; currentSubTSummary.equals(parentIssue.getCustomFieldValue(ecNumber).toString() + \" - \" + actObjToBeFinished[0].toString().substring(0,actObjToBeFinished[0].toString().lastIndexOf('(')-1))){\n                            if(subt.status.name!=\"Done\"){\n                                log.debug \"l'attivit\u00e0 non pu\u00f2 partire perch\u00e8 almeno una di quelle da chiudere prima \" + currentSubTSummary + \" non \u00e8 completata\"\n                                canBeMoved=false\n                            }\n                        }\n                    }\n                }                \n                if(canBeMoved){\n                    issueToTransition.add(st)\n                }\n            }\n        }\n    }\n}\n\nlog.debug \"Issue to be moved: \" + issueToTransition\n\nint EVENT_ID = 51\nif(issueToTransition.size() &gt; 0){\n\tWorkflowTransitionUtil workflowTransitionUtil = ( WorkflowTransitionUtil ) JiraUtils.loadComponent( WorkflowTransitionUtilImpl.class );\n    for(currIssue in issueToTransition){\n        MutableIssue mi = issueManager.getIssueObject(currIssue.toString());\n        if(mi.status.name==\"Open\"){\n            workflowTransitionUtil.setIssue(mi);\n            workflowTransitionUtil.setAction(EVENT_ID);\n            workflowTransitionUtil.validate();\n            workflowTransitionUtil.progress();                          \n        }\n    }\n}\n\nEVENT_ID = 61\nif(issueToTransition.size() &gt; 0){\n\tWorkflowTransitionUtil workflowTransitionUtil = ( WorkflowTransitionUtil ) JiraUtils.loadComponent( WorkflowTransitionUtilImpl.class );\n    for(currIssue in issueToTransition){\n        MutableIssue mi = issueManager.getIssueObject(currIssue.toString());\n        if(mi.status.name==\"Done\"){\n            workflowTransitionUtil.setIssue(mi);\n            workflowTransitionUtil.setAction(EVENT_ID);\n            workflowTransitionUtil.validate();\n            workflowTransitionUtil.progress();                          \n        }\n    }\n}\n\nEVENT_ID = 61\nif(issueToTransition.size() &gt; 0){\n\tWorkflowTransitionUtil workflowTransitionUtil = ( WorkflowTransitionUtil ) JiraUtils.loadComponent( WorkflowTransitionUtilImpl.class );\n    for(currIssue in issueToTransition){\n        MutableIssue mi = issueManager.getIssueObject(currIssue.toString());\n        if(mi.status.name==\"Failed\"){\n            workflowTransitionUtil.setIssue(mi);\n            workflowTransitionUtil.setAction(EVENT_ID);\n            workflowTransitionUtil.validate();\n            workflowTransitionUtil.progress();                          \n        }\n    }\n}","scriptPath":null}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="field.name">customfield_13200</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                </function>
                <function type="class">
                  <arg name="field.name">customfield_13201</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">10008</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="71" name="Failed" view="fieldscreen">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20123</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">03096f3e-5d4f-4ca1-bdcf-f35330528ae6</arg>
                <arg name="FIELD_NOTES">Enabled only if act has a BACK_TO node</arg>
                <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.bc.issue.IssueService;\nimport com.atlassian.jira.issue.IssueInputParametersImpl;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.Level;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.event.issue.IssueEventBundle;\nimport com.atlassian.jira.event.issue.IssueEventManager;\nimport com.atlassian.jira.event.issue.IssueEventBundleFactory;\nimport com.atlassian.jira.event.issue.IssueEvent;\nimport com.opensymphony.workflow.WorkflowContext\nimport com.atlassian.jira.workflow.WorkflowTransitionUtil;\nimport com.atlassian.jira.workflow.WorkflowTransitionUtilImpl;\nimport com.atlassian.jira.util.JiraUtils;\nimport com.opensymphony.workflow.loader.StepDescriptor;\nimport com.atlassian.jira.*;\nimport com.atlassian.jira.workflow.WorkflowManager;\nimport com.atlassian.jira.workflow.JiraWorkflow;\nimport com.opensymphony.workflow.loader.ActionDescriptor;\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.issue.link.IssueLink\n\nlog.level = Level.DEBUG\n\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\")\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass)\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\")\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass)\ndef customFieldManager = ComponentAccessor.getCustomFieldManager()\ndef subTaskManager = ComponentAccessor.getSubTaskManager()\ndef issueManager = ComponentAccessor.getIssueManager()\ndef issueEventManager = ComponentAccessor.getIssueEventManager()\ndef user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n//Issue issue = issueManager.getIssueObject('EC-9791')\n\n//ID of \"HUB Engineering Cell\" Insight Schema\nint schemaId = 30\ndef objBackTo = null\ndef summary = issue.summary.substring(11)\n\ndef objects = iqlFacade.findObjectsByIQLAndSchema(schemaId, \"objectType=Activities AND Name = \\\"\" + summary + \"\\\"\");\nlog.debug objects\n\nif (objects != null &amp;&amp; objects.size() &gt; 0){\n\tobjBackTo = objectFacade.loadObjectAttributeBean(objects[0].getId(), \"BACK_TO\") ? objectFacade.loadObjectAttributeBean(objects[0].getId(), \"BACK_TO\").getObjectAttributeValueBeans() : null;\n}\nlog.debug objBackTo!=null\npassesCondition = objBackTo!=null","scriptPath":null}</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.CustomScriptCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="contextHandling" />
              <arg name="hidFieldsList">timespent@@</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="class.name">com.googlecode.jsu.workflow.validator.FieldsRequiredValidator</arg>
              <arg name="customErrorMessage-textValue" />
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="6">
              <post-functions>
                <function type="class">
                  <arg name="field.name">resolution</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
                  <arg name="field.value">10104</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">238eb2fe-3ffb-49c0-9a82-570eb8f41a96</arg>
                  <arg name="FIELD_NOTES">Reopen related issues</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.bc.issue.IssueService;\nimport com.atlassian.jira.issue.IssueInputParametersImpl;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.Level;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.event.issue.IssueEventBundle;\nimport com.atlassian.jira.event.issue.IssueEventManager;\nimport com.atlassian.jira.event.issue.IssueEventBundleFactory;\nimport com.atlassian.jira.event.issue.IssueEvent;\nimport com.opensymphony.workflow.WorkflowContext\nimport com.atlassian.jira.workflow.WorkflowTransitionUtil;\nimport com.atlassian.jira.workflow.WorkflowTransitionUtilImpl;\nimport com.atlassian.jira.util.JiraUtils;\nimport com.opensymphony.workflow.loader.StepDescriptor;\nimport com.atlassian.jira.*;\nimport com.atlassian.jira.workflow.WorkflowManager;\nimport com.atlassian.jira.workflow.JiraWorkflow;\nimport com.opensymphony.workflow.loader.ActionDescriptor;\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.issue.link.IssueLink\n\nlog.level = Level.DEBUG\n\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\")\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass)\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\")\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass)\ndef customFieldManager = ComponentAccessor.getCustomFieldManager()\ndef subTaskManager = ComponentAccessor.getSubTaskManager()\ndef issueManager = ComponentAccessor.getIssueManager()\ndef issueEventManager = ComponentAccessor.getIssueEventManager()\ndef user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n//Issue issue = issueManager.getIssueObject('EC-9795')\n\n//ID of \"HUB Engineering Cell\" Insight Schema\nint schemaId = 30\n\ndef activity=issue.getCustomFieldValue(customFieldManager.getCustomFieldObjectsByName(\"EC_ACTIVITY_REF\")[0]);\nactivity=activity[0].toString().substring(0,activity[0].toString().lastIndexOf('(')-1)\n\ndef parentIssue=issue.getParentObject()\ndef subTaskIssueLinks = parentIssue.getSubTaskObjects()\ndef ecNumber = customFieldManager.getCustomFieldObjectsByName(\"EC Number\")[0]\ndef minIndex=0\ndef issueToTransition = new ArrayList()\ndef issueToTransitionOpen = new ArrayList()\ndef toBeFinishedBefore = null, canBeMoved=true\ndef issueToBeCompleted = new ArrayList()\ndef actIndex\n\ndef objects = iqlFacade.findObjectsByIQLAndSchema(schemaId, \"objectType=Activities AND Name = \\\"\" + activity + \"\\\" AND BACK_TO IS NOT EMPTY\");\nif (objects != null &amp;&amp; objects.size() &gt; 0){\n    /*Current act index*/\n    actIndex = objectFacade.loadObjectAttributeBean(objects[0].getId(), \"INDEX\") ? objectFacade.loadObjectAttributeBean(objects[0].getId(), \"INDEX\").getObjectAttributeValueBeans() : null;\n\n    def actToMoveBack = objectFacade.loadObjectAttributeBean(objects[0].getId(), \"BACK_TO\") ? objectFacade.loadObjectAttributeBean(objects[0].getId(), \"BACK_TO\").getObjectAttributeValueBeans() : null;\n    actToMoveBack = iqlFacade.findObjectsByIQLAndSchema(schemaId, \"objectType=Activities AND Key = \\\"\" +\"HUBEC-\" + actToMoveBack[0].value + \"\\\"\");\n\n    for(subt in subTaskIssueLinks){\n        def currentSubTSummary = ComponentAccessor.getIssueManager().getIssueByCurrentKey(subt.toString()).getSummary()\n        if(currentSubTSummary.equals(parentIssue.getCustomFieldValue(ecNumber).toString() + \" - \" + actToMoveBack[0].toString().substring(0,actToMoveBack[0].toString().lastIndexOf('(')-1))){\n            issueToTransition.add(subt)\n        }\n    }\n    \n    /*Other issues to be moved to Open*/\n    def relatedObjects = iqlFacade.findObjectsByIQLAndSchema(schemaId, \"objectType=Activities AND TRIGGERED_BY IN (\\\"\" + actToMoveBack[0].toString().substring(0,actToMoveBack[0].toString().lastIndexOf('(')-1) + \"\\\") AND INDEX &lt; \" + actIndex.value[0]);\n    \n    for(obj in relatedObjects){\n        for(subt in subTaskIssueLinks){\n            def currentSubTSummary = ComponentAccessor.getIssueManager().getIssueByCurrentKey(subt.toString()).getSummary()\n            if(currentSubTSummary.equals(parentIssue.getCustomFieldValue(ecNumber).toString() + \" - \" + obj.toString().substring(0,obj.toString().lastIndexOf('(')-1))){\n                issueToTransitionOpen.add(subt)\n            }\n        }\n        \n    }\n}                \n\nlog.debug \"Issue to be moved back to To Do: \" + issueToTransition\nlog.debug \"Issue to be moved back to Open: \" + issueToTransitionOpen\n\n\nint EVENT_ID = 61\nif(issueToTransition){\n\tWorkflowTransitionUtil workflowTransitionUtil = ( WorkflowTransitionUtil ) JiraUtils.loadComponent( WorkflowTransitionUtilImpl.class );\n    for(currIssue in issueToTransition){\n        MutableIssue mi = issueManager.getIssueObject(currIssue.toString());\n        if(mi.status.name==\"Done\"){\n        \tworkflowTransitionUtil.setIssue(mi);\n        \tworkflowTransitionUtil.setAction(EVENT_ID);\n        \tworkflowTransitionUtil.validate();\n        \tworkflowTransitionUtil.progress();  \n        }\n    }\n}\n\nEVENT_ID = 41\nif(issueToTransitionOpen){\n\tWorkflowTransitionUtil workflowTransitionUtil = ( WorkflowTransitionUtil ) JiraUtils.loadComponent( WorkflowTransitionUtilImpl.class );\n    for(currIssue in issueToTransitionOpen){\n        MutableIssue mi = issueManager.getIssueObject(currIssue.toString());\n        if(mi.status.name==\"Done\"){\n        \tworkflowTransitionUtil.setIssue(mi);\n        \tworkflowTransitionUtil.setAction(EVENT_ID);\n        \tworkflowTransitionUtil.validate();\n        \tworkflowTransitionUtil.progress();  \n        }\n    }\n}","scriptPath":null}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="3" name="‰Þ">
      <meta name="jira.status.id">10007</meta>
      <actions>
<common-action id="41" />
<common-action id="61" />
<common-action id="21" />
      </actions>
    </step>
    <step id="4" name=":—§">
      <meta name="jira.status.id">1</meta>
      <actions>
        <action id="51" name="To Do">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <results>
            <unconditional-result old-status="žée" status="žée" step="5">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">3</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="5" name="To Do">
      <meta name="jira.status.id">10008</meta>
      <actions>
<common-action id="41" />
<common-action id="31" />
      </actions>
    </step>
    <step id="6" name="Failed">
      <meta name="jira.status.id">10013</meta>
      <actions>
<common-action id="61" />
<common-action id="21" />
      </actions>
    </step>
  </steps>
</workflow>