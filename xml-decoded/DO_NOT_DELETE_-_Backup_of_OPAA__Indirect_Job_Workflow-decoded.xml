<?xml version='1.0' encoding='UTF-8'?>
<workflow>
  <meta name="jira.description">Backup del 2024-06-24</meta>
  <meta name="jira.update.author.key">JIRAUSER64223</meta>
  <meta name="jira.updated.date">1719237069227</meta>
  <initial-actions>
    <action id="1" name="Create">
      <validators>
        <validator name="" type="class">
          <arg name="permission">Create Issue</arg>
          <arg name="class.name">com.atlassian.jira.workflow.validator.PermissionValidator</arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="žée" status="¢—§" step="1">
          <post-functions>
            <function type="class">
              <arg name="field.name">summary</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
              <arg name="field.value">Indirect Job</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
            </function>
            <function type="class">
              <arg name="FIELD_SECURITY_LEVEL_ID">11600</arg>
              <arg name="FIELD_FUNCTION_ID">6af852cf-8696-4225-82fb-53efd0188c8c</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
              <arg name="FIELD_CONDITION" />
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueCreateFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">1</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">075180fb-a378-467a-85fa-b8c888915a10</arg>
              <arg name="FIELD_NOTES">Complete OP_INDIRECT_JOB for TRAVEL HOME logs arriving from mobile</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.issue.Issue\r\nimport com.atlassian.jira.issue.MutableIssue;\r\nimport com.atlassian.jira.event.type.EventDispatchOption;\r\nimport org.apache.log4j.Level\r\nimport java.sql.Timestamp\r\nimport com.atlassian.jira.issue.IssueManager\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File('/var/atlassian/application-data/shared/scripts/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\"); \r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n  \r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\r\n  \r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\"); \r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n  \r\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\"); \r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\r\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \r\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\r\n\r\ndef currentUser = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENT_USER\")[0]\r\ndef tktFromMobile = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_FROM_MOBILE\")[0];\r\ndef tktVisKey = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_VISIBILITY_KEY\")[0];\r\n\r\ndef indirectTask = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_INDIRECT_JOB\")[0];\r\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\r\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\r\n\r\nIssueManager issueManager = ComponentAccessor.getIssueManager()\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-41918\")\r\n\r\ndef user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\r\ndef objects = iqlFacade.findObjectsByIQLAndSchema(DBO, \"objectType = Company AND object HAVING outboundReferences(objectType = Supplier AND object HAVING inboundReferences(objectType = Supplier_Technician AND TECH_ACCOUNT = \\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\"))\")\r\nlog.debug \"iql: \" + \"objectType=Company AND object HAVING outboundReferences(objectType = Supplier AND object HAVING inboundReferences(objectType = Supplier_Technician AND TECH_ACCOUNT = \\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\"))\"\r\n\r\nif(objects &amp;&amp; issue.getCustomFieldValue(tktFromMobile).toString().equals(\"TRAVEL_HOME\")){\r\n    log.debug objects[0]\r\n    \r\n    def company=objects[0].toString()\r\n    def companyKey = company.substring(company.lastIndexOf('(')+1,company.lastIndexOf(')'))\r\n    def companyName = company.substring(0,company.lastIndexOf('(')-1)\r\n    def companyObject = objectFacade.loadObjectBean(companyKey)\r\n    log.info \"techKey: \" + companyKey\r\n    log.info (\"techName: \" + companyName)\r\n    log.info (\"techObject: \" + companyObject)\r\n    \r\n    objects = iqlFacade.findObjectsByIQLAndSchema(DBO, \"objectType = \\\"Indirect Task\\\" AND COMPANY_REF.Key = \" + companyKey.toString() + \" AND TRAVEL_HOME = true\")\r\n    log.debug \"iql: \" + \"objectType = \\\"Indirect Task\\\" AND COMPANY_REF.Key = \" + companyKey.toString() + \" AND TRAVEL_HOME = true\"\r\n\r\n    if(objects){\r\n        log.debug objects[0]\r\n        def indTaskList = new ArrayList()\r\n    \tindTaskList.add(objects[0])\r\n        \r\n        MutableIssue mi = (MutableIssue) issue;\r\n        \r\n        mi.setCustomFieldValue(indirectTask, indTaskList);\r\n    \tComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n    }\r\n}","scriptPath":null}</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">5c3ef646-602e-4205-a405-e79da25fde50</arg>
              <arg name="FIELD_NOTES">Inherit SAP_SERVICE_ORDER from selected "Indirect Task" + complete OP_TECHNICIANS_ONSITE + complete OP_INTERNAL_SUPPLIER</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import java.sql.Timestamp\r\nimport java.util.TimeZone\r\n\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.issue.Issue\r\nimport com.atlassian.jira.issue.IssueManager\r\nimport com.atlassian.jira.issue.CustomFieldManager\r\nimport com.atlassian.jira.issue.MutableIssue\r\nimport com.atlassian.jira.issue.fields.CustomField\r\nimport com.atlassian.jira.event.type.EventDispatchOption\r\n\r\nimport com.riadalabs.jira.plugins.insight.services.model.ObjectBean\r\nimport com.riadalabs.jira.plugins.insight.services.model.ObjectAttributeBean\r\nimport com.riadalabs.jira.plugins.insight.services.model.ObjectTypeAttributeBean\r\nimport com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\r\nimport com.riadalabs.jira.plugins.insight.services.model.MutableObjectAttributeBean\r\nimport com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\r\nimport com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\r\nimport com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\r\nimport com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File('/var/atlassian/application-data/shared/scripts/opproject.properties')\r\npropertiesFile.withInputStream {\r\n    properties.load(it)\r\n}\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass&lt;ObjectFacade&gt; objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\")\r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass)\r\n\r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass&lt;ObjectTypeFacade&gt; objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\")\r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass)\r\n\r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass&lt;ObjectTypeAttributeFacade&gt; objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\")\r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass)\r\n\r\nClass&lt;ObjectAttributeBeanFactory&gt; objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\")\r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass)\r\n\r\nClass&lt;IQLFacade&gt; iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\")\r\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass)\r\n\r\nfinal IssueManager ISSUE_MANAGER = ComponentAccessor.getIssueManager()\r\n// DEBUGGING PURPOSES: uncomment to run this on a specific issue\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-42265\")\r\n\r\n// Retrieve customfields objects: first the ids from properties...\r\nint ONSITE_TECH_REPORT_OBJ_TYPE             = properties['iobj.onSiteTechReport'].toString().toInteger()\r\nint ONSITE_TECH_REPORT_ATTR_NAME            = properties['iobj.onSiteTechReport.name.id'].toString().toInteger()\r\nint ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF  = properties['iobj.onSiteTechReport.technicianRef.id'].toString().toInteger()\r\nint ONSITE_TECH_REPORT_ATTR_SUPPLIER_REF    = properties['iobj.onSiteTechReport.supplierRef.id'] ? properties['iobj.onSiteTechReport.supplierRef.id'].toString().toInteger() : 3073\r\nint ONSITE_TECH_REPORT_ATTR_JOB_STARTED     = properties['iobj.onSiteTechReport.jobStarted.id'].toString().toInteger()\r\nint ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED   = properties['iobj.onSiteTechReport.jobCompleted.id'].toString().toInteger()\r\nint ONSITE_TECH_REPORT_ATTR_TRACE_ACTION    = properties['iobj.onSiteTechReport.traceAction.id'].toString().toInteger()\r\nint OPAA                                    = properties['ischema.aa.id'].toString().toInteger()\r\nString OP_TECHNICIANS_ONSITE                = properties['cf.techniciansOnsite'].toString()\r\nString COMPANY_REF                          = properties['iobj.visibilityKey.companyRef'].toString()\r\nString SUPPLIER_REF                         = properties['iobj.techOnsite.supplierRef'] ? properties['iobj.techOnsite.supplierRef'].toString() : \"SUPPLIER_REF\"\r\n// ...then the effective object from id\r\nfinal CustomFieldManager cfManager = ComponentAccessor.getCustomFieldManager()\r\nCustomField currentUser                 = cfManager.getCustomFieldObjectsByName(\"OP_CURRENT_USER\")[0]\r\nCustomField sapServiceOrder             = cfManager.getCustomFieldObjectsByName(\"OP_SAP_SERVICE_ORDER\")[0]\r\nCustomField internalSupplier            = cfManager.getCustomFieldObjectsByName(\"OP_INTERNAL_SUPPLIER\")[0]\r\nCustomField tktFromMobile               = cfManager.getCustomFieldObjectsByName(\"OP_TKT_FROM_MOBILE\")[0]\r\nCustomField jobStart                    = cfManager.getCustomFieldObjectsByName(\"OP_INDIRECT_JOB_STARTED\")[0]\r\nCustomField jobCompleted                = cfManager.getCustomFieldObjectsByName(\"OP_INDIRECT_JOB_COMPLETED\")[0]\r\nCustomField onSiteTechsTraceField       = cfManager.getCustomFieldObjectsByName(\"OP_TECHNICIAN_ACTIVITIES_TRACE\")[0]\r\nCustomField onSiteTechsWorkTraceField   = cfManager.getCustomFieldObjectsByName(\"OP_TECHNICIAN_ACTIVITIES_TRACE_WORK\")[0]\r\nCustomField indirectTask                = cfManager.getCustomFieldObjectsByName(\"OP_INDIRECT_JOB\")[0]\r\nCustomField onSiteTechsField            = cfManager.getCustomFieldObjectsByName(OP_TECHNICIANS_ONSITE)[0]\r\nCustomField siteCF                      = cfManager.getCustomFieldObjectsByName(\"OP_SITE\")[0]\r\nCustomField tktVisibility               = cfManager.getCustomFieldObjectsByName(\"OP_TKT_VISIBILITY_KEY\")[0]\r\nCustomField tktVisibilityIndirect       = cfManager.getCustomFieldObjectsByName(\"OP_INDIRECT_JOB_TKT_VISIBILITY\")[0]\r\n// ...then some values used further below\r\nString tktFromMobileValue       = issue.getCustomFieldValue(tktFromMobile).toString()\r\nString currentUserValue         = issue.getCustomFieldValue(currentUser).toString()\r\nString siteValue                = issue.getCustomFieldValue(siteCF) // toString() useless?\r\nString indTaskValue             = issue.getCustomFieldValue(indirectTask)[0]\r\n\r\n// Retrieve the OP_INDIRECT_JOB value on the issue\r\nString indTaskCorrected = indTaskValue.substring(indTaskValue.lastIndexOf('(') + 1, indTaskValue.lastIndexOf(')'))\r\nObjectBean indTaskObject = objectFacade.loadObjectBean(indTaskCorrected)\r\nInteger indTaskObjectId = indTaskObject.getId()\r\nlog.debug(\"indTaskObject: ${indTaskObject} (id=${indTaskObjectId})\")\r\n\r\nList indTaskSO = objectFacade.loadObjectAttributeBean(indTaskObjectId, \"SAP_SERVICE_ORDER\").getObjectAttributeValueBeans()\r\ndef serviceOrderValue = indTaskSO[0].getValue()\r\n\r\nList onSiteTechObjects = new ArrayList()\r\n\r\nlog.debug(\"SAP_SERVICE_ORDER: ${serviceOrderValue}\")\r\n\r\ndef user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\r\n\r\n// --- UPDATE THE ISSUE  ---------------------------------------\r\nMutableIssue mi = (MutableIssue) issue\r\n\r\n// -----&gt; OP_SAP_SERVICE_ORDER\r\nmi.setCustomFieldValue(sapServiceOrder, serviceOrderValue)\r\nlog.debug(\"Updating ${sapServiceOrder} = ${serviceOrderValue}\")\r\n\r\nif (\"TRAVEL_HOME\".equals(tktFromMobileValue)) {\r\n    log.info(\"Dealing with a TRAVEL_HOME tktFromMobile!\")\r\n    List indTaskVisibility = objectFacade.loadObjectAttributeBean(indTaskObjectId, \"DEFAULT_VISIBILITY\").getObjectAttributeValueBeans()\r\n    List visibilityKey = new ArrayList()\r\n    visibilityKey.add(objectFacade.loadObjectBean(indTaskVisibility[0].getValue()))\r\n    \r\n    // -----&gt; OP_INDIRECT_JOB_TKT_VISIBILITY\r\n    mi.setCustomFieldValue(tktVisibilityIndirect, visibilityKey)\r\n    log.debug(\"Updating ${tktVisibilityIndirect} = ${visibilityKey}\")\r\n}\r\n\r\nString iqlCurrentUserTechnician = \"objectType = Technician AND TECHNICIAN_REF.TECH_ACCOUNT =\\\"${issue.getCustomFieldValue(currentUser).toString()}\\\"\"\r\nlog.debug(\"iqlCurrentUserTechnician: ${iqlCurrentUserTechnician}\")\r\ndef objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, iqlCurrentUserTechnician)\r\nif (objects &amp;&amp; \"TRAVEL_HOME\".equals(tktFromMobileValue)){\r\n    log.debug(\"objects[0]: ${objects[0]}\")\r\n\r\n    /*02.12.22*/\r\n    ObjectBean siteObject\r\n    String tktVisibilityKey\r\n    log.debug(\"siteValue: ${siteValue}\")\r\n    if (siteValue) {\r\n        log.debug(\"siteValue has value (${siteValue}), using ${tktVisibility}\")\r\n        String siteValueKey = siteValue.substring(siteValue.lastIndexOf('(') + 1, siteValue.lastIndexOf(')'))\r\n        siteObject = objectFacade.loadObjectBean(siteValueKey)\r\n        \r\n        String tktVisibilityValue = issue.getCustomFieldValue(tktVisibility)[0].toString()\r\n        tktVisibilityKey = tktVisibilityValue.substring(tktVisibilityValue.lastIndexOf('(') + 1, tktVisibilityValue.lastIndexOf(')'))\r\n    } else {\r\n        String tktVisibilityIndirectValue = issue.getCustomFieldValue(tktVisibilityIndirect)[0].toString()\r\n        tktVisibilityKey = tktVisibilityIndirectValue.substring(tktVisibilityIndirectValue.lastIndexOf('(') + 1, tktVisibilityIndirectValue.lastIndexOf(')'))\r\n    }\r\n    \r\n    log.debug(\"tktVisibilityKey: ${tktVisibilityKey}\")\r\n    String timeZone = \"Europe/Rome\"\r\n    Integer visibilityObjectId = objectFacade.loadObjectBean(tktVisibilityKey).getId()\r\n    def companyRef = objectFacade.loadObjectAttributeBean(visibilityObjectId, COMPANY_REF).getObjectAttributeValueBeans()\r\n    Integer companyRefId = companyRef[0].getReferencedObjectBeanId()\r\n    log.debug(\"companyRefId: ${companyRefId}\")\r\n    \r\n    log.debug(\"Imposto da site? siteObject: ${siteObject}\")\r\n    if (siteObject) {\r\n        // this was probably deadcode, since there were compilation errors. I will keep it until further inspections\r\n        ObjectAttributeBean siteRefAttr = objectFacade.loadObjectAttributeBean(siteObject.getId(), \"SITE_REF\")\r\n        if (siteRefAttr) {\r\n            MutableObjectAttributeBean obTriage = siteRefAttr.createMutable()\r\n            String s = obTriage.getObjectAttributeValueBeans().toString()\r\n            String sKey = s.substring(s.lastIndexOf('(') + 1, s.lastIndexOf(')'))\r\n            ObjectAttributeBean timezoneRefAttr = objectFacade.loadObjectAttributeBean(sKey.toInteger(), \"TIME_ZONE\")\r\n            // prende prima la timezone dal site e poi dalla company?\r\n            if (timezoneRefAttr) {\r\n                obTriage = timezoneRefAttr.createMutable()\r\n                timeZone = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n                log.debug(\"TimeZone da Site: ${timeZone}\")\r\n            } else {\r\n                timezoneRefAttr = objectFacade.loadObjectAttributeBean(companyRefId, \"TIME_ZONE\")\r\n                if (timezoneRefAttr) {\r\n                    obTriage = timezoneRefAttr.createMutable()\r\n                    timeZone = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n                    log.debug(\"TimeZone da Company: ${timeZone}\")\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        // this was probably always the case of the if-else\r\n        // prende sempre la timezone da company\r\n        ObjectAttributeBean timezoneRefAttr = objectFacade.loadObjectAttributeBean(companyRefId, \"TIME_ZONE\")\r\n        if (timezoneRefAttr) {\r\n            MutableObjectAttributeBean obTriage = timezoneRefAttr.createMutable()\r\n            timeZone = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n            log.debug(\"TimeZone da Company: ${timeZone}\")\r\n        }\r\n    }\r\n    \r\n    log.debug(\"TimeZone Finale: ${timeZone}\")\r\n    \r\n    // those customfields are all as java.sql.Timestamp\r\n    Timestamp startedAt = issue.getCustomFieldValue(jobStart)\r\n    //log.debug(\"startedAt.class = ${startedAt.getClass()}\")\r\n    Timestamp completeddAt = issue.getCustomFieldValue(jobCompleted)\r\n    log.debug(\"startedAt: '${startedAt}' ---- completeddAt: '${completeddAt}'\")\r\n    // those below seems wrong: the timezone is already allright from the startedAt/completedAt field\r\n    //Timestamp localTimeStamp = new Timestamp((new Date(startedAt.getTime() - TimeZone.getDefault().getRawOffset() + TimeZone.getTimeZone(timeZone.toString()).getRawOffset())).time)\r\n    //Date localDate = new Date(startedAt.getTime() - TimeZone.getDefault().getRawOffset() + TimeZone.getTimeZone(timeZone.toString()).getRawOffset())\r\n    Timestamp localTimeStamp = startedAt\r\n    Date localDate = (Date) startedAt\r\n    log.debug(\"localTimeStamp: '${localTimeStamp}' ---- localDate: '${localDate}'\")\r\n    \r\n    //Timestamp endLocalTimeStamp = new Timestamp((new Date(completeddAt.getTime() - TimeZone.getDefault().getRawOffset() + TimeZone.getTimeZone(timeZone.toString()).getRawOffset())).time)\r\n    //Date endLocalDate = new Date(completeddAt.getTime() - TimeZone.getDefault().getRawOffset() + TimeZone.getTimeZone(timeZone.toString()).getRawOffset())\r\n    Timestamp endLocalTimeStamp = completeddAt\r\n    Date endLocalDate = (Date) completeddAt\r\n    log.debug(\"endLocalTimeStamp: '${endLocalTimeStamp}' ---- endLocalDate: '${endLocalDate}'\")\r\n    /*02.12.22*/\r\n\r\n    //extract insight key and get object\r\n    def tech = objects[0].toString()\r\n    def techKey = tech.substring(tech.lastIndexOf('(') + 1, tech.lastIndexOf(')'))\r\n    def techName = tech.substring(0, tech.lastIndexOf('(') - 1)\r\n    def techObject = objectFacade.loadObjectBean(techKey)\r\n    log.info(\"techKey: ${techKey}\")\r\n    log.info(\"techName: ${techName}\")\r\n    log.info(\"techObject: ${techObject}\")\r\n\r\n    def objectTypeOnSiteTechReport = objectTypeFacade.loadObjectTypeBean(ONSITE_TECH_REPORT_OBJ_TYPE)\r\n    def newObjectBean = objectTypeOnSiteTechReport.createMutableObjectBean()\r\n\r\n    List objectAttributeBeans = new ArrayList()\r\n    ObjectTypeAttributeBean nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_NAME)\r\n    log.debug(\"nameObjectTypeAttributeBean: ${nameObjectTypeAttributeBean}\")\r\n    objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, nameObjectTypeAttributeBean, techName))\r\n\r\n    ObjectTypeAttributeBean actionObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TRACE_ACTION)\r\n    objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, actionObjectTypeAttributeBean, \"INDIRECT_JOB\"))\r\n\r\n    newObjectBean.setObjectAttributeBeans(objectAttributeBeans)\r\n    /* Store the object into Insight. The new ObjectBean will be updated with an unique ID */\r\n    try {\r\n        newObjectBean = objectFacade.storeObjectBean(newObjectBean)\r\n        log.warn(\"newObjectBean: \" + newObjectBean)\r\n    } catch (Exception vie) {\r\n        log.warn(\"Could not create issue due to validation exception:\" + vie.getMessage())\r\n    }\r\n\r\n    /* Update TECHNICIAN_REF on the newObject */                \r\n    def objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF).createMutable() //The id of the attribute\r\n\r\n    /* Create the new attribute bean based on the value */\r\n    def newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, techKey)\r\n    /* Load the attribute bean */\r\n    def objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), techKey)\r\n    if (objectAttributeBean != null) {\r\n        /* If attribute exist reuse the old id for the new attribute */\r\n        newObjectAttributeBean.setId(objectAttributeBean.getId())\r\n    }\r\n    /* Store the object attribute into Insight. */\r\n    try {\r\n        objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean)\r\n    } catch (Exception vie) {\r\n        log.warn(\"Could not update object attribute due to validation exception:\" + vie.getMessage())\r\n    }\r\n\r\n    /*Update JOB_STARTED - JOB_COMPLETED on the new object*/\r\n    def obj = objectFacade.loadObjectBean(newObjectBean.getId())\r\n    log.debug obj\r\n\r\n    ObjectTypeAttributeBean jobStartedTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_JOB_STARTED)\r\n    ObjectTypeAttributeBean jobCompletedTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED)\r\n    ObjectTypeAttributeBean actionTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TRACE_ACTION)\r\n\r\n    log.info(\"attribType: ${jobStartedTypeAttributeBean}\")\r\n    def newAttribS = obj.createObjectAttributeBean(jobStartedTypeAttributeBean)\r\n    def newAttribValueS = newAttribS.createObjectAttributeValueBean()\r\n\r\n    try {\r\n        newAttribValueS.setDateValue(localDate)\r\n    } catch (Exception vie) {\r\n        log.warn(\"SETINSIGHTVALUE: Unable to set attribute ${attribType.toString()} to ${localDate}. Exiting.\")\r\n        log.warn(\"SETINSIGHTVALUE: ${vie.getMessage()}\")\r\n        return false\r\n    }\r\n\r\n    def attribValuesS = newAttribS.getObjectAttributeValueBeans()\r\n    attribValuesS.add(newAttribValueS)\r\n    newAttribS.setObjectAttributeValueBeans(attribValuesS)\r\n\r\n    try {\r\n        newAttribS = objectFacade.storeObjectAttributeBean(newAttribS)\r\n    } catch (Exception vie) {\r\n        log.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\")\r\n        log.warn(\"SETINSIGHTVALUE: ${vie.getMessage()}\")\r\n        return false\r\n    }\r\n\r\n    log.info \"attribType: ${jobCompletedTypeAttributeBean}\"\r\n    def newAttribC = obj.createObjectAttributeBean(jobCompletedTypeAttributeBean)\r\n    def newAttribValueC = newAttribC.createObjectAttributeValueBean()\r\n\r\n    try {\r\n        newAttribValueC.setDateValue(endLocalDate)\r\n    } catch (Exception vie) {\r\n        log.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType.toString() + \" to \" + endLocalDate.toString() + \". Exiting.\")\r\n        log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString())\r\n        return false\r\n    }\r\n\r\n    def attribValuesC = newAttribC.getObjectAttributeValueBeans()\r\n    attribValuesC.add(newAttribValueC)\r\n    newAttribC.setObjectAttributeValueBeans(attribValuesC)\r\n\r\n    try {\r\n        newAttribC = objectFacade.storeObjectAttributeBean(newAttribC)\r\n    } catch (Exception vie) {\r\n        log.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\")\r\n        log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString())\r\n        return false\r\n    }\r\n\r\n    /* Update SUPPLIER_REF on the newObject */  \r\n    /* Get SUPPLIER_REF from Tech */\r\n    def obTriage = objectFacade.loadObjectAttributeBean(techObject.getId(), SUPPLIER_REF).createMutable()\r\n    def suppRef = obTriage.getObjectAttributeValueBeans().toString()\r\n    def supp = suppRef.toString()\r\n    log.info \"supp: \" + supp\r\n    def suppRefId = supp.substring(supp.lastIndexOf('(')+1,supp.lastIndexOf(')'))\r\n    log.info \"suppRefId: \" + suppRefId\r\n    def suppRefKey = properties['ischema.aa'].toString() + \"-\" + suppRefId\r\n    log.info \"suppRefKey: \" + suppRefKey\r\n    def suppRefObj = objectFacade.loadObjectBean(properties['ischema.aa'].toString() + \"-\" + suppRefId)\r\n    log.info \"suppRefObj: \" + suppRefObj\r\n\r\n    def suppList = new ArrayList()\r\n    suppList.add(suppRefObj)\r\n\r\n    mi.setCustomFieldValue(internalSupplier, suppList)\r\n    log.debug(\"Updating ${internalSupplier} = ${suppList}\")\r\n\r\n    def suppObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_SUPPLIER_REF).createMutable() //The id of the attribute\r\n\r\n    /* Create the new attribute bean based on the value */\r\n    newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, suppObjectTypeAttributeBean, suppRefKey)\r\n    /* Load the attribute bean */\r\n    objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), suppRefKey)\r\n    if (objectAttributeBean != null) {\r\n        /* If attribute exist reuse the old id for the new attribute */\r\n        newObjectAttributeBean.setId(objectAttributeBean.getId())\r\n    }\r\n    /* Store the object attribute into Insight. */\r\n    try {\r\n        objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean)\r\n    } catch (Exception vie) {\r\n        log.warn(\"Could not update object attribute due to validation exception: ${vie.getMessage()}\")\r\n    }\r\n\r\n    onSiteTechObjects.add(newObjectBean)\r\n\r\n    log.info(\"onSiteTechObjects: ${onSiteTechObjects}\")\r\n\r\n    if (!onSiteTechObjects.isEmpty()) {\r\n        log.debug(\"Updating fields: ${onSiteTechsField}, ${onSiteTechsTraceField}, ${onSiteTechsWorkTraceField}, ${jobStart}, ${jobCompleted}\")\r\n        \r\n        mi.setCustomFieldValue(onSiteTechsField, onSiteTechObjects)\r\n        log.debug(\"Updating ${onSiteTechsField} = ${onSiteTechObjects}\")\r\n\r\n        mi.setCustomFieldValue(onSiteTechsTraceField, onSiteTechObjects)\r\n        log.debug(\"Updating ${onSiteTechsTraceField} = $onSiteTechObjects{}\")\r\n\r\n        mi.setCustomFieldValue(onSiteTechsWorkTraceField, onSiteTechObjects)\r\n        log.debug(\"Updating ${onSiteTechsWorkTraceField} = ${onSiteTechObjects}\")\r\n\r\n        mi.setCustomFieldValue(jobStart, localTimeStamp)\r\n        log.debug(\"Updating ${jobStart} = ${localTimeStamp}\")\r\n\r\n        mi.setCustomFieldValue(jobCompleted, endLocalTimeStamp)\r\n        log.debug(\"Updating ${jobCompleted} = ${endLocalTimeStamp}\")\r\n    }\r\n} else {\r\n    log.info(\"TICKET CREATO DA BACKOFFICE!\")\r\n    /*Ticket creato da backoffice*/\r\n    /*Estrarre Company e Internal Supplier dal OP_INDIRECT_JOB_TKT_VISIBILITY*/\r\n    def issueTktVisibilityIndirectCustomfield = issue.getCustomFieldValue(tktVisibilityIndirect)\r\n    log.debug(\"issueTktVisibilityIndirectCustomfield: ${issueTktVisibilityIndirectCustomfield}\")\r\n    def obTriage = objectFacade.loadObjectAttributeBean(issueTktVisibilityIndirectCustomfield[0].getId(), \"COMPANY_REF\").createMutable()\r\n    def companyRef = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n\r\n    obTriage = objectFacade.loadObjectAttributeBean(companyRef, \"SUPPLIER_REF\").createMutable()\r\n    def suppRefId = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\r\n    log.info(\"suppRefId: ${suppRefId}\")\r\n    String suppRefKey = \"${properties['ischema.dbo']}-${suppRefId}\"\r\n\r\n    String iqlFindSupplier = \"objectType = Supplier AND SUPPLIER_REF =\\\"${suppRefKey}\\\"\"\r\n    objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, iqlFindSupplier)\r\n    log.debug(\"iqlFindSupplier: ${iqlFindSupplier}\")\r\n\r\n    if (objects) {\r\n        log.debug(\"First supplier found with the iql above: ${objects[0]}\")\r\n\r\n        List suppList = new ArrayList()\r\n        suppList.add(objects[0])\r\n\r\n        mi.setCustomFieldValue(internalSupplier, suppList)\r\n        log.debug(\"Updating ${internalSupplier} = ${suppList}\")\r\n    }\r\n}\r\n\r\n// 2023-11-10 Now updating in the end one time\r\nISSUE_MANAGER.updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false)\r\n\r\n","scriptPath":null,"parameters":{}}</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">23ba69ed-2399-4e0c-8fe4-a9c26c55b908</arg>
              <arg name="FIELD_NOTES">Popolate OP_INTERNAL_TECHNICIANS from issue's OP_CURRENT_USER</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.component.ComponentAccessor;\r\nimport com.atlassian.jira.issue.Issue;\r\nimport com.atlassian.jira.issue.MutableIssue;\r\nimport com.atlassian.jira.event.type.EventDispatchOption;\r\nimport com.atlassian.jira.issue.IssueManager;\r\nimport com.riadalabs.jira.plugins.insight.services.model.ObjectBean;\r\nimport com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade;\r\nimport com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade;\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\n\r\nlog.setLevel(org.apache.log4j.Level.DEBUG)\r\nProperties properties = new Properties()\r\nString pathDirProperties = ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay()\r\nlog.debug \"Percorso properties: ${pathDirProperties}\"\r\nFile propertiesFile = new File(\"${pathDirProperties}/opproject.properties\")\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass&lt;ObjectFacade&gt; objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\")\r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n\r\n/* Get IQL Facade from plugin accessor */\r\nClass&lt;IQLFacade&gt; iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\");\r\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\r\n\r\n// debugging\r\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-226163\")\r\n\r\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\r\nlog.debug \"Schemas found: OPAA=${OPAA}/\"\r\n\r\ndef currentOPUser = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENT_USER\")[0]\r\ndef internalTech = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_INTERNAL_TECHNICIANS\")[0]\r\n\r\nlog.debug \"currentOPUser: ${currentOPUser}\"\r\nlog.debug \"internalTech: ${internalTech}\"\r\n\r\nString currentOPUserValue = issue.getCustomFieldValue(currentOPUser)\r\nlog.debug \"currentOPUserValue: ${currentOPUserValue}\"\r\nif (currentOPUserValue == null) {\r\n    log.error \"====================================================================\"\r\n    log.error \"No data found for '${currentOPUser}' on issue '${issue}'\"\r\n    log.error \"====================================================================\"\r\n    return false;\r\n}\r\n\r\n// --- Gestione OP_INTERNAL_TECHNICIANS : recupero l'oggetto del technician a partire da OP_CURRENT_USER per popolare il campo\r\nlog.info \"Managing ${internalTech} : updating it from ${currentOPUser}, retrieving it with following IQL...\"\r\nfinal String IQL_FIND_OBJ = \"objectType = Technician AND TECHNICIAN_REF.TECH_ACCOUNT = \\\"${currentOPUserValue}\\\"\"\r\nlog.info \"IQL: ${IQL_FIND_OBJ}\"\r\nList&lt;ObjectBean&gt; objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, IQL_FIND_OBJ)\r\nlog.info \"Found array of technicians: ${objects}\"\r\nif (objects != null &amp;&amp; !objects.isEmpty()){\r\n    def objArray = new ArrayList()\r\n\r\n    ObjectBean firstObj = objects[0];\r\n    log.debug \"Getting first technician found: ${firstObj} (id: ${firstObj.id})\"\r\n    def obj = objectFacade.loadObjectBean(firstObj.id)\r\n    objArray.add(obj)\r\n\r\n    MutableIssue mi = (MutableIssue) issue;\r\n    def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\r\n    mi.setCustomFieldValue(internalTech, objArray);\r\n    log.debug \"Updating issue ${issue} with ${internalTech} = ${obj}\"\r\n    ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n} else {\r\n    log.error \"====================================================================\"\r\n    log.error \"No technicians found for '${currentOPUserValue}', the customfield ${internalTech} wont be updated\"\r\n    log.error \"====================================================================\"\r\n}","scriptPath":null}</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">c6841979-f503-445c-a9d1-cfe22f4fcced</arg>
              <arg name="FIELD_ACTION">31 Assign to Technician</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.FasttrackTransition</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.FasttrackTransition</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="FIELD_CONDITION">{"script":"import com.atlassian.jira.user.ApplicationUser\r\nimport com.atlassian.jira.issue.Issue\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.issue.IssueManager\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\n\r\nlog.setLevel(org.apache.log4j.Level.DEBUG)\r\nProperties properties = new Properties()\r\nString pathDirProperties = ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay()\r\nlog.debug \"Percorso properties: ${pathDirProperties}\"\r\nFile propertiesFile = new File(\"${pathDirProperties}/opproject.properties\")\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\n\r\n// Debugging purposes\r\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-226163\")\r\n\r\n// --- Retrieve Customfields ---------------------------------------------------\r\ndef groupManager = ComponentAccessor.getGroupManager()\r\ndef userManager = ComponentAccessor.getUserManager()\r\ndef currentOPUserCS =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENT_USER\")[0]\r\ndef tktFromMobile =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_FROM_MOBILE\")[0]\r\n\r\n// --- Retrieve values ---------------------------------------------------------\r\nfinal String currentOPUsrValue = issue.getCustomFieldValue(currentOPUserCS)\r\nfinal String tktFromMobileValue = issue.getCustomFieldValue(tktFromMobile)\r\nlog.debug \"currentUsrValue : ${currentOPUsrValue}\"\r\nlog.debug \"tktFromMobileValue : ${tktFromMobileValue}\"\r\n\r\nfinal String serviceTech = \"OPROLE_AA_SERVICETECH\"\r\nApplicationUser currentOPUser = userManager.getUserByName(currentOPUsrValue)\r\n\r\nfinal boolean isNotTravelHome = !\"TRAVEL_HOME\".equals(tktFromMobileValue)\r\nfinal boolean isCurrentOPUserInServicetechGroup = currentOPUser != null &amp;&amp; groupManager.getUsersInGroup(serviceTech).contains(currentOPUser)\r\nfinal boolean proceedToNext = isNotTravelHome &amp;&amp; isCurrentOPUserInServicetechGroup\r\nlog.debug \"Condition resolved as ${proceedToNext}: (isNotTravelHome: ${isNotTravelHome} &amp;&amp; isCurrentOPUserInServicetechGroup: ${isCurrentOPUserInServicetechGroup})\"\r\nreturn proceedToNext","scriptPath":null,"parameters":{}}</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_TRANSITION_OPTIONS">FIELD_SKIP_CONDITIONS|||FIELD_SKIP_PERMISSIONS|||FIELD_SKIP_VALIDATORS</arg>
              <arg name="FIELD_ADDITIONAL_SCRIPT" />
              <arg name="events" />
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">39101844-24ad-46de-9116-8f7bd9de5e9f</arg>
              <arg name="FIELD_ACTION">11 Stop Working</arg>
              <arg name="FIELD_NOTES">`!`</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.FasttrackTransition</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.FasttrackTransition</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="FIELD_CONDITION">{"script":"def opTktFromMobileValue = cfValues['OP_TKT_FROM_MOBILE']?.value\r\nlog.debug \"OP_TKT_FROM_MOBILE = ${opTktFromMobileValue}\"\r\n\r\nreturn opTktFromMobileValue == 'TRAVEL_HOME'","scriptPath":null,"parameters":{}}</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_TRANSITION_OPTIONS">FIELD_SKIP_CONDITIONS|||FIELD_SKIP_PERMISSIONS</arg>
              <arg name="events" />
              <arg name="FIELD_ADDITIONAL_SCRIPT" />
            </function>
            <function type="class">
              <arg name="conditionList">3</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
              <arg name="comparisonType">1</arg>
              <arg name="диюбwbХ*'">¶»ž</arg>
              <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
              <arg name="preconditionNegateResult-booleanValue" />
              <arg name="ºè">f2e432c3-7408-4cdb-8165-35b70273e3a2</arg>
              <arg name="fieldValue">TRAVEL_HOME</arg>
              <arg name="preconditionMode-textValue">DISCARD</arg>
              <arg name="fieldsList">customfield_23933</arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd" />
              <arg name="append.value" />
              <arg name="maxAllowed-integerValue" />
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field.value">%%CURRENT_DATETIME%%</arg>
              <arg name="ºè">fdd23588-3270-4566-a5a5-053895638c08</arg>
              <arg name="field.name">customfield_22628</arg>
              <arg name="scopeType">H</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd" />
              <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
              <arg name="preconditionAwareFunctionMode-textValue">M</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql" />
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql" />
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </initial-actions>
  <global-actions>
    <action id="51" name="EèÞr×">
      <meta name="jira.description" />
      <meta name="jira.fieldscreen.id" />
      <results>
        <unconditional-result old-status="žée" status="žée" step="5">
          <post-functions>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">6f1f7ccc-7fa5-4172-a401-dfe2a3b8f28a</arg>
              <arg name="FIELD_NOTES"> Update JOB_COMPLETED on INDIRECT TASK &amp;&amp; Update SO </arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\r\nimport groovy.json.StreamingJsonBuilder;\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.issue.CustomFieldManager;\r\nimport com.atlassian.jira.issue.fields.CustomField;\r\nimport com.atlassian.jira.issue.IssueManager;\r\nimport com.atlassian.jira.component.ComponentAccessor;\r\nimport com.atlassian.jira.issue.Issue;\r\nimport com.atlassian.jira.issue.MutableIssue\r\nimport org.apache.commons.codec.binary.Base64;\r\nimport org.apache.log4j.Category\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\nimport java.text.SimpleDateFormat \r\nimport java.util.Date\r\nimport java.sql.Timestamp\r\nimport com.atlassian.jira.issue.index.IssueIndexingService\r\nimport com.atlassian.jira.event.type.EventDispatchOption\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\nlog.setLevel(org.apache.log4j.Level.DEBUG)\r\nimport com.atlassian.jira.issue.link.IssueLink\r\n\r\nIssueManager issueManager = ComponentAccessor.getIssueManager();\r\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\r\n\r\ndef sapSN =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_NOTIFICATION\")[0]\r\ndef requestMethod\r\ndef baseURL\r\n\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\"); \r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n  \r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\r\n  \r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\"); \r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n  \r\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\"); \r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\r\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \r\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\r\n\r\nIssueIndexingService issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-59514\")\r\n\r\ndef currentUser = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENT_USER\")[0]\r\ndef onSiteTechsTraceField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIAN_ACTIVITIES_TRACE\")[0];\r\ndef onSiteTechsTravelField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIAN_TRAVEL\")[0];\r\ndef tktFromMobile = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_FROM_MOBILE\")[0]\r\ndef tktJobStarted = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_INDIRECT_JOB_STARTED\")[0]\r\ndef tktJobCompleted = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_INDIRECT_JOB_COMPLETED\")[0]\r\ndef userLanguage = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENTUSER_LANGUAGE\")\r\ndef docLanguage = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_DOC_GENERATION_LANGUAGE\")\r\n\r\ndef OnSiteTechObjects = new ArrayList();\r\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\r\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\r\n\r\n/*25.11.22*/\r\ndef localTimeStamp\r\ndef localDate\r\n/*03.10.23*/\r\ndef DATETIME_OFFSET = properties['wf.tr.datetimewithoffset'].toString()\r\nlog.debug \"DATETIME_OFFSET: \" + DATETIME_OFFSET\r\nif (DATETIME_OFFSET != null &amp;&amp; DATETIME_OFFSET != 'null'){\r\n\r\ndef siteCF = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SITE\")[0];\r\ndef site, siteKey, siteObject, visibility, visibilityKey\r\nif (issue.getCustomFieldValue(siteCF) != null) {\r\n    site = issue.getCustomFieldValue(siteCF).toString()\r\n    siteKey = site.substring(site.lastIndexOf('(') + 1, site.lastIndexOf(')'))\r\n    siteObject = objectFacade.loadObjectBean(siteKey)\r\n    visibility = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_VISIBILITY_KEY\")[0]\r\n    visibilityKey = issue.getCustomFieldValue(visibility)[0].toString().substring(issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf('(') + 1, issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf(')'))\r\n} else {\r\n    visibility = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_INDIRECT_JOB_TKT_VISIBILITY\")[0]\r\n    visibilityKey = issue.getCustomFieldValue(visibility)[0].toString().substring(issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf('(') + 1, issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf(')'))\r\n}\r\ndef timeZone\r\ndef companyRef = objectFacade.loadObjectAttributeBean(objectFacade.loadObjectBean(visibilityKey).getId(), properties['iobj.visibilityKey.companyRef'].toString()).getObjectAttributeValueBeans();\r\nlog.info \"companyRef: \" + companyRef\r\ndef companyRefId = companyRef[0].getReferencedObjectBeanId()\r\nlog.debug \"companyRefId:\" + companyRefId\r\nif (issue.getCustomFieldValue(siteCF) != null &amp;&amp; objectFacade.loadObjectAttributeBean(siteObject.getId(), \"SITE_REF\")) {\r\n    obTriage = objectFacade.loadObjectAttributeBean(siteObject.getId(), \"SITE_REF\").createMutable()\r\n    s = obTriage.getObjectAttributeValueBeans()\r\n    s = s.toString()\r\n    sKey = s.substring(s.lastIndexOf('(') + 1, s.lastIndexOf(')'))\r\n    if (objectFacade.loadObjectAttributeBean(sKey.toInteger(), \"TIME_ZONE\")) {\r\n        obTriage = objectFacade.loadObjectAttributeBean(sKey.toInteger(), \"TIME_ZONE\").createMutable()\r\n        timeZone = obTriage.getObjectAttributeValueBeans()\r\n        timeZone = timeZone[0].getValue()\r\n        log.debug \"TimeZone da Site: \" + timeZone\r\n    } else {\r\n        if (objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\")) {\r\n            obTriage = objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\").createMutable()\r\n            timeZone = obTriage.getObjectAttributeValueBeans()\r\n            timeZone = timeZone[0].getValue()\r\n            log.debug \"TimeZone da Company: \" + timeZone\r\n        }\r\n    }\r\n} else {\r\n    if (objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\")) {\r\n        obTriage = objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\").createMutable()\r\n        timeZone = obTriage.getObjectAttributeValueBeans()\r\n        timeZone = timeZone[0].getValue()\r\n        log.debug \"TimeZone da Company: \" + timeZone\r\n    }\r\n}\r\nif (!timeZone) {\r\n    timeZone = \"Europe/Rome\"\r\n}\r\nlog.debug \"timeZone: \" + timeZone\r\nlocalTimeStamp = (new Timestamp((new Date(new Date().getTime() - TimeZone.getDefault().getRawOffset() + TimeZone.getTimeZone(timeZone.toString()).getRawOffset())).time)).toString()\r\nlocalDate = new Date(new Date().getTime() - TimeZone.getDefault().getRawOffset() + TimeZone.getTimeZone(timeZone.toString()).getRawOffset())\r\n\r\n}else{\r\n\r\n    localTimeStamp =  (new Timestamp((new Date()).time)).toString()\r\n    localDate =  new Date()\r\n\r\n}\r\n\r\nlog.debug localTimeStamp\r\nlog.debug localDate\r\n/*25.11.22*/\r\n\r\n/* ------------ DEFINE ACTION TO BE TRACED AND SET TO BE DONE ------------- */\r\ndef ACTION = properties['wf.tr.indirectTask.action'].toString()\r\ndef SET = properties['wf.tr.endIndirectTask.set'].toString()\r\n\r\ndef ONSITE_TECH_REPORT_OBJ_TYPE=properties['iobj.onSiteTechReport'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_NAME=properties['iobj.onSiteTechReport.name.id'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF=properties['iobj.onSiteTechReport.technicianRef.id'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED=properties['iobj.onSiteTechReport.jobCompleted.id'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_JOB_STARTED=properties['iobj.onSiteTechReport.jobStarted.id'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_TRACE_ACTION=properties['iobj.onSiteTechReport.traceAction.id'].toString().toInteger()\r\n\r\ndef dateToday = new SimpleDateFormat(\"M/dd/yyyy\").format(localDate) \r\ndef lastActivity, jobCompleted\r\n\r\ndef lang, docLang\r\ndocLang = issue.getCustomFieldValue(docLanguage)\r\nif(docLang==null &amp;&amp; issue.getCustomFieldValue(userLanguage).toString()!=\"null\"){\r\n    lang = issue.getCustomFieldValue(userLanguage)\r\n}else{\r\n    if(docLang!=null){\r\n        def rKey = docLang.toString().substring(docLang.toString().lastIndexOf('(')+1,docLang.toString().lastIndexOf(')'))\r\n        if(objectFacade.loadObjectAttributeBean(objectFacade.loadObjectBean(rKey).getId(), \"ISO_CODE\")){\r\n            def obTriage = objectFacade.loadObjectAttributeBean(objectFacade.loadObjectBean(rKey).getId(), \"ISO_CODE\").createMutable()\r\n            lang = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\r\n            log.debug \"lang: \" + lang\r\n        }\r\n    }\r\n} \r\n\r\nif(issue.getCustomFieldValue(tktFromMobile) == null || !issue.getCustomFieldValue(tktFromMobile).equals(\"TRAVEL_HOME\")){\r\n    def objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = Technician AND TECHNICIAN_REF.TECH_ACCOUNT =\\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\"\")\r\n    log.warn \"iql: \" + \"objectType = Technician AND TECHNICIAN_REF.TECH_ACCOUNT =\\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\"\"\r\n\r\n    for(technician in objects){\r\n        def tech=technician.toString()\r\n        def techKey = tech.substring(tech.lastIndexOf('(')+1,tech.lastIndexOf(')'))\r\n        def techName = tech.substring(0,tech.lastIndexOf('(')-1)\r\n        def techObject = objectFacade.loadObjectBean(techKey)\r\n        log.info \"techKey: \" + techKey\r\n        log.info (\"techName: \" + techName)\r\n        log.info (\"techObject: \" + techObject)\r\n\r\n        objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = OnSite_Tech_Report AND object HAVING connectedTickets(key=\" + issue.key + \") AND TECHNICIAN_REF.TECHNICIAN_REF.TECH_ACCOUNT =\\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\" AND JOB_STARTED IS NOT EMPTY ORDER BY JOB_STARTED DESC\")\r\n        log.warn \"iql: \" + \"objectType = OnSite_Tech_Report AND object HAVING connectedTickets(key=\" + issue.key + \") AND TECHNICIAN_REF.TECHNICIAN_REF.TECH_ACCOUNT =\\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\" AND JOB_STARTED IS NOT EMPTY ORDER BY JOB_STARTED DESC\"\r\n\r\n        if(objects.size==0){\r\n            /*Prima attivit\u00e0 della giornata --&gt; JOB_STARTED = time stamp reale*/\r\n            log.debug \"errore - inizio attivit\u00e0 non trovato\"\r\n        }else{\r\n            /*UPDATE JOB_COMPLETED ON SELECTED OBJECT*/          \r\n            def obj = objectFacade.loadObjectBean(objects[0].getId());\r\n            attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED); \r\n            log.info \"attribType: \" + attribType.toString()\r\n            newAttrib = obj.createObjectAttributeBean(attribType);\r\n            def newAttribValue = newAttrib.createObjectAttributeValueBean();\r\n\r\n            jobCompleted = localDate\r\n            try {\r\n                newAttribValue.setDateValue(jobCompleted);\r\n            } catch (Exception vie) {\r\n                log.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType.toString() + \" to \" + jobCompleted.toString() + \". Exiting.\");\r\n                log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                return false;\r\n            }\r\n            \r\n            def attribValues = newAttrib.getObjectAttributeValueBeans();\r\n            attribValues.add(newAttribValue);\r\n            newAttrib.setObjectAttributeValueBeans(attribValues);\r\n            \r\n            try {\r\n                newAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\r\n            } catch (Exception vie) {\r\n                log.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\r\n                log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                return false;\r\n            }\r\n            \r\n            def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\r\n            MutableIssue mi = (MutableIssue) issue\r\n            mi.setCustomFieldValue(tktJobCompleted, jobCompleted.toTimestamp());\r\n            ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n        }\r\n    }\r\n}\r\n\r\nissueIndexingService.reIndex(issue)\r\n\r\n/* REST API per pulizia cache issue linkata */\r\nrequestMethod = \"GET\";\r\n/*Script Variables*/\r\n//Per test da console\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-32535\")\r\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/clearCache/ticketkey/\" + issue.key\r\nURL url = new URL(baseURL)\r\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\r\nconnection.setRequestMethod(requestMethod);\r\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\nconnection.setRequestProperty(\"Accept\", \"*/*\");\r\nconnection.setDoOutput(true);\r\nconnection.setDoInput(true);\r\nconnection.connect();\r\nlog.debug \"ResponseCode:\" + connection.getResponseCode()\r\nif (!connection.getResponseCode().toString().equals(\"200\")){\r\n    log.debug \"url: \" + url\r\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\r\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\r\n}\r\n\r\nrequestMethod = \"POST\";\r\n\r\ndef body_req = []\r\n\r\n/** SERVICE ORDER CREATION **/\r\nbody_req = [\r\n    \"issueKey\": issue.key\r\n] \r\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order?language=\"+lang\r\n\r\nlog.debug \"baseURL SO: \" + baseURL\r\nlog.debug \"body_req SO: \" + body_req\r\nurl = new URL(baseURL)\r\nconnection = (HttpURLConnection)url.openConnection();\r\nconnection.setRequestMethod(requestMethod);\r\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\nconnection.setRequestProperty(\"Accept\", \"*/*\");\r\nconnection.setDoOutput(true);\r\nconnection.setDoInput(true);\r\nconnection.outputStream\r\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\r\nlog.debug connection.outputStream\r\nconnection.connect();\r\n\r\ndef output = new ArrayList()\r\ndef eList = new ArrayList()\r\ndef eListErrors = new ArrayList()\r\ndef errorMsgs = new ArrayList()\r\n\r\nif (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\r\n    log.debug \"url: \" + url\r\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\r\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\r\n\r\n    def outputMsg = ((HttpURLConnection)connection).errorStream.text\r\n    log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\r\n\r\n    def jsonSlurper = new JsonSlurper()\r\n    def json_object = jsonSlurper.parseText(outputMsg)\r\n    assert json_object instanceof Map  \r\n    log.debug \"message: \" +  json_object.message\r\n    log.debug \"errors: \" +  json_object.errors.toString()\r\n    \r\n    def result\r\n    if (json_object.message!=null)\r\n    {\r\n        result = json_object.message\r\n    }\r\n    if(json_object.errors != null){\r\n        result = result.toString() + json_object.errors.toString()\r\n    }\r\n\r\n\r\n    eListErrors.add(\"E\")\r\n    eListErrors.add(\"OP-SAP-SO-CREATE\")\r\n    errorMsgs.add(connection.getResponseCode() + \" \" + result)\r\n    eListErrors.add(errorMsgs)\r\n    eList.add(eListErrors)\r\n\r\n    output.add(eList)\r\n    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\r\n}else{\r\n    body_req = [\r\n        \"issueKey\": issue.key,\r\n    ] \r\n\r\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/order/confirmation?language=\"+lang\r\n    log.debug \"body_req SC: \" + body_req\r\n    log.debug \"baseURL SC: \" + baseURL\r\n    url = new URL(baseURL)\r\n    connection = (HttpURLConnection)url.openConnection();\r\n    connection.setRequestMethod(requestMethod);\r\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n    connection.setRequestProperty(\"Accept\", \"*/*\");\r\n    connection.setDoOutput(true);\r\n    connection.setDoInput(true);\r\n    connection.outputStream\r\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\r\n    log.debug connection.outputStream\r\n    connection.connect();\r\n\r\n    output = new ArrayList()\r\n    eList = new ArrayList()\r\n    eListErrors = new ArrayList()\r\n    errorMsgs = new ArrayList()\r\n\r\n    if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\r\n        log.debug \"url: \" + url\r\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\r\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\r\n\r\n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\r\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\r\n\r\n        def jsonSlurper = new JsonSlurper()\r\n        def json_object = jsonSlurper.parseText(outputMsg)\r\n        assert json_object instanceof Map  \r\n        log.debug \"message: \" +  json_object.message.toString().replaceAll(\"/[^a-zA-Z ]/g\",\"\").replaceAll('\"','')\r\n        log.debug \"errors: \" +  json_object.errors.toString()\r\n\r\n        eListErrors.add(\"E\")\r\n        eListErrors.add(\"OP-SAP-SC-CREATE\")\r\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\r\n        eListErrors.add(errorMsgs)\r\n        eList.add(eListErrors)\r\n\r\n        output.add(eList)\r\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\r\n    }\r\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </global-actions>
  <common-actions>
    <action id="11" name="Stop Working" view="fieldscreen">
      <meta name="jira.description" />
      <meta name="jira.fieldscreen.id">19908</meta>
      <validators>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">50ecadd2-211d-42c2-a150-5098f76a0bd8</arg>
          <arg name="FIELD_NOTES">Update JOB_COMPLETED on INDIRECT TASK &amp;&amp; Update SO</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\r\nimport groovy.json.StreamingJsonBuilder;\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.issue.CustomFieldManager;\r\nimport com.atlassian.jira.issue.fields.CustomField;\r\nimport com.atlassian.jira.issue.IssueManager;\r\nimport com.atlassian.jira.component.ComponentAccessor;\r\nimport com.atlassian.jira.issue.Issue;\r\nimport com.atlassian.jira.issue.MutableIssue\r\nimport org.apache.commons.codec.binary.Base64;\r\nimport org.apache.log4j.Category\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\nimport java.text.SimpleDateFormat \r\nimport java.util.Date\r\nimport java.sql.Timestamp\r\nimport com.atlassian.jira.issue.index.IssueIndexingService\r\nimport com.atlassian.jira.event.type.EventDispatchOption\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\nlog.setLevel(org.apache.log4j.Level.DEBUG)\r\nimport com.atlassian.jira.issue.link.IssueLink\r\n\r\nIssueManager issueManager = ComponentAccessor.getIssueManager();\r\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\r\n\r\ndef sapSN =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_NOTIFICATION\")[0]\r\ndef requestMethod\r\ndef baseURL\r\n\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\"); \r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n  \r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\r\n  \r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\"); \r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n  \r\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\"); \r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\r\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \r\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\r\n\r\nIssueIndexingService issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-59514\")\r\n\r\ndef currentUser = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENT_USER\")[0]\r\ndef onSiteTechsTraceField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIAN_ACTIVITIES_TRACE\")[0];\r\ndef onSiteTechsTravelField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIAN_TRAVEL\")[0];\r\ndef tktFromMobile = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_FROM_MOBILE\")[0]\r\ndef tktJobStarted = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_INDIRECT_JOB_STARTED\")[0]\r\ndef tktJobCompleted = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_INDIRECT_JOB_COMPLETED\")[0]\r\ndef userLanguage = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENTUSER_LANGUAGE\")\r\ndef docLanguage = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_DOC_GENERATION_LANGUAGE\")\r\n\r\ndef OnSiteTechObjects = new ArrayList();\r\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\r\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\r\n\r\n/*25.11.22*/\r\ndef localTimeStamp\r\ndef localDate\r\n/*03.10.23*/\r\ndef DATETIME_OFFSET = properties['wf.tr.datetimewithoffset'].toString()\r\nlog.debug \"DATETIME_OFFSET: \" + DATETIME_OFFSET\r\nif (DATETIME_OFFSET != null &amp;&amp; DATETIME_OFFSET != 'null'){\r\n\r\ndef siteCF = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SITE\")[0];\r\ndef site, siteKey, siteObject, visibility, visibilityKey\r\nif (issue.getCustomFieldValue(siteCF) != null) {\r\n    site = issue.getCustomFieldValue(siteCF).toString()\r\n    siteKey = site.substring(site.lastIndexOf('(') + 1, site.lastIndexOf(')'))\r\n    siteObject = objectFacade.loadObjectBean(siteKey)\r\n    visibility = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_VISIBILITY_KEY\")[0]\r\n    visibilityKey = issue.getCustomFieldValue(visibility)[0].toString().substring(issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf('(') + 1, issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf(')'))\r\n} else {\r\n    visibility = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_INDIRECT_JOB_TKT_VISIBILITY\")[0]\r\n    visibilityKey = issue.getCustomFieldValue(visibility)[0].toString().substring(issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf('(') + 1, issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf(')'))\r\n}\r\ndef timeZone\r\ndef companyRef = objectFacade.loadObjectAttributeBean(objectFacade.loadObjectBean(visibilityKey).getId(), properties['iobj.visibilityKey.companyRef'].toString()).getObjectAttributeValueBeans();\r\nlog.info \"companyRef: \" + companyRef\r\ndef companyRefId = companyRef[0].getReferencedObjectBeanId()\r\nlog.debug \"companyRefId:\" + companyRefId\r\nif (issue.getCustomFieldValue(siteCF) != null &amp;&amp; objectFacade.loadObjectAttributeBean(siteObject.getId(), \"SITE_REF\")) {\r\n    obTriage = objectFacade.loadObjectAttributeBean(siteObject.getId(), \"SITE_REF\").createMutable()\r\n    s = obTriage.getObjectAttributeValueBeans()\r\n    s = s.toString()\r\n    sKey = s.substring(s.lastIndexOf('(') + 1, s.lastIndexOf(')'))\r\n    if (objectFacade.loadObjectAttributeBean(sKey.toInteger(), \"TIME_ZONE\")) {\r\n        obTriage = objectFacade.loadObjectAttributeBean(sKey.toInteger(), \"TIME_ZONE\").createMutable()\r\n        timeZone = obTriage.getObjectAttributeValueBeans()\r\n        timeZone = timeZone[0].getValue()\r\n        log.debug \"TimeZone da Site: \" + timeZone\r\n    } else {\r\n        if (objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\")) {\r\n            obTriage = objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\").createMutable()\r\n            timeZone = obTriage.getObjectAttributeValueBeans()\r\n            timeZone = timeZone[0].getValue()\r\n            log.debug \"TimeZone da Company: \" + timeZone\r\n        }\r\n    }\r\n} else {\r\n    if (objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\")) {\r\n        obTriage = objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\").createMutable()\r\n        timeZone = obTriage.getObjectAttributeValueBeans()\r\n        timeZone = timeZone[0].getValue()\r\n        log.debug \"TimeZone da Company: \" + timeZone\r\n    }\r\n}\r\nif (!timeZone) {\r\n    timeZone = \"Europe/Rome\"\r\n}\r\nlog.debug \"timeZone: \" + timeZone\r\nlocalTimeStamp = (new Timestamp((new Date(new Date().getTime() - TimeZone.getDefault().getRawOffset() + TimeZone.getTimeZone(timeZone.toString()).getRawOffset())).time)).toString()\r\nlocalDate = new Date(new Date().getTime() - TimeZone.getDefault().getRawOffset() + TimeZone.getTimeZone(timeZone.toString()).getRawOffset())\r\n\r\n}else{\r\n\r\n    localTimeStamp =  (new Timestamp((new Date()).time)).toString()\r\n    localDate =  new Date()\r\n\r\n}\r\nlog.debug localTimeStamp\r\nlog.debug localDate\r\n/*25.11.22*/\r\n\r\n/* ------------ DEFINE ACTION TO BE TRACED AND SET TO BE DONE ------------- */\r\ndef ACTION = properties['wf.tr.indirectTask.action'].toString()\r\ndef SET = properties['wf.tr.endIndirectTask.set'].toString()\r\n\r\ndef ONSITE_TECH_REPORT_OBJ_TYPE=properties['iobj.onSiteTechReport'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_NAME=properties['iobj.onSiteTechReport.name.id'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF=properties['iobj.onSiteTechReport.technicianRef.id'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED=properties['iobj.onSiteTechReport.jobCompleted.id'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_JOB_STARTED=properties['iobj.onSiteTechReport.jobStarted.id'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_TRACE_ACTION=properties['iobj.onSiteTechReport.traceAction.id'].toString().toInteger()\r\n\r\ndef dateToday = new SimpleDateFormat(\"M/dd/yyyy\").format(localDate) \r\ndef lastActivity, jobCompleted\r\n\r\ndef lang, docLang\r\ndocLang = issue.getCustomFieldValue(docLanguage)\r\nif(docLang==null &amp;&amp; issue.getCustomFieldValue(userLanguage).toString()!=\"null\"){\r\n    lang = issue.getCustomFieldValue(userLanguage)\r\n}else{\r\n    if(docLang!=null){\r\n        def rKey = docLang.toString().substring(docLang.toString().lastIndexOf('(')+1,docLang.toString().lastIndexOf(')'))\r\n        if(objectFacade.loadObjectAttributeBean(objectFacade.loadObjectBean(rKey).getId(), \"ISO_CODE\")){\r\n            def obTriage = objectFacade.loadObjectAttributeBean(objectFacade.loadObjectBean(rKey).getId(), \"ISO_CODE\").createMutable()\r\n            lang = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\r\n            log.debug \"lang: \" + lang\r\n        }\r\n    }\r\n} \r\n\r\nif(issue.getCustomFieldValue(tktFromMobile) == null || !issue.getCustomFieldValue(tktFromMobile).equals(\"TRAVEL_HOME\")){\r\n    def objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = Technician AND TECHNICIAN_REF.TECH_ACCOUNT =\\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\"\")\r\n    log.warn \"iql: \" + \"objectType = Technician AND TECHNICIAN_REF.TECH_ACCOUNT =\\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\"\"\r\n\r\n    for(technician in objects){\r\n        def tech=technician.toString()\r\n        def techKey = tech.substring(tech.lastIndexOf('(')+1,tech.lastIndexOf(')'))\r\n        def techName = tech.substring(0,tech.lastIndexOf('(')-1)\r\n        def techObject = objectFacade.loadObjectBean(techKey)\r\n        log.info \"techKey: \" + techKey\r\n        log.info (\"techName: \" + techName)\r\n        log.info (\"techObject: \" + techObject)\r\n\r\n        objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = OnSite_Tech_Report AND object HAVING connectedTickets(key=\" + issue.key + \") AND TECHNICIAN_REF.TECHNICIAN_REF.TECH_ACCOUNT =\\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\" AND JOB_STARTED IS NOT EMPTY ORDER BY JOB_STARTED DESC\")\r\n        log.warn \"iql: \" + \"objectType = OnSite_Tech_Report AND object HAVING connectedTickets(key=\" + issue.key + \") AND TECHNICIAN_REF.TECHNICIAN_REF.TECH_ACCOUNT =\\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\" AND JOB_STARTED IS NOT EMPTY ORDER BY JOB_STARTED DESC\"\r\n\r\n        if(objects.size==0){\r\n            /*Prima attivit\u00e0 della giornata --&gt; JOB_STARTED = time stamp reale*/\r\n            log.debug \"errore - inizio attivit\u00e0 non trovato\"\r\n        }else{\r\n            /*UPDATE JOB_COMPLETED ON SELECTED OBJECT*/          \r\n            def obj = objectFacade.loadObjectBean(objects[0].getId());\r\n            attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED); \r\n            log.info \"attribType: \" + attribType.toString()\r\n            newAttrib = obj.createObjectAttributeBean(attribType);\r\n            def newAttribValue = newAttrib.createObjectAttributeValueBean();\r\n\r\n            jobCompleted = localDate\r\n            try {\r\n                newAttribValue.setDateValue(jobCompleted);\r\n            } catch (Exception vie) {\r\n                log.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType.toString() + \" to \" + jobCompleted.toString() + \". Exiting.\");\r\n                log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                return false;\r\n            }\r\n            \r\n            def attribValues = newAttrib.getObjectAttributeValueBeans();\r\n            attribValues.add(newAttribValue);\r\n            newAttrib.setObjectAttributeValueBeans(attribValues);\r\n            \r\n            try {\r\n                newAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\r\n            } catch (Exception vie) {\r\n                log.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\r\n                log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n                return false;\r\n            }\r\n            \r\n            def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\r\n            MutableIssue mi = (MutableIssue) issue\r\n            mi.setCustomFieldValue(tktJobCompleted, jobCompleted.toTimestamp());\r\n            ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n        }\r\n    }\r\n}\r\n\r\nissueIndexingService.reIndex(issue)\r\n\r\n/* REST API per pulizia cache issue linkata */\r\nrequestMethod = \"GET\";\r\n/*Script Variables*/\r\n//Per test da console\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-32535\")\r\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/clearCache/ticketkey/\" + issue.key\r\nURL url = new URL(baseURL)\r\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\r\nconnection.setRequestMethod(requestMethod);\r\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\nconnection.setRequestProperty(\"Accept\", \"*/*\");\r\nconnection.setDoOutput(true);\r\nconnection.setDoInput(true);\r\nconnection.connect();\r\nlog.debug \"ResponseCode:\" + connection.getResponseCode()\r\nif (!connection.getResponseCode().toString().equals(\"200\")){\r\n    log.debug \"url: \" + url\r\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\r\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\r\n}\r\n\r\nrequestMethod = \"POST\";\r\n\r\ndef body_req = []\r\n\r\n/** SERVICE ORDER CREATION **/\r\nbody_req = [\r\n    \"issueKey\": issue.key\r\n] \r\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order?language=\"+lang\r\n\r\nlog.debug \"baseURL SO: \" + baseURL\r\nlog.debug \"body_req SO: \" + body_req\r\nurl = new URL(baseURL)\r\nconnection = (HttpURLConnection)url.openConnection();\r\nconnection.setRequestMethod(requestMethod);\r\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\nconnection.setRequestProperty(\"Accept\", \"*/*\");\r\nconnection.setDoOutput(true);\r\nconnection.setDoInput(true);\r\nconnection.outputStream\r\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\r\nlog.debug connection.outputStream\r\nconnection.connect();\r\n\r\ndef output = new ArrayList()\r\ndef eList = new ArrayList()\r\ndef eListErrors = new ArrayList()\r\ndef errorMsgs = new ArrayList()\r\n\r\nif (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\r\n    log.debug \"url: \" + url\r\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\r\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\r\n\r\n    def outputMsg = ((HttpURLConnection)connection).errorStream.text\r\n    log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\r\n\r\n    def jsonSlurper = new JsonSlurper()\r\n    def json_object = jsonSlurper.parseText(outputMsg)\r\n    assert json_object instanceof Map  \r\n    log.debug \"message: \" +  json_object.message\r\n    log.debug \"errors: \" +  json_object.errors.toString()\r\n    \r\n    def result\r\n    if (json_object.message!=null)\r\n    {\r\n        result = json_object.message\r\n    }\r\n    if(json_object.errors != null){\r\n        result = result.toString() + json_object.errors.toString()\r\n    }\r\n\r\n\r\n    eListErrors.add(\"E\")\r\n    eListErrors.add(\"OP-SAP-SO-CREATE\")\r\n    errorMsgs.add(connection.getResponseCode() + \" \" + result)\r\n    eListErrors.add(errorMsgs)\r\n    eList.add(eListErrors)\r\n\r\n    output.add(eList)\r\n    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\r\n}else{\r\n    body_req = [\r\n        \"issueKey\": issue.key,\r\n    ] \r\n\r\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/order/confirmation?language=\"+lang\r\n    log.debug \"body_req SC: \" + body_req\r\n    log.debug \"baseURL SC: \" + baseURL\r\n    url = new URL(baseURL)\r\n    connection = (HttpURLConnection)url.openConnection();\r\n    connection.setRequestMethod(requestMethod);\r\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n    connection.setRequestProperty(\"Accept\", \"*/*\");\r\n    connection.setDoOutput(true);\r\n    connection.setDoInput(true);\r\n    connection.outputStream\r\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\r\n    log.debug connection.outputStream\r\n    connection.connect();\r\n\r\n    output = new ArrayList()\r\n    eList = new ArrayList()\r\n    eListErrors = new ArrayList()\r\n    errorMsgs = new ArrayList()\r\n\r\n    if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\r\n        log.debug \"url: \" + url\r\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\r\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\r\n\r\n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\r\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\r\n\r\n        def jsonSlurper = new JsonSlurper()\r\n        def json_object = jsonSlurper.parseText(outputMsg)\r\n        assert json_object instanceof Map  \r\n        log.debug \"message: \" +  json_object.message.toString().replaceAll(\"/[^a-zA-Z ]/g\",\"\").replaceAll('\"','')\r\n        log.debug \"errors: \" +  json_object.errors.toString()\r\n\r\n        eListErrors.add(\"E\")\r\n        eListErrors.add(\"OP-SAP-SC-CREATE\")\r\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\r\n        eListErrors.add(errorMsgs)\r\n        eList.add(eListErrors)\r\n\r\n        output.add(eList)\r\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\r\n    }\r\n}","scriptPath":null,"parameters":{}}</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="v+nWù">¶»ž</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">75eccad6-3b77-4725-bbc4-77a5cd861467</arg>
          <arg name="FIELD_NOTES">OP : backend validator call</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonBuilder\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.issue.fields.CustomField\r\nimport com.atlassian.jira.issue.CustomFieldManager\r\nimport com.atlassian.jira.workflow.JiraWorkflow\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenLayoutItem\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenTab\r\nimport com.atlassian.jira.issue.fields.FieldManager\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreen\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenManager\r\nimport com.opensymphony.workflow.loader.ActionDescriptor\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.workflow.WorkflowManager\r\nimport groovy.json.StreamingJsonBuilder\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\n\r\ndef baseURL\r\ndef responseBody\r\n\r\ntry {\r\n    Properties properties = new Properties()\r\n    File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\r\n    propertiesFile.withInputStream {\r\n        properties.load(it)\r\n    }\r\n\r\n    def serverBase = String.format(\"http://%s/op\", properties['api.env'])\r\n    def transactionAction = \"validators\"\r\n\r\n    URL url\r\n    def requestMethod = \"POST\"\r\n\r\n    baseURL = String.format(\"%s/rest/jira/workflows/%s/%s\", serverBase, transientVars.actionId, transactionAction)\r\n\r\n    log.debug(\"Composing baseURL as '${baseURL}'\")\r\n\r\n    WorkflowManager workflowManager = ComponentAccessor.getWorkflowManager()\r\n    JiraWorkflow jiraWorkflow = workflowManager.getWorkflow(transientVars.issue)\r\n\r\n    CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager()\r\n\r\n    log.debug(jiraWorkflow.getName())\r\n\r\n    ActionDescriptor ad = workflowManager.getActionDescriptor(transientVars.issue, transientVars.actionId)\r\n\r\n    log.debug(\"ActionDescriptor Name: ${ad.getName()}\") // Genera Rapporto di Intervento FAAC\r\n    log.debug(\"ActionDescriptor MetaAttrs: ${ad.getMetaAttributes()}\") // {opsbar-sequence=10, jira.description=, jira.fieldscreen.id=19910}\r\n\r\n    def adMeta = ad.getMetaAttributes()\r\n    String fieldScreenId = adMeta.get(\"jira.fieldscreen.id\");\r\n    log.debug(\"Field screen id: ${fieldScreenId}\")\r\n\r\n    Map&lt;String, Object&gt; customFieldMap = new HashMap&lt;&gt;()\r\n    if (fieldScreenId) {\r\n        FieldScreenManager fieldScreenManager = ComponentAccessor.getComponent(FieldScreenManager.class);\r\n        FieldScreen fieldScreen = fieldScreenManager.getFieldScreen(Long.valueOf(fieldScreenId.toString()));\r\n        List&lt;FieldScreenTab&gt; fsts = fieldScreen.getTabs();\r\n        for (FieldScreenTab fst: fsts) {\r\n            List&lt;FieldScreenLayoutItem&gt; qwe = fst.getFieldScreenLayoutItems();\r\n            for (FieldScreenLayoutItem fsli: qwe) {\r\n                if (fsli.getFieldId() == null) {\r\n                    continue;\r\n                }\r\n                CustomField customField = customFieldManager.getCustomFieldObject(fsli.getFieldId());\r\n                if (customField == null) {\r\n                    continue;\r\n                }\r\n                def customFieldValue = issue.getCustomFieldValue(customField);\r\n                customFieldMap.put(fsli.getFieldId(), customFieldValue == null ? null : customFieldValue.toString())\r\n            }\r\n        }\r\n    }\r\n    log.debug(\"customFieldMap: ${customFieldMap}\")\r\n\r\n    Map bodyReq = [\r\n        \"issueTypeId\": issue.issueTypeId,\r\n        \"issueKey\": issue.key,\r\n        \"actionName\": ad.getName(),\r\n        \"jiraWorkflowName\": jiraWorkflow.getName(),\r\n        \"customFieldMap\": customFieldMap,\r\n        \"properties\": properties\r\n    ]\r\n    JsonBuilder jsonBuilder = new JsonBuilder(bodyReq)\r\n    String jsonBodyReq = jsonBuilder.toString()\r\n\r\n    log.debug(\"Calling [${requestMethod}] ${baseURL} with body ${jsonBodyReq}\")\r\n\r\n    url = new URL(baseURL)\r\n    HttpURLConnection connection = (HttpURLConnection) url.openConnection()\r\n    connection.setRequestMethod(requestMethod)\r\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\")\r\n    connection.setRequestProperty(\"Accept\", \"*/*\")\r\n    connection.setDoOutput(true)\r\n    connection.setDoInput(true)\r\n    connection.outputStream.withWriter(\"UTF-8\") {\r\n        new StreamingJsonBuilder(it, bodyReq)\r\n    }\r\n\r\n    connection.connect()\r\n    def responseCode = connection.getResponseCode().toString()\r\n\r\n    log.debug(\"Response HttpStatusCode: ${responseCode}\")\r\n\r\n    // If backend replies with 200 then the condition is passed\r\n    if (\"200\".equals(responseCode)) {\r\n        log.debug(\"Validator passed!\")\r\n    } else {\r\n\r\n        responseBody = ((HttpURLConnection) connection).errorStream.text\r\n        log.debug(\"Validator not passed, responseBody: ${responseBody}\")\r\n\r\n        // testing without redeploying each time\r\n        //responseBody = '{\"W\": \"[[[W, CONFIRM_RISK_ANALYSIS, null]]]\"}'\r\n\r\n        throw new InvalidInputException(responseBody)\r\n    }\r\n} catch (Exception e) {\r\n    //This is an exception in the script\r\n    log.debug(\"Exception raised calling endpoint ${baseURL}\")\r\n    log.error(e)\r\n    if (e instanceof InvalidInputException) {\r\n        throw e\r\n    }\r\n    throw new InvalidInputException('{\"E\": \"[[[ Validator failed ]]]\" }')\r\n}","scriptPath":null,"parameters":{}}</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="žée" status="žée" step="2">
          <post-functions>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
            <function type="class">
              <arg name="conditionList">3</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
              <arg name="comparisonType">1</arg>
              <arg name="диюбwbХ*'">¶»ž</arg>
              <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
              <arg name="preconditionNegateResult-booleanValue" />
              <arg name="ºè">b7234fb1-a9c4-4ec7-b27d-5bc729e9802d</arg>
              <arg name="fieldValue" />
              <arg name="preconditionMode-textValue">DISCARD</arg>
              <arg name="fieldsList">customfield_22628</arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd" />
              <arg name="append.value" />
              <arg name="maxAllowed-integerValue" />
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field.value">%%CURRENT_DATETIME%%</arg>
              <arg name="ºè">24e9ce6f-bfb6-4e89-be35-2a93b5e7d6bb</arg>
              <arg name="field.name">customfield_22628</arg>
              <arg name="scopeType">H</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd" />
              <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
              <arg name="preconditionAwareFunctionMode-textValue">M</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql" />
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql" />
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </common-actions>
  <steps>
    <step id="1" name=":—§">
      <meta name="jira.status.id">1</meta>
      <actions>
<common-action id="11" />
        <action id="31" name="Assign to Technician" view="fieldscreen">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20117</meta>
          <results>
            <unconditional-result old-status="žée" status="žée" step="3">
              <post-functions>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="диюбwbХ*'">¶»ž</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue" />
                  <arg name="ºè">ae5404dc-89b8-47ff-a3fd-c6eeec5ad699</arg>
                  <arg name="fieldValue" />
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">customfield_23619</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="ºè">04b8cc45-0422-40c5-8f5e-eb1363f9cc5d</arg>
                  <arg name="field.name">customfield_23619</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="ºè">7ed8f248-f9bd-40b5-b04c-c229aaec7f7e</arg>
                  <arg name="field">customfield_23237</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="field.copyFieldSource2" />
                  <arg name="field.copyFieldSource1">customfield_23236</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="field.createTargetValue1" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyFieldMode1">OVERWRITE</arg>
                  <arg name="ºè">028c2ca2-35a9-495f-b998-a6bf92dc0722</arg>
                  <arg name="field.copyFieldDestination1">customfield_22653</arg>
                  <arg name="field.copyFieldSeparator1" />
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescopyValueFromOtherField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.CopyValueFromOtherFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="61" name="Stop Working - UK" view="fieldscreen">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19908</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">67f024c1-3d38-44a7-9231-ba2cd143ae5b</arg>
                <arg name="FIELD_INVERT_CONDITION" />
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_USER_IDS">arianna.fabbri|||JIRAUSER58800</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">fbd4cd66-b9a4-46a6-a0df-35f427804e1c</arg>
              <arg name="FIELD_NOTES">Update SO</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\r\nimport groovy.json.StreamingJsonBuilder;\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.issue.CustomFieldManager;\r\nimport com.atlassian.jira.issue.fields.CustomField;\r\nimport com.atlassian.jira.issue.IssueManager;\r\nimport com.atlassian.jira.component.ComponentAccessor;\r\nimport com.atlassian.jira.issue.Issue;\r\nimport com.atlassian.jira.issue.MutableIssue\r\nimport org.apache.commons.codec.binary.Base64;\r\nimport org.apache.log4j.Category\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\nimport java.text.SimpleDateFormat \r\nimport java.util.Date\r\nimport java.sql.Timestamp\r\nimport com.atlassian.jira.issue.index.IssueIndexingService\r\nimport com.atlassian.jira.event.type.EventDispatchOption\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\nlog.setLevel(org.apache.log4j.Level.DEBUG)\r\nimport com.atlassian.jira.issue.link.IssueLink\r\n\r\nIssueManager issueManager = ComponentAccessor.getIssueManager();\r\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\r\n\r\ndef sapSN =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_NOTIFICATION\")[0]\r\ndef requestMethod\r\ndef baseURL\r\n\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\"); \r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n  \r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\r\n  \r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\"); \r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n  \r\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\"); \r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\r\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \r\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\r\n\r\nIssueIndexingService issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-59514\")\r\n\r\ndef currentUser = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENT_USER\")[0]\r\ndef onSiteTechsTraceField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIAN_ACTIVITIES_TRACE\")[0];\r\ndef onSiteTechsTravelField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIAN_TRAVEL\")[0];\r\ndef tktFromMobile = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_FROM_MOBILE\")[0]\r\ndef tktJobStarted = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_INDIRECT_JOB_STARTED\")[0]\r\ndef tktJobCompleted = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_INDIRECT_JOB_COMPLETED\")[0]\r\ndef userLanguage = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENTUSER_LANGUAGE\")\r\ndef docLanguage = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_DOC_GENERATION_LANGUAGE\")\r\n\r\ndef OnSiteTechObjects = new ArrayList();\r\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\r\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\r\n\r\n/* ------------ DEFINE ACTION TO BE TRACED AND SET TO BE DONE ------------- */\r\ndef ACTION = properties['wf.tr.indirectTask.action'].toString()\r\ndef SET = properties['wf.tr.startIndirectTask.set'].toString()\r\n\r\ndef ONSITE_TECH_REPORT_OBJ_TYPE=properties['iobj.onSiteTechReport'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_NAME=properties['iobj.onSiteTechReport.name.id'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF=properties['iobj.onSiteTechReport.technicianRef.id'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED=properties['iobj.onSiteTechReport.jobCompleted.id'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_JOB_STARTED=properties['iobj.onSiteTechReport.jobStarted.id'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_TRACE_ACTION=properties['iobj.onSiteTechReport.traceAction.id'].toString().toInteger()\r\n\r\ndef dateToday = new SimpleDateFormat(\"M/dd/yyyy\").format(new Date()) \r\ndef lastActivity, jobCompleted\r\n\r\ndef lang='en', docLang\r\ndocLang = issue.getCustomFieldValue(docLanguage)\r\nif(docLang==null &amp;&amp; issue.getCustomFieldValue(userLanguage).toString()!=\"null\"){\r\n    lang = issue.getCustomFieldValue(userLanguage)\r\n}else{\r\n    if(docLang!=null){\r\n        def rKey = docLang.toString().substring(docLang.toString().lastIndexOf('(')+1,docLang.toString().lastIndexOf(')'))\r\n        if(objectFacade.loadObjectAttributeBean(objectFacade.loadObjectBean(rKey).getId(), \"ISO_CODE\")){\r\n            def obTriage = objectFacade.loadObjectAttributeBean(objectFacade.loadObjectBean(rKey).getId(), \"ISO_CODE\").createMutable()\r\n            lang = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\r\n            log.debug \"lang: \" + lang\r\n        }\r\n    }\r\n} \r\n\r\nrequestMethod = \"POST\";\r\n\r\ndef body_req = []\r\n\r\n\r\n/** SERVICE ORDER CREATION **/\r\nbody_req = [\r\n    \"issueKey\": issue.key\r\n] \r\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order?language=\"+lang\r\nURL url = new URL(baseURL)\r\nlog.debug \"baseURL SO: \" + baseURL\r\nlog.debug \"body_req SO: \" + body_req\r\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\r\nconnection.setRequestMethod(requestMethod);\r\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\nconnection.setRequestProperty(\"Accept\", \"*/*\");\r\nconnection.setDoOutput(true);\r\nconnection.setDoInput(true);\r\nconnection.outputStream\r\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\r\nlog.debug connection.outputStream\r\nconnection.connect();\r\n\r\ndef output = new ArrayList()\r\ndef eList = new ArrayList()\r\ndef eListErrors = new ArrayList()\r\ndef errorMsgs = new ArrayList()\r\n\r\nif (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\r\n    log.debug \"url: \" + url\r\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\r\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\r\n\r\n    def outputMsg = ((HttpURLConnection)connection).errorStream.text\r\n    log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\r\n\r\n    def jsonSlurper = new JsonSlurper()\r\n    def json_object = jsonSlurper.parseText(outputMsg)\r\n    assert json_object instanceof Map  \r\n    log.debug \"message: \" +  json_object.message\r\n    log.debug \"errors: \" +  json_object.errors.toString()\r\n    \r\n    def result\r\n    if (json_object.message!=null)\r\n    {\r\n        result = json_object.message\r\n    }\r\n    if(json_object.errors != null){\r\n        result = result.toString() + json_object.errors.toString()\r\n    }\r\n\r\n\r\n    eListErrors.add(\"E\")\r\n    eListErrors.add(\"OP-SAP-SO-CREATE\")\r\n    errorMsgs.add(connection.getResponseCode() + \" \" + result)\r\n    eListErrors.add(errorMsgs)\r\n    eList.add(eListErrors)\r\n\r\n    output.add(eList)\r\n    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\r\n}else{\r\n    body_req = [\r\n        \"issueKey\": issue.key,\r\n    ] \r\n\r\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/order/confirmation?language=\"+lang\r\n    log.debug \"body_req SC: \" + body_req\r\n    log.debug \"baseURL SC: \" + baseURL\r\n    url = new URL(baseURL)\r\n    connection = (HttpURLConnection)url.openConnection();\r\n    connection.setRequestMethod(requestMethod);\r\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n    connection.setRequestProperty(\"Accept\", \"*/*\");\r\n    connection.setDoOutput(true);\r\n    connection.setDoInput(true);\r\n    connection.outputStream\r\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\r\n    log.debug connection.outputStream\r\n    connection.connect();\r\n\r\n    output = new ArrayList()\r\n    eList = new ArrayList()\r\n    eListErrors = new ArrayList()\r\n    errorMsgs = new ArrayList()\r\n\r\n    if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\r\n        log.debug \"url: \" + url\r\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\r\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\r\n\r\n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\r\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\r\n\r\n        def jsonSlurper = new JsonSlurper()\r\n        def json_object = jsonSlurper.parseText(outputMsg)\r\n        assert json_object instanceof Map  \r\n        log.debug \"message: \" +  json_object.message.toString().replaceAll(\"/[^a-zA-Z ]/g\",\"\").replaceAll('\"','')\r\n        log.debug \"errors: \" +  json_object.errors.toString()\r\n\r\n        eListErrors.add(\"E\")\r\n        eListErrors.add(\"OP-SAP-SC-CREATE\")\r\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\r\n        eListErrors.add(errorMsgs)\r\n        eList.add(eListErrors)\r\n\r\n        output.add(eList)\r\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\r\n    }\r\n}","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="2">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="71" name="Refresh - UK" view="fieldscreen">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19908</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">67f024c1-3d38-44a7-9231-ba2cd143ae5b</arg>
                <arg name="FIELD_INVERT_CONDITION" />
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_USER_IDS">arianna.fabbri|||JIRAUSER58800</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">074c68c1-59e7-47b4-bd13-f756a462af64</arg>
              <arg name="FIELD_NOTES">Complete OP_INDIRECT_JOB for TRAVEL HOME logs arriving from mobile</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.issue.Issue\r\nimport com.atlassian.jira.issue.MutableIssue;\r\nimport com.atlassian.jira.event.type.EventDispatchOption;\r\nimport org.apache.log4j.Level\r\nimport java.sql.Timestamp\r\nimport com.atlassian.jira.issue.IssueManager\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File('/var/atlassian/application-data/shared/scripts/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\"); \r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n  \r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\r\n  \r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\"); \r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n  \r\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\"); \r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\r\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \r\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\r\n\r\ndef currentUser = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENT_USER\")[0]\r\ndef tktFromMobile = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_FROM_MOBILE\")[0];\r\ndef tktVisKey = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_VISIBILITY_KEY\")[0];\r\n\r\ndef indirectTask = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_INDIRECT_JOB\")[0];\r\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\r\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\r\n\r\nIssueManager issueManager = ComponentAccessor.getIssueManager()\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-41918\")\r\n\r\ndef user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\r\ndef objects = iqlFacade.findObjectsByIQLAndSchema(DBO, \"objectType = Company AND object HAVING outboundReferences(objectType = Supplier AND object HAVING inboundReferences(objectType = Supplier_Technician AND TECH_ACCOUNT = \\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\"))\")\r\nlog.debug \"iql: \" + \"objectType=Company AND object HAVING outboundReferences(objectType = Supplier AND object HAVING inboundReferences(objectType = Supplier_Technician AND TECH_ACCOUNT = \\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\"))\"\r\n\r\nif(objects &amp;&amp; issue.getCustomFieldValue(tktFromMobile).toString().equals(\"TRAVEL_HOME\")){\r\n    log.debug objects[0]\r\n    \r\n    def company=objects[0].toString()\r\n    def companyKey = company.substring(company.lastIndexOf('(')+1,company.lastIndexOf(')'))\r\n    def companyName = company.substring(0,company.lastIndexOf('(')-1)\r\n    def companyObject = objectFacade.loadObjectBean(companyKey)\r\n    log.info \"techKey: \" + companyKey\r\n    log.info (\"techName: \" + companyName)\r\n    log.info (\"techObject: \" + companyObject)\r\n    \r\n    objects = iqlFacade.findObjectsByIQLAndSchema(DBO, \"objectType = \\\"Indirect Task\\\" AND COMPANY_REF.Key = \" + companyKey.toString() + \" AND TRAVEL_HOME = true\")\r\n    log.debug \"iql: \" + \"objectType = \\\"Indirect Task\\\" AND COMPANY_REF.Key = \" + companyKey.toString() + \" AND TRAVEL_HOME = true\"\r\n\r\n    if(objects){\r\n        log.debug objects[0]\r\n        def indTaskList = new ArrayList()\r\n    \tindTaskList.add(objects[0])\r\n        \r\n        MutableIssue mi = (MutableIssue) issue;\r\n        \r\n        mi.setCustomFieldValue(indirectTask, indTaskList);\r\n    \tComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n    }\r\n}","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">1ee27d9e-192f-4cff-8640-7f7f8e369077</arg>
              <arg name="FIELD_NOTES">Inherit SAP_SERVICE_ORDER from selected "Indirect Task" + complete OP_TECHNICIANS_ONSITE + complete OP_INTERNAL_SUPPLIER</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.issue.Issue\r\nimport com.atlassian.jira.issue.MutableIssue;\r\nimport com.atlassian.jira.event.type.EventDispatchOption;\r\nimport org.apache.log4j.Level\r\nimport java.sql.Timestamp\r\nimport com.atlassian.jira.issue.IssueManager\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File('/var/atlassian/application-data/shared/scripts/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\"); \r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n  \r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\r\n  \r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\"); \r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n  \r\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\"); \r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\r\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \r\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\r\n\r\ndef currentUser = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENT_USER\")[0]\r\ndef sapServiceOrder = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_ORDER\")[0];\r\ndef internalSupplier = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_INTERNAL_SUPPLIER\")[0];\r\n\r\ndef tktFromMobile = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_FROM_MOBILE\")[0];\r\n\r\ndef jobStart = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_INDIRECT_JOB_STARTED\")[0];\r\ndef jobCompleted = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_INDIRECT_JOB_COMPLETED\")[0];\r\ndef tktVisibility = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_INDIRECT_JOB_TKT_VISIBILITY\")[0]\r\n\r\ndef onSiteTechsTraceField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIAN_ACTIVITIES_TRACE\")[0];\r\ndef onSiteTechsWorkTraceField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIAN_ACTIVITIES_TRACE_WORK\")[0];\r\n\r\ndef indirectTask = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_INDIRECT_JOB\")[0];\r\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\r\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\r\n\r\ndef ONSITE_TECH_REPORT_OBJ_TYPE=properties['iobj.onSiteTechReport'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_NAME=properties['iobj.onSiteTechReport.name.id'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF=properties['iobj.onSiteTechReport.technicianRef.id'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_SUPPLIER_REF=properties['iobj.onSiteTechReport.supplierRef.id'] ? properties['iobj.onSiteTechReport.supplierRef.id'].toString().toInteger() : 3073\r\ndef ONSITE_TECH_REPORT_ATTR_JOB_STARTED=properties['iobj.onSiteTechReport.jobStarted.id'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED=properties['iobj.onSiteTechReport.jobCompleted.id'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_TRACE_ACTION=properties['iobj.onSiteTechReport.traceAction.id'].toString().toInteger()\r\n\r\nIssueManager issueManager = ComponentAccessor.getIssueManager()\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-42265\")\r\ndef indTask = issue.getCustomFieldValue(indirectTask)\r\nindTask = indTask[0].toString()\r\nindTask = indTask.substring(indTask.indexOf('(')+1,indTask.indexOf(')'))\r\n\r\ndef indTaskObject = objectFacade.loadObjectBean(indTask)\r\nlog.debug indTaskObject\r\ndef indTaskSO = objectFacade.loadObjectAttributeBean(indTaskObject.getId(), \"SAP_SERVICE_ORDER\").getObjectAttributeValueBeans()\r\ndef OnSiteTechObjects = new ArrayList();\r\n\r\nlog.debug \"Service Order: \" + indTaskSO[0].getValue()\r\n\r\ndef user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\r\n\r\nMutableIssue mi = (MutableIssue) issue;\r\nmi.setCustomFieldValue(sapServiceOrder, indTaskSO[0].getValue());\r\nComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\ndef onSiteTechsField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.techniciansOnsite'].toString())[0];\r\ndef objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = Technician AND TECHNICIAN_REF.TECH_ACCOUNT =\\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\"\")\r\nlog.warn \"iql: \" + \"objectType = Technician AND TECHNICIAN_REF.TECH_ACCOUNT =\\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\"\"\r\n\r\nif(issue.getCustomFieldValue(tktFromMobile).toString().equals(\"TRAVEL_HOME\")){\r\n    def indTaskVisibility = objectFacade.loadObjectAttributeBean(indTaskObject.getId(), \"DEFAULT_VISIBILITY\").getObjectAttributeValueBeans()\r\n\tdef visibilityKey = new ArrayList()\r\n\tvisibilityKey.add(objectFacade.loadObjectBean(indTaskVisibility[0].getValue()))\r\n    mi.setCustomFieldValue(tktVisibility, visibilityKey);\r\n    ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n}\r\n\r\nif(objects &amp;&amp; issue.getCustomFieldValue(tktFromMobile).toString().equals(\"TRAVEL_HOME\")){\r\n    log.debug objects[0]\r\n\r\n    //extract insight key ang get object\r\n    def tech=objects[0].toString()\r\n    def techKey = tech.substring(tech.indexOf('(')+1,tech.indexOf(')'))\r\n    def techName = tech.substring(0,tech.indexOf('(')-1)\r\n    def techObject = objectFacade.loadObjectBean(techKey)\r\n    log.info \"techKey: \" + techKey\r\n    log.info (\"techName: \" + techName)\r\n    log.info (\"techObject: \" + techObject)\r\n\r\n    def objectTypeOnSiteTechReport = objectTypeFacade.loadObjectTypeBean(ONSITE_TECH_REPORT_OBJ_TYPE);\r\n    def newObjectBean = objectTypeOnSiteTechReport.createMutableObjectBean();\r\n\r\n    def objectAttributeBeans = new ArrayList();\r\n    def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_NAME); \r\n    log.debug nameObjectTypeAttributeBean\r\n    objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, nameObjectTypeAttributeBean, techName));\r\n\r\n\tdef actionObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TRACE_ACTION); \r\n\tobjectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, actionObjectTypeAttributeBean, \"INDIRECT_JOB\"));\r\n\r\n    newObjectBean.setObjectAttributeBeans(objectAttributeBeans);\r\n    /* Store the object into Insight. The new ObjectBean will be updated with an unique ID */\r\n    try {\r\n        newObjectBean = objectFacade.storeObjectBean(newObjectBean);\r\n        log.warn(\"newObjectBean: \" + newObjectBean);\r\n    } catch (Exception vie) {\r\n        log.warn(\"Could not create issue due to validation exception:\" + vie.getMessage());\r\n    }\r\n\r\n    /* Update TECHNICIAN_REF on the newObject */\t\t        \r\n    def objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF).createMutable() //The id of the attribute\r\n\r\n    /* Create the new attribute bean based on the value */\r\n    def newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, techKey);\r\n    /* Load the attribute bean */\r\n    def objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), techKey);\r\n    if (objectAttributeBean != null) {\r\n        /* If attribute exist reuse the old id for the new attribute */\r\n        newObjectAttributeBean.setId(objectAttributeBean.getId());\r\n    }\r\n    /* Store the object attribute into Insight. */\r\n    try {\r\n        objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);\r\n    } catch (Exception vie) {\r\n        log.warn(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\r\n    }  \r\n\r\n    /*Update JOB_STARTED - JOB_COMPLETED on the new object*/\r\n    def obj = objectFacade.loadObjectBean(newObjectBean.getId());\r\n    log.debug obj\r\n    \r\n    def JobStartedTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_JOB_STARTED); \r\n    def JobCompletedTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED); \r\n\tdef actionTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TRACE_ACTION); \r\n        \r\n    log.info \"attribType: \" + JobStartedTypeAttributeBean.toString()\r\n    def newAttribS = obj.createObjectAttributeBean(JobStartedTypeAttributeBean);\r\n    def newAttribValueS = newAttribS.createObjectAttributeValueBean();\r\n\r\n    try {\r\n        newAttribValueS.setDateValue(issue.getCustomFieldValue(jobStart));\r\n    } catch (Exception vie) {\r\n        log.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType.toString() + \" to \" + (new Timestamp((new Date()).time)).toString() + \". Exiting.\");\r\n        log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n        return false;\r\n    }\r\n\r\n    def attribValuesS = newAttribS.getObjectAttributeValueBeans();\r\n    attribValuesS.add(newAttribValueS);\r\n    newAttribS.setObjectAttributeValueBeans(attribValuesS);\r\n\r\n    try {\r\n        newAttribS = objectFacade.storeObjectAttributeBean(newAttribS);\r\n    } catch (Exception vie) {\r\n        log.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\r\n        log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n        return false;\r\n    }\r\n    \r\n    log.info \"attribType: \" + JobCompletedTypeAttributeBean.toString()\r\n    def newAttribC = obj.createObjectAttributeBean(JobCompletedTypeAttributeBean);\r\n    def newAttribValueC = newAttribC.createObjectAttributeValueBean();\r\n\r\n    try {\r\n        newAttribValueC.setDateValue(issue.getCustomFieldValue(jobCompleted));\r\n    } catch (Exception vie) {\r\n        log.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType.toString() + \" to \" + (new Timestamp((new Date()).time)).toString() + \". Exiting.\");\r\n        log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n        return false;\r\n    }\r\n\r\n    def attribValuesC = newAttribC.getObjectAttributeValueBeans();\r\n    attribValuesC.add(newAttribValueC);\r\n    newAttribC.setObjectAttributeValueBeans(attribValuesC);\r\n\r\n    try {\r\n        newAttribC = objectFacade.storeObjectAttributeBean(newAttribC);\r\n    } catch (Exception vie) {\r\n        log.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\r\n        log.warn(\"SETINSIGHTVALUE: \" + vie.getMessage().toString());\r\n        return false;\r\n    }\r\n\r\n    /* Update SUPPLIER_REF on the newObject */\t\r\n    /* Get SUPPLIER_REF from Tech */\r\n    def obTriage = objectFacade.loadObjectAttributeBean(techObject.getId(), (properties['iobj.techOnsite.supplierRef'] ? properties['iobj.techOnsite.supplierRef'].toString() : \"SUPPLIER_REF\")).createMutable()\r\n    def suppRef = obTriage.getObjectAttributeValueBeans().toString()\r\n    def supp = suppRef.toString()\r\n    log.info \"supp: \" + supp\r\n    def suppRefId = supp.substring(supp.indexOf('(')+1,supp.indexOf(')'))\r\n    log.info \"suppRefId: \" + suppRefId\r\n    def suppRefKey = properties['ischema.aa'].toString() + \"-\" + suppRefId\r\n    log.info \"suppRefKey: \" + suppRefKey\r\n    def suppRefObj = objectFacade.loadObjectBean(properties['ischema.aa'].toString() + \"-\" + suppRefId)\r\n    log.info \"suppRefObj: \" + suppRefObj\r\n    \r\n    def suppList = new ArrayList()\r\n    suppList.add(suppRefObj)\r\n\r\n    mi.setCustomFieldValue(internalSupplier, suppList);\r\n    ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n    \r\n    def suppObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_SUPPLIER_REF).createMutable() //The id of the attribute\r\n\r\n    /* Create the new attribute bean based on the value */\r\n    newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, suppObjectTypeAttributeBean, suppRefKey);\r\n    /* Load the attribute bean */\r\n    objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), suppRefKey);\r\n    if (objectAttributeBean != null) {\r\n        /* If attribute exist reuse the old id for the new attribute */\r\n        newObjectAttributeBean.setId(objectAttributeBean.getId());\r\n    }\r\n    /* Store the object attribute into Insight. */\r\n    try {\r\n        objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);\r\n    } catch (Exception vie) {\r\n        log.warn(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\r\n    }  \r\n\r\n    OnSiteTechObjects.add(newObjectBean)\r\n\r\n    log.info (\"OnSiteTechObjects: \" + OnSiteTechObjects)\r\n    \r\n    if (!OnSiteTechObjects.isEmpty()) {\r\n        mi.setCustomFieldValue(onSiteTechsField, OnSiteTechObjects);\r\n        ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n\r\n        /*mi.setCustomFieldValue(onSiteTechsTraceField, OnSiteTechObjects);\r\n        ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);*/\r\n        \r\n        mi.setCustomFieldValue(onSiteTechsWorkTraceField, OnSiteTechObjects);\r\n        ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n\r\n    }  \r\n}else{\r\n    /*Ticket creato da backoffice*/\r\n    /*Estrarre Company e Internal Supplier dal OP_INDIRECT_JOB_TKT_VISIBILITY*/\r\n    log.debug issue.getCustomFieldValue(tktVisibility)\r\n    def obTriage = objectFacade.loadObjectAttributeBean(issue.getCustomFieldValue(tktVisibility)[0].getId(), \"COMPANY_REF\").createMutable()\r\n    def companyRef = obTriage.getObjectAttributeValueBeans()[0].getValue()\r\n\r\n    obTriage = objectFacade.loadObjectAttributeBean(companyRef, \"SUPPLIER_REF\").createMutable()\r\n    def suppRefId = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\r\n    log.info \"suppRefId: \" + suppRefId\r\n    def suppRefKey = properties['ischema.dbo'].toString() + \"-\" + suppRefId\r\n\r\n    objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = Supplier AND SUPPLIER_REF =\\\"\" + suppRefKey + \"\\\"\")\r\n    log.warn \"iql: \" + \"objectType = Supplier AND SUPPLIER_REF =\\\"\" + suppRefKey + \"\\\"\"\r\n\r\n    if(objects){\r\n        log.debug objects[0]\r\n\r\n        def suppList = new ArrayList()\r\n        suppList.add(objects[0])\r\n\r\n        mi.setCustomFieldValue(internalSupplier, suppList);\r\n        ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n    } \r\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">50ecadd2-211d-42c2-a150-5098f76a0bd8</arg>
              <arg name="FIELD_NOTES">Update JOB_COMPLETED on INDIRECT TASK &amp;&amp; Update SO</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\r\nimport groovy.json.StreamingJsonBuilder;\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.issue.CustomFieldManager;\r\nimport com.atlassian.jira.issue.fields.CustomField;\r\nimport com.atlassian.jira.issue.IssueManager;\r\nimport com.atlassian.jira.component.ComponentAccessor;\r\nimport com.atlassian.jira.issue.Issue;\r\nimport com.atlassian.jira.issue.MutableIssue\r\nimport org.apache.commons.codec.binary.Base64;\r\nimport org.apache.log4j.Category\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\nimport java.text.SimpleDateFormat \r\nimport java.util.Date\r\nimport java.sql.Timestamp\r\nimport com.atlassian.jira.issue.index.IssueIndexingService\r\nimport com.atlassian.jira.event.type.EventDispatchOption\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\nlog.setLevel(org.apache.log4j.Level.DEBUG)\r\nimport com.atlassian.jira.issue.link.IssueLink\r\n\r\nIssueManager issueManager = ComponentAccessor.getIssueManager();\r\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\r\n\r\ndef sapSN =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_NOTIFICATION\")[0]\r\ndef requestMethod\r\ndef baseURL\r\n\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\"); \r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n  \r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\r\n  \r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\"); \r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n  \r\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\"); \r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\r\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \r\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\r\n\r\nIssueIndexingService issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-59514\")\r\n\r\ndef currentUser = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENT_USER\")[0]\r\ndef onSiteTechsTraceField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIAN_ACTIVITIES_TRACE\")[0];\r\ndef onSiteTechsTravelField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIAN_TRAVEL\")[0];\r\ndef tktFromMobile = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_FROM_MOBILE\")[0]\r\ndef tktJobStarted = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_INDIRECT_JOB_STARTED\")[0]\r\ndef tktJobCompleted = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_INDIRECT_JOB_COMPLETED\")[0]\r\ndef userLanguage = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENTUSER_LANGUAGE\")\r\ndef docLanguage = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_DOC_GENERATION_LANGUAGE\")\r\n\r\ndef OnSiteTechObjects = new ArrayList();\r\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\r\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\r\n\r\n/* ------------ DEFINE ACTION TO BE TRACED AND SET TO BE DONE ------------- */\r\ndef ACTION = properties['wf.tr.indirectTask.action'].toString()\r\ndef SET = properties['wf.tr.startIndirectTask.set'].toString()\r\n\r\ndef ONSITE_TECH_REPORT_OBJ_TYPE=properties['iobj.onSiteTechReport'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_NAME=properties['iobj.onSiteTechReport.name.id'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF=properties['iobj.onSiteTechReport.technicianRef.id'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED=properties['iobj.onSiteTechReport.jobCompleted.id'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_JOB_STARTED=properties['iobj.onSiteTechReport.jobStarted.id'].toString().toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_TRACE_ACTION=properties['iobj.onSiteTechReport.traceAction.id'].toString().toInteger()\r\n\r\ndef dateToday = new SimpleDateFormat(\"M/dd/yyyy\").format(new Date()) \r\ndef lastActivity, jobCompleted\r\n\r\ndef lang='en', docLang\r\ndocLang = issue.getCustomFieldValue(docLanguage)\r\nif(docLang==null &amp;&amp; issue.getCustomFieldValue(userLanguage).toString()!=\"null\"){\r\n    lang = issue.getCustomFieldValue(userLanguage)\r\n}else{\r\n    if(docLang!=null){\r\n        def rKey = docLang.toString().substring(docLang.toString().lastIndexOf('(')+1,docLang.toString().lastIndexOf(')'))\r\n        if(objectFacade.loadObjectAttributeBean(objectFacade.loadObjectBean(rKey).getId(), \"ISO_CODE\")){\r\n            def obTriage = objectFacade.loadObjectAttributeBean(objectFacade.loadObjectBean(rKey).getId(), \"ISO_CODE\").createMutable()\r\n            lang = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\r\n            log.debug \"lang: \" + lang\r\n        }\r\n    }\r\n} \r\n\r\nrequestMethod = \"POST\";\r\n\r\ndef body_req = []\r\n\r\n\r\n/** SERVICE ORDER CREATION **/\r\nbody_req = [\r\n    \"issueKey\": issue.key\r\n] \r\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order?language=\"+lang\r\nURL url = new URL(baseURL)\r\nlog.debug \"baseURL SO: \" + baseURL\r\nlog.debug \"body_req SO: \" + body_req\r\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\r\nconnection.setRequestMethod(requestMethod);\r\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\nconnection.setRequestProperty(\"Accept\", \"*/*\");\r\nconnection.setDoOutput(true);\r\nconnection.setDoInput(true);\r\nconnection.outputStream\r\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\r\nlog.debug connection.outputStream\r\nconnection.connect();\r\n\r\ndef output = new ArrayList()\r\ndef eList = new ArrayList()\r\ndef eListErrors = new ArrayList()\r\ndef errorMsgs = new ArrayList()\r\n\r\nif (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\r\n    log.debug \"url: \" + url\r\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\r\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\r\n\r\n    def outputMsg = ((HttpURLConnection)connection).errorStream.text\r\n    log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\r\n\r\n    def jsonSlurper = new JsonSlurper()\r\n    def json_object = jsonSlurper.parseText(outputMsg)\r\n    assert json_object instanceof Map  \r\n    log.debug \"message: \" +  json_object.message\r\n    log.debug \"errors: \" +  json_object.errors.toString()\r\n    \r\n    def result\r\n    if (json_object.message!=null)\r\n    {\r\n        result = json_object.message\r\n    }\r\n    if(json_object.errors != null){\r\n        result = result.toString() + json_object.errors.toString()\r\n    }\r\n\r\n\r\n    eListErrors.add(\"E\")\r\n    eListErrors.add(\"OP-SAP-SO-CREATE\")\r\n    errorMsgs.add(connection.getResponseCode() + \" \" + result)\r\n    eListErrors.add(errorMsgs)\r\n    eList.add(eListErrors)\r\n\r\n    output.add(eList)\r\n    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\r\n}else{\r\n    body_req = [\r\n        \"issueKey\": issue.key,\r\n    ] \r\n\r\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/order/confirmation?language=\"+lang\r\n    log.debug \"body_req SC: \" + body_req\r\n    log.debug \"baseURL SC: \" + baseURL\r\n    url = new URL(baseURL)\r\n    connection = (HttpURLConnection)url.openConnection();\r\n    connection.setRequestMethod(requestMethod);\r\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n    connection.setRequestProperty(\"Accept\", \"*/*\");\r\n    connection.setDoOutput(true);\r\n    connection.setDoInput(true);\r\n    connection.outputStream\r\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\r\n    log.debug connection.outputStream\r\n    connection.connect();\r\n\r\n    output = new ArrayList()\r\n    eList = new ArrayList()\r\n    eListErrors = new ArrayList()\r\n    errorMsgs = new ArrayList()\r\n\r\n    if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\r\n        log.debug \"url: \" + url\r\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\r\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\r\n\r\n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\r\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\r\n\r\n        def jsonSlurper = new JsonSlurper()\r\n        def json_object = jsonSlurper.parseText(outputMsg)\r\n        assert json_object instanceof Map  \r\n        log.debug \"message: \" +  json_object.message.toString().replaceAll(\"/[^a-zA-Z ]/g\",\"\").replaceAll('\"','')\r\n        log.debug \"errors: \" +  json_object.errors.toString()\r\n\r\n        eListErrors.add(\"E\")\r\n        eListErrors.add(\"OP-SAP-SC-CREATE\")\r\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\r\n        eListErrors.add(errorMsgs)\r\n        eList.add(eListErrors)\r\n\r\n        output.add(eList)\r\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\r\n    }\r\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="1">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="2" name="Closed">
      <meta name="jira.status.id">6</meta>
      <actions>
        <action id="21" name="riapri">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <results>
            <unconditional-result old-status="žée" status="žée" step="1">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="3" name="Assigned to Technician">
      <meta name="jira.status.id">14927</meta>
      <actions>
        <action id="41" name="Start Working" view="fieldscreen">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19908</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">bd6bec59-bbf2-4faa-9167-ef85631b1c07</arg>
              <arg name="FIELD_NOTES">Check activities in progress to allow start working on indirect task</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper\r\nimport com.atlassian.jira.issue.Issue\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport org.apache.log4j.Category\r\nimport groovy.json.JsonBuilder\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\nimport com.atlassian.jira.issue.IssueManager\r\nimport java.text.SimpleDateFormat\r\nimport java.util.Date\r\nimport static java.net.HttpURLConnection.HTTP_OK\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\n\r\nIssueManager issueManager = ComponentAccessor.getIssueManager();\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-200050\")\r\n\r\ndef errors = false\r\ndef warnings = false\r\n\r\ndef webServiceError = false\r\n\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\"); \r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n\r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\");\r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\r\n\r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n\r\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\");\r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\r\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\");\r\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\r\n\r\n\r\ndef currentUser = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENT_USER\")[0]\r\ndef onSiteTechsTraceField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIAN_ACTIVITIES_TRACE\")[0];\r\ndef onSiteTechsTravelField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIAN_TRAVEL\")[0];\r\ndef OnSiteTechObjects = new ArrayList();\r\nint OPAA = properties.getProperty(\"ischema.aa.id\").toInteger()\r\nint DBO = properties.getProperty(\"ischema.dbo.id\").toInteger()\r\n\r\n/* ------------ DEFINE ACTION TO BE TRACED AND SET TO BE DONE ------------- */\r\ndef ACTION = properties.getProperty(\"wf.tr.indirectTask.action\")\r\ndef SET = properties.getProperty(\"wf.tr.startIndirectTask.set\")\r\n\r\ndef ONSITE_TECH_REPORT_OBJ_TYPE = properties.getProperty(\"iobj.onSiteTechReport\").toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_NAME = properties.getProperty(\"iobj.onSiteTechReport.name.id\").toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF = properties.getProperty(\"iobj.onSiteTechReport.technicianRef.id\").toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED = properties.getProperty(\"iobj.onSiteTechReport.jobCompleted.id\").toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_JOB_STARTED = properties.getProperty(\"iobj.onSiteTechReport.jobStarted.id\").toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_TRACE_ACTION = properties.getProperty(\"iobj.onSiteTechReport.traceAction.id\").toInteger()\r\n\r\ndef dateToday = new SimpleDateFormat(\"M/dd/yyyy\").format(new Date())\r\n\r\ndef techniciansIql = \"objectType = Technician AND TECHNICIAN_REF.TECH_ACCOUNT = \\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\"\"\r\nlog.info(\"find Technicians with IQL: \" + techniciansIql)\r\ndef technicians = iqlFacade.findObjectsByIQLAndSchema(OPAA, techniciansIql)\r\n\r\nif (technicians) {\r\n    def technician = technicians.get(0)\r\n    def tech = technician.toString()\r\n    def techKey = tech.substring(tech.lastIndexOf('(') + 1,tech.lastIndexOf(')'))\r\n    def techName = tech.substring(0, tech.lastIndexOf('(') - 1)\r\n    def techObject = objectFacade.loadObjectBean(techKey)\r\n    log.info(\"techKey: \" + techKey)\r\n    log.info(\"techName: \" + techName)\r\n    log.info(\"techObject: \" + techObject)\r\n\r\n    def url = new URL(\"http://\" + properties.getProperty(\"api.env\") + \"/op/rest/jira/findOnSiteTechReportStartedTodayByTechAccount?techAccount=\" + issue.getCustomFieldValue(currentUser))\r\n    log.info(\"calling URL: \" + url.toString())\r\n    def odsObjectsRequest = (HttpURLConnection) url.openConnection()\r\n    def responseStatusCode = odsObjectsRequest.getResponseCode()\r\n    def responseString = odsObjectsRequest.getInputStream().getText()\r\n    log.info(\"responseStatusCode: \" + responseStatusCode)\r\n    log.info(\"responseString: \" + responseString)\r\n\r\n    if (responseStatusCode == HTTP_OK) {\r\n        def jsonSlurper = new JsonSlurper()\r\n        def onSiteTechReports = jsonSlurper.parseText(responseString)\r\n\r\n        if (!onSiteTechReports) {\r\n            /*Prima attivit\u00e0 della giornata --&gt; JOB_STARTED = time stamp reale*/\r\n        } else {\r\n            /*Recupero JOB_COMPLETED dell'ultima attivit\u00e0 fatta*/\r\n            def lastActivity = onSiteTechReports[0]\r\n            log.info(\"last activity id: \" + lastActivity.id)\r\n            /*Se l'ultima attivit\u00e0 non \u00e8 ancora terminata, non posso iniziare un nuovo indirect task*/\r\n            if (lastActivity.jobCompleted == null) {\r\n                if (lastActivity.traceActionStatus != null &amp;&amp; !lastActivity.traceActionStatus.equals(\"BREAK\")) {\r\n                    log.info(\"attivit\u00e0 con id=\" + lastActivity.id + \" non ancora terminata\")\r\n                    errors = true\r\n                } else {\r\n                    log.info(lastActivity.traceActionStatus + \" in corso\")\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        log.error(\"FSM backend endpoint returned response code != 200 OK\")\r\n        errors = true\r\n        webServiceError = true\r\n    }\r\n}\r\n\r\ndef output = new ArrayList()\r\n\r\nif (errors) {\r\n    def eList = new ArrayList()\r\n\r\n    if (webServiceError) {\r\n        def eWebServiceError = new ArrayList()\r\n        eWebServiceError.add(\"E\")\r\n        eWebServiceError.add(\"WEB_SERVICE_ERROR\")\r\n        eWebServiceError.add(null)\r\n\r\n        eList.add(eWebServiceError)\r\n    } else {\r\n        def eListMandatory = new ArrayList()\r\n        eListMandatory.add(\"E\")\r\n        eListMandatory.add(\"ACTIVITY_IN_PROGRESS\")\r\n        eListMandatory.add(null)\r\n\r\n        eList.add(eListMandatory)\r\n    }    \r\n\r\n    output.add(eList)\r\n    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\r\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">bd6bec59-bbf2-4faa-9167-ef85631b1c07</arg>
              <arg name="FIELD_NOTES">OP : backend validator call</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonBuilder\r\nimport com.opensymphony.workflow.InvalidInputException\r\nimport com.atlassian.jira.issue.fields.CustomField\r\nimport com.atlassian.jira.issue.CustomFieldManager\r\nimport com.atlassian.jira.workflow.JiraWorkflow\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenLayoutItem\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenTab\r\nimport com.atlassian.jira.issue.fields.FieldManager\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreen\r\nimport com.atlassian.jira.issue.fields.screen.FieldScreenManager\r\nimport com.opensymphony.workflow.loader.ActionDescriptor\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.workflow.WorkflowManager\r\nimport groovy.json.StreamingJsonBuilder\r\nimport com.onresolve.scriptrunner.runner.ScriptRunner\r\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\r\n\r\ndef baseURL\r\ndef responseBody\r\n\r\ntry {\r\n    Properties properties = new Properties()\r\n    File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\r\n    propertiesFile.withInputStream {\r\n        properties.load(it)\r\n    }\r\n\r\n    def serverBase = String.format(\"http://%s/op\", properties['api.env'])\r\n    def transactionAction = \"validators\"\r\n\r\n    URL url\r\n    def requestMethod = \"POST\"\r\n\r\n    baseURL = String.format(\"%s/rest/jira/workflows/%s/%s\", serverBase, transientVars.actionId, transactionAction)\r\n\r\n    log.debug(\"Composing baseURL as '${baseURL}'\")\r\n\r\n    WorkflowManager workflowManager = ComponentAccessor.getWorkflowManager()\r\n    JiraWorkflow jiraWorkflow = workflowManager.getWorkflow(transientVars.issue)\r\n\r\n    CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager()\r\n\r\n    log.debug(jiraWorkflow.getName())\r\n\r\n    ActionDescriptor ad = workflowManager.getActionDescriptor(transientVars.issue, transientVars.actionId)\r\n\r\n    log.debug(\"ActionDescriptor Name: ${ad.getName()}\") // Genera Rapporto di Intervento FAAC\r\n    log.debug(\"ActionDescriptor MetaAttrs: ${ad.getMetaAttributes()}\") // {opsbar-sequence=10, jira.description=, jira.fieldscreen.id=19910}\r\n\r\n    def adMeta = ad.getMetaAttributes()\r\n    String fieldScreenId = adMeta.get(\"jira.fieldscreen.id\");\r\n    log.debug(\"Field screen id: ${fieldScreenId}\")\r\n\r\n    Map&lt;String, Object&gt; customFieldMap = new HashMap&lt;&gt;()\r\n    if (fieldScreenId) {\r\n        FieldScreenManager fieldScreenManager = ComponentAccessor.getComponent(FieldScreenManager.class);\r\n        FieldScreen fieldScreen = fieldScreenManager.getFieldScreen(Long.valueOf(fieldScreenId.toString()));\r\n        List&lt;FieldScreenTab&gt; fsts = fieldScreen.getTabs();\r\n        for (FieldScreenTab fst: fsts) {\r\n            List&lt;FieldScreenLayoutItem&gt; qwe = fst.getFieldScreenLayoutItems();\r\n            for (FieldScreenLayoutItem fsli: qwe) {\r\n                if (fsli.getFieldId() == null) {\r\n                    continue;\r\n                }\r\n                CustomField customField = customFieldManager.getCustomFieldObject(fsli.getFieldId());\r\n                if (customField == null) {\r\n                    continue;\r\n                }\r\n                def customFieldValue = issue.getCustomFieldValue(customField);\r\n                customFieldMap.put(fsli.getFieldId(), customFieldValue == null ? null : customFieldValue.toString())\r\n            }\r\n        }\r\n    }\r\n    log.debug(\"customFieldMap: ${customFieldMap}\")\r\n\r\n    Map bodyReq = [\r\n        \"issueTypeId\": issue.issueTypeId,\r\n        \"issueKey\": issue.key,\r\n        \"actionName\": ad.getName(),\r\n        \"jiraWorkflowName\": jiraWorkflow.getName(),\r\n        \"customFieldMap\": customFieldMap,\r\n        \"properties\": properties\r\n    ]\r\n    JsonBuilder jsonBuilder = new JsonBuilder(bodyReq)\r\n    String jsonBodyReq = jsonBuilder.toString()\r\n\r\n    log.debug(\"Calling [${requestMethod}] ${baseURL} with body ${jsonBodyReq}\")\r\n\r\n    url = new URL(baseURL)\r\n    HttpURLConnection connection = (HttpURLConnection) url.openConnection()\r\n    connection.setRequestMethod(requestMethod)\r\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\")\r\n    connection.setRequestProperty(\"Accept\", \"*/*\")\r\n    connection.setDoOutput(true)\r\n    connection.setDoInput(true)\r\n    connection.outputStream.withWriter(\"UTF-8\") {\r\n        new StreamingJsonBuilder(it, bodyReq)\r\n    }\r\n\r\n    connection.connect()\r\n    def responseCode = connection.getResponseCode().toString()\r\n\r\n    log.debug(\"Response HttpStatusCode: ${responseCode}\")\r\n\r\n    // If backend replies with 200 then the condition is passed\r\n    if (\"200\".equals(responseCode)) {\r\n        log.debug(\"Validator passed!\")\r\n    } else {\r\n\r\n        responseBody = ((HttpURLConnection) connection).errorStream.text\r\n        log.debug(\"Validator not passed, responseBody: ${responseBody}\")\r\n\r\n        // testing without redeploying each time\r\n        //responseBody = '{\"W\": \"[[[W, CONFIRM_RISK_ANALYSIS, null]]]\"}'\r\n\r\n        throw new InvalidInputException(responseBody)\r\n    }\r\n} catch (Exception e) {\r\n    //This is an exception in the script\r\n    log.debug(\"Exception raised calling endpoint ${baseURL}\")\r\n    log.error(e)\r\n    if (e instanceof InvalidInputException) {\r\n        throw e\r\n    }\r\n    throw new InvalidInputException('{\"E\": \"[[[ Validator failed ]]]\" }')\r\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="4">
              <post-functions>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">dd470d58-6b3b-4190-b94b-441a560839dc</arg>
                  <arg name="FIELD_NOTES">Set JOB_STARTED for INDIRECT_TASK</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper\r\nimport java.lang.IllegalStateException\r\nimport com.atlassian.jira.component.ComponentAccessor\r\nimport com.atlassian.jira.issue.Issue\r\nimport com.atlassian.jira.issue.MutableIssue;\r\nimport com.atlassian.jira.event.type.EventDispatchOption;\r\nimport org.apache.log4j.Level\r\nimport java.sql.Timestamp\r\nimport com.atlassian.jira.issue.IssueManager\r\nimport java.text.SimpleDateFormat\r\nimport java.util.Date\r\nimport static java.net.HttpURLConnection.HTTP_OK\r\n\r\nProperties properties = new Properties()\r\nFile propertiesFile = new File('/var/atlassian/application-data/shared/scripts/opproject.properties')\r\npropertiesFile.withInputStream {\r\n\tproperties.load(it)\r\n}\r\n\r\n/* Get Insight Object Facade from plugin accessor */\r\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");\r\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\r\n\r\n/* Get Insight Object Type Facade from plugin accessor */\r\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\");\r\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\r\n\r\n/* Get Insight Object Attribute Facade from plugin accessor */\r\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\r\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\r\n\r\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\");\r\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\r\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\");\r\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\r\n\r\nIssueManager issueManager = ComponentAccessor.getIssueManager();\r\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-168043\")\r\n\r\ndef currentUser = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENT_USER\")[0]\r\ndef onSiteTechsTraceField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIAN_ACTIVITIES_TRACE\")[0];\r\ndef onSiteTechsWorkTraceField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIAN_ACTIVITIES_TRACE_WORK\")[0];\r\ndef onSiteTechsTravelField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TECHNICIAN_TRAVEL\")[0];\r\n\r\ndef tktJobStarted = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_INDIRECT_JOB_STARTED\")[0]\r\ndef tktJobCompleted = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_INDIRECT_JOB_COMPLETED\")[0]\r\n\r\ndef OnSiteTechObjects = new ArrayList();\r\nint OPAA = properties.getProperty(\"ischema.aa.id\").toInteger()\r\nint DBO = properties.getProperty(\"ischema.dbo.id\").toInteger()\r\n\r\n/*25.11.22*/\r\ndef localTimeStamp\r\ndef localDate\r\n/*03.10.23*/\r\ndef DATETIME_OFFSET = properties.getProperty(\"wf.tr.datetimewithoffset\")\r\nlog.debug \"DATETIME_OFFSET: \" + DATETIME_OFFSET\r\nif (DATETIME_OFFSET != null &amp;&amp; DATETIME_OFFSET != 'null') {\r\n    def siteCF = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SITE\")[0];\r\n    def site, siteKey, siteObject, visibility, visibilityKey\r\n    if (issue.getCustomFieldValue(siteCF) != null) {\r\n        site = issue.getCustomFieldValue(siteCF).toString()\r\n        siteKey = site.substring(site.lastIndexOf('(') + 1, site.lastIndexOf(')'))\r\n        siteObject = objectFacade.loadObjectBean(siteKey)\r\n        visibility = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_VISIBILITY_KEY\")[0]\r\n        visibilityKey = issue.getCustomFieldValue(visibility)[0].toString().substring(issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf('(') + 1, issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf(')'))\r\n    } else {\r\n        visibility = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_INDIRECT_JOB_TKT_VISIBILITY\")[0]\r\n        visibilityKey = issue.getCustomFieldValue(visibility)[0].toString().substring(issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf('(') + 1, issue.getCustomFieldValue(visibility)[0].toString().lastIndexOf(')'))\r\n    }\r\n    def timeZone\r\n    def companyRef = objectFacade.loadObjectAttributeBean(objectFacade.loadObjectBean(visibilityKey).getId(), properties.getProperty(\"iobj.visibilityKey.companyRef\")).getObjectAttributeValueBeans();\r\n    log.info \"companyRef: \" + companyRef\r\n    def companyRefId = companyRef[0].getReferencedObjectBeanId()\r\n    log.debug \"companyRefId:\" + companyRefId\r\n    if (issue.getCustomFieldValue(siteCF) != null &amp;&amp; objectFacade.loadObjectAttributeBean(siteObject.getId(), \"SITE_REF\")) {\r\n        obTriage = objectFacade.loadObjectAttributeBean(siteObject.getId(), \"SITE_REF\").createMutable()\r\n        s = obTriage.getObjectAttributeValueBeans()\r\n        s = s.toString()\r\n        sKey = s.substring(s.lastIndexOf('(') + 1, s.lastIndexOf(')'))\r\n        if (objectFacade.loadObjectAttributeBean(sKey.toInteger(), \"TIME_ZONE\")) {\r\n            obTriage = objectFacade.loadObjectAttributeBean(sKey.toInteger(), \"TIME_ZONE\").createMutable()\r\n            timeZone = obTriage.getObjectAttributeValueBeans()\r\n            timeZone = timeZone[0].getValue()\r\n            log.debug \"TimeZone da Site: \" + timeZone\r\n        } else {\r\n            if (objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\")) {\r\n                obTriage = objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\").createMutable()\r\n                timeZone = obTriage.getObjectAttributeValueBeans()\r\n                timeZone = timeZone[0].getValue()\r\n                log.debug \"TimeZone da Company: \" + timeZone\r\n            }\r\n        }\r\n    } else {\r\n        if (objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\")) {\r\n            obTriage = objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), \"TIME_ZONE\").createMutable()\r\n            timeZone = obTriage.getObjectAttributeValueBeans()\r\n            timeZone = timeZone[0].getValue()\r\n            log.debug \"TimeZone da Company: \" + timeZone\r\n        }\r\n    }\r\n    if (!timeZone) {\r\n        timeZone = \"Europe/Rome\"\r\n    }\r\n    log.debug \"timeZone: \" + timeZone\r\n    localTimeStamp = (new Timestamp((new Date(new Date().getTime() - TimeZone.getDefault().getRawOffset() + TimeZone.getTimeZone(timeZone.toString()).getRawOffset())).time))\r\n    localDate = new Date(new Date().getTime() - TimeZone.getDefault().getRawOffset() + TimeZone.getTimeZone(timeZone.toString()).getRawOffset())\r\n\r\n} else {\r\n\r\n    localTimeStamp =  (new Timestamp((new Date()).time)).toString()\r\n    localDate =  new Date()\r\n\r\n}\r\n\r\nlog.debug localTimeStamp\r\nlog.debug localDate\r\n/*25.11.22*/\r\n\r\n/* ------------ DEFINE ACTION TO BE TRACED AND SET TO BE DONE ------------- */\r\ndef ACTION = properties.getProperty(\"wf.tr.indirectTask.action\")\r\ndef SET = properties.getProperty(\"wf.tr.startIndirectTask.set\")\r\n\r\ndef ONSITE_TECH_REPORT_OBJ_TYPE = properties.getProperty(\"iobj.onSiteTechReport\").toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_NAME = properties.getProperty(\"iobj.onSiteTechReport.name.id\").toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF = properties.getProperty(\"iobj.onSiteTechReport.technicianRef.id\").toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_JOB_COMPLETED = properties.getProperty(\"iobj.onSiteTechReport.jobCompleted.id\").toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_JOB_STARTED = properties.getProperty(\"iobj.onSiteTechReport.jobStarted.id\").toInteger()\r\ndef ONSITE_TECH_REPORT_ATTR_TRACE_ACTION = properties.getProperty(\"iobj.onSiteTechReport.traceAction.id\").toInteger()\r\n\r\ndef dateToday = new SimpleDateFormat(\"M/dd/yyyy\").format(localDate) \r\ndef lastActivity, jobStarted \r\n\r\ndef techniciansIql = \"objectType = Technician AND TECHNICIAN_REF.TECH_ACCOUNT =\\\"\" + issue.getCustomFieldValue(currentUser).toString() + \"\\\"\"\r\nlog.info(\"find Technicians with IQL: \" + techniciansIql)\r\ndef technicians = iqlFacade.findObjectsByIQLAndSchema(OPAA, techniciansIql)\r\n\r\nfor (technician in technicians) {\r\n    def tech = technician.toString()\r\n    def techKey = tech.substring(tech.lastIndexOf('(') + 1,tech.lastIndexOf(')'))\r\n    def techName = tech.substring(0, tech.lastIndexOf('(') - 1)\r\n    def techObject = objectFacade.loadObjectBean(techKey)\r\n    log.info(\"techKey: \" + techKey)\r\n    log.info(\"techName: \" + techName)\r\n    log.info(\"techObject: \" + techObject)\r\n\r\n    def url = new URL(\"http://\" + properties.getProperty(\"api.env\") + \"/op/rest/jira/findOnSiteTechReportStartedTodayByTechAccount?techAccount=\" + issue.getCustomFieldValue(currentUser))\r\n    log.info(\"calling URL: \" + url.toString())\r\n    def odsObjectsRequest = (HttpURLConnection) url.openConnection()\r\n    def responseStatusCode = odsObjectsRequest.getResponseCode()\r\n    def responseString = odsObjectsRequest.getInputStream().getText()\r\n    log.info(\"responseStatusCode: \" + responseStatusCode)\r\n    log.info(\"responseString: \" + responseString)\r\n\r\n    if (responseStatusCode != HTTP_OK) {\r\n        throw new IllegalStateException(\"FSM backend endpoint returned response code != 200 OK\")\r\n    }\r\n\r\n    def jsonSlurper = new JsonSlurper()\r\n    def onSiteTechReports = jsonSlurper.parseText(responseString)\r\n\r\n    if (!onSiteTechReports) {\r\n        /*Prima attivit\u00e0 della giornata --&gt; JOB_STARTED = time stamp reale*/\r\n        //jobStarted = (new Timestamp((new Date()).time))\r\n        jobStarted = localTimeStamp\r\n        log.info(\"jobStarted 1: \" + jobStarted)\r\n    } else {\r\n        /*Recupero JOB_COMPLETED dell'ultima attivit\u00e0 fatta*/\r\n        lastActivity = onSiteTechReports[0]\r\n        log.info(\"last activity id: \" + lastActivity.id)\r\n        /*Se l'ultima attivit\u00e0 non \u00e8 una pausa e non \u00e8 ancora terminata, non posso iniziare un nuovo indirect task*/\r\n        BigDecimal lastActivityJobCompleted = lastActivity.jobCompleted\r\n        if (lastActivityJobCompleted != null) {\r\n            //log.debug Locale.getDefault()\r\n            Calendar calendar = new GregorianCalendar();\r\n            Date jobCompletedDate = new Date(lastActivityJobCompleted.longValue());\r\n            calendar.setTime(jobCompletedDate);\r\n            calendar.add(Calendar.MINUTE, 1);\r\n            String result = calendar.getTime();\r\n\r\n            jobStarted = result\r\n            log.info(\"jobStarted 2: \" + jobStarted)\r\n        } else {\r\n            if (lastActivity.traceActionStatus != null &amp;&amp; lastActivity.traceActionStatus.equals(\"BREAK\")) {\r\n                /*L'ultima attivit\u00e0 iniziata \u00e8 una pausa, loggo una attivit\u00e0 indiretta per coprire il tempo da inizio pausa a ora*/\r\n                BigDecimal lastActivityJobStarted = lastActivity.jobStarted\r\n                Calendar calendar = new GregorianCalendar();\r\n                Date jobStartedDate = new Date(lastActivityJobStarted.longValue())\r\n                calendar.setTime(jobStartedDate);\r\n                calendar.add(Calendar.MINUTE, 1);\r\n                String result = calendar.getTime();\r\n\r\n                jobStarted = result\r\n                log.debug(\"jobStarted 3: \" + jobStarted)\r\n            } else {\r\n                log.info(\"attivit\u00e0 con id=\" + lastActivity.id + \" non ancora terminata\")\r\n            }\r\n        }\r\n    }\r\n\r\n    if (jobStarted) {\r\n        /*CREATE NEW OBJECT: ONSITE_TECH_REPORT_OBJ_TYPE*/\r\n        def objectTypeOnSiteTechReport = objectTypeFacade.loadObjectTypeBean(ONSITE_TECH_REPORT_OBJ_TYPE);\r\n        def newObjectBean = objectTypeOnSiteTechReport.createMutableObjectBean();\r\n\r\n        def objectAttributeBeans = new ArrayList();\r\n        def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_NAME); \r\n        def startedObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_JOB_STARTED); \r\n        def actionObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TRACE_ACTION); \r\n\r\n        log.info(\"setto job started: \" + jobStarted.toString())\r\n        objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, nameObjectTypeAttributeBean, techName));\r\n        objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, startedObjectTypeAttributeBean, jobStarted.toString()));\r\n        objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, actionObjectTypeAttributeBean, ACTION));\r\n\r\n        newObjectBean.setObjectAttributeBeans(objectAttributeBeans);\r\n        /* Store the object into Insight. The new ObjectBean will be updated with an unique ID */\r\n        try {\r\n            newObjectBean = objectFacade.storeObjectBean(newObjectBean);\r\n            log.info(\"newObjectBean: \" + newObjectBean);\r\n        } catch (Exception vie) {\r\n            log.error(\"Could not create issue due to validation exception: \" + vie.getMessage());\r\n        }\r\n\r\n        /* Update TECHNICIAN_REF on the newObject */\t\t        \r\n        def objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF).createMutable() //The id of the attribute\r\n\r\n        /* Create the new attribute bean based on the value */\r\n        def newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, techKey);\r\n        /* Load the attribute bean */\r\n        def objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), techKey);\r\n        if (objectAttributeBean != null) {\r\n            /* If attribute exist reuse the old id for the new attribute */\r\n            newObjectAttributeBean.setId(objectAttributeBean.getId());\r\n        }\r\n        /* Store the object attribute into Insight. */\r\n        try {\r\n            objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);\r\n        } catch (Exception vie) {\r\n            log.error(\"Could not update object attribute due to validation exception: \" + vie.getMessage());\r\n        }  \r\n\r\n\r\n        OnSiteTechObjects.add(newObjectBean)\r\n\r\n        for (t in issue.getCustomFieldValue(onSiteTechsTraceField)) {\r\n            OnSiteTechObjects.add(t)\r\n        }\r\n\r\n        log.info(\"OnSiteTechObjects: \" + OnSiteTechObjects)\r\n        def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\r\n\r\n        if (!OnSiteTechObjects.isEmpty()) {\r\n            MutableIssue mi = (MutableIssue) issue;\r\n            /*mi.setCustomFieldValue(onSiteTechsTraceField, OnSiteTechObjects);\r\n            ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);*/\r\n\r\n            mi.setCustomFieldValue(onSiteTechsWorkTraceField, OnSiteTechObjects);\r\n            ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n\r\n            SimpleDateFormat sdf = new SimpleDateFormat(\"EEE MMM dd HH:mm:ss zzz yyyy\", Locale.US);\r\n            Date dateToBeSet = sdf.parse(jobStarted.toString())\r\n\r\n            log.info(\"jobStarted sul ticket: \" + new Timestamp(dateToBeSet.getTime()))\r\n            mi.setCustomFieldValue(tktJobStarted,  new Timestamp(dateToBeSet.getTime()));\r\n            ComponentAccessor.getIssueManager().updateIssue(user, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\r\n        }\r\n    }\r\n}","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="v+nWù">¶»ž</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="field.copyFieldSource2" />
                  <arg name="field.copyFieldSource1">customfield_23236</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="field.createTargetValue1" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyFieldMode1">OVERWRITE</arg>
                  <arg name="ºè">e300c52f-15ba-4b63-ad28-3dab156ecfdd</arg>
                  <arg name="field.copyFieldDestination1">customfield_22653</arg>
                  <arg name="field.copyFieldSeparator1" />
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescopyValueFromOtherField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.CopyValueFromOtherFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="4" name="In Progress">
      <meta name="jira.status.id">3</meta>
      <actions>
<common-action id="11" />
      </actions>
    </step>
    <step id="5" name="EèÞr×">
      <meta name="jira.status.id">11436</meta>
    </step>
  </steps>
</workflow>