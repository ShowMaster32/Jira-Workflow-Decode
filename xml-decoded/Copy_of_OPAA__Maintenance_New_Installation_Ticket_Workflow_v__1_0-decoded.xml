<?xml version='1.0' encoding='UTF-8'?>
<workflow>
  <meta name="jira.description">(This copy was automatically generated from a draft, when workflow 'OPAA: Maintenance/New Installation Ticket Workflow v. 1.0' was made inactive.)</meta>
  <meta name="jira.update.author.key">arianna.fabbri</meta>
  <meta name="jira.updated.date">1621611825254</meta>
  <initial-actions>
    <action id="1" name="Create">
      <validators>
        <validator name="" type="class">
          <arg name="permission">Create Issue</arg>
          <arg name="class.name">com.atlassian.jira.workflow.validator.PermissionValidator</arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="žée" status="¢—§" step="1">
          <post-functions>
            <function type="class">
              <arg name="FIELD_SECURITY_LEVEL_ID">11600</arg>
              <arg name="FIELD_NOTES">Set "Operation Portal - FAAC Service" Issue Security Level</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
              <arg name="FIELD_CONDITION" />
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd" />
              <arg name="append.value" />
              <arg name="field.value">%%CURRENT_DATETIME%%</arg>
              <arg name="field.name">customfield_22715</arg>
              <arg name="scopeType">H</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd" />
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql" />
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql" />
            </function>
            <function type="class">
              <arg name="conditionList">3</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
              <arg name="comparisonType">1</arg>
              <arg name="диюбwbХ*'">¶»ž</arg>
              <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
              <arg name="preconditionNegateResult-booleanValue" />
              <arg name="fieldValue">Maintenance Ticket</arg>
              <arg name="preconditionMode-textValue">DISCARD</arg>
              <arg name="fieldsList">issuetype</arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd" />
              <arg name="append.value" />
              <arg name="field.value">Yes</arg>
              <arg name="field.name">customfield_22620</arg>
              <arg name="scopeType">H</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd" />
              <arg name="preconditionAwareFunctionMode-textValue">FALSE</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql" />
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql" />
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd" />
              <arg name="append.value" />
              <arg name="field.value">New Installation Ticket</arg>
              <arg name="field.name">customfield_22716</arg>
              <arg name="scopeType">H</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd" />
              <arg name="preconditionAwareFunctionMode-textValue">FALSE</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql" />
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql" />
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd" />
              <arg name="append.value" />
              <arg name="field.value">Maintenance Ticket</arg>
              <arg name="field.name">customfield_22716</arg>
              <arg name="scopeType">H</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd" />
              <arg name="preconditionAwareFunctionMode-textValue">M</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql" />
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql" />
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueCreateFunction</arg>
            </function>
            <function type="class">
              <arg name="FIELD_NOTES">Link New Installation Tickets</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
              <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.IssueManager
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import groovy.json.JsonSlurper
import groovy.json.StreamingJsonBuilder
import com.atlassian.jira.config.util.JiraHome
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import java.text.SimpleDateFormat
import java.text.ParseException
import com.atlassian.jira.security.JiraAuthenticationContext
import com.atlassian.jira.bc.issue.IssueService.IssueResult
import com.atlassian.jira.jql.parser.JqlQueryParser
import com.atlassian.jira.bc.issue.search.SearchService
import com.atlassian.jira.user.util.UserUtil
import com.atlassian.jira.web.bean.PagerFilter
import com.atlassian.jira.issue.link.LinkCollectionImpl;
import com.atlassian.jira.issue.link.IssueLink;
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder

import groovy.util.logging.Slf4j
import java.util.concurrent.ConcurrentHashMap
import javax.annotation.PostConstruct
import org.springframework.cache.annotation.Cacheable
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

/*Script Variables*/
//Per Post Function
issue = issue
//Per test da console
//IssueManager issueManager = ComponentAccessor.getIssueManager()
//issue = issueManager.getIssueByKeyIgnoreCase("OPUT-241")

/*Insight classes &amp; components*/
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);
/* Get Insight IQL Facade from plugin accessor */
Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade"); 
iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);
Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory");
objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);
/* Get Insight Object Type Facade from plugin accessor */
Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade"); 
objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);

/*Customfields*/
def supplierInstallation =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplierNewInstallation'].toString())[0]
def wbsPrj =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.wbsPrj'] ? properties['cf.wbsPrj'].toString() : "OP_WBS_PRJ")[0]
def site =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.site'].toString())[0]
log.debug issue.getCustomFieldValue(supplierInstallation)

JiraAuthenticationContext authContext = ComponentAccessor.getJiraAuthenticationContext()
def jqlQueryParser = ComponentAccessor.getComponent(JqlQueryParser)
def searchService = ComponentAccessor.getComponent(SearchService)
UserUtil userUtil = ComponentAccessor.getUserUtil()
def user = ComponentAccessor.jiraAuthenticationContext.loggedInUser

def supplier = issue.getCustomFieldValue(supplierInstallation).first().toString()
log.debug "supplier: " + supplier
supplier = supplier.substring(1,supplier.indexOf('(')-1)

def jqlSearch = "project = '" + issue.getProjectObject().name + "' AND issuetype = '" + issue.getIssueType().name + "' AND key != '" + issue.key.toString() + "' AND '" + properties['cf.supplierNewInstallation'].toString() + "' in iqlFunction('" + properties['iobj.suppinst.supplierRef'].toString() + " LIKE \"" + supplier.replaceAll("'","\'") + "\"')" + " AND '" + properties['cf.site'].toString() + "' = '" + issue.getCustomFieldValue(site).first().toString().replaceAll("'","\'") + "' AND status IN ('" + properties['wf.open'].toString() + "') AND " + (properties['cf.wbsPrj'] ? properties['cf.wbsPrj'].toString() : "OP_WBS_PRJ") + " = '" + issue.getCustomFieldValue(wbsPrj) + "'"
log.debug "ricerca: " + jqlSearch
def query = jqlQueryParser.parseQuery(jqlSearch)
log.debug "query: " + query
def search = searchService.search(user, query, PagerFilter.getUnlimitedFilter())
def found=false
def foundOutward=false
def linkedIssue
if (search.results) {	
    for (i in search.results.first()){
        /*Per ogni issue restituita dalla query JQL verifico se ha già dei link Relates To*/
        log.debug i.key

        def issueService = ComponentAccessor.getIssueService()

        List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(i.getId());
        log.debug "allInIssueLink: " + allInIssueLink
        for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
            IssueLink issueLink = (IssueLink) outIterator.next();
            def linkedIssueTemp = issueLink.getSourceObject()
            String type = linkedIssueTemp.getIssueType().getName();

            log.debug "issuelink Type: " + issueLink.issueLinkType.getName()
			log.debug "sourceIssue: " + issueLink.getSourceObject()
            log.debug "destinationIssue: " + issueLink.getDestinationObject()
            
            if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString()) &amp;&amp; issueLink.getSourceObject().key!=issue.key){
                log.debug "trovato inWardLink - prendo la source issue " + linkedIssueTemp + " e la lego alla issue corrente"
                found=true
                ComponentAccessor.getIssueLinkManager().createIssueLink(linkedIssueTemp.getId(), issue.getId(), Long.parseLong(properties['il.linkedTktsRelatesId'].toString()), 1, user);
            }
        }
        
        List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(i.getId());
        log.debug "allOutIssueLink: " + allOutIssueLink
        for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
            IssueLink issueLink = (IssueLink) outIterator.next();
            def linkedIssueTemp = issueLink.getDestinationObject()
            String type = linkedIssueTemp.getIssueType().getName();

            log.debug "issuelink Type: " + issueLink.issueLinkType.getName()
			log.debug "sourceIssue: " + issueLink.getSourceObject()
            log.debug "destinationIssue: " + issueLink.getDestinationObject()
            
            if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString()) &amp;&amp; issueLink.getDestinationObject().key!=issue.key){
                found=true
                log.debug "trovato outWardLink - prendo la destination issue " + linkedIssueTemp + " e la lego alla issue corrente"
                ComponentAccessor.getIssueLinkManager().createIssueLink(issue.getId(), linkedIssueTemp.getId(), Long.parseLong(properties['il.linkedTktsRelatesId'].toString()), 1, user);
            }else if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString()) &amp;&amp; issueLink.getDestinationObject().key==issue.key){
                log.debug "issue già linkata"
                break
            }
        }

        log.debug "Creo link tra la issue oggetto di transition e la issue risultante dal filtro"
        ComponentAccessor.getIssueLinkManager().createIssueLink(i.getId(), issue.getId(), Long.parseLong(properties['il.linkedTktsRelatesId'].toString()), 1, user);
              
    }
    
} else {
    log.error("Invalid JQL: " + jqlSearch);
} </arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="FIELD_NOTES">OP: Doc Template generation - se New Installation OR First Ticket = true</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
              <arg name="FIELD_INLINE_SCRIPT">import com.opensymphony.workflow.WorkflowException;
import com.opensymphony.workflow.InvalidInputException
import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import org.apache.log4j.Category
import groovyx.net.http.HTTPBuilder
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();

def requestMethod
def baseURL

def firstTicket =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.firstTkt'].toString())[0]

log.debug issue.getIssueType().name
log.debug issue.getCustomFieldValue(firstTicket)


/* REST API per Invio Notifica Email ONSITE_REPORT */
requestMethod = "GET";

if(issue.getIssueType().name.toString().equals(properties['it.newInstallation']) || issue.getCustomFieldValue(firstTicket)!=null){
    def first_ticket=false
    def template=""
    if(issue.getCustomFieldValue(firstTicket)!=null){
        first_ticket=true
        template="FIRST_TICKET%7CMANUFACTURER"
    }else{
        template="NEW_INSTALLATION_CREATE_TKT%7CMANUFACTURER"
    }
    baseURL = "http://" + properties['api.env'].toString() + "/op/rest/automation/document/generation/check?ISSUE_KEY="+ issue.key +"&amp;DOC_CATEGORY=" + template + "&amp;ENABLED_FOR_FIRST_TICKET="+first_ticket+"&amp;IMPORT_FROM=OP_ASSET"
    log.debug baseURL
    URL url = new URL(baseURL)
    HttpURLConnection connection = (HttpURLConnection)url.openConnection();
    connection.setRequestMethod(requestMethod);
    connection.setRequestProperty("Content-Type", "application/json");
    connection.setRequestProperty("Accept", "*/*");
    connection.setDoOutput(true);
    connection.setDoInput(true);
    connection.connect();

    def output = new ArrayList()
    def eList = new ArrayList()
    def eListErrors = new ArrayList()
    def errorMsgs = new ArrayList()

    if (!connection.getResponseCode().toString().equals("200")){
        log.debug "url: " + url
        log.debug "ResponseCode:" + connection.getResponseCode()
        log.debug "ResponseMessage:" + connection.getResponseMessage()
        log.debug "ErrorStream: " + connection.getErrorStream().toString()
        log.debug "getHeaderFields(): " + connection.getHeaderFields()
        def outputMsg = ((HttpURLConnection)connection).errorStream.text
        log.debug "((HttpURLConnection)connection).errorStream.text: " + outputMsg

        def jsonSlurper = new JsonSlurper()
        def json_object = jsonSlurper.parseText(outputMsg)
        assert json_object instanceof Map  
        log.debug "message: " +  json_object.message

        eListErrors.add("E")
        eListErrors.add("OP-DOCS")
        errorMsgs.add(connection.getResponseCode() + " " + json_object.message)
        eListErrors.add(errorMsgs)
        eList.add(eListErrors)

        output.add(eList)
        throw new InvalidInputException("E", output.toString())
    }
}
</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </function>
            <function type="class">
              <arg name="eventTypeId">1</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </initial-actions>
  <global-actions>
    <action id="341" name="Cancella Ticket">
      <meta name="opsbar-sequence">100</meta>
      <meta name="jira.description" />
      <meta name="jira.fieldscreen.id" />
      <restrict-to>
        <conditions>
          <condition type="class">
            <arg name="FIELD_FUNCTION_ID">ÓMõ×®½uæÛnÚïV·í®7s®ßÆúÝ½Ü{¶ö</arg>
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
            <arg name="FIELD_CONDITION">!issue.getStatus().getName().toString().equals("Closed")|||</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
            <arg name="FIELD_PREVIEW_ISSUE">AAS-2694</arg>
          </condition>
        </conditions>
      </restrict-to>
      <results>
        <unconditional-result old-status="žée" status="žée" step="15">
          <post-functions>
            <function type="class">
              <arg name="field.name">resolution</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
              <arg name="field.value">10103</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="351" name="Sospendi Ticket">
      <meta name="opsbar-sequence">110</meta>
      <meta name="jira.description" />
      <meta name="jira.fieldscreen.id" />
      <restrict-to>
        <conditions>
          <condition type="class">
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
            <arg name="FIELD_CONDITION">!issue.getStatus().getName().toString().equals("Closed")|||</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
            <arg name="FIELD_PREVIEW_ISSUE" />
          </condition>
        </conditions>
      </restrict-to>
      <results>
        <unconditional-result old-status="žée" status="žée" step="16">
          <post-functions>
            <function type="class">
              <arg name="field.name">resolution</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
              <arg name="field.value">10401</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="361" name="Annulla Ticket">
      <meta name="opsbar-sequence">120</meta>
      <meta name="jira.description" />
      <meta name="jira.fieldscreen.id" />
      <restrict-to>
        <conditions>
          <condition type="class">
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
            <arg name="FIELD_CONDITION">!issue.getStatus().getName().toString().equals("Closed")|||</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
            <arg name="FIELD_PREVIEW_ISSUE" />
          </condition>
        </conditions>
      </restrict-to>
      <results>
        <unconditional-result old-status="žée" status="žée" step="17">
          <post-functions>
            <function type="class">
              <arg name="field.name">resolution</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
              <arg name="field.value">10104</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </global-actions>
  <common-actions>
    <action id="51" name="Assegna a Fornitore" view="fieldscreen">
      <meta name="opsbar-sequence">50</meta>
      <meta name="jira.description" />
      <meta name="jira.fieldscreen.id">19904</meta>
      <validators>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">Ñç\mý×½5w×÷kÖÛ¿[y¯7ÕîµÝÝ÷ßÆ»</arg>
          <arg name="FIELD_NOTES">OP Email Notification: ASSIGN_TO_SUPPLIER</arg>
          <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService
import com.atlassian.jira.issue.link.IssueLink
import org.apache.log4j.Category
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

def requestMethod = "POST";
def relatesInIssueLink=false
def relatesOutIssueLink=false
def linkedTickets=new ArrayList()

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyAssigned'] ? properties['cf.automaticallyAssigned'].toString() : "OP_AUTOMATICALLY_ASSIGNED")[0]

/*OP-1038: verifica ticket collegati*/
List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesInIssueLink=true
        linkedTickets.add(issueLink.getSourceObject().toString())
        log.debug "Issue con relatesInIssueLink"
    }
}
List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesOutIssueLink=true
        linkedTickets.add(issueLink.getDestinationObject().toString())
        log.debug "Issue con relatesOutIssueLink"
    }
}

def body_req
if(relatesInIssueLink || relatesOutIssueLink){
    body_req = [
        "templateName": properties['tt.assignToSupplier'].toString(),
        "pec": false,
        "issueKey": issue.key,
        "linkedTickets": linkedTickets
    ]
}else{
    body_req = [
        "templateName": properties['tt.assignToSupplier'].toString(),
        "pec": false,
        "issueKey": issue.key
    ]
}

if(issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals("No")){
    def baseURL = "http://" + properties['api.env'].toString() + "/op/rest/jira/AA/transaction/mail/send"
    URL url
    url = new URL(baseURL)

    HttpURLConnection connection = (HttpURLConnection)url.openConnection();
    connection.setRequestMethod(requestMethod);
    connection.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
    connection.setRequestProperty("Accept", "*/*");
    connection.setDoOutput(true);
    connection.setDoInput(true);
    connection.outputStream
    connection.outputStream.withWriter("UTF-8") { new StreamingJsonBuilder(it, body_req) }
    log.debug connection.outputStream
    connection.connect();

    def output = new ArrayList()
    def eList = new ArrayList()
    def eListErrors = new ArrayList()
    def errorMsgs = new ArrayList()

    if (!connection.getResponseCode().toString().equals("200")){
        log.debug "url: " + url
        log.debug "ResponseCode:" + connection.getResponseCode()
        log.debug "ResponseMessage:" + connection.getResponseMessage()
        
        def outputMsg = ((HttpURLConnection)connection).errorStream.text
    	log.debug "((HttpURLConnection)connection).errorStream.text: " + outputMsg
        
        def jsonSlurper = new JsonSlurper()
    	def json_object = jsonSlurper.parseText(outputMsg)
        assert json_object instanceof Map  
        log.debug "message: " +  json_object.message

        eListErrors.add("E")
        eListErrors.add("SENDMAIL")
        errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
        //eListErrors.add(errorMsgs)
        eListErrors.add(json_object.message)
        eList.add(eListErrors)

        output.add(eList)
        throw new InvalidInputException("E", output.toString())
    }
}
</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
          <arg name="FIELD_SCRIPT_FILE" />
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="žée" status="žée" step="2">
          <post-functions>
            <function type="class">
              <arg name="conditionList">3</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
              <arg name="comparisonType">1</arg>
              <arg name="диюбwbХ*'">¶»ž</arg>
              <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
              <arg name="preconditionNegateResult-booleanValue" />
              <arg name="fieldValue">Yes</arg>
              <arg name="preconditionMode-textValue">DISCARD</arg>
              <arg name="fieldsList">customfield_22681</arg>
            </function>
            <function type="class">
              <arg name="field.copyFieldSource2" />
              <arg name="field.copyFieldSource1">customfield_22683</arg>
              <arg name="scopeSource-linkEnd" />
              <arg name="field.createTargetValue1" />
              <arg name="field.copyFieldMode1">OVERWRITE</arg>
              <arg name="field.copyFieldDestination1">customfield_22635</arg>
              <arg name="field.copyFieldSeparator1" />
              <arg name="scopeType">H</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiescopyValueFromOtherField-function</arg>
              <arg name="scopeDestination-linkEnd" />
              <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
              <arg name="preconditionAwareFunctionMode-textValue">M</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql" />
              <arg name="class.name">com.googlecode.jsu.workflow.function.CopyValueFromOtherFieldPostFunction</arg>
              <arg name="scopeSource-jql" />
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd" />
              <arg name="append.value" />
              <arg name="field.value">%%CURRENT_DATETIME%%</arg>
              <arg name="field.name">customfield_22639</arg>
              <arg name="scopeType">H</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd" />
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql" />
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql" />
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">×ýÙÇÕ×8msÑ§xóÖ»ß[á§xkÎ|</arg>
              <arg name="FIELD_NOTES">OP: New Installation - Check linkedTickets &amp; Fast-Transact them</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService
import org.apache.log4j.Category
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.link.IssueLink
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.WARN)

log.warn "${issue.key} Transazione ASSIGN TO SUPPLIER - Post Function check linkedIssues"

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyAssigned'] ? properties['cf.automaticallyAssigned'].toString() : "OP_AUTOMATICALLY_ASSIGNED")[0]
IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)

Issue issue = issue
//Per test da console
//issue = issueManager.getIssueByKeyIgnoreCase("OPUT-276")

/*DEV*/
ASSIGN_TO_SUPPLIER = properties['wf.tr.assignToSupplier'] ? properties['wf.tr.assignToSupplier'] : 51

/*PROD*/
//CONFIRM_TO_CUSTOMER

def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
def issueService = ComponentAccessor.getIssueService()

/*Se eseguo la confirm to customer su un ticket con 1 o + ticket collegati, verifico e sposto in automatico gli eventuali ticket collegati*/
log.warn "verifico e sposto in automatico gli eventuali ticket collegati"

if(issue.getIssueType().getName() == properties['it.newInstallation'].toString() &amp;&amp; issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals("No")){
    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            log.warn "Issue con relatesInIssueLink"
            /*Eseguire transazione di stato della sourceIssue*/
            def linkedIssue = issueLink.getSourceObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            def transitionId
            if(linkedIssueStatus.name == properties['wf.open'].toString()){
                transitionId=ASSIGN_TO_SUPPLIER
            }
            if(transitionId==ASSIGN_TO_SUPPLIER){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(true)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                //log.warn "issueInputParameters: " + issueInputParameters
                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"

                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 79 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }
        }
    }

    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            log.warn "Issue con relatesOutIssueLink"
            /*Eseguire transazione di stato della destinationIssue*/
            def linkedIssue = issueLink.getDestinationObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            def transitionId
            log.warn "linkedIssue: " + linkedIssue
            log.warn "linkedIssueStatus.name: " + linkedIssueStatus.name
            if(linkedIssueStatus.name == properties['wf.open'].toString()){
                transitionId=ASSIGN_TO_SUPPLIER
            }

            if(transitionId==ASSIGN_TO_SUPPLIER){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(true)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 

                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"

                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 122 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }

        }
    }
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="371" name="Recupera Tkt">
      <meta name="opsbar-sequence">10</meta>
      <meta name="jira.description" />
      <meta name="jira.fieldscreen.id" />
      <results>
        <unconditional-result old-status="žée" status="žée" step="1">
          <post-functions>
            <function type="class">
              <arg name="field.name">resolution</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
              <arg name="field.value" />
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </common-actions>
  <steps>
    <step id="1" name=":—§">
      <meta name="jira.status.id">1</meta>
      <actions>
<common-action id="51" />
        <action id="11" name="Richiedi Preventivo">
          <meta name="opsbar-sequence">40</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <results>
            <unconditional-result old-status="žée" status="žée" step="8">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="field.copyFieldSource2" />
                  <arg name="field.copyFieldSource1">customfield_22603</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="field.createTargetValue1" />
                  <arg name="field.copyFieldMode1">OVERWRITE</arg>
                  <arg name="field.copyFieldDestination1">customfield_22656</arg>
                  <arg name="field.copyFieldSeparator1" />
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescopyValueFromOtherField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.CopyValueFromOtherFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="field.type">8</arg>
                  <arg name="full.module.key">com.riadalabs.jira.plugins.insightinsight-post-function</arg>
                  <arg name="field.groovyScript">   import com.atlassian.jira.component.ComponentAccessor;
import java.util.ArrayList;
import com.atlassian.jira.config.util.JiraHome
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.MutableIssue;
import com.atlassian.jira.event.type.EventDispatchOption;

Properties relativePath = new Properties()
File relativePathFile = new File('/var/atlassian/application-data/jira/insightPathToScript.properties')
relativePathFile.withInputStream {
	relativePath.load(it)
}
Properties properties = new Properties()
File propertiesFile = new File('/var/atlassian/application-data/jira' + relativePath['pathToScripts'] + 'opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}

/* Get Insight Object Facade from plugin accessor */
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade"); 
def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);
 
/* Get Insight Object Type Facade from plugin accessor */
Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade"); 
def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);
 
/* Get Insight Object Attribute Facade from plugin accessor */
Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade"); 
def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);

/* Get Insight IQL Facade from plugin accessor */
Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade"); 
def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);

Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory"); 
def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);

def OPAA = properties['ischema.aa.id'].toString().toInteger()
def quoteLabourRatesField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteLabourRates'].toString())[0];
def OnSiteRateObjects = new ArrayList();

def ONSITE_RATE_REPORT_OBJ_TYPE = properties['iobj.onSiteRateReport'].toString().toInteger()
def ONSITE_RATE_REPORT_ATTR_NAME = properties['iobj.onSiteRateReport.name.id'] ? properties['iobj.onSiteRateReport.name.id'].toString().toInteger() : 2766
def ONSITE_RATE_REPORT_ATTR_RATE_REF = properties['iobj.onSiteRateReport.rateRef.id'] ? properties['iobj.onSiteRateReport.rateRef.id'].toString().toInteger() : 3186
def ONSITE_RATE_REPORT_ATTR_APPLIED_TO = properties['iobj.onSiteRateReport.appliedTo.id'] ? properties['iobj.onSiteRateReport.appliedTo.id'].toString().toInteger() : 3194
def ONSITE_RATE_REPORT_ATTR_SAP = properties['iobj.onSiteRateReport.sap.id'] ? properties['iobj.onSiteRateReport.sap.id'].toString().toInteger() : 3196
def ONSITE_RATE_REPORT_ATTR_QUOTE_FROM_TKT = properties['iobj.onSiteRateReport.quoteFromTkt.id'] ? properties['iobj.onSiteRateReport.quoteFromTkt.id'].toString().toInteger() : 3203
def ONSITE_RATE_REPORT_ATTR_QUANTITY_CUSTOMER = properties['iobj.onSiteRateReport.qtyCustomer.id'] ? properties['iobj.onSiteRateReport.qtyCustomer.id'].toString().toInteger() : 3189

Issue issue = issue

def objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, "objectType=\"Rates\" AND \"QUOTE_ENABLED\" = true"); // See the complete list of possible IQL on the Insight Query Language documentation page
for (obj in objects){
	log.info obj.toString()
    obj = obj.toString()
    def rateName = obj.substring(0,obj.indexOf('(')-1)
    def rateKey = obj.substring(obj.indexOf('(')+1,obj.indexOf(')'))
    
    /*Set Name*/
    def objectTypeOnSiteRateReport = objectTypeFacade.loadObjectTypeBean(ONSITE_RATE_REPORT_OBJ_TYPE);
    def newObjectBean = objectTypeOnSiteRateReport.createMutableObjectBean();
    
    def objectAttributeBeans = new ArrayList();
    log.info ONSITE_RATE_REPORT_ATTR_NAME.toString()
    def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_RATE_REPORT_ATTR_NAME); 
    
    objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, nameObjectTypeAttributeBean, rateName));
    
    newObjectBean.setObjectAttributeBeans(objectAttributeBeans);
        
    /*Set APPLIED_TO*/
    def appliedToObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_RATE_REPORT_ATTR_APPLIED_TO); 
    
    objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, appliedToObjectTypeAttributeBean, "BOTH"));
    
    newObjectBean.setObjectAttributeBeans(objectAttributeBeans);
    
    /*Set SAP*/
    def sapObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_RATE_REPORT_ATTR_SAP); 
    
    objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, sapObjectTypeAttributeBean, "false"));
    
    newObjectBean.setObjectAttributeBeans(objectAttributeBeans);
    
    /*Set QUOTE_FROM_TKT*/
    def quoteObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_RATE_REPORT_ATTR_QUOTE_FROM_TKT); 
    
    objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, quoteObjectTypeAttributeBean, "true"));
    
    newObjectBean.setObjectAttributeBeans(objectAttributeBeans);
    
    /*Set QUANTITY_CUSTOMER*/
    def qtyCustomerObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_RATE_REPORT_ATTR_QUANTITY_CUSTOMER); 
    
    objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, qtyCustomerObjectTypeAttributeBean, "1"));
    
    newObjectBean.setObjectAttributeBeans(objectAttributeBeans);
    
    
    /* Store the object into Insight. The new ObjectBean will be updated with an unique ID */
    try {
        newObjectBean = objectFacade.storeObjectBean(newObjectBean);
        log.warn("newObjectBean: " + newObjectBean);
    } catch (Exception vie) {
        log.warn("Could not create issue due to validation exception:" + vie.getMessage());
    }
    
    /* Update RATE_REF on the newObject */		        
    def objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_RATE_REPORT_ATTR_RATE_REF).createMutable() //The id of the attribute
    
    /* Create the new attribute bean based on the value */
    def newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, rateKey);
    /* Load the attribute bean */
    def objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), rateKey);
    if (objectAttributeBean != null) {
        /* If attribute exist reuse the old id for the new attribute */
        newObjectAttributeBean.setId(objectAttributeBean.getId());
    }
    /* Store the object attribute into Insight. */
    try {
        objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);
    } catch (Exception vie) {
        log.warn("Could not update object attribute due to validation exception:" + vie.getMessage());
    }  
    
    OnSiteRateObjects.add(newObjectBean)
}
log.info ("OnSiteRateObjects: " + OnSiteRateObjects)
def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()

if (!OnSiteRateObjects.isEmpty()) {
    MutableIssue mi = (MutableIssue) issue;
    mi.setCustomFieldValue(quoteLabourRatesField, OnSiteRateObjects);
    ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
}      </arg>
                  <arg name="field.filepath" />
                  <arg name="class.name">com.riadalabs.jira.plugins.insight.services.jira.postfunction.InsightPostFunction</arg>
                  <arg name="field.description">OP: Automatically create Labour Rates for offer Tkt</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="21" name="Tkt Risolto Telefonicamente">
          <meta name="opsbar-sequence">30</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_NOTES">OP: Enabled only for Maintenance Ticket</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">issue.issueType.name == 'Maintenance Ticket'|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="7">
              <post-functions>
                <function type="class">
                  <arg name="field.name">resolution</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
                  <arg name="field.value">1</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="31" name="Converti in Nuova Installazione">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_NOTES">Change to New Installation if issue type = Maintenance</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">issue.issueType.name == 'Maintenance Ticket'|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="1">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">OP: Change issue type from Maintenance to New Installation</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import org.apache.log4j.Category
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.issuetype.IssueType
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}

/* Define a Logger */
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

def constantsManager = ComponentAccessor.getConstantsManager()

Issue issue = issue  // This what I was looking for :-). As simple as it is, but I didn't know that.

IssueType targetIssueType = null
def issueType

log.debug "IssueType old = " + issue.issueType.name

def collection = constantsManager.getAllIssueTypeObjects()
def iterator = collection.iterator()
while(iterator.hasNext()){
	issueType = iterator.next()
	if(issueType.name == properties['it.newInstallation'].toString()){
		targetIssueType = issueType
	}
}

log.debug targetIssueType.name
issue.setIssueTypeObject(targetIssueType)
log.debug "IssueType new = " + issue.issueType.name</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="диюбwbХ*'">¶»ž</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue" />
                  <arg name="fieldValue">New Installation</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="field.value">New Installation Ticket</arg>
                  <arg name="field.name">summary</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="field.value">New Installation Ticket</arg>
                  <arg name="field.name">customfield_22716</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="41" name="Converti in Manutenzione Riparativa">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_NOTES">Change to Maintenance if issue type = New Installation</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">issue.issueType.name == 'New Installation'|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="1">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">mç¶õ®}ß^ç–ºnüiý´åþø×¿}}Î·m·Ÿ</arg>
                  <arg name="FIELD_NOTES">OP: Change issue type from New Installation to Maintenance</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import org.apache.log4j.Category
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.issuetype.IssueType
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}

/* Define a Logger */
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

def constantsManager = ComponentAccessor.getConstantsManager()

Issue issue = issue  // This what I was looking for :-). As simple as it is, but I didn't know that.

IssueType targetIssueType = null
def issueType

log.debug "IssueType old = " + issue.issueType.name
log.debug properties['it.maintenance'].toString()
def collection = constantsManager.getAllIssueTypeObjects()
def iterator = collection.iterator()
while(iterator.hasNext()){
	issueType = iterator.next()
	if(issueType.name == (properties['it.maintenance'] ? properties['it.maintenance'].toString() : "Maintenance Ticket")){
		targetIssueType = issueType
	}
}

log.debug targetIssueType.name
issue.setIssueTypeObject(targetIssueType)
log.debug "IssueType new = " + issue.issueType.name</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="диюбwbХ*'">¶»ž</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue" />
                  <arg name="fieldValue">Maintenance Ticket</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="field.value">Maintenance Ticket</arg>
                  <arg name="field.name">customfield_22716</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="field.value">Maintenance Ticket</arg>
                  <arg name="field.name">summary</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="61" name="Chiusura Massiva FAAC Service">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <results>
            <unconditional-result old-status="žée" status="žée" step="7">
              <post-functions>
                <function type="class">
                  <arg name="field.name">resolution</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
                  <arg name="field.value">6</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="2" name="Assigned To Supplier">
      <meta name="jira.status.id">14327</meta>
      <actions>
        <action id="71" name="Accetta Intervento" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19905</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">õæ½ë­]å¾ýçŽ¶é·uvúož6uþ¶¶Ÿsw]</arg>
              <arg name="FIELD_NOTES">OP: Check errors &amp; warnings</arg>
              <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
 
Issue issue = issue

def errors = false
def warnings = false

def supplierLabel = properties['cf.supplier'] ? properties['cf.supplier'].toString() : "OP_SUPPLIER"
def supplier =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(supplierLabel)[0]

def errorMandatoryFields = new ArrayList()
def warningEmptyFields = new ArrayList()
 
//OP_SUPPLIER_REPAIR vs OP_SUPPLIER_NEWINST
log.debug "supplierLabel: " + supplierLabel
if(issue.getCustomFieldValue(supplier)==null || (String)issue.getCustomFieldValue(supplier) == "" || issue.getCustomFieldValue(supplier).toString().equals("")){
	errors = true
	errorMandatoryFields.add(supplierLabel)
    log.debug "errorMandatoryFields: " + errorMandatoryFields
}


def output = new ArrayList()

if (!errors &amp;&amp; !warnings){
    return true
}else{
    if(!errors &amp;&amp; warnings){
        def wList = new ArrayList()
        
        if(warningEmptyFields.size() &gt; 0){
            def wListConfirmEmpty = new ArrayList()
            wListConfirmEmpty.add("W")
            wListConfirmEmpty.add("CONFIRM_EMPTY_FIELDS")
            wListConfirmEmpty.add(null)
            wListConfirmEmpty.add(warningEmptyFields)

            wList.add(wListConfirmEmpty)
        }
        
        output.add(wList)
        throw new InvalidInputException("W", output.toString())   
    }
    if(errors &amp;&amp; !warnings){
        def eList = new ArrayList()
        
        if(errorMandatoryFields.size() &gt; 0){
            def eListMandatory = new ArrayList()
            eListMandatory.add("E")
            eListMandatory.add("MANDATORY_FIELDS")
            eListMandatory.add(null)
            eListMandatory.add(errorMandatoryFields)
            eList.add(eListMandatory)
        }
        output.add(eList)
        throw new InvalidInputException("E", output.toString())   
    }
    if(errors &amp;&amp; warnings){
        def eList = new ArrayList()
        def wList = new ArrayList()
        
        if(errorMandatoryFields.size() &gt; 0){
            def eListMandatory = new ArrayList()
            eListMandatory.add("E")
            eListMandatory.add("MANDATORY_FIELDS")
            eListMandatory.add(null)
            eListMandatory.add(errorMandatoryFields)
            eList.add(eListMandatory)
        }
        
        if(warningEmptyFields.size() &gt; 0){
            def wListConfirmEmpty = new ArrayList()
            wListConfirmEmpty.add("W")
            wListConfirmEmpty.add("CONFIRM_EMPTY_FIELDS")
            wListConfirmEmpty.add(null)
            wListConfirmEmpty.add(warningEmptyFields)

            wList.add(wListConfirmEmpty)
        }
        
        output.add(eList)
        output.add(wList)
        throw new InvalidInputException("WE", output.toString())  
    }
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="3">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">OP: New Installation - Check linkedTickets &amp; Fast-Transact them</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService
import org.apache.log4j.Category
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.link.IssueLink
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.WARN)

log.warn "${issue.key} Transazione ACCEPTED BY SUPPLIER - Post Function check linkedIssues"

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyAccepted'] ? properties['cf.automaticallyAccepted'].toString() : "OP_AUTOMATICALLY_ACCEPTED")[0]
IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)

Issue issue = issue
//Per test da console
//issue = issueManager.getIssueByKeyIgnoreCase("OPUT-276")

/*DEV*/
ACCEPT = properties['wf.tr.accept'] ? properties['wf.tr.accept'] : 71

/*PROD*/
//CONFIRM_TO_CUSTOMER

def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
def issueService = ComponentAccessor.getIssueService()

/*Se eseguo la confirm to customer su un ticket con 1 o + ticket collegati, verifico e sposto in automatico gli eventuali ticket collegati*/
log.warn "verifico e sposto in automatico gli eventuali ticket collegati"

if(issue.getIssueType().getName() == properties['it.newInstallation'].toString() &amp;&amp; issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals("No")){
    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            log.warn "Issue con relatesInIssueLink"
            /*Eseguire transazione di stato della sourceIssue*/
            def linkedIssue = issueLink.getSourceObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            def transitionId
            if(linkedIssueStatus.name == (properties['wf.assignedToSupplier'] ? properties['wf.assignedToSupplier'].toString() : "Assigned To Supplier")){
                transitionId=ACCEPT
            }
            if(transitionId==ACCEPT){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(true)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                //log.warn "issueInputParameters: " + issueInputParameters
                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"

                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 79 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }
        }
    }

    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            log.warn "Issue con relatesOutIssueLink"
            /*Eseguire transazione di stato della destinationIssue*/
            def linkedIssue = issueLink.getDestinationObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            def transitionId
            log.warn "linkedIssue: " + linkedIssue
            log.warn "linkedIssueStatus.name: " + linkedIssueStatus.name
            if(linkedIssueStatus.name == (properties['wf.assignedToSupplier'] ? properties['wf.assignedToSupplier'].toString() : "Assigned To Supplier")){
                transitionId=ACCEPT
            }

            if(transitionId==ACCEPT){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(true)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 

                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"

                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 122 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }

        }
    }
}</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">s¿Õ§·Ûu®^u×|½»é÷åÖûï½qî7</arg>
                  <arg name="FIELD_NOTES">OP: Linked Tickets: check and link related issues</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.IssueManager
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import groovy.json.JsonSlurper
import groovy.json.StreamingJsonBuilder
import com.atlassian.jira.config.util.JiraHome
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import java.text.SimpleDateFormat
import java.text.ParseException
import com.atlassian.jira.security.JiraAuthenticationContext
import com.atlassian.jira.bc.issue.IssueService.IssueResult
import com.atlassian.jira.jql.parser.JqlQueryParser
import com.atlassian.jira.bc.issue.search.SearchService
import com.atlassian.jira.user.util.UserUtil
import com.atlassian.jira.web.bean.PagerFilter
import com.atlassian.jira.issue.link.LinkCollectionImpl;
import com.atlassian.jira.issue.link.IssueLink;
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder

import groovy.util.logging.Slf4j
import java.util.concurrent.ConcurrentHashMap
import javax.annotation.PostConstruct
import org.springframework.cache.annotation.Cacheable
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

/*Script Variables*/
//Per Post Function
issue = issue
//Per test da console
//IssueManager issueManager = ComponentAccessor.getIssueManager()
//issue = issueManager.getIssueByKeyIgnoreCase("OPUT-241")

/*Insight classes &amp; components*/
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);
/* Get Insight IQL Facade from plugin accessor */
Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade"); 
iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);
Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory");
objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);
/* Get Insight Object Type Facade from plugin accessor */
Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade"); 
objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);

/*Customfields*/
def supplierInstallation =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplierRepair'].toString())[0]
def supplierNewInstallation =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplierNewInstallation'].toString())[0]
def plannedDate =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.plannedDate'].toString())[0]
def site =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.site'].toString())[0]
def wbsPrj =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.wbsPrj'] ? properties['cf.wbsPrj'].toString() : "OP_WBS_PRJ")[0]
log.debug issue.getCustomFieldValue(supplierInstallation)

JiraAuthenticationContext authContext = ComponentAccessor.getJiraAuthenticationContext()
def jqlQueryParser = ComponentAccessor.getComponent(JqlQueryParser)
def searchService = ComponentAccessor.getComponent(SearchService)
UserUtil userUtil = ComponentAccessor.getUserUtil()
def user = ComponentAccessor.jiraAuthenticationContext.loggedInUser

def supplier = (issue.getCustomFieldValue(supplierInstallation) ? issue.getCustomFieldValue(supplierInstallation).first().toString() : issue.getCustomFieldValue(supplierNewInstallation).first().toString())
log.debug "supplier: " + supplier
supplier = supplier.substring(1,supplier.indexOf('(')-1)

List&lt;IssueLink&gt; allInCurrentIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId());
List&lt;IssueLink&gt; allOutCurrentIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId());
def alreadyLinked=false

def jqlSearch = "project = '" + issue.getProjectObject().name + "' AND issuetype = '" + issue.getIssueType().name + "' AND key != '" + issue.key.toString() + "' AND '" + (issue.getCustomFieldValue(supplierInstallation) ? properties['cf.supplierRepair'].toString() : properties['cf.supplierNewInstallation'].toString()) + "' in iqlFunction('" + properties['iobj.suppinst.supplierRef'].toString() + " LIKE \"" + supplier.replaceAll("'","\'") + "\"')" + " AND '" + properties['cf.site'].toString() + "' = '" + issue.getCustomFieldValue(site).first().toString().replaceAll("'","\'") + "' AND status IN ('" + properties['wf.acceptedBySupplier'].toString() + "') AND " + (issue.getCustomFieldValue(supplierInstallation) ? (properties['cf.plannedDate'].toString() + " &gt;= '" + issue.getCustomFieldValue(plannedDate).format("yyyy-MM-dd HH:mm") + "' AND " + properties['cf.plannedDate'].toString() + " &lt;= '" + issue.getCustomFieldValue(plannedDate).format("yyyy-MM-dd").toString() + " 23:59" + "'") : (properties['cf.wbsPrj'] ? properties['cf.wbsPrj'].toString() : "OP_WBS_PRJ") + " = '" + issue.getCustomFieldValue(wbsPrj) + "'")
log.debug "ricerca: " + jqlSearch
def query = jqlQueryParser.parseQuery(jqlSearch)
log.debug "query: " + query
def search = searchService.search(user, query, PagerFilter.getUnlimitedFilter())
def found=false
def foundOutward=false
def linkedIssue
if (search.results) {	
    for (i in search.results){
        /*Per ogni issue restituita dalla query JQL verifico se ha già dei link Relates To*/
        log.debug i.key

        def issueService = ComponentAccessor.getIssueService()

        List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(i.getId());
        log.debug "allInIssueLink: " + allInIssueLink
        for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
            IssueLink issueLink = (IssueLink) outIterator.next();
            def linkedIssueTemp = issueLink.getSourceObject()
            String type = linkedIssueTemp.getIssueType().getName();

            log.debug "issuelink Type: " + issueLink.issueLinkType.getName()
			log.debug "sourceIssue: " + issueLink.getSourceObject()
            log.debug "destinationIssue: " + issueLink.getDestinationObject()
            
            if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString()) &amp;&amp; issueLink.getSourceObject().key!=issue.key){
                log.debug "trovato inWardLink - prendo la source issue " + linkedIssueTemp + " e la lego alla issue corrente solo se non è già linkata"
                alreadyLinked=false
                for(li in allInCurrentIssueLink){
                    if(linkedIssueTemp.getId() == li.getSourceObject().getId() || linkedIssueTemp.getId() == li.getDestinationObject().getId()){
                        alreadyLinked=true
                    }
                }
                for(li in allOutCurrentIssueLink){
                    if(linkedIssueTemp.getId() == li.getSourceObject().getId() || linkedIssueTemp.getId() == li.getDestinationObject().getId()){
                        alreadyLinked=true
                    }
                }
                found=true
                if(!alreadyLinked){
                    log.debug "non è linkata, la linko"
                 	ComponentAccessor.getIssueLinkManager().createIssueLink(linkedIssueTemp.getId(), issue.getId(), Long.parseLong(properties['il.linkedTktsRelatesId'].toString()), 1, user);   
                }else{
                    log.debug "già linkata, non la linko di nuovo"
                }
            }
        }
        
        List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(i.getId());
        log.debug "allOutIssueLink: " + allOutIssueLink
        for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
            IssueLink issueLink = (IssueLink) outIterator.next();
            def linkedIssueTemp = issueLink.getDestinationObject()
            String type = linkedIssueTemp.getIssueType().getName();

            log.debug "issuelink Type: " + issueLink.issueLinkType.getName()
			log.debug "sourceIssue: " + issueLink.getSourceObject()
            log.debug "destinationIssue: " + issueLink.getDestinationObject()
            
            if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString()) &amp;&amp; issueLink.getDestinationObject().key!=issue.key){
                found=true
                log.debug "trovato outWardLink - prendo la destination issue " + linkedIssueTemp + " e la lego alla issue corrente solo se non è già linkata"
                
                alreadyLinked=false
                for(li in allInCurrentIssueLink){
                    if(linkedIssueTemp.getId() == li.getSourceObject().getId() || linkedIssueTemp.getId() == li.getDestinationObject().getId()){
                        alreadyLinked=true
                    }
                }
                for(li in allOutCurrentIssueLink){
                    if(linkedIssueTemp.getId() == li.getSourceObject().getId() || linkedIssueTemp.getId() == li.getDestinationObject().getId()){
                        alreadyLinked=true
                    }
                }
                found=true
                if(!alreadyLinked){
                    log.debug "non è linkata, la linko"
                 	ComponentAccessor.getIssueLinkManager().createIssueLink(issue.getId(), linkedIssueTemp.getId(), Long.parseLong(properties['il.linkedTktsRelatesId'].toString()), 1, user);
                }else{
                    log.debug "già linkata, non la linko di nuovo"
                }
            }else if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString()) &amp;&amp; issueLink.getDestinationObject().key==issue.key){
                log.debug "issue già linkata"
                break
            }
        }

        log.debug "Creo link tra la issue oggetto di transition e la issue risultante dal filtro se non è già linkata"
        alreadyLinked=false
        for(li in allInCurrentIssueLink){
            if(i.getId() == li.getSourceObject().getId() || i.getId() == li.getDestinationObject().getId()){
                alreadyLinked=true
            }
        }
        for(li in allOutCurrentIssueLink){
            if(i.getId() == li.getSourceObject().getId() || i.getId() == li.getDestinationObject().getId()){
                alreadyLinked=true
            }
        }
        if(!alreadyLinked){
            log.debug "non è linkata, la linko"
            ComponentAccessor.getIssueLinkManager().createIssueLink(i.getId(), issue.getId(), Long.parseLong(properties['il.linkedTktsRelatesId'].toString()), 1, user);
        }else{
            log.debug "già linkata, non la linko di nuovo"
        }
        
              
    }
    
} else {
    log.error("Invalid JQL: " + jqlSearch);
} </arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">OP Email Notification: ACCEPTED_BY_SUPPLIER - mantenuta come post function per evitare di generare blocchi al fornitore legati all'invio di notifiche interne</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import org.apache.log4j.Category
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def requestMethod = "POST";

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();

def body_req = [
	"templateName": properties['tt.acceptedBySupplier'].toString(),
	"pec": false,
    "issueKey": issue.key
]

def baseURL = "http://" + properties['api.env'].toString() + "/op/rest/jira/AA/transaction/mail/send"
URL url
url = new URL(baseURL)

HttpURLConnection connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.outputStream
connection.outputStream.withWriter("UTF-8") { new StreamingJsonBuilder(it, body_req) }
log.debug connection.outputStream
connection.connect();

log.debug "url: " + url
log.debug "ResponseCode:" + connection.getResponseCode()
log.debug "ResponseMessage:" + connection.getResponseMessage()
log.debug "getResponseMessage:" + connection.getResponseMessage()

</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="81" name="Rifiuta Intervento" view="fieldscreen">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19906</meta>
          <results>
            <unconditional-result old-status="žée" status="žée" step="1">
              <post-functions>
                <function type="class">
                  <arg name="FIELD_NOTES">OP: New Installation - Check linkedTickets &amp; Fast-Transact them</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService
import org.apache.log4j.Category
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.link.IssueLink
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.WARN)

log.warn "${issue.key} Transazione REJECT FROM SUPPLIER - Post Function check linkedIssues"

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyRejected'] ? properties['cf.automaticallyRejected'].toString() : "OP_AUTOMATICALLY_REJECTED")[0]
IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)

Issue issue = issue
//Per test da console
//issue = issueManager.getIssueByKeyIgnoreCase("OPUT-276")

/*DEV*/
REJECT = properties['wf.tr.reject'] ? properties['wf.tr.reject'] : 81

/*PROD*/
//CONFIRM_TO_CUSTOMER

def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
def issueService = ComponentAccessor.getIssueService()

/*Se eseguo la confirm to customer su un ticket con 1 o + ticket collegati, verifico e sposto in automatico gli eventuali ticket collegati*/
log.warn "verifico e sposto in automatico gli eventuali ticket collegati"

if(issue.getIssueType().getName() == properties['it.newInstallation'].toString() &amp;&amp; issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals("No")){
    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            log.warn "Issue con relatesInIssueLink"
            /*Eseguire transazione di stato della sourceIssue*/
            def linkedIssue = issueLink.getSourceObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            def transitionId
            if(linkedIssueStatus.name == (properties['wf.assignedToSupplier'] ? properties['wf.assignedToSupplier'].toString() : "Assigned To Supplier") ){
                transitionId=REJECT
            }
            if(transitionId==REJECT){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(true)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                //log.warn "issueInputParameters: " + issueInputParameters
                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"

                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 79 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }
        }
    }

    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            log.warn "Issue con relatesOutIssueLink"
            /*Eseguire transazione di stato della destinationIssue*/
            def linkedIssue = issueLink.getDestinationObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            def transitionId
            log.warn "linkedIssue: " + linkedIssue
            log.warn "linkedIssueStatus.name: " + linkedIssueStatus.name
            if(linkedIssueStatus.name == (properties['wf.assignedToSupplier'] ? properties['wf.assignedToSupplier'].toString() : "Assigned To Supplier")){
                transitionId=REJECT
            }

            if(transitionId==REJECT){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(true)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 

                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"

                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 122 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }

        }
    }
}</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="field">customfield_22756</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">OP Email Notification: REJECTED_BY_SUPPLIER - Mantenuta come post function per non generare blocchi al fornitore legati a errori di invio mail interne</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import org.apache.log4j.Category
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

def requestMethod = "POST";

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();

def body_req = [
	"templateName": properties['tt.rejectedBySupplier'].toString(),
	"pec": false,
    "issueKey": issue.key
]

def baseURL = "http://" + properties['api.env'].toString() + "/op/rest/jira/AA/transaction/mail/send"
URL url
url = new URL(baseURL)

HttpURLConnection connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.outputStream
connection.outputStream.withWriter("UTF-8") { new StreamingJsonBuilder(it, body_req) }
log.debug connection.outputStream
connection.connect();

log.debug "url: " + url
log.debug "ResponseCode:" + connection.getResponseCode()
log.debug "ResponseMessage:" + connection.getResponseMessage()
log.debug "getResponseMessage:" + connection.getResponseMessage()

</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="3" name="Accepted By Supplier">
      <meta name="jira.status.id">14328</meta>
      <actions>
        <action id="91" name="Invia Conferma Intervento al Cliente" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19907</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">๕อywwด้อ&lt;so&lt;uฟ{fต๗ทZใv๚q๗๗ญธ</arg>
              <arg name="FIELD_NOTES">OP: Check Required Fields - only errors, no warnings - SOLO SE OPAA_AUTOMATICALLY_CONFIRMED==null OR !=Yes</arg>
              <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
 
Issue issue = issue

def errors = false
def warnings = false

def supplierLabel = properties['cf.supplier'] ? properties['cf.supplier'].toString() : "OP_SUPPLIER"
def supplier =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(supplierLabel)[0]

def plannedDate =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.plannedDate'].toString())[0]
def plannedHour =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.plannedHour'].toString())[0]
def plannedTechs =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.technicians'].toString())[0]

def transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]
log.debug "transitionCheck: " + issue.getCustomFieldValue(transitionCheck)
def automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyConfirmed'].toString())[0]

def errorMandatoryFields = new ArrayList()
def warningEmptyFields = new ArrayList()

if((issue.getCustomFieldValue(automaticallyConfirmed)==null || !issue.getCustomFieldValue(automaticallyConfirmed).toString().equals("Yes")) &amp;&amp; !issue.getIssueType().getName().equals(properties['it.newInstallation'])){
    //OP_SUPPLIER
    if(issue.getCustomFieldValue(supplier)==null || (String)issue.getCustomFieldValue(supplier) == "" || issue.getCustomFieldValue(supplier).toString().equals("")){
		errors = true
		errorMandatoryFields.add(supplierLabel)
	}
    //OPAA_PLANNED_DATE
    if(issue.getCustomFieldValue(plannedDate)==null || (String)issue.getCustomFieldValue(plannedDate) == "" || issue.getCustomFieldValue(plannedDate).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.plannedDate'].toString())
    }
    //OPAA_PLANNED_HOUR
    if(issue.getCustomFieldValue(plannedHour)==null || (String)issue.getCustomFieldValue(plannedHour) == "" || issue.getCustomFieldValue(plannedHour).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.plannedHour'].toString())
    }
    //OPAA_TECHNICIANS
    if(issue.getCustomFieldValue(plannedTechs)==null || (String)issue.getCustomFieldValue(plannedTechs) == "" || issue.getCustomFieldValue(plannedTechs).toString().equals("")){
        //errors = true
        warnings=true
        //errorMandatoryFields.add("OPAA_TECHNICIANS")
        warningEmptyFields.add(properties['cf.technicians'].toString())
    }

    def output = new ArrayList()

    if (!errors &amp;&amp; !warnings){
        return true
    }else{
        if(issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")){
            //log.debug "return true - transitionCheck = Yes"
            return true
        }else{
            if(!errors &amp;&amp; warnings){
                def wList = new ArrayList()

                if(warningEmptyFields.size() &gt; 0){
                    def wListConfirmEmpty = new ArrayList()
                    wListConfirmEmpty.add("W")
                    wListConfirmEmpty.add("CONFIRM_EMPTY_FIELDS")
                    wListConfirmEmpty.add(null)
                    wListConfirmEmpty.add(warningEmptyFields)

                    wList.add(wListConfirmEmpty)
                }

                output.add(wList)
                throw new InvalidInputException("W", output.toString())   
            }
            if(errors &amp;&amp; !warnings){
                def eList = new ArrayList()

                if(errorMandatoryFields.size() &gt; 0){
                    def eListMandatory = new ArrayList()
                    eListMandatory.add("E")
                    eListMandatory.add("MANDATORY_FIELDS")
                    eListMandatory.add(null)
                    eListMandatory.add(errorMandatoryFields)
                    eList.add(eListMandatory)
                }

                output.add(eList)
                throw new InvalidInputException("E", output.toString())   
            }
            if(errors &amp;&amp; warnings){
                def eList = new ArrayList()
                def wList = new ArrayList()

                if(errorMandatoryFields.size() &gt; 0){
                    def eListMandatory = new ArrayList()
                    eListMandatory.add("E")
                    eListMandatory.add("MANDATORY_FIELDS")
                    eListMandatory.add(null)
                    eListMandatory.add(errorMandatoryFields)
                    eList.add(eListMandatory)
                }

                if(warningEmptyFields.size() &gt; 0){
                    def wListConfirmEmpty = new ArrayList()
                    wListConfirmEmpty.add("W")
                    wListConfirmEmpty.add("CONFIRM_EMPTY_FIELDS")
                    wListConfirmEmpty.add(null)
                    wListConfirmEmpty.add(warningEmptyFields)

                    wList.add(wListConfirmEmpty)
                }

                output.add(eList)
                output.add(wList)
                throw new InvalidInputException("WE", output.toString())  
            }
        }
    }
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_NOTES">OP Email Notification: CONFIRM_TO_CUSTOMER - Se OPAA_AUTOMATICALLY_CONFIRMED = null OR != Yes</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.index.IssueIndexingService
import com.atlassian.jira.issue.link.IssueLink

import org.apache.log4j.Category
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

def requestMethod = "POST";
def relatesInIssueLink=false
def relatesOutIssueLink=false
def linkedTickets=new ArrayList()

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)

def automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyConfirmed'].toString())[0]

log.debug "issue: " + issue.key + " - issue.getCustomFieldValue(automaticallyConfirmed): " + issue.getCustomFieldValue(automaticallyConfirmed)

if(issue.getCustomFieldValue(automaticallyConfirmed)==null || !issue.getCustomFieldValue(automaticallyConfirmed).toString().equals("Yes")){
    
    /*OP-1038: verifica ticket collegati*/
    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            relatesInIssueLink=true
            linkedTickets.add(issueLink.getSourceObject().toString())
            log.debug "Issue con relatesInIssueLink"
        }
    }
    log.debug linkedTickets
    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            relatesOutIssueLink=true
            linkedTickets.add(issueLink.getDestinationObject().toString())
            log.debug "Issue con relatesOutIssueLink"
        }
    }
    log.debug linkedTickets
    
    def body_req
    if(relatesInIssueLink || relatesOutIssueLink){
        body_req = [
        	"templateName": properties['tt.confirmToCustomer'].toString(),
        	"pec": false,
        	"issueKey": issue.key,
            "linkedTickets": linkedTickets
    	]
    }else{
        body_req = [
            "templateName": properties['tt.confirmToCustomer'].toString(),
            "pec": false,
            "issueKey": issue.key
        ]
    }
    

    def baseURL = "http://" + properties['api.env'].toString() + "/op/rest/jira/AA/transaction/mail/send"
    URL url
    url = new URL(baseURL)

    HttpURLConnection connection = (HttpURLConnection)url.openConnection();
    connection.setRequestMethod(requestMethod);
    connection.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
    connection.setRequestProperty("Accept", "*/*");
    connection.setDoOutput(true);
    connection.setDoInput(true);
    connection.outputStream
    connection.outputStream.withWriter("UTF-8") { new StreamingJsonBuilder(it, body_req) }
    log.debug connection.outputStream
    connection.connect();

    def output = new ArrayList()
    def eList = new ArrayList()
    def eListErrors = new ArrayList()
    def errorMsgs = new ArrayList()

    log.debug connection.getResponseCode().toString()
    
    if (!connection.getResponseCode().toString().equals("200")){
        log.debug "url: " + url
        log.debug "ResponseCode:" + connection.getResponseCode()
        log.debug "ResponseMessage:" + connection.getResponseMessage()

        def outputMsg = ((HttpURLConnection)connection).errorStream.text
        log.debug "((HttpURLConnection)connection).errorStream.text: " + outputMsg

        def jsonSlurper = new JsonSlurper()
        def json_object = jsonSlurper.parseText(outputMsg)
        assert json_object instanceof Map  
        log.debug "message: " +  json_object.message

        eListErrors.add("E")
        eListErrors.add("SENDMAIL")
        errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
        eListErrors.add(json_object.message)
        eList.add(eListErrors)

        output.add(eList)
        throw new InvalidInputException("E", output.toString())
    }else{
        def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
        def mi = (MutableIssue) issue

        def fieldConfig = automaticallyConfirmed.getRelevantConfig(issue)
        log.debug "fieldConfig: " + fieldConfig + " da aggiornare su issue ${issue}"
        def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "No" }
        log.debug "cfNewValue: " + cfNewValue
        automaticallyConfirmed.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())

        ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
        issueIndexingService.reIndex(issue)
        log.debug "Updated customfield - issue principale: ${issue.getCustomFieldValue(automaticallyConfirmed)}"
    }
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_NOTES">OP: Set OPAA_AUTOMATICALLY_CONFIRMED=No if OPAA_AUTOMATICALLY_CONFIRMED=null OR !=Yes</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.index.IssueIndexingService

import org.apache.log4j.Category
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

def requestMethod = "POST";

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)

def automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyConfirmed'].toString())[0]

log.debug "issue: " + issue.key + " - issue.getCustomFieldValue(automaticallyConfirmed): " + issue.getCustomFieldValue(automaticallyConfirmed)

if(issue.getCustomFieldValue(automaticallyConfirmed)==null || !issue.getCustomFieldValue(automaticallyConfirmed).toString().equals("Yes")){
        def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
        def mi = (MutableIssue) issue

        def fieldConfig = automaticallyConfirmed.getRelevantConfig(issue)
        log.debug "fieldConfig: " + fieldConfig + " da aggiornare su issue ${issue}"
        def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "No" }
        log.debug "cfNewValue: " + cfNewValue
        automaticallyConfirmed.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())

        ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
        issueIndexingService.reIndex(issue)
        log.debug "Updated customfield - issue principale: ${issue.getCustomFieldValue(automaticallyConfirmed)}"
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="4">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="field.name">customfield_22640</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">бЧuЮЧWыwЧљЯЮєw·6Эп|Уnфу¦¶yпt</arg>
                  <arg name="FIELD_NOTES">OP: Check linkedTickets &amp; Fast-Transact them</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService
import org.apache.log4j.Category
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.link.IssueLink
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.WARN)

log.warn "${issue.key} Transazione Complete - Post Function check linkedIssues"

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyConfirmed'].toString())[0]
IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)

Issue issue = issue
//Per test da console
//issue = issueManager.getIssueByKeyIgnoreCase("OPUT-276")

/*DEV*/
CONFIRM_TO_CUSTOMER=properties['wf.tr.confirmToCustomer'].toInteger()

/*PROD*/
//CONFIRM_TO_CUSTOMER

def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
def issueService = ComponentAccessor.getIssueService()

/*Se eseguo la confirm to customer su un ticket con 1 o + ticket collegati, verifico e sposto in automatico gli eventuali ticket collegati*/
log.warn "verifico e sposto in automatico gli eventuali ticket collegati"

if(issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals("No")){
    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            log.warn "Issue con relatesInIssueLink"
            /*Eseguire transazione di stato della sourceIssue*/
            def linkedIssue = issueLink.getSourceObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            def transitionId
            if(linkedIssueStatus.name == properties['wf.acceptedBySupplier'].toString()){
                transitionId=CONFIRM_TO_CUSTOMER
            }
            if(transitionId==CONFIRM_TO_CUSTOMER){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(true)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                //log.warn "issueInputParameters: " + issueInputParameters
                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"

                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 79 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }
        }
    }

    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            log.warn "Issue con relatesOutIssueLink"
            /*Eseguire transazione di stato della destinationIssue*/
            def linkedIssue = issueLink.getDestinationObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            def transitionId
            log.warn "linkedIssue: " + linkedIssue
            log.warn "linkedIssueStatus.name: " + linkedIssueStatus.name
            if(linkedIssueStatus.name == properties['wf.acceptedBySupplier'].toString()){
                transitionId=CONFIRM_TO_CUSTOMER
            }

            if(transitionId==CONFIRM_TO_CUSTOMER){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(true)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 

                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"

                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 122 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }

        }
    }
}</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22693</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="101" name="Conferma senza Notifica al Cliente" view="fieldscreen">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19923</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="v+nWù">¶»ž</arg>
                <arg name="FIELD_CONDITION">issue.issueType.name == 'New Installation'|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="4">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">OP: Check linkedTickets &amp; Fast-Transact them</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService
import org.apache.log4j.Category
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.link.IssueLink
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.WARN)

log.warn "${issue.key} Transazione Complete - Post Function check linkedIssues"

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyConfirmed'].toString())[0]
IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)

Issue issue = issue
//Per test da console
//issue = issueManager.getIssueByKeyIgnoreCase("OPUT-276")

/*DEV*/
CONFIRM_TO_CUSTOMER = properties['wf.tr.confirmToCustomerNoEmail'] ? properties['wf.tr.confirmToCustomerNoEmail'] : 101

/*PROD*/
//CONFIRM_TO_CUSTOMER

def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
def issueService = ComponentAccessor.getIssueService()

/*Se eseguo la confirm to customer su un ticket con 1 o + ticket collegati, verifico e sposto in automatico gli eventuali ticket collegati*/
log.warn "verifico e sposto in automatico gli eventuali ticket collegati"

if(issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals("No")){
    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            log.warn "Issue con relatesInIssueLink"
            /*Eseguire transazione di stato della sourceIssue*/
            def linkedIssue = issueLink.getSourceObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            def transitionId
            if(linkedIssueStatus.name == properties['wf.acceptedBySupplier'].toString()){
                transitionId=CONFIRM_TO_CUSTOMER
            }
            if(transitionId==CONFIRM_TO_CUSTOMER){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(true)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                //log.warn "issueInputParameters: " + issueInputParameters
                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"

                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 79 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }
        }
    }

    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            log.warn "Issue con relatesOutIssueLink"
            /*Eseguire transazione di stato della destinationIssue*/
            def linkedIssue = issueLink.getDestinationObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            def transitionId
            log.warn "linkedIssue: " + linkedIssue
            log.warn "linkedIssueStatus.name: " + linkedIssueStatus.name
            if(linkedIssueStatus.name == "Accepted By Supplier"){
                transitionId=CONFIRM_TO_CUSTOMER
            }

            if(transitionId==CONFIRM_TO_CUSTOMER){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(true)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 

                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"

                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 122 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }

        }
    }
}</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="4" name="Confirmed and Planned">
      <meta name="jira.status.id">14329</meta>
      <actions>
        <action id="111" name="Compila Rapporto di Intervento" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19908</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">issue.issueType.name == 'Maintenance Ticket'|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_NOTES">OP: Check Required Fields - solo errors, no warnings</arg>
              <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
 
Issue issue = issue

def errors = false
def warnings = false

def plannedTechs =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.technicians'].toString())[0]
def automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]
def transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]

def errorMandatoryFields = new ArrayList()
def warningEmptyFields = new ArrayList()
 
//OPAA_TECHNICIANS
if((issue.getCustomFieldValue(automaticallyClosed)==null || issue.getCustomFieldValue(automaticallyClosed).toString().equals("No")) &amp;&amp; (issue.getCustomFieldValue(plannedTechs)==null || (String)issue.getCustomFieldValue(plannedTechs) == "" || issue.getCustomFieldValue(plannedTechs).toString().equals(""))){
    warnings = true
    warningEmptyFields.add(properties['cf.technicians'].toString())
}

def output = new ArrayList()

if (!errors &amp;&amp; !warnings){
    return true
}else{
    if(!errors &amp;&amp; warnings){
        if(issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")){
            //log.debug "return true"
            return true
        }else{
            def wList = new ArrayList()

            if(warningEmptyFields.size() &gt; 0){
                def wListConfirmEmpty = new ArrayList()
                wListConfirmEmpty.add("W")
                wListConfirmEmpty.add("CONFIRM_EMPTY_FIELDS")
                wListConfirmEmpty.add(null)
                wListConfirmEmpty.add(warningEmptyFields)

                wList.add(wListConfirmEmpty)
            }

            output.add(wList)
            throw new InvalidInputException("W", output.toString())   
        }
    }
    if(errors &amp;&amp; !warnings){
        def eList = new ArrayList()
        
        if(errorMandatoryFields.size() &gt; 0){
            def eListMandatory = new ArrayList()
            eListMandatory.add("E")
            eListMandatory.add("MANDATORY_FIELDS")
            eListMandatory.add(null)
            eListMandatory.add(errorMandatoryFields)
            eList.add(eListMandatory)
        }
        
		output.add(eList)
        throw new InvalidInputException("E", output.toString())   
    }
    if(errors &amp;&amp; warnings){
        def eList = new ArrayList()
        def wList = new ArrayList()
        
        if(errorMandatoryFields.size() &gt; 0){
            def eListMandatory = new ArrayList()
            eListMandatory.add("E")
            eListMandatory.add("MANDATORY_FIELDS")
            eListMandatory.add(null)
            eListMandatory.add(errorMandatoryFields)
            eList.add(eListMandatory)
        }
        
        if(warningEmptyFields.size() &gt; 0){
            def wListConfirmEmpty = new ArrayList()
            wListConfirmEmpty.add("W")
            wListConfirmEmpty.add("CONFIRM_EMPTY_FIELDS")
            wListConfirmEmpty.add(null)
            wListConfirmEmpty.add(warningEmptyFields)

            wList.add(wListConfirmEmpty)
        }
        
        output.add(eList)
        output.add(wList)
        throw new InvalidInputException("WE", output.toString())  
    }
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="5">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="field.name">customfield_22628</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="field.type">8</arg>
                  <arg name="full.module.key">com.riadalabs.jira.plugins.insightinsight-post-function</arg>
                  <arg name="field.groovyScript"> import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.MutableIssue;
import com.atlassian.jira.event.type.EventDispatchOption;
import org.apache.log4j.Level

Properties relativePath = new Properties()
File relativePathFile = new File('/var/atlassian/application-data/jira/insightPathToScript.properties')
relativePathFile.withInputStream {
	relativePath.load(it)
}

Properties properties = new Properties()
File propertiesFile = new File('/var/atlassian/application-data/jira' + relativePath['pathToScripts'] + 'opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
/* Get Insight Object Facade from plugin accessor */
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade"); 
def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);
  
/* Get Insight Object Type Facade from plugin accessor */
Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade"); 
def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);
  
/* Get Insight Object Attribute Facade from plugin accessor */
Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade"); 
def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
  
Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory"); 
def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);

Issue issue = issue

def plannedTechsField = issue.getCustomFieldValue(ComponentAccessor.getCustomFieldManager().getCustomFieldObjectByName(properties['cf.technicians'].toString()))
def onSiteTechsField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.techniciansOnsite'].toString())[0];
def OnSiteTechObjects = new ArrayList();

def automaticallyClosedField = issue.getCustomFieldValue(ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString()))

def ONSITE_TECH_REPORT_OBJ_TYPE=properties['iobj.onSiteTechReport'].toString().toInteger()
def ONSITE_TECH_REPORT_ATTR_NAME=properties['iobj.onSiteTechReport.name.id'].toString().toInteger()
def ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF=properties['iobj.onSiteTechReport.technicianRef.id'].toString().toInteger()

if(automaticallyClosedField==null || automaticallyClosedField.toString().equals("No")){
    if(plannedTechsField){
        
        for(technician in plannedTechsField){
            
            //extract insight key ang get object
            def tech=technician.toString()
            def techKey = tech.substring(tech.indexOf('(')+1,tech.indexOf(')'))
            def techName = tech.substring(0,tech.indexOf('(')-1)
            def techObject = objectFacade.loadObjectBean(techKey)
            log.info ("techName: " + techName)
            log.info ("techObject: " + techObject)
            
            def objectTypeOnSiteTechReport = objectTypeFacade.loadObjectTypeBean(ONSITE_TECH_REPORT_OBJ_TYPE);
            def newObjectBean = objectTypeOnSiteTechReport.createMutableObjectBean();
            
            def objectAttributeBeans = new ArrayList();
            def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_NAME); 
            
            objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, nameObjectTypeAttributeBean, techName));
                    
            newObjectBean.setObjectAttributeBeans(objectAttributeBeans);
            /* Store the object into Insight. The new ObjectBean will be updated with an unique ID */
            try {
                newObjectBean = objectFacade.storeObjectBean(newObjectBean);
                log.warn("newObjectBean: " + newObjectBean);
            } catch (Exception vie) {
                log.warn("Could not create issue due to validation exception:" + vie.getMessage());
            }
    
            /* Update TECHNICIAN_REF on the newObject */		        
            def objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF).createMutable() //The id of the attribute
            
            /* Create the new attribute bean based on the value */
            def newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, techKey);
            /* Load the attribute bean */
            def objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), techKey);
            if (objectAttributeBean != null) {
               /* If attribute exist reuse the old id for the new attribute */
               newObjectAttributeBean.setId(objectAttributeBean.getId());
            }
            /* Store the object attribute into Insight. */
            try {
                objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);
            } catch (Exception vie) {
                log.warn("Could not update object attribute due to validation exception:" + vie.getMessage());
            }  
            
            OnSiteTechObjects.add(newObjectBean)
         }
    }
    log.info ("OnSiteTechObjects: " + OnSiteTechObjects)
    def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
    
    if (!OnSiteTechObjects.isEmpty()) {
        MutableIssue mi = (MutableIssue) issue;
        mi.setCustomFieldValue(onSiteTechsField, OnSiteTechObjects);
        ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
    }   
}       </arg>
                  <arg name="field.filepath" />
                  <arg name="class.name">com.riadalabs.jira.plugins.insight.services.jira.postfunction.InsightPostFunction</arg>
                  <arg name="field.description">OP: Create OnSite_Tech_Report objects to be associated to the issue's customfield OP_TECHNICIANS_ONSITE</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22693</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="121" name="Ripianifica Tkt">
          <meta name="opsbar-sequence">30</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <results>
            <unconditional-result old-status="žée" status="žée" step="1">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="131" name="Intervento Eseguito" view="fieldscreen">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19909</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">issue.issueType.name == 'New Installation'|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="5" name="In Progress">
      <meta name="jira.status.id">3</meta>
      <actions>
        <action id="141" name="Chiudi Rapporto di Intervento" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19910</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">}­ûã®Ú÷6ÏváÇuë×ym®}õ×ï_vç9</arg>
              <arg name="FIELD_NOTES">OP: Check Required Fields - solo errors, no warnings</arg>
              <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

Issue issue = issue

log.debug "Transazione Complete - Primo validator"
log.debug "Transazione Complete - Primo validator - Issue: " + issue

def errors = false
def warnings = false

def automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]

def asset =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.asset'].toString())[0]
def assetStatusPre =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.assetStatusPre'].toString())[0]
def assetStatusPost =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.assetStatusPost'].toString())[0]
def risk =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.riskOnsite'].toString())[0]
def riskDescription =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.riskDescription'].toString())[0]
def custSignature =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.customerSignature'].toString())[0]
def custRef =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.custContactOnsite'].toString())[0]
def techSignature =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.technicianSignature'].toString())[0]
def kms =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.kms'].toString())[0]
def travelH =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.travelHours'].toString())[0]
def executionDate =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.executionDate'].toString())[0]
def techsOnsite =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.techniciansOnsite'].toString())[0]

def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.replacedMaterials'].toString())[0]
def reqMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.requiredMaterials'].toString())[0]

def transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]

def lumpSumPrice =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumPrice'].toString())[0]

def errorMandatoryFields = new ArrayList()
def errorJobStartedCompletedFields = new ArrayList()
def warningEmptyFields = new ArrayList()

/*OP-1038: Eseguo la verifica dei campi obbligatori solo se il ticket su cui sto eseguendo la transazione non è stato chiuso in automatico dal sistema*/
log.debug "issue.getCustomFieldValue(automaticallyClosed): " + issue.getCustomFieldValue(automaticallyClosed)
log.debug "check: " + !issue.getCustomFieldValue(automaticallyClosed).toString().equals("Yes")
if(issue.getCustomFieldValue(automaticallyClosed)==null || !issue.getCustomFieldValue(automaticallyClosed).toString().equals("Yes")){
    //OPAA_LUMP_SUM_PRICE
    if(issue.getCustomFieldValue(lumpSumPrice)==null || (String)issue.getCustomFieldValue(lumpSumPrice) == "" || issue.getCustomFieldValue(lumpSumPrice).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.lumpSumPrice'].toString())
    }

    //OPAA_REPLACED_MATERIALS
    if(issue.getCustomFieldValue(repMaterials)==null || (String)issue.getCustomFieldValue(repMaterials) == "" || issue.getCustomFieldValue(repMaterials).toString().equals("")){
        log.debug "warnings true"
        warnings = true
        warningEmptyFields.add(properties['cf.replacedMaterials'].toString())
    }
    //OPAA_REQUIRED_MATERIALS
    if(issue.getCustomFieldValue(reqMaterials)==null || (String)issue.getCustomFieldValue(reqMaterials) == "" || issue.getCustomFieldValue(reqMaterials).toString().equals("")){
        log.debug "warnings true"
        warnings = true
        warningEmptyFields.add(properties['cf.requiredMaterials'].toString())
    }


    //OPAA_ASSET
    if(issue.getCustomFieldValue(asset)==null || (String)issue.getCustomFieldValue(asset) == "" || issue.getCustomFieldValue(asset).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.asset'].toString())
    }
    //OPAA_ASSET_STATUS_PRE
    if(issue.getCustomFieldValue(assetStatusPre)==null || (String)issue.getCustomFieldValue(assetStatusPre) == "" || issue.getCustomFieldValue(assetStatusPre).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.assetStatusPre'].toString())
    }
    //OPAA_ASSET_STATUS_POST
    if(issue.getCustomFieldValue(assetStatusPost)==null || (String)issue.getCustomFieldValue(assetStatusPost) == "" || issue.getCustomFieldValue(assetStatusPost).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.assetStatusPost'].toString())
    }
    //OPAA_RISK_ONSITE
    if(issue.getCustomFieldValue(risk)==null || (String)issue.getCustomFieldValue(risk) == "" || issue.getCustomFieldValue(risk).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.riskOnsite'].toString())
    }
    //OPAA_RISK_DESCRIPTION
    if(issue.getCustomFieldValue(risk).toString().equals("Yes") &amp;&amp; (issue.getCustomFieldValue(riskDescription)==null || (String)issue.getCustomFieldValue(riskDescription) == "" || issue.getCustomFieldValue(riskDescription).toString().equals(""))){
        errors = true
        errorMandatoryFields.add(properties['cf.riskDescription'].toString())
    }
    //OPAA_CUSTOMER_SIGNATURE
    if(issue.getCustomFieldValue(custSignature)==null || (String)issue.getCustomFieldValue(custSignature) == "" || issue.getCustomFieldValue(custSignature).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.customerSignature'].toString())
    }
    //OPAA_CUSTOMER_CONTACT_ONSITE
    if(issue.getCustomFieldValue(custRef)==null || (String)issue.getCustomFieldValue(custRef) == "" || issue.getCustomFieldValue(custRef).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.custContactOnsite'].toString())
    }
    //OPAA_TECHNICIAN_SIGNATURE
    if(issue.getCustomFieldValue(techSignature)==null || (String)issue.getCustomFieldValue(techSignature) == "" || issue.getCustomFieldValue(techSignature).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.technicianSignature'].toString())
    }
    //15.12.2020 AF - tolta obbligatorietà sui campi OP_KMS e OP_TRAVEL_HOURS poichè ora la richiesta utenti è di implementare:
    //Cinzia Salituro: dovrebbero essere obbligatori laddove da contratto il fornitore non ha il diritto fisso di chiamata
    //OPAA_KMS
    /*if(issue.getCustomFieldValue(kms)==null || (String)issue.getCustomFieldValue(kms) == "" || issue.getCustomFieldValue(kms).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.kms'].toString())
    }*/
    //OPAA_TRAVEL_HOURS
    /*if(issue.getCustomFieldValue(travelH)==null || (String)issue.getCustomFieldValue(travelH) == "" || issue.getCustomFieldValue(travelH).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.travelHours'].toString())
    }*/
    //OPAA_EXECUTION_DATE
    if(issue.getCustomFieldValue(executionDate)==null || (String)issue.getCustomFieldValue(executionDate) == "" || issue.getCustomFieldValue(executionDate).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.executionDate'].toString())
    }

    //Job Started + Job Completed di ogni oggetto Tech_OnSite_Report associato al campo OPAA_TECHS_ONSITE
    if(issue.getCustomFieldValue(techsOnsite)!=null &amp;&amp; (String)issue.getCustomFieldValue(techsOnsite) != "" &amp;&amp; !issue.getCustomFieldValue(techsOnsite).toString().equals("")){
        /*Ciclare tutti gli oggetti associati al campo*/
        //insight classes &amp; components
        Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
        Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
        def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
        def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

        def techsOnsiteField = issue.getCustomFieldValue(techsOnsite)
		log.debug "techsOnsiteField: " + techsOnsiteField
        for(technician in techsOnsiteField){
            //extract insight key ang get object
            def techOnsite=technician.toString()
            def techOnsiteKey = techOnsite.substring(techOnsite.indexOf('(')+1,techOnsite.indexOf(')'))
            def techOnsiteObject = objectFacade.loadObjectBean(techOnsiteKey)
            //get "Job Started" for that Technician
            def obTriage
            def techJobStarted
            def techJobCompleted
            def techRef, tech, techRefKey, techRefObject, techRefName
            if(objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnSite.jobStarted'].toString())){
                obTriage = objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnSite.jobStarted'].toString()).createMutable()
                techJobStarted = obTriage.getObjectAttributeValueBeans().toString()
            }
            
            log.debug techJobStarted 
            //get "Job Completed" for that Technician
            if(objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnSite.jobCompleted'].toString())){
                obTriage = objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnSite.jobCompleted'].toString()).createMutable()
                techJobCompleted = obTriage.getObjectAttributeValueBeans().toString()
            }
            
            log.debug techJobCompleted
            //get "Technician_REF" for that Technician
            log.debug "techOnsiteObject: " + techOnsiteObject
            
            if(objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnsite.technicianRef'].toString())){
                
                obTriage = objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnsite.technicianRef'].toString()).createMutable()
                techRef = obTriage.getObjectAttributeValueBeans().toString()
                tech = techRef.toString()
                log.debug "tech: " + tech
                techRefKey = tech.substring(tech.indexOf('(')+1,tech.indexOf(')'))
                log.debug "techRefKey: " + techRefKey
                techRefObject = objectFacade.loadObjectBean(properties['ischema.aa'].toString() + "-" + techRefKey)
                techRefName = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()
            }
            
    		log.debug techRefName

            if(!techJobStarted || !techJobCompleted){
                errors = true
                errorJobStartedCompletedFields.add(techRefName.substring(techRefName.indexOf('(')+1,techRefName.indexOf(')')))
            }    
         }    
    }

    def output = new ArrayList()

    if (!errors &amp;&amp; !warnings){
        return true
    }else{
        if(!errors &amp;&amp; warnings){
            //Se ci sono solo warnings verifico se l'utente ha già dichiarato di voler proseguire comunque
            // - transition field "OPAA_CHECK_AND_CONFIRM"="Yes"
            // - in caso contrario invio i warning a FE

            //log.debug "transitionCheck: " + issue.getCustomFieldValue(transitionCheck)
            //log.debug "result: " + issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")
            if(issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")){
                //log.debug "return true"
                return true
            }else{
                def wList = new ArrayList()

                if(warningEmptyFields.size() &gt; 0){
                    def wListConfirmEmpty = new ArrayList()
                    wListConfirmEmpty.add("W")
                    wListConfirmEmpty.add("CONFIRM_EMPTY_FIELDS")
                    wListConfirmEmpty.add(null)
                    wListConfirmEmpty.add(warningEmptyFields)

                    wList.add(wListConfirmEmpty)
                }

                output.add(wList)
                log.debug "throw exception: " + output.toString()
                throw new InvalidInputException("W", output.toString())   
            }

        }
        if(errors &amp;&amp; !warnings){
            def eList = new ArrayList()

            if(errorMandatoryFields.size() &gt; 0){
                def eListMandatory = new ArrayList()
                eListMandatory.add("E")
                eListMandatory.add("MANDATORY_FIELDS")
                eListMandatory.add(null)
                eListMandatory.add(errorMandatoryFields)
                eList.add(eListMandatory)
            }

            if(errorJobStartedCompletedFields.size() &gt; 0){
                def eListStartEnd = new ArrayList()
                eListStartEnd.add("E")
                eListStartEnd.add("MISSING_ONSITE_START_END_DETAILS")
                eListStartEnd.add(null)
                eListStartEnd.add(errorJobStartedCompletedFields)
                eList.add(eListStartEnd)
            }

            output.add(eList)
            log.debug "throw exception: " + output.toString()
            throw new InvalidInputException("E", output.toString())   
        }
        if(errors &amp;&amp; warnings){
            def eList = new ArrayList()
            def wList = new ArrayList()
            if(errorMandatoryFields.size() &gt; 0){
                def eListMandatory = new ArrayList()
                eListMandatory.add("E")
                eListMandatory.add("MANDATORY_FIELDS")
                eListMandatory.add(null)
                eListMandatory.add(errorMandatoryFields)
                eList.add(eListMandatory)
            }

            if(errorJobStartedCompletedFields.size() &gt; 0){
                def eListStartEnd = new ArrayList()
                eListStartEnd.add("E")
                eListStartEnd.add("MISSING_ONSITE_START_END_DETAILS")
                eListStartEnd.add(null)
                eListStartEnd.add(errorJobStartedCompletedFields)
                eList.add(eListStartEnd)
            }

            if(warningEmptyFields.size() &gt; 0){
                def wListConfirmEmpty = new ArrayList()
                wListConfirmEmpty.add("W")
                wListConfirmEmpty.add("CONFIRM_EMPTY_FIELDS")
                wListConfirmEmpty.add(null)
                wListConfirmEmpty.add(warningEmptyFields)

                wList.add(wListConfirmEmpty)
            }

            output.add(eList)
            output.add(wList)
            log.debug "throw exception: " + output.toString()
            throw new InvalidInputException("WE", output.toString())  
        }
    }
}
</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_NOTES">OP: REST API: OP generazione Rapporto di intervento</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import org.apache.log4j.Category
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def requestMethod
def baseURL
log.debug "OnSite Report per issue: " + issue.key
/* REST API per Generazione Allegato Rapporto di Intervento */
requestMethod = "PUT";

baseURL = "http://" + properties['api.env'].toString() + "/op/rest/automation/AA/ticket/" + issue.key.toString() + "/attachment/onsite"
log.debug "baseUrl: " + baseURL

URL url
url = new URL(baseURL)
HttpURLConnection connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.connect();
log.debug "ResponseCode:" + connection.getResponseCode()
log.debug "ResponseMessage:" + connection.getResponseMessage()

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()
    eListErrors.add("E")
    eListErrors.add("GENERATE-ONSITEREPORT")
    errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
    eListErrors.add(errorMsgs)
    eList.add(eListErrors)

    output.add(eList)
    throw new InvalidInputException("E", output.toString())
}
</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_NOTES">OP: REST API: OP per consuntivazione ticket</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService
import org.apache.log4j.Category
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();

IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)
def automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]

def requestMethod
def baseURL

int OPAA = properties['ischema.aa.id'].toString().toInteger()
int DBO = properties['ischema.dbo.id'].toString().toInteger()
boolean unatantum=true

/*OP-1038: la contabilizzazione dovrà prevedere le unatantum rates solo se il ticket non è stato chiuso in automatico*/
if(issue.getCustomFieldValue(automaticallyClosed)!=null &amp;&amp; issue.getCustomFieldValue(automaticallyClosed).toString().equals("Yes")){
	unatantum=false    
}
log.debug "Consuntivazione ticket " + issue.key + " con unatantum: " + unatantum

/* REST API per Contabilizzazione Intervento */
requestMethod = "GET";

baseURL = "http://" + properties['api.env'].toString() + "/op/rest/AA/ticket/issueKey/" + issue.key.toString() + "/close?um="+unatantum.toString()
log.debug "baseUrl: " + baseURL

/*Definire parametro di input unatantum=true|false in base al valore della variabile booleana unatantum*/
URL url = new URL(baseURL)
HttpURLConnection connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.connect();
log.debug "ResponseCode:" + connection.getResponseCode()
log.debug "ResponseMessage:" + connection.getResponseMessage()

//IssueIndexingService issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)
//issueIndexingService.reIndex(issueManager.getIssueObject(issue.key.toString()))

//def unaTantumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName("OPAA_UNATANTUM_RATES")[0]
//log.warn "unaTantumRates: " + issue.getCustomFieldValue(unaTantumRates)

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()
    log.debug "Response: " + connection

    /*ROLLBACK*/
    /*Rimozione allegato rapporto di intervento appena creato*/
    /* Get Insight IQL Facade from plugin accessor */
    Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade"); 
    def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);

    /* Get Insight Object Facade from plugin accessor */
    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");
    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

    /* Get Insight Object Type Facade from plugin accessor */
    Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade");
    def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);

    /* Get Insight Object Attribute Facade from plugin accessor */
    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);

    Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory");
    def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);

    /* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include " around value */
    def objects = iqlFacade.findObjectsByIQLAndSchema(DBO, "\"" + properties['iobj.attachmentCategory.categoryRef'].toString() + "\".\"" + properties['iobj.attachmentCategory.name'].toString() + "\" = \"" + properties['iobj.attachmentCategory.objs.rappIntFAAC'].toString() + "\" AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND object HAVING connectedTickets(key = " + issue.key.toString() + ")"); // See the complete list of possible IQL on the Insight Query Language documentation page
    /* If this is a mandatory field you should be able to do this: */
    log.info("Insight object: " + objects[0]);

    if(objects[0]){
        /* UPDATE OJBECT DELETED VALUE */
        def obTriage = objectFacade.loadObjectAttributeBean(objects[0].getId(), properties['iobj.attachmentCategory.deleted'].toString()).createMutable()  
        def value = obTriage.getObjectAttributeValueBeans()

        def valueBean = obTriage.createObjectAttributeValueBean()
        valueBean.setValue(objectTypeAttributeFacade.loadObjectTypeAttributeBean(obTriage.getObjectTypeAttributeId()), true)
        /*Clean actual value*/
        value.clear()
        value.add(valueBean);
        obTriage.setObjectAttributeValueBeans(value)

        //Update OJBECT attribute value
        try {
            obTriage = objectFacade.storeObjectAttributeBean(obTriage);
        } catch (Exception vie) {
            log.warn("Could not update object attribute due to validation exception:" + vie.getMessage());
        }
    }

    eListErrors.add("E")
    eListErrors.add("OP-TKT-ACCOUNTING")
    errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
    eListErrors.add(errorMsgs)
    eList.add(eListErrors)

    output.add(eList)
    throw new InvalidInputException("E", output.toString())
}else{
    /*OP-1038: consuntivazione terminata correttamente - se è stata eseguita con unatantum=true setto a No il campo OPAA_AUTOMATICALLY_CLOSED*/
    if(unatantum){
        def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
        def mi = (MutableIssue) issue

        def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
        log.debug "fieldConfig: " + fieldConfig
        def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "No" }
        automaticallyClosed.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())

        ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
        issueIndexingService.reIndex(issue)
        log.debug "Updated customfield - issue principale ${issue.getCustomFieldValue(automaticallyClosed)}"
    }
}
</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_NOTES">OP: REST API: OP Email Notification: ONSITE_REPORT - only IF OPAA_AUTOMATICALLY_CLOSED!=Yes AND sendMail!=NO MAIL AND ci sono ticket collegati. ----&gt; DISABLED su transazione complete - viene fatto manualmente da SEND ONSITE REPORT</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.event.type.EventDispatchOption
import org.apache.log4j.Category
import com.atlassian.jira.issue.link.IssueLink
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]
def sendMailTo =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.sendMailTo'].toString())[0]
def sendMailToRec =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.sendMailToRecipients'].toString())[0]
def onsiteReportDate = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.wfOnsiteReport'].toString())[0]

def requestMethod
def baseURL

int OPAA = properties['ischema.aa.id'].toString().toInteger()
int DBO = properties['ischema.dbo.id'].toString().toInteger()
def relatesInIssueLink=false
def relatesOutIssueLink=false
def linkedTickets=new ArrayList()
def body_req
def sendmail=true

if(issue.getCustomFieldValue(automaticallyClosed)==null || !issue.getCustomFieldValue(automaticallyClosed).toString().equals("Yes")){

    /*OP-1038: verifica ticket collegati*/
    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            relatesInIssueLink=true
            linkedTickets.add(issueLink.getSourceObject().toString())
            log.debug "Issue con relatesInIssueLink"
        }
    }
    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            relatesOutIssueLink=true
            linkedTickets.add(issueLink.getDestinationObject().toString())
            log.debug "Issue con relatesOutIssueLink"
        }
    }
    
    log.debug "issue.getCustomFieldValue(sendMailTo).toString(): " + issue.getCustomFieldValue(sendMailTo).toString()
    if((relatesInIssueLink || relatesOutIssueLink) &amp;&amp; !issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.noEmail'].toString()) &amp;&amp; issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.currentReport'].toString())){
        //OP-1038: inviare solo la mail con il rapporto di intervento del ticket corrente
        body_req = [
            "templateName": properties['tt.onSiteReport'].toString(),
            "pec": false,
            "issueKey": issue.key,
            "additionalRecipients": issue.getCustomFieldValue(sendMailToRec).toString()
        ]
        /*31.07.2020 AF: nella transazione complete NON inviare mail la mail per i ticket con collegati - il rapporto di intervento dei ticket "figli" viene generato dopo l'invio della mail sul "padre" quindi non verrebbe incluso nella mail*/
        /*L'invio della mail verrà fatto successivamente rispetto alla chiusura con "Send OnSite Report"*/
        sendmail=false
    }else if((relatesInIssueLink || relatesOutIssueLink) &amp;&amp; !issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.noEmail'].toString()) &amp;&amp; issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.currentReport'].toString())){
        //OP-1038: inviare la mail con tutti i rapporti di intervento dei ticket collegati
        body_req = [
            "templateName": properties['tt.onSiteReport'].toString(),
            "pec": false,
            "issueKey": issue.key,
            "linkedTickets": linkedTickets,
            "additionalRecipients": issue.getCustomFieldValue(sendMailToRec).toString()
        ]
        /*31.07.2020 AF: nella transazione complete NON inviare mail la mail per i ticket con collegati - il rapporto di intervento dei ticket "figli" viene generato dopo l'invio della mail sul "padre" quindi non verrebbe incluso nella mail*/
        /*L'invio della mail verrà fatto successivamente rispetto alla chiusura con "Send OnSite Report"*/
        sendmail=false
    }else if(!relatesInIssueLink &amp;&amp; !relatesOutIssueLink){
        /*AF 20200729 - su FAAC Service la notifica con il rapporto di intervento viene inviata solo su esplicita decisione dell'utente - che spingerà SEND ONSITE REPORT dopo aver chiuso il ticket. Quindi se non ci sono ticket collegati settiamo sendmail=false*/
        sendmail=false
        body_req = [
            "templateName": properties['tt.onSiteReport'].toString(),
            "pec": false,
            "issueKey": issue.key,
            "additionalRecipients": issue.getCustomFieldValue(sendMailToRec).toString()
        ]
    }else{
        //OP-1038: non inviare la mail
        sendmail=false
    }
    
    log.debug "sendmail: " + sendmail
    if(sendmail){
        /* REST API per Invio Notifica Email ONSITE_REPORT */
        requestMethod = "POST";

        baseURL = "http://" + properties['api.env'].toString() + "/op/rest/jira/AA/transaction/mail/send"
        URL url = new URL(baseURL)
        HttpURLConnection connection = (HttpURLConnection)url.openConnection();
        connection.setRequestMethod(requestMethod);
        connection.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
        connection.setRequestProperty("Accept", "*/*");
        connection.setDoOutput(true);
        connection.setDoInput(true);
        connection.outputStream
        log.debug "body_req: " + body_req
        connection.outputStream.withWriter("UTF-8") { new StreamingJsonBuilder(it, body_req) }
        log.debug connection.outputStream
        connection.connect();
        
        log.debug "url: " + url
        log.debug "ResponseCode:" + connection.getResponseCode()
        //log.debug "ResponseMessage:" + connection.getResponseMessage()

        def output = new ArrayList()
        def eList = new ArrayList()
        def eListErrors = new ArrayList()
        def errorMsgs = new ArrayList()

        if (!connection.getResponseCode().toString().equals("200")){
            log.debug "url: " + url
            log.debug "ResponseCode:" + connection.getResponseCode()
            log.debug "ResponseMessage:" + connection.getResponseMessage()

            
            /* Get Insight IQL Facade from plugin accessor */
            Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade"); 
            def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);

            /* Get Insight Object Facade from plugin accessor */
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            /* Get Insight Object Type Facade from plugin accessor */
            Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade");
            def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);

            /* Get Insight Object Attribute Facade from plugin accessor */
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);

            Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory");
            def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);

            /* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include " around value */
            /*ROLLBACK*/
            /*Rimozione allegato rapporto di intervento appena creato*/
            def objects = iqlFacade.findObjectsByIQLAndSchema(DBO, "\"" + properties['iobj.attachmentCategory.categoryRef'].toString() + "\".\"Name\" = \"" + properties['iobj.attachmentCategory.objs.rappIntFAAC'].toString() + "\" AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND object HAVING connectedTickets(key = " + issue.key.toString() + ")"); // See the complete list of possible IQL on the Insight Query Language documentation page
            /* If this is a mandatory field you should be able to do this: */
            //log.info("Insight object: " + objects[0]);

            if(objects[0]){
                /* UPDATE OJBECT DELETED VALUE */
                def obTriage = objectFacade.loadObjectAttributeBean(objects[0].getId(), properties['iobj.attachmentCategory.deleted'].toString()).createMutable()  
                def value = obTriage.getObjectAttributeValueBeans()

                def valueBean = obTriage.createObjectAttributeValueBean()
                valueBean.setValue(objectTypeAttributeFacade.loadObjectTypeAttributeBean(obTriage.getObjectTypeAttributeId()), true)
                /*Clean actual value*/
                value.clear()
                value.add(valueBean);
                obTriage.setObjectAttributeValueBeans(value)

                //Update OJBECT attribute value
                try {
                    obTriage = objectFacade.storeObjectAttributeBean(obTriage);
                } catch (Exception vie) {
                    log.warn("1. Could not update object attribute due to validation exception:" + vie.getMessage());
                }
            }

            /*Rollback contabilizzazione intervento*/
            /*Cancellare tutti gli oggetti OnSite_Rate_Report registrati nei campi OPAA_LUMP_SUM_RATES, OPAA_UNA_TANTUM_RATES, OPAA_TRAVEL_RATES, OPAA_LABOUR_RATES*/
            /*Ciclare tutti gli oggetti associati al campo*/

            /* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include " around value */
            objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, "objectType = " + properties['iobj.onSiteRateReport'].toString() + " AND object HAVING connectedTickets(key=" + issue.key.toString() + ") AND \"" + properties['iobj.onSiteRateReport.deleted'].toString() + "\" != true"); // See the complete list of possible IQL on the Insight Query Language documentation page
            /* If this is a mandatory field you should be able to do this: */
            //log.info("Insight objects da cancellare: " + objects);

            for(obj in objects){
                /* DELETE CONNECTED OBJECTS */
                objectFacade.deleteObjectBean(obj.getId());  
            }

            /*Cancellare gli importi fornitore, cliente e i totali su tutti gli oggetti Component in OPAA_REPLACED_MATERIALS*/
            def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.replacedMaterials'].toString())[0]
            def repMatList = issue.getCustomFieldValue(repMaterials)

            for(mat in repMatList){
                //extract insight key and get object
                def component=mat.toString()
                def componentKey = component.substring(component.indexOf('(')+1,component.indexOf(')'))
                def componentObject = objectFacade.loadObjectBean(componentKey)
                //set "APPLIED_TO", "ACCOUNTING_SUPPLIER_MATERIAL_REF", "ACCOUNTING_CUSTOMER_MATERIAL_REF", "TOTAL_AMOUNT_SUPPLIER", "TOTAL_AMOUNT_CUSTOMER" to null for that component

                //APPLIED_TO
                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString())){
                    def obTriageAppliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString()).createMutable()
                    def valueAppliedTo = obTriageAppliedTo.getObjectAttributeValueBeans()
                    log.warn "valueAppliedTo: " + valueAppliedTo
                    if (valueAppliedTo.size() &gt; 0){
                        valueAppliedTo.clear() 

                        try {
                            obTriageAppliedTo = objectFacade.deleteObjectAttributeBean(obTriageAppliedTo.id);
                        } catch (Exception vie){ 
                            log.error("Could not update object attribute due to validation exception:" + vie.getMessage());
                        }
                    }
                }

                //ACCOUNTING_SUPPLIER_MATERIAL_REF
                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingSuppMaterial'].toString())){
                    def obTriageMatS = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingSuppMaterial'].toString()).createMutable()
                    def valueMatS = obTriageMatS.getObjectAttributeValueBeans()
                    log.warn "valueMatS: " + valueMatS
                    if (valueMatS.size() &gt; 0){
                        valueMatS.clear() 

                        try {
                            obTriageMatS = objectFacade.deleteObjectAttributeBean(obTriageMatS.id);
                        } catch (Exception vie){ 
                            log.error("Could not update object attribute due to validation exception:" + vie.getMessage());
                        }
                    }
                }

                //ACCOUNTING_CUSTOMER_MATERIAL_REF
                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingCustMaterial'].toString())){
                    def obTriageMatC = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingCustMaterial'].toString()).createMutable()
                    def valueMatC = obTriageMatC.getObjectAttributeValueBeans()
                    log.warn "valueMatC: " + valueMatC
                    if (valueMatC.size() &gt; 0){
                        valueMatC.clear() 

                        try {
                            obTriageMatC = objectFacade.deleteObjectAttributeBean(obTriageMatC.id);
                        } catch (Exception vie){ 
                            log.error("Could not update object attribute due to validation exception:" + vie.getMessage());
                        }
                    }
                }
                
                //TOTAL_AMOUNT_SUPPLIER
                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString())){
                    def obTriageTotS = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString()).createMutable()
                    def valueTotS = obTriageTotS.getObjectAttributeValueBeans()
                    log.warn "valueTotS: " + valueTotS
                    if (valueTotS.size() &gt; 0){
                        valueTotS.clear() 

                        try {
                            obTriageTotS = objectFacade.deleteObjectAttributeBean(obTriageTotS.id);
                        } catch (Exception vie){ 
                            log.error("Could not update object attribute due to validation exception:" + vie.getMessage());
                        }
                    }

                }
                
                //TOTAL_AMOUNT_CUSTOMER
                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString())){
                    def obTriageTotC = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()).createMutable()
                    def valueTotC = obTriageTotC.getObjectAttributeValueBeans()
                    log.warn "valueTotC: " + valueTotC
                    if (valueTotC.size() &gt; 0){
                        valueTotC.clear() 

                        try {
                            obTriageTotC = objectFacade.deleteObjectAttributeBean(obTriageTotC.id);
                        } catch (Exception vie){ 
                            log.error("Could not update object attribute due to validation exception:" + vie.getMessage());
                        }
                    }
                }
            }    

            def outputMsg = ((HttpURLConnection)connection).errorStream.text
            log.debug "((HttpURLConnection)connection).errorStream.text: " + outputMsg

            def jsonSlurper = new JsonSlurper()
            def json_object = jsonSlurper.parseText(outputMsg)
            assert json_object instanceof Map  
            log.debug "message: " +  json_object.message
            
            eListErrors.add("E")
            eListErrors.add("SENDMAIL")
            errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
            eListErrors.add(json_object.message)
            eList.add(eListErrors)

            output.add(eList)
            throw new InvalidInputException("E", output.toString())
        }else{
            /*L'email è stata inviata correttamente, aggiorno il campo ONSITE_REPORT con la data corrente*/

            // log.warn "issue "+issue.getKey()
            def cfv = issue.getCustomFieldValue(onsiteReportDate)
            if (!cfv) {
              def t0  = new java.sql.Timestamp(System.currentTimeMillis())
              log.warn "StartTime =&gt; '"+t0.toString()+"'"
              def mv = new ModifiedValue(onsiteReportDate, t0)
              def ch = new DefaultIssueChangeHolder()
              onsiteReportDate.updateValue(null, issue, mv, ch) 
            } else {
              log.warn "StartTime == '"+cfv.toString()+"'"
            }
        }
    }
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">OP: Check linkedTickets &amp; Fast-Transact them</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService
import org.apache.log4j.Category
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.link.IssueLink
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.WARN)

log.warn "${issue.key} Transazione Complete - Post Function check linkedIssues"

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]
IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)

Issue issue = issue
//Per test da console
//issue = issueManager.getIssueByKeyIgnoreCase("OPUT-276")

START_PROGRESS=properties['wf.tr.startProgress']
COMPLETE=properties['wf.tr.complete']

def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
def issueService = ComponentAccessor.getIssueService()

log.warn "issue.getCustomFieldValue(automaticallyClosed): " + issue.getCustomFieldValue(automaticallyClosed)

if(issue.getCustomFieldValue(automaticallyClosed)==null || issue.getCustomFieldValue(automaticallyClosed).toString().equals("No")){
    /*OP-1038: se ho eseguito la Complete sul ticket "padre" verifico e sposto in automatico gli eventuali ticket collegati*/
    
    log.warn "verifico e sposto in automatico gli eventuali ticket collegati"
    
    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            /*Eseguire transazione di stato con OPAA_AUTOMATICALLY_CLOSED=Yes della sourceIssue*/
            def linkedIssue = issueLink.getSourceObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            log.warn "Issue con relatesInIssueLink ${linkedIssue} con stato ${linkedIssueStatus}"
            def transitionId
            if(linkedIssueStatus.name == properties['wf.confirmedAndPlanned'].toString()){
                transitionId=START_PROGRESS
            }
            if(linkedIssueStatus.name == properties['wf.inProgress'].toString()){
                transitionId=COMPLETE
            }
            if(transitionId==START_PROGRESS){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(false)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                //log.warn "issueInputParameters: " + issueInputParameters
                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"
                
                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 96 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                        transitionId=COMPLETE
                        // Prepare our input for the transition
                        issueInputParameters = issueService.newIssueInputParameters()
                        issueInputParameters.with {
                            setSkipScreenCheck(false)
                        }
                        //fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                        //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                        //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                        //validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                        currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                        mi = (MutableIssue) linkedIssue

                        //fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)
                        //log.warn "fieldConfig: " + fieldConfig
                        //cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                        //automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())

                        //ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                        //issueIndexingService.reIndex(linkedIssue)
                        //log.warn "Updated customfield - issue linkata"
                        if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                            // Perform the transition
                            issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                            if (! issueResult.isValid()) {
                                log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                            }else{
                                log.warn("Transazione fatta 124 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                            }
                        } else {
                            log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                        }
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }else if (transitionId==COMPLETE){
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(false)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                
                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"
                
                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 161 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }
        }
    }
    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            log.warn "Issue con relatesOutIssueLink"
            /*Eseguire transazione di stato con OPAA_AUTOMATICALLY_CLOSED=Yes della destinationIssue*/
            def linkedIssue = issueLink.getDestinationObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            def transitionId
            log.warn "linkedIssue: " + linkedIssue
            log.warn "linkedIssueStatus.name: " + linkedIssueStatus.name
            if(linkedIssueStatus.name == "Confirmed and Planned"){
                transitionId=START_PROGRESS
            }
            if(linkedIssueStatus.name == properties['wf.inProgress'].toString()){
                transitionId=COMPLETE
            }
            log.warn "transitionId: " + transitionId
            if(transitionId==START_PROGRESS){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(false)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                
                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"
                
                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                log.warn "issueInputParameters: " + issueInputParameters
                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 218 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                        transitionId=COMPLETE
                        // Prepare our input for the transition
                        issueInputParameters = issueService.newIssueInputParameters()
                        issueInputParameters.with {
                            setSkipScreenCheck(false)
                        }
                        //fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                        //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                        //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                        
                        currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                        mi = (MutableIssue) linkedIssue

                        fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)
                        log.warn "fieldConfig: " + fieldConfig
                        cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                        automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())

                        ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                        issueIndexingService.reIndex(linkedIssue)
                        log.warn "Updated customfield - issue linkata"
                        
                        //validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                        if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                            // Perform the transition
                            issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                            if (! issueResult.isValid()) {
                                log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                            }else{
                                log.warn("Transazione fatta 248 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                            }
                        } else {
                            log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                        }
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }else{
                log.warn "issue da completare"
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(false)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                //log.warn "validateResult"
                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"
                
                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 285 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }
        }
    }

}</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="field">customfield_22693</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="151" name="Annulla Rapporto di Intervento">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <results>
            <unconditional-result old-status="žée" status="žée" step="4">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="6" name="Completed to be Closed">
      <meta name="jira.status.id">14330</meta>
      <actions>
        <action id="161" name="ODV" view="fieldscreen">
          <meta name="opsbar-sequence">40</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19908</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_NOTES">`!`</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">issue.issueType.name == 'Maintenance Ticket'|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
              <condition type="class">
                <arg name="FIELD_NOTES">OP: Check OP_SALES_ORDER_DATE - If not null - transition has already been executed</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
cfValues[properties['cf.salesOrderDate']] == null|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
              <condition type="class">
                <arg name="FIELD_NOTES">OP: Check OP_AUTOMATICALLY_CLOSED - if Yes don't allow transition</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
cfValues[properties['cf.automaticallyClosed']] == null || cfValues[properties['cf.automaticallyClosed']]?.value == 'No'|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">ÝÞøy¶om¼×ßZ}þôé÷4{~yïvºw§_ßWÛ</arg>
              <arg name="FIELD_NOTES">OP: Check Required Fields - solo errors, no warnings</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper
import groovy.json.JsonBuilder
import groovy.json.StreamingJsonBuilder

import com.atlassian.jira.issue.CustomFieldManager
import com.atlassian.jira.issue.fields.CustomField
import com.atlassian.jira.issue.IssueManager
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.issue.link.IssueLink

import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService

import org.apache.log4j.Category
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)
 
Issue issue = issue
//Per test da console
//IssueManager issueManager = ComponentAccessor.getIssueManager();
//issue = issueManager.getIssueByKeyIgnoreCase("OPUT-14065")

def errors = false
def warnings = false
def relatesInIssueLink=false
def relatesOutIssueLink=false
def wListConfirmEmptyMatQuoteLinked = new ArrayList()
def wListConfirmEmptyRateQuoteLinked = new ArrayList()

def lumpSumPrice =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumPrice'].toString())[0]

/*Campi con dati obbligatori per ticket non a corpo*/
def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.replacedMaterials'].toString())[0]
def unaTantumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.unatantumRates'].toString())[0]
def labourRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.labourRates'].toString())[0]
def travelRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.travelRates'].toString())[0]

/*Campi con dati obbligatori per ticket a corpo*/
def lumpSumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumRates'].toString())[0]

/*Conferma utente su warnings*/
def transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]
def transitionCheckValue = issue.getCustomFieldValue(transitionCheck)

/*Insight Schema IDs*/
def DBObjects = properties['ischema.dbo'].toString() + "-"
def OPAA = properties['ischema.aa'].toString() + "-"

/*Array warnings ed errors per la issue principale, uno per ogni tipologia di errore o warning*/
def issueWarningEmptyQuoteMatCustomer = new ArrayList()
def issueWarningEmptyQuoteRateCustomer = new ArrayList()
//def issueError...

/*Verifica campi su ticket oggetto della transazione*/
if(issue.getCustomFieldValue(lumpSumPrice)!=null &amp;&amp; issue.getCustomFieldValue(lumpSumPrice).toString().equals("Yes")){
	/*Contabilizzazione a corpo*/
	log.debug "Contabilizzazione a corpo"
	//OPAA_LUMP_SUM_RATES
	if(issue.getCustomFieldValue(lumpSumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(lumpSumRates) != "" &amp;&amp; !issue.getCustomFieldValue(lumpSumRates).toString().equals("")){
		/*Ciclare tutti gli oggetti associati al campo*/
		//insight classes &amp; components
		Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
		Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
		def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
		def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

		def lsRatesList = issue.getCustomFieldValue(lumpSumRates)

		for(ls in lsRatesList){
			//extract insight key ang get object
			def lsRate=ls.toString()
			def lsRateKey = lsRate.substring(lsRate.indexOf('(')+1,lsRate.indexOf(')'))
			def lsRateObject = objectFacade.loadObjectBean(lsRateKey)
			//get "APPLIED_TO" for that rate
			def lsAppliedTo = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
			def lsAppliedToValue
			if (lsAppliedTo){
				lsAppliedToValue = lsAppliedTo.substring(lsAppliedTo.indexOf('(')+1,lsAppliedTo.indexOf(')'))
			}
            //get "DELETED" for that rate
            def deleted
            def deletedValue
            if(objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString())){
                deleted = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString()
                log.debug "deleted: " + deleted
                if (deleted){
                    deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
                }
            }
			
			def lsRateRef = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
			
			def lsRateRefKey
			def lsRateRefValue
			if(lsRateRef.size() &gt; 0){
				lsRateRef = lsRateRef.toString()
				lsRateRefKey = lsRateRef.substring(lsRateRef.indexOf('(')+1,lsRateRef.indexOf(')'))
				def lsRateRefObject = objectFacade.loadObjectBean(OPAA + lsRateRefKey)
				lsRateRefValue = objectFacade.loadObjectAttributeBean(lsRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
				lsRateRefValue = lsRateRefValue.substring(lsRateRefValue.indexOf('(')+1,lsRateRefValue.indexOf(')'))
			}

			if((lsAppliedToValue.toString().equals("BOTH") || lsAppliedToValue.toString().equals("CUSTOMER")) &amp;&amp; !deletedValue.toString().equals("true")){
				//get "TOTAL_AMOUNT_CUSTOMER" for that component
				def totCustomer 
				if(objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString())){
					totCustomer = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()
				}
				if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
					warnings=true
					issueWarningEmptyQuoteRateCustomer.add(lsRateRefValue.toString())
					log.debug issue.key.toString() + " issueWarningEmptyQuoteRateCustomer: " + issueWarningEmptyQuoteRateCustomer
				}
			}
		 }    
	}

}else{
	/*Contabilizzazione non a corpo*/
	log.debug "Contabilizzazione NON a corpo"

	//OPAA_REPLACED_MATERIALS
	if(issue.getCustomFieldValue(repMaterials)!=null &amp;&amp; (String)issue.getCustomFieldValue(repMaterials) != "" &amp;&amp; !issue.getCustomFieldValue(repMaterials).toString().equals("")){
		//log.debug "Materiali: " + issue.getCustomFieldValue(repMaterials)
		/*Ciclare tutti gli oggetti associati al campo*/
		//insight classes &amp; components
		Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
		Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
		def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
		def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

		def repMatList = issue.getCustomFieldValue(repMaterials)

		for(mat in repMatList){
			//extract insight key ang get object
			def component=mat.toString()
			//def componentKey = component.substring(component.indexOf('(')+1,component.indexOf(')'))
            def componentKey = component.substring(component.indexOf('('+OPAA)+1,component.length()-1)
			def componentObject = objectFacade.loadObjectBean(componentKey)
			//get "APPLIED_TO" for that component
			def appliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString()).getObjectAttributeValueBeans() as ArrayList
			def appliedToValue
			if(appliedTo.size() &gt; 0){
				appliedTo = appliedTo.toString()
				appliedToValue = appliedTo.substring(appliedTo.indexOf('(')+1,appliedTo.indexOf(')'))
				//log.debug "appliedToValue: " + appliedToValue
			}
            //get "DELETED" for that rate
            def deleted
            def deletedValue
            if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString())){
                deleted = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString()).getObjectAttributeValueBeans().toString()
                log.debug "deleted: " + deleted
                if (deleted){
                    deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
                }
            }
			
			def matNumber
			def matNumberKey
			def matNumberValue
			if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString())){
				matNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).getObjectAttributeValueBeans() as ArrayList
				if(matNumber.size() &gt; 0){
					matNumber = matNumber.toString()
					matNumberKey = matNumber.substring(matNumber.indexOf('(')+1,matNumber.indexOf(')'))
					def matNumberObject = objectFacade.loadObjectBean(DBObjects + matNumberKey)
					matNumberValue = objectFacade.loadObjectAttributeBean(matNumberObject.getId(), properties['iobj.material.name'].toString()).getObjectAttributeValueBeans().toString()
					matNumberValue = matNumberValue.substring(matNumberValue.indexOf('(')+1,matNumberValue.indexOf(')'))
				}
			}
			
			def serialNumber
			def serialNumberValue
			if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString())){
				serialNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()).getObjectAttributeValueBeans() as ArrayList
				if(serialNumber.size() &gt; 0){
					serialNumber = serialNumber.toString()
					serialNumberValue = serialNumber.substring(serialNumber.indexOf('(')+1,serialNumber.indexOf(')'))
				}  
			}				

			if((appliedToValue.toString().equals("BOTH") || appliedToValue.toString().equals("CUSTOMER")) &amp;&amp; !deletedValue.toString().equals("true")){
				//get "TOTAL_AMOUNT_CUSTOMER" for that component
				def totCustomer 
				if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString())){
					totCustomer = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()).getObjectAttributeValueBeans()
				}
				if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
					warnings=true
					issueWarningEmptyQuoteMatCustomer.add(matNumberValue.toString() + (!serialNumber.toString().equals("[]") ? " (" + serialNumberValue.toString() + ")" : " ()"))   
					log.debug issue.key.toString() + " issueWarningEmptyQuoteMatCustomer: " + issueWarningEmptyQuoteMatCustomer
				}
			}
		 }    
	}  

	//OPAA_UNATANTUM_RATES
	if(issue.getCustomFieldValue(unaTantumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(unaTantumRates) != "" &amp;&amp; !issue.getCustomFieldValue(unaTantumRates).toString().equals("")){
		log.debug "Una tantum rates: " + issue.getCustomFieldValue(unaTantumRates)
		/*Ciclare tutti gli oggetti associati al campo*/
		//insight classes &amp; components
		Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
		Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
		def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
		def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

		def umRatesList = issue.getCustomFieldValue(unaTantumRates)

		for(um in umRatesList){
			//extract insight key ang get object
			def umRate=um.toString()
			def umRateKey = umRate.substring(umRate.indexOf('(')+1,umRate.indexOf(')'))
			def umRateObject = objectFacade.loadObjectBean(umRateKey)
			//get "APPLIED_TO" for that rate
			def umAppliedTo = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
			def umAppliedToValue = umAppliedTo.substring(umAppliedTo.indexOf('(')+1,umAppliedTo.indexOf(')'))
            
            //get "DELETED" for that rate
			def deleted
            def deletedValue
            if (objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString())){
                deleted = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString()
                log.debug "deleted: " + deleted
                if (deleted){
                    deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
                }
            }

			def umRateRef
			if(objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){
				umRateRef=objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
			}
			
			def umRateRefKey
			def umRateRefValue
			if(umRateRef){
				umRateRef = umRateRef.toString()
				umRateRefKey = umRateRef.substring(umRateRef.indexOf('(')+1,umRateRef.indexOf(')'))
				def umRateRefObject = objectFacade.loadObjectBean(OPAA + umRateRefKey)
				umRateRefValue = objectFacade.loadObjectAttributeBean(umRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
				umRateRefValue = umRateRefValue.substring(umRateRefValue.indexOf('(')+1,umRateRefValue.indexOf(')'))
			}
			
			if((umAppliedToValue.toString().equals("BOTH") || umAppliedToValue.toString().equals("CUSTOMER")) &amp;&amp; !deletedValue.toString().equals("true")){
				//get "TOTAL_AMOUNT_CUSTOMER" for that component
				def totCustomer
				if(objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString())){
					totCustomer=objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()
				}
				if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
					warnings=true
					issueWarningEmptyQuoteRateCustomer.add(umRateRefValue.toString())
					log.debug issue.key.toString() + " issueWarningEmptyQuoteRateCustomer: " + issueWarningEmptyQuoteRateCustomer
				}
			}
		 }    
	}

	//OPAA_LABOUR_RATES
	if(issue.getCustomFieldValue(labourRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(labourRates) != "" &amp;&amp; !issue.getCustomFieldValue(labourRates).toString().equals("")){
		log.debug "Labour rates: " + issue.getCustomFieldValue(labourRates)
		/*Ciclare tutti gli oggetti associati al campo*/
		//insight classes &amp; components
		Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
		Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
		def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
		def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

		def labourRatesList = issue.getCustomFieldValue(labourRates)

		for(lb in labourRatesList){
			//extract insight key ang get object
			def lbRate=lb.toString()
			def lbRateKey = lbRate.substring(lbRate.indexOf('(')+1,lbRate.indexOf(')'))
			def lbRateObject = objectFacade.loadObjectBean(lbRateKey)
			//get "APPLIED_TO" for that rate
			def lbAppliedTo = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.component.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
			def lbAppliedToValue = lbAppliedTo.substring(lbAppliedTo.indexOf('(')+1,lbAppliedTo.indexOf(')'))
            //get "DELETED" for that rate
			def deleted
            def deletedValue
            if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.component.deleted'].toString())){
                deleted = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.component.deleted'].toString()).getObjectAttributeValueBeans().toString()
                log.debug "deleted: " + deleted
                if (deleted){
                    deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
                }
            }

			def lbRateRef
			if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){
				lbRateRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
			}
			
			def techRef
            if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.technicianRef'].toString())){
                techRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.technicianRef'].toString()).getObjectAttributeValueBeans().toString()
            }
			
            def lbRateRefKey
            def lbRateRefValue
            if(lbRateRef &amp;&amp; lbRateRef.size() &gt; 0){
                lbRateRef = lbRateRef.toString()
                lbRateRefKey = lbRateRef.substring(lbRateRef.indexOf('(')+1,lbRateRef.indexOf(')'))
                def lbRateRefObject = objectFacade.loadObjectBean(OPAA + lbRateRefKey)
                lbRateRefValue = objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
                lbRateRefValue = lbRateRefValue.substring(lbRateRefValue.indexOf('(')+1,lbRateRefValue.indexOf(')'))
            }
			
			def techRefKey
            def techRefValue
            if(techRef){
                techRef = techRef.toString()
                log.debug "techRef: " + techRef
                techRefKey = techRef.substring(techRef.indexOf('(')+1,techRef.indexOf(')'))
                def techRefObject = objectFacade.loadObjectBean(OPAA + techRefKey)
                techRefValue = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()
                if(techRefValue){
                    techRefValue = techRefValue.substring(techRefValue.indexOf('(')+1,techRefValue.indexOf(')'))
                }
            }
			
			if((lbAppliedToValue.toString().equals("BOTH") || lbAppliedToValue.toString().equals("CUSTOMER")) &amp;&amp; !deletedValue.toString().equals("true")){
				//get "TOTAL_AMOUNT_CUSTOMER" for that component
				def totCustomer
				if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString())){
					totCustomer=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()
				}
				if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
					warnings=true
					issueWarningEmptyQuoteRateCustomer.add(lbRateRefValue.toString())
					log.debug issue.key.toString() + " issueWarningEmptyQuoteRateCustomer: " + issueWarningEmptyQuoteRateCustomer
				}
			}
		 }    
	}

	//OPAA_TRAVEL_RATES
	if(issue.getCustomFieldValue(travelRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(travelRates) != "" &amp;&amp; !issue.getCustomFieldValue(travelRates).toString().equals("")){
		log.debug "Travel rates: " + issue.getCustomFieldValue(travelRates)
		/*Ciclare tutti gli oggetti associati al campo*/
		//insight classes &amp; components
		Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
		Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
		def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
		def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

		def travelRatesList = issue.getCustomFieldValue(travelRates)

		for(tr in travelRatesList){
			//extract insight key ang get object
			def trRate=tr.toString()
			def trRateKey = trRate.substring(trRate.indexOf('(')+1,trRate.indexOf(')'))
			def trRateObject = objectFacade.loadObjectBean(trRateKey)
			//get "APPLIED_TO" for that rate
            def trAppliedTo
            def trAppliedToValue
            if(objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iboj.component.appliedTo'].toString())){
                trAppliedTo = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iboj.component.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                trAppliedToValue = trAppliedTo.substring(trAppliedTo.indexOf('(')+1,trAppliedTo.indexOf(')'))
            }
            //get "DELETED" for that rate
			def deleted
            def deletedValue
            if(objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString())){
                deleted = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString()
                log.debug "deleted: " + deleted
                if (deleted){
                    deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
                }
            }

			def trRateRef
			if(objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){
				trRateRef=objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
			}
			
			def trRateRefKey
			def trRateRefValue
			if(trRateRef != null &amp;&amp; trRateRef.size() &gt; 0){
				trRateRef = trRateRef.toString()
				trRateRefKey = trRateRef.substring(trRateRef.indexOf('(')+1,trRateRef.indexOf(')'))
				def trRateRefObject = objectFacade.loadObjectBean(OPAA + trRateRefKey)
				trRateRefValue = objectFacade.loadObjectAttributeBean(trRateRefObject.getId(), properties['iboj.rate.name'].toString()).getObjectAttributeValueBeans().toString()
				trRateRefValue = trRateRefValue.substring(trRateRefValue.indexOf('(')+1,trRateRefValue.indexOf(')'))
			}

			if(trAppliedToValue != null &amp;&amp; !deletedValue.toString().equals("true") &amp;&amp; (trAppliedToValue.toString().equals("BOTH") || trAppliedToValue.toString().equals("CUSTOMER"))){
				//get "TOTAL_AMOUNT_CUSTOMER" for that component
				def totCustomer
				if(objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString())){
					totCustomer=objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()
				}
				if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
					warnings=true
					issueWarningEmptyQuoteRateCustomer.add(trRateRefValue.toString())
					log.debug issue.key.toString() + " issueWarningEmptyQuoteRateCustomer: " + issueWarningEmptyQuoteRateCustomer
				}
			}
		 }    
	}

}

def linkedTickets=new ArrayList()

/*OP-1038: verifica ticket collegati -  e su ciascuno verifica campi obbligatori*/
List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesInIssueLink=true
        linkedTickets.add(issueLink.getSourceObject())
        log.debug "Issue con relatesInIssueLink"
    }
}
List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesOutIssueLink=true
        linkedTickets.add(issueLink.getDestinationObject())
        log.debug "Issue con relatesOutIssueLink"
    }
}

/*Array warnings ed errors per le issue linkate, uno per ogni tipologia di errore o warning*/
def warningsMatLinkedIssues = new ArrayList()
def warningsRateLinkedIssues = new ArrayList()
//def errorsLinkedIssues = new ArrayList()

for(i in linkedTickets){
    issue=i as Issue

    /*Array warnings ed errors per la singola issue linkata, uno per ogni tipologia di errore o warning*/
    def warningEmptyQuoteRateCustomer = new ArrayList()
    def warningEmptyQuoteMatCustomer = new ArrayList() 
    //def error...
    
    if(issue.getCustomFieldValue(lumpSumPrice)!=null &amp;&amp; issue.getCustomFieldValue(lumpSumPrice).toString().equals("Yes")){
        /*Contabilizzazione a corpo*/
        log.debug "Contabilizzazione a corpo"
        //OPAA_LUMP_SUM_RATES
        if(issue.getCustomFieldValue(lumpSumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(lumpSumRates) != "" &amp;&amp; !issue.getCustomFieldValue(lumpSumRates).toString().equals("")){
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def lsRatesList = issue.getCustomFieldValue(lumpSumRates)

            for(ls in lsRatesList){
                //extract insight key ang get object
                def lsRate=ls.toString()
                def lsRateKey = lsRate.substring(lsRate.indexOf('(')+1,lsRate.indexOf(')'))
                def lsRateObject = objectFacade.loadObjectBean(lsRateKey)
                //get "APPLIED_TO" for that rate
                def lsAppliedTo = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                def lsAppliedToValue
                if (lsAppliedTo){
                    lsAppliedToValue = lsAppliedTo.substring(lsAppliedTo.indexOf('(')+1,lsAppliedTo.indexOf(')'))
                }
                
                //get "DELETED" for that rate
                def deleted
                def deletedValue
                if(objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString())){
                    deleted = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString()
                    log.debug "deleted: " + deleted
                    if (deleted){
                        deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
                    }
                }

                def lsRateRef = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()

                def lsRateRefKey
                def lsRateRefValue
                if(lsRateRef.size() &gt; 0){
                    lsRateRef = lsRateRef.toString()
                    lsRateRefKey = lsRateRef.substring(lsRateRef.indexOf('(')+1,lsRateRef.indexOf(')'))
                    def lsRateRefObject = objectFacade.loadObjectBean(OPAA + lsRateRefKey)
                    lsRateRefValue = objectFacade.loadObjectAttributeBean(lsRateRefObject.getId(), properties['iobj.rate.name'].toString()).getObjectAttributeValueBeans().toString()
                    lsRateRefValue = lsRateRefValue.substring(lsRateRefValue.indexOf('(')+1,lsRateRefValue.indexOf(')'))
                }

                if((lsAppliedToValue.toString().equals("BOTH") || lsAppliedToValue.toString().equals("CUSTOMER")) &amp;&amp; !deletedValue.toString().equals("true")){
                    //get "TOTAL_AMOUNT_CUSTOMER" for that component
                    def totCustomer
                    if(objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString())){
                    	totCustomer = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()
                    }
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true    
                        warningEmptyQuoteRateCustomer.add(lsRateRefValue.toString())
                        log.debug issue.key.toString() + " warningEmptyQuoteRateCustomer: " + warningEmptyQuoteRateCustomer
                    }
                }
            }    
        }

    }else{
        /*Contabilizzazione non a corpo*/
        log.debug "Contabilizzazione NON a corpo"

        //OPAA_REPLACED_MATERIALS
        if(issue.getCustomFieldValue(repMaterials)!=null &amp;&amp; (String)issue.getCustomFieldValue(repMaterials) != "" &amp;&amp; !issue.getCustomFieldValue(repMaterials).toString().equals("")){
            log.debug "Materiali: " + issue.getCustomFieldValue(repMaterials)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def repMatList = issue.getCustomFieldValue(repMaterials)

            for(mat in repMatList){
                //extract insight key ang get object
                def component=mat.toString()
                //def componentKey = component.substring(component.indexOf('(')+1,component.indexOf(')'))
                def componentKey = component.substring(component.indexOf('('+OPAA)+1,component.length()-1)
                def componentObject = objectFacade.loadObjectBean(componentKey)
                //get "APPLIED_TO" for that component
                def appliedTo
                def appliedToValue
                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString())){
                    appliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString()).getObjectAttributeValueBeans() as ArrayList
                    if(appliedTo.size() &gt; 0){
                        appliedTo = appliedTo.toString()
                        appliedToValue = appliedTo.substring(appliedTo.indexOf('(')+1,appliedTo.indexOf(')'))
                        log.debug "appliedToValue: " + appliedToValue
                    }
                }
                //get "DELETED" for that rate
                def deleted
                def deletedValue
                if(objectFacade.loadObjectAttributeBean(component.getId(), properties['iobj.component.deleted'].toString())){
                    deleted = objectFacade.loadObjectAttributeBean(component.getId(), properties['iobj.component.deleted'].toString()).getObjectAttributeValueBeans().toString()
                    log.debug "deleted: " + deleted
                    if (deleted){
                        deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
                    }
                }
                
                def matNumber
                def matNumberKey
                def matNumberValue
                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString())){
                    matNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).getObjectAttributeValueBeans() as ArrayList
                    if(matNumber.size() &gt; 0){
                        matNumber = matNumber.toString()
                        matNumberKey = matNumber.substring(matNumber.indexOf('(')+1,matNumber.indexOf(')'))
                        def matNumberObject = objectFacade.loadObjectBean(DBObjects + matNumberKey)
                        matNumberValue = objectFacade.loadObjectAttributeBean(matNumberObject.getId(), properties['iobj.material.name'].toString()).getObjectAttributeValueBeans().toString()
                        matNumberValue = matNumberValue.substring(matNumberValue.indexOf('(')+1,matNumberValue.indexOf(')'))
                    }
                }

                def serialNumber
                def serialNumberValue
                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString())){
                    serialNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()).getObjectAttributeValueBeans() as ArrayList
                    if(serialNumber.size() &gt; 0){
                        serialNumber = serialNumber.toString()
                        serialNumberValue = serialNumber.substring(serialNumber.indexOf('(')+1,serialNumber.indexOf(')'))
                    }               
                }

                if(appliedToValue &amp;&amp; !deletedValue.toString().equals("true") &amp;&amp; (appliedToValue.toString().equals("BOTH") || appliedToValue.toString().equals("CUSTOMER"))){
                    //get "TOTAL_AMOUNT_CUSTOMER" for that component
                    log.debug "AppliedTo verificato =&gt; " + objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString())
                    def totCustomer 
                    if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString())){
                    	totCustomer = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()).getObjectAttributeValueBeans()
                    }
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteMatCustomer.add(matNumberValue.toString() + (!serialNumber.toString().equals("[]") ? " (" + serialNumberValue.toString() + ")" : " ()"))
                        log.debug issue.key.toString() + " warningEmptyQuoteMatCustomer: "+ warningEmptyQuoteMatCustomer
                    }
                }
            }    
        }  

        //OPAA_UNATANTUM_RATES
        if(issue.getCustomFieldValue(unaTantumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(unaTantumRates) != "" &amp;&amp; !issue.getCustomFieldValue(unaTantumRates).toString().equals("")){
            log.debug "Una tantum rates: " + issue.getCustomFieldValue(unaTantumRates)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def umRatesList = issue.getCustomFieldValue(unaTantumRates)

            for(um in umRatesList){
                //extract insight key ang get object
                def umRate=um.toString()
                def umRateKey = umRate.substring(umRate.indexOf('(')+1,umRate.indexOf(')'))
                def umRateObject = objectFacade.loadObjectBean(umRateKey)
                //get "APPLIED_TO" for that rate
                def umAppliedTo = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                def umAppliedToValue = umAppliedTo.substring(umAppliedTo.indexOf('(')+1,umAppliedTo.indexOf(')'))
                
                //get "DELETED" for that rate
                def deleted
                def deletedValue
                if(objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString())){
                    deleted = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString()
                    log.debug "deleted: " + deleted
                    if (deleted){
                        deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
                    }
                }

                def umRateRef
                if(objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){
                    umRateRef=objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
                }

                def umRateRefKey
                def umRateRefValue
                if(umRateRef){
                    umRateRef = umRateRef.toString()
                    umRateRefKey = umRateRef.substring(umRateRef.indexOf('(')+1,umRateRef.indexOf(')'))
                    def umRateRefObject = objectFacade.loadObjectBean(OPAA + umRateRefKey)
                    umRateRefValue = objectFacade.loadObjectAttributeBean(umRateRefObject.getId(), "Name").getObjectAttributeValueBeans().toString()
                    umRateRefValue = umRateRefValue.substring(umRateRefValue.indexOf('(')+1,umRateRefValue.indexOf(')'))
                }

                if((umAppliedToValue.toString().equals("BOTH") || umAppliedToValue.toString().equals("CUSTOMER")) &amp;&amp; !deletedValue.toString().equals("true")){
                    //get "TOTAL_AMOUNT_CUSTOMER" for that component
                    def totCustomer 
                    if(objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString())){
                        totCustomer=objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()
                    }
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateCustomer.add(umRateRefValue.toString())
                        log.debug issue.key.toString() + " warningEmptyQuoteRateCustomer: " + warningEmptyQuoteRateCustomer
                    }
                }
            }    
        }

        //OPAA_LABOUR_RATES
        if(issue.getCustomFieldValue(labourRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(labourRates) != "" &amp;&amp; !issue.getCustomFieldValue(labourRates).toString().equals("")){
            log.debug "Labour rates: " + issue.getCustomFieldValue(labourRates)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def labourRatesList = issue.getCustomFieldValue(labourRates)

            for(lb in labourRatesList){
                //extract insight key ang get object
                def lbRate=lb.toString()
                def lbRateKey = lbRate.substring(lbRate.indexOf('(')+1,lbRate.indexOf(')'))
                def lbRateObject = objectFacade.loadObjectBean(lbRateKey)
                //get "APPLIED_TO" for that rate
                def lbAppliedTo = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                def lbAppliedToValue = lbAppliedTo.substring(lbAppliedTo.indexOf('(')+1,lbAppliedTo.indexOf(')'))

                //get "DELETED" for that rate
                def deleted
                def deletedValue
                if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString())){
                    deleted = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString()
                    log.debug "deleted: " + deleted
                    if (deleted){
                        deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
                    }
                }
                
                def lbRateRef = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()

                def techRef
                if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.technicianRef'].toString())){
                    techRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.technicianRef'].toString()).getObjectAttributeValueBeans().toString()
                }

                def lbRateRefKey
                def lbRateRefValue
                if(lbRateRef.size() &gt; 0){
                    lbRateRef = lbRateRef.toString()
                    lbRateRefKey = lbRateRef.substring(lbRateRef.indexOf('(')+1,lbRateRef.indexOf(')'))
                    def lbRateRefObject = objectFacade.loadObjectBean(OPAA + lbRateRefKey)
                    lbRateRefValue = objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.name'].toString()).getObjectAttributeValueBeans().toString()
                    lbRateRefValue = lbRateRefValue.substring(lbRateRefValue.indexOf('(')+1,lbRateRefValue.indexOf(')'))
                }

                def techRefKey
                def techRefValue
                if(techRef){
                    techRef = techRef.toString()
                    log.debug "techRef: " + techRef
                    techRefKey = techRef.substring(techRef.indexOf('(')+1,techRef.indexOf(')'))
                    def techRefObject = objectFacade.loadObjectBean(OPAA + techRefKey)
                    techRefValue = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()
                    techRefValue = lbRateRefValue.substring(techRefValue.indexOf('(')+1,techRefValue.indexOf(')'))
                }

                if((lbAppliedToValue.toString().equals("BOTH") || lbAppliedToValue.toString().equals("CUSTOMER")) &amp;&amp; !deletedValue.toString().equals("true")){
                    //get "TOTAL_AMOUNT_CUSTOMER" for that component
                    def totCustomer 
                    if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString())){
                        totCustomer = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()
                    }
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateCustomer.add(lbRateRefValue.toString() + " (" + techRefValue.toString() + ")")
                        log.debug issue.key.toString() + " warningEmptyQuoteRateCustomer: " + warningEmptyQuoteRateCustomer
                    }
                }
            }    
        }

        //OPAA_TRAVEL_RATES
        if(issue.getCustomFieldValue(travelRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(travelRates) != "" &amp;&amp; !issue.getCustomFieldValue(travelRates).toString().equals("")){
            log.debug "Travel rates: " + issue.getCustomFieldValue(travelRates)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def travelRatesList = issue.getCustomFieldValue(travelRates)

            for(tr in travelRatesList){
                //extract insight key ang get object
                def trRate=tr.toString()
                def trRateKey = trRate.substring(trRate.indexOf('(')+1,trRate.indexOf(')'))
                def trRateObject = objectFacade.loadObjectBean(trRateKey)
                //get "APPLIED_TO" for that rate
                def trAppliedTo = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                def trAppliedToValue = trAppliedTo.substring(trAppliedTo.indexOf('(')+1,trAppliedTo.indexOf(')'))

                //get "DELETED" for that rate
                def deleted
                def deletedValue
                if(objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString())){
                    deleted = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString()
                    log.debug "deleted: " + deleted
                    if (deleted){
                        deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
                    }
                }
                
                def trRateRef = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()

                def trRateRefKey
                def trRateRefValue
                if(trRateRef.size() &gt; 0){
                    trRateRef = trRateRef.toString()
                    trRateRefKey = trRateRef.substring(trRateRef.indexOf('(')+1,trRateRef.indexOf(')'))
                    def trRateRefObject = objectFacade.loadObjectBean(OPAA + trRateRefKey)
                    trRateRefValue = objectFacade.loadObjectAttributeBean(trRateRefObject.getId(), properties['iobj.rate.name'].toString()).getObjectAttributeValueBeans().toString()
                    trRateRefValue = trRateRefValue.substring(trRateRefValue.indexOf('(')+1,trRateRefValue.indexOf(')'))
                }

                if((trAppliedToValue.toString().equals("BOTH") || trAppliedToValue.toString().equals("CUSTOMER")) &amp;&amp; !deletedValue.toString().equals("true")){
                    //get "TOTAL_AMOUNT_CUSTOMER" for that component
                    def totCustomer
                    if(objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString())){
                        totCustomer=objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()
                    }
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateCustomer.add(trRateRefValue.toString())
                        log.debug issue.key.toString() + " warningEmptyQuoteRateCustomer: " + warningEmptyQuoteRateCustomer
                    }
                }
            }    
        }

    }
    
    /*Verifico la presenza di errori e warning sulla issue corrente e, se presenti, li aggiungo agli array degli errori e warning delle issue linkate*/
    if(warningEmptyQuoteMatCustomer.size()&gt;0){
        def objList = new ArrayList()
        objList.add(issue)
        objList.add(warningEmptyQuoteMatCustomer)
        warningsMatLinkedIssues.add(objList)
    }
    
    if(warningEmptyQuoteRateCustomer.size()&gt;0){
        def objList = new ArrayList()
        objList.add(issue)
        objList.add(warningEmptyQuoteRateCustomer)
        warningsRateLinkedIssues.add(objList)
    }
    
    //if(errors...)
    
}

log.debug "warningsMatLinkedIssues: " + warningsMatLinkedIssues
log.debug "warningsRateLinkedIssues: " + warningsRateLinkedIssues

def output = new ArrayList()

if (!errors &amp;&amp; !warnings){
	return true
}else{
	if(!errors &amp;&amp; warnings){
		//Se ci sono solo warnings verifico se l'utente ha già dichiarato di voler proseguire comunque
		// - transition field "OPAA_CHECK_AND_CONFIRM"="Yes"
		// - in caso contrario invio i warning a FE

		log.debug "transitionCheck: " + issue.getCustomFieldValue(transitionCheck)
		//log.debug "result: " + issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")
		if(transitionCheckValue.toString().equals("Yes")){
			log.debug "return true - transitionCheck = Yes"
			return true
		}else{
			def wList = new ArrayList()

			if(issueWarningEmptyQuoteRateCustomer.size() &gt; 0){
				def wListConfirmEmptyRate = new ArrayList()
				wListConfirmEmptyRate.add("W")
				wListConfirmEmptyRate.add("CUSTOMER_CONFIRM_EMPTY_RATES")
				wListConfirmEmptyRate.add(null)
				wListConfirmEmptyRate.add(issueWarningEmptyQuoteRateCustomer)

				wList.add(wListConfirmEmptyRate)
			}

			if(issueWarningEmptyQuoteMatCustomer.size() &gt; 0){
				def wListConfirmEmptyMatQuote = new ArrayList()
				wListConfirmEmptyMatQuote.add("W")
				wListConfirmEmptyMatQuote.add("CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE")
				wListConfirmEmptyMatQuote.add(null)
				wListConfirmEmptyMatQuote.add(issueWarningEmptyQuoteMatCustomer)

				wList.add(wListConfirmEmptyMatQuote)
			}
			
			if(warningsMatLinkedIssues.size() &gt; 0){
                for(obj in warningsMatLinkedIssues){
                    def wListConfirmEmptyMatQuote = new ArrayList()
                    wListConfirmEmptyMatQuote.add("W")
                    wListConfirmEmptyMatQuote.add("CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE")
                    wListConfirmEmptyMatQuote.add(obj[0])
                    wListConfirmEmptyMatQuote.add(obj[1])

                    wList.add(wListConfirmEmptyMatQuote)
                }
            }
            
            if(warningsRateLinkedIssues.size() &gt; 0){
                for(obj in warningsRateLinkedIssues){
                    def wListConfirmEmptyRate = new ArrayList()
                    wListConfirmEmptyRate.add("W")
                    wListConfirmEmptyRate.add("CUSTOMER_CONFIRM_EMPTY_RATES")
                    wListConfirmEmptyRate.add(obj[0])
                    wListConfirmEmptyRate.add(obj[1])

                    wList.add(wListConfirmEmptyRate)
                }
            }

			output.add(wList)
			throw new InvalidInputException("W", output.toString())   
		}

	}
	if(errors &amp;&amp; !warnings){
		def eList = new ArrayList()

		output.add(eList)
		throw new InvalidInputException("E", output.toString())   
	}
	if(errors &amp;&amp; warnings){
		def eList = new ArrayList()
		def wList = new ArrayList()

		if(issueWarningEmptyQuoteRateCustomer.size() &gt; 0){
			def wListConfirmEmptyRate = new ArrayList()
			wListConfirmEmptyRate.add("W")
			wListConfirmEmptyRate.add("CUSTOMER_CONFIRM_EMPTY_RATES")
			wListConfirmEmptyRate.add(null)
			wListConfirmEmptyRate.add(issueWarningEmptyQuoteRateCustomer)

			wList.add(wListConfirmEmptyRate)
		}

		if(issueWarningEmptyQuoteMatCustomer.size() &gt; 0){
			def wListConfirmEmptyMatQuote = new ArrayList()
			wListConfirmEmptyMatQuote.add("W")
			wListConfirmEmptyMatQuote.add("CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE")
			wListConfirmEmptyMatQuote.add(null)
			wListConfirmEmptyMatQuote.add(issueWarningEmptyQuoteMatCustomer)

			wList.add(wListConfirmEmptyMatQuote)
		}
		
		if(warningsMatLinkedIssues.size() &gt; 0){
			for(obj in warningsMatLinkedIssues){
				def wListConfirmEmptyMatQuote = new ArrayList()
				wListConfirmEmptyMatQuote.add("W")
				wListConfirmEmptyMatQuote.add("CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE")
				wListConfirmEmptyMatQuote.add(obj[0])
				wListConfirmEmptyMatQuote.add(obj[1])

				wList.add(wListConfirmEmptyMatQuote)
			}
		}
		
		if(warningsRateLinkedIssues.size() &gt; 0){
			for(obj in warningsRateLinkedIssues){
				def wListConfirmEmptyRate = new ArrayList()
				wListConfirmEmptyRate.add("W")
				wListConfirmEmptyRate.add("CUSTOMER_CONFIRM_EMPTY_RATES")
				wListConfirmEmptyRate.add(obj[0])
				wListConfirmEmptyRate.add(obj[1])

				wList.add(wListConfirmEmptyRate)
			}
		}

		output.add(eList)
		output.add(wList)
		throw new InvalidInputException("WE", output.toString())  
	}
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_NOTES">OP: REST API: OP generazione ODV su SAP</arg>
              <arg name="FIELD_INLINE_SCRIPT">import com.opensymphony.workflow.WorkflowException;
import com.opensymphony.workflow.InvalidInputException
import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import org.apache.log4j.Category
import groovyx.net.http.HTTPBuilder
import com.atlassian.jira.issue.link.IssueLink
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();


def requestMethod = "POST"

def relatesInIssueLink=false
def relatesOutIssueLink=false
def linkedTickets=new ArrayList()

List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            relatesInIssueLink=true
            linkedTickets.add(issueLink.getSourceObject().toString())
            log.debug "Issue con relatesInIssueLink"
        }
    }
    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            relatesOutIssueLink=true
            linkedTickets.add(issueLink.getDestinationObject().toString())
            log.debug "Issue con relatesOutIssueLink"
        }
    }

/* REST API per Invio Notifica Email ONSITE_REPORT */
def body_req

if(relatesInIssueLink || relatesOutIssueLink){
    body_req = [
        "issueKey": issue.key,
        "linkedTickets": linkedTickets
    ]
}else{
    body_req = [
        "issueKey": issue.key
    ]
}

def baseURL = "http://" + properties['api.env'].toString() + "/op/rest/jira/AA/sales/order/create"
log.debug baseURL
URL url = new URL(baseURL)
HttpURLConnection connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.outputStream
connection.outputStream.withWriter("UTF-8") { new StreamingJsonBuilder(it, body_req) }
log.debug connection.outputStream
connection.connect();

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()
    log.debug "ErrorStream: " + connection.getErrorStream().toString()
    log.debug "getHeaderFields(): " + connection.getHeaderFields()
    def outputMsg = ((HttpURLConnection)connection).errorStream.text
    log.debug "((HttpURLConnection)connection).errorStream.text: " + outputMsg
    
    def jsonSlurper = new JsonSlurper()
    def json_object = jsonSlurper.parseText(outputMsg)
    assert json_object instanceof Map  
    log.debug "message: " +  json_object.message
    
    eListErrors.add("E")
    eListErrors.add("OP-SAP-ODV")
    errorMsgs.add(connection.getResponseCode() + " " + json_object.message)
    eListErrors.add(errorMsgs)
    eList.add(eListErrors)

    output.add(eList)
    throw new InvalidInputException("E", output.toString())
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_ACTION">181 Tkt Chiuso</arg>
                  <arg name="FIELD_NOTES">OP: Close tkt if ODV and ODA have been created</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.FasttrackTransition</arg>
                  <arg name="FIELD_CONDITION">cfValues['OP_PURCHASE_ORDER'] != null &amp;&amp; cfValues['OP_PURCHASE_ORDER_DATE'] != null &amp;&amp; cfValues['OP_PURCHASE_ORDER_TOTAL'] != null|||</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_TRANSITION_OPTIONS" />
                  <arg name="FIELD_ADDITIONAL_SCRIPT">`!`</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="171" name="ODA" view="fieldscreen">
          <meta name="opsbar-sequence">50</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19908</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">issue.issueType.name == 'Maintenance Ticket'|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
              <condition type="class">
                <arg name="FIELD_NOTES">OP: Check OP_PURCHASE_ORDER_DATE - If not null - transition has already been executed</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
cfValues[properties['cf.purchaseOrderDate']] == null &amp;&amp; cfValues[properties['cf.wfPurchaseOrderToS']] == null|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
              <condition type="class">
                <arg name="FIELD_NOTES">OP: Check OPAA_AUTOMATICALLY_CLOSED - if Yes don't allow transition</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
cfValues[properties['cf.automaticallyClosed']] == null || cfValues[properties['cf.automaticallyClosed']]?.value == 'No'|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">ЭО{Ы]Ы‡5ЧfЬ}э6Сп:ЯMwбНiэхs~w</arg>
              <arg name="FIELD_NOTES">OP: Check Required Fields - solo errors, no warnings</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper
import groovy.json.JsonBuilder
import groovy.json.StreamingJsonBuilder

import com.atlassian.jira.issue.CustomFieldManager
import com.atlassian.jira.issue.fields.CustomField
import com.atlassian.jira.issue.IssueManager
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.issue.link.IssueLink

import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService

import org.apache.log4j.Category
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

Issue issue = issue
//Per test da console
//IssueManager issueManager = ComponentAccessor.getIssueManager();
//Issue issue = issueManager.getIssueByKeyIgnoreCase("AAS-2202")

def errors = false
def warnings = false
def relatesInIssueLink=false
def relatesOutIssueLink=false
def wListConfirmEmptyMatQuoteLinked = new ArrayList()
def wListConfirmEmptyRateQuoteLinked = new ArrayList()

def lumpSumPrice =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumPrice'].toString())[0]

/*Campi con dati obbligatori per ticket non a corpo*/
def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.replacedMaterials'].toString())[0]
def unaTantumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.unatantumRates'].toString())[0]
def labourRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.labourRates'].toString())[0]
def travelRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.travelRates'].toString())[0]

/*Campi con dati obbligatori per ticket a corpo*/
def lumpSumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumRates'].toString())[0]

/*Conferma utente su warnings*/
def transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]

/*Insight Schema IDs*/
def DBObjects = properties['ischema.dbo'].toString() + "-"
def OPAA = properties['ischema.aa'].toString() + "-"

/*Array warnings ed errors per la issue principale, uno per ogni tipologia di errore o warning*/
def issueWarningEmptyQuoteMatSupplier = new ArrayList()
def issueWarningEmptyQuoteRateSupplier = new ArrayList()
//def issueError...

/*Verifica campi su ticket oggetto della transazione*/
if(issue.getCustomFieldValue(lumpSumPrice)!=null &amp;&amp; issue.getCustomFieldValue(lumpSumPrice).toString().equals("Yes")){
    /*Contabilizzazione a corpo*/
    log.debug "Contabilizzazione a corpo"
    //OPAA_LUMP_SUM_RATES
    if(issue.getCustomFieldValue(lumpSumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(lumpSumRates) != "" &amp;&amp; !issue.getCustomFieldValue(lumpSumRates).toString().equals("")){
        /*Ciclare tutti gli oggetti associati al campo*/
        //insight classes &amp; components
        Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
        Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
        def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
        def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

        def lsRatesList = issue.getCustomFieldValue(lumpSumRates)

        for(ls in lsRatesList){
            //extract insight key ang get object
            def lsRate=ls.toString()
            log.debug lsRate
            def lsRateKey = lsRate.substring(lsRate.indexOf('(')+1,lsRate.indexOf(')'))
            def lsRateObject = objectFacade.loadObjectBean(lsRateKey)
            //get "DELETED" for that that rate
			def lsDel = objectFacade.loadObjectAttributeBean(lsRate.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(lsRate.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : ""
	        def lsDelValue = lsDel != "" ? lsDel.substring(lsDel.indexOf('(')+1,lsDel.indexOf(')')) : ""

            //get "APPLIED_TO" for that rate
            def lsAppliedTo = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
            def lsAppliedToValue
            if (lsAppliedTo){
                lsAppliedToValue = lsAppliedTo.substring(lsAppliedTo.indexOf('(')+1,lsAppliedTo.indexOf(')'))
            }

            def lsRateRef = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()

            def lsRateRefKey
            def lsRateRefValue
            if(lsRateRef.size() &gt; 0){
                lsRateRef = lsRateRef.toString()
                lsRateRefKey = lsRateRef.substring(lsRateRef.indexOf('(')+1,lsRateRef.indexOf(')'))
                def lsRateRefObject = objectFacade.loadObjectBean(OPAA + lsRateRefKey)
                lsRateRefValue = objectFacade.loadObjectAttributeBean(lsRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
                lsRateRefValue = lsRateRefValue.substring(lsRateRefValue.indexOf('(')+1,lsRateRefValue.indexOf(')'))
            }

            if((lsAppliedToValue.toString().equals("BOTH") || lsAppliedToValue.toString().equals("SUPPLIER")) &amp;&amp; !lsDelValue.equals("true")){
                //get "TOTAL_AMOUNT_SUPPLIER" for that component
                def totSupplier
				if(objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString())){
					totSupplier = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()
				}
                if(!totSupplier || totSupplier[0].getValue().toString().equals("0.0")){
                    warnings=true
                    issueWarningEmptyQuoteRateSupplier.add(lsRateRefValue.toString())
                    log.debug issue.key.toString() + " issueWarningEmptyQuoteRateSupplier: " + issueWarningEmptyQuoteRateSupplier
                }
            }
        }    
    }

}else{
    /*Contabilizzazione non a corpo*/
    log.debug "Contabilizzazione NON a corpo"

    //OPAA_REPLACED_MATERIALS
    if(issue.getCustomFieldValue(repMaterials)!=null &amp;&amp; (String)issue.getCustomFieldValue(repMaterials) != "" &amp;&amp; !issue.getCustomFieldValue(repMaterials).toString().equals("")){
        //log.debug "Materiali: " + issue.getCustomFieldValue(repMaterials)
        /*Ciclare tutti gli oggetti associati al campo*/
        //insight classes &amp; components
        Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
        Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
        def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
        def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

        def repMatList = issue.getCustomFieldValue(repMaterials)

        for(mat in repMatList){
            //extract insight key ang get object
            def component=mat.toString()
            def componentKey = component.substring(component.indexOf('('+OPAA)+1,component.length()-1)
            def componentObject = objectFacade.loadObjectBean(componentKey)
        	//get "DELETED" for that component
			def matDel = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : ""
	        def matDelValue = matDel != "" ? matDel.substring(matDel.indexOf('(')+1,matDel.indexOf(')')) : ""

            
            //get "APPLIED_TO" for that component
            def appliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans() as ArrayList
            def appliedToValue
            if(appliedTo.size() &gt; 0){
                appliedTo = appliedTo.toString()
                appliedToValue = appliedTo.substring(appliedTo.indexOf('(')+1,appliedTo.indexOf(')'))
                //log.debug "appliedToValue: " + appliedToValue
            }

            def matNumber
            def matNumberKey
            def matNumberValue
            if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString())){
                matNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).getObjectAttributeValueBeans() as ArrayList
                if(matNumber.size() &gt; 0){
                    matNumber = matNumber.toString()
                    matNumberKey = matNumber.substring(matNumber.indexOf('(')+1,matNumber.indexOf(')'))
                    def matNumberObject = objectFacade.loadObjectBean(DBObjects + matNumberKey)
                    matNumberValue = objectFacade.loadObjectAttributeBean(matNumberObject.getId(), properties['iobj.material.name'].toString()).getObjectAttributeValueBeans().toString()
                    matNumberValue = matNumberValue.substring(matNumberValue.indexOf('(')+1,matNumberValue.indexOf(')'))
                }
            }
            
            def serialNumber
            def serialNumberValue
            if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString())){
                serialNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()).getObjectAttributeValueBeans() as ArrayList
                if(serialNumber.size() &gt; 0){
                    serialNumber = serialNumber.toString()
                    serialNumberValue = serialNumber.substring(serialNumber.indexOf('(')+1,serialNumber.indexOf(')'))
                }               
            }
            
            if((appliedToValue.toString().equals("BOTH") || appliedToValue.toString().equals("SUPPLIER")) &amp;&amp; !matDelValue.equals("true")){
                //get "TOTAL_AMOUNT_SUPPLIER" for that component
                def totSupplier
                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString())){
                    totSupplier = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString()).getObjectAttributeValueBeans()
                }
                if(!totSupplier || totSupplier[0].getValue().toString().equals("0.0")){
                    warnings=true
                    issueWarningEmptyQuoteMatSupplier.add(matNumberValue.toString() + (!serialNumber.toString().equals("[]") ? " (" + serialNumberValue.toString() + ")" : " ()"))
                    log.debug issue.key.toString() + " issueWarningEmptyQuoteMatSupplier: " + issueWarningEmptyQuoteMatSupplier
                }
            }
        }    
    }  

    //OPAA_UNATANTUM_RATES
    if(issue.getCustomFieldValue(unaTantumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(unaTantumRates) != "" &amp;&amp; !issue.getCustomFieldValue(unaTantumRates).toString().equals("")){
        log.debug "Una tantum rates: " + issue.getCustomFieldValue(unaTantumRates)
        /*Ciclare tutti gli oggetti associati al campo*/
        //insight classes &amp; components
        Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
        Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
        def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
        def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

        def umRatesList = issue.getCustomFieldValue(unaTantumRates)

        for(um in umRatesList){
            //extract insight key ang get object
            def umRate=um.toString()
            def umRateKey = umRate.substring(umRate.indexOf('(')+1,umRate.indexOf(')'))
            def umRateObject = objectFacade.loadObjectBean(umRateKey)
            
            def umDel = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : ""
            def umDelValue = umDel != "" ? umDel.substring(umDel.indexOf('(')+1,umDel.indexOf(')')) : ""
            
            //get "APPLIED_TO" for that rate
            def umAppliedTo = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
            def umAppliedToValue = umAppliedTo.substring(umAppliedTo.indexOf('(')+1,umAppliedTo.indexOf(')'))

            def umRateRef
            if(objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){
                umRateRef=objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
            }

            def umRateRefKey
            def umRateRefValue
            if(umRateRef){
                umRateRef = umRateRef.toString()
                umRateRefKey = umRateRef.substring(umRateRef.indexOf('(')+1,umRateRef.indexOf(')'))
                def umRateRefObject = objectFacade.loadObjectBean(OPAA + umRateRefKey)
                umRateRefValue = objectFacade.loadObjectAttributeBean(umRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
                umRateRefValue = umRateRefValue.substring(umRateRefValue.indexOf('(')+1,umRateRefValue.indexOf(')'))
            }

            if((umAppliedToValue.toString().equals("BOTH") || umAppliedToValue.toString().equals("SUPPLIER")) &amp;&amp; !umDelValue.equals("true")){
                //get "TOTAL_AMOUNT_SUPPLIER" for that component
                def totSupplier
                if(objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString())){
                    totSupplier = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()
                }
                if(!totSupplier || totSupplier[0].getValue().toString().equals("0.0")){
                    warnings=true
                    issueWarningEmptyQuoteRateSupplier.add(umRateRefValue.toString())
                    log.debug issue.key.toString() + " issueWarningEmptyQuoteRateSupplier: " + issueWarningEmptyQuoteRateSupplier
                }
            }
        }    
    }

    //OPAA_LABOUR_RATES
    if(issue.getCustomFieldValue(labourRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(labourRates) != "" &amp;&amp; !issue.getCustomFieldValue(labourRates).toString().equals("")){
        log.debug "Labour rates: " + issue.getCustomFieldValue(labourRates)
        /*Ciclare tutti gli oggetti associati al campo*/
        //insight classes &amp; components
        Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
        Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
        def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
        def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

        def labourRatesList = issue.getCustomFieldValue(labourRates)

        for(lb in labourRatesList){
            //extract insight key ang get object
            def lbRate=lb.toString()
            def lbRateKey = lbRate.substring(lbRate.indexOf('(')+1,lbRate.indexOf(')'))
            def lbRateObject = objectFacade.loadObjectBean(lbRateKey)
            //get "DELETED" for that rate
            def lbDel = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : ""
            def lbDelValue = lbDel != "" ? lbDel.substring(lbDel.indexOf('(')+1,lbDel.indexOf(')')) : ""
            
            //get "APPLIED_TO" for that rate
            def lbAppliedTo = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
            def lbAppliedToValue = lbAppliedTo.substring(lbAppliedTo.indexOf('(')+1,lbAppliedTo.indexOf(')'))

            def lbRateRef
			if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){
				lbRateRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
			}

			def techRef
            if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.technicianRef'].toString())){
                techRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.technicianRef'].toString()).getObjectAttributeValueBeans().toString()
            }
			
            def lbRateRefKey
            def lbRateRefValue
            if(lbRateRef.size() &gt; 0){
                lbRateRef = lbRateRef.toString()
                lbRateRefKey = lbRateRef.substring(lbRateRef.indexOf('(')+1,lbRateRef.indexOf(')'))
                def lbRateRefObject = objectFacade.loadObjectBean(OPAA + lbRateRefKey)
                lbRateRefValue = objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
                lbRateRefValue = lbRateRefValue.substring(lbRateRefValue.indexOf('(')+1,lbRateRefValue.indexOf(')'))
            }
			
			def techRefKey
            def techRefValue
            if(techRef){
                techRef = techRef.toString()
                log.debug "techRef: " + techRef
                techRefKey = techRef.substring(techRef.indexOf('(')+1,techRef.indexOf(')'))
                def techRefObject = objectFacade.loadObjectBean(OPAA + techRefKey)
                techRefValue = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()
                techRefValue = lbRateRefValue.substring(techRefValue.indexOf('(')+1,techRefValue.indexOf(')'))
            }

            if((lbAppliedToValue.toString().equals("BOTH") || lbAppliedToValue.toString().equals("SUPPLIER")) &amp;&amp; !lbDelValue.equals("true")){
                //get "TOTAL_AMOUNT_SUPPLIER" for that component
                def totSupplier
                if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString())){
                    totSupplier = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()
                }
                if(!totSupplier || totSupplier[0].getValue().toString().equals("0.0")){
                    warnings=true
                    issueWarningEmptyQuoteRateSupplier.add(lbRateRefValue.toString() + " (" + techRefValue.toString() + ")")
                    log.debug issue.key.toString() + " issueWarningEmptyQuoteRateSupplier: " + issueWarningEmptyQuoteRateSupplier
                }
            }
        }    
    }

    //OPAA_TRAVEL_RATES
    if(issue.getCustomFieldValue(travelRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(travelRates) != "" &amp;&amp; !issue.getCustomFieldValue(travelRates).toString().equals("")){
        log.debug "Travel rates: " + issue.getCustomFieldValue(travelRates)
        /*Ciclare tutti gli oggetti associati al campo*/
        //insight classes &amp; components
        Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
        Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
        def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
        def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

        def travelRatesList = issue.getCustomFieldValue(travelRates)

        for(tr in travelRatesList){
            //extract insight key ang get object
            def trRate=tr.toString()
            def trRateKey = trRate.substring(trRate.indexOf('(')+1,trRate.indexOf(')'))
            def trRateObject = objectFacade.loadObjectBean(trRateKey)
            
            def trDel = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : ""
            def trDelValue = trDel != "" ? trDel.substring(trDel.indexOf('(')+1,trDel.indexOf(')')) : ""
            
            //get "APPLIED_TO" for that rate
            def trAppliedTo = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
            def trAppliedToValue = trAppliedTo.substring(trAppliedTo.indexOf('(')+1,trAppliedTo.indexOf(')'))

            def trRateRef
			if(objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){
				trRateRef=objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
			}

            def trRateRefKey
            def trRateRefValue
            if(trRateRef.size() &gt; 0){
                trRateRef = trRateRef.toString()
                trRateRefKey = trRateRef.substring(trRateRef.indexOf('(')+1,trRateRef.indexOf(')'))
                def trRateRefObject = objectFacade.loadObjectBean(OPAA + trRateRefKey)
                trRateRefValue = objectFacade.loadObjectAttributeBean(trRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
                trRateRefValue = trRateRefValue.substring(trRateRefValue.indexOf('(')+1,trRateRefValue.indexOf(')'))
            }

            if((trAppliedToValue.toString().equals("BOTH") || trAppliedToValue.toString().equals("SUPPLIER")) &amp;&amp; !trDelValue.equals("true")){
                //get "TOTAL_AMOUNT_SUPPLIER" for that component
                def totSupplier
                if(objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString())){
                    totSupplier=objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()
                }
                if(!totSupplier || totSupplier[0].getValue().toString().equals("0.0")){
                    warnings=true
                    issueWarningEmptyQuoteRateSupplier.add(trRateRefValue.toString())
                    log.debug issue.key.toString() + " issueWarningEmptyQuoteRateSupplier: " + issueWarningEmptyQuoteRateSupplier
                }
            }
        }    
    }

}

def linkedTickets=new ArrayList()

/*OP-1038: verifica ticket collegati -  e su ciascuno verifica campi obbligatori*/
List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesInIssueLink=true
        linkedTickets.add(issueLink.getSourceObject())
        log.debug "Issue con relatesInIssueLink"
    }
}
List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesOutIssueLink=true
        linkedTickets.add(issueLink.getDestinationObject())
        log.debug "Issue con relatesOutIssueLink"
    }
}

/*Array warnings ed errors per le issue linkate, uno per ogni tipologia di errore o warning*/
def warningsMatLinkedIssues = new ArrayList()
def warningsRateLinkedIssues = new ArrayList()
//def errorsLinkedIssues = new ArrayList()

for(i in linkedTickets){
    issue=i as Issue

    /*Array warnings ed errors per la singola issue linkata, uno per ogni tipologia di errore o warning*/
    def warningEmptyQuoteRateSupplier = new ArrayList()
    def warningEmptyQuoteMatSupplier = new ArrayList() 
    //def error...
    
    if(issue.getCustomFieldValue(lumpSumPrice)!=null &amp;&amp; issue.getCustomFieldValue(lumpSumPrice).toString().equals("Yes")){
        /*Contabilizzazione a corpo*/
        log.debug "Contabilizzazione a corpo"
        //OPAA_LUMP_SUM_RATES
        if(issue.getCustomFieldValue(lumpSumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(lumpSumRates) != "" &amp;&amp; !issue.getCustomFieldValue(lumpSumRates).toString().equals("")){
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def lsRatesList = issue.getCustomFieldValue(lumpSumRates)

            for(ls in lsRatesList){
                //extract insight key ang get object
                def lsRate=ls.toString()
                def lsRateKey = lsRate.substring(lsRate.indexOf('(')+1,lsRate.indexOf(')'))
                def lsRateObject = objectFacade.loadObjectBean(lsRateKey)
                //get "DELETED" for that component
                def lsDel = objectFacade.loadObjectAttributeBean(lsRate.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(lsRate.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : ""
                def lsDelValue = lsDel != "" ? lsDel.substring(lsDel.indexOf('(')+1,lsDel.indexOf(')')) : ""

                //get "APPLIED_TO" for that rate
                def lsAppliedTo = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                def lsAppliedToValue
                if (lsAppliedTo){
                    lsAppliedToValue = lsAppliedTo.substring(lsAppliedTo.indexOf('(')+1,lsAppliedTo.indexOf(')'))
                }

                def lsRateRef = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()

                def lsRateRefKey
                def lsRateRefValue
                if(lsRateRef.size() &gt; 0){
                    lsRateRef = lsRateRef.toString()
                    lsRateRefKey = lsRateRef.substring(lsRateRef.indexOf('(')+1,lsRateRef.indexOf(')'))
                    def lsRateRefObject = objectFacade.loadObjectBean(OPAA + lsRateRefKey)
                    lsRateRefValue = objectFacade.loadObjectAttributeBean(lsRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
                    lsRateRefValue = lsRateRefValue.substring(lsRateRefValue.indexOf('(')+1,lsRateRefValue.indexOf(')'))
                }

                if((lsAppliedToValue.toString().equals("BOTH") || lsAppliedToValue.toString().equals("SUPPLIER")) &amp;&amp; !lsDelValue.equals("true")){
                    //get "TOTAL_AMOUNT_SUPPLIER" for that component
                    def totSupplier
                    if(objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString())){
                    	totSupplier = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()
                    }
                    if(!totSupplier || totSupplier[0].getValue().toString().equals("0.0")){
                        warnings=true    
                        warningEmptyQuoteRateSupplier.add(lsRateRefValue.toString())
                        log.debug issue.key.toString() + " warningEmptyQuoteRateSupplier: " + warningEmptyQuoteRateSupplier
                    }
                }
            }    
        }

    }else{
        /*Contabilizzazione non a corpo*/
        log.debug "Contabilizzazione NON a corpo"

        //OPAA_REPLACED_MATERIALS
        if(issue.getCustomFieldValue(repMaterials)!=null &amp;&amp; (String)issue.getCustomFieldValue(repMaterials) != "" &amp;&amp; !issue.getCustomFieldValue(repMaterials).toString().equals("")){
            log.debug "Materiali: " + issue.getCustomFieldValue(repMaterials)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def repMatList = issue.getCustomFieldValue(repMaterials)

            for(mat in repMatList){
                //extract insight key ang get object
                def component=mat.toString()
                def componentKey = component.substring(component.indexOf('('+OPAA)+1,component.length()-1)
                def componentObject = objectFacade.loadObjectBean(componentKey)
                //get "DELETED" for that component
                def matDel = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : ""
                def matDelValue = matDel != "" ? matDel.substring(matDel.indexOf('(')+1,matDel.indexOf(')')) : ""

                //get "APPLIED_TO" for that component
                def appliedTo
                def appliedToValue
                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString())){
                    appliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans() as ArrayList
                    if(appliedTo.size() &gt; 0){
                        appliedTo = appliedTo.toString()
                        appliedToValue = appliedTo.substring(appliedTo.indexOf('(')+1,appliedTo.indexOf(')'))
                        log.debug "appliedToValue: " + appliedToValue
                    }
                }
                
                def matNumber
                def matNumberKey
                def matNumberValue
                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString())){
                    matNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).getObjectAttributeValueBeans() as ArrayList
                    if(matNumber.size() &gt; 0){
                        matNumber = matNumber.toString()
                        matNumberKey = matNumber.substring(matNumber.indexOf('(')+1,matNumber.indexOf(')'))
                        def matNumberObject = objectFacade.loadObjectBean(DBObjects + matNumberKey)
                        matNumberValue = objectFacade.loadObjectAttributeBean(matNumberObject.getId(), properties['iobj.material.name'].toString()).getObjectAttributeValueBeans().toString()
                        matNumberValue = matNumberValue.substring(matNumberValue.indexOf('(')+1,matNumberValue.indexOf(')'))
                    }
                }

                def serialNumber
                def serialNumberValue
                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString())){
                    serialNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()).getObjectAttributeValueBeans() as ArrayList
                    if(serialNumber.size() &gt; 0){
                        serialNumber = serialNumber.toString()
                        serialNumberValue = serialNumber.substring(serialNumber.indexOf('(')+1,serialNumber.indexOf(')'))
                    }               
                }

                if(appliedToValue &amp;&amp; !matDelValue.equals("true") &amp;&amp; (appliedToValue.toString().equals("BOTH") || appliedToValue.toString().equals("SUPPLIER"))){
                    //get "TOTAL_AMOUNT_SUPPLIER" for that component
                    log.debug "AppliedTo verificato =&gt; " + objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString())
                    def totSupplier 
                    if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString())){
                    	totSupplier = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString()).getObjectAttributeValueBeans()
                    }
					if(!totSupplier || totSupplier[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteMatSupplier.add(matNumberValue.toString() + (!serialNumber.toString().equals("[]") ? " (" + serialNumberValue.toString() + ")" : " ()"))
                        log.debug issue.key.toString() + " warningEmptyQuoteMatSupplier: "+ warningEmptyQuoteMatSupplier
                    }
                }
            }    
        }  

        //OPAA_UNATANTUM_RATES
        if(issue.getCustomFieldValue(unaTantumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(unaTantumRates) != "" &amp;&amp; !issue.getCustomFieldValue(unaTantumRates).toString().equals("")){
            log.debug "Una tantum rates: " + issue.getCustomFieldValue(unaTantumRates)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def umRatesList = issue.getCustomFieldValue(unaTantumRates)

            for(um in umRatesList){
                //extract insight key ang get object
                def umRate=um.toString()
                def umRateKey = umRate.substring(umRate.indexOf('(')+1,umRate.indexOf(')'))
                def umRateObject = objectFacade.loadObjectBean(umRateKey)
                //get "DELETED" for that component
                def umDel = objectFacade.loadObjectAttributeBean(umRate.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(umRate.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : ""
                def umDelValue = umDel != "" ? umDel.substring(umDel.indexOf('(')+1,umDel.indexOf(')')) : ""

                //get "APPLIED_TO" for that rate
                def umAppliedTo = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                def umAppliedToValue = umAppliedTo.substring(umAppliedTo.indexOf('(')+1,umAppliedTo.indexOf(')'))

                def umRateRef
                if(objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){
                    umRateRef=objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
                }
                def techRef
                if(objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.technicianRef'].toString())){
                    techRef=objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.technicianRef'].toString()).getObjectAttributeValueBeans().toString()
                }

                def umRateRefKey
                def umRateRefValue
                if(umRateRef){
                    umRateRef = umRateRef.toString()
                    umRateRefKey = umRateRef.substring(umRateRef.indexOf('(')+1,umRateRef.indexOf(')'))
                    def umRateRefObject = objectFacade.loadObjectBean(OPAA + umRateRefKey)
                    umRateRefValue = objectFacade.loadObjectAttributeBean(umRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
                    umRateRefValue = umRateRefValue.substring(umRateRefValue.indexOf('(')+1,umRateRefValue.indexOf(')'))
                }

                def techRefKey
                def techRefValue
                if(techRef){
                    techRef = techRef.toString()
                    log.debug "techRef: " + techRef
                    techRefKey = techRef.substring(techRef.indexOf('(')+1,techRef.indexOf(')'))
                    def umRateRefObject = objectFacade.loadObjectBean(OPAA + umRateRefKey)
                    techRefValue = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()
                    techRefValue = umRateRefValue.substring(techRefValue.indexOf('(')+1,techRefValue.indexOf(')'))
                }

                if((umAppliedToValue.toString().equals("BOTH") || umAppliedToValue.toString().equals("SUPPLIER")) &amp;&amp; !umDelValue.equals("true")){
                    //get "TOTAL_AMOUNT_SUPPLIER" for that component
                    def totSupplier 
                    if(objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString())){
                        totSupplier=objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()
                    }
                    if(!totSupplier || totSupplier[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateSupplier.add(umRateRefValue.toString() + " (" + techRefValue.toString() + ")")
                        log.debug issue.key.toString() + " warningEmptyQuoteRateSupplier: " + warningEmptyQuoteRateSupplier
                    }
                }
            }    
        }

        //OPAA_LABOUR_RATES
        if(issue.getCustomFieldValue(labourRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(labourRates) != "" &amp;&amp; !issue.getCustomFieldValue(labourRates).toString().equals("")){
            log.debug "Labour rates: " + issue.getCustomFieldValue(labourRates)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def labourRatesList = issue.getCustomFieldValue(labourRates)

            for(lb in labourRatesList){
                //extract insight key ang get object
                def lbRate=lb.toString()
                def lbRateKey = lbRate.substring(lbRate.indexOf('(')+1,lbRate.indexOf(')'))
                def lbRateObject = objectFacade.loadObjectBean(lbRateKey)
                //get "DELETED" for that component
                def lbDel = objectFacade.loadObjectAttributeBean(lbRate.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(lbRate.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : ""
                def lbDelValue = lbDel != "" ? lbDel.substring(lbDel.indexOf('(')+1,lbDel.indexOf(')')) : ""

                //get "APPLIED_TO" for that rate
                def lbAppliedTo = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                def lbAppliedToValue = lbAppliedTo.substring(lbAppliedTo.indexOf('(')+1,lbAppliedTo.indexOf(')'))

                def lbRateRef = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()

                def techRef
                if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.technicianRef'].toString())){
                    techRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.technicianRef'].toString()).getObjectAttributeValueBeans().toString()
                }

                def lbRateRefKey
                def lbRateRefValue
                if(lbRateRef.size() &gt; 0){
                    lbRateRef = lbRateRef.toString()
                    lbRateRefKey = lbRateRef.substring(lbRateRef.indexOf('(')+1,lbRateRef.indexOf(')'))
                    def lbRateRefObject = objectFacade.loadObjectBean(OPAA + lbRateRefKey)
                    lbRateRefValue = objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
                    lbRateRefValue = lbRateRefValue.substring(lbRateRefValue.indexOf('(')+1,lbRateRefValue.indexOf(')'))
                }

                def techRefKey
                def techRefValue
                if(techRef){
                    techRef = techRef.toString()
                    log.debug "techRef: " + techRef
                    techRefKey = techRef.substring(techRef.indexOf('(')+1,techRef.indexOf(')'))
                    def techRefObject = objectFacade.loadObjectBean(OPAA + techRefKey)
                    techRefValue = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()
                    techRefValue = lbRateRefValue.substring(techRefValue.indexOf('(')+1,techRefValue.indexOf(')'))
                }

                if((lbAppliedToValue.toString().equals("BOTH") || lbAppliedToValue.toString().equals("SUPPLIER")) &amp;&amp; !lbDelValue.equals("true")){
                    //get "TOTAL_AMOUNT_SUPPLIER" for that component
                    def totSupplier 
                    if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString())){
                        totSupplier = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()
                    }
                    if(!totSupplier || totSupplier[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateSupplier.add(lbRateRefValue.toString())
                        log.debug issue.key.toString() + " warningEmptyQuoteRateSupplier: " + warningEmptyQuoteRateSupplier
                    }
                }
            }    
        }

        //OPAA_TRAVEL_RATES
        if(issue.getCustomFieldValue(travelRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(travelRates) != "" &amp;&amp; !issue.getCustomFieldValue(travelRates).toString().equals("")){
            log.debug "Travel rates: " + issue.getCustomFieldValue(travelRates)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def travelRatesList = issue.getCustomFieldValue(travelRates)

            for(tr in travelRatesList){
                //extract insight key ang get object
                def trRate=tr.toString()
                def trRateKey = trRate.substring(trRate.indexOf('(')+1,trRate.indexOf(')'))
                def trRateObject = objectFacade.loadObjectBean(trRateKey)
                //get "DELETED" for that component
                def trDel = objectFacade.loadObjectAttributeBean(trRate.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(trRate.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : ""
                def trDelValue = trDel != "" ? trDel.substring(trDel.indexOf('(')+1,trDel.indexOf(')')) : ""

                //get "APPLIED_TO" for that rate
                def trAppliedTo = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                def trAppliedToValue = trAppliedTo.substring(trAppliedTo.indexOf('(')+1,trAppliedTo.indexOf(')'))

                def trRateRef = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()

                def trRateRefKey
                def trRateRefValue
                if(trRateRef.size() &gt; 0){
                    trRateRef = trRateRef.toString()
                    trRateRefKey = trRateRef.substring(trRateRef.indexOf('(')+1,trRateRef.indexOf(')'))
                    def trRateRefObject = objectFacade.loadObjectBean(OPAA + trRateRefKey)
                    trRateRefValue = objectFacade.loadObjectAttributeBean(trRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
                    trRateRefValue = trRateRefValue.substring(trRateRefValue.indexOf('(')+1,trRateRefValue.indexOf(')'))
                }

                if((trAppliedToValue.toString().equals("BOTH") || trAppliedToValue.toString().equals("SUPPLIER")) &amp;&amp; !trDelValue.equals("true")){
                    //get "TOTAL_AMOUNT_SUPPLIER" for that component
                    def totSupplier
                    if(objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString())){
                        totSupplier=objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()
                    }
                    if(!totSupplier || totSupplier[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateSupplier.add(trRateRefValue.toString())
                        log.debug issue.key.toString() + " warningEmptyQuoteRateSupplier: " + warningEmptyQuoteRateSupplier
                    }
                }
            }    
        }

    }
    
    /*Verifico la presenza di errori e warning sulla issue corrente e, se presenti, li aggiungo agli array degli errori e warning delle issue linkate*/
    if(warningEmptyQuoteMatSupplier.size()&gt;0){
        def objList = new ArrayList()
        objList.add(issue)
        objList.add(warningEmptyQuoteMatSupplier)
        warningsMatLinkedIssues.add(objList)
    }
    
    if(warningEmptyQuoteRateSupplier.size()&gt;0){
        def objList = new ArrayList()
        objList.add(issue)
        objList.add(warningEmptyQuoteRateSupplier)
        warningsRateLinkedIssues.add(objList)
    }
    
    //if(errors...)
    
}

log.debug "warningsMatLinkedIssues: " + warningsMatLinkedIssues
log.debug "warningsRateLinkedIssues: " + warningsRateLinkedIssues

def output = new ArrayList()

if (!errors &amp;&amp; !warnings){
    return true
}else{
    if(!errors &amp;&amp; warnings){
        //Se ci sono solo warnings verifico se l'utente ha già dichiarato di voler proseguire comunque
        // - transition field "OPAA_CHECK_AND_CONFIRM"="Yes"
        // - in caso contrario invio i warning a FE

        //log.debug "transitionCheck: " + issue.getCustomFieldValue(transitionCheck)
        //log.debug "result: " + issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")
        if(issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")){
            //log.debug "return true - transitionCheck = Yes"
            return true
        }else{
            def wList = new ArrayList()

            if(issueWarningEmptyQuoteRateSupplier.size() &gt; 0){
            	def wListConfirmEmptyRate = new ArrayList()
                wListConfirmEmptyRate.add("W")
                wListConfirmEmptyRate.add("SUPPLIER_CONFIRM_EMPTY_RATES")
                wListConfirmEmptyRate.add(null)
                wListConfirmEmptyRate.add(issueWarningEmptyQuoteRateSupplier)
                    
                wList.add(wListConfirmEmptyRate)
            }
            
            if(issueWarningEmptyQuoteMatSupplier.size() &gt; 0){
            	def wListConfirmEmptyMatQuote = new ArrayList()
                wListConfirmEmptyMatQuote.add("W")
                wListConfirmEmptyMatQuote.add("SUPPLIER_CONFIRM_EMPTY_MAT_QUOTE")
                wListConfirmEmptyMatQuote.add(null)
                wListConfirmEmptyMatQuote.add(issueWarningEmptyQuoteMatSupplier)
                    
                wList.add(wListConfirmEmptyMatQuote)
            }

            if(warningsMatLinkedIssues.size() &gt; 0){
                for(obj in warningsMatLinkedIssues){
                    def wListConfirmEmptyMatQuote = new ArrayList()
                    wListConfirmEmptyMatQuote.add("W")
                    wListConfirmEmptyMatQuote.add("SUPPLIER_CONFIRM_EMPTY_MAT_QUOTE")
                    wListConfirmEmptyMatQuote.add(obj[0])
                    wListConfirmEmptyMatQuote.add(obj[1])

                    wList.add(wListConfirmEmptyMatQuote)
                }
            }
            
            if(warningsRateLinkedIssues.size() &gt; 0){
                for(obj in warningsRateLinkedIssues){
                    def wListConfirmEmptyRate = new ArrayList()
                    wListConfirmEmptyRate.add("W")
                    wListConfirmEmptyRate.add("SUPPLIER_CONFIRM_EMPTY_RATES")
                    wListConfirmEmptyRate.add(obj[0])
                    wListConfirmEmptyRate.add(obj[1])

                    wList.add(wListConfirmEmptyRate)
                }
            }

            output.add(wList)
            throw new InvalidInputException("W", output.toString())   
        }

    }
    if(errors &amp;&amp; !warnings){
        def eList = new ArrayList()

        output.add(eList)
        throw new InvalidInputException("E", output.toString())   
    }
    if(errors &amp;&amp; warnings){
        def eList = new ArrayList()
        def wList = new ArrayList()

        if(issueWarningEmptyQuoteRateSupplier.size() &gt; 0){
            def wListConfirmEmptyRate = new ArrayList()
            wListConfirmEmptyRate.add("W")
            wListConfirmEmptyRate.add("SUPPLIER_CONFIRM_EMPTY_RATES")
			wListConfirmEmptyRate.add(null)
            wListConfirmEmptyRate.add(issueWarningEmptyQuoteRateSupplier)

            wList.add(wListConfirmEmptyRate)
        }

        if(issueWarningEmptyQuoteMatSupplier.size() &gt; 0){
            def wListConfirmEmptyMatQuote = new ArrayList()
            wListConfirmEmptyMatQuote.add("W")
            wListConfirmEmptyMatQuote.add("SUPPLIER_CONFIRM_EMPTY_MAT_QUOTE")
            wListConfirmEmptyMatQuote.add(null)
            wListConfirmEmptyMatQuote.add(issueWarningEmptyQuoteMatSupplier)

            wList.add(wListConfirmEmptyMatQuote)
        }

        if(warningsMatLinkedIssues.size() &gt; 0){
            for(obj in warningsMatLinkedIssues){
                def wListConfirmEmptyMatQuote = new ArrayList()
                wListConfirmEmptyMatQuote.add("W")
                wListConfirmEmptyMatQuote.add("SUPPLIER_CONFIRM_EMPTY_MAT_QUOTE")
                wListConfirmEmptyMatQuote.add(obj[0])
                wListConfirmEmptyMatQuote.add(obj[1])

                wList.add(wListConfirmEmptyMatQuote)
            }
        }

        if(warningsRateLinkedIssues.size() &gt; 0){
            for(obj in warningsRateLinkedIssues){
                def wListConfirmEmptyRate = new ArrayList()
                wListConfirmEmptyRate.add("W")
                wListConfirmEmptyRate.add("SUPPLIER_CONFIRM_EMPTY_RATES")
                wListConfirmEmptyRate.add(obj[0])
                wListConfirmEmptyRate.add(obj[1])

                wList.add(wListConfirmEmptyRate)
            }
        }

        output.add(eList)
        output.add(wList)
        throw new InvalidInputException("WE", output.toString())  
    }
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_NOTES">OP: generazione ODA fornitore</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import groovy.json.JsonSlurper
import org.apache.log4j.Category
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)
import com.atlassian.jira.issue.link.IssueLink

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def requestMethod
def baseURL

URL url
HttpURLConnection connection

/* REST API per Generazione ODA */
requestMethod = "POST";
def relatesInIssueLink=false
def relatesOutIssueLink=false
def linkedTickets=new ArrayList()
List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesInIssueLink=true
        linkedTickets.add(issueLink.getSourceObject().toString())
        log.debug "Issue con relatesInIssueLink"
    }
}
List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesOutIssueLink=true
        linkedTickets.add(issueLink.getDestinationObject().toString())
        log.debug "Issue con relatesOutIssueLink"
    }
}

def body_req

if(relatesInIssueLink || relatesOutIssueLink){
    body_req = [
        "issueKey": issue.key,
        "linkedTickets": linkedTickets
    ]
}else{
    body_req = [
        "issueKey": issue.key
    ]
}


baseURL = "http://" + properties['api.env'].toString() + "/op/rest/jira/AA/purchase/order/create"
url = new URL(baseURL)
connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.outputStream
log.debug "url: " + url
connection.outputStream.withWriter("UTF-8") { new StreamingJsonBuilder(it, body_req) }
log.debug connection.outputStream
connection.connect();

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()
    log.debug "Response: " + connection
    def outputMsg = ((HttpURLConnection)connection).errorStream.text
    log.debug "((HttpURLConnection)connection).errorStream.text: " + outputMsg
    
    def jsonSlurper = new JsonSlurper()
    def json_object = jsonSlurper.parseText(outputMsg)
    assert json_object instanceof Map  
    log.debug "message: " +  json_object.message
    
    eListErrors.add("E")
    eListErrors.add("OP-SAP-ODA")
    errorMsgs.add(connection.getResponseCode() + " " + json_object.message)
    eListErrors.add(errorMsgs)
    eList.add(eListErrors)
    
    output.add(eList)
    throw new InvalidInputException("E", output.toString())
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">OP Email Notification: PURCHASE_ORDER_TO_SUPPLIER</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import org.apache.log4j.Category
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def requestMethod
def baseURL

URL url
HttpURLConnection connection

requestMethod = "POST";
def body_req = [
    "templateName": "PURCHASE_ORDER_TO_SUPPLIER",
    "pec": false,
    "issueKey": issue.key
]

baseURL = "http://" + properties['api.env'].toString() + "/op/rest/jira/AA/transaction/mail/send"
url = new URL(baseURL)
connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.outputStream
connection.outputStream.withWriter("UTF-8") { new StreamingJsonBuilder(it, body_req) }
log.debug connection.outputStream
connection.connect();

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()
    eListErrors.add("E")
    eListErrors.add("SENDMAIL")
    errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
    eListErrors.add(errorMsgs)
    eList.add(eListErrors)

    output.add(eList)
    throw new InvalidInputException("E", output.toString())
}else{
    
    //Update custom field OPAA_PURCHASE_ORDER_DATE
    
}</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_ACTION">181 Tkt Chiuso</arg>
                  <arg name="FIELD_NOTES">OP: Close tkt if ODV and ODA have been created</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.FasttrackTransition</arg>
                  <arg name="FIELD_CONDITION">cfValues['OP_SALES_ORDER'] != null &amp;&amp; cfValues['OP_SALES_ORDER_DATE'] != null &amp;&amp; cfValues['OP_SALES_ORDER_TOTAL'] != null|||</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_TRANSITION_OPTIONS" />
                  <arg name="FIELD_ADDITIONAL_SCRIPT">`!`</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="181" name="Tkt Chiuso" view="fieldscreen">
          <meta name="opsbar-sequence">70</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19925</meta>
          <results>
            <unconditional-result old-status="žée" status="žée" step="7">
              <post-functions>
                <function type="class">
                  <arg name="field.name">resolution</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
                  <arg name="field.value">6</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">q½_ó~tñÞ{ó~¼mÍ÷ëÏ\}î5çN{}¾{u®8</arg>
                  <arg name="FIELD_NOTES">OP: Doc Template generation - se New Installation - Genera CE_DOCUMENTATION</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import com.opensymphony.workflow.WorkflowException;
import com.opensymphony.workflow.InvalidInputException
import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import org.apache.log4j.Category
import groovyx.net.http.HTTPBuilder
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
//insight classes &amp; components
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

def requestMethod
def baseURL

def firstTicket =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.firstTkt'].toString())[0]
String assetCF = properties['cf.asset'] ? properties['cf.asset'].toString() : "OP_ASSET"
def asset = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(assetCF)[0]
def assetValue = issue.getCustomFieldValue(asset)

log.debug "asset: " + asset + ", assetValue: " + assetValue[0] + " - from " + assetValue[0].toString().indexOf('(')+1

def assetKey = assetValue[0].toString().substring(assetValue[0].toString().indexOf('(')+1,assetValue[0].toString().indexOf(')'))

def assetObject = objectFacade.loadObjectBean(assetKey)

log.debug issue.getIssueType().name
log.debug issue.getCustomFieldValue(firstTicket)


/* REST API per Invio Notifica Email ONSITE_REPORT */
requestMethod = "GET";

if(issue.getIssueType().name.toString().equals(properties['it.newInstallation'])){
    baseURL = "http://" + properties['api.env'].toString() + "/op/rest/automation/document/generation/check?ISSUE_KEY="+ assetObject.getId().toString() +"&amp;DOC_CATEGORY=CE_DOCUMENTATION"
    log.debug baseURL
    URL url = new URL(baseURL)
    HttpURLConnection connection = (HttpURLConnection)url.openConnection();
    connection.setRequestMethod(requestMethod);
    connection.setRequestProperty("Content-Type", "application/json");
    connection.setRequestProperty("Accept", "*/*");
    connection.setDoOutput(true);
    connection.setDoInput(true);
    connection.connect();

    def output = new ArrayList()
    def eList = new ArrayList()
    def eListErrors = new ArrayList()
    def errorMsgs = new ArrayList()

    if (!connection.getResponseCode().toString().equals("200")){
        log.debug "url: " + url
        log.debug "ResponseCode:" + connection.getResponseCode()
        log.debug "ResponseMessage:" + connection.getResponseMessage()
        log.debug "ErrorStream: " + connection.getErrorStream().toString()
        log.debug "getHeaderFields(): " + connection.getHeaderFields()
        def outputMsg = ((HttpURLConnection)connection).errorStream.text
        log.debug "((HttpURLConnection)connection).errorStream.text: " + outputMsg

        def jsonSlurper = new JsonSlurper()
        def json_object = jsonSlurper.parseText(outputMsg)
        assert json_object instanceof Map  
        log.debug "message: " +  json_object.message

        eListErrors.add("E")
        eListErrors.add("OP-DOCS")
        errorMsgs.add(connection.getResponseCode() + " " + json_object.message)
        eListErrors.add(errorMsgs)
        eList.add(eListErrors)

        output.add(eList)
        throw new InvalidInputException("E", output.toString())
    }
}
</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">OP: New Installation - Check linkedTickets &amp; Fast-Transact them</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService
import org.apache.log4j.Category
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.link.IssueLink
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.WARN)

log.warn "${issue.key} Transazione TKT CHIUSO - Post Function check linkedIssues"

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyDone'] ? properties['cf.automaticallyDone'].toString() : "OP_AUTOMATICALLY_DONE")[0]
IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)

Issue issue = issue
//Per test da console
//issue = issueManager.getIssueByKeyIgnoreCase("OPUT-276")

/*DEV*/
CLOSE_TKT = properties['wf.tr.close'] ? properties['wf.tr.close'] : 181

/*PROD*/
//CONFIRM_TO_CUSTOMER

def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
def issueService = ComponentAccessor.getIssueService()

/*Se eseguo la confirm to customer su un ticket con 1 o + ticket collegati, verifico e sposto in automatico gli eventuali ticket collegati*/
log.warn "verifico e sposto in automatico gli eventuali ticket collegati"

if(issue.getIssueType().getName() == properties['it.newInstallation'].toString() &amp;&amp; issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals("No")){
    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            log.warn "Issue con relatesInIssueLink"
            /*Eseguire transazione di stato della sourceIssue*/
            def linkedIssue = issueLink.getSourceObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            def transitionId
            if(linkedIssueStatus.name == (properties['wf.completedToBeClosed'] ? properties['wf.completedToBeClosed'].toString() : "Completed to be Closed") ){
                transitionId=CLOSE_TKT
            }
            if(transitionId==CLOSE_TKT){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(true)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                //log.warn "issueInputParameters: " + issueInputParameters
                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"

                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 79 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }
        }
    }

    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            log.warn "Issue con relatesOutIssueLink"
            /*Eseguire transazione di stato della destinationIssue*/
            def linkedIssue = issueLink.getDestinationObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            def transitionId
            log.warn "linkedIssue: " + linkedIssue
            log.warn "linkedIssueStatus.name: " + linkedIssueStatus.name
            if(linkedIssueStatus.name == (properties['wf.completedToBeClosed'] ? properties['wf.completedToBeClosed'].toString() : "Completed to be Closed")){
                transitionId=CLOSE_TKT
            }

            if(transitionId==CLOSE_TKT){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(true)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 

                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"

                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 122 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }

        }
    }
}</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="191" name="Invia Consuntivo al Cliente" view="fieldscreen">
          <meta name="opsbar-sequence">30</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19911</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_NOTES">OP: Check FINANCIAL_STATEMENT_TO_CUSTOMER - If it's null the email has not been sent yet</arg>
                <arg name="FIELD_INLINE_SCRIPT">import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
cfValues[properties['cf.wfFinancialStatmToC']] == null</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.CustomScriptCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_SCRIPT_FILE" />
              </condition>
              <condition type="class">
                <arg name="FIELD_NOTES">OP: Check OP_AUTOMATICALLY_CLOSED - if Yes don't allow transition</arg>
                <arg name="FIELD_INLINE_SCRIPT">import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
cfValues[properties['cf.automaticallyClosed']] == null || cfValues[properties['cf.automaticallyClosed']]?.value == 'No'</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.CustomScriptCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_SCRIPT_FILE" />
              </condition>
              <condition type="class">
                <arg name="FIELD_NOTES">`!`</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">issue.issueType.name == 'Maintenance Ticket'|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">éÎüéÇ_Ñ®Ñ§xo¦õw~Õ§uçß=ÛMöí§v</arg>
              <arg name="FIELD_NOTES">OP: Check Required Fields - solo errors, no warnings</arg>
              <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import com.atlassian.jira.issue.IssueManager
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
 
Issue issue = issue
//IssueManager issueManager = ComponentAccessor.getIssueManager();
//Issue issue = issueManager.getIssueByKeyIgnoreCase("OPUT-396")

def errors = false
def warnings = false

def lumpSumPrice =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumPrice'].toString())[0]

/*Campi con dati obbligatori per ticket non a corpo*/
def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.replacedMaterials'].toString())[0]
def unaTantumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.unatantumRates'].toString())[0]
def labourRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.labourRates'].toString())[0]
def travelRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.travelRates'].toString())[0]

/*Campi con dati obbligatori per ticket a corpo*/
def lumpSumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumRates'].toString())[0]

/*Conferma utente su warnings*/
def transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]

/*Insight Schema IDs*/
def DBObjects = properties['ischema.dbo'].toString() + "-"
def OPAA = properties['ischema.aa'].toString() + "-"

def errorMandatoryFields = new ArrayList()
def errorJobStartedCompletedFields = new ArrayList()
def warningEmptyFields = new ArrayList()
def warningEmptyQuoteMatCustomer = new ArrayList()
def warningEmptyQuoteRateCustomer = new ArrayList()

//try{
    if(issue.getCustomFieldValue(lumpSumPrice)!=null &amp;&amp; issue.getCustomFieldValue(lumpSumPrice).toString().equals("Yes")){
        /*Contabilizzazione a corpo*/
        log.debug "Contabilizzazione a corpo"
        //OPAA_LUMP_SUM_RATES
        if(issue.getCustomFieldValue(lumpSumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(lumpSumRates) != "" &amp;&amp; !issue.getCustomFieldValue(lumpSumRates).toString().equals("")){
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def lsRatesList = issue.getCustomFieldValue(lumpSumRates)
			log.debug lsRatesList
            for(ls in lsRatesList){
                //extract insight key ang get object
                def lsRate=ls.toString()
                log.debug "lsRate: " + lsRate
                def lsRateKey = lsRate.substring(lsRate.indexOf('(')+1,lsRate.indexOf(')'))
                log.debug "lsRateKey: " + lsRateKey
                def lsRateObject = objectFacade.loadObjectBean(lsRateKey)
                log.debug "lsRateObject: " + lsRateObject
                //get "APPLIED_TO" for that rate
                def lsAppliedTo = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                log.debug "lsAppliedTo: " + lsAppliedTo
                def lsAppliedToValue
                if (lsAppliedTo){
                    lsAppliedToValue = lsAppliedTo.substring(lsAppliedTo.indexOf('(')+1,lsAppliedTo.indexOf(')'))
                }
                log.debug "objectFacade.loadObjectAttributeBean(lsRateObject.getId(), RATE_REF): " + objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())
                def lsRateRef = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
                log.debug "lsRateRef: " + lsRateRef
                def lsRateRefKey
                def lsRateRefValue
                if(lsRateRef.size() &gt; 0){
                    lsRateRef = lsRateRef.toString()
                    lsRateRefKey = lsRateRef.substring(lsRateRef.indexOf('(')+1,lsRateRef.indexOf(')'))
                    def lsRateRefObject = objectFacade.loadObjectBean(OPAA + lsRateRefKey)
                    log.debug lsRateRefObject
                    lsRateRefValue = objectFacade.loadObjectAttributeBean(lsRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
                    lsRateRefValue = lsRateRefValue.substring(lsRateRefValue.indexOf('(')+1,lsRateRefValue.indexOf(')'))
                }

                if(lsAppliedToValue.toString().equals("BOTH") || lsAppliedToValue.toString().equals("CUSTOMER")){
                    //get "TOTAL_AMOUNT_CUSTOMER" for that component
                    def totCustomer = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateCustomer.add(lsRateRefValue.toString())
                    }
                }
             }    
        }

    }else{
        /*Contabilizzazione non a corpo*/
        log.debug "Contabilizzazione NON a corpo"

        //OPAA_REPLACED_MATERIALS
        if(issue.getCustomFieldValue(repMaterials)!=null &amp;&amp; (String)issue.getCustomFieldValue(repMaterials) != "" &amp;&amp; !issue.getCustomFieldValue(repMaterials).toString().equals("")){
            //log.debug "Materiali: " + issue.getCustomFieldValue(repMaterials)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def repMatList = issue.getCustomFieldValue(repMaterials)

            for(mat in repMatList){
                //extract insight key ang get object
                def component=mat.toString()
                def componentKey = component.substring(component.indexOf('('+OPAA)+1,component.length()-1)
                def componentObject = objectFacade.loadObjectBean(componentKey)
                //get "APPLIED_TO" for that component
                def appliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans() as ArrayList
                def appliedToValue
                if(appliedTo.size() &gt; 0){
                    appliedTo = appliedTo.toString()
                    appliedToValue = appliedTo.substring(appliedTo.indexOf('(')+1,appliedTo.indexOf(')'))
                    //log.debug "appliedToValue: " + appliedToValue
                }
                
                def matNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).getObjectAttributeValueBeans() as ArrayList
                def matNumberKey
                def matNumberValue
                if(matNumber.size() &gt; 0){
                    matNumber = matNumber.toString()
                    matNumberKey = matNumber.substring(matNumber.indexOf('(')+1,matNumber.indexOf(')'))
                    def matNumberObject = objectFacade.loadObjectBean(DBObjects + matNumberKey)
                    matNumberValue = objectFacade.loadObjectAttributeBean(matNumberObject.getId(), properties['iobj.material.name'].toString()).getObjectAttributeValueBeans().toString()
                    matNumberValue = matNumberValue.substring(matNumberValue.indexOf('(')+1,matNumberValue.indexOf(')'))
                }
                
                def serialNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()) ? objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()).getObjectAttributeValueBeans() as ArrayList : null
                def serialNumberValue
                if(serialNumber &amp;&amp; serialNumber.size() &gt; 0){
                    serialNumber = serialNumber.toString()
                    serialNumberValue = serialNumber.substring(serialNumber.indexOf('(')+1,serialNumber.indexOf(')'))
                }               

                if(appliedToValue.toString().equals("BOTH") || appliedToValue.toString().equals("CUSTOMER")){
                    //get "TOTAL_AMOUNT_CUSTOMER" for that component
                    def totCustomer = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()) ? objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()).getObjectAttributeValueBeans() : null
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteMatCustomer.add(matNumberValue.toString() + ((serialNumber &amp;&amp; serialNumber.size() &gt; 0) ? " (" + serialNumberValue.toString() + ")" : " ()"))   
                    }
                }
             }    
        }  

        //OPAA_UNATANTUM_RATES
        if(issue.getCustomFieldValue(unaTantumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(unaTantumRates) != "" &amp;&amp; !issue.getCustomFieldValue(unaTantumRates).toString().equals("")){
            log.debug "Una tantum rates: " + issue.getCustomFieldValue(unaTantumRates)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def umRatesList = issue.getCustomFieldValue(unaTantumRates)

            for(um in umRatesList){
                //extract insight key ang get object
                def umRate=um.toString()
                def umRateKey = umRate.substring(umRate.indexOf('(')+1,umRate.indexOf(')'))
                def umRateObject = objectFacade.loadObjectBean(umRateKey)
                //get "APPLIED_TO" for that rate
                def umAppliedTo = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                def umAppliedToValue = umAppliedTo.substring(umAppliedTo.indexOf('(')+1,umAppliedTo.indexOf(')'))

                def umRateRef = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()

                def umRateRefKey
                def umRateRefValue
                if(umRateRef.size() &gt; 0){
                    umRateRef = umRateRef.toString()
                    umRateRefKey = umRateRef.substring(umRateRef.indexOf('(')+1,umRateRef.indexOf(')'))
                    def umRateRefObject = objectFacade.loadObjectBean(OPAA + umRateRefKey)
                    umRateRefValue = objectFacade.loadObjectAttributeBean(umRateRefObject.getId(), properties['iobj.rate.Name'].toString()) ? objectFacade.loadObjectAttributeBean(umRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString() : null
                    umRateRefValue = umRateRefValue ? umRateRefValue.substring(umRateRefValue.indexOf('(')+1,umRateRefValue.indexOf(')')) : null
                }
                
                if(umAppliedToValue.toString().equals("BOTH") || umAppliedToValue.toString().equals("CUSTOMER")){
                    //get "TOTAL_AMOUNT_CUSTOMER" for that component
                    def totCustomer = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()) ? objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans() : null
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateCustomer.add(umRateRefValue.toString())
                    }
                }
             }    
        }

        //OPAA_LABOUR_RATES
        if(issue.getCustomFieldValue(labourRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(labourRates) != "" &amp;&amp; !issue.getCustomFieldValue(labourRates).toString().equals("")){
            log.debug "Labour rates: " + issue.getCustomFieldValue(labourRates)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def labourRatesList = issue.getCustomFieldValue(labourRates)

            for(lb in labourRatesList){
                //extract insight key ang get object
                def lbRate=lb.toString()
                def lbRateKey = lbRate.substring(lbRate.indexOf('(')+1,lbRate.indexOf(')'))
                def lbRateObject = objectFacade.loadObjectBean(lbRateKey)
                //get "APPLIED_TO" for that rate
                def lbAppliedTo = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                def lbAppliedToValue = lbAppliedTo.substring(lbAppliedTo.indexOf('(')+1,lbAppliedTo.indexOf(')'))

                def lbRateRef = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
                
                def lbRateRefKey
                def lbRateRefValue
                if(lbRateRef.size() &gt; 0){
                    lbRateRef = lbRateRef.toString()
                    lbRateRefKey = lbRateRef.substring(lbRateRef.indexOf('(')+1,lbRateRef.indexOf(')'))
                    def lbRateRefObject = objectFacade.loadObjectBean(OPAA + lbRateRefKey)
                    lbRateRefValue = objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.Name'].toString()) ? objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString() : null
                    lbRateRefValue = lbRateRefValue ? lbRateRefValue.substring(lbRateRefValue.indexOf('(')+1,lbRateRefValue.indexOf(')')) : null
                }

                if(lbAppliedToValue.toString().equals("BOTH") || lbAppliedToValue.toString().equals("CUSTOMER")){
                    //get "TOTAL_AMOUNT_CUSTOMER" for that component
                    def totCustomer = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()) ? objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans() : null
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateCustomer.add(lbRateRefValue.toString())
                    }
                }
             }    
        }

        //OPAA_TRAVEL_RATES
        if(issue.getCustomFieldValue(travelRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(travelRates) != "" &amp;&amp; !issue.getCustomFieldValue(travelRates).toString().equals("")){
            log.debug "Travel rates: " + issue.getCustomFieldValue(travelRates)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def travelRatesList = issue.getCustomFieldValue(travelRates)

            for(tr in travelRatesList){
                //extract insight key ang get object
                def trRate=tr.toString()
                def trRateKey = trRate.substring(trRate.indexOf('(')+1,trRate.indexOf(')'))
                def trRateObject = objectFacade.loadObjectBean(trRateKey)
                //get "APPLIED_TO" for that rate
                def trAppliedTo = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()) ? objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString() : null
                def trAppliedToValue = trAppliedTo ? trAppliedTo.substring(trAppliedTo.indexOf('(')+1,trAppliedTo.indexOf(')')) : null

                def trRateRef = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()) ? objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString() : null
                
                def trRateRefKey
                def trRateRefValue
                if(trRateRef.size() &gt; 0){
                    trRateRef = trRateRef.toString()
                    trRateRefKey = trRateRef.substring(trRateRef.indexOf('(')+1,trRateRef.indexOf(')'))
                    def trRateRefObject = objectFacade.loadObjectBean(OPAA + trRateRefKey)
                    trRateRefValue = objectFacade.loadObjectAttributeBean(trRateRefObject.getId(), properties['iobj.rate.Name'].toString()) ? objectFacade.loadObjectAttributeBean(trRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString() : null
                    trRateRefValue = trRateRefValue ? trRateRefValue.substring(trRateRefValue.indexOf('(')+1,trRateRefValue.indexOf(')')) : null
                }

                if(trAppliedToValue.toString().equals("BOTH") || trAppliedToValue.toString().equals("CUSTOMER")){
                    //get "TOTAL_AMOUNT_CUSTOMER" for that component
                    def totCustomer = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()) ? objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans() : null
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateCustomer.add(trRateRefValue.toString())
                    }
                }
             }    
        }

    }


    def output = new ArrayList()

    if (!errors &amp;&amp; !warnings){
        return true
    }else{
        if(!errors &amp;&amp; warnings){
            //Se ci sono solo warnings verifico se l'utente ha già dichiarato di voler proseguire comunque
            // - transition field "OPAA_CHECK_AND_CONFIRM"="Yes"
            // - in caso contrario invio i warning a FE

            //log.debug "transitionCheck: " + issue.getCustomFieldValue(transitionCheck)
            //log.debug "result: " + issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")
            if(issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")){
                //log.debug "return true - transitionCheck = Yes"
                return true
            }else{
                def wList = new ArrayList()

                if(warningEmptyQuoteRateCustomer.size() &gt; 0){
                    def wListConfirmEmptyRate = new ArrayList()
                    wListConfirmEmptyRate.add("W")
                    wListConfirmEmptyRate.add("CUSTOMER_CONFIRM_EMPTY_RATES")
                    wListConfirmEmptyRate.add(null)
                    wListConfirmEmptyRate.add(warningEmptyQuoteRateCustomer)

                    wList.add(wListConfirmEmptyRate)
                }

                if(warningEmptyQuoteMatCustomer.size() &gt; 0){
                    def wListConfirmEmptyMatQuote = new ArrayList()
                    wListConfirmEmptyMatQuote.add("W")
                    wListConfirmEmptyMatQuote.add("CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE")
                    wListConfirmEmptyMatQuote.add(null)
                    wListConfirmEmptyMatQuote.add(warningEmptyQuoteMatCustomer)

                    wList.add(wListConfirmEmptyMatQuote)
                }

                output.add(wList)
                throw new InvalidInputException("W", output.toString())   
            }

        }
        if(errors &amp;&amp; !warnings){
            def eList = new ArrayList()

            output.add(eList)
            throw new InvalidInputException("E", output.toString())   
        }
        if(errors &amp;&amp; warnings){
            def eList = new ArrayList()
            def wList = new ArrayList()

            if(warningEmptyQuoteRateCustomer.size() &gt; 0){
                    def wListConfirmEmptyRate = new ArrayList()
                    wListConfirmEmptyRate.add("W")
                    wListConfirmEmptyRate.add("CUSTOMER_CONFIRM_EMPTY_RATES")
                	wListConfirmEmptyRate.add(null)
                    wListConfirmEmptyRate.add(warningEmptyQuoteRateCustomer)

                    wList.add(wListConfirmEmptyRate)
                }

                if(warningEmptyQuoteMatCustomer.size() &gt; 0){
                    def wListConfirmEmptyMatQuote = new ArrayList()
                    wListConfirmEmptyMatQuote.add("W")
                    wListConfirmEmptyMatQuote.add("CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE")
                    wListConfirmEmptyMatQuote.add(null)
                    wListConfirmEmptyMatQuote.add(warningEmptyQuoteMatCustomer)

                    wList.add(wListConfirmEmptyMatQuote)
                }

            output.add(eList)
            output.add(wList)
            throw new InvalidInputException("WE", output.toString())  
        }
    }
//}catch(Exception e){
//    log.debug "Exception: " + e
//    throw new InvalidInputException("Exception", e.toString())  
//}
</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_NOTES">OP: REST API: OP generazione Consuntivo</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import org.apache.log4j.Category
import com.atlassian.jira.issue.link.IssueLink
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def requestMethod
def baseURL

/* REST API per Generazione Allegato Consuntivo */
requestMethod = "PUT";

def relatesInIssueLink=false
def relatesOutIssueLink=false
def linkedTickets=new ArrayList()
List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesInIssueLink=true
        linkedTickets.add(issueLink.getSourceObject().toString())
        log.debug "Issue con relatesInIssueLink"
    }
}
List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesOutIssueLink=true
        linkedTickets.add(issueLink.getDestinationObject().toString())
        log.debug "Issue con relatesOutIssueLink"
    }
}

baseURL = "http://" + properties['api.env'].toString() + "/op/rest/automation/AA/ticket/" + issue.key.toString() + "/attachment/balance"

if(relatesInIssueLink || relatesOutIssueLink){
    baseURL = baseURL + "?linkedTickets=" + linkedTickets.toString().replaceAll("\\[","").replaceAll("\\]","").replaceAll(" ","")
}

log.debug "baseUrl: " + baseURL

URL url
url = new URL(baseURL)
HttpURLConnection connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.connect();

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()
    eListErrors.add("E")
    eListErrors.add("GENERATE-ACCOUNTINGREPORT")
    errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
    eListErrors.add(errorMsgs)
    eList.add(eListErrors)

    output.add(eList)
    throw new InvalidInputException("E", output.toString())
}
</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_NOTES">OP Email Notification: FINANCIAL_STATEMENT_TO_CUSTOMER</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import org.apache.log4j.Category
import com.atlassian.jira.issue.link.IssueLink
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def requestMethod
def baseURL

def DBO=properties['ischema.dbo.id'].toString().toInteger()
/* REST API per Invio Notifica Email ONSITE_REPORT */
requestMethod = "POST";

def relatesInIssueLink=false
def relatesOutIssueLink=false
def linkedTickets=new ArrayList()
List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesInIssueLink=true
        linkedTickets.add(issueLink.getSourceObject().toString())
        log.debug "Issue con relatesInIssueLink"
    }
}
List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesOutIssueLink=true
        linkedTickets.add(issueLink.getDestinationObject().toString())
        log.debug "Issue con relatesOutIssueLink"
    }
}

def body_req
if(relatesInIssueLink || relatesOutIssueLink){
    body_req = [
        "templateName": properties['tt.financialStatementToC'].toString(),
        "pec": false,
        "issueKey": issue.key,
        "linkedTickets": linkedTickets
    ]
}else{
    body_req = [
        "templateName": properties['tt.financialStatementToC'].toString(),
        "pec": false,
        "issueKey": issue.key
    ]
}

baseURL = "http://" + properties['api.env'].toString() + "/op/rest/jira/AA/transaction/mail/send"
URL url
url = new URL(baseURL)
HttpURLConnection connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.outputStream
connection.outputStream.withWriter("UTF-8") { new StreamingJsonBuilder(it, body_req) }
log.debug connection.outputStream
connection.connect();

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()
    log.debug "Response: " + connection
    
    /*ROLLBACK*/
    /*Rimozione allegato consuntivo appena creato*/
    /* Get Insight IQL Facade from plugin accessor */
    Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade"); 
    def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);

    /* Get Insight Object Facade from plugin accessor */
    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");
    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

    /* Get Insight Object Type Facade from plugin accessor */
    Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade");
    def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);

    /* Get Insight Object Attribute Facade from plugin accessor */
    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);

    Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory");
    def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);

    /* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include " around value */
    def objects = iqlFacade.findObjectsByIQLAndSchema(DBO, "\"" + properties['iobj.attachmentCategory.categoryRef'].toString() + "\".\"" + properties['iobj.attachmentCategory.name'].toString() + "\" = \"" + properties['iobj.attachmentCategory.objs.consuntivo'].toString() + "\" AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND object HAVING connectedTickets(key = " + issue.key.toString() + ")"); // See the complete list of possible IQL on the Insight Query Language documentation page
    /* If this is a mandatory field you should be able to do this: */
    log.info("Insight object: " + objects[0]);
    
    if(objects[0]){
        /* UPDATE OJBECT DELETED VALUE */
        def obTriage = objectFacade.loadObjectAttributeBean(objects[0].getId(), properties['iobj.attachmentCategory.deleted'].toString()).createMutable()  
        def value = obTriage.getObjectAttributeValueBeans()

        def valueBean = obTriage.createObjectAttributeValueBean()
        valueBean.setValue(objectTypeAttributeFacade.loadObjectTypeAttributeBean(obTriage.getObjectTypeAttributeId()), true)
        /*Clean actual value*/
        value.clear()
        value.add(valueBean);
        obTriage.setObjectAttributeValueBeans(value)

        //Update OJBECT attribute value
        try {
            obTriage = objectFacade.storeObjectAttributeBean(obTriage);
        } catch (Exception vie) {
            log.warn("Could not update object attribute due to validation exception:" + vie.getMessage());
        }
    }
    
    def outputMsg = ((HttpURLConnection)connection).errorStream.text
    log.debug "((HttpURLConnection)connection).errorStream.text: " + outputMsg

    def jsonSlurper = new JsonSlurper()
    def json_object = jsonSlurper.parseText(outputMsg)
    assert json_object instanceof Map  
    log.debug "message: " +  json_object.message

    eListErrors.add("E")
    eListErrors.add("SENDMAIL")
    errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
    eListErrors.add(json_object.message)
    eList.add(eListErrors)
    
    output.add(eList)
    throw new InvalidInputException("E", output.toString())
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="6">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="field.name">customfield_22644</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="201" name="Riapri Rapporto di Intervento">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_NOTES">OPAA_SALES_ORDER_DATE and OPAA_PURCHASE_ORDER_DATE should be null in order to reopen the ticket - otherwise the ticket has already been accounted so it cannot be reopened</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">cfValues['OP_SALES_ORDER_DATE'] == null &amp;&amp; cfValues['OP_PURCHASE_ORDER_DATE'] == null|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
              <condition type="class">
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">issue.issueType.name == 'Maintenance Ticket'|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="5">
              <post-functions>
                <function type="class">
                  <arg name="field">customfield_22693</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22660</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22644</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22641</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22666</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">эwъэ^6ыи╝вgчзЄv}ДkОZтихП■иk«Џ</arg>
                  <arg name="FIELD_NOTES">OP: Remove OnSite Report Attachments</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService
import org.apache.log4j.Category
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();

IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)
def automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]

def requestMethod
def baseURL

/*Script Variables*/
//Per Post Function
Issue issue = issue
//Per test da console
//Issue issue = issueManager.getIssueByKeyIgnoreCase("OPUT-14062")

int OPAA = properties['ischema.aa.id'].toString().toInteger()
int DBO = properties['ischema.dbo.id'].toString().toInteger()

/*Rimozione allegato rapporto di intervento appena creato*/
/* Get Insight IQL Facade from plugin accessor */
Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade"); 
def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);

/* Get Insight Object Facade from plugin accessor */
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");
def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

/* Get Insight Object Type Facade from plugin accessor */
Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade");
def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);

/* Get Insight Object Attribute Facade from plugin accessor */
Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);

Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory");
def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);

/* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include " around value */
def objects = iqlFacade.findObjectsByIQLAndSchema(DBO, "\"" + properties['iobj.attachmentCategory.categoryRef'].toString() + "\".\"" + properties['iobj.attachmentCategory.name'].toString() + "\" IN (\"" + properties['iobj.attachmentCategory.objs.rappIntFAAC'].toString() + "\",\"" + properties['iobj.attachmentCategory.objs.consuntivo'].toString() + "\") AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND object HAVING connectedTickets(key = " + issue.key.toString() + ")"); // See the complete list of possible IQL on the Insight Query Language documentation page
/* If this is a mandatory field you should be able to do this: */
log.debug "IQL: " + "\"" + properties['iobj.attachmentCategory.categoryRef'].toString() + "\".\"" + properties['iobj.attachmentCategory.name'].toString() + "\" IN (\"" + properties['iobj.attachmentCategory.objs.rappIntFAAC'].toString() + "\",\"" + properties['iobj.attachmentCategory.objs.consuntivo'].toString() + "\") AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND object HAVING connectedTickets(key = " + issue.key.toString() + ")"

for(iobj in objects){
    /* UPDATE OJBECT DELETED VALUE */
    def obj = objectFacade.loadObjectBean(iobj.getId());
        
    int attachmentDeleted = properties['iobj.attachment.deleted.id'] ? properties['iobj.attachment.deleted.id'].toString().toInteger() : 3265
    
    attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(attachmentDeleted); 

    newAttrib = obj.createObjectAttributeBean(attribType);
    def newAttribValue = newAttrib.createObjectAttributeValueBean();

    try {
    	newAttribValue.setValue(attribType, true);
    } catch (Exception vie) {
     	log.warn("SETINSIGHTVALUE: Unable to set attribute " + attribType + " to " + totalAmountSupp + ". Exiting.");
     	log.warn(SETINSIGHTVALUE: vie.getMessage());
     	return false;
    }
    
    def attribValues = newAttrib.getObjectAttributeValueBeans();
    attribValues.add(newAttribValue);
    newAttrib.setObjectAttributeValueBeans(attribValues);
     
    try {
    	newAttrib = objectFacade.storeObjectAttributeBean(newAttrib);
    } catch (Exception vie) {
    	log.warn("SETINSIGHTVALUE: Unable to save changes. Exiting.");
     	log.warn(SETINSIGHTVALUE: vie.getMessage());
    return false;
    }
    log.info("SETINSIGHTVALUE: Successfully saved value");
}</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="211" name="Invia notifica ODA al Fornitore">
          <meta name="opsbar-sequence">60</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_NOTES">Check OP_PURCHASE_ORDER_DATE &amp;&amp; OP_PURCHASE_ORDER - If the first one is not null &amp;&amp; the second one is null - ODA has been created but mail not sent</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
cfValues[properties['cf.purchaseOrderDate']] != null &amp;&amp; cfValues[properties['cf.purchaseOrder']] == null|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
              <condition type="class">
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">issue.issueType.name == 'Maintenance Ticket'|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_NOTES">OP: Check Required Fields - solo errors, no warnings</arg>
              <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
 
Issue issue = issue

def errors = false
def warnings = false

def lumpSumPrice =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumPrice'].toString())[0]

/*Campi con dati obbligatori per ticket non a corpo*/
def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.replacedMaterials'].toString())[0]
def unaTantumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.unatantumRates'].toString())[0]
def labourRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.labourRates'].toString())[0]
def travelRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.travelRates'].toString())[0]

/*Campi con dati obbligatori per ticket a corpo*/
def lumpSumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumRates'].toString())[0]

/*Conferma utente su warnings*/
def transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]

/*Insight Schema IDs*/
def DBObjects = properties['ischema.dbo'].toString() + "-"
def OPAA = properties['ischema.aa'].toString() + "-"

def errorMandatoryFields = new ArrayList()
def errorJobStartedCompletedFields = new ArrayList()
def warningEmptyFields = new ArrayList()
def warningEmptyQuoteMatCustomer = new ArrayList()
def warningEmptyQuoteRateCustomer = new ArrayList()

//try{
    if(issue.getCustomFieldValue(lumpSumPrice)!=null &amp;&amp; issue.getCustomFieldValue(lumpSumPrice).toString().equals("Yes")){
        /*Contabilizzazione a corpo*/
        log.debug "Contabilizzazione a corpo"
        //OPAA_LUMP_SUM_RATES
        if(issue.getCustomFieldValue(lumpSumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(lumpSumRates) != "" &amp;&amp; !issue.getCustomFieldValue(lumpSumRates).toString().equals("")){
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def lsRatesList = issue.getCustomFieldValue(lumpSumRates)

            for(ls in lsRatesList){
                //extract insight key ang get object
                def lsRate=ls.toString()
                def lsRateKey = lsRate.substring(lsRate.indexOf('(')+1,lsRate.indexOf(')'))
                def lsRateObject = objectFacade.loadObjectBean(lsRateKey)
                //get "APPLIED_TO" for that rate
                def lsAppliedTo = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                def lsAppliedToValue
                if (lsAppliedTo){
                    lsAppliedToValue = lsAppliedTo.substring(lsAppliedTo.indexOf('(')+1,lsAppliedTo.indexOf(')'))
                }
                
                def lsRateRef = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
                
                def lsRateRefKey
                def lsRateRefValue
                if(lsRateRef.size() &gt; 0){
                    lsRateRef = lsRateRef.toString()
                    lsRateRefKey = lsRateRef.substring(lsRateRef.indexOf('(')+1,lsRateRef.indexOf(')'))
                    def lsRateRefObject = objectFacade.loadObjectBean(OPAA + lsRateRefKey)
                    lsRateRefValue = objectFacade.loadObjectAttributeBean(lsRateRefObject.getId(), properties['iobj.rate.name'].toString()).getObjectAttributeValueBeans().toString()
                    lsRateRefValue = lsRateRefValue.substring(lsRateRefValue.indexOf('(')+1,lsRateRefValue.indexOf(')'))
                }

                if(lsAppliedToValue.toString().equals("BOTH") || lsAppliedToValue.toString().equals("SUPPLIER")){
                    //get "TOTAL_AMOUNT_SUPPLIER" for that component
                    def totCustomer = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateCustomer.add(lsRateRefValue.toString())
                    }
                }
             }    
        }

    }else{
        /*Contabilizzazione non a corpo*/
        log.debug "Contabilizzazione NON a corpo"

        //OPAA_REPLACED_MATERIALS
        if(issue.getCustomFieldValue(repMaterials)!=null &amp;&amp; (String)issue.getCustomFieldValue(repMaterials) != "" &amp;&amp; !issue.getCustomFieldValue(repMaterials).toString().equals("")){
            //log.debug "Materiali: " + issue.getCustomFieldValue(repMaterials)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def repMatList = issue.getCustomFieldValue(repMaterials)

            for(mat in repMatList){
                //extract insight key ang get object
                def component=mat.toString()
                def componentKey = component.substring(component.indexOf('('+OPAA)+1,component.length()-1)
                def componentObject = objectFacade.loadObjectBean(componentKey)
                //get "APPLIED_TO" for that component
                def appliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString()).getObjectAttributeValueBeans() as ArrayList
                def appliedToValue
                if(appliedTo.size() &gt; 0){
                    appliedTo = appliedTo.toString()
                    appliedToValue = appliedTo.substring(appliedTo.indexOf('(')+1,appliedTo.indexOf(')'))
                    //log.debug "appliedToValue: " + appliedToValue
                }
                
                def matNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).getObjectAttributeValueBeans() as ArrayList
                def matNumberKey
                def matNumberValue
                if(matNumber.size() &gt; 0){
                    matNumber = matNumber.toString()
                    matNumberKey = matNumber.substring(matNumber.indexOf('(')+1,matNumber.indexOf(')'))
                    def matNumberObject = objectFacade.loadObjectBean(DBObjects + matNumberKey)
                    matNumberValue = objectFacade.loadObjectAttributeBean(matNumberObject.getId(), properties['iobj.material.name'].toString()).getObjectAttributeValueBeans().toString()
                    matNumberValue = matNumberValue.substring(matNumberValue.indexOf('(')+1,matNumberValue.indexOf(')'))
                }
                
                def serialNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()).getObjectAttributeValueBeans() as ArrayList
                def serialNumberValue
                if(serialNumber.size() &gt; 0){
                    serialNumber = serialNumber.toString()
                    serialNumberValue = serialNumber.substring(serialNumber.indexOf('(')+1,serialNumber.indexOf(')'))
                }               

                if(appliedToValue.toString().equals("BOTH") || appliedToValue.toString().equals("SUPPLIER")){
                    //get "TOTAL_AMOUNT_SUPPLIER" for that component
                    def totCustomer = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans()
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteMatCustomer.add(matNumberValue.toString() + (!serialNumber.toString().equals("[]") ? " (" + serialNumberValue.toString() + ")" : " ()"))   
                    }
                }
             }    
        }  

        //OPAA_UNATANTUM_RATES
        if(issue.getCustomFieldValue(unaTantumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(unaTantumRates) != "" &amp;&amp; !issue.getCustomFieldValue(unaTantumRates).toString().equals("")){
            log.debug "Una tantum rates: " + issue.getCustomFieldValue(unaTantumRates)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def umRatesList = issue.getCustomFieldValue(unaTantumRates)

            for(um in umRatesList){
                //extract insight key ang get object
                def umRate=um.toString()
                def umRateKey = umRate.substring(umRate.indexOf('(')+1,umRate.indexOf(')'))
                def umRateObject = objectFacade.loadObjectBean(umRateKey)
                //get "APPLIED_TO" for that rate
                def umAppliedTo = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                def umAppliedToValue = umAppliedTo.substring(umAppliedTo.indexOf('(')+1,umAppliedTo.indexOf(')'))

                def umRateRef = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
                

                def umRateRefKey
                def umRateRefValue
                if(umRateRef.size() &gt; 0){
                    umRateRef = umRateRef.toString()
                    umRateRefKey = umRateRef.substring(umRateRef.indexOf('(')+1,umRateRef.indexOf(')'))
                    def umRateRefObject = objectFacade.loadObjectBean(OPAA + umRateRefKey)
                    umRateRefValue = objectFacade.loadObjectAttributeBean(umRateRefObject.getId(), properties['iobj.rate.name'].toString()).getObjectAttributeValueBeans().toString()
                    umRateRefValue = umRateRefValue.substring(umRateRefValue.indexOf('(')+1,umRateRefValue.indexOf(')'))
                }
                
                if(umAppliedToValue.toString().equals("BOTH") || umAppliedToValue.toString().equals("SUPPLIER")){
                    //get "TOTAL_AMOUNT_SUPPLIER" for that component
                    def totCustomer = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateCustomer.add(umRateRefValue.toString())
                    }
                }
             }    
        }

        //OPAA_LABOUR_RATES
        if(issue.getCustomFieldValue(labourRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(labourRates) != "" &amp;&amp; !issue.getCustomFieldValue(labourRates).toString().equals("")){
            log.debug "Labour rates: " + issue.getCustomFieldValue(labourRates)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def labourRatesList = issue.getCustomFieldValue(labourRates)

            for(lb in labourRatesList){
                //extract insight key ang get object
                def lbRate=lb.toString()
                def lbRateKey = lbRate.substring(lbRate.indexOf('(')+1,lbRate.indexOf(')'))
                def lbRateObject = objectFacade.loadObjectBean(lbRateKey)
                //get "APPLIED_TO" for that rate
                def lbAppliedTo = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                def lbAppliedToValue = lbAppliedTo.substring(lbAppliedTo.indexOf('(')+1,lbAppliedTo.indexOf(')'))

                def lbRateRef = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
                
                def lbRateRefKey
                def lbRateRefValue
                if(lbRateRef.size() &gt; 0){
                    lbRateRef = lbRateRef.toString()
                    lbRateRefKey = lbRateRef.substring(lbRateRef.indexOf('(')+1,lbRateRef.indexOf(')'))
                    def lbRateRefObject = objectFacade.loadObjectBean(OPAA + lbRateRefKey)
                    lbRateRefValue = objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.name'].toString()).getObjectAttributeValueBeans().toString()
                    lbRateRefValue = lbRateRefValue.substring(lbRateRefValue.indexOf('(')+1,lbRateRefValue.indexOf(')'))
                }
                
                /*
                def techRef = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), "TECHNICIAN_REF").getObjectAttributeValueBeans()
                def techRefKey
                def techRefValue
                if(techRef.size() &gt; 0){
                    techRef = techRef.toString()
                    techRefKey = techRef.substring(techRef.indexOf('(')+1,techRef.indexOf(')'))
                    def umRateRefObject = objectFacade.loadObjectBean(OPAA + umRateRefKey)
                    techRefValue = objectFacade.loadObjectAttributeBean(techRefObject.getId(), "Name").getObjectAttributeValueBeans().toString()
                    techRefValue = umRateRefValue.substring(techRefValue.indexOf('(')+1,techRefValue.indexOf(')'))
                }
                */

                if(lbAppliedToValue.toString().equals("BOTH") || lbAppliedToValue.toString().equals("SUPPLIER")){
                    //get "TOTAL_AMOUNT_SUPPLIER" for that component
                    def totCustomer = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateCustomer.add(lbRateRefValue.toString()/* + " (" + techRefValue.toString() + ")"*/)
                    }
                }
             }    
        }

        //OPAA_TRAVEL_RATES
        if(issue.getCustomFieldValue(travelRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(travelRates) != "" &amp;&amp; !issue.getCustomFieldValue(travelRates).toString().equals("")){
            log.debug "Travel rates: " + issue.getCustomFieldValue(travelRates)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def travelRatesList = issue.getCustomFieldValue(travelRates)

            for(tr in travelRatesList){
                //extract insight key ang get object
                def trRate=tr.toString()
                def trRateKey = trRate.substring(trRate.indexOf('(')+1,trRate.indexOf(')'))
                def trRateObject = objectFacade.loadObjectBean(trRateKey)
                //get "APPLIED_TO" for that rate
                def trAppliedTo = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                def trAppliedToValue = trAppliedTo.substring(trAppliedTo.indexOf('(')+1,trAppliedTo.indexOf(')'))

                def trRateRef = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
                
                def trRateRefKey
                def trRateRefValue
                if(trRateRef.size() &gt; 0){
                    trRateRef = trRateRef.toString()
                    trRateRefKey = trRateRef.substring(trRateRef.indexOf('(')+1,trRateRef.indexOf(')'))
                    def trRateRefObject = objectFacade.loadObjectBean(OPAA + trRateRefKey)
                    trRateRefValue = objectFacade.loadObjectAttributeBean(trRateRefObject.getId(), properties['iobj.rate.name'].toString()).getObjectAttributeValueBeans().toString()
                    trRateRefValue = trRateRefValue.substring(trRateRefValue.indexOf('(')+1,trRateRefValue.indexOf(')'))
                }

                if(trAppliedToValue.toString().equals("BOTH") || trAppliedToValue.toString().equals("SUPPLIER")){
                    //get "TOTAL_AMOUNT_SUPPLIER" for that component
                    def totCustomer = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateCustomer.add(trRateRefValue.toString())
                    }
                }
             }    
        }

    }


    def output = new ArrayList()

    if (!errors &amp;&amp; !warnings){
        return true
    }else{
        if(!errors &amp;&amp; warnings){
            //Se ci sono solo warnings verifico se l'utente ha già dichiarato di voler proseguire comunque
            // - transition field "OPAA_CHECK_AND_CONFIRM"="Yes"
            // - in caso contrario invio i warning a FE

            //log.debug "transitionCheck: " + issue.getCustomFieldValue(transitionCheck)
            //log.debug "result: " + issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")
            if(issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")){
                //log.debug "return true - transitionCheck = Yes"
                return true
            }else{
                def wList = new ArrayList()

                if(warningEmptyQuoteRateCustomer.size() &gt; 0){
                    def wListConfirmEmptyRate = new ArrayList()
                    wListConfirmEmptyRate.add("W")
                    wListConfirmEmptyRate.add("SUPPLIER_CONFIRM_EMPTY_RATES")
                    wListConfirmEmptyRate.add(null)
                    wListConfirmEmptyRate.add(warningEmptyQuoteRateCustomer)

                    wList.add(wListConfirmEmptyRate)
                }

                if(warningEmptyQuoteMatCustomer.size() &gt; 0){
                    def wListConfirmEmptyMatQuote = new ArrayList()
                    wListConfirmEmptyMatQuote.add("W")
                    wListConfirmEmptyMatQuote.add("SUPPLIER_CONFIRM_EMPTY_MAT_QUOTE")
                    wListConfirmEmptyMatQuote.add(null)
                    wListConfirmEmptyMatQuote.add(warningEmptyQuoteMatCustomer)

                    wList.add(wListConfirmEmptyMatQuote)
                }

                output.add(wList)
                throw new InvalidInputException("W", output.toString())   
            }

        }
        if(errors &amp;&amp; !warnings){
            def eList = new ArrayList()

            output.add(eList)
            throw new InvalidInputException("E", output.toString())   
        }
        if(errors &amp;&amp; warnings){
            def eList = new ArrayList()
            def wList = new ArrayList()

            if(warningEmptyQuoteRateCustomer.size() &gt; 0){
                def wListConfirmEmptyRate = new ArrayList()
                wListConfirmEmptyRate.add("W")
                wListConfirmEmptyRate.add("SUPPLIER_CONFIRM_EMPTY_RATES")
                wListConfirmEmptyRate.add(null)
                wListConfirmEmptyRate.add(warningEmptyQuoteRateCustomer)

                wList.add(wListConfirmEmptyRate)
            }

            if(warningEmptyQuoteMatCustomer.size() &gt; 0){
                def wListConfirmEmptyMatQuote = new ArrayList()
                wListConfirmEmptyMatQuote.add("W")
                wListConfirmEmptyMatQuote.add("SUPPLIER_CONFIRM_EMPTY_MAT_QUOTE")
                wListConfirmEmptyMatQuote.add(null)
                wListConfirmEmptyMatQuote.add(warningEmptyQuoteMatCustomer)

                wList.add(wListConfirmEmptyMatQuote)
            }

            output.add(eList)
            output.add(wList)
            throw new InvalidInputException("WE", output.toString())  
        }
    }
//}catch(Exception e){
//    log.debug "Exception: " + e
//    throw new InvalidInputException("Exception", e.toString())  
//}
</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_NOTES">OP Email Notification: PURCHASE_ORDER_TO_SUPPLIER</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import org.apache.log4j.Category
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)
import com.atlassian.jira.issue.link.IssueLink

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def requestMethod
def baseURL

URL url
HttpURLConnection connection

requestMethod = "POST";

def relatesInIssueLink=false
def relatesOutIssueLink=false
def linkedTickets=new ArrayList()

List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesInIssueLink=true
        linkedTickets.add(issueLink.getSourceObject())
        log.debug "Issue con relatesInIssueLink"
    }
}
List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesOutIssueLink=true
        linkedTickets.add(issueLink.getDestinationObject())
        log.debug "Issue con relatesOutIssueLink"
    }
}

def body_req = []

if(relatesInIssueLink || relatesOutIssueLink){
    body_req = [
        "templateName": properties['tt.purchaseOrderToS'].toString(),
        "pec": false,
        "issueKey": issue.key,
        "linkedTickets": linkedTickets
    ]    
}else{
    body_req = [
        "templateName": properties['tt.purchaseOrderToS'].toString(),
        "pec": false,
        "issueKey": issue.key
    ] 
}

baseURL = "http://" + properties['api.env'].toString() + "/op/rest/jira/AA/transaction/mail/send"
url = new URL(baseURL)
connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.outputStream
connection.outputStream.withWriter("UTF-8") { new StreamingJsonBuilder(it, body_req) }
log.debug connection.outputStream
connection.connect();

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()
    eListErrors.add("E")
    eListErrors.add("SENDMAIL")
    errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
    eListErrors.add(errorMsgs)
    eList.add(eListErrors)

    output.add(eList)
    throw new InvalidInputException("E", output.toString())
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="221" name="Invia Mail Rapporto di Intervento" view="fieldscreen">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19912</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_NOTES">OP: If status=COMPLETED TO BE CLOSED &amp;&amp; ONSITE_REPORT = null - Notification has not been sent</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
cfValues[properties['cf.wfOnsiteReport']] == null|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
              <condition type="class">
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">issue.issueType.name == 'Maintenance Ticket'|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_NOTES">OP: linkedTickets!=null =&gt; Check with user the required Email Recipients</arg>
              <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import com.atlassian.jira.issue.link.IssueLink
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

Issue issue = issue

def fieldsRequired = false
def automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]
def sendMailTo =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.sendMailToLinked'].toString())[0]
def requiredFields = new ArrayList()
def relatesInIssueLink=false
def relatesOutIssueLink=false

/*OP-1038: Chiedo all'utente se e a chi vuole inviare la notifica del rapporto di intervento che verrà generato.
Lo chiedo solo se il ticket su cui sto eseguendo la transazione non è stato chiuso in automatico dal sistema e solo se non gli era già stato chiesto prima*/
log.debug "issue.getCustomFieldValue(automaticallyClosed): " + issue.getCustomFieldValue(automaticallyClosed)
log.debug "issue.getCustomFieldValue(sendMailTo): " + issue.getCustomFieldValue(sendMailTo)
log.debug "transientVars: " + transientVars
log.debug "issue.getCustomFieldValue(sendMailTo).toString(): " + issue.getCustomFieldValue(sendMailTo).toString()

List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();
    
    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
		relatesInIssueLink=true
        log.debug "Issue con relatesInIssueLink"
        break
    }
}
List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();
    
    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
		relatesOutIssueLink=true
        log.debug "Issue con relatesOutIssueLink"
        break
    }
}

log.debug issue.key + " (relatesInIssueLink || relatesOutIssueLink): " + (relatesInIssueLink || relatesOutIssueLink)
log.debug issue.key + " (issue.getCustomFieldValue(automaticallyClosed) " + issue.getCustomFieldValue(automaticallyClosed)
log.debug issue.key + " issue.getCustomFieldValue(sendMailTo)==null " + (issue.getCustomFieldValue(sendMailTo)==null)

if((relatesInIssueLink || relatesOutIssueLink) /*&amp;&amp; (issue.getCustomFieldValue(automaticallyClosed)==null || !issue.getCustomFieldValue(automaticallyClosed).toString().equals("Yes"))*/ &amp;&amp; issue.getCustomFieldValue(sendMailTo)==null){
	fieldsRequired = true
	requiredFields.add(properties['cf.sendMailToLinked'].toString())
}

log.debug "FieldsRequired: " + fieldsRequired
def output = new ArrayList()

if(fieldsRequired){
	def fList = new ArrayList()

        if(requiredFields.size() &gt; 0){
        	def fListDetail = new ArrayList()
                fListDetail.add("F")
                fListDetail.add("USER_INPUT")
            	fListDetail.add(null)
                fListDetail.add(requiredFields)
                fList.add(fListDetail)
        }

        output.add(fList)
        throw new InvalidInputException("F", output.toString())   
}else{
    return true
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_NOTES">OP: REST API: OP Email Notification: ONSITE_REPORT</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.event.type.EventDispatchOption
import org.apache.log4j.Category
import com.atlassian.jira.issue.link.IssueLink
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def requestMethod
def baseURL
def sendMailTo =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.sendMailToLinked'].toString())[0]
def onsiteReportDate = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.wfOnsiteReport'].toString())[0]
def sendMailToRec =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.sendMailToRecipients'].toString())[0]

def relatesInIssueLink=false
def relatesOutIssueLink=false
def linkedTickets=new ArrayList()
log.debug issue.getCustomFieldValue(sendMailTo).toString()

List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesInIssueLink=true
        linkedTickets.add(issueLink.getSourceObject().toString())
        log.debug "Issue con relatesInIssueLink"
    }
}
List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesOutIssueLink=true
        linkedTickets.add(issueLink.getDestinationObject().toString())
        log.debug "Issue con relatesOutIssueLink"
    }
}

def body_req = []

if((relatesInIssueLink || relatesOutIssueLink) &amp;&amp; !issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.noEmail'].toString()) &amp;&amp; issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.currentReport'].toString())){
    //OP-1038: inviare solo la mail con il rapporto di intervento del ticket corrente
    body_req = [
        "templateName": properties['tt.onSiteReport'].toString(),
        "pec": false,
        "issueKey": issue.key,
        "additionalRecipients": issue.getCustomFieldValue(sendMailToRec).toString()
    ]
    log.debug "in1: body_req: " + body_req
}else if((relatesInIssueLink || relatesOutIssueLink) &amp;&amp; !issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.noEmail'].toString()) &amp;&amp; issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.allLinked'].toString())){
    //OP-1038: inviare la mail con tutti i rapporti di intervento dei ticket collegati
    body_req = [
        "templateName": properties['tt.onSiteReport'].toString(),
        "pec": false,
        "issueKey": issue.key,
        "linkedTickets": linkedTickets,
        "additionalRecipients": issue.getCustomFieldValue(sendMailToRec).toString()
    ]
    log.debug "in2: body_req: " + body_req
}else if(!relatesInIssueLink &amp;&amp; !relatesOutIssueLink){
    body_req = [
        "templateName": properties['tt.onSiteReport'].toString(),
        "pec": false,
        "issueKey": issue.key,
        "additionalRecipients": issue.getCustomFieldValue(sendMailToRec).toString()
    ]
    log.debug "in3: body_req: " + body_req
}

/* REST API per Invio Notifica Email ONSITE_REPORT */
requestMethod = "POST";
log.debug "preparo la chiamata"
baseURL = "http://" + properties["api.env"].toString() + "/op/rest/jira/AA/transaction/mail/send"
URL url = new URL(baseURL)
HttpURLConnection connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.outputStream
connection.outputStream.withWriter("UTF-8") { new StreamingJsonBuilder(it, body_req) }
log.debug "connection.outputStream: " + connection.outputStream
connection.connect();
//log.debug "url: " + url
log.debug "ResponseCode:" + connection.getResponseCode()
log.debug "ResponseMessage:" + connection.getResponseMessage()

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "body_req: " + body_req
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()

    def outputMsg = ((HttpURLConnection)connection).errorStream.text
    log.debug "((HttpURLConnection)connection).errorStream.text: " + outputMsg

    def jsonSlurper = new JsonSlurper()
    def json_object = jsonSlurper.parseText(outputMsg)
    assert json_object instanceof Map  
    log.debug "message: " +  json_object.message

    eListErrors.add("E")
    eListErrors.add("SENDMAIL")
    errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
    eListErrors.add(json_object.message)
    eList.add(eListErrors)

    output.add(eList)
    throw new InvalidInputException("E", output.toString())
    
}else{
    /*L'email è stata inviata correttamente, aggiorno il campo ONSITE_REPORT con la data corrente*/

    // log.warn "issue "+issue.getKey()
    def cfv = issue.getCustomFieldValue(onsiteReportDate)
    if (!cfv) {
        def t0  = new java.sql.Timestamp(System.currentTimeMillis())
        log.warn "StartTime =&gt; '"+t0.toString()+"'"
        def mv = new ModifiedValue(onsiteReportDate, t0)
        def ch = new DefaultIssueChangeHolder()
        onsiteReportDate.updateValue(null, issue, mv, ch) 
    } else {
        log.warn "StartTime == '"+cfv.toString()+"'"
    }
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="6">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="field.name">customfield_22641</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="7" name="Closed">
      <meta name="jira.status.id">6</meta>
      <actions>
        <action id="231" name="Genera Offerta per Materiali da Preventivare">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_NOTES">OP: Generazione ticket di preventivazione - solo se ci sono OP_REQUIRED_MATERIALS e se OPAA_QUOTE_TICKET = null</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
cfValues[properties['cf.requiredMaterials']] != null &amp;&amp; cfValues[properties['cf.offerLinkedIssue']] == null|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="7">
              <post-functions>
                <function type="class">
                  <arg name="field.copyFieldSource3">customfield_22601</arg>
                  <arg name="field.copyFieldSource2">customfield_22600</arg>
                  <arg name="field.copyFieldSource1">customfield_22609</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="field.copyFieldSource9" />
                  <arg name="field.copyFieldSource8">customfield_22607</arg>
                  <arg name="field.copyFieldSource7">customfield_22700</arg>
                  <arg name="field.copyFieldSource6">customfield_22651</arg>
                  <arg name="field.copyFieldSource5">customfield_22662</arg>
                  <arg name="field.copyFieldSource4">customfield_22602</arg>
                  <arg name="field.issuePriorityId">0</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_ASSIGNEE</arg>
                  <arg name="╡крz╙ыв7Ь╡'еy╦^t+м╢ЙЕЙщ]" />
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10500:INWARD</arg>
                  <arg name="field.enablingCustomFieldId">customfield_22609</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                  <arg name="field.createTargetValue8" />
                  <arg name="field.existingAttachmentEnablingCustomFieldId" />
                  <arg name="targetIssueTypeDefinedByCfSelection" />
                  <arg name="field.createTargetValue1" />
                  <arg name="field.copyFieldMode2">OVERWRITE</arg>
                  <arg name="field.originIssue_copyFieldSource1" />
                  <arg name="field.copyFieldMode3">OVERWRITE</arg>
                  <arg name="field.createTargetValue3" />
                  <arg name="field.copyFieldMode1">OVERWRITE</arg>
                  <arg name="field.createTargetValue2" />
                  <arg name="field.copyFieldSeparator8" />
                  <arg name="field.createTargetValue5" />
                  <arg name="field.copyFieldSeparator7" />
                  <arg name="field.createTargetValue4" />
                  <arg name="field.copyFieldSeparator6" />
                  <arg name="field.copyFieldSeparator5" />
                  <arg name="field.createTargetValue7" />
                  <arg name="field.copyFieldSeparator4" />
                  <arg name="field.createTargetValue6" />
                  <arg name="field.copyFieldDestination1">customfield_22658</arg>
                  <arg name="field.copyFieldDestination2">customfield_22600</arg>
                  <arg name="issueTypeId">13001</arg>
                  <arg name="field.copyFieldDestination3">customfield_22601</arg>
                  <arg name="field.copyFieldDestination4">customfield_22602</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="field.attachmentEnablingCustomFieldId" />
                  <arg name="field.copyFieldDestination5">customfield_22662</arg>
                  <arg name="field.copyFieldDestination6">customfield_22651</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="field.copyFieldDestination7">customfield_22700</arg>
                  <arg name="field.copyFieldDestination8">customfield_22607</arg>
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="targetProjectType">H</arg>
                  <arg name="transitionAttachmentsOperation">rr</arg>
                  <arg name="field.copyFieldSeparator3" />
                  <arg name="field.copyFieldSeparator2" />
                  <arg name="field.copyFieldSeparator1" />
                  <arg name="field.copyFieldMode8">OVERWRITE</arg>
                  <arg name="field.copyFieldMode6">OVERWRITE</arg>
                  <arg name="field.copyFieldMode7">OVERWRITE</arg>
                  <arg name="field.copyFieldMode4">OVERWRITE</arg>
                  <arg name="field.copyFieldMode5">OVERWRITE</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="scopeDestination-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">á÷{wnöq÷Ú×5o¾4oÝ|ñÇZy¦ç_9s}·</arg>
                  <arg name="FIELD_NOTES">OP: Set OP_OFFER_TKT=Yes on just created linkedIssue</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.IssueManager
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import groovy.json.JsonSlurper
import groovy.json.StreamingJsonBuilder
import com.atlassian.jira.config.util.JiraHome
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import java.text.SimpleDateFormat
import java.text.ParseException
import com.atlassian.jira.config.properties.APKeys
import com.atlassian.jira.issue.link.LinkCollectionImpl;
import com.atlassian.jira.issue.link.IssueLink;
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)
IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)

/*Script Variables*/
//Per Post Function
issue = issue
//Per test da console
//IssueManager issueManager = ComponentAccessor.getIssueManager()
//issue = issueManager.getIssueByKeyIgnoreCase("OPUT-257")
log.debug "Issue: " + issue
def found=false
def linkedIssue
def issueService = ComponentAccessor.getIssueService()

List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId());
log.debug "allInIssueLink: " + allInIssueLink
for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();
    def linkedIssueTemp = issueLink.getSourceObject()
    String type = linkedIssueTemp.getIssueType().getName();

    log.debug(issueLink.issueLinkType.getName()) 
    
    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsTrigger'].toString())){
        found=true
        linkedIssue=linkedIssueTemp
    }
}
log.debug "found: " + found

if(found){
	def destStatusObject = linkedIssue.getStatusObject()
    log.debug "destStatusObject: " + destStatusObject
    log.debug "linkedIssue: " + linkedIssue
    def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
	// Is the status of the linked issue "Installing" ?
    
    def customFieldManager = ComponentAccessor.customFieldManager
    def offerIssueField = customFieldManager.getCustomFieldObjectsByName(properties['cf.offerLinkedIssue'].toString()).first()
    def maintenanceIssueField = customFieldManager.getCustomFieldObjectsByName(properties['cf.maintenanceLinkedIssue'] ? properties['cf.maintenanceLinkedIssue'].toString() : "OP_MAINTENANCE_LINKED_ISSUE").first()
    def offerIssueBoolField = customFieldManager.getCustomFieldObjectsByName(properties['cf.offerTkt'].toString()).first()
    
    //Set OPAA_OFFER_TKT=Yes on just created linkedIssue
    def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
    def mi = (MutableIssue) linkedIssue

    def fieldConfig = offerIssueBoolField.getRelevantConfig(linkedIssue)
    log.warn "fieldConfig: " + fieldConfig
    def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
    offerIssueBoolField.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(offerIssueBoolField), cfNewValue), new DefaultIssueChangeHolder())
	maintenanceIssueField.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(maintenanceIssueField), issue.key.toString()), new DefaultIssueChangeHolder())
    
    ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
    issueIndexingService.reIndex(linkedIssue)    
    
    log.debug "offerIssueField: " + offerIssueField
    log.debug "linkedIssue: " + linkedIssue
    offerIssueField.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(offerIssueField), linkedIssue.key.toString()), new DefaultIssueChangeHolder())
    log.debug "updated: " + issue.getCustomFieldValue(offerIssueField)
    
    if (destStatusObject.name == properties['wf.open'].toString()) {
        // Prepare our input for the transition
        def issueInputParameters = issueService.newIssueInputParameters()
        issueInputParameters.with {
            setSkipScreenCheck(true)
        }
        // Validate transitioning the linked issue to "Signs Needed"
        def validationResult = issueService.validateTransition(user, linkedIssue.id, (properties['wf.tr.askQuote'] ? properties['wf.tr.askQuote'].toInteger() : 11), issueInputParameters)
        if (validationResult.isValid()) {
            // Perform the transition
            def issueResult = issueService.transition(user, validationResult)
            if (! issueResult.isValid()) {
                log.debug("Failed to transition task ${destIssue.key}, errors: ${issueResult.errorCollection}")
            }else{
                log.debug("Transazione fatta")
            }
        } else {
            log.debug("Could not transition task ${destIssue.key}, errors: ${validationResult.errorCollection}")
        }
    }
    
}</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="241" name="Riapri Tkt">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_NOTES">OP: OPAA_SALES_ORDER_DATE and OPAA_PURCHASE_ORDER_DATE should be null in order to reopen the ticket - otherwise the ticket has already been accounted so it cannot be reopened</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">cfValues['OP_SALES_ORDER_DATE'] == null &amp;&amp; cfValues['OP_PURCHASE_ORDER_DATE'] == null|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="6">
              <post-functions>
                <function type="class">
                  <arg name="field">customfield_22693</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">resolution</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="8" name="To be Quoted">
      <meta name="jira.status.id">14331</meta>
      <actions>
        <action id="251" name="Richiedi Preventivo a Fornitore" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19913</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_NOTES">OP: Check Required Fields</arg>
              <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl
import com.atlassian.jira.issue.IssueManager

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

Issue issue = issue
//IssueManager issueManager = ComponentAccessor.getIssueManager();
//Issue issue = issueManager.getIssueByKeyIgnoreCase("AAS-2761")

def errors = false
def warnings = false

def transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]
def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteMaterials'].toString())[0]

def errorMandatoryFields = new ArrayList()
def errorJobStartedCompletedFields = new ArrayList()
def warningEmptyFields = new ArrayList()

//OPAA_REPLACED_MATERIALS
if(issue.getCustomFieldValue(repMaterials)==null || (String)issue.getCustomFieldValue(repMaterials) == "" || issue.getCustomFieldValue(repMaterials).toString().equals("")){
    log.debug "warnings true"
    warnings = true
    warningEmptyFields.add(properties['cf.quoteMaterials'].toString())
}else{
    //insight classes &amp; components
    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

    //Verifico che ci sia almeno un elemento, di quelli legati nel customfield, con DELETED!=true
    def allDeleted=true
    for(obj in issue.getCustomFieldValue(repMaterials)){
        
        obj=obj.toString()
        def objKey = obj.substring(obj.indexOf('(')+1,obj.indexOf(')'))
        def objObject = objectFacade.loadObjectBean(objKey)
        if(objectFacade.loadObjectAttributeBean(objObject.getId(), properties['iobj.component.deleted'].toString())){
            obTriage = objectFacade.loadObjectAttributeBean(objObject.getId(), properties['iobj.component.deleted'].toString()).createMutable()
            deleted = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()
            if(!deleted){
                allDeleted=false
            }
        }else{
            allDeleted=false
        }      
        //log.debug "obj: " + obj
        //log.debug "allDeleted: " + allDeleted
    }
    if(allDeleted){
        warnings = true
        warningEmptyFields.add(properties['cf.quoteMaterials'].toString())
    }
}

def output = new ArrayList()

if (!errors &amp;&amp; !warnings){
    return true
}else{
    if(!errors &amp;&amp; warnings){
        //Se ci sono solo warnings verifico se l'utente ha già dichiarato di voler proseguire comunque
        // - transition field "OPAA_CHECK_AND_CONFIRM"="Yes"
        // - in caso contrario invio i warning a FE

        //log.debug "transitionCheck: " + issue.getCustomFieldValue(transitionCheck)
        //log.debug "result: " + issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")
        if(issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")){
            return true
        }else{
            def wList = new ArrayList()

            if(warningEmptyFields.size() &gt; 0){
                def wListConfirmEmpty = new ArrayList()
                wListConfirmEmpty.add("W")
                wListConfirmEmpty.add("CONFIRM_EMPTY_FIELDS")
                wListConfirmEmpty.add(null)
                wListConfirmEmpty.add(warningEmptyFields)

                wList.add(wListConfirmEmpty)
            }

            output.add(wList)
            log.debug "throw exception: " + output.toString()
            throw new InvalidInputException("W", output.toString())   
        }

    }
    if(errors &amp;&amp; !warnings){
        def eList = new ArrayList()

        if(errorMandatoryFields.size() &gt; 0){
            def eListMandatory = new ArrayList()
            eListMandatory.add("E")
            eListMandatory.add("MANDATORY_FIELDS")
            eListMandatory.add(null)
            eListMandatory.add(errorMandatoryFields)
            eList.add(eListMandatory)
        }

        output.add(eList)
        log.debug "throw exception: " + output.toString()
        throw new InvalidInputException("E", output.toString())   
    }
    if(errors &amp;&amp; warnings){
        def eList = new ArrayList()
        def wList = new ArrayList()
        if(errorMandatoryFields.size() &gt; 0){
            def eListMandatory = new ArrayList()
            eListMandatory.add("E")
            eListMandatory.add("MANDATORY_FIELDS")
            eListMandatory.add(null)
            eListMandatory.add(errorMandatoryFields)
            eList.add(eListMandatory)
        }

        if(warningEmptyFields.size() &gt; 0){
            def wListConfirmEmpty = new ArrayList()
            wListConfirmEmpty.add("W")
            wListConfirmEmpty.add("CONFIRM_EMPTY_FIELDS")
            wListConfirmEmpty.add(null)
            wListConfirmEmpty.add(warningEmptyFields)

            wList.add(wListConfirmEmpty)
        }

        output.add(eList)
        output.add(wList)
        log.debug "throw exception: " + output.toString()
        throw new InvalidInputException("WE", output.toString())  
    }
}
</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="9">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">OP: Valorizzazione listini fornitore</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService
import org.apache.log4j.Category
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();

IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)

def requestMethod
def baseURL

log.debug "Valorizzazione listini"

/* REST API per Contabilizzazione Intervento */
requestMethod = "GET";

baseURL = "http://" + properties['api.env'].toString() + "/op/rest/AA/ticket/issueKey/" + issue.key.toString() + "/close?populateRates=false&amp;materialAttribute=" + properties['cf.quoteMaterials'].toString()
log.debug "baseUrl: " + baseURL

/*Definire parametro di input unatantum=true|false in base al valore della variabile booleana unatantum*/
URL url = new URL(baseURL)
HttpURLConnection connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.connect();
log.debug "ResponseCode:" + connection.getResponseCode()
log.debug "ResponseMessage:" + connection.getResponseMessage()

//IssueIndexingService issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)
//issueIndexingService.reIndex(issueManager.getIssueObject(issue.key.toString()))

//def unaTantumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName("OPAA_UNATANTUM_RATES")[0]
//log.warn "unaTantumRates: " + issue.getCustomFieldValue(unaTantumRates)

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()
    log.debug "Response: " + connection

    eListErrors.add("E")
    eListErrors.add("OP-TKT-ACCOUNTING")
    errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
    eListErrors.add(errorMsgs)
    eList.add(eListErrors)

    output.add(eList)
    throw new InvalidInputException("E", output.toString())
}</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22693</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="9" name="Waiting for Supplier Quote">
      <meta name="jira.status.id">14332</meta>
      <actions>
        <action id="261" name="Preventivo Fornitore Inserito" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19914</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">Ûw»ë_yáÞôw½uwWçyi§üåþûßÎúñ×|</arg>
              <arg name="FIELD_NOTES">OP: Check mandatory attachments: Preventivo Fornitore</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService
import org.apache.log4j.Category
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();

IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)
def automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]

def requestMethod
def baseURL

int OPAA = properties['ischema.aa.id'].toString().toInteger()
int DBO = properties['ischema.dbo.id'].toString().toInteger()
 
Issue issue = issue

def errors = false
def warnings = false

def errorMandatoryFields = new ArrayList()

/*Rimozione allegato rapporto di intervento appena creato*/
/* Get Insight IQL Facade from plugin accessor */
Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade"); 
def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);

/* Get Insight Object Facade from plugin accessor */
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");
def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

/* Get Insight Object Type Facade from plugin accessor */
Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade");
def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);

/* Get Insight Object Attribute Facade from plugin accessor */
Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);

Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory");
def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);

/* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include " around value */
def objects = iqlFacade.findObjectsByIQLAndSchema(DBO, "\"" + properties['iobj.attachmentCategory.categoryRef'].toString() + "\".\"" + properties['iobj.attachmentCategory.name'].toString() + "\" = \"" + properties['iobj.attachmentCategory.objs.prevFornitore'].toString() + "\" AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND object HAVING connectedTickets(key = " + issue.key.toString() + ")"); // See the complete list of possible IQL on the Insight Query Language documentation page
/* If this is a mandatory field you should be able to do this: */
log.info("Insight object: " + objects[0]);
log.debug "\"" + properties['iobj.attachmentCategory.categoryRef'].toString() + "\".\"" + properties['iobj.attachmentCategory.name'].toString() + "\" = \"" + properties['iobj.attachmentCategory.objs.prevFornitore'].toString() + "\" AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND object HAVING connectedTickets(key = " + issue.key.toString() + ")"

if(!objects[0]){
    /*Nessun preventivo allegato*/
    errors = true
    errorMandatoryFields.add(properties['iobj.attachmentCategory.objs.prevFornitore'] ? properties['iobj.attachmentCategory.objs.prevFornitore'].toString() : "Preventivo Fornitore")
}

def output = new ArrayList()

if (!errors &amp;&amp; !warnings){
    return true
}else{
    if(!errors &amp;&amp; warnings){
        if(issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")){
            //log.debug "return true"
            return true
        }else{
            def wList = new ArrayList()

            if(warningEmptyFields.size() &gt; 0){
                def wListConfirmEmpty = new ArrayList()
                wListConfirmEmpty.add("W")
                wListConfirmEmpty.add("CONFIRM_EMPTY_FIELDS")
                wListConfirmEmpty.add(null)
                wListConfirmEmpty.add(warningEmptyFields)

                wList.add(wListConfirmEmpty)
            }

            output.add(wList)
            throw new InvalidInputException("W", output.toString())   
        }
    }
    if(errors &amp;&amp; !warnings){
        def eList = new ArrayList()
        
        if(errorMandatoryFields.size() &gt; 0){
            def eListMandatory = new ArrayList()
            eListMandatory.add("E")
            eListMandatory.add("MANDATORY_ATTACHMENTS")
            eListMandatory.add(null)
            eListMandatory.add(errorMandatoryFields)
            eList.add(eListMandatory)
        }
        
		output.add(eList)
        throw new InvalidInputException("E", output.toString())   
    }
    if(errors &amp;&amp; warnings){
        def eList = new ArrayList()
        def wList = new ArrayList()
        
        if(errorMandatoryFields.size() &gt; 0){
            def eListMandatory = new ArrayList()
            eListMandatory.add("E")
            eListMandatory.add("MANDATORY_ATTACHMENTS")
            eListMandatory.add(null)
            eListMandatory.add(errorMandatoryFields)
            eList.add(eListMandatory)
        }
        
        if(warningEmptyFields.size() &gt; 0){
            def wListConfirmEmpty = new ArrayList()
            wListConfirmEmpty.add("W")
            wListConfirmEmpty.add("CONFIRM_EMPTY_FIELDS")
            wListConfirmEmpty.add(null)
            wListConfirmEmpty.add(warningEmptyFields)

            wList.add(wListConfirmEmpty)
        }
        
        output.add(eList)
        output.add(wList)
        throw new InvalidInputException("WE", output.toString())  
    }
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_NOTES">OP: Check Required Fields </arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper
import groovy.json.JsonBuilder
import groovy.json.StreamingJsonBuilder

import com.atlassian.jira.issue.CustomFieldManager
import com.atlassian.jira.issue.fields.CustomField
import com.atlassian.jira.issue.IssueManager
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.issue.link.IssueLink

import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService

import org.apache.log4j.Category
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

Issue issue = issue
//Per test da console
//IssueManager issueManager = ComponentAccessor.getIssueManager();
//Issue issue = issueManager.getIssueByKeyIgnoreCase("AAS-2761")

def errors = false
def warnings = false
def relatesInIssueLink=false
def relatesOutIssueLink=false
def wListConfirmEmptyMatQuoteLinked = new ArrayList()
def wListConfirmEmptyRateQuoteLinked = new ArrayList()

def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteMaterials'].toString())[0]
def labourRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteLabourRates'].toString())[0]

/*Conferma utente su warnings*/
def transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]

/*Insight Schema IDs*/
def DBObjects = properties['ischema.dbo'].toString() + "-"
def OPAA = properties['ischema.aa'].toString() + "-"

/*Array warnings ed errors per la issue principale, uno per ogni tipologia di errore o warning*/
def issueWarningEmptyQuoteMatSupplier = new ArrayList()
def issueWarningEmptyQuoteRateSupplier = new ArrayList()
//def issueError...

/*Verifica campi su ticket oggetto della transazione*/
//OP_QUOTE_MATERIALS
if(issue.getCustomFieldValue(repMaterials)!=null &amp;&amp; (String)issue.getCustomFieldValue(repMaterials) != "" &amp;&amp; !issue.getCustomFieldValue(repMaterials).toString().equals("")){
    log.debug "Materiali: " + issue.getCustomFieldValue(repMaterials)
    /*Ciclare tutti gli oggetti associati al campo*/
    //insight classes &amp; components
    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

    def repMatList = issue.getCustomFieldValue(repMaterials)

    for(mat in repMatList){
        //extract insight key ang get object
        def component=mat.toString()
        def componentKey = component.substring(component.indexOf('('+OPAA)+1,component.length()-1)
        def componentObject = objectFacade.loadObjectBean(componentKey)
        //get "DELETED" for that component
		def matDel = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : ""
        def matDelValue = matDel != "" ? matDel.substring(matDel.indexOf('(')+1,matDel.indexOf(')')) : ""
		log.debug "matObj: " + componentObject
        log.debug "del: " + matDel
        //get "APPLIED_TO" for that component
        def appliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans() as ArrayList
        def appliedToValue
        if(appliedTo.size() &gt; 0){
            appliedTo = appliedTo.toString()
            appliedToValue = appliedTo.substring(appliedTo.indexOf('(')+1,appliedTo.indexOf(')'))
            //log.debug "appliedToValue: " + appliedToValue
        }

        def matNumber
        def matNumberKey
        def matNumberValue
        if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString())){
            matNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).getObjectAttributeValueBeans() as ArrayList
            if(matNumber.size() &gt; 0){
                matNumber = matNumber.toString()
                matNumberKey = matNumber.substring(matNumber.indexOf('(')+1,matNumber.indexOf(')'))
                def matNumberObject = objectFacade.loadObjectBean(DBObjects + matNumberKey)
                matNumberValue = objectFacade.loadObjectAttributeBean(matNumberObject.getId(), properties['iobj.material.name'].toString()).getObjectAttributeValueBeans().toString()
                matNumberValue = matNumberValue.substring(matNumberValue.indexOf('(')+1,matNumberValue.indexOf(')'))
            }
        }

        def serialNumber
        def serialNumberValue
        if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString())){
            serialNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()).getObjectAttributeValueBeans() as ArrayList
            if(serialNumber.size() &gt; 0){
                serialNumber = serialNumber.toString()
                serialNumberValue = serialNumber.substring(serialNumber.indexOf('(')+1,serialNumber.indexOf(')'))
            }               
        }

        if((appliedToValue.toString().equals("BOTH") || appliedToValue.toString().equals("SUPPLIER")) &amp;&amp; !matDelValue.equals("true")){
            //get "TOTAL_AMOUNT_SUPPLIER" for that component
            def totSupplier
            if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString())){
                totSupplier = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString()).getObjectAttributeValueBeans()
            }
            if(!totSupplier || totSupplier[0].getValue().toString().equals("0.0")){
                warnings=true
                issueWarningEmptyQuoteMatSupplier.add(matNumberValue.toString() + ((!serialNumber.toString().equals("null") &amp;&amp; !serialNumber.toString().equals("[]")) ? " (" + serialNumberValue.toString() + ")" : ""))
                log.debug issue.key.toString() + " issueWarningEmptyQuoteMatSupplier: " + issueWarningEmptyQuoteMatSupplier
            }
        }   
    }    
}  

//OPAA_LABOUR_RATES
if(issue.getCustomFieldValue(labourRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(labourRates) != "" &amp;&amp; !issue.getCustomFieldValue(labourRates).toString().equals("")){
    log.debug "Labour rates: " + issue.getCustomFieldValue(labourRates)
    /*Ciclare tutti gli oggetti associati al campo*/
    //insight classes &amp; components
    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

    def labourRatesList = issue.getCustomFieldValue(labourRates)

    for(lb in labourRatesList){
        //extract insight key ang get object
        def lbRate=lb.toString()
        def lbRateKey = lbRate.substring(lbRate.indexOf('(')+1,lbRate.indexOf(')'))
        def lbRateObject = objectFacade.loadObjectBean(lbRateKey)
        //get "DELETED" for that rate
        def lbDel = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : ""
        def lbDelValue = lbDel != "" ? lbDel.substring(lbDel.indexOf('(')+1,lbDel.indexOf(')')) : ""

        //get "APPLIED_TO" for that rate
        def lbAppliedTo = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
        def lbAppliedToValue = lbAppliedTo.substring(lbAppliedTo.indexOf('(')+1,lbAppliedTo.indexOf(')'))

        def lbRateRef
        if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){
            lbRateRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
        }

        def techRef
        if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.technicianRef'].toString())){
            techRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.technicianRef'].toString()).getObjectAttributeValueBeans().toString()
        }

        def lbRateRefKey
        def lbRateRefValue
        if(lbRateRef.size() &gt; 0){
            lbRateRef = lbRateRef.toString()
            lbRateRefKey = lbRateRef.substring(lbRateRef.indexOf('(')+1,lbRateRef.indexOf(')'))
            def lbRateRefObject = objectFacade.loadObjectBean(OPAA + lbRateRefKey)
            lbRateRefValue = objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
            lbRateRefValue = lbRateRefValue.substring(lbRateRefValue.indexOf('(')+1,lbRateRefValue.indexOf(')'))
        }

        def techRefKey
        def techRefValue
        if(techRef){
            techRef = techRef.toString()
            log.debug "techRef: " + techRef
            techRefKey = techRef.substring(techRef.indexOf('(')+1,techRef.indexOf(')'))
            def techRefObject = objectFacade.loadObjectBean(OPAA + techRefKey)
            techRefValue = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()
            techRefValue = lbRateRefValue.substring(techRefValue.indexOf('(')+1,techRefValue.indexOf(')'))
        }

        if((lbAppliedToValue.toString().equals("BOTH") || lbAppliedToValue.toString().equals("SUPPLIER")) &amp;&amp; !lbDelValue.equals("true")){
            //get "TOTAL_AMOUNT_SUPPLIER" for that component
            def totSupplier
            if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString())){
                totSupplier = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()
            }
            if(!totSupplier || totSupplier[0].getValue().toString().equals("0.0")){
                warnings=true
                issueWarningEmptyQuoteRateSupplier.add(lbRateRefValue.toString() + " (" + techRefValue.toString() + ")")
                log.debug issue.key.toString() + " issueWarningEmptyQuoteRateSupplier: " + issueWarningEmptyQuoteRateSupplier
            }
        }
    }    
}
def output = new ArrayList()

if (!errors &amp;&amp; !warnings){
    return true
}else{
    if(!errors &amp;&amp; warnings){
        //Se ci sono solo warnings verifico se l'utente ha già dichiarato di voler proseguire comunque
        // - transition field "OPAA_CHECK_AND_CONFIRM"="Yes"
        // - in caso contrario invio i warning a FE

        //log.debug "transitionCheck: " + issue.getCustomFieldValue(transitionCheck)
        //log.debug "result: " + issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")
        if(issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")){
            //log.debug "return true - transitionCheck = Yes"
            return true
        }else{
            def wList = new ArrayList()

            if(issueWarningEmptyQuoteRateSupplier.size() &gt; 0){
            	def wListConfirmEmptyRate = new ArrayList()
                wListConfirmEmptyRate.add("W")
                wListConfirmEmptyRate.add("SUPPLIER_CONFIRM_EMPTY_RATES")
                wListConfirmEmptyRate.add(null)
                wListConfirmEmptyRate.add(issueWarningEmptyQuoteRateSupplier)
                    
                wList.add(wListConfirmEmptyRate)
            }
            
            if(issueWarningEmptyQuoteMatSupplier.size() &gt; 0){
            	def wListConfirmEmptyMatQuote = new ArrayList()
                wListConfirmEmptyMatQuote.add("W")
                wListConfirmEmptyMatQuote.add("SUPPLIER_CONFIRM_EMPTY_MAT_QUOTE")
                wListConfirmEmptyMatQuote.add(null)
                wListConfirmEmptyMatQuote.add(issueWarningEmptyQuoteMatSupplier)
                    
                wList.add(wListConfirmEmptyMatQuote)
            }

            output.add(wList)
            throw new InvalidInputException("W", output.toString())   
        }

    }
    if(errors &amp;&amp; !warnings){
        def eList = new ArrayList()

        output.add(eList)
        throw new InvalidInputException("E", output.toString())   
    }
    if(errors &amp;&amp; warnings){
        def eList = new ArrayList()
        def wList = new ArrayList()

        if(issueWarningEmptyQuoteRateSupplier.size() &gt; 0){
            def wListConfirmEmptyRate = new ArrayList()
            wListConfirmEmptyRate.add("W")
            wListConfirmEmptyRate.add("SUPPLIER_CONFIRM_EMPTY_RATES")
			wListConfirmEmptyRate.add(null)
            wListConfirmEmptyRate.add(issueWarningEmptyQuoteRateSupplier)

            wList.add(wListConfirmEmptyRate)
        }

        if(issueWarningEmptyQuoteMatSupplier.size() &gt; 0){
            def wListConfirmEmptyMatQuote = new ArrayList()
            wListConfirmEmptyMatQuote.add("W")
            wListConfirmEmptyMatQuote.add("SUPPLIER_CONFIRM_EMPTY_MAT_QUOTE")
            wListConfirmEmptyMatQuote.add(null)
            wListConfirmEmptyMatQuote.add(issueWarningEmptyQuoteMatSupplier)

            wList.add(wListConfirmEmptyMatQuote)
        }

        output.add(eList)
        output.add(wList)
        throw new InvalidInputException("WE", output.toString())  
    }
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="10">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22693</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="271" name="Quote Reminder">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <results>
            <unconditional-result old-status="žée" status="žée" step="9">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">OP Email Notification: REMINDER_FOR_SUPPLIER_QUOTE + Update field REMINDER_FOR_SUPPLIER_QUOTE with new due date</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import org.apache.log4j.Category
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)
import com.atlassian.jira.issue.link.IssueLink 
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import java.sql.Timestamp
import java.text.SimpleDateFormat
import java.text.DateFormat
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.util.IssueChangeHolder
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.event.type.EventDispatchOption
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def requestMethod
def baseURL

URL url
HttpURLConnection connection
def mi = (MutableIssue) issue
def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()

def reminderDate = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.wfReminderForSQuote'].toString())[0]

requestMethod = "POST";
def body_req = []

body_req = [
        "templateName": properties['tt.reminderToS'].toString(),
        "pec": false,
        "issueKey": issue.key
] 

baseURL = "http://" + properties['api.env'].toString() + "/op/rest/jira/AA/transaction/mail/send"
url = new URL(baseURL)
connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.outputStream
connection.outputStream.withWriter("UTF-8") { new StreamingJsonBuilder(it, body_req) }
log.debug connection.outputStream
connection.connect();

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()
    eListErrors.add("E")
    eListErrors.add("SENDMAIL")
    errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
    eListErrors.add(errorMsgs)
    eList.add(eListErrors)

    output.add(eList)
    throw new InvalidInputException("E", output.toString())
}else{

    def date = issue.getCustomFieldValue(reminderDate)
    Date newTDV = new Date()
    
    def newDateformat = newTDV.format('MM/dd/yyyy')
    SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
	def cal = Calendar.getInstance()
    cal.setTime(sdf.parse(newDateformat));
    cal.add(Calendar.DATE, +2); 

    Timestamp DefTDD = new Timestamp(cal.getTimeInMillis())
 
    mi.setCustomFieldValue(reminderDate, DefTDD);
	ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false); 
}</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="10" name="Supplier Quote Received">
      <meta name="jira.status.id">14333</meta>
      <actions>
        <action id="281" name="Invia Offerta al Cliente" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19926</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_NOTES">OP: Check Required Fields</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper
import groovy.json.JsonBuilder
import groovy.json.StreamingJsonBuilder

import com.atlassian.jira.issue.CustomFieldManager
import com.atlassian.jira.issue.fields.CustomField
import com.atlassian.jira.issue.IssueManager
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.issue.link.IssueLink

import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService

import org.apache.log4j.Category
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)
 
Issue issue = issue
//Per test da console
//IssueManager issueManager = ComponentAccessor.getIssueManager();
//issue = issueManager.getIssueByKeyIgnoreCase("AAS-2761")

def errors = false
def warnings = false
def relatesInIssueLink=false
def relatesOutIssueLink=false
def wListConfirmEmptyMatQuoteLinked = new ArrayList()
def wListConfirmEmptyRateQuoteLinked = new ArrayList()

/*Campi con dati obbligatori per ticket non a corpo*/
def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteMaterials'].toString())[0]
def labourRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteLabourRates'].toString())[0]

/*Conferma utente su warnings*/
def transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]
def transitionCheckValue = issue.getCustomFieldValue(transitionCheck)

/*Insight Schema IDs*/
def DBObjects = properties['ischema.dbo'].toString() + "-"
def OPAA = properties['ischema.aa'].toString() + "-"

/*Array warnings ed errors per la issue principale, uno per ogni tipologia di errore o warning*/
def issueWarningEmptyQuoteMatCustomer = new ArrayList()
def issueWarningEmptyQuoteRateCustomer = new ArrayList()

/*Verifica campi su ticket oggetto della transazione*/
//OP_QUOTE_MATERIALS
if(issue.getCustomFieldValue(repMaterials)!=null &amp;&amp; (String)issue.getCustomFieldValue(repMaterials) != "" &amp;&amp; !issue.getCustomFieldValue(repMaterials).toString().equals("")){
    //log.debug "Materiali: " + issue.getCustomFieldValue(repMaterials)
    /*Ciclare tutti gli oggetti associati al campo*/
    //insight classes &amp; components
    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

    def repMatList = issue.getCustomFieldValue(repMaterials)

    for(mat in repMatList){
        //extract insight key ang get object
        def component=mat.toString()
        //def componentKey = component.substring(component.indexOf('(')+1,component.indexOf(')'))
        def componentKey = component.substring(component.indexOf('('+OPAA)+1,component.length()-1)
        def componentObject = objectFacade.loadObjectBean(componentKey)

        //get "APPLIED_TO" for that component
        def appliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString()).getObjectAttributeValueBeans() as ArrayList
        def appliedToValue
        if(appliedTo.size() &gt; 0){
            appliedTo = appliedTo.toString()
            appliedToValue = appliedTo.substring(appliedTo.indexOf('(')+1,appliedTo.indexOf(')'))
            //log.debug "appliedToValue: " + appliedToValue
        }
        //get "DELETED" for that rate
        def deleted
        def deletedValue
        if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString())){
            deleted = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString()).getObjectAttributeValueBeans().toString()
            log.debug "deleted: " + deleted
            if (deleted){
                deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
            }
        }

        def matNumber
        def matNumberKey
        def matNumberValue
        if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString())){
            matNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).getObjectAttributeValueBeans() as ArrayList
            if(matNumber.size() &gt; 0){
                matNumber = matNumber.toString()
                matNumberKey = matNumber.substring(matNumber.indexOf('(')+1,matNumber.indexOf(')'))
                def matNumberObject = objectFacade.loadObjectBean(DBObjects + matNumberKey)
                matNumberValue = objectFacade.loadObjectAttributeBean(matNumberObject.getId(), properties['iobj.material.name'].toString()).getObjectAttributeValueBeans().toString()
                matNumberValue = matNumberValue.substring(matNumberValue.indexOf('(')+1,matNumberValue.indexOf(')'))
            }
        }

        def serialNumber
        def serialNumberValue
        if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString())){
            serialNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()).getObjectAttributeValueBeans() as ArrayList
            if(serialNumber.size() &gt; 0){
                serialNumber = serialNumber.toString()
                serialNumberValue = serialNumber.substring(serialNumber.indexOf('(')+1,serialNumber.indexOf(')'))
            }  
        }				

        if((appliedToValue.toString().equals("BOTH") || appliedToValue.toString().equals("CUSTOMER")) &amp;&amp; !deletedValue.toString().equals("true")){
            //get "TOTAL_AMOUNT_CUSTOMER" for that component
            def totCustomer 
            if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString())){
                totCustomer = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()).getObjectAttributeValueBeans()
            }
            if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                warnings=true
                issueWarningEmptyQuoteMatCustomer.add(matNumberValue.toString() + ((!serialNumber.toString().equals("null") &amp;&amp; !serialNumber.toString().equals("[]")) ? " (" + serialNumberValue.toString() + ")" : ""))   
                log.debug issue.key.toString() + " issueWarningEmptyQuoteMatCustomer: " + issueWarningEmptyQuoteMatCustomer
            }
        }
    }    
}  

//OP_QUOTE_LABOUR_RATES
if(issue.getCustomFieldValue(labourRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(labourRates) != "" &amp;&amp; !issue.getCustomFieldValue(labourRates).toString().equals("")){
    log.debug "Labour rates: " + issue.getCustomFieldValue(labourRates)
    /*Ciclare tutti gli oggetti associati al campo*/
    //insight classes &amp; components
    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

    def labourRatesList = issue.getCustomFieldValue(labourRates)

    for(lb in labourRatesList){
        //extract insight key ang get object
        def lbRate=lb.toString()
        def lbRateKey = lbRate.substring(lbRate.indexOf('(')+1,lbRate.indexOf(')'))
        def lbRateObject = objectFacade.loadObjectBean(lbRateKey)
        //get "APPLIED_TO" for that rate
        def lbAppliedTo = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.component.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
        def lbAppliedToValue = lbAppliedTo.substring(lbAppliedTo.indexOf('(')+1,lbAppliedTo.indexOf(')'))
        //get "DELETED" for that rate
        def deleted
        def deletedValue
        if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.component.deleted'].toString())){
            deleted = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.component.deleted'].toString()).getObjectAttributeValueBeans().toString()
            log.debug "deleted: " + deleted
            if (deleted){
                deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
            }
        }

        def lbRateRef
        if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){
            lbRateRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
        }
        log.debug "lbRateRef: " + lbRateRef

        def techRef
        if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.technicianRef'].toString())){
            techRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.technicianRef'].toString()).getObjectAttributeValueBeans().toString()
        }

        def lbRateRefKey
        def lbRateRefValue
        if(lbRateRef &amp;&amp; lbRateRef.size() &gt; 0){
            lbRateRef = lbRateRef.toString()
            lbRateRefKey = lbRateRef.substring(lbRateRef.indexOf('(')+1,lbRateRef.indexOf(')'))
            def lbRateRefObject = objectFacade.loadObjectBean(OPAA + lbRateRefKey)
            lbRateRefValue = objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
            lbRateRefValue = lbRateRefValue.substring(lbRateRefValue.indexOf('(')+1,lbRateRefValue.indexOf(')'))
        }

        def techRefKey
        def techRefValue
        if(techRef){
            techRef = techRef.toString()
            log.debug "techRef: " + techRef
            techRefKey = techRef.substring(techRef.indexOf('(')+1,techRef.indexOf(')'))
            def techRefObject = objectFacade.loadObjectBean(OPAA + techRefKey)
            techRefValue = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()
            if(techRefValue){
                techRefValue = techRefValue.substring(techRefValue.indexOf('(')+1,techRefValue.indexOf(')'))
            }
        }

        if((lbAppliedToValue.toString().equals("BOTH") || lbAppliedToValue.toString().equals("CUSTOMER")) &amp;&amp; !deletedValue.toString().equals("true")){
            //get "TOTAL_AMOUNT_CUSTOMER" for that component
            def totCustomer
            if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString())){
                totCustomer=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()
            }
            if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                warnings=true
                issueWarningEmptyQuoteRateCustomer.add(lbRateRefValue.toString())
                log.debug issue.key.toString() + " issueWarningEmptyQuoteRateCustomer: " + issueWarningEmptyQuoteRateCustomer
            }
        }
    }    
}

def output = new ArrayList()

if (!errors &amp;&amp; !warnings){
	return true
}else{
	if(!errors &amp;&amp; warnings){
		//Se ci sono solo warnings verifico se l'utente ha già dichiarato di voler proseguire comunque
		// - transition field "OPAA_CHECK_AND_CONFIRM"="Yes"
		// - in caso contrario invio i warning a FE

		log.debug "transitionCheck: " + issue.getCustomFieldValue(transitionCheck)
		//log.debug "result: " + issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")
		if(transitionCheckValue.toString().equals("Yes")){
			log.debug "return true - transitionCheck = Yes"
			return true
		}else{
			def wList = new ArrayList()

			if(issueWarningEmptyQuoteRateCustomer.size() &gt; 0){
				def wListConfirmEmptyRate = new ArrayList()
				wListConfirmEmptyRate.add("W")
				wListConfirmEmptyRate.add("CUSTOMER_CONFIRM_EMPTY_RATES")
				wListConfirmEmptyRate.add(null)
				wListConfirmEmptyRate.add(issueWarningEmptyQuoteRateCustomer)

				wList.add(wListConfirmEmptyRate)
			}

			if(issueWarningEmptyQuoteMatCustomer.size() &gt; 0){
				def wListConfirmEmptyMatQuote = new ArrayList()
				wListConfirmEmptyMatQuote.add("W")
				wListConfirmEmptyMatQuote.add("CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE")
				wListConfirmEmptyMatQuote.add(null)
				wListConfirmEmptyMatQuote.add(issueWarningEmptyQuoteMatCustomer)

				wList.add(wListConfirmEmptyMatQuote)
			}

			output.add(wList)
			throw new InvalidInputException("W", output.toString())   
		}

	}
	if(errors &amp;&amp; !warnings){
		def eList = new ArrayList()

		output.add(eList)
		throw new InvalidInputException("E", output.toString())   
	}
	if(errors &amp;&amp; warnings){
		def eList = new ArrayList()
		def wList = new ArrayList()

		if(issueWarningEmptyQuoteRateCustomer.size() &gt; 0){
			def wListConfirmEmptyRate = new ArrayList()
			wListConfirmEmptyRate.add("W")
			wListConfirmEmptyRate.add("CUSTOMER_CONFIRM_EMPTY_RATES")
			wListConfirmEmptyRate.add(null)
			wListConfirmEmptyRate.add(issueWarningEmptyQuoteRateCustomer)

			wList.add(wListConfirmEmptyRate)
		}

		if(issueWarningEmptyQuoteMatCustomer.size() &gt; 0){
			def wListConfirmEmptyMatQuote = new ArrayList()
			wListConfirmEmptyMatQuote.add("W")
			wListConfirmEmptyMatQuote.add("CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE")
			wListConfirmEmptyMatQuote.add(null)
			wListConfirmEmptyMatQuote.add(issueWarningEmptyQuoteMatCustomer)

			wList.add(wListConfirmEmptyMatQuote)
		}
		
		output.add(eList)
		output.add(wList)
		throw new InvalidInputException("WE", output.toString())  
	}
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="11">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22693</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="291" name="Genera Offerta - PDF" view="fieldscreen">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19926</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_NOTES">OP: Check Required Fields</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper
import groovy.json.JsonBuilder
import groovy.json.StreamingJsonBuilder

import com.atlassian.jira.issue.CustomFieldManager
import com.atlassian.jira.issue.fields.CustomField
import com.atlassian.jira.issue.IssueManager
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.issue.link.IssueLink

import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService

import org.apache.log4j.Category
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)
 
Issue issue = issue
//Per test da console
//IssueManager issueManager = ComponentAccessor.getIssueManager();
//issue = issueManager.getIssueByKeyIgnoreCase("AAS-2761")

def errors = false
def warnings = false
def relatesInIssueLink=false
def relatesOutIssueLink=false
def wListConfirmEmptyMatQuoteLinked = new ArrayList()
def wListConfirmEmptyRateQuoteLinked = new ArrayList()

/*Campi con dati obbligatori per ticket non a corpo*/
def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteMaterials'].toString())[0]
def labourRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteLabourRates'].toString())[0]

/*Conferma utente su warnings*/
def transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]
def transitionCheckValue = issue.getCustomFieldValue(transitionCheck)

/*Insight Schema IDs*/
def DBObjects = properties['ischema.dbo'].toString() + "-"
def OPAA = properties['ischema.aa'].toString() + "-"

/*Array warnings ed errors per la issue principale, uno per ogni tipologia di errore o warning*/
def issueWarningEmptyQuoteMatCustomer = new ArrayList()
def issueWarningEmptyQuoteRateCustomer = new ArrayList()

/*Verifica campi su ticket oggetto della transazione*/
//OP_QUOTE_MATERIALS
if(issue.getCustomFieldValue(repMaterials)!=null &amp;&amp; (String)issue.getCustomFieldValue(repMaterials) != "" &amp;&amp; !issue.getCustomFieldValue(repMaterials).toString().equals("")){
    //log.debug "Materiali: " + issue.getCustomFieldValue(repMaterials)
    /*Ciclare tutti gli oggetti associati al campo*/
    //insight classes &amp; components
    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

    def repMatList = issue.getCustomFieldValue(repMaterials)

    for(mat in repMatList){
        //extract insight key ang get object
        def component=mat.toString()
        //def componentKey = component.substring(component.indexOf('(')+1,component.indexOf(')'))
        def componentKey = component.substring(component.indexOf('('+OPAA)+1,component.length()-1)
        def componentObject = objectFacade.loadObjectBean(componentKey)

        //get "APPLIED_TO" for that component
        def appliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString()).getObjectAttributeValueBeans() as ArrayList
        def appliedToValue
        if(appliedTo.size() &gt; 0){
            appliedTo = appliedTo.toString()
            appliedToValue = appliedTo.substring(appliedTo.indexOf('(')+1,appliedTo.indexOf(')'))
            //log.debug "appliedToValue: " + appliedToValue
        }
        //get "DELETED" for that rate
        def deleted
        def deletedValue
        if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString())){
            deleted = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString()).getObjectAttributeValueBeans().toString()
            log.debug "deleted: " + deleted
            if (deleted){
                deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
            }
        }

        def matNumber
        def matNumberKey
        def matNumberValue
        if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString())){
            matNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).getObjectAttributeValueBeans() as ArrayList
            if(matNumber.size() &gt; 0){
                matNumber = matNumber.toString()
                matNumberKey = matNumber.substring(matNumber.indexOf('(')+1,matNumber.indexOf(')'))
                def matNumberObject = objectFacade.loadObjectBean(DBObjects + matNumberKey)
                matNumberValue = objectFacade.loadObjectAttributeBean(matNumberObject.getId(), properties['iobj.material.name'].toString()).getObjectAttributeValueBeans().toString()
                matNumberValue = matNumberValue.substring(matNumberValue.indexOf('(')+1,matNumberValue.indexOf(')'))
            }
        }

        def serialNumber
        def serialNumberValue
        if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString())){
            serialNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()).getObjectAttributeValueBeans() as ArrayList
            if(serialNumber.size() &gt; 0){
                serialNumber = serialNumber.toString()
                serialNumberValue = serialNumber.substring(serialNumber.indexOf('(')+1,serialNumber.indexOf(')'))
            }  
        }				

        if((appliedToValue.toString().equals("BOTH") || appliedToValue.toString().equals("CUSTOMER")) &amp;&amp; !deletedValue.toString().equals("true")){
            //get "TOTAL_AMOUNT_CUSTOMER" for that component
            def totCustomer 
            if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString())){
                totCustomer = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()).getObjectAttributeValueBeans()
            }
            if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                warnings=true
                issueWarningEmptyQuoteMatCustomer.add(matNumberValue.toString() + ((!serialNumber.toString().equals("null") &amp;&amp; !serialNumber.toString().equals("[]")) ? " (" + serialNumberValue.toString() + ")" : ""))   
                log.debug issue.key.toString() + " issueWarningEmptyQuoteMatCustomer: " + issueWarningEmptyQuoteMatCustomer
            }
        }
    }    
}  

//OP_QUOTE_LABOUR_RATES
if(issue.getCustomFieldValue(labourRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(labourRates) != "" &amp;&amp; !issue.getCustomFieldValue(labourRates).toString().equals("")){
    log.debug "Labour rates: " + issue.getCustomFieldValue(labourRates)
    /*Ciclare tutti gli oggetti associati al campo*/
    //insight classes &amp; components
    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

    def labourRatesList = issue.getCustomFieldValue(labourRates)

    for(lb in labourRatesList){
        //extract insight key ang get object
        def lbRate=lb.toString()
        def lbRateKey = lbRate.substring(lbRate.indexOf('(')+1,lbRate.indexOf(')'))
        def lbRateObject = objectFacade.loadObjectBean(lbRateKey)
        //get "APPLIED_TO" for that rate
        def lbAppliedTo = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.component.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
        def lbAppliedToValue = lbAppliedTo.substring(lbAppliedTo.indexOf('(')+1,lbAppliedTo.indexOf(')'))
        //get "DELETED" for that rate
        def deleted
        def deletedValue
        if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.component.deleted'].toString())){
            deleted = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.component.deleted'].toString()).getObjectAttributeValueBeans().toString()
            log.debug "deleted: " + deleted
            if (deleted){
                deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
            }
        }

        def lbRateRef
        if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){
            lbRateRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
        }
        log.debug "lbRateRef: " + lbRateRef

        def techRef
        if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.technicianRef'].toString())){
            techRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.technicianRef'].toString()).getObjectAttributeValueBeans().toString()
        }

        def lbRateRefKey
        def lbRateRefValue
        if(lbRateRef &amp;&amp; lbRateRef.size() &gt; 0){
            lbRateRef = lbRateRef.toString()
            lbRateRefKey = lbRateRef.substring(lbRateRef.indexOf('(')+1,lbRateRef.indexOf(')'))
            def lbRateRefObject = objectFacade.loadObjectBean(OPAA + lbRateRefKey)
            lbRateRefValue = objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
            lbRateRefValue = lbRateRefValue.substring(lbRateRefValue.indexOf('(')+1,lbRateRefValue.indexOf(')'))
        }

        def techRefKey
        def techRefValue
        if(techRef){
            techRef = techRef.toString()
            log.debug "techRef: " + techRef
            techRefKey = techRef.substring(techRef.indexOf('(')+1,techRef.indexOf(')'))
            def techRefObject = objectFacade.loadObjectBean(OPAA + techRefKey)
            techRefValue = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()
            if(techRefValue){
                techRefValue = techRefValue.substring(techRefValue.indexOf('(')+1,techRefValue.indexOf(')'))
            }
        }

        if((lbAppliedToValue.toString().equals("BOTH") || lbAppliedToValue.toString().equals("CUSTOMER")) &amp;&amp; !deletedValue.toString().equals("true")){
            //get "TOTAL_AMOUNT_CUSTOMER" for that component
            def totCustomer
            if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString())){
                totCustomer=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()
            }
            if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                warnings=true
                issueWarningEmptyQuoteRateCustomer.add(lbRateRefValue.toString())
                log.debug issue.key.toString() + " issueWarningEmptyQuoteRateCustomer: " + issueWarningEmptyQuoteRateCustomer
            }
        }
    }    
}

def output = new ArrayList()

if (!errors &amp;&amp; !warnings){
	return true
}else{
	if(!errors &amp;&amp; warnings){
		//Se ci sono solo warnings verifico se l'utente ha già dichiarato di voler proseguire comunque
		// - transition field "OPAA_CHECK_AND_CONFIRM"="Yes"
		// - in caso contrario invio i warning a FE

		log.debug "transitionCheck: " + issue.getCustomFieldValue(transitionCheck)
		//log.debug "result: " + issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")
		if(transitionCheckValue.toString().equals("Yes")){
			log.debug "return true - transitionCheck = Yes"
			return true
		}else{
			def wList = new ArrayList()

			if(issueWarningEmptyQuoteRateCustomer.size() &gt; 0){
				def wListConfirmEmptyRate = new ArrayList()
				wListConfirmEmptyRate.add("W")
				wListConfirmEmptyRate.add("CUSTOMER_CONFIRM_EMPTY_RATES")
				wListConfirmEmptyRate.add(null)
				wListConfirmEmptyRate.add(issueWarningEmptyQuoteRateCustomer)

				wList.add(wListConfirmEmptyRate)
			}

			if(issueWarningEmptyQuoteMatCustomer.size() &gt; 0){
				def wListConfirmEmptyMatQuote = new ArrayList()
				wListConfirmEmptyMatQuote.add("W")
				wListConfirmEmptyMatQuote.add("CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE")
				wListConfirmEmptyMatQuote.add(null)
				wListConfirmEmptyMatQuote.add(issueWarningEmptyQuoteMatCustomer)

				wList.add(wListConfirmEmptyMatQuote)
			}

			output.add(wList)
			throw new InvalidInputException("W", output.toString())   
		}

	}
	if(errors &amp;&amp; !warnings){
		def eList = new ArrayList()

		output.add(eList)
		throw new InvalidInputException("E", output.toString())   
	}
	if(errors &amp;&amp; warnings){
		def eList = new ArrayList()
		def wList = new ArrayList()

		if(issueWarningEmptyQuoteRateCustomer.size() &gt; 0){
			def wListConfirmEmptyRate = new ArrayList()
			wListConfirmEmptyRate.add("W")
			wListConfirmEmptyRate.add("CUSTOMER_CONFIRM_EMPTY_RATES")
			wListConfirmEmptyRate.add(null)
			wListConfirmEmptyRate.add(issueWarningEmptyQuoteRateCustomer)

			wList.add(wListConfirmEmptyRate)
		}

		if(issueWarningEmptyQuoteMatCustomer.size() &gt; 0){
			def wListConfirmEmptyMatQuote = new ArrayList()
			wListConfirmEmptyMatQuote.add("W")
			wListConfirmEmptyMatQuote.add("CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE")
			wListConfirmEmptyMatQuote.add(null)
			wListConfirmEmptyMatQuote.add(issueWarningEmptyQuoteMatCustomer)

			wList.add(wListConfirmEmptyMatQuote)
		}
		
		output.add(eList)
		output.add(wList)
		throw new InvalidInputException("WE", output.toString())  
	}
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_NOTES">OP: REST API: generate Offer attachment</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import org.apache.log4j.Category
import com.atlassian.jira.issue.link.IssueLink
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def requestMethod
def baseURL

def customer =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.customer'].toString())[0]
def templateId
int DBO = properties['ischema.dbo.id'].toString().toInteger()

/* Individuazione Template offerta da applicare */
/* Caso 1) esiste uno specifico template per il cliente selezionato --&gt; uso questo */
/* else --&gt; uso il template di default: AttachmentCategory = "Offerta Cliente" AND CUSTOMER_REF IS EMPTY AND DEFAULT=true
/*Rimozione allegato rapporto di intervento appena creato*/
/* Get Insight IQL Facade from plugin accessor */
Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade"); 
def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);

/* Get Insight Object Facade from plugin accessor */
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");
def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

/* Get Insight Object Type Facade from plugin accessor */
Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade");
def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);

/* Get Insight Object Attribute Facade from plugin accessor */
Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);

Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory");
def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);

def customerValue = issue.getCustomFieldValue(customer)[0].toString()
def customerKey = customerValue.substring(customerValue.indexOf('(')+1,customerValue.indexOf(')'))

def DOcustomerObjectRef = objectFacade.loadObjectAttributeBean(issue.getCustomFieldValue(customer)[0].getId(), properties['iobj.customer.customerRef'].toString()).getObjectAttributeValueBeans();
log.debug "DOcustomerObjectRef: " + DOcustomerObjectRef

def obTriage = objectFacade.loadObjectAttributeBean(DOcustomerObjectRef[0].getValue(), properties['iobj.contact.dbo.name'].toString()).createMutable()  
def customerName = obTriage.getObjectAttributeValueBeans()

/* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include " around value */
def objects = iqlFacade.findObjectsByIQLAndSchema(DBO, "\"" + (properties['iobj.attachmentCategory.attachmentCategory'] ? properties['iobj.attachmentCategory.attachmentCategory'].toString() : "ATTACHMENT_CATEGORY") + "\".\"" + properties['iobj.attachmentCategory.name'].toString() + "\" = \"" + (properties['iobj.attachmentCategory.objs.offCliente'] ? properties['iobj.attachmentCategory.objs.offCliente'].toString() : "Offerta Cliente") + "\" AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND CUSTOMER_REF IS NOT EMPTY AND CUSTOMER_REF.Name = \"" + customerName[0].getValue() + "\""); // See the complete list of possible IQL on the Insight Query Language documentation page
/* If this is a mandatory field you should be able to do this: */
log.info("Insight object: " + objects[0]);
log.debug "\"" + (properties['iobj.attachmentCategory.attachmentCategory'] ? properties['iobj.attachmentCategory.attachmentCategory'].toString() : "ATTACHMENT_CATEGORY") + "\".\"" + properties['iobj.attachmentCategory.name'].toString() + "\" = \"" + (properties['iobj.attachmentCategory.objs.offCliente'] ? properties['iobj.attachmentCategory.objs.offCliente'].toString() : "Offerta Cliente") + "\" AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND CUSTOMER_REF IS NOT EMPTY AND CUSTOMER_REF.Name = \"" + customerName[0].getValue() + "\""

if(!objects[0]){
    /*Nessun file individuato per il cliente - cerco template generico */
    objects = iqlFacade.findObjectsByIQLAndSchema(DBO, "\"" + (properties['iobj.attachmentCategory.attachmentCategory'] ? properties['iobj.attachmentCategory.attachmentCategory'].toString() : "ATTACHMENT_CATEGORY") + "\".\"" + properties['iobj.attachmentCategory.name'].toString() + "\" = \"" + (properties['iobj.attachmentCategory.objs.offCliente'] ? properties['iobj.attachmentCategory.objs.offCliente'].toString() : "Offerta Cliente") + "\" AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND CUSTOMER_REF IS EMPTY AND DEFAULT=true"); // See the complete list of possible IQL on the Insight Query Language documentation page
    /* If this is a mandatory field you should be able to do this: */
    log.info("Insight object: " + objects[0]);
    log.debug "\"" + (properties['iobj.attachmentCategory.attachmentCategory'] ? properties['iobj.attachmentCategory.attachmentCategory'].toString() : "ATTACHMENT_CATEGORY") + "\".\"" + properties['iobj.attachmentCategory.name'].toString() + "\" = \"" + (properties['iobj.attachmentCategory.objs.offCliente'] ? properties['iobj.attachmentCategory.objs.offCliente'].toString() : "Offerta Cliente") + "\" AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND CUSTOMER_REF IS EMPTY AND DEFAULT=true"
}

if(objects[0]){
    log.debug "template da usare: " + objects[0].getId()
    templateId=objects[0].getId()
}

/* REST API per Generazione Allegato Consuntivo */
requestMethod = "PUT";

baseURL = "http://" + properties['api.env'].toString() + "/op/rest/automation/ticket/" + issue.key.toString() + "/attachment/generic?templateId=" + templateId + "&amp;type=PDF&amp;attachmentCustomField=" + properties['cf.offerAttachmentRef'].toString()

log.debug "baseUrl: " + baseURL

URL url
url = new URL(baseURL)
HttpURLConnection connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.connect();

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()
    eListErrors.add("E")
    eListErrors.add("GENERATE-ACCOUNTINGREPORT")
    errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
    eListErrors.add(errorMsgs)
    eList.add(eListErrors)

    output.add(eList)
    throw new InvalidInputException("E", output.toString())
}
</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="10">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22693</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="301" name="Genera Offerta - Word" view="fieldscreen">
          <meta name="opsbar-sequence">30</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19926</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_NOTES">OP: Check Required Fields</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper
import groovy.json.JsonBuilder
import groovy.json.StreamingJsonBuilder

import com.atlassian.jira.issue.CustomFieldManager
import com.atlassian.jira.issue.fields.CustomField
import com.atlassian.jira.issue.IssueManager
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.issue.link.IssueLink

import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService

import org.apache.log4j.Category
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)
 
Issue issue = issue
//Per test da console
//IssueManager issueManager = ComponentAccessor.getIssueManager();
//issue = issueManager.getIssueByKeyIgnoreCase("AAS-2761")

def errors = false
def warnings = false
def relatesInIssueLink=false
def relatesOutIssueLink=false
def wListConfirmEmptyMatQuoteLinked = new ArrayList()
def wListConfirmEmptyRateQuoteLinked = new ArrayList()

/*Campi con dati obbligatori per ticket non a corpo*/
def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteMaterials'].toString())[0]
def labourRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteLabourRates'].toString())[0]

/*Conferma utente su warnings*/
def transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]
def transitionCheckValue = issue.getCustomFieldValue(transitionCheck)

/*Insight Schema IDs*/
def DBObjects = properties['ischema.dbo'].toString() + "-"
def OPAA = properties['ischema.aa'].toString() + "-"

/*Array warnings ed errors per la issue principale, uno per ogni tipologia di errore o warning*/
def issueWarningEmptyQuoteMatCustomer = new ArrayList()
def issueWarningEmptyQuoteRateCustomer = new ArrayList()

/*Verifica campi su ticket oggetto della transazione*/
//OP_QUOTE_MATERIALS
if(issue.getCustomFieldValue(repMaterials)!=null &amp;&amp; (String)issue.getCustomFieldValue(repMaterials) != "" &amp;&amp; !issue.getCustomFieldValue(repMaterials).toString().equals("")){
    //log.debug "Materiali: " + issue.getCustomFieldValue(repMaterials)
    /*Ciclare tutti gli oggetti associati al campo*/
    //insight classes &amp; components
    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

    def repMatList = issue.getCustomFieldValue(repMaterials)

    for(mat in repMatList){
        //extract insight key ang get object
        def component=mat.toString()
        //def componentKey = component.substring(component.indexOf('(')+1,component.indexOf(')'))
        def componentKey = component.substring(component.indexOf('('+OPAA)+1,component.length()-1)
        def componentObject = objectFacade.loadObjectBean(componentKey)

        //get "APPLIED_TO" for that component
        def appliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString()).getObjectAttributeValueBeans() as ArrayList
        def appliedToValue
        if(appliedTo.size() &gt; 0){
            appliedTo = appliedTo.toString()
            appliedToValue = appliedTo.substring(appliedTo.indexOf('(')+1,appliedTo.indexOf(')'))
            //log.debug "appliedToValue: " + appliedToValue
        }
        //get "DELETED" for that rate
        def deleted
        def deletedValue
        if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString())){
            deleted = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString()).getObjectAttributeValueBeans().toString()
            log.debug "deleted: " + deleted
            if (deleted){
                deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
            }
        }

        def matNumber
        def matNumberKey
        def matNumberValue
        if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString())){
            matNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).getObjectAttributeValueBeans() as ArrayList
            if(matNumber.size() &gt; 0){
                matNumber = matNumber.toString()
                matNumberKey = matNumber.substring(matNumber.indexOf('(')+1,matNumber.indexOf(')'))
                def matNumberObject = objectFacade.loadObjectBean(DBObjects + matNumberKey)
                matNumberValue = objectFacade.loadObjectAttributeBean(matNumberObject.getId(), properties['iobj.material.name'].toString()).getObjectAttributeValueBeans().toString()
                matNumberValue = matNumberValue.substring(matNumberValue.indexOf('(')+1,matNumberValue.indexOf(')'))
            }
        }

        def serialNumber
        def serialNumberValue
        if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString())){
            serialNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()).getObjectAttributeValueBeans() as ArrayList
            if(serialNumber.size() &gt; 0){
                serialNumber = serialNumber.toString()
                serialNumberValue = serialNumber.substring(serialNumber.indexOf('(')+1,serialNumber.indexOf(')'))
            }  
        }				

        if((appliedToValue.toString().equals("BOTH") || appliedToValue.toString().equals("CUSTOMER")) &amp;&amp; !deletedValue.toString().equals("true")){
            //get "TOTAL_AMOUNT_CUSTOMER" for that component
            def totCustomer 
            if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString())){
                totCustomer = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()).getObjectAttributeValueBeans()
            }
            if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                warnings=true
                issueWarningEmptyQuoteMatCustomer.add(matNumberValue.toString() + ((!serialNumber.toString().equals("null") &amp;&amp; !serialNumber.toString().equals("[]")) ? " (" + serialNumberValue.toString() + ")" : ""))   
                log.debug issue.key.toString() + " issueWarningEmptyQuoteMatCustomer: " + issueWarningEmptyQuoteMatCustomer
            }
        }
    }    
}  

//OP_QUOTE_LABOUR_RATES
if(issue.getCustomFieldValue(labourRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(labourRates) != "" &amp;&amp; !issue.getCustomFieldValue(labourRates).toString().equals("")){
    log.debug "Labour rates: " + issue.getCustomFieldValue(labourRates)
    /*Ciclare tutti gli oggetti associati al campo*/
    //insight classes &amp; components
    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

    def labourRatesList = issue.getCustomFieldValue(labourRates)

    for(lb in labourRatesList){
        //extract insight key ang get object
        def lbRate=lb.toString()
        def lbRateKey = lbRate.substring(lbRate.indexOf('(')+1,lbRate.indexOf(')'))
        def lbRateObject = objectFacade.loadObjectBean(lbRateKey)
        //get "APPLIED_TO" for that rate
        def lbAppliedTo = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.component.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
        def lbAppliedToValue = lbAppliedTo.substring(lbAppliedTo.indexOf('(')+1,lbAppliedTo.indexOf(')'))
        //get "DELETED" for that rate
        def deleted
        def deletedValue
        if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.component.deleted'].toString())){
            deleted = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.component.deleted'].toString()).getObjectAttributeValueBeans().toString()
            log.debug "deleted: " + deleted
            if (deleted){
                deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
            }
        }

        def lbRateRef
        if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){
            lbRateRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
        }
        log.debug "lbRateRef: " + lbRateRef

        def techRef
        if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.technicianRef'].toString())){
            techRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.technicianRef'].toString()).getObjectAttributeValueBeans().toString()
        }

        def lbRateRefKey
        def lbRateRefValue
        if(lbRateRef &amp;&amp; lbRateRef.size() &gt; 0){
            lbRateRef = lbRateRef.toString()
            lbRateRefKey = lbRateRef.substring(lbRateRef.indexOf('(')+1,lbRateRef.indexOf(')'))
            def lbRateRefObject = objectFacade.loadObjectBean(OPAA + lbRateRefKey)
            lbRateRefValue = objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
            lbRateRefValue = lbRateRefValue.substring(lbRateRefValue.indexOf('(')+1,lbRateRefValue.indexOf(')'))
        }

        def techRefKey
        def techRefValue
        if(techRef){
            techRef = techRef.toString()
            log.debug "techRef: " + techRef
            techRefKey = techRef.substring(techRef.indexOf('(')+1,techRef.indexOf(')'))
            def techRefObject = objectFacade.loadObjectBean(OPAA + techRefKey)
            techRefValue = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()
            if(techRefValue){
                techRefValue = techRefValue.substring(techRefValue.indexOf('(')+1,techRefValue.indexOf(')'))
            }
        }

        if((lbAppliedToValue.toString().equals("BOTH") || lbAppliedToValue.toString().equals("CUSTOMER")) &amp;&amp; !deletedValue.toString().equals("true")){
            //get "TOTAL_AMOUNT_CUSTOMER" for that component
            def totCustomer
            if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString())){
                totCustomer=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()
            }
            if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                warnings=true
                issueWarningEmptyQuoteRateCustomer.add(lbRateRefValue.toString())
                log.debug issue.key.toString() + " issueWarningEmptyQuoteRateCustomer: " + issueWarningEmptyQuoteRateCustomer
            }
        }
    }    
}

def output = new ArrayList()

if (!errors &amp;&amp; !warnings){
	return true
}else{
	if(!errors &amp;&amp; warnings){
		//Se ci sono solo warnings verifico se l'utente ha già dichiarato di voler proseguire comunque
		// - transition field "OPAA_CHECK_AND_CONFIRM"="Yes"
		// - in caso contrario invio i warning a FE

		log.debug "transitionCheck: " + issue.getCustomFieldValue(transitionCheck)
		//log.debug "result: " + issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")
		if(transitionCheckValue.toString().equals("Yes")){
			log.debug "return true - transitionCheck = Yes"
			return true
		}else{
			def wList = new ArrayList()

			if(issueWarningEmptyQuoteRateCustomer.size() &gt; 0){
				def wListConfirmEmptyRate = new ArrayList()
				wListConfirmEmptyRate.add("W")
				wListConfirmEmptyRate.add("CUSTOMER_CONFIRM_EMPTY_RATES")
				wListConfirmEmptyRate.add(null)
				wListConfirmEmptyRate.add(issueWarningEmptyQuoteRateCustomer)

				wList.add(wListConfirmEmptyRate)
			}

			if(issueWarningEmptyQuoteMatCustomer.size() &gt; 0){
				def wListConfirmEmptyMatQuote = new ArrayList()
				wListConfirmEmptyMatQuote.add("W")
				wListConfirmEmptyMatQuote.add("CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE")
				wListConfirmEmptyMatQuote.add(null)
				wListConfirmEmptyMatQuote.add(issueWarningEmptyQuoteMatCustomer)

				wList.add(wListConfirmEmptyMatQuote)
			}

			output.add(wList)
			throw new InvalidInputException("W", output.toString())   
		}

	}
	if(errors &amp;&amp; !warnings){
		def eList = new ArrayList()

		output.add(eList)
		throw new InvalidInputException("E", output.toString())   
	}
	if(errors &amp;&amp; warnings){
		def eList = new ArrayList()
		def wList = new ArrayList()

		if(issueWarningEmptyQuoteRateCustomer.size() &gt; 0){
			def wListConfirmEmptyRate = new ArrayList()
			wListConfirmEmptyRate.add("W")
			wListConfirmEmptyRate.add("CUSTOMER_CONFIRM_EMPTY_RATES")
			wListConfirmEmptyRate.add(null)
			wListConfirmEmptyRate.add(issueWarningEmptyQuoteRateCustomer)

			wList.add(wListConfirmEmptyRate)
		}

		if(issueWarningEmptyQuoteMatCustomer.size() &gt; 0){
			def wListConfirmEmptyMatQuote = new ArrayList()
			wListConfirmEmptyMatQuote.add("W")
			wListConfirmEmptyMatQuote.add("CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE")
			wListConfirmEmptyMatQuote.add(null)
			wListConfirmEmptyMatQuote.add(issueWarningEmptyQuoteMatCustomer)

			wList.add(wListConfirmEmptyMatQuote)
		}
		
		output.add(eList)
		output.add(wList)
		throw new InvalidInputException("WE", output.toString())  
	}
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_NOTES">OP: REST API: generate Offer attachment - Word</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import org.apache.log4j.Category
import com.atlassian.jira.issue.link.IssueLink
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
//Issue issue = issueManager.getIssueByKeyIgnoreCase("AAS-2762")

CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def requestMethod
def baseURL

def customer =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.customer'].toString())[0]
def templateId
int DBO = properties['ischema.dbo.id'].toString().toInteger()

/* Individuazione Template offerta da applicare */
/* Caso 1) esiste uno specifico template per il cliente selezionato --&gt; uso questo */
/* else --&gt; uso il template di default: AttachmentCategory = "Offerta Cliente" AND CUSTOMER_REF IS EMPTY AND DEFAULT=true
/*Rimozione allegato rapporto di intervento appena creato*/
/* Get Insight IQL Facade from plugin accessor */
Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade"); 
def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);

/* Get Insight Object Facade from plugin accessor */
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");
def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

/* Get Insight Object Type Facade from plugin accessor */
Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade");
def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);

/* Get Insight Object Attribute Facade from plugin accessor */
Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);

Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory");
def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);

def customerValue = issue.getCustomFieldValue(customer)[0].toString()
def customerKey = customerValue.substring(customerValue.indexOf('(')+1,customerValue.indexOf(')'))

def DOcustomerObjectRef = objectFacade.loadObjectAttributeBean(issue.getCustomFieldValue(customer)[0].getId(), properties['iobj.customer.customerRef'].toString()).getObjectAttributeValueBeans();
log.debug "DOcustomerObjectRef: " + DOcustomerObjectRef

def obTriage = objectFacade.loadObjectAttributeBean(DOcustomerObjectRef[0].getValue(), properties['iobj.contact.dbo.name'].toString()).createMutable()  
def customerName = obTriage.getObjectAttributeValueBeans()

/* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include " around value */
def objects = iqlFacade.findObjectsByIQLAndSchema(DBO, "\"" + (properties['iobj.attachmentCategory.attachmentCategory'] ? properties['iobj.attachmentCategory.attachmentCategory'].toString() : "ATTACHMENT_CATEGORY") + "\".\"" + properties['iobj.attachmentCategory.name'].toString() + "\" = \"" + (properties['iobj.attachmentCategory.objs.offCliente'] ? properties['iobj.attachmentCategory.objs.offCliente'].toString() : "Offerta Cliente") + "\" AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND CUSTOMER_REF IS NOT EMPTY AND CUSTOMER_REF.Name = \"" + customerName[0].getValue() + "\""); // See the complete list of possible IQL on the Insight Query Language documentation page
/* If this is a mandatory field you should be able to do this: */
log.info("Insight object: " + objects[0]);
log.debug "\"" + (properties['iobj.attachmentCategory.attachmentCategory'] ? properties['iobj.attachmentCategory.attachmentCategory'].toString() : "ATTACHMENT_CATEGORY") + "\".\"" + properties['iobj.attachmentCategory.name'].toString() + "\" = \"" + (properties['iobj.attachmentCategory.objs.offCliente'] ? properties['iobj.attachmentCategory.objs.offCliente'].toString() : "Offerta Cliente") + "\" AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND CUSTOMER_REF IS NOT EMPTY AND CUSTOMER_REF.Name = \"" + customerName[0].getValue() + "\""

if(!objects[0]){
    /*Nessun file individuato per il cliente - cerco template generico */
    objects = iqlFacade.findObjectsByIQLAndSchema(DBO, "\"" + (properties['iobj.attachmentCategory.attachmentCategory'] ? properties['iobj.attachmentCategory.attachmentCategory'].toString() : "ATTACHMENT_CATEGORY") + "\".\"" + properties['iobj.attachmentCategory.name'].toString() + "\" = \"" + (properties['iobj.attachmentCategory.objs.offCliente'] ? properties['iobj.attachmentCategory.objs.offCliente'].toString() : "Offerta Cliente") + "\" AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND CUSTOMER_REF IS EMPTY AND DEFAULT=true"); // See the complete list of possible IQL on the Insight Query Language documentation page
    /* If this is a mandatory field you should be able to do this: */
    log.info("Insight object: " + objects[0]);
    log.debug "\"" + (properties['iobj.attachmentCategory.attachmentCategory'] ? properties['iobj.attachmentCategory.attachmentCategory'].toString() : "ATTACHMENT_CATEGORY") + "\".\"" + properties['iobj.attachmentCategory.name'].toString() + "\" = \"" + (properties['iobj.attachmentCategory.objs.offCliente'] ? properties['iobj.attachmentCategory.objs.offCliente'].toString() : "Offerta Cliente") + "\" AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND CUSTOMER_REF IS EMPTY AND DEFAULT=true"
}

if(objects[0]){
    log.debug "template da usare: " + objects[0].getId()
    templateId=objects[0].getId()
}


/* REST API per Generazione Allegato Consuntivo */
requestMethod = "PUT";

baseURL = "http://" + properties['api.env'].toString() + "/op/rest/automation/ticket/" + issue.key.toString() + "/attachment/generic?templateId=" + templateId + "&amp;type=Word&amp;attachmentCustomField=" + properties['cf.offerAttachmentRef'].toString()

log.debug "baseUrl: " + baseURL

URL url
url = new URL(baseURL)
HttpURLConnection connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.connect();

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()
    eListErrors.add("E")
    eListErrors.add("GENERATE-ACCOUNTINGREPORT")
    errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
    eListErrors.add(errorMsgs)
    eList.add(eListErrors)

    output.add(eList)
    throw new InvalidInputException("E", output.toString())
}
</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="10">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22693</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="11" name="Waiting for Customer Feedback">
      <meta name="jira.status.id">14334</meta>
      <actions>
        <action id="311" name="Offerta Accettata da Cliente">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <results>
            <unconditional-result old-status="žée" status="žée" step="12">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">OP: Calculate OFFER_CUSTOMER_TOTAL_AMOUNT, OFFER_SUPPLIER_TOTAL_AMOUNT + _MATERIAL e _LABOUR</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.IssueManager
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import groovy.json.JsonSlurper
import groovy.json.StreamingJsonBuilder
import com.atlassian.jira.config.util.JiraHome
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import java.text.SimpleDateFormat
import java.text.ParseException
import java.text.DecimalFormat
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.util.IssueChangeHolder
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder

import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

/*Script Variables*/
//Per Post Function
issue = issue
//Per test da console
//IssueManager issueManager = ComponentAccessor.getIssueManager()
//issue = issueManager.getIssueByKeyIgnoreCase("OPUT-3382")

/*Insight classes &amp; components*/
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);
/* Get Insight IQL Facade from plugin accessor */
Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade"); 
iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);
Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory");
objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);
/* Get Insight Object Type Facade from plugin accessor */
Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade"); 
objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);

/*COSTANTI*/
OPAA=properties['ischema.aa.id']
//Attribute IDs
RATE_TOTAL_AMOUNT_SUPPLIER=properties['iobj.onSiteRateReport.totSupp.id']
RATE_TOTAL_AMOUNT_CUSTOMER=properties['iobj.onSiteRateReport.totCust.id']
COMPONENT_TOTAL_AMOUNT_SUPPLIER=properties['iobj.component.totSupp.id']
COMPONENT_TOTAL_AMOUNT_CUSTOMER=properties['iobj.component.totCust.id']
//ObjType IDs
ONSITE_RATE_REPORT=properties['iobj.onSiteRateReport']
COMPONENT=properties['iobj.component']

/*Customfields*/
def CustOfferTot =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.customerOfferTotAmount'].toString())[0]
def SuppOfferTot =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplierOfferTotAmount'].toString())[0]

def CustOfferMatTot =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.customerOfferMaterials'].toString())[0]
def SuppOfferMatTot =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplierOfferMaterials'].toString())[0]
def CustOfferLabTot =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.customerOfferLabour'].toString())[0]
def SuppOfferLabTot =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplierOfferLabour'].toString())[0]

def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteMaterials'].toString())[0]
def labourRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteLabourRates'].toString())[0]

def mi = (MutableIssue) issue
def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()

/*Variables*/
def customerOfferTot, supplierOfferTot
double totAmountSupplier = 0
double totAmountCustomer = 0
def repMatList = issue.getCustomFieldValue(repMaterials)
def labourRatesList = issue.getCustomFieldValue(labourRates)

def totCustMat = 0
def totCustLab = 0
def totSuppMat = 0
def totSuppLab= 0

for(mat in repMatList){
    //extract insight key and get object
    def component=mat.toString()
    def componentKey = component.substring(component.indexOf('(')+1,component.indexOf(')'))
    def componentObject = objectFacade.loadObjectBean(componentKey)

    //MATERIAL_REF
    obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).createMutable()
    def material = obTriage.getObjectAttributeValueBeans()
    
    //DELETED
    def deleted
    if (objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString())){
        obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString()).createMutable()
    	deleted = obTriage.getObjectAttributeValueBeans()
        deleted = deleted[0].getValue()
    }
    
    //TOTAL_AMOUNT_SUPPLIER
    if(deleted==null || deleted!=true){
        obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString()).createMutable()
        def totSupplier = obTriage.getObjectAttributeValueBeans()
        totAmountSupplier = totAmountSupplier + totSupplier[0].getValue().toDouble()
        totSuppMat = totSuppMat + totSupplier[0].getValue().toDouble()
    }
    
    //TOTAL_AMOUNT_CUSTOMER
    if(deleted==null || deleted!=true){
        obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()).createMutable()
        def totCustomer = obTriage.getObjectAttributeValueBeans()
        totAmountCustomer = totAmountCustomer + totCustomer[0].getValue().toDouble()
        totCustMat = totCustMat + totCustomer[0].getValue().toDouble()
    }
        
    if (material!=null &amp;&amp; (deleted==null || deleted!=true)){ 
        /*Verifico se si tratta di un materiale SAP o NO SAP*/
        material = material.toString()
        materialKey = material.substring(material.indexOf('(')+1,material.indexOf(')'))

        /*MATERIAL - SAP*/
        obTriage = objectFacade.loadObjectAttributeBean(materialKey.toInteger(), properties['iobj.material.sap'].toString()).createMutable()
        sap = obTriage.getObjectAttributeValueBeans()

        /*MATERIAL - MATNR*/
        obTriage = objectFacade.loadObjectAttributeBean(materialKey.toInteger(), properties['iobj.material.matnr'].toString()).createMutable()
        matnr = obTriage.getObjectAttributeValueBeans()

        if(sap!=null &amp;&amp; matnr!=null){
            matnr=matnr.toString()
            matnr = matnr.substring(matnr.indexOf('(')+1,matnr.indexOf(')'))
            sap=sap.toString()
            sap = sap.substring(sap.indexOf('(')+1,sap.indexOf(')'))

            if(sap.equalsIgnoreCase("true")){
                log.debug "Materiale sap: " + sap
            }else{
                log.debug "Materiale NON sap: " + sap
            }
        }

    }
}

for(rate in labourRatesList){
    //extract insight key and get object
    def labRate=rate.toString()
    def labRateKey = labRate.substring(labRate.indexOf('(')+1,labRate.indexOf(')'))
    def labRateObject = objectFacade.loadObjectBean(labRateKey)

    //MATERIAL_REF
    obTriage = objectFacade.loadObjectAttributeBean(labRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).createMutable()
    def rateDesc = obTriage.getObjectAttributeValueBeans()
    
    //DELETED
    def deleted
    if (objectFacade.loadObjectAttributeBean(labRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString())){
        obTriage = objectFacade.loadObjectAttributeBean(labRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).createMutable()
    	deleted = obTriage.getObjectAttributeValueBeans()
        deleted = deleted[0].getValue()
    }
    
    //TOTAL_AMOUNT_SUPPLIER
    if(deleted==null || deleted!=true){
        obTriage = objectFacade.loadObjectAttributeBean(labRateObject.getId(), properties['iobj.onSiteRateReport.totSupplier'].toString()).createMutable()
        def totSupplier = obTriage.getObjectAttributeValueBeans()
        totAmountSupplier = totAmountSupplier + totSupplier[0].getValue().toDouble()
        totSuppLab = totSuppLab + totSupplier[0].getValue().toDouble()
    }
    
    //TOTAL_AMOUNT_CUSTOMER
    if(deleted==null || deleted!=true){
        obTriage = objectFacade.loadObjectAttributeBean(labRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()).createMutable()
        def totCustomer = obTriage.getObjectAttributeValueBeans()
        totAmountCustomer = totAmountCustomer + totCustomer[0].getValue().toDouble()
        totCustLab = totCustLab + totCustomer[0].getValue().toDouble()
    }
}



log.debug "TOTALE OFFERTA FORNITORE: " + new DecimalFormat("#.##").format(totAmountSupplier)
log.debug "TOTALE OFFERTA CLIENTE: " + new DecimalFormat("#.##").format(totAmountCustomer)

IssueChangeHolder changeHolder = new DefaultIssueChangeHolder()
CustOfferTot.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(CustOfferTot),totAmountCustomer),changeHolder)
SuppOfferTot.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(SuppOfferTot),totAmountSupplier),changeHolder)

CustOfferMatTot.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(CustOfferMatTot),totCustMat),changeHolder)
SuppOfferMatTot.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(SuppOfferMatTot),totSuppMat),changeHolder)
CustOfferLabTot.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(CustOfferLabTot),totCustLab),changeHolder)
SuppOfferLabTot.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(SuppOfferLabTot),totSuppLab),changeHolder)

            
</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">OP: Generate Components &amp; populate OPAA_REPLACED_MATERIALS</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.IssueManager
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import groovy.json.JsonSlurper
import groovy.json.StreamingJsonBuilder
import com.atlassian.jira.config.util.JiraHome
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import java.text.SimpleDateFormat
import java.text.ParseException
import java.text.DecimalFormat
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.util.IssueChangeHolder
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder

import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

/*Script Variables*/
//Per Post Function
issue = issue
//Per test da console
//IssueManager issueManager = ComponentAccessor.getIssueManager()
//issue = issueManager.getIssueByKeyIgnoreCase("OPUT-3382")

/*Insight classes &amp; components*/
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);
/* Get Insight IQL Facade from plugin accessor */
Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade"); 
iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);
Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory");
objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);
/* Get Insight Object Type Facade from plugin accessor */
Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade"); 
objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);

def DBO=properties['ischema.dbo.id'].toString().toInteger()
def OPAA=properties['ischema.aa.id'].toString().toInteger()
//Attribute IDs
def RATE_TOTAL_AMOUNT_SUPPLIER=properties['iboj.onSiteRateReport.totSupplier.id'].toString().toInteger()
def RATE_TOTAL_AMOUNT_CUSTOMER=properties['iboj.onSiteRateReport.totCustomer.id'].toString().toInteger()
def COMPONENT_TOTAL_AMOUNT_SUPPLIER=properties['iobj.component.totSupp.id'].toString().toInteger()
def COMPONENT_TOTAL_AMOUNT_CUSTOMER=properties['iobj.component.totCust.id'].toString().toInteger()

def COMPONENT_NAME=properties['iobj.component.name.id'].toString().toInteger()
def COMPONENT_HARDWARE_REF=properties['iobj.component.hardwareRef.id'].toString().toInteger()
def COMPONENT_SAP=properties['iobj.component.sap.id'].toString().toInteger()
def COMPONENT_SUPPLIED_BY_FAAC=properties['iobj.component.suppliedByFaac.id'].toString().toInteger()
def COMPONENT_QUANTITY=properties['iobj.component.quantity.id'].toString().toInteger()
def COMPONENT_QUOTE_REQUIRED=properties['iobj.component.quoteRequired.id'].toString().toInteger()
def COMPONENT_SUPPLIER_QUOTE_TO_FAAC=properties['iobj.component.supplierQuote.id'].toString().toInteger()
def COMPONENT_FAAC_QUOTE_TO_CUSTOMER=properties['iobj.component.customerQuote'].toString().toInteger()
def COMPONENT_APPLIED_TO=properties['iobj.component.appliedTo'].toString().toInteger()
def COMPONENT_MATERIAL_REF=properties['iobj.component.materialRef.id'].toString().toInteger()
def COMPONENT_ACCOUNTING_SUPPLIER_MATERIAL_REF=properties['iobj.component.accountingSuppMatRef.id'].toString().toInteger()
def COMPONENT_ACCOUNTING_CUSTOMER_MATERIAL_REF=properties['iobj.component.accountingCustMatRef.id'].toString().toInteger()
def COMPONENT_FROM_QUOTE_TKT=properties['iobj.component.fromQuoteTkt.id'].toString().toInteger()
def COMPONENT_DELETED=properties['iobj.component.deleted.id'].toString().toInteger()
    
//ObjType IDs
def COMPONENT=properties['iobj.component'].toString().toInteger()


/*Customfields*/
def quoteRepMaterials = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteMaterials'].toString())[0]
def repMaterials = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.replacedMaterials'].toString())[0]

def mi = (MutableIssue) issue
def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()

/*Variables*/
def repMatList = issue.getCustomFieldValue(quoteRepMaterials)
def objList = new ArrayList()

for(mat in repMatList){
	//extract insight key and get object
    def component=mat.toString()
    def componentKey = component.substring(component.indexOf('(')+1,component.indexOf(')'))
    def componentObject = objectFacade.loadObjectBean(componentKey)
    
    def newObjAttributesList = new ArrayList()
    def i = 0
    
    def objectTypeComponent = objectTypeFacade.loadObjectTypeBean(COMPONENT);
    /* Create a new unsaved object bean */
    def newObjectBean = objectTypeComponent.createObjectBean();

    /* Set up the attribute list */
    def objectAttributeBeans = new ArrayList();

    /* Set the name of the Component */
    /*Nome Component*/
    obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.name'].toString()).createMutable()
	def compName = obTriage.getObjectAttributeValueBeans()
	compName=compName[0].getValue()
    log.debug "object name: " + compName
    def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_NAME); // The ID of the object type attribute "Name"
    def nameObjectAttributeBean = newObjectBean.createObjectAttributeBean(nameObjectTypeAttributeBean); // This is the name object attribute for the new object
    def nameObjectAttributeValueBean = nameObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
    nameObjectAttributeValueBean.setTextValueShort(compName); // Set the name

    def values = nameObjectAttributeBean.getObjectAttributeValueBeans(); 
    values.add(nameObjectAttributeValueBean); // Add the value to the object attribute
	log.debug values
    nameObjectAttributeBean.setObjectAttributeValueBeans(values); 
	objectAttributeBeans.add(nameObjectAttributeBean);
    
    /* Set the HARDWARE_REF of the new obj */
    obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.hardwareRef'].toString()).createMutable()
	def hw = obTriage.getObjectAttributeValueBeans()
	hwKey=hw[0].getValue()    
    def HwRefObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_HARDWARE_REF); // The ID for the referenced object type
    HwRefObjectAttributeBean = newObjectBean.createObjectAttributeBean(HwRefObjectTypeAttributeBean); 
    HwRefObjectAttributeValueBean = HwRefObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
    HwRefObjectAttributeValueBean.setReferencedObjectBeanId(hwKey); // Set the ID

    values = HwRefObjectAttributeBean.getObjectAttributeValueBeans(); 
    values.add(HwRefObjectAttributeValueBean); // Add the value to the object attribute
	log.debug values
    HwRefObjectAttributeBean.setObjectAttributeValueBeans(values); 

    objectAttributeBeans.add(HwRefObjectAttributeBean); // Add to the list of object attributes

    /* Set the COMPONENT_SAP flag of the Hardware */
    obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.sap'].toString()).createMutable()
	def sap = obTriage.getObjectAttributeValueBeans()
	sap=sap[0].getValue()
    def compSapObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_SAP); // The ID of the object type attribute "DISABLED"
    def compSapObjectAttributeBean = newObjectBean.createObjectAttributeBean(compSapObjectTypeAttributeBean); // This is the name object attribute for the new object
    def compSapObjectAttributeValueBean = compSapObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
    compSapObjectAttributeValueBean.setBooleanValue(sap); // Set the name

    values = compSapObjectAttributeBean.getObjectAttributeValueBeans(); 
    values.add(compSapObjectAttributeValueBean); // Add the value to the object attribute
	log.debug values
    compSapObjectAttributeBean.setObjectAttributeValueBeans(values); 
	objectAttributeBeans.add(compSapObjectAttributeBean);
    
    /* Set the DELETED flag of the Hardware */
    def deleted 
    if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString())){
        obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString()).createMutable()
		deleted = obTriage.getObjectAttributeValueBeans()
        deleted=deleted[0].getValue()
    }
    if(deleted!=null){
        def deletedObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_DELETED); // The ID of the object type attribute "DISABLED"
        def deletedObjectAttributeBean = newObjectBean.createObjectAttributeBean(deletedObjectTypeAttributeBean); // This is the name object attribute for the new object
        def deletedObjectAttributeValueBean = deletedObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
        deletedObjectAttributeValueBean.setBooleanValue(deleted); // Set the name

        values = deletedObjectAttributeBean.getObjectAttributeValueBeans(); 
        values.add(deletedObjectAttributeValueBean); // Add the value to the object attribute
		log.debug values
        deletedObjectAttributeBean.setObjectAttributeValueBeans(values); 
        objectAttributeBeans.add(deletedObjectAttributeBean);
    }
         
    /*Nome COMPONENT_QUANTITY*/
    obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.quantity'].toString()).createMutable()
	def qta = obTriage.getObjectAttributeValueBeans()
	qta=qta[0].getValue()
    def qtaObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_QUANTITY); // The ID of the object type attribute "DISABLED"
    def qtaObjectAttributeBean = newObjectBean.createObjectAttributeBean(qtaObjectTypeAttributeBean); // This is the name object attribute for the new object
    def qtaObjectAttributeValueBean = qtaObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
    qtaObjectAttributeValueBean.setDoubleValue(qta); // Set the name

    values = qtaObjectAttributeBean.getObjectAttributeValueBeans(); 
    values.add(qtaObjectAttributeValueBean); // Add the value to the object attribute
	log.debug values
    qtaObjectAttributeBean.setObjectAttributeValueBeans(values); 
    objectAttributeBeans.add(qtaObjectAttributeBean);
    
	/*Nome COMPONENT_QUOTE_REQUIRED*/
    obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.quoteRequired'].toString()).createMutable()
	def quoteReq = obTriage.getObjectAttributeValueBeans()
	quoteReq=quoteReq[0].getValue()
    def quoteReqObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_QUOTE_REQUIRED); // The ID of the object type attribute "DISABLED"
    def quoteReqObjectAttributeBean = newObjectBean.createObjectAttributeBean(quoteReqObjectTypeAttributeBean); // This is the name object attribute for the new object
    def quoteReqObjectAttributeValueBean = quoteReqObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
    quoteReqObjectAttributeValueBean.setBooleanValue(quoteReq); // Set the name

    values = quoteReqObjectAttributeBean.getObjectAttributeValueBeans(); 
    values.add(quoteReqObjectAttributeValueBean); // Add the value to the object attribute
	log.debug values
    quoteReqObjectAttributeBean.setObjectAttributeValueBeans(values); 
    objectAttributeBeans.add(quoteReqObjectAttributeBean);
    
    /*Nome COMPONENT_SUPPLIER_QUOTE_TO_FAAC*/
    obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.suppQuote'].toString()).createMutable()
	def suppQuote = obTriage.getObjectAttributeValueBeans()
	suppQuote=suppQuote[0].getValue()
    def suppQuoteObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_SUPPLIER_QUOTE_TO_FAAC); // The ID of the object type attribute "DISABLED"
    def suppQuoteObjectAttributeBean = newObjectBean.createObjectAttributeBean(suppQuoteObjectTypeAttributeBean); // This is the name object attribute for the new object
    def suppQuoteObjectAttributeValueBean = suppQuoteObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
    suppQuoteObjectAttributeValueBean.setDoubleValue(suppQuote); // Set the name

    values = suppQuoteObjectAttributeBean.getObjectAttributeValueBeans(); 
    values.add(suppQuoteObjectAttributeValueBean); // Add the value to the object attribute
	log.debug values
    suppQuoteObjectAttributeBean.setObjectAttributeValueBeans(values); 
    objectAttributeBeans.add(suppQuoteObjectAttributeBean);
   	
	/*Nome COMPONENT_FAAC_QUOTE_TO_CUSTOMER*/
    obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.custQuote'].toString()).createMutable()
	def custQuote = obTriage.getObjectAttributeValueBeans()
	custQuote=custQuote[0].getValue()
    def custQuoteObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_FAAC_QUOTE_TO_CUSTOMER); // The ID of the object type attribute "DISABLED"
    def custQuoteObjectAttributeBean = newObjectBean.createObjectAttributeBean(custQuoteObjectTypeAttributeBean); // This is the name object attribute for the new object
    def custQuoteObjectAttributeValueBean = custQuoteObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
    custQuoteObjectAttributeValueBean.setDoubleValue(custQuote); // Set the name

    values = custQuoteObjectAttributeBean.getObjectAttributeValueBeans(); 
    values.add(custQuoteObjectAttributeValueBean); // Add the value to the object attribute
	log.debug values
    custQuoteObjectAttributeBean.setObjectAttributeValueBeans(values); 
   	objectAttributeBeans.add(custQuoteObjectAttributeBean);

	/*Nome COMPONENT_APPLIED_TO*/
    obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString()).createMutable()
	def appliedTo = obTriage.getObjectAttributeValueBeans()
	appliedTo=appliedTo[0].getValue()
    def appliedToObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_APPLIED_TO); // The ID of the object type attribute "DISABLED"
    def appliedToObjectAttributeBean = newObjectBean.createObjectAttributeBean(appliedToObjectTypeAttributeBean); // This is the name object attribute for the new object
    def appliedToObjectAttributeValueBean = appliedToObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
    appliedToObjectAttributeValueBean.setTextValue(appliedTo); // Set the name

    values = appliedToObjectAttributeBean.getObjectAttributeValueBeans(); 
    values.add(appliedToObjectAttributeValueBean); // Add the value to the object attribute
	log.debug values
    appliedToObjectAttributeBean.setObjectAttributeValueBeans(values); 
    objectAttributeBeans.add(appliedToObjectAttributeBean);
	
    
	/*Nome COMPONENT_TOTAL_AMOUNT_SUPPLIER*/
    obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString()).createMutable()
	def totSupp = obTriage.getObjectAttributeValueBeans()
	totSupp=totSupp[0].getValue()
    def totSuppObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_TOTAL_AMOUNT_SUPPLIER); // The ID of the object type attribute "DISABLED"
    def totSuppObjectAttributeBean = newObjectBean.createObjectAttributeBean(totSuppObjectTypeAttributeBean); // This is the name object attribute for the new object
    def totSuppObjectAttributeValueBean = totSuppObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
    totSuppObjectAttributeValueBean.setDoubleValue(totSupp); // Set the name

    values = totSuppObjectAttributeBean.getObjectAttributeValueBeans(); 
    values.add(totSuppObjectAttributeValueBean); // Add the value to the object attribute
	log.debug values
    totSuppObjectAttributeBean.setObjectAttributeValueBeans(values); 
    objectAttributeBeans.add(totSuppObjectAttributeBean);
	
	/*Nome COMPONENT_TOTAL_AMOUNT_CUSTOMER*/
    obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()).createMutable()
	def totCust = obTriage.getObjectAttributeValueBeans()
	totCust=totCust[0].getValue()
    def totCustObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_TOTAL_AMOUNT_CUSTOMER); // The ID of the object type attribute "DISABLED"
    def totCustObjectAttributeBean = newObjectBean.createObjectAttributeBean(totCustObjectTypeAttributeBean); // This is the name object attribute for the new object
    def totCustObjectAttributeValueBean = totCustObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
    totCustObjectAttributeValueBean.setDoubleValue(totCust); // Set the name

    values = totCustObjectAttributeBean.getObjectAttributeValueBeans(); 
    values.add(totCustObjectAttributeValueBean); // Add the value to the object attribute
	log.debug values
    totCustObjectAttributeBean.setObjectAttributeValueBeans(values); 
    objectAttributeBeans.add(totCustObjectAttributeBean);
 
	/*Nome COMPONENT_MATERIAL_REF*/
    obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).createMutable()
	def material = obTriage.getObjectAttributeValueBeans()
	material=material[0].getValue()
    def matRefObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_MATERIAL_REF); // The ID for the referenced object type
    matRefObjectAttributeBean = newObjectBean.createObjectAttributeBean(matRefObjectTypeAttributeBean); 
    matRefObjectAttributeValueBean = matRefObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
    matRefObjectAttributeValueBean.setReferencedObjectBeanId(material); // Set the ID

    values = matRefObjectAttributeBean.getObjectAttributeValueBeans(); 
    values.add(matRefObjectAttributeValueBean); // Add the value to the object attribute
	log.debug values
    matRefObjectAttributeBean.setObjectAttributeValueBeans(values); 

    objectAttributeBeans.add(matRefObjectAttributeBean); // Add to the list of object attributes
        
    
    def materialSAP       
	if (material!=null){
        /*MATERIAL - SAP*/
        obTriage = objectFacade.loadObjectAttributeBean(material.toInteger(), properties['iobj.material.sap'].toString()).createMutable()
        materialSAP = obTriage.getObjectAttributeValueBeans()
        materialSAP = materialSAP[0].getValue()
        log.debug "materialSAP: " + materialSAP
    }
            
	/*Nome COMPONENT_SUPPLIED_BY_FAAC*/
    def suppliedObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_SUPPLIED_BY_FAAC); // The ID of the object type attribute "DISABLED"
    def suppliedObjectAttributeBean = newObjectBean.createObjectAttributeBean(suppliedObjectTypeAttributeBean); // This is the name object attribute for the new object
    def suppliedObjectAttributeValueBean = suppliedObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
	if(materialSAP==true){
    	suppliedObjectAttributeValueBean.setTextValue("Yes"); // Set the name
    }else{
        suppliedObjectAttributeValueBean.setTextValue("No"); // Set the name
    }

    values = suppliedObjectAttributeBean.getObjectAttributeValueBeans(); 
    values.add(suppliedObjectAttributeValueBean); // Add the value to the object attribute
	log.debug values
    suppliedObjectAttributeBean.setObjectAttributeValueBeans(values); 
    objectAttributeBeans.add(suppliedObjectAttributeBean);
    
    /*Nome ACCOUNTING_SUPPLIER_MATERIAL_REF*/
    obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingSuppMaterial'].toString()).createMutable()
	def accMatSupp = obTriage.getObjectAttributeValueBeans()
	accMatSupp=accMatSupp[0].getValue()
    def accountingCustRefObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_ACCOUNTING_SUPPLIER_MATERIAL_REF); // The ID for the referenced object type
    accountingCustRefObjectAttributeBean = newObjectBean.createObjectAttributeBean(accountingCustRefObjectTypeAttributeBean); 
    accountingCustRefObjectAttributeValueBean = accountingCustRefObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
    accountingCustRefObjectAttributeValueBean.setReferencedObjectBeanId(accMatSupp); // Set the ID

    values = accountingCustRefObjectAttributeBean.getObjectAttributeValueBeans(); 
    values.add(accountingCustRefObjectAttributeValueBean); // Add the value to the object attribute
	log.debug values
    accountingCustRefObjectAttributeBean.setObjectAttributeValueBeans(values); 

    objectAttributeBeans.add(accountingCustRefObjectAttributeBean); // Add to the list of object attributes
    
	/*Nome COMPONENT_ACCOUNTING_CUSTOMER_MATERIAL_REF*/
    obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingCustMaterial'].toString()).createMutable()
	def accMatCust = obTriage.getObjectAttributeValueBeans()
	accMatCust=accMatCust[0].getValue()
    def accMatCustObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_ACCOUNTING_CUSTOMER_MATERIAL_REF); // The ID for the referenced object type
    accMatCustObjectAttributeBean = newObjectBean.createObjectAttributeBean(accMatCustObjectTypeAttributeBean); 
    accMatCustObjectAttributeValueBean = accMatCustObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
    accMatCustObjectAttributeValueBean.setReferencedObjectBeanId(accMatCust); // Set the ID

    values = accMatCustObjectAttributeBean.getObjectAttributeValueBeans(); 
    values.add(accMatCustObjectAttributeValueBean); // Add the value to the object attribute
	log.debug values
    accMatCustObjectAttributeBean.setObjectAttributeValueBeans(values); 

    objectAttributeBeans.add(accMatCustObjectAttributeBean); // Add to the list of object attributes
        
	/*Nome COMPONENT_FROM_QUOTE_TKT*/
	def fromQuoteObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_FROM_QUOTE_TKT); // The ID of the object type attribute "DISABLED"
    def fromQuoteObjectAttributeBean = newObjectBean.createObjectAttributeBean(fromQuoteObjectTypeAttributeBean); // This is the name object attribute for the new object
    def fromQuoteObjectAttributeValueBean = fromQuoteObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
    if(materialSAP==true){
        fromQuoteObjectAttributeValueBean.setBooleanValue(true); // Set the name
    }else{
        fromQuoteObjectAttributeValueBean.setBooleanValue(false); // Set the name
    }

    values = fromQuoteObjectAttributeBean.getObjectAttributeValueBeans(); 
    values.add(fromQuoteObjectAttributeValueBean); // Add the value to the object attribute
	log.debug values
    fromQuoteObjectAttributeBean.setObjectAttributeValueBeans(values); 
    objectAttributeBeans.add(fromQuoteObjectAttributeBean);
    
    log.debug "objectAttributeBeans: " + objectAttributeBeans
    /* Set all object attributes to the object */
    newObjectBean.setObjectAttributeBeans(objectAttributeBeans);

    try {
     	newObjectBean = objectFacade.storeObjectBean(newObjectBean);
        objList.add(newObjectBean)
     	log.debug("newObjectBean: " + newObjectBean);
    } catch (Exception vie) {
     	log.warn("Could not create issue due to validation exception:" + vie.getMessage());
    }
    
}

mi.setCustomFieldValue(repMaterials, objList);
ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
          </arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="321" name="Offerta Rifiutata da Cliente">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <results>
            <unconditional-result old-status="žée" status="žée" step="13">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="331" name="Richiesta Preventivo Scaduta">
          <meta name="opsbar-sequence">30</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <results>
            <unconditional-result old-status="žée" status="žée" step="14">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="12" name="Eê®·">
      <meta name="jira.status.id">14335</meta>
      <actions>
<common-action id="51" />
      </actions>
    </step>
    <step id="13" name="EèÞr×">
      <meta name="jira.status.id">11436</meta>
    </step>
    <step id="14" name="Quote Expired">
      <meta name="jira.status.id">14336</meta>
    </step>
    <step id="15" name="Deleted">
      <meta name="jira.status.id">10335</meta>
      <actions>
<common-action id="371" />
      </actions>
    </step>
    <step id="16" name="Suspended">
      <meta name="jira.status.id">14337</meta>
      <actions>
<common-action id="371" />
      </actions>
    </step>
    <step id="17" name="&#09;©‹zWù">
      <meta name="jira.status.id">11728</meta>
      <actions>
<common-action id="371" />
      </actions>
    </step>
  </steps>
</workflow>