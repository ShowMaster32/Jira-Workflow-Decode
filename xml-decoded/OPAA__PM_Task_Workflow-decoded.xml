<?xml version='1.0' encoding='UTF-8'?>
<workflow>
  <meta name="jira.description" />
  <meta name="jira.update.author.key">arianna.fabbri</meta>
  <meta name="jira.updated.date">1658435985748</meta>
  <initial-actions>
    <action id="1" name="Create">
      <validators>
        <validator name="" type="class">
          <arg name="permission">Create Issue</arg>
          <arg name="class.name">com.atlassian.jira.workflow.validator.PermissionValidator</arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="žée" status="¢—§" step="6">
          <post-functions>
            <function type="class">
              <arg name="scopeSource-linkEnd" />
              <arg name="append.value" />
              <arg name="maxAllowed-integerValue" />
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field.value">MAINTENANCE_ENABLED</arg>
              <arg name="field.name">customfield_22814</arg>
              <arg name="scopeType">H</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd" />
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql" />
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql" />
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueCreateFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">1</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">5eec2e6a-a9b1-4b1b-bbfc-a379ffb2a7fa</arg>
              <arg name="FIELD_NOTES">Update Parent Ticket OP_PM_INVOLVED_INSTALLATIONS_NUMBER field with tot numb of sub-tasks</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.link.IssueLink\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef subTasksNum =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_PM_INVOLVED_INSTALLATIONS_NUMBER\")[0]\n\n//Per test da console\n//def issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-23640\")\n\ndef parentTkt = issue.getParentObject()\n\nsubTasksNum.updateValue(null, parentTkt, new ModifiedValue(parentTkt.getCustomFieldValue(subTasksNum), (issue.getParentObject().getSubTaskObjects().size()+1).toDouble()), new DefaultIssueChangeHolder())\nlog.debug issue.getParentObject().getSubTaskObjects().size()\n\n","scriptPath":null,"parameters":{}}</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </initial-actions>
  <global-actions>
    <action id="141" name="Eseguita con cartaceo">
      <meta name="jira.description" />
      <meta name="jira.fieldscreen.id" />
      <validators>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">32a67932-b290-4d96-9333-4b1480b4c5c8</arg>
          <arg name="FIELD_NOTES">Update SN &amp; SO</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\ndef serviceOrder = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_ORDER\")[0]\n\nURL url\nHttpURLConnection connection\n\nrequestMethod = \"POST\";\n\ndef body_req = []\nbody_req = [\n    \"issueKey\": issue.key,\n    \"status\": \"CLO\"\n] \n\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\nlog.debug \"baseURL SN: \" + baseURL\nlog.debug \"body_req SN: \" + body_req\nurl = new URL(baseURL)\nconnection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.outputStream\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\nlog.debug connection.outputStream\nconnection.connect();\n\ndef output = new ArrayList()\ndef eList = new ArrayList()\ndef eListErrors = new ArrayList()\ndef errorMsgs = new ArrayList()\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n    eListErrors.add(\"E\")\n    eListErrors.add(\"SN_UPDATE\")\n    errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n    eListErrors.add(errorMsgs)\n    eList.add(eListErrors)\n\n    output.add(eList)\n    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n}else{\n    if(issue.getCustomFieldValue(serviceOrder)==null){\n        /** SERVICE ORDER CREATION **/\n        body_req = [\n            \"issueKey\": issue.key\n        ] \n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\n\n        log.debug \"baseURL SO: \" + baseURL\n        log.debug \"body_req SO: \" + body_req\n        url = new URL(baseURL)\n        connection = (HttpURLConnection)url.openConnection();\n        connection.setRequestMethod(requestMethod);\n        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n        connection.setRequestProperty(\"Accept\", \"*/*\");\n        connection.setDoOutput(true);\n        connection.setDoInput(true);\n        connection.outputStream\n        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n        log.debug connection.outputStream\n        connection.connect();\n\n        output = new ArrayList()\n        eList = new ArrayList()\n        eListErrors = new ArrayList()\n        errorMsgs = new ArrayList()\n\n        if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n            log.debug \"url: \" + url\n            log.debug \"ResponseCode:\" + connection.getResponseCode()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n            def outputMsg = ((HttpURLConnection)connection).errorStream.text\n            log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n            def jsonSlurper = new JsonSlurper()\n            def json_object = jsonSlurper.parseText(outputMsg)\n            assert json_object instanceof Map  \n            log.debug \"message: \" +  json_object.message\n            log.debug \"errors: \" +  json_object.errors.toString()\n\n            eListErrors.add(\"E\")\n            eListErrors.add(\"SO_CREATE\")\n            errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n            eListErrors.add(errorMsgs)\n            eList.add(eListErrors)\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        }\n        \n    }\n}","scriptPath":null}</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="žée" status="žée" step="5">
          <post-functions>
            <function type="class">
              <arg name="field.name">resolution</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
              <arg name="field.value">6</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="161" name="&#09;©‹zWù">
      <meta name="jira.description" />
      <meta name="jira.fieldscreen.id" />
      <results>
        <unconditional-result old-status="žée" status="žée" step="8">
          <post-functions>
            <function type="class">
              <arg name="field.name">resolution</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
              <arg name="field.value">10103</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="171" name="EèÞr×">
      <meta name="jira.description" />
      <meta name="jira.fieldscreen.id" />
      <results>
        <unconditional-result old-status="žée" status="žée" step="9">
          <post-functions>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </global-actions>
  <common-actions>
    <action id="41" name="Start Progress">
      <meta name="jira.description" />
      <meta name="jira.fieldscreen.id" />
      <restrict-to>
        <conditions>
          <condition type="class">
            <arg name="FIELD_FUNCTION_ID">519e584f-1e24-4d74-bbb9-ec343c3be7f1</arg>
            <arg name="FIELD_NOTES">Enabled only if parent task is "In Progress"</arg>
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
            <arg name="FIELD_CONDITION">{"script":"issue.parentObject?.status?.name == \"In Progress\"","scriptPath":null}</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
          </condition>
        </conditions>
      </restrict-to>
      <validators>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">da95600f-b12d-41a9-ba8a-97f002bd20c1</arg>
          <arg name="FIELD_NOTES">Check PM operations on PM task</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport com.atlassian.jira.issue.IssueManager\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport java.text.SimpleDateFormat;\nimport com.atlassian.jira.issue.index.IssueIndexingService\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-4159\")\n\nlog.debug \"Transazione Complete - Primo validator\"\nlog.debug \"Transazione Complete - Primo validator - Issue: \" + issue\n\ndef errors = false\ndef warnings = false\n\ndef pmOperations =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_PM_OPERATIONS\")[0]\n\nlog.debug \"issue.getCustomFieldValue(pmOperations): \" + issue.getCustomFieldValue(pmOperations)\nif(issue.getCustomFieldValue(pmOperations)==null){\n    errors=true\n}\n\ndef output = new ArrayList()\n\nif (!errors){\n    return true\n}else{\n    def eList = new ArrayList()           \n    def eListSubTaskCompleted = new ArrayList()\n    eListSubTaskCompleted.add(\"E\")\n    eListSubTaskCompleted.add(\"MISSING_PM_OPERATIONS\")\n    eListSubTaskCompleted.add(null)\n    eList.add(eListSubTaskCompleted)\n\n    output.add(eList)\n    log.debug \"throw exception: \" + output.toString()\n    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    //throw new InvalidInputException(\"E\", output.toString())   \n}\n","scriptPath":null}</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">b24b77fd-c8bd-438e-bfca-049838725b25</arg>
          <arg name="FIELD_NOTES">SAP: update SN status</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\n\nrequestMethod = \"POST\";\n\ndef body_req = []\nbody_req = [\n    \"issueKey\": issue.key,\n    \"status\": \"INP\"\n] \n\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\nurl = new URL(baseURL)\nconnection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.outputStream\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\nlog.debug connection.outputStream\nconnection.connect();\n\ndef output = new ArrayList()\ndef eList = new ArrayList()\ndef eListErrors = new ArrayList()\ndef errorMsgs = new ArrayList()\n\nif (!connection.getResponseCode().toString().startsWith(\"20\")){\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n    eListErrors.add(\"E\")\n    eListErrors.add(\"SN_UPDATE\")\n    errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n    eListErrors.add(errorMsgs)\n    eList.add(eListErrors)\n\n    output.add(eList)\n    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n}\n\n","scriptPath":null}</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="Not Done" status="‰Þ" step="7">
          <post-functions>
            <function type="class">
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </common-actions>
  <steps>
    <step id="3" name="Confirmed and Planned">
      <meta name="jira.status.id">14329</meta>
      <actions>
<common-action id="41" />
        <action id="111" name="Genera Operazioni di Manutenzione">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">56d285d0-3b7f-4146-a3ed-b1319013939d</arg>
                <arg name="FIELD_NOTES">PM Task senza PM operations</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"cfValues['OP_PM_OPERATIONS'] == null","scriptPath":null}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">36237cda-1b88-49eb-8e62-354285079ef6</arg>
              <arg name="FIELD_NOTES">PM Task: genera operazioni di manutenzione</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport com.atlassian.jira.issue.index.IssueIndexingService\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\n\n/* REST API per pulizia cache issue linkata */\nrequestMethod = \"PUT\";\n/*Script Variables*/\n//Per test da console\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-32535\")\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/pm-subtask/\" + issue.key + \"/operations\"\nURL url = new URL(baseURL)\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.connect();\nlog.debug \"url: \" + url\nlog.debug \"ResponseCode:\" + connection.getResponseCode()\nlog.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n}\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\nissueIndexingService.reIndex(issue)","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="3">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="131" name="Back to Open">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">bd043487-de88-4d19-be05-d40a8c6c131b</arg>
                <arg name="FIELD_INVERT_CONDITION" />
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_USER_IDS">arianna.fabbri</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="4" name="In Progress">
      <meta name="jira.status.id">3</meta>
      <actions>
        <action id="51" name="Maintenance Completed" view="fieldscreen">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20204</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">4c38acf4-2d87-4197-a86b-51b844dcbe39</arg>
              <arg name="FIELD_NOTES">Check RISK_DESCRIPTION if RISK FOUND = true</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport com.atlassian.jira.issue.IssueManager\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport java.text.SimpleDateFormat;\nimport com.atlassian.jira.issue.index.IssueIndexingService\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-4159\")\n\ndef errors = false\ndef warnings = false\n\ndef onSiteOperations =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_PM_OPERATIONS\")[0]\n\ndef errorMandatoryFields = false\n\nif(issue.getCustomFieldValue(onSiteOperations)!=null &amp;&amp; (String)issue.getCustomFieldValue(onSiteOperations) != \"\" &amp;&amp; !issue.getCustomFieldValue(onSiteOperations).toString().equals(\"\")){\n    /*Ciclare tutti gli oggetti associati al campo*/\n    //insight classes &amp; components\n    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n    def onSiteOpField = issue.getCustomFieldValue(onSiteOperations)\n    log.debug \"onSiteOpField: \" + onSiteOpField\n    for(op in onSiteOpField){\n        //extract insight key ang get object\n        def operation=op.toString()\n        def operationKey = operation.substring(operation.lastIndexOf('(')+1,operation.lastIndexOf(')'))\n        def operationObject = objectFacade.loadObjectBean(operationKey)\n\n        def obTriage\n        def riskFound\n        def riskDescription\n        def opName\n        \n        if(objectFacade.loadObjectAttributeBean(operationObject.getId(), \"DANGEROUS\")){\n            obTriage = objectFacade.loadObjectAttributeBean(operationObject.getId(), \"DANGEROUS\").createMutable()\n            riskFound = obTriage.getObjectAttributeValueBeans()[0].getValue()\n        }\n\n        log.debug \"riskFound: \" + riskFound\n\n        if(riskFound==true){\n            if(objectFacade.loadObjectAttributeBean(operationObject.getId(), \"RISK_DESCRIPTION\")){\n                obTriage = objectFacade.loadObjectAttributeBean(operationObject.getId(), \"RISK_DESCRIPTION\").createMutable()\n                riskDescription = obTriage.getObjectAttributeValueBeans().value.toString()\n                log.debug \"riskDescription: \" + riskDescription==null\n                if(riskDescription==null){\n                    errors = true\n                \terrorMandatoryFields = true\n                }\n            }else{\n                errors = true\n                errorMandatoryFields = true\n            }\n        }\n    }\n}\n\n\ndef output = new ArrayList()\n\nif (!errors){\n    return true\n}else{\n    if(errors){\n        def eList = new ArrayList()\n        if(errorMandatoryFields){\n            def eListMandatory = new ArrayList()\n            eListMandatory.add(\"E\")\n            eListMandatory.add(\"MANDATORY_RISK_DETAILS\")\n            eListMandatory.add(null)\n            eList.add(eListMandatory)\n        }\n\n        output.add(eList)\n        log.debug \"throw exception: \" + output.toString()\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n}\n","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">5da0be63-d7e9-42df-b2d7-82f837a60fb5</arg>
              <arg name="FIELD_NOTES">SAP: update SN status</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\n\nrequestMethod = \"POST\";\n\ndef body_req = []\nbody_req = [\n    \"issueKey\": issue.key,\n    \"status\": \"CLO\"\n] \n\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\nlog.debug \"body_req SN: \" + body_req\nlog.debug \"baseURL SN: \" + baseURL\nurl = new URL(baseURL)\nconnection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.outputStream\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\nlog.debug connection.outputStream\nconnection.connect();\n\ndef output = new ArrayList()\ndef eList = new ArrayList()\ndef eListErrors = new ArrayList()\ndef errorMsgs = new ArrayList()\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n    eListErrors.add(\"E\")\n    eListErrors.add(\"SN_UPDATE\")\n    errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n    eListErrors.add(errorMsgs)\n    eList.add(eListErrors)\n\n    output.add(eList)\n    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n}else{\n    /** La service confirmation va generata solo nel caso di tecnici interni **/\n    if(false){ /** --&gt; sostituire il false con la verifica dei tecnici interni **/\n            body_req = [\n            \"issueKey\": issue.key,\n        ] \n\n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/order/confirmation\"\n        log.debug \"body_req SC: \" + body_req\n        log.debug \"baseURL SC: \" + baseURL\n        url = new URL(baseURL)\n        connection = (HttpURLConnection)url.openConnection();\n        connection.setRequestMethod(requestMethod);\n        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n        connection.setRequestProperty(\"Accept\", \"*/*\");\n        connection.setDoOutput(true);\n        connection.setDoInput(true);\n        connection.outputStream\n        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n        log.debug connection.outputStream\n        connection.connect();\n\n        output = new ArrayList()\n        eList = new ArrayList()\n        eListErrors = new ArrayList()\n        errorMsgs = new ArrayList()\n\n        if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n            log.debug \"url: \" + url\n            log.debug \"ResponseCode:\" + connection.getResponseCode()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n            eListErrors.add(\"E\")\n            eListErrors.add(\"SC_CREATE\")\n            errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n            eListErrors.add(errorMsgs)\n            eList.add(eListErrors)\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        }\n\n    }\n}\n","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="v+nWù">false</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="5">
              <post-functions>
                <function type="class">
                  <arg name="field.name">resolution</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
                  <arg name="field.value">6</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">d0ff0e0c-0d1c-4309-b2d2-89ce8055a4a1</arg>
                  <arg name="FIELD_NOTES">Check and fill in OP_PM_ASSET_RISKS_RESULT - OP_ASSET_TO_BE_STOPPED</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport com.atlassian.jira.issue.IssueManager\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.atlassian.jira.issue.MutableIssue\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n    properties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-23678\")\n\ndef risk = false\ndef check = false\ndef completed = true\ndef not_completed = 0\n\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\ndef asset =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_ASSET\")[0]\ndef customer =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CUSTOMER\")[0]\ndef pmstatus = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_PM_ASSET_RISKS_RESULT\")[0]\ndef pmStopAsset = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_ASSET_TO_BE_STOPPED\")[0]\n\nif(issue.getCustomFieldValue(asset)!=null &amp;&amp; (String)issue.getCustomFieldValue(asset) != \"\" &amp;&amp; !issue.getCustomFieldValue(asset).toString().equals(\"\")){\n    //insight classes &amp; components\n    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n    def pmAsset = issue.getCustomFieldValue(asset)\n    log.debug \"pmAsset: \" + pmAsset\n\n    //extract insight key ang get object\n    def installation=pmAsset.toString()\n    def installationKey = installation.substring(installation.lastIndexOf('(')+1,installation.lastIndexOf(')'))\n    def installationObj = objectFacade.loadObjectBean(installationKey)\n    log.debug \"installationObj: \" + installationObj\n    log.debug \"installationObj.getId(): \" + installationObj.getId()\n    def obTriage\n    def prodType, uscitaSicurezza, sfondamento, anteSfondano, sfondamentoOstacoli, sfondamentoFerma, batterie, anticadutaCarter, anticadutaFunzionanti, radar, radarFunzionanti, sensoriPresenza, sensoriPresenzaLati, fotocellule, fotocelluleFunzionanti, schiacciamento, cesoiamento, altriRischi, forzaImpatto\n\n    //TIPO IMPIANTO\n    if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PUBLIC_PRODUCT_FAMILY_REF\")){\n        obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PUBLIC_PRODUCT_FAMILY_REF\").createMutable()\n        def prodTypeId = obTriage.getObjectAttributeValueBeans()[0].getValue()\n        prodType = objectFacade.loadObjectAttributeBean(prodTypeId, \"Name\").createMutable().getObjectAttributeValueBeans()[0].getValue().toString()\n    }\n    log.debug \"prodType: \" + prodType\n    def status\n    def tobeStopped = false\n    def cfNewValue, fieldConfig\n    \n    def tfRischi, tfImpiantoANorma\n    if(!prodType.equals(\"PORTE AUTOMATICHE\") &amp;&amp; !prodType.equals(\"CANCELLI AUTOMATICI\") &amp;&amp; !prodType.equals(\"BARRIERE\")){\n        //ALTRI RISCHI\n        //TF_RISCHI_RILEVATI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"TF_RISCHI_RILEVATI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"TF_RISCHI_RILEVATI\").createMutable()\n            tfRischi = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"tfRischi: \" + tfRischi\n        \n        //IMPIANTO NON A NORMA\n        //TF_IMPIANTO_A_NORMA\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"TF_IMPIANTO_A_NORMA\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"TF_IMPIANTO_A_NORMA\").createMutable()\n            tfImpiantoANorma = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"tfImpiantoANorma: \" + tfImpiantoANorma\n        \n        if(tfRischi!=null || tfImpiantoANorma.toString().equals(\"NO\"))\n        {\n            risk = true\n        }\n\n        if (risk){\n            status = \"RISK_DETECTED\"\n        }else{\n            status = \"RISK_ANALYSIS_OK\"\n        }\n        log.debug \"status: \" + status\n        def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n        def mi = (MutableIssue) issue\n\n        fieldConfig = pmstatus.getRelevantConfig(issue)\n        //log.warn \"fieldConfig: \" + fieldConfig\n        cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == status }\n\n        pmstatus.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(pmstatus), cfNewValue), new DefaultIssueChangeHolder())\n        issueIndexingService.reIndex(issue)\n        \n    }\n    \n    //PORTE AUTOMATICHE\n    if(prodType.equals(\"PORTE AUTOMATICHE\")){\n        //A\tPORTE_USCITA_SICUREZZA\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_USCITA_SICUREZZA\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_USCITA_SICUREZZA\").createMutable()\n            uscitaSicurezza = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"uscitaSicurezza: \" + uscitaSicurezza\n\n        //B\tPORTE_SFONDAMENTO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_SFONDAMENTO\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_SFONDAMENTO\").createMutable()\n            sfondamento = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"sfondamento: \" + sfondamento\n\n        //C\tPORTE_SFONDAMENTO_ANTE_POSIZIONE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_SFONDAMENTO_ANTE_POSIZIONE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_SFONDAMENTO_ANTE_POSIZIONE\").createMutable()\n            anteSfondano = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"anteSfondano: \" + anteSfondano\n\n        //D\tPORTE_OSTACOLI_SFONDAMENTO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_OSTACOLI_SFONDAMENTO\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_OSTACOLI_SFONDAMENTO\").createMutable()\n            sfondamentoOstacoli = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"sfondamentoOstacoli: \" + sfondamentoOstacoli\n\n        //E\tPORTE_DISPOSITIVO_STOP\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_DISPOSITIVO_STOP\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_DISPOSITIVO_STOP\").createMutable()\n            sfondamentoFerma = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"sfondamentoFerma: \" + sfondamentoFerma\n\n        //F\tPORTE_BATTERIE_EMERGENZA\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_BATTERIE_EMERGENZA\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_BATTERIE_EMERGENZA\").createMutable()\n            batterie = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"batterie: \" + batterie\n\n        //G\tPORTE_DISPOSITIVO_ANTICADUTA_CARTER\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_DISPOSITIVO_ANTICADUTA_CARTER\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_DISPOSITIVO_ANTICADUTA_CARTER\").createMutable()\n            anticadutaCarter = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"anticadutaCarter: \" + anticadutaCarter\n\n        //H\tPORTE_ANTICADUTA_CARTER_FUNZIONANTE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_ANTICADUTA_CARTER_FUNZIONANTE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_ANTICADUTA_CARTER_FUNZIONANTE\").createMutable()\n            anticadutaFunzionanti = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"anticadutaFunzionanti: \" + anticadutaFunzionanti\n\n        //I\tPORTE_RADAR_TYPE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_RADAR_TYPE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_RADAR_TYPE\").createMutable()\n            radar = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"radar: \" + radar\n\n        //L\tPORTE_RADAR_FUNZIONANTI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_RADAR_FUNZIONANTI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_RADAR_FUNZIONANTI\").createMutable()\n            radarFunzionanti = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"radarFunzionanti: \" + radarFunzionanti\n\n        //M\tPORTE_PRESENZA_50MM_ANTE_MOBILI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PRESENZA_50MM_ANTE_MOBILI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PRESENZA_50MM_ANTE_MOBILI\").createMutable()\n            sensoriPresenza = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"sensoriPresenza: \" + sensoriPresenza\n\n        //N\tPORTE_PRESENZA_50MM_ANTE_MOBILI_LATI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PRESENZA_50MM_ANTE_MOBILI_LATI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PRESENZA_50MM_ANTE_MOBILI_LATI\").createMutable()\n            sensoriPresenzaLati = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"sensoriPresenzaLati: \" + sensoriPresenzaLati\n\n        //O\tPORTE_FOTOCELLULE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FOTOCELLULE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FOTOCELLULE\").createMutable()\n            fotocellule = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"fotocellule: \" + fotocellule\n\n        //P\tPORTE_FOTOCELLULE_FUNZIONANTI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FOTOCELLULE_FUNZIONANTI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FOTOCELLULE_FUNZIONANTI\").createMutable()\n            fotocelluleFunzionanti = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"fotocelluleFunzionanti: \" + fotocelluleFunzionanti\n\n        //Q\tPORTE_PROTEZIONE_SCHIACCIAMENTO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PROTEZIONE_SCHIACCIAMENTO\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PROTEZIONE_SCHIACCIAMENTO\").createMutable()\n            schiacciamento = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"schiacciamento: \" + schiacciamento\n\n        //R\tPORTE_PROTEZIONE_CESOIAMENTO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PROTEZIONE_CESOIAMENTO\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PROTEZIONE_CESOIAMENTO\").createMutable()\n            cesoiamento = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cesoiamento: \" + cesoiamento\n\n        //S\tPORTE_ALTRI_RISCHI_DA_SEGNALARE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_ALTRI_RISCHI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_ALTRI_RISCHI\").createMutable()\n            altriRischi = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"altriRischi: \" + altriRischi\n\n        //T\tPORTE_FORZA_IMPATTO_NEI_LIMITI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FORZA_IMPATTO_NEI_LIMITI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FORZA_IMPATTO_NEI_LIMITI\").createMutable()\n            forzaImpatto = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"forzaImpatto: \" + forzaImpatto   \n        \n\n        log.debug \"customer: \" + issue.getCustomFieldValue(customer).toString()\n        if(\n            (uscitaSicurezza.toString().equals(\"SI\") &amp;&amp; sfondamento.toString().equals(\"NESSUNO\")) ||\n            (uscitaSicurezza.toString().equals(\"SI\") &amp;&amp; sfondamento.toString().equals(\"SFONDAMENTO MECCANICO\") &amp;&amp; (anteSfondano.toString().equals(\"NO\") || sfondamentoOstacoli.toString().equals(\"SI\") || sfondamentoFerma.toString().equals(\"NO\"))) ||\n            (uscitaSicurezza.toString().equals(\"SI\") &amp;&amp; sfondamento.toString().equals(\"RIDONDANTE\") &amp;&amp; batterie.toString().equals(\"NO\")) ||\n            anticadutaCarter.toString().equals(\"NO\") ||\n            (anticadutaCarter.toString().equals(\"SI\") &amp;&amp; anticadutaFunzionanti.toString().equals(\"NO\")) ||\n            ((radar.toString().equals(\"MOVIMENTO E PRESENZA\") || radar.toString().equals(\"SOLO MOVIMENTO\")) &amp;&amp; radarFunzionanti.toString().equals(\"NO\")) ||\n            (radar.toString().equals(\"MOVIMENTO E PRESENZA\") &amp;&amp; (sensoriPresenza.toString().equals(\"NO\") || sensoriPresenzaLati.toString().equals(\"NO\"))) || \n            (radar.toString().equals(\"SOLO MOVIMENTO\") &amp;&amp; fotocellule.toString().equals(\"SI\") &amp;&amp; fotocelluleFunzionanti.toString().equals(\"NO\")) ||\n            schiacciamento.toString().equals(\"NO\") ||\n            cesoiamento.toString().equals(\"NO\") ||\n            altriRischi.toString().equals(\"SI\") ||\n            //solo per cliente ALLEANZA 3.0\n            (forzaImpatto.toString().equals(\"NO\") &amp;&amp; issue.getCustomFieldValue(customer).toString().contains(\"ALLEANZA\"))\n        ){\n            risk = true\n        }\n\n        \n        if (risk){\n            status = \"RISK_DETECTED\"\n        }else{\n            status = \"RISK_ANALYSIS_OK\"\n        }\n        log.debug \"status: \" + status\n        def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n        def mi = (MutableIssue) issue\n\n        fieldConfig = pmstatus.getRelevantConfig(issue)\n        //log.warn \"fieldConfig: \" + fieldConfig\n        cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == status }\n\n        pmstatus.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(pmstatus), cfNewValue), new DefaultIssueChangeHolder())\n        issueIndexingService.reIndex(issue)\n\t\t/*\n        if(\n            radarFunzionanti.toString().equals(\"NO\") ||\n            (radar.toString().equals(\"SOLO MOVIMENTO\") &amp;&amp; fotocellule.toString().equals(\"NO\")) ||\n            (forzaImpatto.toString().equals(\"NO\") &amp;&amp; issue.getCustomFieldValue(customer).toString().contains(\"ALLEANZA\")) ||\n            (sfondamento.toString().equals(\"RIDONDANTE\") &amp;&amp; batterie.toString().equals(\"NO\"))\n        ){\n            tobeStopped = true\n        }*/\n    }\n    \n    def cancelloUomoPresente, cancelloAnticaduta, cancelloAnticadutaFunzionante, cancelloExtracorsa, cancelloExtracorsaFunzionante, cancelloAltriRischi, cancelloRischi, cancelloCosteFunzionanti, cancelloCoste, cancelloImpatto\n    //CANCELLI AUTOMATICI\n    if(prodType.equals(\"CANCELLI AUTOMATICI\")){\n        //1. CANCELLO_MACCHINA_UOMO_PRESENTE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_MACCHINA_UOMO_PRESENTE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_MACCHINA_UOMO_PRESENTE\").createMutable()\n            cancelloUomoPresente = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloUomoPresente: \" + cancelloUomoPresente\n\n        //2. CANCELLO_DISPOSITIVI_ANTICADUTA\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_DISPOSITIVI_ANTICADUTA\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_DISPOSITIVI_ANTICADUTA\").createMutable()\n            cancelloAnticaduta = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloAnticaduta: \" + cancelloAnticaduta\n\n        //3. CANCELLO_ANTICADUTA_FUNZIONANTE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ANTICADUTA_FUNZIONANTE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ANTICADUTA_FUNZIONANTE\").createMutable()\n            cancelloAnticadutaFunzionante = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloAnticadutaFunzionante: \" + cancelloAnticadutaFunzionante\n\n        //4. CANCELLO_ARRESTO_EXTRACORSA\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ARRESTO_EXTRACORSA\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ARRESTO_EXTRACORSA\").createMutable()\n            cancelloExtracorsa = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloExtracorsa: \" + cancelloExtracorsa\n\n        //5. CANCELLO_ARRESTO_EXTRACORSA_FUNZIONANTI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ARRESTO_EXTRACORSA_FUNZIONANTI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ARRESTO_EXTRACORSA_FUNZIONANTI\").createMutable()\n            cancelloExtracorsaFunzionante = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloExtracorsaFunzionante: \" + cancelloExtracorsaFunzionante\n\n        //6. CANCELLO_ALTRI_RISCHI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ALTRI_RISCHI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ALTRI_RISCHI\").createMutable()\n            cancelloAltriRischi = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloAltriRischi: \" + cancelloAltriRischi\n\n        //7. CANCELLO_RISCHI_RILEVATI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_RISCHI_RILEVATI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_RISCHI_RILEVATI\").createMutable()\n            cancelloRischi = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloRischi: \" + cancelloRischi\n\n        //8. CANCELLO_COSTE_SICUREZZA\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_COSTE_SICUREZZA\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_COSTE_SICUREZZA\").createMutable()\n            cancelloCoste = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloCoste: \" + cancelloCoste\n\n        //9. CANCELLO_COSTE_FUNZIONANTI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_COSTE_FUNZIONANTI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_COSTE_FUNZIONANTI\").createMutable()\n            cancelloCosteFunzionanti = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloCosteFunzionanti: \" + cancelloCosteFunzionanti\n\n        //10. CANCELLO_VALORE_IMPATTO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_FORZA_IMPATTO_NEI_LIMITI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_FORZA_IMPATTO_NEI_LIMITI\").createMutable()\n            cancelloImpatto = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloImpatto: \" + cancelloImpatto\n\n        if(cancelloUomoPresente.toString().equals(\"SI\") &amp;&amp; \n           (\n               cancelloAnticaduta.toString().equals(\"NO\") || \n               (cancelloAnticaduta.toString().equals(\"SI\") &amp;&amp; cancelloAnticadutaFunzionante.toString().equals(\"NO\")) || \n               cancelloExtracorsa.toString().equals(\"NO\") || \n               (cancelloExtracorsa.toString().equals(\"SI\") &amp;&amp; cancelloExtracorsaFunzionante.toString().equals(\"NO\")) ||\n               cancelloAltriRischi.toString().equals(\"SI\")\n           ))\n        {\n            risk = true\n        }\n\n        if(cancelloUomoPresente.toString().equals(\"NO\") &amp;&amp; \n           (\n               cancelloRischi != null || \n               cancelloCoste.toString().equals(\"NO\") ||\n               (cancelloCoste.toString().equals(\"SI\") &amp;&amp; cancelloCosteFunzionanti.toString().equals(\"NO\")) || \n               cancelloAnticaduta.toString().equals(\"NO\") || \n               (cancelloAnticaduta.toString().equals(\"SI\") &amp;&amp; cancelloAnticadutaFunzionante.toString().equals(\"NO\")) || \n               cancelloExtracorsa.toString().equals(\"NO\") || \n               (cancelloExtracorsa.toString().equals(\"SI\") &amp;&amp; cancelloExtracorsaFunzionante.toString().equals(\"NO\")) ||\n               cancelloAltriRischi.toString().equals(\"SI\") ||\n               cancelloImpatto.toString().equals(\"NO\")\n           ))\n        {\n            risk = true\n        }\n\n\n        if (risk){\n            status = \"RISK_DETECTED\"\n        }else{\n            status = \"RISK_ANALYSIS_OK\"\n        }\n        log.debug \"status: \" + status\n        def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n        def mi = (MutableIssue) issue\n\n        fieldConfig = pmstatus.getRelevantConfig(issue)\n        //log.warn \"fieldConfig: \" + fieldConfig\n        cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == status }\n\n        pmstatus.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(pmstatus), cfNewValue), new DefaultIssueChangeHolder())\n        issueIndexingService.reIndex(issue)\n\n    }\n    def barrieraUomoPresente, barrieraRischi, barrieraAltriRischi, barrieraFotocellule, barrieraFotocelluleFunzionanti, barrieraPassaggioPedonale, barrieraPassaggioPedonaleSegnalato, barrieraInversione, barrieraImpatto\n    //BARRIERE\n    if(prodType.equals(\"BARRIERE\")){\n        //1. BARRIERA_MACCHINA_UOMO_PRESENTE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_MACCHINA_UOMO_PRESENTE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_MACCHINA_UOMO_PRESENTE\").createMutable()\n            barrieraUomoPresente = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraUomoPresente: \" + barrieraUomoPresente\n\n        //2. BARRIERA_ALTRI_RISCHI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_ALTRI_RISCHI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_ALTRI_RISCHI\").createMutable()\n            barrieraAltriRischi = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraAltriRischi: \" + barrieraAltriRischi\n        \n        //3. BARRIERA_RISCHI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_RISCHI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_RISCHI\").createMutable()\n            barrieraRischi = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraRischi: \" + barrieraRischi\n        \n        //4. BARRIERA_FOTOCELLULE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_FOTOCELLULE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_FOTOCELLULE\").createMutable()\n            barrieraFotocellule = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraFotocellule: \" + barrieraFotocellule\n\n        //5. CANCELLO_ANTICADUTA_FUNZIONANTE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_FOTOCELLULE_FUNZIONANTI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_FOTOCELLULE_FUNZIONANTI\").createMutable()\n            barrieraFotocelluleFunzionanti = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraFotocelluleFunzionanti: \" + barrieraFotocelluleFunzionanti\n\n        //6. BARRIERA_PASSAGGIO_PEDONALE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_PASSAGGIO_PEDONALE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_PASSAGGIO_PEDONALE\").createMutable()\n            barrieraPassaggioPedonale = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraPassaggioPedonale: \" + barrieraPassaggioPedonale\n        \n        //7. BARRIERA_PASSAGGIO_PEDONALE_SEGREGATO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_PASSAGGIO_PEDONALE_SEGREGATO\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_PASSAGGIO_PEDONALE_SEGREGATO\").createMutable()\n            barrieraPassaggioPedonaleSegnalato = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraPassaggioPedonaleSegnalato: \" + barrieraPassaggioPedonaleSegnalato\n        \n        //8. BARRIERA_INVERSIONE_SU_OSTACOLO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_INVERSIONE_SU_OSTACOLO\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_INVERSIONE_SU_OSTACOLO\").createMutable()\n            barrieraInversione = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraInversione: \" + barrieraInversione\n        \n        //9. BARRIERA_VALORE_IMPATTO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_VALORE_IMPATTO\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_VALORE_IMPATTO\").createMutable()\n            barrieraImpatto = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraImpatto: \" + barrieraImpatto\n\n        if(barrieraUomoPresente.toString().equals(\"SI\") &amp;&amp; barrieraAltriRischi.toString().equals(\"SI\"))\n        {\n            risk = true\n        }\n\n        if(barrieraUomoPresente.toString().equals(\"NO\") &amp;&amp; \n           (\n               barrieraRischi != null || \n               barrieraFotocellule.toString().equals(\"NO\") ||\n               (barrieraFotocellule.toString().equals(\"SI\") &amp;&amp; barrieraFotocelluleFunzionanti.toString().equals(\"NO\")) || \n               barrieraPassaggioPedonale.toString().equals(\"NO\") || \n               (barrieraPassaggioPedonale.toString().equals(\"SI\") &amp;&amp; barrieraPassaggioPedonaleSegnalato.toString().equals(\"NO\")) || \n               barrieraInversione.toString().equals(\"NO\") || \n               barrieraAltriRischi.toString().equals(\"SI\") ||\n               barrieraImpatto.toString().equals(\"NO\")\n           ))\n        {\n            risk = true\n        }\n\n\n        if (risk){\n            status = \"RISK_DETECTED\"\n        }else{\n            status = \"RISK_ANALYSIS_OK\"\n        }\n        log.debug \"status: \" + status\n        def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n        def mi = (MutableIssue) issue\n\n        fieldConfig = pmstatus.getRelevantConfig(issue)\n        //log.warn \"fieldConfig: \" + fieldConfig\n        cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == status }\n\n        pmstatus.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(pmstatus), cfNewValue), new DefaultIssueChangeHolder())\n        issueIndexingService.reIndex(issue)\n    }\n    \n    if(tobeStopped){\n        fieldConfig = pmStopAsset.getRelevantConfig(issue)\n        //log.warn \"fieldConfig: \" + fieldConfig\n        cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"YES\" }\n\n        pmStopAsset.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(pmStopAsset), cfNewValue), new DefaultIssueChangeHolder())\n        issueIndexingService.reIndex(issue)\n    }else{\n        fieldConfig = pmStopAsset.getRelevantConfig(issue)\n        //log.warn \"fieldConfig: \" + fieldConfig\n        cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"NO\" }\n\n        pmStopAsset.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(pmStopAsset), cfNewValue), new DefaultIssueChangeHolder())\n        issueIndexingService.reIndex(issue)\n    }\n\n}","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">1124ddc0-cc6a-4547-83f0-1f4955ae1cac</arg>
                  <arg name="FIELD_NOTES">Check and fill in OP_PM_ASSET_RESULT</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport com.atlassian.jira.issue.IssueManager\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.atlassian.jira.issue.MutableIssue\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-4159\")\n\ndef risk = false\ndef check = false\ndef completed = true\ndef not_completed = 0\n\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\ndef operations =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_PM_OPERATIONS\")[0]\ndef pmstatus = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_PM_ASSET_RESULT\")[0]\n\nif(issue.getCustomFieldValue(operations)!=null &amp;&amp; (String)issue.getCustomFieldValue(operations) != \"\" &amp;&amp; !issue.getCustomFieldValue(operations).toString().equals(\"\")){\n    /*Ciclare tutti gli oggetti associati al campo*/\n    //insight classes &amp; components\n    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n    def pmOperations = issue.getCustomFieldValue(operations)\n    log.debug \"pmOperations: \" + pmOperations\n    log.debug \"pmOperations.size(): \" + pmOperations.size()\n    for(op in pmOperations){\n        //extract insight key ang get object\n        def operation=op.toString()\n        def operationKey = operation.substring(operation.lastIndexOf('(')+1,operation.lastIndexOf(')'))\n        def operationObj = objectFacade.loadObjectBean(operationKey)\n        log.debug \"op: \" + op\n        log.debug \"operationObj: \" + operationObj\n        log.debug \"operationObj.getId(): \" + operationObj.getId()\n        def obTriage\n        def riskFound\n        def compliant\n        if(objectFacade.loadObjectAttributeBean(operationObj.getId(), \"DANGEROUS\")){\n            obTriage = objectFacade.loadObjectAttributeBean(operationObj.getId(), \"DANGEROUS\").createMutable()\n            riskFound = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n\n        log.debug \"riskFound: \" + riskFound\n        if(riskFound==\"true\"){\n            risk = true\n            break\n        }\n        /*if(objectFacade.loadObjectAttributeBean(operationObj.getId(), \"COMPLIANT\")){\n                obTriage = objectFacade.loadObjectAttributeBean(operationObj.getId(), \"COMPLIANT\").createMutable()\n                compliant = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n            }\n\n            log.debug \"compliant: \" + compliant\n            if(compliant==\"false\"){\n                check = true\n            }*/\n\n        if(objectFacade.loadObjectAttributeBean(operationObj.getId(), \"COMPLETED\")){\n            obTriage = objectFacade.loadObjectAttributeBean(operationObj.getId(), \"COMPLETED\").createMutable()\n            completed = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n\n        log.debug \"compliant: \" + compliant\n        if(completed==\"false\"){\n            not_completed ++ \n                }\n\n    }\n    if (pmOperations.size() == not_completed){\n        completed = false\n    }\n}\n\ndef status\nif (risk){\n    status = \"RISK_DETECTED\"\n}else{\n    if(!completed){\n        status = \"MAINTENANCE_KO\"\n    }else{\n        status = \"MAINTENANCE_OK\"\n    }\n}\n\ndef currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\ndef mi = (MutableIssue) issue\n\ndef fieldConfig = pmstatus.getRelevantConfig(issue)\n//log.warn \"fieldConfig: \" + fieldConfig\ndef cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == status }\n\npmstatus.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(pmstatus), cfNewValue), new DefaultIssueChangeHolder())\nissueIndexingService.reIndex(issue)    ","scriptPath":null}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="targetIssueTypeDefinedByCfSelection" />
                  <arg name="issueTypeId">13001</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">H</arg>
                  <arg name="maxAllowed-integerValue" />
                  <arg name="transitionAttachmentsOperation">rr</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="╡крz╙ыв7Ь╡'еy╦^t+м╢ЙЕЙщ]" />
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10500:INWARD</arg>
                  <arg name="field.enablingCustomFieldId">customfield_22608</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="²æÅºw-ì">[{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22608","destinationFieldId":"customfield_22608"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22600","destinationFieldId":"customfield_22600"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22822","destinationFieldId":"customfield_22822"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22601","destinationFieldId":"customfield_22601"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22602","destinationFieldId":"customfield_22602"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22813","destinationFieldId":"customfield_22813"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23235","destinationFieldId":"customfield_23235"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22651","destinationFieldId":"customfield_22651"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22700","destinationFieldId":"customfield_22700"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22607","destinationFieldId":"customfield_22607"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"priority","destinationFieldId":"priority"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22814","destinationFieldId":"customfield_22814"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23203","destinationFieldId":"customfield_23203"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23237","destinationFieldId":"customfield_23237"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_21909","destinationFieldId":"customfield_21909"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"issuekey","destinationFieldId":"customfield_22629"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23401","destinationFieldId":"customfield_21908"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"Maintenance Ticket","destinationFieldId":"summary"}}]</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">51459067-ef48-4577-91cc-f329eba33cf4</arg>
                  <arg name="FIELD_NOTES">OP: Update status on just created Repair issue</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport com.atlassian.jira.issue.IssueManager\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport groovy.json.JsonSlurper\nimport groovy.json.StreamingJsonBuilder\nimport com.atlassian.jira.config.util.JiraHome\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport java.text.SimpleDateFormat\nimport java.text.ParseException\nimport com.atlassian.jira.config.properties.APKeys\nimport com.atlassian.jira.issue.link.LinkCollectionImpl;\nimport com.atlassian.jira.issue.link.IssueLink;\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport java.sql.Timestamp\n\nProperties properties = new Properties()\nlog.debug \"Percorso properties: \" + ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\n\n/*Script Variables*/\n//Per Post Function\nissue = issue\n//Per test da console\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\n//issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-257\")\nlog.debug \"Issue: \" + issue\ndef found=false\ndef linkedIssue\ndef issueService = ComponentAccessor.getIssueService()\n\ndef offerFromRepair =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_GENERATED_FROM_PM\")[0]\n\ndef currentUserTransition =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENT_USER_GENERATE_REPAIR_QUOTE\")[0]\n\nList&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId());\nlog.debug \"allInIssueLink: \" + allInIssueLink\nfor (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n    def linkedIssueTemp = issueLink.getSourceObject()\n    String type = linkedIssueTemp.getIssueType().getName();\n\n    log.debug(issueLink.issueLinkType.getName()) \n    \n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsTrigger'].toString())){\n        linkedIssue=linkedIssueTemp\n        log.debug \"linked issue: \" + linkedIssue\n        //log.debug \"linked issue status: \" + linkedIssue.getStatusObject().name\n        if(linkedIssue.getStatusObject().name == properties['wf.open'].toString()){\n            found=true\n        }\n    }\n}\n//log.debug \"found: \" + found\n\nif(found){\n\tdef destStatusObject = linkedIssue.getStatusObject()\n    //log.debug \"destStatusObject: \" + destStatusObject\n    //log.debug \"linkedIssue: \" + linkedIssue\n    def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n\t// Is the status of the linked issue \"Installing\" ?\n    \n    def customFieldManager = ComponentAccessor.customFieldManager\n    def pmIssueField = customFieldManager.getCustomFieldObjectsByName(\"OP_PM_LINKED_ISSUE\").first()\n    def maintenanceIssueField = customFieldManager.getCustomFieldObjectsByName(properties['cf.maintenanceLinkedIssue'] ? properties['cf.maintenanceLinkedIssue'].toString() : \"OP_MAINTENANCE_LINKED_ISSUE\").first()\n    \n    //Set OPAA_OFFER_TKT=Yes on just created linkedIssue\n    def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n    def mi = (MutableIssue) linkedIssue\n\n    def fieldConfig = offerFromRepair.getRelevantConfig(linkedIssue)\n    //log.warn \"fieldConfig: \" + fieldConfig\n    def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n    log.debug \"transition field value: \" + issue.getCustomFieldValue(currentUserTransition)\n    //log.debug \"currentUserTransition: \" + currentUserTransition\n    pmIssueField.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(pmIssueField), issue.key.toString()), new DefaultIssueChangeHolder())\n    offerFromRepair.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(offerFromRepair), cfNewValue), new DefaultIssueChangeHolder())\n    \n    ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n    issueIndexingService.reIndex(linkedIssue)    \n    \n    maintenanceIssueField.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(maintenanceIssueField), linkedIssue.key.toString()), new DefaultIssueChangeHolder())\n    \n    //Update OP_EXECUTION_DATE on linkedIssue\n    def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_REPLACED_MATERIALS\")[0]\n    def executionDate = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_EXECUTION_DATE\")[0]\n\n    if(issue.getCustomFieldValue(repMaterials)!=null &amp;&amp; (String)issue.getCustomFieldValue(repMaterials) != \"\" &amp;&amp; !issue.getCustomFieldValue(repMaterials).toString().equals(\"\")){\n        /*Ciclare tutti gli oggetti associati al campo*/\n        //insight classes &amp; components\n        Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n        Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n        def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n        def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\t\tDate replacedOn\n        def materials = issue.getCustomFieldValue(repMaterials)\n        log.debug \"materials: \" + materials\n        for(m in materials){\n            //extract insight key ang get object\n            def mat=m.toString()\n            def matKey = mat.substring(mat.lastIndexOf('(')+1,mat.lastIndexOf(')'))\n            def matObj = objectFacade.loadObjectBean(matKey)\n            log.debug \"m: \" + m\n            log.debug \"matObj: \" + matObj\n            log.debug \"matObj.getId(): \" + matObj.getId()\n            def obTriage\n            \n            if(objectFacade.loadObjectAttributeBean(matObj.getId(), \"INSTALLATION_DATE\")){\n                obTriage = objectFacade.loadObjectAttributeBean(matObj.getId(), \"INSTALLATION_DATE\").createMutable()\n                replacedOn = (Date) obTriage.getObjectAttributeValueBeans()[0].getValue()\n            }\n            log.debug \"replacedOn: \" + replacedOn\n            \n        }    \n\n        //Date csNewDateValue = new Date(replacedOn.getTime());\n        executionDate.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(executionDate), replacedOn.toTimestamp()), new DefaultIssueChangeHolder())\n    }\n    \n    \n    if (destStatusObject.name == properties['wf.open'].toString()) {\n        // Prepare our input for the transition\n        def issueInputParameters = issueService.newIssueInputParameters()\n        issueInputParameters.with {\n            setSkipScreenCheck(true)\n        }\n        // Validate transitioning the linked issue to \"Signs Needed\"\n        def validationResult = issueService.validateTransition(user, linkedIssue.id, 831, issueInputParameters)\n        if (validationResult.isValid()) {\n            // Perform the transition\n            def issueResult = issueService.transition(user, validationResult)\n            if (! issueResult.isValid()) {\n                log.debug(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n            }else{\n                log.debug(\"Transazione fatta\")\n            }\n        } else {\n            log.debug(\"Could not transition task ${linkedIssue.key}, errors: ${validationResult.errorCollection}\")\n        }\n    }\n    \n}","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">00edbe12-4a7a-49dc-b5c0-c3f556043537</arg>
                  <arg name="FIELD_NOTES">Clear cache</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\n\n/* REST API per Generazione Allegato Rapporto di Intervento */\nrequestMethod = \"POST\";\n/*Script Variables*/\n//Per test da console\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-14062\")\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/clearCache/dataObject\"\ndef body_req = []\nURL url = new URL(baseURL)\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.outputStream\nlog.debug \"body_req: \" + body_req\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\nlog.debug connection.outputStream\nconnection.connect();\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n}","scriptPath":null}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="targetIssueTypeDefinedByCfSelection" />
                  <arg name="issueTypeId">13001</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">H</arg>
                  <arg name="maxAllowed-integerValue" />
                  <arg name="transitionAttachmentsOperation">rr</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="╡крz╙ыв7Ь╡'еy╦^t+м╢ЙЕЙщ]" />
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10500:INWARD</arg>
                  <arg name="field.enablingCustomFieldId">customfield_22609</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="²æÅºw-ì">[{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22609","destinationFieldId":"customfield_22658"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22600","destinationFieldId":"customfield_22600"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22822","destinationFieldId":"customfield_22822"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22601","destinationFieldId":"customfield_22601"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22602","destinationFieldId":"customfield_22602"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22813","destinationFieldId":"customfield_22813"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23235","destinationFieldId":"customfield_23235"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22651","destinationFieldId":"customfield_22651"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22700","destinationFieldId":"customfield_22700"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22607","destinationFieldId":"customfield_22607"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"priority","destinationFieldId":"priority"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22814","destinationFieldId":"customfield_22814"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23203","destinationFieldId":"customfield_23203"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23237","destinationFieldId":"customfield_23237"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_21909","destinationFieldId":"customfield_21909"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"issuekey","destinationFieldId":"customfield_22629"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"Yes","destinationFieldId":"customfield_22681"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23401","destinationFieldId":"customfield_21908"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"Maintenance Ticket","destinationFieldId":"summary"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"Yes","destinationFieldId":"customfield_23409"}}]</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">71a4764e-ec7c-4759-97f5-5775b6c349ed</arg>
                  <arg name="FIELD_NOTES">OP: Update status on just created Repair Quotation issue</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport com.atlassian.jira.issue.IssueManager\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport groovy.json.JsonSlurper\nimport groovy.json.StreamingJsonBuilder\nimport com.atlassian.jira.config.util.JiraHome\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport java.text.SimpleDateFormat\nimport java.text.ParseException\nimport com.atlassian.jira.config.properties.APKeys\nimport com.atlassian.jira.issue.link.LinkCollectionImpl;\nimport com.atlassian.jira.issue.link.IssueLink;\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nlog.debug \"Percorso properties: \" + ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\n\n/*Script Variables*/\n//Per Post Function\nissue = issue\n//Per test da console\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\n//issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-257\")\nlog.debug \"Issue: \" + issue\ndef found=false\ndef linkedIssue\ndef issueService = ComponentAccessor.getIssueService()\ndef groupManager = ComponentAccessor.getGroupManager()\ndef userManager = ComponentAccessor.getUserManager()\ndef offerFromRepair =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_GENERATED_FROM_REPAIR\")[0]\n\ndef currentUserTransition =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENT_USER_GENERATE_REPAIR_QUOTE\")[0]\ndef transitionCheck = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CHECK_AND_CONFIRM\")[0]\nString supplierAdm = \"OPROLE_AA_SUPPLIER_ADM\"\nString supplierTech = \"OPROLE_AA_SUPPLIER_TECH\"\n\nList&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId());\nlog.debug \"allInIssueLink: \" + allInIssueLink\nfor (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n    def linkedIssueTemp = issueLink.getSourceObject()\n    String type = linkedIssueTemp.getIssueType().getName();\n\n    log.debug(issueLink.issueLinkType.getName()) \n    \n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsTrigger'].toString())){\n        linkedIssue=linkedIssueTemp\n        log.debug \"linked issue: \" + linkedIssue\n        if (linkedIssue.getCustomFieldValue(ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_GENERATED_FROM_PM\")[0]).toString().equals(\"Yes\")){\n            log.debug \"generated from PM\"\n            if(linkedIssue.getStatusObject().name == properties['wf.open'].toString()){\n                found=true\n            }\n        }\n    }\n}\n//log.debug \"found: \" + found\n\nif(found){\n\tdef destStatusObject = linkedIssue.getStatusObject()\n    //log.debug \"destStatusObject: \" + destStatusObject\n    //log.debug \"linkedIssue: \" + linkedIssue\n    def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n\t// Is the status of the linked issue \"Installing\" ?\n    \n    def customFieldManager = ComponentAccessor.customFieldManager\n    def pmIssueField = customFieldManager.getCustomFieldObjectsByName(\"OP_PM_LINKED_ISSUE\").first()\n    def offerIssueField = customFieldManager.getCustomFieldObjectsByName(\"OP_QUOTE_LINKED_ISSUE\").first()\n    def offerIssueBoolField = customFieldManager.getCustomFieldObjectsByName(properties['cf.offerTkt'].toString()).first()\n    \n    //Set OPAA_OFFER_TKT=Yes on just created linkedIssue\n    def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n    def mi = (MutableIssue) linkedIssue\n\n    def fieldConfig = offerFromRepair.getRelevantConfig(linkedIssue)\n    //log.warn \"fieldConfig: \" + fieldConfig\n    def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n    log.debug \"transition field value: \" + issue.getCustomFieldValue(currentUserTransition)\n    //log.debug \"currentUserTransition: \" + currentUserTransition\n    pmIssueField.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(pmIssueField), issue.key.toString()), new DefaultIssueChangeHolder())\n    offerFromRepair.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(offerIssueBoolField), cfNewValue), new DefaultIssueChangeHolder())\n    \n    fieldConfig = offerIssueBoolField.getRelevantConfig(linkedIssue)\n    //log.warn \"fieldConfig: \" + fieldConfig\n    cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n    offerIssueBoolField.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(offerIssueBoolField), cfNewValue), new DefaultIssueChangeHolder())\n    \n    def userTransition = userManager.getUserByName(issue.getCustomFieldValue(currentUserTransition).toString())\n\tlog.debug \"userTransition: \" + userTransition\n    if (userTransition != null &amp;&amp; (groupManager.getUsersInGroup(supplierAdm).contains(userTransition) || groupManager.getUsersInGroup(supplierTech).contains(userTransition))) {\n        // Transition executed by external user --&gt; to be added also internal techs role groups\n        // Email has not to be sent\n        // SN will be created as soon as the quotation has been confirmed - to be checked when to create SN if no quotation from supplier is needed - when the quotation has been sent to the customer?\n        log.debug \"in utente supplier\"\n        transitionCheck.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(transitionCheck), cfNewValue), new DefaultIssueChangeHolder())\n        offerFromRepair.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(offerFromRepair), cfNewValue), new DefaultIssueChangeHolder())\n\t}\n    \n    ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n    issueIndexingService.reIndex(linkedIssue)    \n    \n    offerIssueField.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(offerIssueField), linkedIssue.key.toString()), new DefaultIssueChangeHolder())\n    \n    if (destStatusObject.name == properties['wf.open'].toString()) {\n        // Prepare our input for the transition\n        def issueInputParameters = issueService.newIssueInputParameters()\n        issueInputParameters.with {\n            setSkipScreenCheck(true)\n        }\n        // Validate transitioning the linked issue to \"Signs Needed\"\n        //wf.tr.askQuote\n        def validationResult = issueService.validateTransition(user, linkedIssue.id, 11, issueInputParameters)\n        if (validationResult.isValid()) {\n            // Perform the transition\n            def issueResult = issueService.transition(user, validationResult)\n            if (! issueResult.isValid()) {\n                log.debug(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n            }else{\n                log.debug(\"Transazione fatta\")\n            }\n        } else {\n            log.debug(\"Could not transition task ${linkedIssue.key}, errors: ${validationResult.errorCollection}\")\n        }\n    }\n    log.debug \"linked Issue: \" + linkedIssue\n}","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">00edbe12-4a7a-49dc-b5c0-c3f556043537</arg>
                  <arg name="FIELD_NOTES">Clear cache</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\n\n/* REST API per Generazione Allegato Rapporto di Intervento */\nrequestMethod = \"POST\";\n/*Script Variables*/\n//Per test da console\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-14062\")\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/clearCache/dataObject\"\ndef body_req = []\nURL url = new URL(baseURL)\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.outputStream\nlog.debug \"body_req: \" + body_req\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\nlog.debug connection.outputStream\nconnection.connect();\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n}","scriptPath":null}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23401</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="81" name="Modifica Analisi dei Rischi">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <results>
            <unconditional-result old-status="žée" status="žée" step="7">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23411</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="field3">customfield_23601</arg>
                  <arg name="field2">customfield_23600</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="field4">customfield_22693</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="5" name="‰Þ">
      <meta name="jira.status.id">10007</meta>
      <actions>
        <action id="71" name="Riapri Manutenzione">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">7d8ccd98-77a0-4688-93c3-e444762d6232</arg>
                <arg name="FIELD_NOTES">Not available if parent ticket has been closed or completed</arg>
                <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"issue.parentObject?.status?.name != \"Completed to be Closed\" &amp;&amp; issue.parentObject?.status?.name != \"Closed\"","scriptPath":null}</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.CustomScriptCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="4">
              <post-functions>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">abdc5f30-4e69-401f-b00b-a66eb9ce6634</arg>
                  <arg name="FIELD_NOTES">Hide issues eventually created for replaced materials and required materials</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.component.ComponentAccessor\nimport com.atlassian.jira.issue.IssueManager\nimport com.atlassian.jira.issue.Issue\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.index.IssueIndexingService;\nimport org.ofbiz.core.entity.DelegatorInterface\nimport com.atlassian.jira.util.BuildUtilsInfo\nimport com.atlassian.jira.issue.issuetype.IssueType\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager()\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-23693\")\n\n//finding the issue you want to delete\ndef repairTktField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_MAINTENANCE_LINKED_ISSUE\")[0]\ndef offerTktField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_QUOTE_LINKED_ISSUE\")[0]\ndef repairTkt = issue.getCustomFieldValue(repairTktField)\ndef offerTkt = issue.getCustomFieldValue(offerTktField)\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\ndef delegatorInterface = ComponentAccessor.getComponent(DelegatorInterface)\ndef buildUtilsInfo = ComponentAccessor.getComponent(BuildUtilsInfo)\ndef constantsManager = ComponentAccessor.getConstantsManager()\n\ndef customer = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CUSTOMER\")[0]\ndef site = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SITE\")[0]\ndef asset = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_ASSET\")[0]\ndef supplier = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SUPPLIER\")\ndef visKey = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_VISIBILITY_KEY\")[0]\ndef deletedFrom = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_DELETED_FROM_ISSUE\")[0]\nlog.debug \"repairTkt to be deleted: \" + repairTkt\nlog.debug \"offerTkt to be deleted: \" + offerTkt\n\ndef currentUser = ComponentAccessor.jiraAuthenticationContext.loggedInUser\nList&lt;IssueLink&gt; allInIssueLink\n\nif(repairTkt){\n    deletedFrom.updateValue(null, issueManager.getIssueObject(repairTkt), new ModifiedValue(issueManager.getIssueObject(repairTkt).getCustomFieldValue(deletedFrom), issue.key), new DefaultIssueChangeHolder())\n    customer.updateValue(null, issueManager.getIssueObject(repairTkt), new ModifiedValue(issueManager.getIssueObject(repairTkt).getCustomFieldValue(customer), null), new DefaultIssueChangeHolder())\n    site.updateValue(null, issueManager.getIssueObject(repairTkt), new ModifiedValue(issueManager.getIssueObject(repairTkt).getCustomFieldValue(site), null), new DefaultIssueChangeHolder())\n    asset.updateValue(null, issueManager.getIssueObject(repairTkt), new ModifiedValue(issueManager.getIssueObject(repairTkt).getCustomFieldValue(asset), null), new DefaultIssueChangeHolder())\n    visKey.updateValue(null, issueManager.getIssueObject(repairTkt), new ModifiedValue(issueManager.getIssueObject(repairTkt).getCustomFieldValue(visKey), null), new DefaultIssueChangeHolder())\n    for(cs in supplier){\n        cs.updateValue(null, issueManager.getIssueObject(repairTkt), new ModifiedValue(issueManager.getIssueObject(repairTkt).getCustomFieldValue(cs), null), new DefaultIssueChangeHolder())\n    }\n    \n    allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; inIterator = allInIssueLink.iterator(); inIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) inIterator.next();\n\n        log.warn \"Issue con relatesInIssueLink\"\n        /*Eseguire transazione di stato della destinationIssue*/\n        def linkedIssue = issueLink.getSourceObject()\n        log.debug \"repairTkt.toString(): \" + repairTkt.toString()\n        if(linkedIssue.toString() == repairTkt.toString()){\n            ComponentAccessor.issueLinkManager.removeIssueLink(issueLink, currentUser)\n        }\n    }\n \tissueIndexingService.reIndex(issueManager.getIssueObject(repairTkt))\n}\n\nif(offerTkt){\n    deletedFrom.updateValue(null, issueManager.getIssueObject(offerTkt), new ModifiedValue(issueManager.getIssueObject(offerTkt).getCustomFieldValue(deletedFrom), issue.key), new DefaultIssueChangeHolder())\n    customer.updateValue(null, issueManager.getIssueObject(offerTkt), new ModifiedValue(issueManager.getIssueObject(offerTkt).getCustomFieldValue(customer), null), new DefaultIssueChangeHolder())\n    site.updateValue(null, issueManager.getIssueObject(offerTkt), new ModifiedValue(issueManager.getIssueObject(offerTkt).getCustomFieldValue(site), null), new DefaultIssueChangeHolder())\n    asset.updateValue(null, issueManager.getIssueObject(offerTkt), new ModifiedValue(issueManager.getIssueObject(offerTkt).getCustomFieldValue(asset), null), new DefaultIssueChangeHolder())\n    visKey.updateValue(null, issueManager.getIssueObject(offerTkt), new ModifiedValue(issueManager.getIssueObject(offerTkt).getCustomFieldValue(visKey), null), new DefaultIssueChangeHolder())\n    for(cs in supplier){\n        cs.updateValue(null, issueManager.getIssueObject(offerTkt), new ModifiedValue(issueManager.getIssueObject(offerTkt).getCustomFieldValue(cs), null), new DefaultIssueChangeHolder())\n    }\n    \n    allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; inIterator = allInIssueLink.iterator(); inIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) inIterator.next();\n\n        log.warn \"Issue con relatesInIssueLink\"\n        /*Eseguire transazione di stato della destinationIssue*/\n        def linkedIssue = issueLink.getSourceObject()\n        log.debug \"repairTkt.toString(): \" + offerTkt.toString()\n        if(linkedIssue.toString() == offerTkt.toString()){\n            ComponentAccessor.issueLinkManager.removeIssueLink(issueLink, currentUser)\n        }\n    }\n \tissueIndexingService.reIndex(issueManager.getIssueObject(offerTkt))\n}","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">0a6b8edc-fe5d-475d-ad18-c45d3ab183eb</arg>
                  <arg name="FIELD_NOTES">Clear cache</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\n\n/* REST API per Generazione Allegato Rapporto di Intervento */\nrequestMethod = \"POST\";\n/*Script Variables*/\n//Per test da console\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-14062\")\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/clearCache/dataObject\"\ndef body_req = []\nURL url = new URL(baseURL)\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.outputStream\nlog.debug \"body_req: \" + body_req\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\nlog.debug connection.outputStream\nconnection.connect();\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n}","scriptPath":null}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23410</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="field3">customfield_23405</arg>
                  <arg name="field2">customfield_23411</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="field5">resolution</arg>
                  <arg name="field4">customfield_22763</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="151" name="Update SN/SO">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">966eceb6-5b0d-4823-9779-1c13ed57eee9</arg>
                <arg name="FIELD_INVERT_CONDITION" />
                <arg name="FIELD_NOTES">Enabled for arianna.fabbri</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_USER_IDS">arianna.fabbri</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">830e4fa6-bc1b-4339-b964-3db55e8b236b</arg>
              <arg name="FIELD_NOTES">Update SN&amp;SO</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\ndef serviceOrder = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_ORDER\")[0]\n\nURL url\nHttpURLConnection connection\n\nrequestMethod = \"POST\";\n\ndef body_req = []\nbody_req = [\n    \"issueKey\": issue.key,\n    \"status\": \"CLO\"\n] \n\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\nlog.debug \"baseURL SN: \" + baseURL\nlog.debug \"body_req SN: \" + body_req\nurl = new URL(baseURL)\nconnection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.outputStream\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\nlog.debug connection.outputStream\nconnection.connect();\n\ndef output = new ArrayList()\ndef eList = new ArrayList()\ndef eListErrors = new ArrayList()\ndef errorMsgs = new ArrayList()\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n    eListErrors.add(\"E\")\n    eListErrors.add(\"SN_UPDATE\")\n    errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n    eListErrors.add(errorMsgs)\n    eList.add(eListErrors)\n\n    output.add(eList)\n    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n}else{\n    if(issue.getCustomFieldValue(serviceOrder)==null){\n        /** SERVICE ORDER CREATION **/\n        body_req = [\n            \"issueKey\": issue.key\n        ] \n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\n\n        log.debug \"baseURL SO: \" + baseURL\n        log.debug \"body_req SO: \" + body_req\n        url = new URL(baseURL)\n        connection = (HttpURLConnection)url.openConnection();\n        connection.setRequestMethod(requestMethod);\n        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n        connection.setRequestProperty(\"Accept\", \"*/*\");\n        connection.setDoOutput(true);\n        connection.setDoInput(true);\n        connection.outputStream\n        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n        log.debug connection.outputStream\n        connection.connect();\n\n        output = new ArrayList()\n        eList = new ArrayList()\n        eListErrors = new ArrayList()\n        errorMsgs = new ArrayList()\n\n        if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n            log.debug \"url: \" + url\n            log.debug \"ResponseCode:\" + connection.getResponseCode()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n            def outputMsg = ((HttpURLConnection)connection).errorStream.text\n            log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n            def jsonSlurper = new JsonSlurper()\n            def json_object = jsonSlurper.parseText(outputMsg)\n            assert json_object instanceof Map  \n            log.debug \"message: \" +  json_object.message\n            log.debug \"errors: \" +  json_object.errors.toString()\n\n            eListErrors.add(\"E\")\n            eListErrors.add(\"SO_CREATE\")\n            errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n            eListErrors.add(errorMsgs)\n            eList.add(eListErrors)\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        }\n        \n    }\n}","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="5">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="6" name=":—§">
      <meta name="jira.status.id">1</meta>
      <actions>
        <action id="31" name="Confirm and Plan">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">f831b08d-05d9-4e70-bd3c-40fbd9da208c</arg>
              <arg name="FIELD_NOTES">SAP: update SN status</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\n\nrequestMethod = \"POST\";\n\ndef body_req = []\nbody_req = [\n    \"issueKey\": issue.key,\n    \"status\": \"PLA\"\n] \n\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\nlog.debug \"baseURL SN: \" + baseURL\nlog.debug \"body_req SN: \" + body_req\nurl = new URL(baseURL)\nconnection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.outputStream\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\nlog.debug connection.outputStream\nconnection.connect();\n\ndef output = new ArrayList()\ndef eList = new ArrayList()\ndef eListErrors = new ArrayList()\ndef errorMsgs = new ArrayList()\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n    eListErrors.add(\"E\")\n    eListErrors.add(\"SN_UPDATE\")\n    errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n    eListErrors.add(errorMsgs)\n    eList.add(eListErrors)\n\n    output.add(eList)\n    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n}else{\n    /** SERVICE ORDER CREATION **/\n    body_req = [\n        \"issueKey\": issue.key\n    ] \n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\n\n    log.debug \"baseURL SO: \" + baseURL\n    log.debug \"body_req SO: \" + body_req\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    output = new ArrayList()\n    eList = new ArrayList()\n    eListErrors = new ArrayList()\n    errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        \n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n        \n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n        log.debug \"errors: \" +  json_object.errors.toString()\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"SO_CREATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="Not Done" status="‰Þ" step="3">
              <post-functions>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">e05070cf-b7e1-4333-a13e-22d55ac3d7d1</arg>
                  <arg name="FIELD_NOTES">Clear cache</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\n\n/* REST API per Generazione Allegato Rapporto di Intervento */\nrequestMethod = \"POST\";\n/*Script Variables*/\n//Per test da console\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-14062\")\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/clearCache/dataObject\"\ndef body_req = []\nURL url = new URL(baseURL)\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.outputStream\nlog.debug \"body_req: \" + body_req\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\nlog.debug connection.outputStream\nconnection.connect();\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n}","scriptPath":null}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="101" name="Genera Operazioni di Manutenzione">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">56d285d0-3b7f-4146-a3ed-b1319013939d</arg>
                <arg name="FIELD_NOTES">PM Task senza PM operations</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"cfValues['OP_PM_OPERATIONS'] == null","scriptPath":null}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">36237cda-1b88-49eb-8e62-354285079ef6</arg>
              <arg name="FIELD_NOTES">PM Task: genera operazioni di manutenzione</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\n\n/* REST API per pulizia cache issue linkata */\nrequestMethod = \"PUT\";\n/*Script Variables*/\n//Per test da console\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-32535\")\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/pm-subtask/\" + issue.key + \"/operations\"\nURL url = new URL(baseURL)\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.connect();\nlog.debug \"url: \" + url\nlog.debug \"ResponseCode:\" + connection.getResponseCode()\nlog.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n}","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="7" name="Asset Check">
      <meta name="jira.status.id">14730</meta>
      <actions>
        <action id="61" name="Check Completed" view="fieldscreen">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20400</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">8ab72aa0-1422-40dd-9c13-8008a9e2b0dd</arg>
              <arg name="FIELD_NOTES">Confirm Risk Analysis</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport com.atlassian.jira.issue.IssueManager\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport java.text.SimpleDateFormat;\nimport com.atlassian.jira.issue.index.IssueIndexingService\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\ndef wList = new ArrayList()\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]\ndef warningEmptyFields = new ArrayList()\ndef output = new ArrayList()\ndef customer =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CUSTOMER\")[0]\ndef asset =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_ASSET\")[0]\ndef sfondamento, batterie, radar, radarFunzionanti, fotocellule, forzaImpatto\ndef requiredFields = new ArrayList()\n\n//insight classes &amp; components\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\ndef pmAsset = issue.getCustomFieldValue(asset)\nlog.debug \"pmAsset: \" + pmAsset\n\n//extract insight key ang get object\ndef installation=pmAsset.toString()\ndef installationKey = installation.substring(installation.lastIndexOf('(')+1,installation.lastIndexOf(')'))\ndef installationObj = objectFacade.loadObjectBean(installationKey)\nlog.debug \"installationObj: \" + installationObj\nlog.debug \"installationObj.getId(): \" + installationObj.getId()\ndef obTriage, prodType\n\n//TIPO IMPIANTO\nif(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PUBLIC_PRODUCT_FAMILY_REF\")){\n    obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PUBLIC_PRODUCT_FAMILY_REF\").createMutable()\n    def prodTypeId = obTriage.getObjectAttributeValueBeans()[0].getValue()\n    prodType = objectFacade.loadObjectAttributeBean(prodTypeId, \"Name\").createMutable().getObjectAttributeValueBeans()[0].getValue().toString()\n}\nlog.debug \"prodType: \" + prodType\ndef status\ndef tobeStopped = false\ndef cfNewValue, fieldConfig\n\n//PORTE AUTOMATICHE\nif(prodType.equals(\"PORTE AUTOMATICHE\")){\n\n    //I\tPORTE_RADAR_TYPE\n    if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_RADAR_TYPE\")){\n        obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_RADAR_TYPE\").createMutable()\n        radar = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n    }\n    log.debug \"radar: \" + radar\n    //O\tPORTE_FOTOCELLULE\n    if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FOTOCELLULE\")){\n        obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FOTOCELLULE\").createMutable()\n        fotocellule = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n    }\n    log.debug \"fotocellule: \" + fotocellule\n    //T\tPORTE_FORZA_IMPATTO_NEI_LIMITI\n    if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FORZA_IMPATTO_NEI_LIMITI\")){\n        obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FORZA_IMPATTO_NEI_LIMITI\").createMutable()\n        forzaImpatto = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n    }\n    log.debug \"forzaImpatto: \" + forzaImpatto\n    //F\tPORTE_BATTERIE_EMERGENZA\n    if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_BATTERIE_EMERGENZA\")){\n        obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_BATTERIE_EMERGENZA\").createMutable()\n        batterie = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n    }\n    log.debug \"batterie: \" + batterie\n    //B\tPORTE_SFONDAMENTO\n    if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_SFONDAMENTO\")){\n        obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_SFONDAMENTO\").createMutable()\n        sfondamento = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n    }\n    log.debug \"sfondamento: \" + sfondamento\n    //L\tPORTE_RADAR_FUNZIONANTI\n    if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_RADAR_FUNZIONANTI\")){\n        obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_RADAR_FUNZIONANTI\").createMutable()\n        radarFunzionanti = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n    }\n}\n\nif(issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")){\n    //log.debug \"return true\"\n    return true\n}else{\n/*\n    if( prodType.equals(\"PORTE AUTOMATICHE\") &amp;&amp; (\n        radarFunzionanti.toString().equals(\"NO\") ||\n        (radar.toString().equals(\"SOLO MOVIMENTO\") &amp;&amp; fotocellule.toString().equals(\"NO\")) ||\n        (forzaImpatto.toString().equals(\"NO\") &amp;&amp; issue.getCustomFieldValue(customer).toString().contains(\"ALLEANZA\")) ||\n        (sfondamento.toString().equals(\"RIDONDANTE\") &amp;&amp; batterie.toString().equals(\"NO\")))\n    ){\n        requiredFields.add(\"OP_ASSET_STOPPED\")\n        def fList = new ArrayList()\n\n        def fListDetail = new ArrayList()\n        fListDetail.add(\"F\")\n        fListDetail.add(\"USER_INPUT_STOP_ASSET\")\n        fListDetail.add(null)\n        fListDetail.add(requiredFields)\n        fList.add(fListDetail)\n\n        output.add(fList)\n        throw new InvalidInputException('{\"F\":\"' + output.toString() + '\"}')\n        //throw new InvalidInputException(\"F\", output.toString())   \n\n            \n    }else{*/\n        def wListConfirmEmpty = new ArrayList()\n        wListConfirmEmpty.add(\"W\")\n        wListConfirmEmpty.add(\"CONFIRM_RISK_ANALYSIS\")\n        wListConfirmEmpty.add(null)\n\n        wList.add(wListConfirmEmpty)\n\n        output.add(wList)\n        log.debug \"throw exception: \" + output.toString()\n        throw new InvalidInputException('{\"W\":\"' + output.toString() + '\"}')\n    //}\n    \n    \n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="4">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">d0ff0e0c-0d1c-4309-b2d2-89ce8055a4a1</arg>
                  <arg name="FIELD_NOTES">Check and fill in OP_PM_ASSET_RISKS_RESULT - OP_ASSET_TO_BE_STOPPED</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport com.atlassian.jira.issue.IssueManager\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.atlassian.jira.issue.MutableIssue\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n    properties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-23678\")\n\ndef risk = false\ndef check = false\ndef completed = true\ndef not_completed = 0\n\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\ndef asset =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_ASSET\")[0]\ndef customer =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CUSTOMER\")[0]\ndef pmstatus = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_PM_ASSET_RISKS_RESULT\")[0]\ndef pmStopAsset = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_ASSET_TO_BE_STOPPED\")[0]\n\nif(issue.getCustomFieldValue(asset)!=null &amp;&amp; (String)issue.getCustomFieldValue(asset) != \"\" &amp;&amp; !issue.getCustomFieldValue(asset).toString().equals(\"\")){\n    //insight classes &amp; components\n    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n    def pmAsset = issue.getCustomFieldValue(asset)\n    log.debug \"pmAsset: \" + pmAsset\n\n    //extract insight key ang get object\n    def installation=pmAsset.toString()\n    def installationKey = installation.substring(installation.lastIndexOf('(')+1,installation.lastIndexOf(')'))\n    def installationObj = objectFacade.loadObjectBean(installationKey)\n    log.debug \"installationObj: \" + installationObj\n    log.debug \"installationObj.getId(): \" + installationObj.getId()\n    def obTriage\n    def prodType, uscitaSicurezza, sfondamento, anteSfondano, sfondamentoOstacoli, sfondamentoFerma, batterie, anticadutaCarter, anticadutaFunzionanti, radar, radarFunzionanti, sensoriPresenza, sensoriPresenzaLati, fotocellule, fotocelluleFunzionanti, schiacciamento, cesoiamento, altriRischi, forzaImpatto\n\n    //TIPO IMPIANTO\n    if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PUBLIC_PRODUCT_FAMILY_REF\")){\n        obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PUBLIC_PRODUCT_FAMILY_REF\").createMutable()\n        def prodTypeId = obTriage.getObjectAttributeValueBeans()[0].getValue()\n        prodType = objectFacade.loadObjectAttributeBean(prodTypeId, \"Name\").createMutable().getObjectAttributeValueBeans()[0].getValue().toString()\n    }\n    log.debug \"prodType: \" + prodType\n    def status\n    def tobeStopped = false\n    def cfNewValue, fieldConfig\n    \n    def tfRischi, tfImpiantoANorma\n    if(!prodType.equals(\"PORTE AUTOMATICHE\") &amp;&amp; !prodType.equals(\"CANCELLI AUTOMATICI\") &amp;&amp; !prodType.equals(\"BARRIERE\")){\n        //ALTRI RISCHI\n        //TF_RISCHI_RILEVATI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"TF_RISCHI_RILEVATI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"TF_RISCHI_RILEVATI\").createMutable()\n            tfRischi = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"tfRischi: \" + tfRischi\n        \n        //IMPIANTO NON A NORMA\n        //TF_IMPIANTO_A_NORMA\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"TF_IMPIANTO_A_NORMA\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"TF_IMPIANTO_A_NORMA\").createMutable()\n            tfImpiantoANorma = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"tfImpiantoANorma: \" + tfImpiantoANorma\n        \n        if(tfRischi!=null || tfImpiantoANorma.toString().equals(\"NO\"))\n        {\n            risk = true\n        }\n\n        if (risk){\n            status = \"RISK_DETECTED\"\n        }else{\n            status = \"RISK_ANALYSIS_OK\"\n        }\n        log.debug \"status: \" + status\n        def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n        def mi = (MutableIssue) issue\n\n        fieldConfig = pmstatus.getRelevantConfig(issue)\n        //log.warn \"fieldConfig: \" + fieldConfig\n        cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == status }\n\n        pmstatus.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(pmstatus), cfNewValue), new DefaultIssueChangeHolder())\n        issueIndexingService.reIndex(issue)\n        \n    }\n    \n    //PORTE AUTOMATICHE\n    if(prodType.equals(\"PORTE AUTOMATICHE\")){\n        //A\tPORTE_USCITA_SICUREZZA\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_USCITA_SICUREZZA\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_USCITA_SICUREZZA\").createMutable()\n            uscitaSicurezza = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"uscitaSicurezza: \" + uscitaSicurezza\n\n        //B\tPORTE_SFONDAMENTO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_SFONDAMENTO\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_SFONDAMENTO\").createMutable()\n            sfondamento = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"sfondamento: \" + sfondamento\n\n        //C\tPORTE_SFONDAMENTO_ANTE_POSIZIONE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_SFONDAMENTO_ANTE_POSIZIONE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_SFONDAMENTO_ANTE_POSIZIONE\").createMutable()\n            anteSfondano = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"anteSfondano: \" + anteSfondano\n\n        //D\tPORTE_OSTACOLI_SFONDAMENTO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_OSTACOLI_SFONDAMENTO\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_OSTACOLI_SFONDAMENTO\").createMutable()\n            sfondamentoOstacoli = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"sfondamentoOstacoli: \" + sfondamentoOstacoli\n\n        //E\tPORTE_DISPOSITIVO_STOP\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_DISPOSITIVO_STOP\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_DISPOSITIVO_STOP\").createMutable()\n            sfondamentoFerma = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"sfondamentoFerma: \" + sfondamentoFerma\n\n        //F\tPORTE_BATTERIE_EMERGENZA\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_BATTERIE_EMERGENZA\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_BATTERIE_EMERGENZA\").createMutable()\n            batterie = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"batterie: \" + batterie\n\n        //G\tPORTE_DISPOSITIVO_ANTICADUTA_CARTER\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_DISPOSITIVO_ANTICADUTA_CARTER\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_DISPOSITIVO_ANTICADUTA_CARTER\").createMutable()\n            anticadutaCarter = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"anticadutaCarter: \" + anticadutaCarter\n\n        //H\tPORTE_ANTICADUTA_CARTER_FUNZIONANTE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_ANTICADUTA_CARTER_FUNZIONANTE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_ANTICADUTA_CARTER_FUNZIONANTE\").createMutable()\n            anticadutaFunzionanti = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"anticadutaFunzionanti: \" + anticadutaFunzionanti\n\n        //I\tPORTE_RADAR_TYPE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_RADAR_TYPE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_RADAR_TYPE\").createMutable()\n            radar = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"radar: \" + radar\n\n        //L\tPORTE_RADAR_FUNZIONANTI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_RADAR_FUNZIONANTI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_RADAR_FUNZIONANTI\").createMutable()\n            radarFunzionanti = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"radarFunzionanti: \" + radarFunzionanti\n\n        //M\tPORTE_PRESENZA_50MM_ANTE_MOBILI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PRESENZA_50MM_ANTE_MOBILI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PRESENZA_50MM_ANTE_MOBILI\").createMutable()\n            sensoriPresenza = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"sensoriPresenza: \" + sensoriPresenza\n\n        //N\tPORTE_PRESENZA_50MM_ANTE_MOBILI_LATI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PRESENZA_50MM_ANTE_MOBILI_LATI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PRESENZA_50MM_ANTE_MOBILI_LATI\").createMutable()\n            sensoriPresenzaLati = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"sensoriPresenzaLati: \" + sensoriPresenzaLati\n\n        //O\tPORTE_FOTOCELLULE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FOTOCELLULE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FOTOCELLULE\").createMutable()\n            fotocellule = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"fotocellule: \" + fotocellule\n\n        //P\tPORTE_FOTOCELLULE_FUNZIONANTI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FOTOCELLULE_FUNZIONANTI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FOTOCELLULE_FUNZIONANTI\").createMutable()\n            fotocelluleFunzionanti = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"fotocelluleFunzionanti: \" + fotocelluleFunzionanti\n\n        //Q\tPORTE_PROTEZIONE_SCHIACCIAMENTO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PROTEZIONE_SCHIACCIAMENTO\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PROTEZIONE_SCHIACCIAMENTO\").createMutable()\n            schiacciamento = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"schiacciamento: \" + schiacciamento\n\n        //R\tPORTE_PROTEZIONE_CESOIAMENTO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PROTEZIONE_CESOIAMENTO\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_PROTEZIONE_CESOIAMENTO\").createMutable()\n            cesoiamento = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cesoiamento: \" + cesoiamento\n\n        //S\tPORTE_ALTRI_RISCHI_DA_SEGNALARE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_ALTRI_RISCHI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_ALTRI_RISCHI\").createMutable()\n            altriRischi = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"altriRischi: \" + altriRischi\n\n        //T\tPORTE_FORZA_IMPATTO_NEI_LIMITI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FORZA_IMPATTO_NEI_LIMITI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"PORTE_FORZA_IMPATTO_NEI_LIMITI\").createMutable()\n            forzaImpatto = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"forzaImpatto: \" + forzaImpatto   \n        \n\n        log.debug \"customer: \" + issue.getCustomFieldValue(customer).toString()\n        if(\n            (uscitaSicurezza.toString().equals(\"SI\") &amp;&amp; sfondamento.toString().equals(\"NESSUNO\")) ||\n            (uscitaSicurezza.toString().equals(\"SI\") &amp;&amp; sfondamento.toString().equals(\"SFONDAMENTO MECCANICO\") &amp;&amp; (anteSfondano.toString().equals(\"NO\") || sfondamentoOstacoli.toString().equals(\"SI\") || sfondamentoFerma.toString().equals(\"NO\"))) ||\n            (uscitaSicurezza.toString().equals(\"SI\") &amp;&amp; sfondamento.toString().equals(\"RIDONDANTE\") &amp;&amp; batterie.toString().equals(\"NO\")) ||\n            anticadutaCarter.toString().equals(\"NO\") ||\n            (anticadutaCarter.toString().equals(\"SI\") &amp;&amp; anticadutaFunzionanti.toString().equals(\"NO\")) ||\n            ((radar.toString().equals(\"MOVIMENTO E PRESENZA\") || radar.toString().equals(\"SOLO MOVIMENTO\")) &amp;&amp; radarFunzionanti.toString().equals(\"NO\")) ||\n            (radar.toString().equals(\"MOVIMENTO E PRESENZA\") &amp;&amp; (sensoriPresenza.toString().equals(\"NO\") || sensoriPresenzaLati.toString().equals(\"NO\"))) || \n            (radar.toString().equals(\"SOLO MOVIMENTO\") &amp;&amp; fotocellule.toString().equals(\"SI\") &amp;&amp; fotocelluleFunzionanti.toString().equals(\"NO\")) ||\n            schiacciamento.toString().equals(\"NO\") ||\n            cesoiamento.toString().equals(\"NO\") ||\n            altriRischi.toString().equals(\"SI\") ||\n            //solo per cliente ALLEANZA 3.0\n            (forzaImpatto.toString().equals(\"NO\") &amp;&amp; issue.getCustomFieldValue(customer).toString().contains(\"ALLEANZA\"))\n        ){\n            risk = true\n        }\n\n        \n        if (risk){\n            status = \"RISK_DETECTED\"\n        }else{\n            status = \"RISK_ANALYSIS_OK\"\n        }\n        log.debug \"status: \" + status\n        def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n        def mi = (MutableIssue) issue\n\n        fieldConfig = pmstatus.getRelevantConfig(issue)\n        //log.warn \"fieldConfig: \" + fieldConfig\n        cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == status }\n\n        pmstatus.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(pmstatus), cfNewValue), new DefaultIssueChangeHolder())\n        issueIndexingService.reIndex(issue)\n\t\t/*\n        if(\n            radarFunzionanti.toString().equals(\"NO\") ||\n            (radar.toString().equals(\"SOLO MOVIMENTO\") &amp;&amp; fotocellule.toString().equals(\"NO\")) ||\n            (forzaImpatto.toString().equals(\"NO\") &amp;&amp; issue.getCustomFieldValue(customer).toString().contains(\"ALLEANZA\")) ||\n            (sfondamento.toString().equals(\"RIDONDANTE\") &amp;&amp; batterie.toString().equals(\"NO\"))\n        ){\n            tobeStopped = true\n        }*/\n    }\n    \n    def cancelloUomoPresente, cancelloAnticaduta, cancelloAnticadutaFunzionante, cancelloExtracorsa, cancelloExtracorsaFunzionante, cancelloAltriRischi, cancelloRischi, cancelloCosteFunzionanti, cancelloCoste, cancelloImpatto\n    //CANCELLI AUTOMATICI\n    if(prodType.equals(\"CANCELLI AUTOMATICI\")){\n        //1. CANCELLO_MACCHINA_UOMO_PRESENTE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_MACCHINA_UOMO_PRESENTE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_MACCHINA_UOMO_PRESENTE\").createMutable()\n            cancelloUomoPresente = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloUomoPresente: \" + cancelloUomoPresente\n\n        //2. CANCELLO_DISPOSITIVI_ANTICADUTA\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_DISPOSITIVI_ANTICADUTA\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_DISPOSITIVI_ANTICADUTA\").createMutable()\n            cancelloAnticaduta = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloAnticaduta: \" + cancelloAnticaduta\n\n        //3. CANCELLO_ANTICADUTA_FUNZIONANTE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ANTICADUTA_FUNZIONANTE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ANTICADUTA_FUNZIONANTE\").createMutable()\n            cancelloAnticadutaFunzionante = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloAnticadutaFunzionante: \" + cancelloAnticadutaFunzionante\n\n        //4. CANCELLO_ARRESTO_EXTRACORSA\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ARRESTO_EXTRACORSA\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ARRESTO_EXTRACORSA\").createMutable()\n            cancelloExtracorsa = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloExtracorsa: \" + cancelloExtracorsa\n\n        //5. CANCELLO_ARRESTO_EXTRACORSA_FUNZIONANTI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ARRESTO_EXTRACORSA_FUNZIONANTI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ARRESTO_EXTRACORSA_FUNZIONANTI\").createMutable()\n            cancelloExtracorsaFunzionante = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloExtracorsaFunzionante: \" + cancelloExtracorsaFunzionante\n\n        //6. CANCELLO_ALTRI_RISCHI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ALTRI_RISCHI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_ALTRI_RISCHI\").createMutable()\n            cancelloAltriRischi = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloAltriRischi: \" + cancelloAltriRischi\n\n        //7. CANCELLO_RISCHI_RILEVATI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_RISCHI_RILEVATI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_RISCHI_RILEVATI\").createMutable()\n            cancelloRischi = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloRischi: \" + cancelloRischi\n\n        //8. CANCELLO_COSTE_SICUREZZA\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_COSTE_SICUREZZA\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_COSTE_SICUREZZA\").createMutable()\n            cancelloCoste = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloCoste: \" + cancelloCoste\n\n        //9. CANCELLO_COSTE_FUNZIONANTI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_COSTE_FUNZIONANTI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_COSTE_FUNZIONANTI\").createMutable()\n            cancelloCosteFunzionanti = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloCosteFunzionanti: \" + cancelloCosteFunzionanti\n\n        //10. CANCELLO_VALORE_IMPATTO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_FORZA_IMPATTO_NEI_LIMITI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"CANCELLO_FORZA_IMPATTO_NEI_LIMITI\").createMutable()\n            cancelloImpatto = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"cancelloImpatto: \" + cancelloImpatto\n\n        if(cancelloUomoPresente.toString().equals(\"SI\") &amp;&amp; \n           (\n               cancelloAnticaduta.toString().equals(\"NO\") || \n               (cancelloAnticaduta.toString().equals(\"SI\") &amp;&amp; cancelloAnticadutaFunzionante.toString().equals(\"NO\")) || \n               cancelloExtracorsa.toString().equals(\"NO\") || \n               (cancelloExtracorsa.toString().equals(\"SI\") &amp;&amp; cancelloExtracorsaFunzionante.toString().equals(\"NO\")) ||\n               cancelloAltriRischi.toString().equals(\"SI\")\n           ))\n        {\n            risk = true\n        }\n\n        if(cancelloUomoPresente.toString().equals(\"NO\") &amp;&amp; \n           (\n               cancelloRischi != null || \n               cancelloCoste.toString().equals(\"NO\") ||\n               (cancelloCoste.toString().equals(\"SI\") &amp;&amp; cancelloCosteFunzionanti.toString().equals(\"NO\")) || \n               cancelloAnticaduta.toString().equals(\"NO\") || \n               (cancelloAnticaduta.toString().equals(\"SI\") &amp;&amp; cancelloAnticadutaFunzionante.toString().equals(\"NO\")) || \n               cancelloExtracorsa.toString().equals(\"NO\") || \n               (cancelloExtracorsa.toString().equals(\"SI\") &amp;&amp; cancelloExtracorsaFunzionante.toString().equals(\"NO\")) ||\n               cancelloAltriRischi.toString().equals(\"SI\") ||\n               cancelloImpatto.toString().equals(\"NO\")\n           ))\n        {\n            risk = true\n        }\n\n\n        if (risk){\n            status = \"RISK_DETECTED\"\n        }else{\n            status = \"RISK_ANALYSIS_OK\"\n        }\n        log.debug \"status: \" + status\n        def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n        def mi = (MutableIssue) issue\n\n        fieldConfig = pmstatus.getRelevantConfig(issue)\n        //log.warn \"fieldConfig: \" + fieldConfig\n        cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == status }\n\n        pmstatus.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(pmstatus), cfNewValue), new DefaultIssueChangeHolder())\n        issueIndexingService.reIndex(issue)\n\n    }\n    def barrieraUomoPresente, barrieraRischi, barrieraAltriRischi, barrieraFotocellule, barrieraFotocelluleFunzionanti, barrieraPassaggioPedonale, barrieraPassaggioPedonaleSegnalato, barrieraInversione, barrieraImpatto\n    //BARRIERE\n    if(prodType.equals(\"BARRIERE\")){\n        //1. BARRIERA_MACCHINA_UOMO_PRESENTE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_MACCHINA_UOMO_PRESENTE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_MACCHINA_UOMO_PRESENTE\").createMutable()\n            barrieraUomoPresente = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraUomoPresente: \" + barrieraUomoPresente\n\n        //2. BARRIERA_ALTRI_RISCHI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_ALTRI_RISCHI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_ALTRI_RISCHI\").createMutable()\n            barrieraAltriRischi = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraAltriRischi: \" + barrieraAltriRischi\n        \n        //3. BARRIERA_RISCHI\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_RISCHI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_RISCHI\").createMutable()\n            barrieraRischi = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraRischi: \" + barrieraRischi\n        \n        //4. BARRIERA_FOTOCELLULE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_FOTOCELLULE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_FOTOCELLULE\").createMutable()\n            barrieraFotocellule = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraFotocellule: \" + barrieraFotocellule\n\n        //5. CANCELLO_ANTICADUTA_FUNZIONANTE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_FOTOCELLULE_FUNZIONANTI\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_FOTOCELLULE_FUNZIONANTI\").createMutable()\n            barrieraFotocelluleFunzionanti = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraFotocelluleFunzionanti: \" + barrieraFotocelluleFunzionanti\n\n        //6. BARRIERA_PASSAGGIO_PEDONALE\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_PASSAGGIO_PEDONALE\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_PASSAGGIO_PEDONALE\").createMutable()\n            barrieraPassaggioPedonale = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraPassaggioPedonale: \" + barrieraPassaggioPedonale\n        \n        //7. BARRIERA_PASSAGGIO_PEDONALE_SEGREGATO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_PASSAGGIO_PEDONALE_SEGREGATO\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_PASSAGGIO_PEDONALE_SEGREGATO\").createMutable()\n            barrieraPassaggioPedonaleSegnalato = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraPassaggioPedonaleSegnalato: \" + barrieraPassaggioPedonaleSegnalato\n        \n        //8. BARRIERA_INVERSIONE_SU_OSTACOLO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_INVERSIONE_SU_OSTACOLO\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_INVERSIONE_SU_OSTACOLO\").createMutable()\n            barrieraInversione = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraInversione: \" + barrieraInversione\n        \n        //9. BARRIERA_VALORE_IMPATTO\n        if(objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_VALORE_IMPATTO\")){\n            obTriage = objectFacade.loadObjectAttributeBean(installationObj.getId(), \"BARRIERA_VALORE_IMPATTO\").createMutable()\n            barrieraImpatto = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n        }\n        log.debug \"barrieraImpatto: \" + barrieraImpatto\n\n        if(barrieraUomoPresente.toString().equals(\"SI\") &amp;&amp; barrieraAltriRischi.toString().equals(\"SI\"))\n        {\n            risk = true\n        }\n\n        if(barrieraUomoPresente.toString().equals(\"NO\") &amp;&amp; \n           (\n               barrieraRischi != null || \n               barrieraFotocellule.toString().equals(\"NO\") ||\n               (barrieraFotocellule.toString().equals(\"SI\") &amp;&amp; barrieraFotocelluleFunzionanti.toString().equals(\"NO\")) || \n               barrieraPassaggioPedonale.toString().equals(\"NO\") || \n               (barrieraPassaggioPedonale.toString().equals(\"SI\") &amp;&amp; barrieraPassaggioPedonaleSegnalato.toString().equals(\"NO\")) || \n               barrieraInversione.toString().equals(\"NO\") || \n               barrieraAltriRischi.toString().equals(\"SI\") ||\n               barrieraImpatto.toString().equals(\"NO\")\n           ))\n        {\n            risk = true\n        }\n\n\n        if (risk){\n            status = \"RISK_DETECTED\"\n        }else{\n            status = \"RISK_ANALYSIS_OK\"\n        }\n        log.debug \"status: \" + status\n        def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n        def mi = (MutableIssue) issue\n\n        fieldConfig = pmstatus.getRelevantConfig(issue)\n        //log.warn \"fieldConfig: \" + fieldConfig\n        cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == status }\n\n        pmstatus.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(pmstatus), cfNewValue), new DefaultIssueChangeHolder())\n        issueIndexingService.reIndex(issue)\n    }\n    \n    if(tobeStopped){\n        fieldConfig = pmStopAsset.getRelevantConfig(issue)\n        //log.warn \"fieldConfig: \" + fieldConfig\n        cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"YES\" }\n\n        pmStopAsset.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(pmStopAsset), cfNewValue), new DefaultIssueChangeHolder())\n        issueIndexingService.reIndex(issue)\n    }else{\n        fieldConfig = pmStopAsset.getRelevantConfig(issue)\n        //log.warn \"fieldConfig: \" + fieldConfig\n        cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"NO\" }\n\n        pmStopAsset.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(pmStopAsset), cfNewValue), new DefaultIssueChangeHolder())\n        issueIndexingService.reIndex(issue)\n    }\n\n}","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="121" name="Back to Conf&amp;Planned">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <results>
            <unconditional-result old-status="žée" status="žée" step="3">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="8" name="&#09;©‹zWù">
      <meta name="jira.status.id">11728</meta>
    </step>
    <step id="9" name="EèÞr×">
      <meta name="jira.status.id">11436</meta>
    </step>
  </steps>
</workflow>