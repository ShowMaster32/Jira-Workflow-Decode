<?xml version='1.0' encoding='UTF-8'?>
<workflow>
  <meta name="jira.description" />
  <meta name="jira.update.author.key">arianna.fabbri</meta>
  <meta name="jira.updated.date">1643392571547</meta>
  <initial-actions>
    <action id="1" name="Create">
      <validators>
        <validator name="" type="class">
          <arg name="permission">Create Issue</arg>
          <arg name="class.name">com.atlassian.jira.workflow.validator.PermissionValidator</arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="žée" status="¢—§" step="1">
          <post-functions>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">f301d5d3-a896-4a2f-8b27-637ed94455fc</arg>
              <arg name="FIELD_NOTES">Cloned tkt: create links to all the related issues</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport com.atlassian.jira.issue.IssueManager\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport java.text.SimpleDateFormat\nimport java.text.ParseException\nimport com.atlassian.jira.security.JiraAuthenticationContext\nimport com.atlassian.jira.bc.issue.IssueService.IssueResult\nimport com.atlassian.jira.jql.parser.JqlQueryParser\nimport com.atlassian.jira.bc.issue.search.SearchService\nimport com.atlassian.jira.user.util.UserUtil\nimport com.atlassian.jira.web.bean.PagerFilter\nimport com.atlassian.jira.issue.link.LinkCollectionImpl;\nimport com.atlassian.jira.issue.link.IssueLink;\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\n/*Script Variables*/\n//Per test da console\nIssueManager issueManager = ComponentAccessor.getIssueManager()\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-4019\")\n\ndef user = ComponentAccessor.jiraAuthenticationContext.loggedInUser\n\ndef issueService = ComponentAccessor.getIssueService()\ndef clonedTkt = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.clonedTkt'] ? properties['cf.clonedTkt'].toString() : \"OP_CLONED_TKT\")[0]\ndef clonedByTkt = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.clonedByTkt'] ? properties['cf.clonedByTkt'].toString() : \"OP_CLONED_BY_ISSUE\")[0]\n\nif(issue.getCustomFieldValue(clonedTkt).toString().equals(\"YES\")){\n    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId());\n    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId());\n    def linkedIssueTemp = issueManager.getIssueByKeyIgnoreCase(issue.getCustomFieldValue(clonedByTkt).toString())//issueLink.getSourceObject()\n    String type = linkedIssueTemp.getIssueType().getName();\n\n    List&lt;IssueLink&gt; allOutSourceIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(/*issueLink.getSourceObject()*/linkedIssueTemp.getId());\n    log.debug allOutSourceIssueLink\n    for (Iterator&lt;IssueLink&gt; sourceOutIterator = allOutSourceIssueLink.iterator(); sourceOutIterator.hasNext();) {\n        IssueLink sourceIssueLink = (IssueLink) sourceOutIterator.next();\n        def linkedITemp = sourceIssueLink.getSourceObject()\n        String t = linkedITemp.getIssueType().getName();\n\n        log.debug \"issuelink Type: \" + sourceIssueLink.issueLinkType.getName()\n        log.debug \"sourceIssue: \" + sourceIssueLink.getSourceObject()\n        log.debug \"destinationIssue: \" + sourceIssueLink.getDestinationObject()\n\n        if(sourceIssueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString()) &amp;&amp; sourceIssueLink.getDestinationObject().key!=issue.key){\n            log.debug \"trovato outWardLink - prendo la destination issue \" + sourceIssueLink.getDestinationObject() + \" e la lego alla issue corrente solo se non \u00e8 gi\u00e0 linkata\"\n            def alreadyLinked=false\n            for(li in allInIssueLink){\n                if(sourceIssueLink.getDestinationObject().getId() == li.getSourceObject().getId() || sourceIssueLink.getDestinationObject().getId() == li.getDestinationObject().getId()){\n                    alreadyLinked=true\n                }\n            }\n            for(li in allOutIssueLink){\n                if(sourceIssueLink.getDestinationObject().getId() == li.getSourceObject().getId() || sourceIssueLink.getDestinationObject().getId() == li.getDestinationObject().getId()){\n                    alreadyLinked=true\n                }\n            }\n            if(!alreadyLinked){\n                log.debug \"non \u00e8 linkata, la linko\"\n                ComponentAccessor.getIssueLinkManager().createIssueLink(sourceIssueLink.getDestinationObject().getId(), issue.getId(), Long.parseLong(properties['il.linkedTktsRelatesId'].toString()), 1, user);   \n            }else{\n                log.debug \"gi\u00e0 linkata, non la linko di nuovo\"\n            }\n        }\n\n    }\n}\n","scriptPath":null}</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="FIELD_SECURITY_LEVEL_ID">11600</arg>
              <arg name="FIELD_NOTES">Set "Operation Portal - FAAC Service" Issue Security Level</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
              <arg name="FIELD_CONDITION" />
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd" />
              <arg name="append.value" />
              <arg name="maxAllowed-integerValue">50</arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field.value">%%CURRENT_DATETIME%%</arg>
              <arg name="field.name">customfield_22715</arg>
              <arg name="scopeType">H</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd" />
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql" />
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql" />
            </function>
            <function type="class">
              <arg name="conditionList">3</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
              <arg name="comparisonType">1</arg>
              <arg name="диюбwbХ*'">¶»ž</arg>
              <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
              <arg name="preconditionNegateResult-booleanValue" />
              <arg name="fieldValue">Maintenance Ticket</arg>
              <arg name="preconditionMode-textValue">DISCARD</arg>
              <arg name="fieldsList">issuetype</arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd" />
              <arg name="append.value" />
              <arg name="maxAllowed-integerValue">50</arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field.value">Yes</arg>
              <arg name="field.name">customfield_22620</arg>
              <arg name="scopeType">H</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd" />
              <arg name="preconditionAwareFunctionMode-textValue">FALSE</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql" />
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql" />
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd" />
              <arg name="append.value" />
              <arg name="maxAllowed-integerValue">50</arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field.value">New Installation Ticket</arg>
              <arg name="field.name">customfield_22716</arg>
              <arg name="scopeType">H</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd" />
              <arg name="preconditionAwareFunctionMode-textValue">FALSE</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql" />
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql" />
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd" />
              <arg name="append.value" />
              <arg name="maxAllowed-integerValue">50</arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field.value">Maintenance Ticket</arg>
              <arg name="field.name">customfield_22716</arg>
              <arg name="scopeType">H</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd" />
              <arg name="preconditionAwareFunctionMode-textValue">M</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql" />
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql" />
            </function>
            <function type="class">
              <arg name="conditionList">3</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="comparisonType">1</arg>
              <arg name="диюбwbХ*'">¶»ž</arg>
              <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
              <arg name="preconditionNegateResult-booleanValue" />
              <arg name="fieldValue">Planned Maintenance Ticket</arg>
              <arg name="preconditionMode-textValue">DISCARD</arg>
              <arg name="fieldsList">issuetype</arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd" />
              <arg name="append.value" />
              <arg name="maxAllowed-integerValue">50</arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field.value">Planned Maintenance Ticket</arg>
              <arg name="field.name">customfield_22716</arg>
              <arg name="scopeType">H</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd" />
              <arg name="preconditionAwareFunctionMode-textValue">M</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql" />
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql" />
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueCreateFunction</arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd" />
              <arg name="append.value" />
              <arg name="maxAllowed-integerValue" />
              <arg name="runAsUser-user" />
              <arg name="field.value">No</arg>
              <arg name="field.name">customfield_23264</arg>
              <arg name="scopeType">H</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd" />
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql" />
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql" />
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">5e04d019-e862-4b3e-b4e6-2fe357f2f60f</arg>
              <arg name="FIELD_NOTES">Clear cache</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\n\n/* REST API per Generazione Allegato Rapporto di Intervento */\nrequestMethod = \"POST\";\n/*Script Variables*/\n//Per test da console\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-14062\")\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/clearCache/dataObject\"\ndef body_req = []\nURL url = new URL(baseURL)\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.outputStream\nlog.debug \"body_req: \" + body_req\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\nlog.debug connection.outputStream\nconnection.connect();\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
              <arg name="FIELD_INLINE_SCRIPT">import com.opensymphony.workflow.WorkflowException;
import com.opensymphony.workflow.InvalidInputException
import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import org.apache.log4j.Category
import groovyx.net.http.HTTPBuilder
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();

def requestMethod
def baseURL

def firstTicket =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.firstTkt'].toString())[0]

log.debug issue.getIssueType().name
log.debug issue.getCustomFieldValue(firstTicket)


/* REST API per Invio Notifica Email ONSITE_REPORT */
requestMethod = "GET";

if(issue.getIssueType().name.toString().equals(properties['it.newInstallation']) || issue.getCustomFieldValue(firstTicket)!=null){
    def first_ticket=false
    def template=""
    if(issue.getCustomFieldValue(firstTicket)!=null){
        first_ticket=true
        template="FIRST_TICKET%7CMANUFACTURER"
    }else{
        template="NEW_INSTALLATION_CREATE_TKT%7CMANUFACTURER"
    }
    baseURL = "http://" + properties['api.env'].toString() + "/op/rest/automation/document/generation/check?ISSUE_KEY="+ issue.key +"&amp;DOC_CATEGORY=" + template + "&amp;ENABLED_FOR_FIRST_TICKET="+first_ticket+"&amp;IMPORT_FROM=OP_ASSET"
    log.debug baseURL
    URL url = new URL(baseURL)
    HttpURLConnection connection = (HttpURLConnection)url.openConnection();
    connection.setRequestMethod(requestMethod);
    connection.setRequestProperty("Content-Type", "application/json");
    connection.setRequestProperty("Accept", "*/*");
    connection.setDoOutput(true);
    connection.setDoInput(true);
    connection.connect();

    def output = new ArrayList()
    def eList = new ArrayList()
    def eListErrors = new ArrayList()
    def errorMsgs = new ArrayList()

    if (!connection.getResponseCode().toString().equals("200")){
        log.debug "url: " + url
        log.debug "ResponseCode:" + connection.getResponseCode()
        log.debug "ResponseMessage:" + connection.getResponseMessage()
        log.debug "ErrorStream: " + connection.getErrorStream().toString()
        log.debug "getHeaderFields(): " + connection.getHeaderFields()
        def outputMsg = ((HttpURLConnection)connection).errorStream.text
        log.debug "((HttpURLConnection)connection).errorStream.text: " + outputMsg

        def jsonSlurper = new JsonSlurper()
        def json_object = jsonSlurper.parseText(outputMsg)
        assert json_object instanceof Map  
        log.debug "message: " +  json_object.message

        eListErrors.add("E")
        eListErrors.add("OP-DOCS")
        errorMsgs.add(connection.getResponseCode() + " " + json_object.message)
        eListErrors.add(errorMsgs)
        eList.add(eListErrors)

        output.add(eList)
        throw new InvalidInputException("E", output.toString())
    }
}
</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">fc3fcb3a-f02f-471a-98e8-7472f7f6b0fc</arg>
              <arg name="FIELD_NOTES">Link New Installation Tickets</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport com.atlassian.jira.issue.IssueManager\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport groovy.json.JsonSlurper\nimport groovy.json.StreamingJsonBuilder\nimport com.atlassian.jira.config.util.JiraHome\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport java.text.SimpleDateFormat\nimport java.text.ParseException\nimport com.atlassian.jira.security.JiraAuthenticationContext\nimport com.atlassian.jira.bc.issue.IssueService.IssueResult\nimport com.atlassian.jira.jql.parser.JqlQueryParser\nimport com.atlassian.jira.bc.issue.search.SearchService\nimport com.atlassian.jira.user.util.UserUtil\nimport com.atlassian.jira.web.bean.PagerFilter\nimport com.atlassian.jira.issue.link.LinkCollectionImpl;\nimport com.atlassian.jira.issue.link.IssueLink;\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\n\nimport groovy.util.logging.Slf4j\nimport java.util.concurrent.ConcurrentHashMap\nimport javax.annotation.PostConstruct\nimport org.springframework.cache.annotation.Cacheable\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\n/*Script Variables*/\n//Per Post Function\nissue = issue\n//Per test da console\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\n//issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-241\")\n\n/*Insight classes &amp; components*/\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\nobjectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\nobjectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n/* Get Insight IQL Facade from plugin accessor */\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \niqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\");\nobjectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\n/* Get Insight Object Type Facade from plugin accessor */\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \nobjectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\n\n/*Customfields*/\ndef supplierInstallation =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplier'].toString())[0]\ndef wbsPrj =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.wbsPrj'] ? properties['cf.wbsPrj'].toString() : \"OP_WBS_PRJ\")[0]\ndef site =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.site'].toString())[0]\nlog.debug issue.getCustomFieldValue(supplierInstallation)\n\nJiraAuthenticationContext authContext = ComponentAccessor.getJiraAuthenticationContext()\ndef jqlQueryParser = ComponentAccessor.getComponent(JqlQueryParser)\ndef searchService = ComponentAccessor.getComponent(SearchService)\nUserUtil userUtil = ComponentAccessor.getUserUtil()\ndef user = ComponentAccessor.jiraAuthenticationContext.loggedInUser\n\nif(issue.getCustomFieldValue(supplierInstallation)){\n    def supplier = issue.getCustomFieldValue(supplierInstallation).first().toString()\n    log.debug \"supplier: \" + supplier\n    supplier = supplier.substring(1,supplier.lastIndexOf('(')-1)\n\n    def jqlSearch = \"project = '\" + issue.getProjectObject().name + \"' AND issuetype = '\" + issue.getIssueType().name + \"' AND key != '\" + issue.key.toString() + \"' AND '\" + properties['cf.supplier'].toString() + \"' in iqlFunction('\" + properties['iobj.suppinst.supplierRef'].toString() + \" LIKE \\\"\" + supplier.replaceAll(\"'\",\"\\'\") + \"\\\"')\" + \" AND '\" + properties['cf.site'].toString() + \"' = '\" + issue.getCustomFieldValue(site).first().toString().replaceAll(\"'\",\"\\'\") + \"' AND status IN ('\" + properties['wf.open'].toString() + \"') AND \" + (properties['cf.wbsPrj'] ? properties['cf.wbsPrj'].toString() : \"OP_WBS_PRJ\") + \" = '\" + issue.getCustomFieldValue(wbsPrj) + \"'\"\n    log.debug \"ricerca: \" + jqlSearch\n    def query = jqlQueryParser.parseQuery(jqlSearch)\n    log.debug \"query: \" + query\n    def search = searchService.search(user, query, PagerFilter.getUnlimitedFilter())\n    def found=false\n    def foundOutward=false\n    def linkedIssue\n    if (search.results) {\t\n        for (i in search.results.first()){\n            /*Per ogni issue restituita dalla query JQL verifico se ha gi\u00e0 dei link Relates To*/\n            log.debug i.key\n\n            def issueService = ComponentAccessor.getIssueService()\n\n            List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(i.getId());\n            log.debug \"allInIssueLink: \" + allInIssueLink\n            for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n                IssueLink issueLink = (IssueLink) outIterator.next();\n                def linkedIssueTemp = issueLink.getSourceObject()\n                String type = linkedIssueTemp.getIssueType().getName();\n\n                log.debug \"issuelink Type: \" + issueLink.issueLinkType.getName()\n                log.debug \"sourceIssue: \" + issueLink.getSourceObject()\n                log.debug \"destinationIssue: \" + issueLink.getDestinationObject()\n\n                if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString()) &amp;&amp; issueLink.getSourceObject().key!=issue.key){\n                    log.debug \"trovato inWardLink - prendo la source issue \" + linkedIssueTemp + \" e la lego alla issue corrente\"\n                    found=true\n                    ComponentAccessor.getIssueLinkManager().createIssueLink(linkedIssueTemp.getId(), issue.getId(), Long.parseLong(properties['il.linkedTktsRelatesId'].toString()), 1, user);\n                }\n            }\n\n            List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(i.getId());\n            log.debug \"allOutIssueLink: \" + allOutIssueLink\n            for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n                IssueLink issueLink = (IssueLink) outIterator.next();\n                def linkedIssueTemp = issueLink.getDestinationObject()\n                String type = linkedIssueTemp.getIssueType().getName();\n\n                log.debug \"issuelink Type: \" + issueLink.issueLinkType.getName()\n                log.debug \"sourceIssue: \" + issueLink.getSourceObject()\n                log.debug \"destinationIssue: \" + issueLink.getDestinationObject()\n\n                if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString()) &amp;&amp; issueLink.getDestinationObject().key!=issue.key){\n                    found=true\n                    log.debug \"trovato outWardLink - prendo la destination issue \" + linkedIssueTemp + \" e la lego alla issue corrente\"\n                    ComponentAccessor.getIssueLinkManager().createIssueLink(issue.getId(), linkedIssueTemp.getId(), Long.parseLong(properties['il.linkedTktsRelatesId'].toString()), 1, user);\n                }else if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString()) &amp;&amp; issueLink.getDestinationObject().key==issue.key){\n                    log.debug \"issue gi\u00e0 linkata\"\n                    break\n                }\n            }\n\n            log.debug \"Creo link tra la issue oggetto di transition e la issue risultante dal filtro\"\n            ComponentAccessor.getIssueLinkManager().createIssueLink(i.getId(), issue.getId(), Long.parseLong(properties['il.linkedTktsRelatesId'].toString()), 1, user);\n\n        }\n\n    } else {\n        log.error(\"Invalid JQL: \" + jqlSearch);\n    } \n}\n","scriptPath":null,"parameters":{}}</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
              <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.IssueManager
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import groovy.json.JsonSlurper
import groovy.json.StreamingJsonBuilder
import com.atlassian.jira.config.util.JiraHome
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import java.text.SimpleDateFormat
import java.text.ParseException
import com.atlassian.jira.security.JiraAuthenticationContext
import com.atlassian.jira.bc.issue.IssueService.IssueResult
import com.atlassian.jira.jql.parser.JqlQueryParser
import com.atlassian.jira.bc.issue.search.SearchService
import com.atlassian.jira.user.util.UserUtil
import com.atlassian.jira.web.bean.PagerFilter
import com.atlassian.jira.issue.link.LinkCollectionImpl;
import com.atlassian.jira.issue.link.IssueLink;
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder

import groovy.util.logging.Slf4j
import java.util.concurrent.ConcurrentHashMap
import javax.annotation.PostConstruct
import org.springframework.cache.annotation.Cacheable
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

/*Script Variables*/
//Per Post Function
issue = issue
//Per test da console
//IssueManager issueManager = ComponentAccessor.getIssueManager()
//issue = issueManager.getIssueByKeyIgnoreCase("OPUT-241")

/*Insight classes &amp; components*/
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);
/* Get Insight IQL Facade from plugin accessor */
Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade"); 
iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);
Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory");
objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);
/* Get Insight Object Type Facade from plugin accessor */
Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade"); 
objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);

/*Customfields*/
def supplierInstallation =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplierNewInstallation'].toString())[0]
def wbsPrj =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.wbsPrj'] ? properties['cf.wbsPrj'].toString() : "OP_WBS_PRJ")[0]
def site =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.site'].toString())[0]
log.debug issue.getCustomFieldValue(supplierInstallation)

JiraAuthenticationContext authContext = ComponentAccessor.getJiraAuthenticationContext()
def jqlQueryParser = ComponentAccessor.getComponent(JqlQueryParser)
def searchService = ComponentAccessor.getComponent(SearchService)
UserUtil userUtil = ComponentAccessor.getUserUtil()
def user = ComponentAccessor.jiraAuthenticationContext.loggedInUser

def supplier = issue.getCustomFieldValue(supplierInstallation).first().toString()
log.debug "supplier: " + supplier
supplier = supplier.substring(1,supplier.indexOf('(')-1)

def jqlSearch = "project = '" + issue.getProjectObject().name + "' AND issuetype = '" + issue.getIssueType().name + "' AND key != '" + issue.key.toString() + "' AND '" + properties['cf.supplierNewInstallation'].toString() + "' in iqlFunction('" + properties['iobj.suppinst.supplierRef'].toString() + " LIKE \"" + supplier.replaceAll("'","\'") + "\"')" + " AND '" + properties['cf.site'].toString() + "' = '" + issue.getCustomFieldValue(site).first().toString().replaceAll("'","\'") + "' AND status IN ('" + properties['wf.open'].toString() + "') AND " + (properties['cf.wbsPrj'] ? properties['cf.wbsPrj'].toString() : "OP_WBS_PRJ") + " = '" + issue.getCustomFieldValue(wbsPrj) + "'"
log.debug "ricerca: " + jqlSearch
def query = jqlQueryParser.parseQuery(jqlSearch)
log.debug "query: " + query
def search = searchService.search(user, query, PagerFilter.getUnlimitedFilter())
def found=false
def foundOutward=false
def linkedIssue
if (search.results) {	
    for (i in search.results.first()){
        /*Per ogni issue restituita dalla query JQL verifico se ha già dei link Relates To*/
        log.debug i.key

        def issueService = ComponentAccessor.getIssueService()

        List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(i.getId());
        log.debug "allInIssueLink: " + allInIssueLink
        for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
            IssueLink issueLink = (IssueLink) outIterator.next();
            def linkedIssueTemp = issueLink.getSourceObject()
            String type = linkedIssueTemp.getIssueType().getName();

            log.debug "issuelink Type: " + issueLink.issueLinkType.getName()
			log.debug "sourceIssue: " + issueLink.getSourceObject()
            log.debug "destinationIssue: " + issueLink.getDestinationObject()
            
            if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString()) &amp;&amp; issueLink.getSourceObject().key!=issue.key){
                log.debug "trovato inWardLink - prendo la source issue " + linkedIssueTemp + " e la lego alla issue corrente"
                found=true
                ComponentAccessor.getIssueLinkManager().createIssueLink(linkedIssueTemp.getId(), issue.getId(), Long.parseLong(properties['il.linkedTktsRelatesId'].toString()), 1, user);
            }
        }
        
        List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(i.getId());
        log.debug "allOutIssueLink: " + allOutIssueLink
        for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
            IssueLink issueLink = (IssueLink) outIterator.next();
            def linkedIssueTemp = issueLink.getDestinationObject()
            String type = linkedIssueTemp.getIssueType().getName();

            log.debug "issuelink Type: " + issueLink.issueLinkType.getName()
			log.debug "sourceIssue: " + issueLink.getSourceObject()
            log.debug "destinationIssue: " + issueLink.getDestinationObject()
            
            if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString()) &amp;&amp; issueLink.getDestinationObject().key!=issue.key){
                found=true
                log.debug "trovato outWardLink - prendo la destination issue " + linkedIssueTemp + " e la lego alla issue corrente"
                ComponentAccessor.getIssueLinkManager().createIssueLink(issue.getId(), linkedIssueTemp.getId(), Long.parseLong(properties['il.linkedTktsRelatesId'].toString()), 1, user);
            }else if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString()) &amp;&amp; issueLink.getDestinationObject().key==issue.key){
                log.debug "issue già linkata"
                break
            }
        }

        log.debug "Creo link tra la issue oggetto di transition e la issue risultante dal filtro"
        ComponentAccessor.getIssueLinkManager().createIssueLink(i.getId(), issue.getId(), Long.parseLong(properties['il.linkedTktsRelatesId'].toString()), 1, user);
              
    }
    
} else {
    log.error("Invalid JQL: " + jqlSearch);
} </arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">a73cc7d1-9469-4cfd-a066-0850639df8f8</arg>
              <arg name="FIELD_NOTES">Internal Technicians: fill in OP_INTERNAL_SUPPLIER (internal supplier) to be used if the ticket has to be assigned to internal techs</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport com.atlassian.crowd.embedded.api.User\nimport com.atlassian.jira.component.ComponentAccessor\nimport com.atlassian.jira.user.UserPropertyManager\nimport com.atlassian.jira.user.util.UserManager \nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n/*Script Variables*/\n//Per test da console\n//def issueManager = ComponentAccessor.getIssueManager()\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-3753\")\nUserPropertyManager userPropertyManager = ComponentAccessor.getUserPropertyManager()\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\");\ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\n/* Get Insight Object Facade from plugin accessor */\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\ndef schemaOPAAid = properties['ischema.aa.id'].toInteger()\ndef schemaDO = properties['ischema.dbo'].toString()\ndef visibility =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.tktVisibility'] ? properties['cf.tktVisibility'].toString() : \"OP_TKT_VISIBILITY_KEY\")[0]\ndef internalSupplier =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.internalSupplier'] ? properties['cf.internalSupplier'].toString() : \"OP_INTERNAL_SUPPLIER\")[0]\n\ndef currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\ndef visibilityKey = issue.getCustomFieldValue(visibility)[0].toString().substring(issue.getCustomFieldValue(visibility)[0].toString().indexOf('(')+1,issue.getCustomFieldValue(visibility)[0].toString().indexOf(')'))\n//log.debug visibilityKey\ndef companyRef = objectFacade.loadObjectAttributeBean(objectFacade.loadObjectBean(visibilityKey).getId(), properties['iobj.visibilityKey.companyRef'].toString()).getObjectAttributeValueBeans();\n//log.info \"companyRef: \" + companyRef\ndef companyRefId = companyRef.toString().substring(companyRef.toString().indexOf('(')+1,companyRef.toString().indexOf(')'))\ndef companySupplier = objectFacade.loadObjectAttributeBean(companyRefId.toInteger(), properties['iobj.visibilityKey.supplierRef'].toString()).getObjectAttributeValueBeans();\n//log.debug companySupplier\ndef companySupplierId = companySupplier.toString().substring(companySupplier.toString().indexOf('(')+1,companySupplier.toString().indexOf(')'))\n//log.debug companySupplierId\ndef objects = iqlFacade.findObjectsByIQLAndSchema(schemaOPAAid, \"objectType=Supplier AND SUPPLIER_REF.Key = \" + schemaDO+\"-\"+companySupplierId)\n//log.debug objects\ndef objKey = objects[0].toString().substring(objects[0].toString().indexOf('(')+1,objects[0].toString().indexOf(')'))\n//log.debug objKey\nMutableIssue mi = (MutableIssue) issue;\nmi.setCustomFieldValue(internalSupplier, objects);\nComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n","scriptPath":null}</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">1</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">5e04d019-e862-4b3e-b4e6-2fe357f2f60f</arg>
              <arg name="FIELD_NOTES">OP: Doc Template generation - se New Installation OR First Ticket = true</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.opensymphony.workflow.WorkflowException;\nimport com.opensymphony.workflow.InvalidInputException\nimport groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport groovyx.net.http.HTTPBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef requestMethod\ndef baseURL\n\ndef firstTicket =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.firstTkt'].toString())[0]\ndef asset =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.asset'].toString())[0]\ndef supplier =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplier'].toString())[0]\n\nlog.debug issue.getIssueType().name\nlog.debug issue.getCustomFieldValue(firstTicket)\n\n\n/* REST API per Invio Notifica Email ONSITE_REPORT */\nrequestMethod = \"GET\";\n\nif(issue.getCustomFieldValue(supplier)!=null &amp;&amp; issue.getCustomFieldValue(asset)!=null &amp;&amp; (issue.getIssueType().name.toString().equals(properties['it.newInstallation']) || issue.getCustomFieldValue(firstTicket)!=null)){\n    def first_ticket=false\n    def template=\"\"\n    if(issue.getCustomFieldValue(firstTicket)!=null){\n        first_ticket=true\n        template=\"FIRST_TICKET%7CMANUFACTURER\"\n    }else{\n        template=\"NEW_INSTALLATION_CREATE_TKT%7CMANUFACTURER\"\n    }\n    \n    if(issue.getIssueType().name.toString().equals(properties['it.newInstallation'])){\n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/document/generation/check?ISSUE_KEY=\"+ issue.key +\"&amp;DOC_CATEGORY=\" + template + \"&amp;ENABLED_FOR_FIRST_TICKET=\"+first_ticket+\"&amp;IMPORT_FROM=\"\n    }else{\n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/document/generation/check?ISSUE_KEY=\"+ issue.key +\"&amp;DOC_CATEGORY=\" + template + \"&amp;ENABLED_FOR_FIRST_TICKET=\"+first_ticket+\"&amp;IMPORT_FROM=OP_ASSET\"\n    }\n    \n    log.debug baseURL\n    URL url = new URL(baseURL)\n    HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\tlog.debug \"url: \" + url\n    \n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        log.debug \"ErrorStream: \" + connection.getErrorStream().toString()\n        log.debug \"getHeaderFields(): \" + connection.getHeaderFields()\n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-DOCS\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.message)\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException(\"E\", output.toString())\n    }\n}\n","scriptPath":null,"parameters":{}}</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
              <arg name="FIELD_INLINE_SCRIPT">import com.opensymphony.workflow.WorkflowException;
import com.opensymphony.workflow.InvalidInputException
import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import org.apache.log4j.Category
import groovyx.net.http.HTTPBuilder
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();

def requestMethod
def baseURL

def firstTicket =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.firstTkt'].toString())[0]

log.debug issue.getIssueType().name
log.debug issue.getCustomFieldValue(firstTicket)


/* REST API per Invio Notifica Email ONSITE_REPORT */
requestMethod = "GET";

if(issue.getIssueType().name.toString().equals(properties['it.newInstallation']) || issue.getCustomFieldValue(firstTicket)!=null){
    def first_ticket=false
    def template=""
    if(issue.getCustomFieldValue(firstTicket)!=null){
        first_ticket=true
        template="FIRST_TICKET%7CMANUFACTURER"
    }else{
        template="NEW_INSTALLATION_CREATE_TKT%7CMANUFACTURER"
    }
    baseURL = "http://" + properties['api.env'].toString() + "/op/rest/automation/document/generation/check?ISSUE_KEY="+ issue.key +"&amp;DOC_CATEGORY=" + template + "&amp;ENABLED_FOR_FIRST_TICKET="+first_ticket+"&amp;IMPORT_FROM=OP_ASSET"
    log.debug baseURL
    URL url = new URL(baseURL)
    HttpURLConnection connection = (HttpURLConnection)url.openConnection();
    connection.setRequestMethod(requestMethod);
    connection.setRequestProperty("Content-Type", "application/json");
    connection.setRequestProperty("Accept", "*/*");
    connection.setDoOutput(true);
    connection.setDoInput(true);
    connection.connect();

    def output = new ArrayList()
    def eList = new ArrayList()
    def eListErrors = new ArrayList()
    def errorMsgs = new ArrayList()

    if (!connection.getResponseCode().toString().equals("200")){
        log.debug "url: " + url
        log.debug "ResponseCode:" + connection.getResponseCode()
        log.debug "ResponseMessage:" + connection.getResponseMessage()
        log.debug "ErrorStream: " + connection.getErrorStream().toString()
        log.debug "getHeaderFields(): " + connection.getHeaderFields()
        def outputMsg = ((HttpURLConnection)connection).errorStream.text
        log.debug "((HttpURLConnection)connection).errorStream.text: " + outputMsg

        def jsonSlurper = new JsonSlurper()
        def json_object = jsonSlurper.parseText(outputMsg)
        assert json_object instanceof Map  
        log.debug "message: " +  json_object.message

        eListErrors.add("E")
        eListErrors.add("OP-DOCS")
        errorMsgs.add(connection.getResponseCode() + " " + json_object.message)
        eListErrors.add(errorMsgs)
        eList.add(eListErrors)

        output.add(eList)
        throw new InvalidInputException("E", output.toString())
    }
}
</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </initial-actions>
  <global-actions>
    <action id="351" name="Sospendi Ticket" view="fieldscreen">
      <meta name="opsbar-sequence">110</meta>
      <meta name="jira.description" />
      <meta name="jira.fieldscreen.id">20200</meta>
      <restrict-to>
        <conditions>
          <condition type="class">
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
            <arg name="FIELD_CONDITION">!issue.getStatus().getName().toString().equals("Closed")|||</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
            <arg name="FIELD_PREVIEW_ISSUE" />
          </condition>
        </conditions>
      </restrict-to>
      <results>
        <unconditional-result old-status="žée" status="žée" step="16">
          <post-functions>
            <function type="class">
              <arg name="scopeSource-linkEnd" />
              <arg name="maxAllowed-integerValue">50</arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field">customfield_22693</arg>
              <arg name="scopeType">H</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
              <arg name="scopeDestination-linkEnd" />
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql" />
              <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
              <arg name="field3">customfield_22758</arg>
              <arg name="field2">customfield_22756</arg>
              <arg name="scopeSource-jql" />
            </function>
            <function type="class">
              <arg name="field.name">resolution</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
              <arg name="field.value">10401</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="361" name="Annulla Ticket" view="fieldscreen">
      <meta name="opsbar-sequence">120</meta>
      <meta name="jira.description" />
      <meta name="jira.fieldscreen.id">20200</meta>
      <restrict-to>
        <conditions>
          <condition type="class">
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
            <arg name="FIELD_CONDITION">!issue.getStatus().getName().toString().equals("Closed")|||</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
            <arg name="FIELD_PREVIEW_ISSUE" />
          </condition>
        </conditions>
      </restrict-to>
      <results>
        <unconditional-result old-status="žée" status="žée" step="17">
          <post-functions>
            <function type="class">
              <arg name="scopeSource-linkEnd" />
              <arg name="maxAllowed-integerValue">50</arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field">customfield_22693</arg>
              <arg name="scopeType">H</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
              <arg name="scopeDestination-linkEnd" />
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql" />
              <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
              <arg name="field3">customfield_22758</arg>
              <arg name="field2">customfield_22756</arg>
              <arg name="scopeSource-jql" />
            </function>
            <function type="class">
              <arg name="field.name">resolution</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
              <arg name="field.value">10104</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </global-actions>
  <common-actions>
    <action id="51" name="Assegna a Fornitore" view="fieldscreen">
      <meta name="opsbar-sequence">50</meta>
      <meta name="jira.description" />
      <meta name="jira.fieldscreen.id">19904</meta>
      <restrict-to>
        <conditions type="AND">
          <condition type="class">
            <arg name="FIELD_FUNCTION_ID">93d6b54e-ad03-41e6-82a8-a6d0a675107e</arg>
            <arg name="FIELD_NOTES">OP_ASSET should be evaluated</arg>
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
            <arg name="FIELD_CONDITION">{"script":"cfValues['OP_ASSET'] != null || issue.issueType.name == 'Planned Maintenance Ticket'","scriptPath":null}</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
          </condition>
          <condition type="class">
            <arg name="FIELD_FUNCTION_ID">862e4160-0f10-49db-afe0-9dc656448701</arg>
            <arg name="FIELD_NOTES">OP_SUPPLIER should be evaluated</arg>
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
            <arg name="FIELD_CONDITION">{"script":"import com.atlassian.jira.component.ComponentAccessor\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\ndef trovato=false\nfor (s in ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplier'].toString())){\n    if (issue.getCustomFieldValue(s) != null){\n        trovato=true\n    }\n}\nreturn trovato\n","scriptPath":null,"parameters":{}}</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
            <arg name="FIELD_PREVIEW_ISSUE">AAS-15446</arg>
          </condition>
        </conditions>
      </restrict-to>
      <validators>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">339d339e-1008-47f6-86fc-0fa1b991ccd2</arg>
          <arg name="FIELD_NOTES">OP: Check Customer Contract</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.sql.Timestamp\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\ndef warnings = false\ndef missingContract = false\ndef expiredContract = false\ndef errors = false\n\ndef installation =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.asset'].toString())[0]\ndef automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyAssigned'] ? properties['cf.automaticallyAssigned'].toString() : \"OP_AUTOMATICALLY_ASSIGNED\")[0]\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]\n\ndef warningEmptyFields = new ArrayList()\ndef errorMandatoryFields = new ArrayList()\n \n//OP_ASSET\nif(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance']) &amp;&amp; (issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"No\"))){\n    //Check CUSTOMER_CONTRACT_REF on OP_ASSET\n    \n    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n    def asset = issue.getCustomFieldValue(installation)\n    log.debug \"asset: \" + asset\n    asset=asset.toString()\n    def assetKey = asset.substring(asset.lastIndexOf('(')+1,asset.lastIndexOf(')'))\n    def assetObject = objectFacade.loadObjectBean(assetKey)\n\tlog.debug \"assetObject.getId(): \" + assetObject.getId()\n    def obTriage\n    def customerContract, customerContractAttr\n    customerContractAttr = properties['iobj.hardware.contract'] ? properties['iobj.hardware.contract'].toString() : \"CUSTOMER_CONTRACT_REF\"\n    if(objectFacade.loadObjectAttributeBean(assetObject.getId(), customerContractAttr)){\n        obTriage = objectFacade.loadObjectAttributeBean(assetObject.getId(), customerContractAttr).createMutable()\n        customerContract = obTriage.getObjectAttributeValueBeans().toString()\n    }\n\n    log.debug \"customerContract: \" + customerContract\n    \n    if(customerContract == null){\n        warnings = true\n        missingContract = true\n    }else{\n        //get \"QT_VALID_T\" for that Technician\n        def contract=customerContract.toString()\n        log.debug \"contract:\" + contract\n        def contractId = contract.substring(contract.lastIndexOf('(')+1,contract.lastIndexOf(')'))\n        log.debug \"contractId:\" + contractId\n        log.debug \"properties['iobj.contract.validTo']: \" + properties['iobj.contract.validTo']\n        def expiringDate, expiringDateAttr\n        expiringDateAttr = properties['iobj.contract.validTo'] ? properties['iobj.contract.validTo'].toString() : \"QT_VALID_T\"\n        \n        if(objectFacade.loadObjectAttributeBean(contractId.toInteger(), customerContractAttr)){\n                obTriage = objectFacade.loadObjectAttributeBean(contractId.toInteger(), customerContractAttr).createMutable()\n                contractRef = obTriage.getObjectAttributeValueBeans().toString()\n                contractDO = contractRef.toString()\n                log.debug \"contractDO: \" + contractDO\n                contractDOKey = contractDO.substring(contractDO.lastIndexOf('(')+1,contractDO.lastIndexOf(')'))\n                log.debug \"contractDOKey: \" + contractDOKey\n                contractDOObject = objectFacade.loadObjectBean(properties['ischema.dbo'].toString() + \"-\" + contractDOKey)\n            log.debug \"expiringDateAttr: \" + expiringDateAttr\n                expiringDate = objectFacade.loadObjectAttributeBean(contractDOKey.toInteger(), expiringDateAttr) ? objectFacade.loadObjectAttributeBean(contractDOKey.toInteger(), expiringDateAttr).getObjectAttributeValueBeans().value[0] as Date : null\n        }\n\n        def todaysDateTime = (new Date())\n        log.debug \"expiringDate: \" + expiringDate\n        log.debug \"todaysDateTime: \" + todaysDateTime\n        if(expiringDate &lt; todaysDateTime){\n            warnings = true\n            expiredContract = true\n        }\n        \n    }\n \n}\n\ndef output = new ArrayList()\n\nif (!warnings){\n    return true\n}else{\n    if(warnings){\n        if(issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")){\n            //log.debug \"return true\"\n            return true\n        }else{\n            def wList = new ArrayList()\n\t\t\tdef wListConfirmEmptyContract = new ArrayList()\n            \n            if(missingContract){\n                wListConfirmEmptyContract.add(\"W\")\n                wListConfirmEmptyContract.add(\"CUSTOMER_CONTRACT_MISSING\")\n                wListConfirmEmptyContract.add(null)\n\n                wList.add(wListConfirmEmptyContract)\n            }\n            \n            if(expiredContract){\n                wListConfirmEmptyContract.add(\"W\")\n                wListConfirmEmptyContract.add(\"CUSTOMER_CONTRACT_EXPIRED\")\n                wListConfirmEmptyContract.add(null)\n\n                wList.add(wListConfirmEmptyContract)\n            }\n            output.add(wList)\n            throw new InvalidInputException('{\"W\":\"' + output.toString() + '\"}') \n        }\n    }\n}","scriptPath":null,"parameters":{}}</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">6411a0f5-9ae7-4a56-a7f5-a857227a153e</arg>
          <arg name="FIELD_NOTES">OP: Check Re-Schedule Flag</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.sql.Timestamp\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\ndef warnings = false\ndef missingContract = false\ndef expiredContract = false\ndef errors = false\n\ndef rescheduling =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.rescheduling'] ? properties['cf.rescheduling'].toString() : \"OP_CHANGE_SCHEDULING\")[0]\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm2'].toString())[0]\ndef firstTicket =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.firstTkt'].toString())[0]\n\ndef warningEmptyFields = new ArrayList()\ndef errorMandatoryFields = new ArrayList()\n \nif(issue.getCustomFieldValue(rescheduling).toString().equals(\"Yes\") &amp;&amp; (issue.getIssueType().name.toString().equals(properties['it.newInstallation']) || issue.getCustomFieldValue(firstTicket)!=null)){\n    //Ask confirmation to delete and create again New Installation attachments\n    warnings = true\n}\n\ndef output = new ArrayList()\n\nif (!warnings){\n    return true\n}else{\n    if(warnings){\n        if(issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")){\n            //log.debug \"return true\"\n            return true\n        }else{\n            def wList = new ArrayList()\n\t\t\tdef wListConfirmEmptyContract = new ArrayList()\n            \n            wListConfirmEmptyContract.add(\"W\")\n            wListConfirmEmptyContract.add(\"NEW_DOCS_GENERATION\")\n            wListConfirmEmptyContract.add(null)\n\n            wList.add(wListConfirmEmptyContract)\n        \n            output.add(wList)\n            throw new InvalidInputException('{\"W\":\"' + output.toString() + '\"}') \n        }\n    }\n}","scriptPath":null}</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">136ddcac-3447-4136-8695-c845548ae5b2</arg>
          <arg name="FIELD_NOTES">Delete previous attachments related to NEW Installation TKT Generation</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\ndef automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]\n\ndef rescheduling =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.rescheduling'] ? properties['cf.rescheduling'].toString() : \"OP_CHANGE_SCHEDULING\")[0]\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm2'].toString())[0]\n\ndef requestMethod\ndef baseURL\n\n/*Script Variables*/\n//Per test da console\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-14062\")\n\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\n\n/*Rimozione allegato rapporto di intervento appena creato*/\n/* Get Insight IQL Facade from plugin accessor */\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\n\n/* Get Insight Object Facade from plugin accessor */\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n/* Get Insight Object Type Facade from plugin accessor */\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\");\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\n\n/* Get Insight Object Attribute Facade from plugin accessor */\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\");\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\n\n\nif(issue.getCustomFieldValue(rescheduling).toString().equals(\"Yes\") &amp;&amp; issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")){\n\n    /* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include \" around value */\n    def objects = iqlFacade.findObjectsByIQLAndSchema(DBO, \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".\\\"\" + properties['iobj.attachmentCategory.newInstTkt'].toString() + \"\\\" = true AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"); // See the complete list of possible IQL on the Insight Query Language documentation page\n    /* If this is a mandatory field you should be able to do this: */\n    log.debug \"IQL: \" + \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".\\\"\" + properties['iobj.attachmentCategory.newInstTkt'].toString() + \"\\\" = true AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"\n\n    for(iobj in objects){\n        /* UPDATE OJBECT DELETED VALUE */\n        def obj = objectFacade.loadObjectBean(iobj.getId());\n\n        int attachmentDeleted = properties['iobj.attachment.deleted.id'] ? properties['iobj.attachment.deleted.id'].toString().toInteger() : 3265\n\n        attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(attachmentDeleted); \n\n        newAttrib = obj.createObjectAttributeBean(attribType);\n        def newAttribValue = newAttrib.createObjectAttributeValueBean();\n\n        try {\n            newAttribValue.setValue(attribType, true);\n        } catch (Exception vie) {\n            log.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType + \" to \" + totalAmountSupp + \". Exiting.\");\n            log.warn(SETINSIGHTVALUE: vie.getMessage());\n            return false;\n        }\n\n        def attribValues = newAttrib.getObjectAttributeValueBeans();\n        attribValues.add(newAttribValue);\n        newAttrib.setObjectAttributeValueBeans(attribValues);\n\n        try {\n            newAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\n        } catch (Exception vie) {\n            log.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\n            log.warn(SETINSIGHTVALUE: vie.getMessage());\n        return false;\n        }\n        log.info(\"SETINSIGHTVALUE: Successfully saved value\");\n    }\n    \n}","scriptPath":null}</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">17f1689e-675a-4677-aec8-021a2640fd0c</arg>
          <arg name="FIELD_NOTES">OP: Doc Template generation - se New Installation OR First Ticket = true</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.opensymphony.workflow.WorkflowException;\nimport com.opensymphony.workflow.InvalidInputException\nimport groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport groovyx.net.http.HTTPBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef requestMethod\ndef baseURL\n\ndef firstTicket =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.firstTkt'].toString())[0]\n\nlog.debug issue.getIssueType().name\nlog.debug issue.getCustomFieldValue(firstTicket)\n\n\n/* REST API per Invio Notifica Email ONSITE_REPORT */\nrequestMethod = \"GET\";\ndef rescheduling =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.rescheduling'] ? properties['cf.rescheduling'].toString() : \"OP_CHANGE_SCHEDULING\")[0]\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm2'].toString())[0]\n\nif(issue.getCustomFieldValue(rescheduling).toString().equals(\"Yes\") &amp;&amp; issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\") &amp;&amp; (issue.getIssueType().name.toString().equals(properties['it.newInstallation']) || issue.getCustomFieldValue(firstTicket)!=null)){\n    def first_ticket=false\n    def template=\"\"\n    if(issue.getCustomFieldValue(firstTicket)!=null){\n        first_ticket=true\n        template=\"FIRST_TICKET%7CMANUFACTURER\"\n    }else{\n        template=\"NEW_INSTALLATION_CREATE_TKT%7CMANUFACTURER\"\n    }\n    \n    if(issue.getIssueType().name.toString().equals(properties['it.newInstallation'])){\n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/document/generation/check?ISSUE_KEY=\"+ issue.key +\"&amp;DOC_CATEGORY=\" + template + \"&amp;ENABLED_FOR_FIRST_TICKET=\"+first_ticket+\"&amp;IMPORT_FROM=\"\n    }else{\n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/document/generation/check?ISSUE_KEY=\"+ issue.key +\"&amp;DOC_CATEGORY=\" + template + \"&amp;ENABLED_FOR_FIRST_TICKET=\"+first_ticket+\"&amp;IMPORT_FROM=OP_ASSET\"\n    }\n    \n    log.debug baseURL\n    URL url = new URL(baseURL)\n    HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\tlog.debug \"url: \" + url\n    \n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        log.debug \"ErrorStream: \" + connection.getErrorStream().toString()\n        log.debug \"getHeaderFields(): \" + connection.getHeaderFields()\n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-DOCS\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.message)\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n}\n","scriptPath":null}</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">3bddafa4-9601-4ff0-9db1-83ec1b0f0850</arg>
          <arg name="FIELD_NOTES"> Generate SN for old tickets &amp; offer tkts</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef SN =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_NOTIFICATION\")[0]\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\n\nif(issue.getCustomFieldValue(SN) == null &amp;&amp; issue.issueType.name != \"Planned Maintenance Ticket\"){\n    requestMethod = \"POST\";\n\n    def body_req = []\n    body_req = [\n        \"issueKey\": issue.key,\n        \"status\": \"OPE\"\n    ] \n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n    log.debug \"baseURL SN: \" + baseURL\n    log.debug \"body_req SN: \" + body_req\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"201\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        \n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n        log.debug \"errors: \" +  json_object.errors.toString()\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-SAP-SN-UPDATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n}\n ","scriptPath":null,"parameters":{}}</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">Ñç\mý×½5w×÷kÖÛ¿[y¯7ÕîµÝÝ÷ßÆ»</arg>
          <arg name="FIELD_NOTES">OP Email Notification: ASSIGN_TO_SUPPLIER</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.atlassian.jira.issue.link.IssueLink\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\ndef requestMethod = \"POST\";\ndef relatesInIssueLink=false\ndef relatesOutIssueLink=false\ndef linkedTickets=new ArrayList()\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyAssigned'] ? properties['cf.automaticallyAssigned'].toString() : \"OP_AUTOMATICALLY_ASSIGNED\")[0]\n\n/*OP-1038: verifica ticket collegati*/\nList&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\nfor (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n\n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n        relatesInIssueLink=true\n        linkedTickets.add(issueLink.getSourceObject().toString())\n        log.debug \"Issue con relatesInIssueLink\"\n    }\n}\nList&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\nfor (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n\n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n        relatesOutIssueLink=true\n        linkedTickets.add(issueLink.getDestinationObject().toString())\n        log.debug \"Issue con relatesOutIssueLink\"\n    }\n}\n\ndef body_req\nif(relatesInIssueLink || relatesOutIssueLink){\n    body_req = [\n        \"templateName\": properties['tt.assignToSupplier'].toString(),\n        \"pec\": false,\n        \"issueKey\": issue.key,\n        \"linkedTickets\": linkedTickets\n    ]\n}else{\n    body_req = [\n        \"templateName\": properties['tt.assignToSupplier'].toString(),\n        \"pec\": false,\n        \"issueKey\": issue.key\n    ]\n}\n\nif(issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"No\")){\n    def baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/transaction/mail/send\"\n    URL url\n    url = new URL(baseURL)\n\n    log.debug \"baseURL: \" + baseURL\n    HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\tlog.debug \"ResponseCode:\" + connection.getResponseCode()\n    \n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"SENDMAIL\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n        eListErrors.add(json_object.message)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n}\n","scriptPath":null,"parameters":{}}</arg>
          <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService
import com.atlassian.jira.issue.link.IssueLink
import org.apache.log4j.Category
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

def requestMethod = "POST";
def relatesInIssueLink=false
def relatesOutIssueLink=false
def linkedTickets=new ArrayList()

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyAssigned'] ? properties['cf.automaticallyAssigned'].toString() : "OP_AUTOMATICALLY_ASSIGNED")[0]

/*OP-1038: verifica ticket collegati*/
List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesInIssueLink=true
        linkedTickets.add(issueLink.getSourceObject().toString())
        log.debug "Issue con relatesInIssueLink"
    }
}
List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesOutIssueLink=true
        linkedTickets.add(issueLink.getDestinationObject().toString())
        log.debug "Issue con relatesOutIssueLink"
    }
}

def body_req
if(relatesInIssueLink || relatesOutIssueLink){
    body_req = [
        "templateName": properties['tt.assignToSupplier'].toString(),
        "pec": false,
        "issueKey": issue.key,
        "linkedTickets": linkedTickets
    ]
}else{
    body_req = [
        "templateName": properties['tt.assignToSupplier'].toString(),
        "pec": false,
        "issueKey": issue.key
    ]
}

if(issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals("No")){
    def baseURL = "http://" + properties['api.env'].toString() + "/op/rest/jira/AA/transaction/mail/send"
    URL url
    url = new URL(baseURL)

    HttpURLConnection connection = (HttpURLConnection)url.openConnection();
    connection.setRequestMethod(requestMethod);
    connection.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
    connection.setRequestProperty("Accept", "*/*");
    connection.setDoOutput(true);
    connection.setDoInput(true);
    connection.outputStream
    connection.outputStream.withWriter("UTF-8") { new StreamingJsonBuilder(it, body_req) }
    log.debug connection.outputStream
    connection.connect();

    def output = new ArrayList()
    def eList = new ArrayList()
    def eListErrors = new ArrayList()
    def errorMsgs = new ArrayList()

    if (!connection.getResponseCode().toString().equals("200")){
        log.debug "url: " + url
        log.debug "ResponseCode:" + connection.getResponseCode()
        log.debug "ResponseMessage:" + connection.getResponseMessage()
        
        def outputMsg = ((HttpURLConnection)connection).errorStream.text
    	log.debug "((HttpURLConnection)connection).errorStream.text: " + outputMsg
        
        def jsonSlurper = new JsonSlurper()
    	def json_object = jsonSlurper.parseText(outputMsg)
        assert json_object instanceof Map  
        log.debug "message: " +  json_object.message

        eListErrors.add("E")
        eListErrors.add("SENDMAIL")
        errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
        //eListErrors.add(errorMsgs)
        eListErrors.add(json_object.message)
        eList.add(eListErrors)

        output.add(eList)
        throw new InvalidInputException('{"E":"' + output.toString() + '"}')
        //throw new InvalidInputException("E", output.toString())
    }
}
</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
          <arg name="FIELD_SCRIPT_FILE" />
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="žée" status="žée" step="2">
          <post-functions>
            <function type="class">
              <arg name="scopeSource-linkEnd" />
              <arg name="append.value" />
              <arg name="maxAllowed-integerValue">50</arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field.value">%%CURRENT_DATETIME%%</arg>
              <arg name="field.name">customfield_22639</arg>
              <arg name="scopeType">H</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd" />
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql" />
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql" />
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">×ýÙÇÕ×8msÑ§xóÖ»ß[á§xkÎ|</arg>
              <arg name="FIELD_NOTES">OP: New Installation - Check linkedTickets &amp; Fast-Transact them</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.link.IssueLink\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nCategory log = Category.getInstance(\"com.onresolve.jira.groovy.PostFunction\")\nlog.setLevel(org.apache.log4j.Level.WARN)\n\nlog.warn \"${issue.key} Transazione ASSIGN TO SUPPLIER - Post Function check linkedIssues\"\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyAssigned'] ? properties['cf.automaticallyAssigned'].toString() : \"OP_AUTOMATICALLY_ASSIGNED\")[0]\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\n\nIssue issue = issue\n//Per test da console\n//issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-276\")\n\n/*DEV*/\nASSIGN_TO_SUPPLIER = properties['wf.tr.assignToSupplier'] ? properties['wf.tr.assignToSupplier'] : 51\n\n/*PROD*/\n//CONFIRM_TO_CUSTOMER\n\ndef user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\ndef issueService = ComponentAccessor.getIssueService()\n\n/*Se eseguo la confirm to customer su un ticket con 1 o + ticket collegati, verifico e sposto in automatico gli eventuali ticket collegati*/\nlog.warn \"verifico e sposto in automatico gli eventuali ticket collegati\"\n\nif(issue.getIssueType().getName() == properties['it.newInstallation'].toString() &amp;&amp; issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"No\")){\n    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            log.warn \"Issue con relatesInIssueLink\"\n            /*Eseguire transazione di stato della sourceIssue*/\n            def linkedIssue = issueLink.getSourceObject()\n            def linkedIssueStatus = linkedIssue.getStatus()\n            def transitionId\n            if(linkedIssueStatus.name == properties['wf.open'].toString()){\n                transitionId=ASSIGN_TO_SUPPLIER\n            }\n            if(transitionId==ASSIGN_TO_SUPPLIER){\n                // Prepare our input for the transition\n                def issueInputParameters = issueService.newIssueInputParameters()\n                issueInputParameters.with {\n                    setSkipScreenCheck(true)\n                }\n                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)\n                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), \"Yes\") \n                //log.warn \"issueInputParameters: \" + issueInputParameters\n                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n                def mi = (MutableIssue) linkedIssue\n\n                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)\n                log.warn \"fieldConfig: \" + fieldConfig\n                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())\n\n                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n                issueIndexingService.reIndex(linkedIssue)\n                log.warn \"Updated customfield - issue linkata\"\n\n                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)\n                if (issueService.validateTransition(user, linkedIssue.id, transitionId.toInteger(), issueInputParameters).isValid()) {\n                    // Perform the transition\n                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId.toInteger(), issueInputParameters))\n                    if (! issueResult.isValid()) {\n                        log.warn(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n                    }else{\n                        log.warn(\"Transazione fatta 79 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}\")\n                    }\n                } else {\n                    log.warn(\"Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}\")\n                }\n            }\n        }\n    }\n\n    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            log.warn \"Issue con relatesOutIssueLink\"\n            /*Eseguire transazione di stato della destinationIssue*/\n            def linkedIssue = issueLink.getDestinationObject()\n            def linkedIssueStatus = linkedIssue.getStatus()\n            def transitionId\n            log.warn \"linkedIssue: \" + linkedIssue\n            log.warn \"linkedIssueStatus.name: \" + linkedIssueStatus.name\n            if(linkedIssueStatus.name == properties['wf.open'].toString()){\n                transitionId=ASSIGN_TO_SUPPLIER\n            }\n\n            if(transitionId==ASSIGN_TO_SUPPLIER){\n                // Prepare our input for the transition\n                def issueInputParameters = issueService.newIssueInputParameters()\n                issueInputParameters.with {\n                    setSkipScreenCheck(true)\n                }\n                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)\n                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), \"Yes\") \n\n                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n                def mi = (MutableIssue) linkedIssue\n\n                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)\n                log.warn \"fieldConfig: \" + fieldConfig\n                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())\n\n                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n                issueIndexingService.reIndex(linkedIssue)\n                log.warn \"Updated customfield - issue linkata\"\n\n                if (issueService.validateTransition(user, linkedIssue.id, transitionId.toInteger(), issueInputParameters).isValid()) {\n                    // Perform the transition\n                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId.toInteger(), issueInputParameters))\n                    if (! issueResult.isValid()) {\n                        log.warn(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n                    }else{\n                        log.warn(\"Transazione fatta 122 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}\")\n                    }\n                } else {\n                    log.warn(\"Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}\")\n                }\n            }\n\n        }\n    }\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService
import org.apache.log4j.Category
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.link.IssueLink
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.WARN)

log.warn "${issue.key} Transazione ASSIGN TO SUPPLIER - Post Function check linkedIssues"

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyAssigned'] ? properties['cf.automaticallyAssigned'].toString() : "OP_AUTOMATICALLY_ASSIGNED")[0]
IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)

Issue issue = issue
//Per test da console
//issue = issueManager.getIssueByKeyIgnoreCase("OPUT-276")

/*DEV*/
ASSIGN_TO_SUPPLIER = properties['wf.tr.assignToSupplier'] ? properties['wf.tr.assignToSupplier'] : 51

/*PROD*/
//CONFIRM_TO_CUSTOMER

def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
def issueService = ComponentAccessor.getIssueService()

/*Se eseguo la confirm to customer su un ticket con 1 o + ticket collegati, verifico e sposto in automatico gli eventuali ticket collegati*/
log.warn "verifico e sposto in automatico gli eventuali ticket collegati"

if(issue.getIssueType().getName() == properties['it.newInstallation'].toString() &amp;&amp; issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals("No")){
    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            log.warn "Issue con relatesInIssueLink"
            /*Eseguire transazione di stato della sourceIssue*/
            def linkedIssue = issueLink.getSourceObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            def transitionId
            if(linkedIssueStatus.name == properties['wf.open'].toString()){
                transitionId=ASSIGN_TO_SUPPLIER
            }
            if(transitionId==ASSIGN_TO_SUPPLIER){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(true)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                //log.warn "issueInputParameters: " + issueInputParameters
                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"

                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 79 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }
        }
    }

    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            log.warn "Issue con relatesOutIssueLink"
            /*Eseguire transazione di stato della destinationIssue*/
            def linkedIssue = issueLink.getDestinationObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            def transitionId
            log.warn "linkedIssue: " + linkedIssue
            log.warn "linkedIssueStatus.name: " + linkedIssueStatus.name
            if(linkedIssueStatus.name == properties['wf.open'].toString()){
                transitionId=ASSIGN_TO_SUPPLIER
            }

            if(transitionId==ASSIGN_TO_SUPPLIER){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(true)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 

                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"

                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 122 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }

        }
    }
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="371" name="Recupera Tkt">
      <meta name="opsbar-sequence">10</meta>
      <meta name="jira.description" />
      <meta name="jira.fieldscreen.id" />
      <results>
        <unconditional-result old-status="žée" status="žée" step="1">
          <post-functions>
            <function type="class">
              <arg name="field.name">resolution</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
              <arg name="field.value" />
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="741" name="Annulla Richiesta Preventivo">
      <meta name="jira.description" />
      <meta name="jira.fieldscreen.id" />
      <results>
        <unconditional-result old-status="žée" status="žée" step="1">
          <post-functions>
            <function type="class">
              <arg name="scopeSource-linkEnd" />
              <arg name="maxAllowed-integerValue">50</arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field">customfield_22656</arg>
              <arg name="scopeType">H</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
              <arg name="scopeDestination-linkEnd" />
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql" />
              <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
              <arg name="field2">customfield_22681</arg>
              <arg name="scopeSource-jql" />
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="141" name="Chiudi Rapporto di Intervento" view="fieldscreen">
      <meta name="opsbar-sequence">10</meta>
      <meta name="jira.description" />
      <meta name="jira.fieldscreen.id">19910</meta>
      <restrict-to>
        <conditions type="OR">
          <condition type="class">
            <arg name="FIELD_FUNCTION_ID">e11c2942-0754-423c-8e92-d78a6375f221</arg>
            <arg name="FIELD_NOTES">NOT PM Ticket</arg>
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
            <arg name="v+nWù">¶»ž</arg>
            <arg name="FIELD_CONDITION">{"script":"issue.issueType.name != 'Planned Maintenance Ticket'","scriptPath":null}</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
          </condition>
          <condition type="class">
            <arg name="RESOLUTION_FIELD_NAME">6</arg>
            <arg name="FIELD_FUNCTION_ID">fc8b9dd9-f011-4c94-85b2-3dad9c428711</arg>
            <arg name="FIELD_NOTES">For PM Tickets - all sub-tasks must be resolved</arg>
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.AllSubtasksResolvedCondition</arg>
            <arg name="v+nWù">¶»ž</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
          </condition>
        </conditions>
      </restrict-to>
      <validators>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">}­ûã®Ú÷6ÏváÇuë×ym®}õ×ï_vç9</arg>
          <arg name="FIELD_NOTES">OP: Check Required Fields - solo errors, no warnings</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport com.atlassian.jira.issue.IssueManager\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport java.text.SimpleDateFormat;\nimport com.atlassian.jira.issue.index.IssueIndexingService\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-4159\")\n\nlog.debug \"Transazione Complete - Primo validator\"\nlog.debug \"Transazione Complete - Primo validator - Issue: \" + issue\n\ndef errors = false\ndef warnings = false\n\ndef automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]\n\ndef asset =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.asset'].toString())[0]\ndef assetStatusPre =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.assetStatusPre'].toString())[0]\ndef assetStatusPost =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.assetStatusPost'].toString())[0]\ndef risk =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.riskOnsite'].toString())[0]\ndef riskDescription =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.riskDescription'].toString())[0]\ndef custSignature =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.customerSignature'].toString())[0]\ndef custRef =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.custContactOnsite'].toString())[0]\n//def techSignature =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.technicianSignature'].toString())[0]\ndef kms =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.kms'].toString())[0]\ndef travelH =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.travelHours'].toString())[0]\ndef executionDate =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.executionDate'].toString())[0]\ndef techsOnsite =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.techniciansOnsite'].toString())[0]\n\ndef repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.replacedMaterials'].toString())[0]\ndef reqMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.requiredMaterials'].toString())[0]\n\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]\n\ndef lumpSumPrice =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumPrice'].toString())[0]\n\ndef errorMandatoryFields = new ArrayList()\ndef errorJobStartedCompletedFields = new ArrayList()\ndef errorJobStartedCompletedvsExecution = new ArrayList()\ndef errorJobStartedDatevsCompleted = new ArrayList()\ndef errorGlobalExecutionDate = false\ndef errorTechSignatureFields = new ArrayList()\ndef warningEmptyFields = new ArrayList()\ndef errorSubTaskResolution = false\ndef errorTechsMissing = false\n\ndef executionDateDate\n\n/*OP-1038: Eseguo la verifica dei campi obbligatori solo se il ticket su cui sto eseguendo la transazione non \u00e8 stato chiuso in automatico dal sistema*/\nlog.debug \"issue.getCustomFieldValue(automaticallyClosed): \" + issue.getCustomFieldValue(automaticallyClosed)\nlog.debug \"check: \" + !issue.getCustomFieldValue(automaticallyClosed).toString().equals(\"Yes\")\nif(issue.getCustomFieldValue(automaticallyClosed)==null || !issue.getCustomFieldValue(automaticallyClosed).toString().equals(\"Yes\")){\n    //OPAA_LUMP_SUM_PRICE\n    if(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance']) &amp;&amp; (issue.getCustomFieldValue(lumpSumPrice)==null || (String)issue.getCustomFieldValue(lumpSumPrice) == \"\" || issue.getCustomFieldValue(lumpSumPrice).toString().equals(\"\"))){\n        errors = true\n        errorMandatoryFields.add(properties['cf.lumpSumPrice'].toString())\n    }\n\n    //OPAA_REPLACED_MATERIALS\n    if(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance']) &amp;&amp; (issue.getCustomFieldValue(repMaterials)==null || (String)issue.getCustomFieldValue(repMaterials) == \"\" || issue.getCustomFieldValue(repMaterials).toString().equals(\"\"))){\n        log.debug \"warnings true\"\n        warnings = true\n        warningEmptyFields.add(properties['cf.replacedMaterials'].toString())\n    }\n    //OPAA_REQUIRED_MATERIALS\n    if(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance']) &amp;&amp; (issue.getCustomFieldValue(reqMaterials)==null || (String)issue.getCustomFieldValue(reqMaterials) == \"\" || issue.getCustomFieldValue(reqMaterials).toString().equals(\"\"))){\n        log.debug \"warnings true\"\n        warnings = true\n        warningEmptyFields.add(properties['cf.requiredMaterials'].toString())\n    }\n\n\n    //OPAA_ASSET\n    if(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance']) &amp;&amp; (issue.getCustomFieldValue(asset)==null || (String)issue.getCustomFieldValue(asset) == \"\" || issue.getCustomFieldValue(asset).toString().equals(\"\"))){\n        errors = true\n        errorMandatoryFields.add(properties['cf.asset'].toString())\n    }\n    //OPAA_ASSET_STATUS_PRE\n    if(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance']) &amp;&amp; (issue.getCustomFieldValue(assetStatusPre)==null || (String)issue.getCustomFieldValue(assetStatusPre) == \"\" || issue.getCustomFieldValue(assetStatusPre).toString().equals(\"\"))){\n        errors = true\n        errorMandatoryFields.add(properties['cf.assetStatusPre'].toString())\n    }\n    //OPAA_ASSET_STATUS_POST\n    if(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance']) &amp;&amp; (issue.getCustomFieldValue(assetStatusPost)==null || (String)issue.getCustomFieldValue(assetStatusPost) == \"\" || issue.getCustomFieldValue(assetStatusPost).toString().equals(\"\"))){\n        errors = true\n        errorMandatoryFields.add(properties['cf.assetStatusPost'].toString())\n    }\n    //OPAA_RISK_ONSITE\n    if(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance']) &amp;&amp; (issue.getCustomFieldValue(risk)==null || (String)issue.getCustomFieldValue(risk) == \"\" || issue.getCustomFieldValue(risk).toString().equals(\"\"))){\n        errors = true\n        errorMandatoryFields.add(properties['cf.riskOnsite'].toString())\n    }\n    //OPAA_RISK_DESCRIPTION\n    if(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance']) &amp;&amp; (issue.getCustomFieldValue(risk).toString().equals(\"Yes\") &amp;&amp; (issue.getCustomFieldValue(riskDescription)==null || (String)issue.getCustomFieldValue(riskDescription) == \"\" || issue.getCustomFieldValue(riskDescription).toString().equals(\"\")))){\n        errors = true\n        errorMandatoryFields.add(properties['cf.riskDescription'].toString())\n    }\n    //OPAA_CUSTOMER_SIGNATURE\n    if(issue.getCustomFieldValue(custSignature)==null || (String)issue.getCustomFieldValue(custSignature) == \"\" || issue.getCustomFieldValue(custSignature).toString().equals(\"\")){\n        errors = true\n        errorMandatoryFields.add(properties['cf.customerSignature'].toString())\n    }\n    //OPAA_CUSTOMER_CONTACT_ONSITE\n    if(issue.getCustomFieldValue(custRef)==null || (String)issue.getCustomFieldValue(custRef) == \"\" || issue.getCustomFieldValue(custRef).toString().equals(\"\")){\n        errors = true\n        errorMandatoryFields.add(properties['cf.custContactOnsite'].toString())\n    }\n    \n    //PM TICKET - all sub-tasks must be Completed\n    if(issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance'])){\n        def subTasks = issue.getSubTaskObjects()\n\n        if(subTasks){\n            subTasks.each { //Loop each subtask of parent issue\n                //If the subtask is \"Planned Maintenance Task\"\n                if (it.issueType.name == \"Planned Maintenance Task\") {\n                    if(!it.getResolution() || it.getResolution().name != \"Completed\"){ \n                        errors = true\n                        errorSubTaskResolution = true\n                    }\n                } \n            }\n        }\n    }\n    \n    //OPAA_TECHNICIAN_SIGNATURE\n    /*\n    if(issue.getCustomFieldValue(techSignature)==null || (String)issue.getCustomFieldValue(techSignature) == \"\" || issue.getCustomFieldValue(techSignature).toString().equals(\"\")){\n        errors = true\n        errorMandatoryFields.add(properties['cf.technicianSignature'].toString())\n    }\n    */\n    //15.12.2020 AF - tolta obbligatoriet\u00e0 sui campi OP_KMS e OP_TRAVEL_HOURS poich\u00e8 ora la richiesta utenti \u00e8 di implementare:\n    //Cinzia Salituro: dovrebbero essere obbligatori laddove da contratto il fornitore non ha il diritto fisso di chiamata\n    //OPAA_KMS\n    /*if(issue.getCustomFieldValue(kms)==null || (String)issue.getCustomFieldValue(kms) == \"\" || issue.getCustomFieldValue(kms).toString().equals(\"\")){\n        errors = true\n        errorMandatoryFields.add(properties['cf.kms'].toString())\n    }*/\n    //OPAA_TRAVEL_HOURS\n    /*if(issue.getCustomFieldValue(travelH)==null || (String)issue.getCustomFieldValue(travelH) == \"\" || issue.getCustomFieldValue(travelH).toString().equals(\"\")){\n        errors = true\n        errorMandatoryFields.add(properties['cf.travelHours'].toString())\n    }*/\n    //OPAA_EXECUTION_DATE\n    /*\n    if(issue.getCustomFieldValue(executionDate)==null || (String)issue.getCustomFieldValue(executionDate) == \"\" || issue.getCustomFieldValue(executionDate).toString().equals(\"\")){\n        errors = true\n        errorMandatoryFields.add(properties['cf.executionDate'].toString())\n    }else{\n\t\texecutionDateDate = issue.getCustomFieldValue(executionDate).format('dd/MM/yyyy')\n\t}\n    */\n    \n    //Job Started + Job Completed di ogni oggetto Tech_OnSite_Report associato al campo OPAA_TECHS_ONSITE\n    def globalExecDate\n    if(issue.getCustomFieldValue(techsOnsite)!=null &amp;&amp; (String)issue.getCustomFieldValue(techsOnsite) != \"\" &amp;&amp; !issue.getCustomFieldValue(techsOnsite).toString().equals(\"\")){\n        /*Ciclare tutti gli oggetti associati al campo*/\n        //insight classes &amp; components\n        Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n        Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n        def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n        def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n        def techsOnsiteField = issue.getCustomFieldValue(techsOnsite)\n\t\tlog.debug \"techsOnsiteField: \" + techsOnsiteField\n        for(technician in techsOnsiteField){\n            //extract insight key ang get object\n            def techOnsite=technician.toString()\n            def techOnsiteKey = techOnsite.substring(techOnsite.indexOf('(')+1,techOnsite.indexOf(')'))\n            def techOnsiteObject = objectFacade.loadObjectBean(techOnsiteKey)\n            //get \"Job Started\" for that Technician\n            def obTriage\n            def techJobStarted\n            def techJobCompleted\n            def techJobStartedDate, techJobCompletedDate\n            def techRef, tech, techRefKey, techRefObject, techRefName\n            if(objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnSite.jobStarted'].toString())){\n                obTriage = objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnSite.jobStarted'].toString()).createMutable()\n                techJobStarted = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n                techJobStartedDate = obTriage.getObjectAttributeValueBeans()[0].getValue().format('dd/MM/yyyy')\n            }\n            \n            log.debug \"techJobStarted: \" + techJobStartedDate\n            //get \"Job Completed\" for that Technician\n            if(objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnSite.jobCompleted'].toString())){\n                obTriage = objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnSite.jobCompleted'].toString()).createMutable()\n                techJobCompleted = obTriage.getObjectAttributeValueBeans().toString()\n                techJobCompletedDate = obTriage.getObjectAttributeValueBeans()[0].getValue().format('dd/MM/yyyy')\n            }\n            \n            log.debug \"techJobCompleted: \" + techJobCompleted\n            //get \"Technician_REF\" for that Technician\n            log.debug \"techOnsiteObject: \" + techOnsiteObject\n            \n            if(objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnsite.technicianRef'].toString())){\n                \n                obTriage = objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnsite.technicianRef'].toString()).createMutable()\n                techRef = obTriage.getObjectAttributeValueBeans().toString()\n                tech = techRef.toString()\n                log.debug \"tech: \" + tech\n                techRefKey = tech.substring(tech.indexOf('(')+1,tech.indexOf(')'))\n                log.debug \"techRefKey: \" + techRefKey\n                techRefObject = objectFacade.loadObjectBean(properties['ischema.aa'].toString() + \"-\" + techRefKey)\n                techRefName = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()\n            }\n            \n    \t\tlog.debug techRefName\n\n            if(!techJobStarted || !techJobCompleted){\n                errors = true\n                errorJobStartedCompletedFields.add(techRefName.substring(techRefName.indexOf('(')+1,techRefName.indexOf(')')))\n            }    \n            if(issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance']) &amp;&amp; techJobStartedDate != techJobCompletedDate){\n                errors = true\n                errorJobStartedDatevsCompleted.add(techRefName.substring(techRefName.indexOf('(')+1,techRefName.indexOf(')')))\n            }\n\t\t\tif(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance']) &amp;&amp; executionDateDate != null &amp;&amp; techJobStartedDate != executionDateDate){\n                errors = true\n                errorJobStartedCompletedvsExecution.add(techRefName.substring(techRefName.indexOf('(')+1,techRefName.indexOf(')')))\n            }\n            \n            if(globalExecDate==null &amp;&amp; techJobStartedDate == techJobCompletedDate){\n                globalExecDate = techJobStartedDate\n            }else{\n                if(globalExecDate!=null &amp;&amp; globalExecDate!=techJobStartedDate){\n                    errors=true\n                    errorGlobalExecutionDate = true\n                }\n            }\n         }    \n    }else{\n        if(issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance'])){\n            errors = true\n            errorTechsMissing = true\n        }\n    }\n\n    def techSignFound=false\n    //Firma di almeno un oggetto Tech_OnSite_Report associato al campo OPAA_TECHS_ONSITE\n    if(issue.getCustomFieldValue(techsOnsite)!=null &amp;&amp; (String)issue.getCustomFieldValue(techsOnsite) != \"\" &amp;&amp; !issue.getCustomFieldValue(techsOnsite).toString().equals(\"\")){\n        /*Ciclare tutti gli oggetti associati al campo*/\n        //insight classes &amp; components\n        Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n        Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n        def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n        def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n        def techsOnsiteField = issue.getCustomFieldValue(techsOnsite)\n\t\tlog.debug \"techsOnsiteField: \" + techsOnsiteField\n        for(technician in techsOnsiteField){\n            //extract insight key ang get object\n            def techOnsite=technician.toString()\n            def techOnsiteKey = techOnsite.substring(techOnsite.indexOf('(')+1,techOnsite.indexOf(')'))\n            def techOnsiteObject = objectFacade.loadObjectBean(techOnsiteKey)\n            //get \"Job Started\" for that Technician\n            def obTriage\n            def techSignature, techSignatureAttr\n            techSignatureAttr = properties['iobj.techOnSite.signature'] ? properties['iobj.techOnSite.signature'].toString() : \"TECHNICIAN_SIGNATURE\"\n            def techRef, tech, techRefKey, techRefObject, techRefName\n            if(objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), techSignatureAttr)){\n                obTriage = objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), techSignatureAttr).createMutable()\n                techSignature = obTriage.getObjectAttributeValueBeans().toString()\n            }\n            \n            log.debug \"techSignature: \" + techSignature \n\n            //get \"Technician_REF\" for that Technician\n            log.debug \"techOnsiteObject: \" + techOnsiteObject\n            \n            if(objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnsite.technicianRef'].toString())){\n                obTriage = objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnsite.technicianRef'].toString()).createMutable()\n                techRef = obTriage.getObjectAttributeValueBeans().toString()\n                tech = techRef.toString()\n                log.debug \"tech: \" + tech\n                techRefKey = tech.substring(tech.indexOf('(')+1,tech.indexOf(')'))\n                log.debug \"techRefKey: \" + techRefKey\n                techRefObject = objectFacade.loadObjectBean(properties['ischema.aa'].toString() + \"-\" + techRefKey)\n                techRefName = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()\n            }\n            \n    \t\tlog.debug techRefName\n\n            if(!techSignature &amp;&amp; !techSignFound){\n                errorTechSignatureFields.add(techRefName.substring(techRefName.indexOf('(')+1,techRefName.indexOf(')')))\n            }else{\n                if(techSignature){\n                    techSignFound = true\n                    errorTechSignatureFields.clear()\n                }\n            }    \n         }\n        if(!techSignFound){\n            errors = true\n        }\n    }\n\n    def output = new ArrayList()\n\n    if (!errors &amp;&amp; !warnings){\n        return true\n    }else{\n        if(!errors &amp;&amp; warnings){\n            //Se ci sono solo warnings verifico se l'utente ha gi\u00e0 dichiarato di voler proseguire comunque\n            // - transition field \"OPAA_CHECK_AND_CONFIRM\"=\"Yes\"\n            // - in caso contrario invio i warning a FE\n\n            //log.debug \"transitionCheck: \" + issue.getCustomFieldValue(transitionCheck)\n            //log.debug \"result: \" + issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")\n            if(issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")){\n                //log.debug \"return true\"\n                return true\n            }else{\n                def wList = new ArrayList()\n\n                if(warningEmptyFields.size() &gt; 0){\n                    def wListConfirmEmpty = new ArrayList()\n                    wListConfirmEmpty.add(\"W\")\n                    wListConfirmEmpty.add(\"CONFIRM_EMPTY_FIELDS\")\n                    wListConfirmEmpty.add(null)\n                    wListConfirmEmpty.add(warningEmptyFields)\n\n                    wList.add(wListConfirmEmpty)\n                }\n\n                output.add(wList)\n                log.debug \"throw exception: \" + output.toString()\n                throw new InvalidInputException('{\"W\":\"' + output.toString() + '\"}')\n                //throw new InvalidInputException(\"W\", output.toString())   \n            }\n\n        }\n        if(errors &amp;&amp; !warnings){\n            def eList = new ArrayList()\n\n            if(errorMandatoryFields.size() &gt; 0){\n                def eListMandatory = new ArrayList()\n                eListMandatory.add(\"E\")\n                eListMandatory.add(\"MANDATORY_FIELDS\")\n                eListMandatory.add(null)\n                eListMandatory.add(errorMandatoryFields)\n                eList.add(eListMandatory)\n            }\n\n            if(errorJobStartedCompletedFields.size() &gt; 0){\n                def eListStartEnd = new ArrayList()\n                eListStartEnd.add(\"E\")\n                eListStartEnd.add(\"MISSING_ONSITE_START_END_DETAILS\")\n                eListStartEnd.add(null)\n                eListStartEnd.add(errorJobStartedCompletedFields)\n                eList.add(eListStartEnd)\n            }\n            \n            if(errorJobStartedCompletedvsExecution.size() &gt; 0){\n                def eListStartEndExec = new ArrayList()\n                eListStartEndExec.add(\"E\")\n                eListStartEndExec.add(\"EXECUTION_DATE_VS_TECH_START_COMPLETED\")\n                eListStartEndExec.add(null)\n                eListStartEndExec.add(errorJobStartedCompletedvsExecution)\n                eList.add(eListStartEndExec)\n            }\n            \n            if(errorTechSignatureFields.size() &gt; 0){\n                def eListTechSign = new ArrayList()\n                eListTechSign.add(\"E\")\n                eListTechSign.add(\"MISSING_TECH_SIGNATURE\")\n                eListTechSign.add(null)\n                eListTechSign.add(errorTechSignatureFields)\n                eList.add(eListTechSign)\n            }\n            \n            if(errorSubTaskResolution){\n                def eListSubTaskCompleted = new ArrayList()\n                eListSubTaskCompleted.add(\"E\")\n                eListSubTaskCompleted.add(\"SUBTASK_NOT_COMPLETED\")\n                eListSubTaskCompleted.add(null)\n                eList.add(eListSubTaskCompleted)\n            }\n            \n            if(errorTechsMissing){\n                def eListSubTaskCompleted = new ArrayList()\n                eListSubTaskCompleted.add(\"E\")\n                eListSubTaskCompleted.add(\"MISSING_TECHNICIANS\")\n                eListSubTaskCompleted.add(null)\n                eList.add(eListSubTaskCompleted)\n            }\n            \n            if(errorJobStartedDatevsCompleted.size() &gt; 0){\n                def eListStartEnd = new ArrayList()\n                eListStartEnd.add(\"E\")\n                eListStartEnd.add(\"TECH_START_COMPLETED_DATE\")\n                eListStartEnd.add(null)\n                eListStartEnd.add(errorJobStartedDatevsCompleted)\n                eList.add(eListStartEnd)\n            }\n            \n            if(errorGlobalExecutionDate){\n                def eListExecDate = new ArrayList()\n                eListExecDate.add(\"E\")\n                eListExecDate.add(\"EXECUTION_DATE_ALL_TECHS\")\n                eListExecDate.add(null)\n                eList.add(eListExecDate)\n            }\n\n            output.add(eList)\n            log.debug \"throw exception: \" + output.toString()\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n            //throw new InvalidInputException(\"E\", output.toString())   \n        }\n        if(errors &amp;&amp; warnings){\n            def eList = new ArrayList()\n            def wList = new ArrayList()\n            if(errorMandatoryFields.size() &gt; 0){\n                def eListMandatory = new ArrayList()\n                eListMandatory.add(\"E\")\n                eListMandatory.add(\"MANDATORY_FIELDS\")\n                eListMandatory.add(null)\n                eListMandatory.add(errorMandatoryFields)\n                eList.add(eListMandatory)\n            }\n\n            if(errorJobStartedCompletedFields.size() &gt; 0){\n                def eListStartEnd = new ArrayList()\n                eListStartEnd.add(\"E\")\n                eListStartEnd.add(\"MISSING_ONSITE_START_END_DETAILS\")\n                eListStartEnd.add(null)\n                eListStartEnd.add(errorJobStartedCompletedFields)\n                eList.add(eListStartEnd)\n            }\n            \n            if(errorJobStartedCompletedvsExecution.size() &gt; 0){\n                def eListStartEndExec = new ArrayList()\n                eListStartEndExec.add(\"E\")\n                eListStartEndExec.add(\"EXECUTION_DATE_VS_TECH_START_COMPLETED\")\n                eListStartEndExec.add(null)\n                eListStartEndExec.add(errorJobStartedCompletedvsExecution)\n                eList.add(eListStartEndExec)\n            }\n\n            \n            if(errorTechSignatureFields.size() &gt; 0){\n                def eListTechSign = new ArrayList()\n                eListTechSign.add(\"E\")\n                eListTechSign.add(\"MISSING_TECH_SIGNATURE\")\n                eListTechSign.add(null)\n                eListTechSign.add(errorTechSignatureFields)\n                eList.add(eListTechSign)\n            }\n            \n            if(errorSubTaskResolution){\n                def eListSubTaskCompleted = new ArrayList()\n                eListSubTaskCompleted.add(\"E\")\n                eListSubTaskCompleted.add(\"SUBTASK_NOT_COMPLETED\")\n                eListSubTaskCompleted.add(null)\n                eList.add(eListSubTaskCompleted)\n            }\n            \n            if(errorTechsMissing){\n                def eListSubTaskCompleted = new ArrayList()\n                eListSubTaskCompleted.add(\"E\")\n                eListSubTaskCompleted.add(\"MISSING_TECHNICIANS\")\n                eListSubTaskCompleted.add(null)\n                eList.add(eListSubTaskCompleted)\n            }\n            \n            if(errorJobStartedDatevsCompleted.size() &gt; 0){\n                def eListStartEnd = new ArrayList()\n                eListStartEnd.add(\"E\")\n                eListStartEnd.add(\"TECH_START_COMPLETED_DATE\")\n                eListStartEnd.add(null)\n                eListStartEnd.add(errorJobStartedDatevsCompleted)\n                eList.add(eListStartEnd)\n            }\n            \n            if(errorGlobalExecutionDate){\n                def eListExecDate = new ArrayList()\n                eListExecDate.add(\"E\")\n                eListExecDate.add(\"EXECUTION_DATE_ALL_TECHS\")\n                eListExecDate.add(null)\n                eList.add(eListExecDate)\n            }\n            \n            if(warningEmptyFields.size() &gt; 0){\n                def wListConfirmEmpty = new ArrayList()\n                wListConfirmEmpty.add(\"W\")\n                wListConfirmEmpty.add(\"CONFIRM_EMPTY_FIELDS\")\n                wListConfirmEmpty.add(null)\n                wListConfirmEmpty.add(warningEmptyFields)\n\n                wList.add(wListConfirmEmpty)\n            }\n\n            output.add(eList)\n            output.add(wList)\n            log.debug \"throw exception: \" + output.toString()\n            throw new InvalidInputException('{\"WE\":\"' + output.toString() + '\"}')\n            //throw new InvalidInputException(\"WE\", output.toString())  \n        }\n    }\n}\n","scriptPath":null,"parameters":{}}</arg>
          <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

Issue issue = issue

log.debug "Transazione Complete - Primo validator"
log.debug "Transazione Complete - Primo validator - Issue: " + issue

def errors = false
def warnings = false

def automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]

def asset =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.asset'].toString())[0]
def assetStatusPre =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.assetStatusPre'].toString())[0]
def assetStatusPost =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.assetStatusPost'].toString())[0]
def risk =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.riskOnsite'].toString())[0]
def riskDescription =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.riskDescription'].toString())[0]
def custSignature =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.customerSignature'].toString())[0]
def custRef =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.custContactOnsite'].toString())[0]
def techSignature =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.technicianSignature'].toString())[0]
def kms =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.kms'].toString())[0]
def travelH =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.travelHours'].toString())[0]
def executionDate =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.executionDate'].toString())[0]
def techsOnsite =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.techniciansOnsite'].toString())[0]

def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.replacedMaterials'].toString())[0]
def reqMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.requiredMaterials'].toString())[0]

def transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]

def lumpSumPrice =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumPrice'].toString())[0]

def errorMandatoryFields = new ArrayList()
def errorJobStartedCompletedFields = new ArrayList()
def warningEmptyFields = new ArrayList()

/*OP-1038: Eseguo la verifica dei campi obbligatori solo se il ticket su cui sto eseguendo la transazione non è stato chiuso in automatico dal sistema*/
log.debug "issue.getCustomFieldValue(automaticallyClosed): " + issue.getCustomFieldValue(automaticallyClosed)
log.debug "check: " + !issue.getCustomFieldValue(automaticallyClosed).toString().equals("Yes")
if(issue.getCustomFieldValue(automaticallyClosed)==null || !issue.getCustomFieldValue(automaticallyClosed).toString().equals("Yes")){
    //OPAA_LUMP_SUM_PRICE
    if(issue.getCustomFieldValue(lumpSumPrice)==null || (String)issue.getCustomFieldValue(lumpSumPrice) == "" || issue.getCustomFieldValue(lumpSumPrice).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.lumpSumPrice'].toString())
    }

    //OPAA_REPLACED_MATERIALS
    if(issue.getCustomFieldValue(repMaterials)==null || (String)issue.getCustomFieldValue(repMaterials) == "" || issue.getCustomFieldValue(repMaterials).toString().equals("")){
        log.debug "warnings true"
        warnings = true
        warningEmptyFields.add(properties['cf.replacedMaterials'].toString())
    }
    //OPAA_REQUIRED_MATERIALS
    if(issue.getCustomFieldValue(reqMaterials)==null || (String)issue.getCustomFieldValue(reqMaterials) == "" || issue.getCustomFieldValue(reqMaterials).toString().equals("")){
        log.debug "warnings true"
        warnings = true
        warningEmptyFields.add(properties['cf.requiredMaterials'].toString())
    }


    //OPAA_ASSET
    if(issue.getCustomFieldValue(asset)==null || (String)issue.getCustomFieldValue(asset) == "" || issue.getCustomFieldValue(asset).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.asset'].toString())
    }
    //OPAA_ASSET_STATUS_PRE
    if(issue.getCustomFieldValue(assetStatusPre)==null || (String)issue.getCustomFieldValue(assetStatusPre) == "" || issue.getCustomFieldValue(assetStatusPre).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.assetStatusPre'].toString())
    }
    //OPAA_ASSET_STATUS_POST
    if(issue.getCustomFieldValue(assetStatusPost)==null || (String)issue.getCustomFieldValue(assetStatusPost) == "" || issue.getCustomFieldValue(assetStatusPost).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.assetStatusPost'].toString())
    }
    //OPAA_RISK_ONSITE
    if(issue.getCustomFieldValue(risk)==null || (String)issue.getCustomFieldValue(risk) == "" || issue.getCustomFieldValue(risk).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.riskOnsite'].toString())
    }
    //OPAA_RISK_DESCRIPTION
    if(issue.getCustomFieldValue(risk).toString().equals("Yes") &amp;&amp; (issue.getCustomFieldValue(riskDescription)==null || (String)issue.getCustomFieldValue(riskDescription) == "" || issue.getCustomFieldValue(riskDescription).toString().equals(""))){
        errors = true
        errorMandatoryFields.add(properties['cf.riskDescription'].toString())
    }
    //OPAA_CUSTOMER_SIGNATURE
    if(issue.getCustomFieldValue(custSignature)==null || (String)issue.getCustomFieldValue(custSignature) == "" || issue.getCustomFieldValue(custSignature).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.customerSignature'].toString())
    }
    //OPAA_CUSTOMER_CONTACT_ONSITE
    if(issue.getCustomFieldValue(custRef)==null || (String)issue.getCustomFieldValue(custRef) == "" || issue.getCustomFieldValue(custRef).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.custContactOnsite'].toString())
    }
    //OPAA_TECHNICIAN_SIGNATURE
    if(issue.getCustomFieldValue(techSignature)==null || (String)issue.getCustomFieldValue(techSignature) == "" || issue.getCustomFieldValue(techSignature).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.technicianSignature'].toString())
    }
    //15.12.2020 AF - tolta obbligatorietà sui campi OP_KMS e OP_TRAVEL_HOURS poichè ora la richiesta utenti è di implementare:
    //Cinzia Salituro: dovrebbero essere obbligatori laddove da contratto il fornitore non ha il diritto fisso di chiamata
    //OPAA_KMS
    /*if(issue.getCustomFieldValue(kms)==null || (String)issue.getCustomFieldValue(kms) == "" || issue.getCustomFieldValue(kms).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.kms'].toString())
    }*/
    //OPAA_TRAVEL_HOURS
    /*if(issue.getCustomFieldValue(travelH)==null || (String)issue.getCustomFieldValue(travelH) == "" || issue.getCustomFieldValue(travelH).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.travelHours'].toString())
    }*/
    //OPAA_EXECUTION_DATE
    if(issue.getCustomFieldValue(executionDate)==null || (String)issue.getCustomFieldValue(executionDate) == "" || issue.getCustomFieldValue(executionDate).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.executionDate'].toString())
    }

    //Job Started + Job Completed di ogni oggetto Tech_OnSite_Report associato al campo OPAA_TECHS_ONSITE
    if(issue.getCustomFieldValue(techsOnsite)!=null &amp;&amp; (String)issue.getCustomFieldValue(techsOnsite) != "" &amp;&amp; !issue.getCustomFieldValue(techsOnsite).toString().equals("")){
        /*Ciclare tutti gli oggetti associati al campo*/
        //insight classes &amp; components
        Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
        Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
        def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
        def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

        def techsOnsiteField = issue.getCustomFieldValue(techsOnsite)
		log.debug "techsOnsiteField: " + techsOnsiteField
        for(technician in techsOnsiteField){
            //extract insight key ang get object
            def techOnsite=technician.toString()
            def techOnsiteKey = techOnsite.substring(techOnsite.indexOf('(')+1,techOnsite.indexOf(')'))
            def techOnsiteObject = objectFacade.loadObjectBean(techOnsiteKey)
            //get "Job Started" for that Technician
            def obTriage
            def techJobStarted
            def techJobCompleted
            def techRef, tech, techRefKey, techRefObject, techRefName
            if(objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnSite.jobStarted'].toString())){
                obTriage = objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnSite.jobStarted'].toString()).createMutable()
                techJobStarted = obTriage.getObjectAttributeValueBeans().toString()
            }
            
            log.debug techJobStarted 
            //get "Job Completed" for that Technician
            if(objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnSite.jobCompleted'].toString())){
                obTriage = objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnSite.jobCompleted'].toString()).createMutable()
                techJobCompleted = obTriage.getObjectAttributeValueBeans().toString()
            }
            
            log.debug techJobCompleted
            //get "Technician_REF" for that Technician
            log.debug "techOnsiteObject: " + techOnsiteObject
            
            if(objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnsite.technicianRef'].toString())){
                
                obTriage = objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnsite.technicianRef'].toString()).createMutable()
                techRef = obTriage.getObjectAttributeValueBeans().toString()
                tech = techRef.toString()
                log.debug "tech: " + tech
                techRefKey = tech.substring(tech.indexOf('(')+1,tech.indexOf(')'))
                log.debug "techRefKey: " + techRefKey
                techRefObject = objectFacade.loadObjectBean(properties['ischema.aa'].toString() + "-" + techRefKey)
                techRefName = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()
            }
            
    		log.debug techRefName

            if(!techJobStarted || !techJobCompleted){
                errors = true
                errorJobStartedCompletedFields.add(techRefName.substring(techRefName.indexOf('(')+1,techRefName.indexOf(')')))
            }    
         }    
    }

    def output = new ArrayList()

    if (!errors &amp;&amp; !warnings){
        return true
    }else{
        if(!errors &amp;&amp; warnings){
            //Se ci sono solo warnings verifico se l'utente ha già dichiarato di voler proseguire comunque
            // - transition field "OPAA_CHECK_AND_CONFIRM"="Yes"
            // - in caso contrario invio i warning a FE

            //log.debug "transitionCheck: " + issue.getCustomFieldValue(transitionCheck)
            //log.debug "result: " + issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")
            if(issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")){
                //log.debug "return true"
                return true
            }else{
                def wList = new ArrayList()

                if(warningEmptyFields.size() &gt; 0){
                    def wListConfirmEmpty = new ArrayList()
                    wListConfirmEmpty.add("W")
                    wListConfirmEmpty.add("CONFIRM_EMPTY_FIELDS")
                    wListConfirmEmpty.add(null)
                    wListConfirmEmpty.add(warningEmptyFields)

                    wList.add(wListConfirmEmpty)
                }

                output.add(wList)
                log.debug "throw exception: " + output.toString()
                throw new InvalidInputException('{"W":"' + output.toString() + '"}')
                //throw new InvalidInputException("W", output.toString())   
            }

        }
        if(errors &amp;&amp; !warnings){
            def eList = new ArrayList()

            if(errorMandatoryFields.size() &gt; 0){
                def eListMandatory = new ArrayList()
                eListMandatory.add("E")
                eListMandatory.add("MANDATORY_FIELDS")
                eListMandatory.add(null)
                eListMandatory.add(errorMandatoryFields)
                eList.add(eListMandatory)
            }

            if(errorJobStartedCompletedFields.size() &gt; 0){
                def eListStartEnd = new ArrayList()
                eListStartEnd.add("E")
                eListStartEnd.add("MISSING_ONSITE_START_END_DETAILS")
                eListStartEnd.add(null)
                eListStartEnd.add(errorJobStartedCompletedFields)
                eList.add(eListStartEnd)
            }

            output.add(eList)
            log.debug "throw exception: " + output.toString()
            throw new InvalidInputException('{"E":"' + output.toString() + '"}')
            //throw new InvalidInputException("E", output.toString())   
        }
        if(errors &amp;&amp; warnings){
            def eList = new ArrayList()
            def wList = new ArrayList()
            if(errorMandatoryFields.size() &gt; 0){
                def eListMandatory = new ArrayList()
                eListMandatory.add("E")
                eListMandatory.add("MANDATORY_FIELDS")
                eListMandatory.add(null)
                eListMandatory.add(errorMandatoryFields)
                eList.add(eListMandatory)
            }

            if(errorJobStartedCompletedFields.size() &gt; 0){
                def eListStartEnd = new ArrayList()
                eListStartEnd.add("E")
                eListStartEnd.add("MISSING_ONSITE_START_END_DETAILS")
                eListStartEnd.add(null)
                eListStartEnd.add(errorJobStartedCompletedFields)
                eList.add(eListStartEnd)
            }

            if(warningEmptyFields.size() &gt; 0){
                def wListConfirmEmpty = new ArrayList()
                wListConfirmEmpty.add("W")
                wListConfirmEmpty.add("CONFIRM_EMPTY_FIELDS")
                wListConfirmEmpty.add(null)
                wListConfirmEmpty.add(warningEmptyFields)

                wList.add(wListConfirmEmpty)
            }

            output.add(eList)
            output.add(wList)
            log.debug "throw exception: " + output.toString()
            throw new InvalidInputException('{"WE":"' + output.toString() + '"}')
            //throw new InvalidInputException("WE", output.toString())  
        }
    }
}
</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
          <arg name="FIELD_SCRIPT_FILE" />
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">υχ΄}®uχWxo¦½Υ¶»γΞwσGίρέυχZρχ»</arg>
          <arg name="FIELD_NOTES">OP: REST API: OP generazione Rapporto di intervento</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\nlog.debug \"OnSite Report per issue: \" + issue.key\n/* REST API per Generazione Allegato Rapporto di Intervento */\nrequestMethod = \"PUT\";\n/*Script Variables*/\n//Per test da console\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-14062\")\n\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\n\n/*Rimozione allegato rapporto di intervento appena creato*/\n/* Get Insight IQL Facade from plugin accessor */\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\n\n/* Get Insight Object Facade from plugin accessor */\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n/* Get Insight Object Type Facade from plugin accessor */\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\");\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\n\n/* Get Insight Object Attribute Facade from plugin accessor */\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\");\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\n\n/* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include \" around value */\ndef objects = iqlFacade.findObjectsByIQLAndSchema(DBO, \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".Name LIKE \\\"Rapporto di intervento\\\" AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"); // See the complete list of possible IQL on the Insight Query Language documentation page\n/* If this is a mandatory field you should be able to do this: */\nlog.debug \"IQL: \" + \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".Name LIKE \\\"Rapporto di intervento\\\" AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"\n\n/*!!Da rimuovere appena risolti i bug!!*/\nif((objects == null || objects.size==0) &amp;&amp; !issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance'])){\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/AA/ticket/\" + issue.key.toString() + \"/attachment/onsite\"\n    log.debug \"baseUrl: \" + baseURL\n\n    URL url\n    url = new URL(baseURL)\n    HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.connect();\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        eListErrors.add(\"E\")\n        eListErrors.add(\"GENERATE-ONSITEREPORT\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n\n}\n","scriptPath":null,"parameters":{}}</arg>
          <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import org.apache.log4j.Category
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def requestMethod
def baseURL
log.debug "OnSite Report per issue: " + issue.key
/* REST API per Generazione Allegato Rapporto di Intervento */
requestMethod = "PUT";

baseURL = "http://" + properties['api.env'].toString() + "/op/rest/automation/AA/ticket/" + issue.key.toString() + "/attachment/onsite"
log.debug "baseUrl: " + baseURL

URL url
url = new URL(baseURL)
HttpURLConnection connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.connect();
log.debug "ResponseCode:" + connection.getResponseCode()
log.debug "ResponseMessage:" + connection.getResponseMessage()

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()
    eListErrors.add("E")
    eListErrors.add("GENERATE-ONSITEREPORT")
    errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
    eListErrors.add(errorMsgs)
    eList.add(eListErrors)

    output.add(eList)
    throw new InvalidInputException('{"E":"' + output.toString() + '"}')
    //throw new InvalidInputException("E", output.toString())
}
</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="v+nWù">¶»ž</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
          <arg name="FIELD_SCRIPT_FILE" />
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">b734e2c5-1436-43e7-ba9d-53f2ba06c457</arg>
          <arg name="FIELD_NOTES">Create SN &amp; SO for old tickets + for Completed during Maintenance</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef SN =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_NOTIFICATION\")[0]\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\n\nif(issue.getCustomFieldValue(SN) == null &amp;&amp; issue.issueType.name != \"Planned Maintenance Ticket\"){\n    requestMethod = \"POST\";\n\n    def body_req = []\n    body_req = [\n        \"issueKey\": issue.key,\n        \"status\": \"INP\"\n    ] \n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n    log.debug \"baseURL SN: \" + baseURL\n    log.debug \"body_req SN: \" + body_req\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"201\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        \n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n        log.debug \"errors: \" +  json_object.errors.toString()\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-SAP-SN-UPDATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }else{\n        /** SERVICE ORDER CREATION **/\n        body_req = [\n            \"issueKey\": issue.key\n        ] \n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\n\n        log.debug \"baseURL SO: \" + baseURL\n        log.debug \"body_req SO: \" + body_req\n        url = new URL(baseURL)\n        connection = (HttpURLConnection)url.openConnection();\n        connection.setRequestMethod(requestMethod);\n        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n        connection.setRequestProperty(\"Accept\", \"*/*\");\n        connection.setDoOutput(true);\n        connection.setDoInput(true);\n        connection.outputStream\n        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n        log.debug connection.outputStream\n        connection.connect();\n\n        output = new ArrayList()\n        eList = new ArrayList()\n        eListErrors = new ArrayList()\n        errorMsgs = new ArrayList()\n\n        if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n            log.debug \"url: \" + url\n            log.debug \"ResponseCode:\" + connection.getResponseCode()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n            \n            def outputMsg = ((HttpURLConnection)connection).errorStream.text\n    \t\tlog.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n            \n            def jsonSlurper = new JsonSlurper()\n            def json_object = jsonSlurper.parseText(outputMsg)\n            assert json_object instanceof Map  \n            log.debug \"message: \" +  json_object.message\n            log.debug \"errors: \" +  json_object.errors.toString()\n            \n            eListErrors.add(\"E\")\n            eListErrors.add(\"OP-SAP-SO-CREATE\")\n            errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n            eListErrors.add(errorMsgs)\n            eList.add(eListErrors)\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        }\n    }\n}","scriptPath":null,"parameters":{}}</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">ß·6w¿8÷fçýá¿=×·yó~6w¹sm}mï|</arg>
          <arg name="FIELD_NOTES">OP: REST API: OP Email Notification: ONSITE_REPORT - only IF OPAA_AUTOMATICALLY_CLOSED!=Yes AND sendMail!=NO MAIL AND ci sono ticket collegati. ----&gt; DISABLED su transazione complete - viene fatto manualmente da SEND ONSITE REPORT</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.link.IssueLink\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]\ndef sendMailTo =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.sendMailTo'].toString())[0]\ndef sendMailToRec =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.sendMailToRecipients'].toString())[0]\ndef onsiteReportDate = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.wfOnsiteReport'].toString())[0]\n\ndef requestMethod\ndef baseURL\n\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\ndef relatesInIssueLink=false\ndef relatesOutIssueLink=false\ndef linkedTickets=new ArrayList()\ndef body_req\ndef sendmail=true\n\nif(issue.getCustomFieldValue(automaticallyClosed)==null || !issue.getCustomFieldValue(automaticallyClosed).toString().equals(\"Yes\")){\n\n    /*OP-1038: verifica ticket collegati*/\n    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            relatesInIssueLink=true\n            linkedTickets.add(issueLink.getSourceObject().toString())\n            log.debug \"Issue con relatesInIssueLink\"\n        }\n    }\n    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            relatesOutIssueLink=true\n            linkedTickets.add(issueLink.getDestinationObject().toString())\n            log.debug \"Issue con relatesOutIssueLink\"\n        }\n    }\n    \n    log.debug \"issue.getCustomFieldValue(sendMailTo).toString(): \" + issue.getCustomFieldValue(sendMailTo).toString()\n    if((relatesInIssueLink || relatesOutIssueLink) &amp;&amp; !issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.noEmail'].toString()) &amp;&amp; issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.currentReport'].toString())){\n        //OP-1038: inviare solo la mail con il rapporto di intervento del ticket corrente\n        body_req = [\n            \"templateName\": properties['tt.onSiteReport'].toString(),\n            \"pec\": false,\n            \"issueKey\": issue.key,\n            \"additionalRecipients\": issue.getCustomFieldValue(sendMailToRec).toString()\n        ]\n        /*31.07.2020 AF: nella transazione complete NON inviare mail la mail per i ticket con collegati - il rapporto di intervento dei ticket \"figli\" viene generato dopo l'invio della mail sul \"padre\" quindi non verrebbe incluso nella mail*/\n        /*L'invio della mail verr\u00e0 fatto successivamente rispetto alla chiusura con \"Send OnSite Report\"*/\n        sendmail=false\n    }else if((relatesInIssueLink || relatesOutIssueLink) &amp;&amp; !issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.noEmail'].toString()) &amp;&amp; issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.currentReport'].toString())){\n        //OP-1038: inviare la mail con tutti i rapporti di intervento dei ticket collegati\n        body_req = [\n            \"templateName\": properties['tt.onSiteReport'].toString(),\n            \"pec\": false,\n            \"issueKey\": issue.key,\n            \"linkedTickets\": linkedTickets,\n            \"additionalRecipients\": issue.getCustomFieldValue(sendMailToRec).toString()\n        ]\n        /*31.07.2020 AF: nella transazione complete NON inviare mail la mail per i ticket con collegati - il rapporto di intervento dei ticket \"figli\" viene generato dopo l'invio della mail sul \"padre\" quindi non verrebbe incluso nella mail*/\n        /*L'invio della mail verr\u00e0 fatto successivamente rispetto alla chiusura con \"Send OnSite Report\"*/\n        sendmail=false\n    }else if(!relatesInIssueLink &amp;&amp; !relatesOutIssueLink){\n        /*AF 20200729 - su FAAC Service la notifica con il rapporto di intervento viene inviata solo su esplicita decisione dell'utente - che spinger\u00e0 SEND ONSITE REPORT dopo aver chiuso il ticket. Quindi se non ci sono ticket collegati settiamo sendmail=false*/\n        sendmail=false\n        body_req = [\n            \"templateName\": properties['tt.onSiteReport'].toString(),\n            \"pec\": false,\n            \"issueKey\": issue.key,\n            \"additionalRecipients\": issue.getCustomFieldValue(sendMailToRec).toString()\n        ]\n    }else{\n        //OP-1038: non inviare la mail\n        sendmail=false\n    }\n    \n    log.debug \"sendmail: \" + sendmail\n    if(sendmail){\n        /* REST API per Invio Notifica Email ONSITE_REPORT */\n        requestMethod = \"POST\";\n\n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/transaction/mail/send\"\n        URL url = new URL(baseURL)\n        HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n        connection.setRequestMethod(requestMethod);\n        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n        connection.setRequestProperty(\"Accept\", \"*/*\");\n        connection.setDoOutput(true);\n        connection.setDoInput(true);\n        connection.outputStream\n        log.debug \"body_req: \" + body_req\n        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n        log.debug connection.outputStream\n        connection.connect();\n        \n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        //log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n        def output = new ArrayList()\n        def eList = new ArrayList()\n        def eListErrors = new ArrayList()\n        def errorMsgs = new ArrayList()\n\n        if (!connection.getResponseCode().toString().equals(\"200\")){\n            log.debug \"url: \" + url\n            log.debug \"ResponseCode:\" + connection.getResponseCode()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n            \n            /* Get Insight IQL Facade from plugin accessor */\n            Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \n            def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\n\n            /* Get Insight Object Facade from plugin accessor */\n            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");\n            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n            /* Get Insight Object Type Facade from plugin accessor */\n            Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\");\n            def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\n\n            /* Get Insight Object Attribute Facade from plugin accessor */\n            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n\n            Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\");\n            def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\n\n            /* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include \" around value */\n            /*ROLLBACK*/\n            /*Rimozione allegato rapporto di intervento appena creato*/\n            def objects = iqlFacade.findObjectsByIQLAndSchema(DBO, \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".\\\"Name\\\" = \\\"\" + properties['iobj.attachmentCategory.objs.rappIntFAAC'].toString() + \"\\\" AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"); // See the complete list of possible IQL on the Insight Query Language documentation page\n            /* If this is a mandatory field you should be able to do this: */\n            //log.info(\"Insight object: \" + objects[0]);\n\n            if(objects[0]){\n                /* UPDATE OJBECT DELETED VALUE */\n                def obTriage = objectFacade.loadObjectAttributeBean(objects[0].getId(), properties['iobj.attachmentCategory.deleted'].toString()).createMutable()  \n                def value = obTriage.getObjectAttributeValueBeans()\n\n                def valueBean = obTriage.createObjectAttributeValueBean()\n                valueBean.setValue(objectTypeAttributeFacade.loadObjectTypeAttributeBean(obTriage.getObjectTypeAttributeId()), true)\n                /*Clean actual value*/\n                value.clear()\n                value.add(valueBean);\n                obTriage.setObjectAttributeValueBeans(value)\n\n                //Update OJBECT attribute value\n                try {\n                    obTriage = objectFacade.storeObjectAttributeBean(obTriage);\n                } catch (Exception vie) {\n                    log.warn(\"1. Could not update object attribute due to validation exception:\" + vie.getMessage());\n                }\n            }\n\n            /*Rollback contabilizzazione intervento*/\n            /*Cancellare tutti gli oggetti OnSite_Rate_Report registrati nei campi OPAA_LUMP_SUM_RATES, OPAA_UNA_TANTUM_RATES, OPAA_TRAVEL_RATES, OPAA_LABOUR_RATES*/\n            /*Ciclare tutti gli oggetti associati al campo*/\n\n            /* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include \" around value */\n            objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = \" + properties['iobj.onSiteRateReport'].toString() + \" AND object HAVING connectedTickets(key=\" + issue.key.toString() + \") AND \\\"\" + properties['iobj.onSiteRateReport.deleted'].toString() + \"\\\" != true\"); // See the complete list of possible IQL on the Insight Query Language documentation page\n            /* If this is a mandatory field you should be able to do this: */\n            //log.info(\"Insight objects da cancellare: \" + objects);\n\n            for(obj in objects){\n                /* DELETE CONNECTED OBJECTS */\n                objectFacade.deleteObjectBean(obj.getId());  \n            }\n\n            /*Cancellare gli importi fornitore, cliente e i totali su tutti gli oggetti Component in OPAA_REPLACED_MATERIALS*/\n            def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.replacedMaterials'].toString())[0]\n            def repMatList = issue.getCustomFieldValue(repMaterials)\n\n            for(mat in repMatList){\n                //extract insight key and get object\n                def component=mat.toString()\n                def componentKey = component.substring(component.indexOf('(')+1,component.indexOf(')'))\n                def componentObject = objectFacade.loadObjectBean(componentKey)\n                //set \"APPLIED_TO\", \"ACCOUNTING_SUPPLIER_MATERIAL_REF\", \"ACCOUNTING_CUSTOMER_MATERIAL_REF\", \"TOTAL_AMOUNT_SUPPLIER\", \"TOTAL_AMOUNT_CUSTOMER\" to null for that component\n\n                //APPLIED_TO\n                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString())){\n                    def obTriageAppliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString()).createMutable()\n                    def valueAppliedTo = obTriageAppliedTo.getObjectAttributeValueBeans()\n                    log.warn \"valueAppliedTo: \" + valueAppliedTo\n                    if (valueAppliedTo.size() &gt; 0){\n                        valueAppliedTo.clear() \n\n                        try {\n                            obTriageAppliedTo = objectFacade.deleteObjectAttributeBean(obTriageAppliedTo.id);\n                        } catch (Exception vie){ \n                            log.error(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\n                        }\n                    }\n                }\n\n                //ACCOUNTING_SUPPLIER_MATERIAL_REF\n                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingSuppMaterial'].toString())){\n                    def obTriageMatS = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingSuppMaterial'].toString()).createMutable()\n                    def valueMatS = obTriageMatS.getObjectAttributeValueBeans()\n                    log.warn \"valueMatS: \" + valueMatS\n                    if (valueMatS.size() &gt; 0){\n                        valueMatS.clear() \n\n                        try {\n                            obTriageMatS = objectFacade.deleteObjectAttributeBean(obTriageMatS.id);\n                        } catch (Exception vie){ \n                            log.error(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\n                        }\n                    }\n                }\n\n                //ACCOUNTING_CUSTOMER_MATERIAL_REF\n                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingCustMaterial'].toString())){\n                    def obTriageMatC = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingCustMaterial'].toString()).createMutable()\n                    def valueMatC = obTriageMatC.getObjectAttributeValueBeans()\n                    log.warn \"valueMatC: \" + valueMatC\n                    if (valueMatC.size() &gt; 0){\n                        valueMatC.clear() \n\n                        try {\n                            obTriageMatC = objectFacade.deleteObjectAttributeBean(obTriageMatC.id);\n                        } catch (Exception vie){ \n                            log.error(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\n                        }\n                    }\n                }\n                \n                //TOTAL_AMOUNT_SUPPLIER\n                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString())){\n                    def obTriageTotS = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString()).createMutable()\n                    def valueTotS = obTriageTotS.getObjectAttributeValueBeans()\n                    log.warn \"valueTotS: \" + valueTotS\n                    if (valueTotS.size() &gt; 0){\n                        valueTotS.clear() \n\n                        try {\n                            obTriageTotS = objectFacade.deleteObjectAttributeBean(obTriageTotS.id);\n                        } catch (Exception vie){ \n                            log.error(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\n                        }\n                    }\n\n                }\n                \n                //TOTAL_AMOUNT_CUSTOMER\n                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString())){\n                    def obTriageTotC = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()).createMutable()\n                    def valueTotC = obTriageTotC.getObjectAttributeValueBeans()\n                    log.warn \"valueTotC: \" + valueTotC\n                    if (valueTotC.size() &gt; 0){\n                        valueTotC.clear() \n\n                        try {\n                            obTriageTotC = objectFacade.deleteObjectAttributeBean(obTriageTotC.id);\n                        } catch (Exception vie){ \n                            log.error(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\n                        }\n                    }\n                }\n            }    \n\n            def outputMsg = ((HttpURLConnection)connection).errorStream.text\n            log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n            def jsonSlurper = new JsonSlurper()\n            def json_object = jsonSlurper.parseText(outputMsg)\n            assert json_object instanceof Map  \n            log.debug \"message: \" +  json_object.message\n            \n            eListErrors.add(\"E\")\n            eListErrors.add(\"SENDMAIL\")\n            errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n            eListErrors.add(json_object.message)\n            eList.add(eListErrors)\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        }else{\n            /*L'email \u00e8 stata inviata correttamente, aggiorno il campo ONSITE_REPORT con la data corrente*/\n\n            // log.warn \"issue \"+issue.getKey()\n            def cfv = issue.getCustomFieldValue(onsiteReportDate)\n            if (!cfv) {\n              def t0  = new java.sql.Timestamp(System.currentTimeMillis())\n              log.warn \"StartTime =&gt; '\"+t0.toString()+\"'\"\n              def mv = new ModifiedValue(onsiteReportDate, t0)\n              def ch = new DefaultIssueChangeHolder()\n              onsiteReportDate.updateValue(null, issue, mv, ch) \n            } else {\n              log.warn \"StartTime == '\"+cfv.toString()+\"'\"\n            }\n        }\n    }\n}","scriptPath":null,"parameters":{}}</arg>
          <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.event.type.EventDispatchOption
import org.apache.log4j.Category
import com.atlassian.jira.issue.link.IssueLink
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]
def sendMailTo =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.sendMailTo'].toString())[0]
def sendMailToRec =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.sendMailToRecipients'].toString())[0]
def onsiteReportDate = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.wfOnsiteReport'].toString())[0]

def requestMethod
def baseURL

int OPAA = properties['ischema.aa.id'].toString().toInteger()
int DBO = properties['ischema.dbo.id'].toString().toInteger()
def relatesInIssueLink=false
def relatesOutIssueLink=false
def linkedTickets=new ArrayList()
def body_req
def sendmail=true

if(issue.getCustomFieldValue(automaticallyClosed)==null || !issue.getCustomFieldValue(automaticallyClosed).toString().equals("Yes")){

    /*OP-1038: verifica ticket collegati*/
    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            relatesInIssueLink=true
            linkedTickets.add(issueLink.getSourceObject().toString())
            log.debug "Issue con relatesInIssueLink"
        }
    }
    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            relatesOutIssueLink=true
            linkedTickets.add(issueLink.getDestinationObject().toString())
            log.debug "Issue con relatesOutIssueLink"
        }
    }
    
    log.debug "issue.getCustomFieldValue(sendMailTo).toString(): " + issue.getCustomFieldValue(sendMailTo).toString()
    if((relatesInIssueLink || relatesOutIssueLink) &amp;&amp; !issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.noEmail'].toString()) &amp;&amp; issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.currentReport'].toString())){
        //OP-1038: inviare solo la mail con il rapporto di intervento del ticket corrente
        body_req = [
            "templateName": properties['tt.onSiteReport'].toString(),
            "pec": false,
            "issueKey": issue.key,
            "additionalRecipients": issue.getCustomFieldValue(sendMailToRec).toString()
        ]
        /*31.07.2020 AF: nella transazione complete NON inviare mail la mail per i ticket con collegati - il rapporto di intervento dei ticket "figli" viene generato dopo l'invio della mail sul "padre" quindi non verrebbe incluso nella mail*/
        /*L'invio della mail verrà fatto successivamente rispetto alla chiusura con "Send OnSite Report"*/
        sendmail=false
    }else if((relatesInIssueLink || relatesOutIssueLink) &amp;&amp; !issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.noEmail'].toString()) &amp;&amp; issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.currentReport'].toString())){
        //OP-1038: inviare la mail con tutti i rapporti di intervento dei ticket collegati
        body_req = [
            "templateName": properties['tt.onSiteReport'].toString(),
            "pec": false,
            "issueKey": issue.key,
            "linkedTickets": linkedTickets,
            "additionalRecipients": issue.getCustomFieldValue(sendMailToRec).toString()
        ]
        /*31.07.2020 AF: nella transazione complete NON inviare mail la mail per i ticket con collegati - il rapporto di intervento dei ticket "figli" viene generato dopo l'invio della mail sul "padre" quindi non verrebbe incluso nella mail*/
        /*L'invio della mail verrà fatto successivamente rispetto alla chiusura con "Send OnSite Report"*/
        sendmail=false
    }else if(!relatesInIssueLink &amp;&amp; !relatesOutIssueLink){
        /*AF 20200729 - su FAAC Service la notifica con il rapporto di intervento viene inviata solo su esplicita decisione dell'utente - che spingerà SEND ONSITE REPORT dopo aver chiuso il ticket. Quindi se non ci sono ticket collegati settiamo sendmail=false*/
        sendmail=false
        body_req = [
            "templateName": properties['tt.onSiteReport'].toString(),
            "pec": false,
            "issueKey": issue.key,
            "additionalRecipients": issue.getCustomFieldValue(sendMailToRec).toString()
        ]
    }else{
        //OP-1038: non inviare la mail
        sendmail=false
    }
    
    log.debug "sendmail: " + sendmail
    if(sendmail){
        /* REST API per Invio Notifica Email ONSITE_REPORT */
        requestMethod = "POST";

        baseURL = "http://" + properties['api.env'].toString() + "/op/rest/jira/AA/transaction/mail/send"
        URL url = new URL(baseURL)
        HttpURLConnection connection = (HttpURLConnection)url.openConnection();
        connection.setRequestMethod(requestMethod);
        connection.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
        connection.setRequestProperty("Accept", "*/*");
        connection.setDoOutput(true);
        connection.setDoInput(true);
        connection.outputStream
        log.debug "body_req: " + body_req
        connection.outputStream.withWriter("UTF-8") { new StreamingJsonBuilder(it, body_req) }
        log.debug connection.outputStream
        connection.connect();
        
        log.debug "url: " + url
        log.debug "ResponseCode:" + connection.getResponseCode()
        //log.debug "ResponseMessage:" + connection.getResponseMessage()

        def output = new ArrayList()
        def eList = new ArrayList()
        def eListErrors = new ArrayList()
        def errorMsgs = new ArrayList()

        if (!connection.getResponseCode().toString().equals("200")){
            log.debug "url: " + url
            log.debug "ResponseCode:" + connection.getResponseCode()
            log.debug "ResponseMessage:" + connection.getResponseMessage()

            
            /* Get Insight IQL Facade from plugin accessor */
            Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade"); 
            def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);

            /* Get Insight Object Facade from plugin accessor */
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            /* Get Insight Object Type Facade from plugin accessor */
            Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade");
            def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);

            /* Get Insight Object Attribute Facade from plugin accessor */
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);

            Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory");
            def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);

            /* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include " around value */
            /*ROLLBACK*/
            /*Rimozione allegato rapporto di intervento appena creato*/
            def objects = iqlFacade.findObjectsByIQLAndSchema(DBO, "\"" + properties['iobj.attachmentCategory.categoryRef'].toString() + "\".\"Name\" = \"" + properties['iobj.attachmentCategory.objs.rappIntFAAC'].toString() + "\" AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND object HAVING connectedTickets(key = " + issue.key.toString() + ")"); // See the complete list of possible IQL on the Insight Query Language documentation page
            /* If this is a mandatory field you should be able to do this: */
            //log.info("Insight object: " + objects[0]);

            if(objects[0]){
                /* UPDATE OJBECT DELETED VALUE */
                def obTriage = objectFacade.loadObjectAttributeBean(objects[0].getId(), properties['iobj.attachmentCategory.deleted'].toString()).createMutable()  
                def value = obTriage.getObjectAttributeValueBeans()

                def valueBean = obTriage.createObjectAttributeValueBean()
                valueBean.setValue(objectTypeAttributeFacade.loadObjectTypeAttributeBean(obTriage.getObjectTypeAttributeId()), true)
                /*Clean actual value*/
                value.clear()
                value.add(valueBean);
                obTriage.setObjectAttributeValueBeans(value)

                //Update OJBECT attribute value
                try {
                    obTriage = objectFacade.storeObjectAttributeBean(obTriage);
                } catch (Exception vie) {
                    log.warn("1. Could not update object attribute due to validation exception:" + vie.getMessage());
                }
            }

            /*Rollback contabilizzazione intervento*/
            /*Cancellare tutti gli oggetti OnSite_Rate_Report registrati nei campi OPAA_LUMP_SUM_RATES, OPAA_UNA_TANTUM_RATES, OPAA_TRAVEL_RATES, OPAA_LABOUR_RATES*/
            /*Ciclare tutti gli oggetti associati al campo*/

            /* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include " around value */
            objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, "objectType = " + properties['iobj.onSiteRateReport'].toString() + " AND object HAVING connectedTickets(key=" + issue.key.toString() + ") AND \"" + properties['iobj.onSiteRateReport.deleted'].toString() + "\" != true"); // See the complete list of possible IQL on the Insight Query Language documentation page
            /* If this is a mandatory field you should be able to do this: */
            //log.info("Insight objects da cancellare: " + objects);

            for(obj in objects){
                /* DELETE CONNECTED OBJECTS */
                objectFacade.deleteObjectBean(obj.getId());  
            }

            /*Cancellare gli importi fornitore, cliente e i totali su tutti gli oggetti Component in OPAA_REPLACED_MATERIALS*/
            def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.replacedMaterials'].toString())[0]
            def repMatList = issue.getCustomFieldValue(repMaterials)

            for(mat in repMatList){
                //extract insight key and get object
                def component=mat.toString()
                def componentKey = component.substring(component.indexOf('(')+1,component.indexOf(')'))
                def componentObject = objectFacade.loadObjectBean(componentKey)
                //set "APPLIED_TO", "ACCOUNTING_SUPPLIER_MATERIAL_REF", "ACCOUNTING_CUSTOMER_MATERIAL_REF", "TOTAL_AMOUNT_SUPPLIER", "TOTAL_AMOUNT_CUSTOMER" to null for that component

                //APPLIED_TO
                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString())){
                    def obTriageAppliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString()).createMutable()
                    def valueAppliedTo = obTriageAppliedTo.getObjectAttributeValueBeans()
                    log.warn "valueAppliedTo: " + valueAppliedTo
                    if (valueAppliedTo.size() &gt; 0){
                        valueAppliedTo.clear() 

                        try {
                            obTriageAppliedTo = objectFacade.deleteObjectAttributeBean(obTriageAppliedTo.id);
                        } catch (Exception vie){ 
                            log.error("Could not update object attribute due to validation exception:" + vie.getMessage());
                        }
                    }
                }

                //ACCOUNTING_SUPPLIER_MATERIAL_REF
                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingSuppMaterial'].toString())){
                    def obTriageMatS = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingSuppMaterial'].toString()).createMutable()
                    def valueMatS = obTriageMatS.getObjectAttributeValueBeans()
                    log.warn "valueMatS: " + valueMatS
                    if (valueMatS.size() &gt; 0){
                        valueMatS.clear() 

                        try {
                            obTriageMatS = objectFacade.deleteObjectAttributeBean(obTriageMatS.id);
                        } catch (Exception vie){ 
                            log.error("Could not update object attribute due to validation exception:" + vie.getMessage());
                        }
                    }
                }

                //ACCOUNTING_CUSTOMER_MATERIAL_REF
                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingCustMaterial'].toString())){
                    def obTriageMatC = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingCustMaterial'].toString()).createMutable()
                    def valueMatC = obTriageMatC.getObjectAttributeValueBeans()
                    log.warn "valueMatC: " + valueMatC
                    if (valueMatC.size() &gt; 0){
                        valueMatC.clear() 

                        try {
                            obTriageMatC = objectFacade.deleteObjectAttributeBean(obTriageMatC.id);
                        } catch (Exception vie){ 
                            log.error("Could not update object attribute due to validation exception:" + vie.getMessage());
                        }
                    }
                }
                
                //TOTAL_AMOUNT_SUPPLIER
                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString())){
                    def obTriageTotS = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString()).createMutable()
                    def valueTotS = obTriageTotS.getObjectAttributeValueBeans()
                    log.warn "valueTotS: " + valueTotS
                    if (valueTotS.size() &gt; 0){
                        valueTotS.clear() 

                        try {
                            obTriageTotS = objectFacade.deleteObjectAttributeBean(obTriageTotS.id);
                        } catch (Exception vie){ 
                            log.error("Could not update object attribute due to validation exception:" + vie.getMessage());
                        }
                    }

                }
                
                //TOTAL_AMOUNT_CUSTOMER
                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString())){
                    def obTriageTotC = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()).createMutable()
                    def valueTotC = obTriageTotC.getObjectAttributeValueBeans()
                    log.warn "valueTotC: " + valueTotC
                    if (valueTotC.size() &gt; 0){
                        valueTotC.clear() 

                        try {
                            obTriageTotC = objectFacade.deleteObjectAttributeBean(obTriageTotC.id);
                        } catch (Exception vie){ 
                            log.error("Could not update object attribute due to validation exception:" + vie.getMessage());
                        }
                    }
                }
            }    

            def outputMsg = ((HttpURLConnection)connection).errorStream.text
            log.debug "((HttpURLConnection)connection).errorStream.text: " + outputMsg

            def jsonSlurper = new JsonSlurper()
            def json_object = jsonSlurper.parseText(outputMsg)
            assert json_object instanceof Map  
            log.debug "message: " +  json_object.message
            
            eListErrors.add("E")
            eListErrors.add("SENDMAIL")
            errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
            eListErrors.add(json_object.message)
            eList.add(eListErrors)

            output.add(eList)
            throw new InvalidInputException('{"E":"' + output.toString() + '"}')
            //throw new InvalidInputException("E", output.toString())
        }else{
            /*L'email è stata inviata correttamente, aggiorno il campo ONSITE_REPORT con la data corrente*/

            // log.warn "issue "+issue.getKey()
            def cfv = issue.getCustomFieldValue(onsiteReportDate)
            if (!cfv) {
              def t0  = new java.sql.Timestamp(System.currentTimeMillis())
              log.warn "StartTime =&gt; '"+t0.toString()+"'"
              def mv = new ModifiedValue(onsiteReportDate, t0)
              def ch = new DefaultIssueChangeHolder()
              onsiteReportDate.updateValue(null, issue, mv, ch) 
            } else {
              log.warn "StartTime == '"+cfv.toString()+"'"
            }
        }
    }
}</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="v+nWù">¶»ž</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
          <arg name="FIELD_SCRIPT_FILE" />
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">uıyk¾^÷vøs]¸k½ã×ºõÖÜiï]ãÇ¶{Ç¸</arg>
          <arg name="FIELD_NOTES">OP: REST API: OP per consuntivazione ticket</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\ndef automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]\n\ndef requestMethod\ndef baseURL\n\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\nboolean unatantum=true\n\n/*!!Da rimuovere appena risolti i bug!!*/\n//if(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance'])){\n\n    /*OP-1038: la contabilizzazione dovr\u00e0 prevedere le unatantum rates solo se il ticket non \u00e8 stato chiuso in automatico*/\n    if(issue.getCustomFieldValue(automaticallyClosed)!=null &amp;&amp; issue.getCustomFieldValue(automaticallyClosed).toString().equals(\"Yes\")){\n        unatantum=false    \n    }\n    log.debug \"Consuntivazione ticket \" + issue.key + \" con unatantum: \" + unatantum\n\n    /* REST API per Contabilizzazione Intervento */\n    requestMethod = \"GET\";\n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/AA/ticket/issueKey/\" + issue.key.toString() + \"/close?um=\"+unatantum.toString()\n    log.debug \"baseUrl: \" + baseURL\n\n    /*Definire parametro di input unatantum=true|false in base al valore della variabile booleana unatantum*/\n    URL url = new URL(baseURL)\n    HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.connect();\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n    //IssueIndexingService issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\n    //issueIndexingService.reIndex(issueManager.getIssueObject(issue.key.toString()))\n\n    //def unaTantumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OPAA_UNATANTUM_RATES\")[0]\n    //log.warn \"unaTantumRates: \" + issue.getCustomFieldValue(unaTantumRates)\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        log.debug \"Response: \" + connection\n\n        /*ROLLBACK*/\n        /*Rimozione allegato rapporto di intervento appena creato*/\n        /* Get Insight IQL Facade from plugin accessor */\n        Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \n        def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\n\n        /* Get Insight Object Facade from plugin accessor */\n        Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");\n        def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n        /* Get Insight Object Type Facade from plugin accessor */\n        Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\");\n        def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\n\n        /* Get Insight Object Attribute Facade from plugin accessor */\n        Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n        def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n\n        Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\");\n        def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\n\n        /* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include \" around value */\n        def objects = iqlFacade.findObjectsByIQLAndSchema(DBO, \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".\\\"\" + properties['iobj.attachmentCategory.name'].toString() + \"\\\" = \\\"\" + properties['iobj.attachmentCategory.objs.rappIntFAAC'].toString() + \"\\\" AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"); // See the complete list of possible IQL on the Insight Query Language documentation page\n        /* If this is a mandatory field you should be able to do this: */\n        log.info(\"Insight object: \" + objects[0]);\n\n        if(objects[0]){\n            /* UPDATE OJBECT DELETED VALUE */\n            def obTriage = objectFacade.loadObjectAttributeBean(objects[0].getId(), properties['iobj.attachmentCategory.deleted'].toString()).createMutable()  \n            def value = obTriage.getObjectAttributeValueBeans()\n\n            def valueBean = obTriage.createObjectAttributeValueBean()\n            valueBean.setValue(objectTypeAttributeFacade.loadObjectTypeAttributeBean(obTriage.getObjectTypeAttributeId()), true)\n            /*Clean actual value*/\n            value.clear()\n            value.add(valueBean);\n            obTriage.setObjectAttributeValueBeans(value)\n\n            //Update OJBECT attribute value\n            try {\n                obTriage = objectFacade.storeObjectAttributeBean(obTriage);\n            } catch (Exception vie) {\n                log.warn(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\n            }\n        }\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-TKT-ACCOUNTING\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }else{\n        /*OP-1038: consuntivazione terminata correttamente - se \u00e8 stata eseguita con unatantum=true setto a No il campo OPAA_AUTOMATICALLY_CLOSED*/\n        if(unatantum){\n            def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n            def mi = (MutableIssue) issue\n\n            def fieldConfig = automaticallyClosed.getRelevantConfig(issue)\n            log.debug \"fieldConfig: \" + fieldConfig\n            def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"No\" }\n            automaticallyClosed.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())\n\n            ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n            issueIndexingService.reIndex(issue)\n            log.debug \"Updated customfield - issue principale ${issue.getCustomFieldValue(automaticallyClosed)}\"\n        }\n    }\n//}","scriptPath":null,"parameters":{}}</arg>
          <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService
import org.apache.log4j.Category
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();

IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)
def automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]

def requestMethod
def baseURL

int OPAA = properties['ischema.aa.id'].toString().toInteger()
int DBO = properties['ischema.dbo.id'].toString().toInteger()
boolean unatantum=true

/*OP-1038: la contabilizzazione dovrà prevedere le unatantum rates solo se il ticket non è stato chiuso in automatico*/
if(issue.getCustomFieldValue(automaticallyClosed)!=null &amp;&amp; issue.getCustomFieldValue(automaticallyClosed).toString().equals("Yes")){
	unatantum=false    
}
log.debug "Consuntivazione ticket " + issue.key + " con unatantum: " + unatantum

/* REST API per Contabilizzazione Intervento */
requestMethod = "GET";

baseURL = "http://" + properties['api.env'].toString() + "/op/rest/AA/ticket/issueKey/" + issue.key.toString() + "/close?um="+unatantum.toString()
log.debug "baseUrl: " + baseURL

/*Definire parametro di input unatantum=true|false in base al valore della variabile booleana unatantum*/
URL url = new URL(baseURL)
HttpURLConnection connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.connect();
log.debug "ResponseCode:" + connection.getResponseCode()
log.debug "ResponseMessage:" + connection.getResponseMessage()

//IssueIndexingService issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)
//issueIndexingService.reIndex(issueManager.getIssueObject(issue.key.toString()))

//def unaTantumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName("OPAA_UNATANTUM_RATES")[0]
//log.warn "unaTantumRates: " + issue.getCustomFieldValue(unaTantumRates)

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()
    log.debug "Response: " + connection

    /*ROLLBACK*/
    /*Rimozione allegato rapporto di intervento appena creato*/
    /* Get Insight IQL Facade from plugin accessor */
    Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade"); 
    def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);

    /* Get Insight Object Facade from plugin accessor */
    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");
    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

    /* Get Insight Object Type Facade from plugin accessor */
    Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade");
    def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);

    /* Get Insight Object Attribute Facade from plugin accessor */
    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);

    Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory");
    def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);

    /* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include " around value */
    def objects = iqlFacade.findObjectsByIQLAndSchema(DBO, "\"" + properties['iobj.attachmentCategory.categoryRef'].toString() + "\".\"" + properties['iobj.attachmentCategory.name'].toString() + "\" = \"" + properties['iobj.attachmentCategory.objs.rappIntFAAC'].toString() + "\" AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND object HAVING connectedTickets(key = " + issue.key.toString() + ")"); // See the complete list of possible IQL on the Insight Query Language documentation page
    /* If this is a mandatory field you should be able to do this: */
    log.info("Insight object: " + objects[0]);

    if(objects[0]){
        /* UPDATE OJBECT DELETED VALUE */
        def obTriage = objectFacade.loadObjectAttributeBean(objects[0].getId(), properties['iobj.attachmentCategory.deleted'].toString()).createMutable()  
        def value = obTriage.getObjectAttributeValueBeans()

        def valueBean = obTriage.createObjectAttributeValueBean()
        valueBean.setValue(objectTypeAttributeFacade.loadObjectTypeAttributeBean(obTriage.getObjectTypeAttributeId()), true)
        /*Clean actual value*/
        value.clear()
        value.add(valueBean);
        obTriage.setObjectAttributeValueBeans(value)

        //Update OJBECT attribute value
        try {
            obTriage = objectFacade.storeObjectAttributeBean(obTriage);
        } catch (Exception vie) {
            log.warn("Could not update object attribute due to validation exception:" + vie.getMessage());
        }
    }

    eListErrors.add("E")
    eListErrors.add("OP-TKT-ACCOUNTING")
    errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
    eListErrors.add(errorMsgs)
    eList.add(eListErrors)

    output.add(eList)
    throw new InvalidInputException('{"E":"' + output.toString() + '"}')
    //throw new InvalidInputException("E", output.toString())
}else{
    /*OP-1038: consuntivazione terminata correttamente - se è stata eseguita con unatantum=true setto a No il campo OPAA_AUTOMATICALLY_CLOSED*/
    if(unatantum){
        def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
        def mi = (MutableIssue) issue

        def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
        log.debug "fieldConfig: " + fieldConfig
        def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "No" }
        automaticallyClosed.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())

        ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
        issueIndexingService.reIndex(issue)
        log.debug "Updated customfield - issue principale ${issue.getCustomFieldValue(automaticallyClosed)}"
    }
}
</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
          <arg name="FIELD_SCRIPT_FILE" />
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="žée" status="žée" step="6">
          <post-functions>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">81aa9673-d0a1-4cdb-9909-19371f018388</arg>
              <arg name="FIELD_NOTES">PM Ticket - Update HARDWARE.MAINTENANCE_NEXT_TICKET_DATE + HARDWARE.MAINTENANCE_LAST_TICKET_DATE</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.component.ComponentAccessor\nimport com.atlassian.jira.issue.IssueManager\nimport com.atlassian.jira.issue.Issue\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.index.IssueIndexingService;\nimport org.ofbiz.core.entity.DelegatorInterface\nimport com.atlassian.jira.util.BuildUtilsInfo\nimport com.atlassian.jira.issue.issuetype.IssueType\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager()\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-23692\")\n\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\ndef asset = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_ASSET\")[0]\ndef executionDate = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_EXECUTION_DATE\")[0]\n\nlog.debug \"Data di esecuzione intervento: \" + issue.getCustomFieldValue(executionDate)\n\nif(issue.getIssueType().name == \"Planned Maintenance Ticket\"){\n    def subTasks = issue.getSubTaskObjects()\n    def itAsset \n    Date newDate\n\n    subTasks.each {\n        if (it.getIssueType().name == \"Planned Maintenance Task\" &amp;&amp; it.getResolution()){\n            log.debug \"asset: \" + it.getCustomFieldValue(asset)\n            itAsset = it.getCustomFieldValue(asset)[0].toString()\n            itAssetKey = itAsset.substring(itAsset.lastIndexOf('(')+1, itAsset.lastIndexOf(')'))\n            log.debug \"itAssetKey: \" + itAssetKey\n\n            def obTriage\n            def hwPMnumber\n            if(objectFacade.loadObjectAttributeBean(objectFacade.loadObjectBean(itAssetKey).getId(), \"PLANNED_MAINTENANCE_VISITS_NUM\")){\n                obTriage = objectFacade.loadObjectAttributeBean(objectFacade.loadObjectBean(itAssetKey).getId(), \"PLANNED_MAINTENANCE_VISITS_NUM\").createMutable()\n                hwPMnumber = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n                log.debug \"hwPMnumber: \" + hwPMnumber\n            }\n\n            //Check HARDWARE.PLANNED_MAINTENANCE_VISITS_NUM\n            if(hwPMnumber){\n                newDate = (issue.getCustomFieldValue(executionDate) + Math.round(365/hwPMnumber.toInteger()).toInteger())\n                log.debug \"new date: \" + (issue.getCustomFieldValue(executionDate) + Math.round(365/hwPMnumber.toInteger()).toInteger())\n            }else{\n                //Check HARDWARE.CUSTOMER_CONTRACT_REF.CONTRACT_TYPE\n                def contract, contractKey, contractObject, contractType, frequency, freqDays, pack, pmIncluded\n                if(objectFacade.loadObjectAttributeBean(objectFacade.loadObjectBean(itAssetKey).getId(), \"CUSTOMER_CONTRACT_REF\")){\n                    obTriage = objectFacade.loadObjectAttributeBean(objectFacade.loadObjectBean(itAssetKey).getId(), \"CUSTOMER_CONTRACT_REF\").createMutable()\n                    contract = obTriage.getObjectAttributeValueBeans()[0].getValue()\n                    log.debug \"contract: \" + contract\n                    obTriage = objectFacade.loadObjectAttributeBean(contract, \"CONTRACT_TYPE\").createMutable()\n                    contractType = obTriage.getObjectAttributeValueBeans()[0].getValue()\n                    log.debug \"contractType: \" + contractType\n\n                    if(contractType.equals(\"MAINTENANCE TICKET CONTRACT\")){\n                        obTriage = objectFacade.loadObjectAttributeBean(contract, \"PM_FREQUENCY_REF\").createMutable()\n                        frequency = obTriage.getObjectAttributeValueBeans()[0].getValue()\n                        log.debug \"frequency: \" + frequency\n                        obTriage = objectFacade.loadObjectAttributeBean(frequency, \"DAYS\").createMutable()\n                        freqDays = obTriage.getObjectAttributeValueBeans()[0].getValue()\n                        log.debug \"freqDays: \" + freqDays\n                        newDate = (issue.getCustomFieldValue(executionDate) + freqDays.toInteger())\n                        log.debug \"new date: \" + (issue.getCustomFieldValue(executionDate) + freqDays.toInteger())\n                    }else{\n                        if(contractType.equals(\"MAINTENANCE FEE CONTRACT\")){\n                            obTriage = objectFacade.loadObjectAttributeBean(contract, \"PACKAGE_REF\").createMutable()\n                            pack = obTriage.getObjectAttributeValueBeans()[0].getValue()\n                            log.debug \"pack: \" + pack\n                            obTriage = objectFacade.loadObjectAttributeBean(frequency, \"PM_INCLUDED\").createMutable()\n                            pmIncluded = obTriage.getObjectAttributeValueBeans()[0].getValue()\n                            log.debug \"pmIncluded: \" + pmIncluded\n                            newDate = (issue.getCustomFieldValue(executionDate) + pmIncluded.toInteger())\n                            log.debug \"new date: \" + (issue.getCustomFieldValue(executionDate) + pmIncluded.toInteger())\n                        }\n                    }\n                }\n            }\n\n            def assetObj = objectFacade.loadObjectBean(itAssetKey)      \n            log.debug \"newDate: \" + newDate\n            def obj = objectFacade.loadObjectBean(assetObj.getId());\n            /* Create a new unsaved object bean - MAINTENANCE NEXT TICKET DATE*/\n            def attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(3777); \n            def newAttrib = obj.createObjectAttributeBean(attribType);\n            def newAttribValue = newAttrib.createObjectAttributeValueBean();\n            def objectAttributeBeans = new ArrayList();\n\n            newAttribValue.setDateValue(newDate)\n            def attribValues = newAttrib.getObjectAttributeValueBeans();\n            attribValues.add(newAttribValue);\n            newAttrib.setObjectAttributeValueBeans(attribValues);\n            \n            /* Create a new unsaved object bean - MAINTENANCE LAST TICKET DATE */\n            attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(3776); \n            newAttrib = obj.createObjectAttributeBean(attribType);\n            newAttribValue = newAttrib.createObjectAttributeValueBean();\n            objectAttributeBeans = new ArrayList();\n\n            newAttribValue.setDateValue(issue.getCustomFieldValue(executionDate))\n            attribValues = newAttrib.getObjectAttributeValueBeans();\n            attribValues.add(newAttribValue);\n            newAttrib.setObjectAttributeValueBeans(attribValues);\n\n            try {\n                newAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\n            } catch (Exception vie) {\n                log.warn(\"Unable to save changes. Exiting.\");\n                log.warn(vie.getMessage());\n                return false;\n            }\n        }\n    }\n}\n","scriptPath":null}</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="FIELD_NOTES">OP: Check linkedTickets &amp; Fast-Transact them</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService
import org.apache.log4j.Category
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.link.IssueLink
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.WARN)

log.warn "${issue.key} Transazione Complete - Post Function check linkedIssues"

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]
IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)

Issue issue = issue
//Per test da console
//issue = issueManager.getIssueByKeyIgnoreCase("OPUT-276")

START_PROGRESS=properties['wf.tr.startProgress']
COMPLETE=properties['wf.tr.complete']

def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
def issueService = ComponentAccessor.getIssueService()

log.warn "issue.getCustomFieldValue(automaticallyClosed): " + issue.getCustomFieldValue(automaticallyClosed)

if(issue.getCustomFieldValue(automaticallyClosed)==null || issue.getCustomFieldValue(automaticallyClosed).toString().equals("No")){
    /*OP-1038: se ho eseguito la Complete sul ticket "padre" verifico e sposto in automatico gli eventuali ticket collegati*/
    
    log.warn "verifico e sposto in automatico gli eventuali ticket collegati"
    
    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            /*Eseguire transazione di stato con OPAA_AUTOMATICALLY_CLOSED=Yes della sourceIssue*/
            def linkedIssue = issueLink.getSourceObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            log.warn "Issue con relatesInIssueLink ${linkedIssue} con stato ${linkedIssueStatus}"
            def transitionId
            if(linkedIssueStatus.name == properties['wf.confirmedAndPlanned'].toString()){
                transitionId=START_PROGRESS
            }
            if(linkedIssueStatus.name == properties['wf.inProgress'].toString()){
                transitionId=COMPLETE
            }
            if(transitionId==START_PROGRESS){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(false)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                //log.warn "issueInputParameters: " + issueInputParameters
                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"
                
                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 96 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                        transitionId=COMPLETE
                        // Prepare our input for the transition
                        issueInputParameters = issueService.newIssueInputParameters()
                        issueInputParameters.with {
                            setSkipScreenCheck(false)
                        }
                        //fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                        //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                        //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                        //validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                        currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                        mi = (MutableIssue) linkedIssue

                        //fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)
                        //log.warn "fieldConfig: " + fieldConfig
                        //cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                        //automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())

                        //ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                        //issueIndexingService.reIndex(linkedIssue)
                        //log.warn "Updated customfield - issue linkata"
                        if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                            // Perform the transition
                            issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                            if (! issueResult.isValid()) {
                                log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                            }else{
                                log.warn("Transazione fatta 124 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                            }
                        } else {
                            log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                        }
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }else if (transitionId==COMPLETE){
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(false)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                
                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"
                
                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 161 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }
        }
    }
    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            log.warn "Issue con relatesOutIssueLink"
            /*Eseguire transazione di stato con OPAA_AUTOMATICALLY_CLOSED=Yes della destinationIssue*/
            def linkedIssue = issueLink.getDestinationObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            def transitionId
            log.warn "linkedIssue: " + linkedIssue
            log.warn "linkedIssueStatus.name: " + linkedIssueStatus.name
            if(linkedIssueStatus.name == "Confirmed and Planned"){
                transitionId=START_PROGRESS
            }
            if(linkedIssueStatus.name == properties['wf.inProgress'].toString()){
                transitionId=COMPLETE
            }
            log.warn "transitionId: " + transitionId
            if(transitionId==START_PROGRESS){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(false)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                
                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"
                
                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                log.warn "issueInputParameters: " + issueInputParameters
                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 218 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                        transitionId=COMPLETE
                        // Prepare our input for the transition
                        issueInputParameters = issueService.newIssueInputParameters()
                        issueInputParameters.with {
                            setSkipScreenCheck(false)
                        }
                        //fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                        //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                        //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                        
                        currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                        mi = (MutableIssue) linkedIssue

                        fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)
                        log.warn "fieldConfig: " + fieldConfig
                        cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                        automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())

                        ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                        issueIndexingService.reIndex(linkedIssue)
                        log.warn "Updated customfield - issue linkata"
                        
                        //validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                        if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                            // Perform the transition
                            issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                            if (! issueResult.isValid()) {
                                log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                            }else{
                                log.warn("Transazione fatta 248 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                            }
                        } else {
                            log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                        }
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }else{
                log.warn "issue da completare"
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(false)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                //log.warn "validateResult"
                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"
                
                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 285 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }
        }
    }

}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd" />
              <arg name="maxAllowed-integerValue">50</arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field">customfield_22693</arg>
              <arg name="scopeType">H</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
              <arg name="scopeDestination-linkEnd" />
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql" />
              <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
              <arg name="scopeSource-jql" />
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </common-actions>
  <steps>
    <step id="1" name=":—§">
      <meta name="jira.status.id">1</meta>
      <actions>
<common-action id="51" />
        <action id="11" name="Richiedi Preventivo">
          <meta name="opsbar-sequence">40</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">779b4faf-8820-4019-968f-077567668869</arg>
                <arg name="FIELD_NOTES">OP_ASSET should be not null</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"cfValues['OP_ASSET'] != null","scriptPath":null}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="8">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">Yes</arg>
                  <arg name="field.name">customfield_22681</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="field.type">8</arg>
                  <arg name="full.module.key">com.riadalabs.jira.plugins.insightinsight-post-function</arg>
                  <arg name="field.groovyScript">import com.atlassian.jira.component.ComponentAccessor;
import java.util.ArrayList;
import com.atlassian.jira.config.util.JiraHome
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.MutableIssue;
import com.atlassian.jira.event.type.EventDispatchOption;

Properties relativePath = new Properties()
File relativePathFile = new File('/var/atlassian/application-data/jira/insightPathToScript.properties')
relativePathFile.withInputStream {
	relativePath.load(it)
}
Properties properties = new Properties()
File propertiesFile = new File('/var/atlassian/application-data/jira/jira-software/scripts/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}

/* Get Insight Object Facade from plugin accessor */
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade"); 
def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);
 
/* Get Insight Object Type Facade from plugin accessor */
Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade"); 
def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);
 
/* Get Insight Object Attribute Facade from plugin accessor */
Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade"); 
def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);

/* Get Insight IQL Facade from plugin accessor */
Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade"); 
def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);

Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory"); 
def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);

def OPAA = properties['ischema.aa.id'].toString().toInteger()
def DO = properties['ischema.dbo.id'].toString().toInteger()
def quoteLabourRatesField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteLabourRates'].toString())[0];
def lumpSumOfferField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumOffer'].toString())[0];
def OnSiteRateObjects = new ArrayList();

def ONSITE_RATE_REPORT_OBJ_TYPE = properties['iobj.onSiteRateReport'].toString().toInteger()
def ONSITE_RATE_REPORT_ATTR_NAME = properties['iobj.onSiteRateReport.name.id'] ? properties['iobj.onSiteRateReport.name.id'].toString().toInteger() : 2766
def ONSITE_RATE_REPORT_ATTR_RATE_REF = properties['iobj.onSiteRateReport.rateRef.id'] ? properties['iobj.onSiteRateReport.rateRef.id'].toString().toInteger() : 4340
def ONSITE_RATE_REPORT_ATTR_APPLIED_TO = properties['iobj.onSiteRateReport.appliedTo.id'] ? properties['iobj.onSiteRateReport.appliedTo.id'].toString().toInteger() : 3194
def ONSITE_RATE_REPORT_ATTR_SAP = properties['iobj.onSiteRateReport.sap.id'] ? properties['iobj.onSiteRateReport.sap.id'].toString().toInteger() : 3196
def ONSITE_RATE_REPORT_ATTR_QUOTE_FROM_TKT = properties['iobj.onSiteRateReport.quoteFromTkt.id'] ? properties['iobj.onSiteRateReport.quoteFromTkt.id'].toString().toInteger() : 3203
def ONSITE_RATE_REPORT_ATTR_QUANTITY_CUSTOMER = properties['iobj.onSiteRateReport.qtyCustomer.id'] ? properties['iobj.onSiteRateReport.qtyCustomer.id'].toString().toInteger() : 3189

Issue issue = issue
log.info properties['cf.lumpSumOffer'].toString()
def lumpSum="false"

if(issue.getCustomFieldValue(lumpSumOfferField) != null &amp;&amp; issue.getCustomFieldValue(lumpSumOfferField).toString().equals("Yes")){
    lumpSum="true"
}else{
    lumpSum="false"
}

log.info "objectType=\"Rates\" AND \"QUOTE_ENABLED\" = true AND LUMPSUM_OFFER = " + lumpSum
def objects = iqlFacade.findObjectsByIQLAndSchema(DO, "objectType=\"Rates\" AND \"QUOTE_ENABLED\" = true AND LUMPSUM_OFFER = " + lumpSum); // See the complete list of possible IQL on the Insight Query Language documentation page
for (obj in objects){
	log.info obj.toString()
    obj = obj.toString()
    def rateName = obj.substring(0,obj.indexOf('(')-1)
    def rateKey = obj.substring(obj.indexOf('(')+1,obj.indexOf(')'))
    
    /*Set Name*/
    def objectTypeOnSiteRateReport = objectTypeFacade.loadObjectTypeBean(ONSITE_RATE_REPORT_OBJ_TYPE);
    def newObjectBean = objectTypeOnSiteRateReport.createMutableObjectBean();
    
    def objectAttributeBeans = new ArrayList();
    log.info ONSITE_RATE_REPORT_ATTR_NAME.toString()
    def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_RATE_REPORT_ATTR_NAME); 
    
    objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, nameObjectTypeAttributeBean, rateName));
    
    newObjectBean.setObjectAttributeBeans(objectAttributeBeans);
        
    /*Set APPLIED_TO*/
    def appliedToObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_RATE_REPORT_ATTR_APPLIED_TO); 
    
    objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, appliedToObjectTypeAttributeBean, "BOTH"));
    
    newObjectBean.setObjectAttributeBeans(objectAttributeBeans);
    
    /*Set SAP*/
    def sapObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_RATE_REPORT_ATTR_SAP); 
    
    objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, sapObjectTypeAttributeBean, "false"));
    
    newObjectBean.setObjectAttributeBeans(objectAttributeBeans);
    
    /*Set QUOTE_FROM_TKT*/
    def quoteObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_RATE_REPORT_ATTR_QUOTE_FROM_TKT); 
    
    objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, quoteObjectTypeAttributeBean, "true"));
    
    newObjectBean.setObjectAttributeBeans(objectAttributeBeans);
    
    /*Set QUANTITY_CUSTOMER*/
    def qtyCustomerObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_RATE_REPORT_ATTR_QUANTITY_CUSTOMER); 
    
    objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, qtyCustomerObjectTypeAttributeBean, "1"));
    
    newObjectBean.setObjectAttributeBeans(objectAttributeBeans);
    
    
    /* Store the object into Insight. The new ObjectBean will be updated with an unique ID */
    try {
        newObjectBean = objectFacade.storeObjectBean(newObjectBean);
        log.warn("newObjectBean: " + newObjectBean);
    } catch (Exception vie) {
        log.warn("Could not create issue due to validation exception:" + vie.getMessage());
    }
    
    /* Update RATE_REF on the newObject */		        
    def objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_RATE_REPORT_ATTR_RATE_REF).createMutable() //The id of the attribute
    
    /* Create the new attribute bean based on the value */
    def newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, rateKey);
    /* Load the attribute bean */
    def objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), rateKey);
    if (objectAttributeBean != null) {
        /* If attribute exist reuse the old id for the new attribute */
        newObjectAttributeBean.setId(objectAttributeBean.getId());
    }
    /* Store the object attribute into Insight. */
    try {
        objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);
    } catch (Exception vie) {
        log.warn("Could not update object attribute due to validation exception:" + vie.getMessage());
    }  
    
    OnSiteRateObjects.add(newObjectBean)
}
log.info ("OnSiteRateObjects: " + OnSiteRateObjects)
def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()

if (!OnSiteRateObjects.isEmpty()) {
    MutableIssue mi = (MutableIssue) issue;
    mi.setCustomFieldValue(quoteLabourRatesField, OnSiteRateObjects);
    ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
}           </arg>
                  <arg name="field.filepath" />
                  <arg name="class.name">com.riadalabs.jira.plugins.insight.services.jira.postfunction.InsightPostFunction</arg>
                  <arg name="field.description">OP: Automatically create Labour Rates for offer Tkt</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="field.copyFieldSource2" />
                  <arg name="field.copyFieldSource1">customfield_22603</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="field.createTargetValue1" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyFieldMode1">OVERWRITE</arg>
                  <arg name="field.copyFieldDestination1">customfield_22656</arg>
                  <arg name="field.copyFieldSeparator1" />
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescopyValueFromOtherField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.CopyValueFromOtherFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">85f36110-414c-4e65-a9e9-d180169c41b4</arg>
                  <arg name="FIELD_ACTION">251 Richiedi Preventivo a Fornitore</arg>
                  <arg name="FIELD_NOTES">Fast transact to "Waiting for Supplier quote" if Supplier is evaluated and offer has been generated from a repair ticket</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.FasttrackTransition</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.FasttrackTransition</arg>
                  <arg name="FIELD_CONDITION">{"script":"import com.atlassian.jira.component.ComponentAccessor\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\ndef trovato=false\nfor (s in ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplier'].toString())){\n    if (issue.getCustomFieldValue(s) != null){\n        trovato=true\n    }\n}\n\nif(cfValues['OP_TKT_GENERATED_FROM_REPAIR']?.value == 'Yes' &amp;&amp; trovato){\n    trovato=true\n}else{\n    trovato=false\n}\nreturn trovato","scriptPath":null}</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_TRANSITION_OPTIONS" />
                  <arg name="events" />
                  <arg name="FIELD_ADDITIONAL_SCRIPT" />
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="21" name="Tkt Risolto Telefonicamente">
          <meta name="opsbar-sequence">30</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_NOTES">OP: Enabled only for Maintenance Ticket</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">issue.issueType.name == 'Maintenance Ticket'|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="7">
              <post-functions>
                <function type="class">
                  <arg name="field.name">resolution</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
                  <arg name="field.value">1</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="31" name="Converti in Nuova Installazione">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">58d7281a-ca18-4098-990f-76fde0470684</arg>
                <arg name="FIELD_NOTES">Change to New Installation if issue type = Maintenance</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"issue.issueType.name == 'Maintenance Ticket'","scriptPath":null,"parameters":{}}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="1">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">7918c0e3-5dc6-49c1-b2dc-dac5aa760ae0</arg>
                  <arg name="FIELD_NOTES">OP: Change issue type from Maintenance to New Installation</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import org.apache.log4j.Category\nimport com.atlassian.jira.component.ComponentAccessor\nimport com.atlassian.jira.issue.Issue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.issuetype.IssueType\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\n/* Define a Logger */\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\ndef constantsManager = ComponentAccessor.getConstantsManager()\n\nIssueType targetIssueType = null\ndef issueType\n\nlog.debug \"IssueType old = \" + issue.issueType.name\n\ndef collection = constantsManager.getAllIssueTypeObjects()\ndef iterator = collection.iterator()\nwhile(iterator.hasNext()){\n\tissueType = iterator.next()\n\tif(issueType.name == properties['it.newInstallation'].toString()){\n\t\ttargetIssueType = issueType\n\t}\n}\n\nlog.debug targetIssueType.name\nissue.setIssueTypeObject(targetIssueType)\nlog.debug \"IssueType new = \" + issue.issueType.name","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import org.apache.log4j.Category
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.issuetype.IssueType
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}

/* Define a Logger */
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

def constantsManager = ComponentAccessor.getConstantsManager()

Issue issue = issue  // This what I was looking for :-). As simple as it is, but I didn't know that.

IssueType targetIssueType = null
def issueType

log.debug "IssueType old = " + issue.issueType.name

def collection = constantsManager.getAllIssueTypeObjects()
def iterator = collection.iterator()
while(iterator.hasNext()){
	issueType = iterator.next()
	if(issueType.name == properties['it.newInstallation'].toString()){
		targetIssueType = issueType
	}
}

log.debug targetIssueType.name
issue.setIssueTypeObject(targetIssueType)
log.debug "IssueType new = " + issue.issueType.name</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="диюбwbХ*'">¶»ž</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue" />
                  <arg name="fieldValue">New Installation</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">New Installation Ticket</arg>
                  <arg name="field.name">summary</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">New Installation Ticket</arg>
                  <arg name="field.name">customfield_22716</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="41" name="Converti in Manutenzione Riparativa">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_NOTES">Change to Maintenance if issue type = New Installation</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">issue.issueType.name == 'New Installation'|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="1">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">mç¶õ®}ß^ç–ºnüiý´åþø×¿}}Î·m·Ÿ</arg>
                  <arg name="FIELD_NOTES">OP: Change issue type from New Installation to Maintenance</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import org.apache.log4j.Category\nimport com.atlassian.jira.component.ComponentAccessor\nimport com.atlassian.jira.issue.Issue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.issuetype.IssueType\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\n/* Define a Logger */\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\ndef constantsManager = ComponentAccessor.getConstantsManager()\n\nIssueType targetIssueType = null\ndef issueType\n\nlog.debug \"IssueType old = \" + issue.issueType.name\nlog.debug properties['it.maintenance'].toString()\ndef collection = constantsManager.getAllIssueTypeObjects()\ndef iterator = collection.iterator()\nwhile(iterator.hasNext()){\n\tissueType = iterator.next()\n\tif(issueType.name == (properties['it.maintenance'] ? properties['it.maintenance'].toString() : \"Maintenance Ticket\")){\n\t\ttargetIssueType = issueType\n\t}\n}\n\nlog.debug targetIssueType.name\nissue.setIssueTypeObject(targetIssueType)\nlog.debug \"IssueType new = \" + issue.issueType.name","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import org.apache.log4j.Category
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.issuetype.IssueType
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}

/* Define a Logger */
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

def constantsManager = ComponentAccessor.getConstantsManager()

Issue issue = issue  // This what I was looking for :-). As simple as it is, but I didn't know that.

IssueType targetIssueType = null
def issueType

log.debug "IssueType old = " + issue.issueType.name
log.debug properties['it.maintenance'].toString()
def collection = constantsManager.getAllIssueTypeObjects()
def iterator = collection.iterator()
while(iterator.hasNext()){
	issueType = iterator.next()
	if(issueType.name == (properties['it.maintenance'] ? properties['it.maintenance'].toString() : "Maintenance Ticket")){
		targetIssueType = issueType
	}
}

log.debug targetIssueType.name
issue.setIssueTypeObject(targetIssueType)
log.debug "IssueType new = " + issue.issueType.name</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="диюбwbХ*'">¶»ž</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue" />
                  <arg name="fieldValue">Maintenance Ticket</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">Maintenance Ticket</arg>
                  <arg name="field.name">customfield_22716</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">Maintenance Ticket</arg>
                  <arg name="field.name">summary</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="61" name="Chiusura Massiva FAAC Service">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <results>
            <unconditional-result old-status="žée" status="žée" step="7">
              <post-functions>
                <function type="class">
                  <arg name="field.name">resolution</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
                  <arg name="field.value">6</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="401" name="Clona Tkt" view="fieldscreen">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20401</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">c659704c-9678-4844-9a05-6f3497e391e7</arg>
                <arg name="FIELD_NOTES">Enabled only for Repair and New Installation</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"issue.issueType.name == 'Maintenance Ticket' || (issue.issueType.name == 'New Installation' &amp;&amp; cfValues['OP_ASSET'] != null)","scriptPath":null}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="1">
              <post-functions>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="диюбwbХ*'">¶»ž</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue" />
                  <arg name="fieldValue">New Installation</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="targetIssueTypeDefinedByCfSelection" />
                  <arg name="issueTypeId">12301</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">H</arg>
                  <arg name="maxAllowed-integerValue" />
                  <arg name="transitionAttachmentsOperation">rr</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="╡крz╙ыв7Ь╡'еy╦^t+м╢ЙЕЙщ]" />
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId" />
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="²æÅºw-ì">[{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_21909","destinationFieldId":"customfield_21909"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22600","destinationFieldId":"customfield_22600"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22822","destinationFieldId":"customfield_22822"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22601","destinationFieldId":"customfield_22601"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22603","destinationFieldId":"customfield_22603"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22663","destinationFieldId":"customfield_22663"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22634","destinationFieldId":"customfield_22634"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22651","destinationFieldId":"customfield_22651"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22700","destinationFieldId":"customfield_22700"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22606","destinationFieldId":"customfield_22606"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22607","destinationFieldId":"customfield_22607"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22629","destinationFieldId":"customfield_22629"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22652","destinationFieldId":"customfield_22652"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"description","destinationFieldId":"description"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22627","destinationFieldId":"customfield_22627"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22620","destinationFieldId":"customfield_22620"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22668","destinationFieldId":"customfield_22668"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23602","destinationFieldId":"customfield_23203"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22814","destinationFieldId":"customfield_22814"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23237","destinationFieldId":"customfield_23237"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"issuekey","destinationFieldId":"customfield_23243"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"YES","destinationFieldId":"customfield_23238"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22702","destinationFieldId":"customfield_22702"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22703","destinationFieldId":"customfield_22703"}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="диюбwbХ*'">¶»ž</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue" />
                  <arg name="fieldValue">Maintenance Ticket</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="targetIssueTypeDefinedByCfSelection" />
                  <arg name="issueTypeId">13001</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">H</arg>
                  <arg name="maxAllowed-integerValue" />
                  <arg name="transitionAttachmentsOperation">rr</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="╡крz╙ыв7Ь╡'еy╦^t+м╢ЙЕЙщ]" />
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId" />
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="²æÅºw-ì">[{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_21909","destinationFieldId":"customfield_21909"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22600","destinationFieldId":"customfield_22600"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22822","destinationFieldId":"customfield_22822"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22601","destinationFieldId":"customfield_22601"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22603","destinationFieldId":"customfield_22603"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22663","destinationFieldId":"customfield_22663"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22634","destinationFieldId":"customfield_22634"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22651","destinationFieldId":"customfield_22651"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22700","destinationFieldId":"customfield_22700"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22606","destinationFieldId":"customfield_22606"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22607","destinationFieldId":"customfield_22607"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22629","destinationFieldId":"customfield_22629"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22652","destinationFieldId":"customfield_22652"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"description","destinationFieldId":"description"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22627","destinationFieldId":"customfield_22627"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22620","destinationFieldId":"customfield_22620"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22668","destinationFieldId":"customfield_22668"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23602","destinationFieldId":"customfield_23203"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22814","destinationFieldId":"customfield_22814"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23237","destinationFieldId":"customfield_23237"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"issuekey","destinationFieldId":"customfield_23243"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"YES","destinationFieldId":"customfield_23238"}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23602</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="521" name="Assegna Impianto" view="fieldscreen">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20116</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">a5619fcc-6244-4bc5-929e-51021b061c98</arg>
                <arg name="FIELD_NOTES">Enabled only for new inst tickets in order to assign ASSET and generate (or re-generate) Docs</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"(issue.issueType.name == 'New Installation' || issue.issueType.name == 'Maintenance Ticket') &amp;&amp; cfValues['OP_SAP_SERVICE_NOTIFICATION'] == null &amp;&amp; cfValues['OP_CLONED_TKT']?.value == 'YES'","scriptPath":null}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">834be206-cd12-463a-ac63-b04b36eee40d</arg>
              <arg name="FIELD_NOTES">Generate SN on cloned tkt</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef SN =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_NOTIFICATION\")[0]\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\n\nif(issue.getCustomFieldValue(SN) == null &amp;&amp; issue.issueType.name != \"Planned Maintenance Ticket\"){\n    requestMethod = \"POST\";\n\n    def body_req = []\n    body_req = [\n        \"issueKey\": issue.key,\n        \"status\": \"OPE\"\n    ] \n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n    log.debug \"baseURL SN: \" + baseURL\n    log.debug \"body_req SN: \" + body_req\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"201\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        \n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n        log.debug \"errors: \" +  json_object.errors.toString()\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-SAP-SN-UPDATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n}\n ","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">7c1b64f1-5b3a-452d-974f-03139ccb89ff</arg>
              <arg name="FIELD_NOTES">OP: Doc Template generation - se New Installation OR First Ticket = true</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.opensymphony.workflow.WorkflowException;\nimport com.opensymphony.workflow.InvalidInputException\nimport groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport groovyx.net.http.HTTPBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef requestMethod\ndef baseURL\n\ndef firstTicket =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.firstTkt'].toString())[0]\n\nlog.debug issue.getIssueType().name\nlog.debug issue.getCustomFieldValue(firstTicket)\n\n\n/* REST API per Invio Notifica Email ONSITE_REPORT */\nrequestMethod = \"GET\";\n\nif(issue.getIssueType().name.toString().equals(properties['it.newInstallation']) || issue.getCustomFieldValue(firstTicket)!=null){\n    def first_ticket=false\n    def template=\"\"\n    if(issue.getCustomFieldValue(firstTicket)!=null){\n        first_ticket=true\n        template=\"FIRST_TICKET%7CMANUFACTURER\"\n    }else{\n        template=\"NEW_INSTALLATION_CREATE_TKT%7CMANUFACTURER\"\n    }\n    \n    if(issue.getIssueType().name.toString().equals(properties['it.newInstallation'])){\n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/document/generation/check?ISSUE_KEY=\"+ issue.key +\"&amp;DOC_CATEGORY=\" + template + \"&amp;ENABLED_FOR_FIRST_TICKET=\"+first_ticket+\"&amp;IMPORT_FROM=\"\n    }else{\n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/document/generation/check?ISSUE_KEY=\"+ issue.key +\"&amp;DOC_CATEGORY=\" + template + \"&amp;ENABLED_FOR_FIRST_TICKET=\"+first_ticket+\"&amp;IMPORT_FROM=OP_ASSET\"\n    }\n    \n    log.debug baseURL\n    URL url = new URL(baseURL)\n    HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\tlog.debug \"url: \" + url\n    \n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        log.debug \"ErrorStream: \" + connection.getErrorStream().toString()\n        log.debug \"getHeaderFields(): \" + connection.getHeaderFields()\n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-DOCS\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.message)\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n}\n","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="1">
              <post-functions>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="541" name="Assegna a Fornitore e Pianifica" view="fieldscreen">
          <meta name="opsbar-sequence">50</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20112</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">a9655845-bd3d-4171-ab08-fdb0c420b5d2</arg>
                <arg name="FIELD_NOTES">OP_ASSET should be evaluated &amp;&amp; Issue type should be New Installation</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"cfValues['OP_ASSET'] != null &amp;&amp; issue.issueType.name == 'New Installation'","scriptPath":null,"parameters":{}}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">e335982b-f860-4bed-a8cc-028022cff1ce</arg>
                <arg name="FIELD_NOTES">OP_SUPPLIER should be not null</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"import com.atlassian.jira.component.ComponentAccessor\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\ndef trovato=false\nfor (s in ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplier'].toString())){\n    if (issue.getCustomFieldValue(s) != null){\n        trovato=true\n    }\n}\nreturn trovato","scriptPath":null,"parameters":{}}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">de52ae8f-3a4f-4dd8-93de-2d990003847d</arg>
              <arg name="FIELD_NOTES">OP: Check Customer Contract</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.sql.Timestamp\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\ndef warnings = false\ndef missingContract = false\ndef expiredContract = false\ndef errors = false\n\ndef installation =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.asset'].toString())[0]\ndef automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyAssigned'] ? properties['cf.automaticallyAssigned'].toString() : \"OP_AUTOMATICALLY_ASSIGNED\")[0]\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]\n\ndef warningEmptyFields = new ArrayList()\ndef errorMandatoryFields = new ArrayList()\n\n//OP_ASSET\nif(issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"No\")){\n    //Check CUSTOMER_CONTRACT_REF on OP_ASSET\n    \n    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n    def asset = issue.getCustomFieldValue(installation)\n    log.debug \"asset: \" + asset\n    asset=asset.toString()\n    def assetKey = asset.substring(asset.lastIndexOf('(')+1,asset.lastIndexOf(')'))\n    def assetObject = objectFacade.loadObjectBean(assetKey)\n\tlog.debug \"assetObject.getId(): \" + assetObject.getId()\n    def obTriage\n    def customerContract, customerContractAttr\n    customerContractAttr = properties['iobj.hardware.contract'] ? properties['iobj.hardware.contract'].toString() : \"CUSTOMER_CONTRACT_REF\"\n    if(objectFacade.loadObjectAttributeBean(assetObject.getId(), customerContractAttr)){\n        obTriage = objectFacade.loadObjectAttributeBean(assetObject.getId(), customerContractAttr).createMutable()\n        customerContract = obTriage.getObjectAttributeValueBeans().toString()\n    }\n\n    log.debug \"customerContract: \" + customerContract\n    \n    if(customerContract == null){\n        warnings = true\n        missingContract = true\n    }else{\n        //get \"QT_VALID_T\" for that Technician\n        def contract=customerContract.toString()\n        log.debug \"contract:\" + contract\n        def contractId = contract.substring(contract.lastIndexOf('(')+1,contract.lastIndexOf(')'))\n        log.debug \"contractId:\" + contractId\n        log.debug \"properties['iobj.contract.validTo']: \" + properties['iobj.contract.validTo']\n        def expiringDate, expiringDateAttr\n        expiringDateAttr = properties['iobj.contract.validTo'] ? properties['iobj.contract.validTo'].toString() : \"QT_VALID_T\"\n        \n        if(objectFacade.loadObjectAttributeBean(contractId.toInteger(), customerContractAttr)){\n                obTriage = objectFacade.loadObjectAttributeBean(contractId.toInteger(), customerContractAttr).createMutable()\n                contractRef = obTriage.getObjectAttributeValueBeans().toString()\n                contractDO = contractRef.toString()\n                log.debug \"contractDO: \" + contractDO\n                contractDOKey = contractDO.substring(contractDO.lastIndexOf('(')+1,contractDO.lastIndexOf(')'))\n                log.debug \"contractDOKey: \" + contractDOKey\n                contractDOObject = objectFacade.loadObjectBean(properties['ischema.dbo'].toString() + \"-\" + contractDOKey)\n            log.debug \"expiringDateAttr: \" + expiringDateAttr\n                expiringDate = objectFacade.loadObjectAttributeBean(contractDOKey.toInteger(), expiringDateAttr) ? objectFacade.loadObjectAttributeBean(contractDOKey.toInteger(), expiringDateAttr).getObjectAttributeValueBeans().value[0] as Date : null\n        }\n\n        def todaysDateTime = (new Date())\n        log.debug \"expiringDate: \" + expiringDate\n        log.debug \"todaysDateTime: \" + todaysDateTime\n        if(expiringDate &lt; todaysDateTime){\n            warnings = true\n            expiredContract = true\n        }\n        \n    }\n \n}\n\ndef output = new ArrayList()\n\nif (!warnings){\n    return true\n}else{\n    if(warnings){\n        if(issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")){\n            //log.debug \"return true\"\n            return true\n        }else{\n            def wList = new ArrayList()\n\t\t\tdef wListConfirmEmptyContract = new ArrayList()\n            \n            if(missingContract){\n                wListConfirmEmptyContract.add(\"W\")\n                wListConfirmEmptyContract.add(\"CUSTOMER_CONTRACT_MISSING\")\n                wListConfirmEmptyContract.add(null)\n\n                wList.add(wListConfirmEmptyContract)\n            }\n            \n            if(expiredContract){\n                wListConfirmEmptyContract.add(\"W\")\n                wListConfirmEmptyContract.add(\"CUSTOMER_CONTRACT_EXPIRED\")\n                wListConfirmEmptyContract.add(null)\n\n                wList.add(wListConfirmEmptyContract)\n            }\n            output.add(wList)\n            throw new InvalidInputException('{\"W\":\"' + output.toString() + '\"}') \n        }\n    }\n}","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">a80e150a-63e9-41ea-964a-c564139e7864</arg>
              <arg name="FIELD_NOTES">SAP: update SN status &amp; Create SO</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef sapSN =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_NOTIFICATION\")[0]\ndef sapSO =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_ORDER\")[0]\n\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\n\nif(issue.issueType.name != \"Planned Maintenance Ticket\" &amp;&amp; issue.getCustomFieldValue(sapSN) != null){\n    requestMethod = \"POST\";\n\n    def body_req = []\n    body_req = [\n        \"issueKey\": issue.key,\n        \"status\": \"PLA\"\n    ] \n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n    log.debug \"baseURL SN: \" + baseURL\n    log.debug \"body_req SN: \" + body_req\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        \n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n        log.debug \"errors: \" +  json_object.errors.toString()\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-SAP-SN-UPDATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0].toString())\n        \n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }else{\n        /** SERVICE ORDER CREATION **/\n        log.debug \"issue.getCustomFieldValue(sapSO): \" + issue.getCustomFieldValue(sapSO)\n        if(issue.getCustomFieldValue(sapSO) == null){\n            body_req = [\n                \"issueKey\": issue.key\n            ] \n            baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\n\n            log.debug \"baseURL SO: \" + baseURL\n            log.debug \"body_req SO: \" + body_req\n            url = new URL(baseURL)\n            connection = (HttpURLConnection)url.openConnection();\n            connection.setRequestMethod(requestMethod);\n            connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n            connection.setRequestProperty(\"Accept\", \"*/*\");\n            connection.setDoOutput(true);\n            connection.setDoInput(true);\n            connection.outputStream\n            connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n            log.debug connection.outputStream\n            connection.connect();\n\n            output = new ArrayList()\n            eList = new ArrayList()\n            eListErrors = new ArrayList()\n            errorMsgs = new ArrayList()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n            if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n                log.debug \"url: \" + url\n                log.debug \"ResponseCode:\" + connection.getResponseCode()\n                log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n                def outputMsg = ((HttpURLConnection)connection).errorStream.text\n                log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n                def jsonSlurper = new JsonSlurper()\n                def json_object = jsonSlurper.parseText(outputMsg)\n                assert json_object instanceof Map  \n                log.debug \"message: \" +  json_object.message\n                log.debug \"errors: \" +  json_object.errors.toString()\n\n                eListErrors.add(\"E\")\n                eListErrors.add(\"OP-SAP-SO-CREATE\")\n                errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n                eListErrors.add(errorMsgs)\n                eList.add(eListErrors)\n\n                output.add(eList)\n                throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n            }\n        }\n    }\n}\n ","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="v+nWù">false</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">5e9c9e99-6d82-4e7b-bcbd-a39b8cf84bb5</arg>
              <arg name="FIELD_NOTES">OP Email Notification: ASSIGN_TO_SUPPLIER</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.atlassian.jira.issue.link.IssueLink\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nCategory log = Category.getInstance(\"com.onresolve.jira.groovy.PostFunction\")\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\ndef requestMethod = \"POST\";\ndef relatesInIssueLink=false\ndef relatesOutIssueLink=false\ndef linkedTickets=new ArrayList()\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyAssigned'] ? properties['cf.automaticallyAssigned'].toString() : \"OP_AUTOMATICALLY_ASSIGNED\")[0]\n\n/*OP-1038: verifica ticket collegati*/\nList&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\nfor (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n\n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n        relatesInIssueLink=true\n        linkedTickets.add(issueLink.getSourceObject().toString())\n        log.debug \"Issue con relatesInIssueLink\"\n    }\n}\nList&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\nfor (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n\n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n        relatesOutIssueLink=true\n        linkedTickets.add(issueLink.getDestinationObject().toString())\n        log.debug \"Issue con relatesOutIssueLink\"\n    }\n}\n\ndef body_req\nif(relatesInIssueLink || relatesOutIssueLink){\n    body_req = [\n        \"templateName\": properties['tt.assignToSupplier'].toString(),\n        \"pec\": false,\n        \"issueKey\": issue.key,\n        \"linkedTickets\": linkedTickets\n    ]\n}else{\n    body_req = [\n        \"templateName\": properties['tt.assignToSupplier'].toString(),\n        \"pec\": false,\n        \"issueKey\": issue.key\n    ]\n}\n\nif(issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"No\")){\n    def baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/transaction/mail/send\"\n    URL url\n    url = new URL(baseURL)\n\n    log.debug \"baseURL: \" + baseURL\n    HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\tlog.debug \"ResponseCode:\" + connection.getResponseCode()\n    \n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        eListErrors.add(\"E\")\n        eListErrors.add(\"SENDMAIL\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n}\n","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="v+nWù">false</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="4">
              <post-functions>
                <function type="class">
                  <arg name="field.copyFieldSource1" />
                  <arg name="textValue">-1</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="workflowName-textValue">OPAA: PM Task Workflow</arg>
                  <arg name="performTransitionAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="scopeType">PARENT</arg>
                  <arg name="destination-scopeTarget">SUB_TASK</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitieslinkedtransition-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="{^êÕj[">31</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.linkedtransition.LinkedTransitionFunction</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="status" />
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="field.name">customfield_22639</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">0db4b388-06a4-49d8-ace8-c098c9d1a5c2</arg>
                  <arg name="FIELD_NOTES">OP: New Installation - Check linkedTickets &amp; Fast-Transact them</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.link.IssueLink\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nlog.warn \"${issue.key} Transazione ASSIGN TO SUPPLIER - Post Function check linkedIssues\"\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyAssigned'] ? properties['cf.automaticallyAssigned'].toString() : \"OP_AUTOMATICALLY_ASSIGNED\")[0]\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\n\n//Per test da console\n//issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-276\")\n\n/*PROD*/\nASSIGN_TO_SUPPLIER = properties['wf.tr.assignToSupplierAndSchedule'] ? properties['wf.tr.assignToSupplierAndSchedule'].toInteger() : 431\n\ndef user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\ndef issueService = ComponentAccessor.getIssueService()\n\n/*Se eseguo la confirm to customer su un ticket con 1 o + ticket collegati, verifico e sposto in automatico gli eventuali ticket collegati*/\nlog.warn \"verifico e sposto in automatico gli eventuali ticket collegati\"\nlog.debug issue.getIssueType().getName()\nlog.debug issue.getCustomFieldValue(automaticallyConfirmed)\nif(issue.getIssueType().getName() == properties['it.newInstallation'].toString() &amp;&amp; (issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"No\"))){\n    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\n    log.debug \"allInIssueLink: \" + allInIssueLink\n    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            log.warn \"Issue con relatesInIssueLink\"\n            /*Eseguire transazione di stato della sourceIssue*/\n            def linkedIssue = issueLink.getSourceObject()\n            def linkedIssueStatus = linkedIssue.getStatus()\n            def transitionId\n            if(linkedIssueStatus.name == properties['wf.open'].toString()){\n                transitionId=ASSIGN_TO_SUPPLIER\n            }\n            if(transitionId==ASSIGN_TO_SUPPLIER){\n                // Prepare our input for the transition\n                def issueInputParameters = issueService.newIssueInputParameters()\n                issueInputParameters.with {\n                    setSkipScreenCheck(true)\n                }\n                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)\n                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), \"Yes\") \n                //log.warn \"issueInputParameters: \" + issueInputParameters\n                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n                def mi = (MutableIssue) linkedIssue\n\n                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)\n                log.warn \"fieldConfig: \" + fieldConfig\n                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())\n\n                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n                issueIndexingService.reIndex(linkedIssue)\n                log.warn \"Updated customfield - issue linkata\"\n\n                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)\n                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {\n                    // Perform the transition\n                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))\n                    if (! issueResult.isValid()) {\n                        log.warn(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n                    }else{\n                        log.warn(\"Transazione fatta 79 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}\")\n                    }\n                } else {\n                    log.warn(\"Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}\")\n                }\n            }\n        }\n    }\n\n    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\n    log.debug \"allOutIssueLink: \" + allOutIssueLink\n    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            log.warn \"Issue con relatesOutIssueLink\"\n            /*Eseguire transazione di stato della destinationIssue*/\n            def linkedIssue = issueLink.getDestinationObject()\n            def linkedIssueStatus = linkedIssue.getStatus()\n            def transitionId\n            log.warn \"linkedIssue: \" + linkedIssue\n            log.warn \"linkedIssueStatus.name: \" + linkedIssueStatus.name\n            if(linkedIssueStatus.name == properties['wf.open'].toString()){\n                transitionId=ASSIGN_TO_SUPPLIER\n            }\n\n            if(transitionId==ASSIGN_TO_SUPPLIER){\n                // Prepare our input for the transition\n                def issueInputParameters = issueService.newIssueInputParameters()\n                issueInputParameters.with {\n                    setSkipScreenCheck(true)\n                }\n                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)\n                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), \"Yes\") \n\n                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n                def mi = (MutableIssue) linkedIssue\n\n                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)\n                log.warn \"fieldConfig: \" + fieldConfig\n                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())\n\n                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n                issueIndexingService.reIndex(linkedIssue)\n                log.warn \"Updated customfield - issue linkata\"\n\n                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {\n                    // Perform the transition\n                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))\n                    if (! issueResult.isValid()) {\n                        log.warn(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n                    }else{\n                        log.warn(\"Transazione fatta 122 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}\")\n                    }\n                } else {\n                    log.warn(\"Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}\")\n                }\n            }\n\n        }\n    }\n}","scriptPath":null}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="531" name="Modifica Impianto" view="fieldscreen">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20116</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">97dca225-7941-4128-9606-720aac90ae3d</arg>
                <arg name="FIELD_NOTES">Enabled only for new inst tickets in order to assign ASSET and generate (or re-generate) Docs</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"(issue.issueType.name == 'New Installation' || (issue.issueType.name == 'Maintenance Ticket' &amp;&amp; cfValues['OP_FIRST_TICKET'] == \"First Ticket\")) &amp;&amp; cfValues['OP_ASSET'] != null","scriptPath":null}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">14aa8006-ff99-4e5c-9191-91eeb349be66</arg>
              <arg name="FIELD_NOTES">Delete previous attachments related to NEW Installation TKT Generation</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\ndef automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]\n\ndef requestMethod\ndef baseURL\n\n/*Script Variables*/\n//Per test da console\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-14062\")\n\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\n\n/*Rimozione allegato rapporto di intervento appena creato*/\n/* Get Insight IQL Facade from plugin accessor */\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\n\n/* Get Insight Object Facade from plugin accessor */\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n/* Get Insight Object Type Facade from plugin accessor */\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\");\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\n\n/* Get Insight Object Attribute Facade from plugin accessor */\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\");\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\n\n/* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include \" around value */\ndef objects = iqlFacade.findObjectsByIQLAndSchema(DBO, \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".\\\"\" + properties['iobj.attachmentCategory.newInstTkt'].toString() + \"\\\" = true AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"); // See the complete list of possible IQL on the Insight Query Language documentation page\n/* If this is a mandatory field you should be able to do this: */\nlog.debug \"IQL: \" + \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".\\\"\" + properties['iobj.attachmentCategory.newInstTkt'].toString() + \"\\\" = true AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"\n\nfor(iobj in objects){\n    /* UPDATE OJBECT DELETED VALUE */\n    def obj = objectFacade.loadObjectBean(iobj.getId());\n        \n    int attachmentDeleted = properties['iobj.attachment.deleted.id'] ? properties['iobj.attachment.deleted.id'].toString().toInteger() : 3265\n    \n    attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(attachmentDeleted); \n\n    newAttrib = obj.createObjectAttributeBean(attribType);\n    def newAttribValue = newAttrib.createObjectAttributeValueBean();\n\n    try {\n    \tnewAttribValue.setValue(attribType, true);\n    } catch (Exception vie) {\n     \tlog.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType + \" to \" + totalAmountSupp + \". Exiting.\");\n     \tlog.warn(SETINSIGHTVALUE: vie.getMessage());\n     \treturn false;\n    }\n    \n    def attribValues = newAttrib.getObjectAttributeValueBeans();\n    attribValues.add(newAttribValue);\n    newAttrib.setObjectAttributeValueBeans(attribValues);\n     \n    try {\n    \tnewAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\n    } catch (Exception vie) {\n    \tlog.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\n     \tlog.warn(SETINSIGHTVALUE: vie.getMessage());\n    return false;\n    }\n    log.info(\"SETINSIGHTVALUE: Successfully saved value\");\n}","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">a34dae8c-1a80-462f-8514-e46dbce5000f</arg>
              <arg name="FIELD_NOTES">OP: Doc Template generation - se New Installation OR First Ticket = true</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.opensymphony.workflow.WorkflowException;\nimport com.opensymphony.workflow.InvalidInputException\nimport groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport groovyx.net.http.HTTPBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef requestMethod\ndef baseURL\n\ndef firstTicket =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.firstTkt'].toString())[0]\n\nlog.debug issue.getIssueType().name\nlog.debug issue.getCustomFieldValue(firstTicket)\n\n\n/* REST API per Invio Notifica Email ONSITE_REPORT */\nrequestMethod = \"GET\";\n\nif(issue.getIssueType().name.toString().equals(properties['it.newInstallation']) || issue.getCustomFieldValue(firstTicket)!=null){\n    def first_ticket=false\n    def template=\"\"\n    if(issue.getCustomFieldValue(firstTicket)!=null){\n        first_ticket=true\n        template=\"FIRST_TICKET%7CMANUFACTURER\"\n    }else{\n        template=\"NEW_INSTALLATION_CREATE_TKT%7CMANUFACTURER\"\n    }\n    \n    if(issue.getIssueType().name.toString().equals(properties['it.newInstallation'])){\n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/document/generation/check?ISSUE_KEY=\"+ issue.key +\"&amp;DOC_CATEGORY=\" + template + \"&amp;ENABLED_FOR_FIRST_TICKET=\"+first_ticket+\"&amp;IMPORT_FROM=\"\n    }else{\n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/document/generation/check?ISSUE_KEY=\"+ issue.key +\"&amp;DOC_CATEGORY=\" + template + \"&amp;ENABLED_FOR_FIRST_TICKET=\"+first_ticket+\"&amp;IMPORT_FROM=OP_ASSET\"\n    }\n    \n    log.debug baseURL\n    URL url = new URL(baseURL)\n    HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\tlog.debug \"url: \" + url\n    \n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        log.debug \"ErrorStream: \" + connection.getErrorStream().toString()\n        log.debug \"getHeaderFields(): \" + connection.getHeaderFields()\n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-DOCS\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.message)\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n}\n","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="Not Done" status="‰Þ" step="1">
              <post-functions>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="381" name="Modifica Pianificazione" view="fieldscreen">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20113</meta>
          <results>
            <unconditional-result old-status="žée" status="žée" step="1">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="551" name="Modifica fornitore" view="fieldscreen">
          <meta name="opsbar-sequence">50</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20112</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">a9655845-bd3d-4171-ab08-fdb0c420b5d2</arg>
                <arg name="FIELD_NOTES">OP_ASSET should be evaluated &amp;&amp; Issue type should be New Installation or Maintenance + First Ticket</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"(issue.issueType.name == 'New Installation' || (issue.issueType.name == 'Maintenance Ticket' &amp;&amp; cfValues['OP_FIRST_TICKET'] == \"First Ticket\")) &amp;&amp; cfValues['OP_ASSET'] != null || issue.issueType.name == 'Planned Maintenance Ticket'","scriptPath":null,"parameters":{}}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">61d0d786-0ab0-42de-98be-80dcfd67b97e</arg>
              <arg name="FIELD_NOTES">Delete previous attachments related to NEW Installation TKT Generation</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\ndef automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]\n\ndef requestMethod\ndef baseURL\n\n/*Script Variables*/\n//Per test da console\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-14062\")\n\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\n\n/*Rimozione allegato rapporto di intervento appena creato*/\n/* Get Insight IQL Facade from plugin accessor */\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\n\n/* Get Insight Object Facade from plugin accessor */\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n/* Get Insight Object Type Facade from plugin accessor */\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\");\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\n\n/* Get Insight Object Attribute Facade from plugin accessor */\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\");\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\n\nif(issue.issueType.name != \"Planned Maintenance Ticket\"){\n    /* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include \" around value */\n    def objects = iqlFacade.findObjectsByIQLAndSchema(DBO, \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".\\\"\" + properties['iobj.attachmentCategory.newInstTkt'].toString() + \"\\\" = true AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"); // See the complete list of possible IQL on the Insight Query Language documentation page\n    /* If this is a mandatory field you should be able to do this: */\n    log.debug \"IQL: \" + \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".\\\"\" + properties['iobj.attachmentCategory.newInstTkt'].toString() + \"\\\" = true AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"\n\n    for(iobj in objects){\n        /* UPDATE OJBECT DELETED VALUE */\n        def obj = objectFacade.loadObjectBean(iobj.getId());\n\n        int attachmentDeleted = properties['iobj.attachment.deleted.id'] ? properties['iobj.attachment.deleted.id'].toString().toInteger() : 3265\n\n        attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(attachmentDeleted); \n\n        newAttrib = obj.createObjectAttributeBean(attribType);\n        def newAttribValue = newAttrib.createObjectAttributeValueBean();\n\n        try {\n            newAttribValue.setValue(attribType, true);\n        } catch (Exception vie) {\n            log.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType + \" to \" + totalAmountSupp + \". Exiting.\");\n            log.warn(SETINSIGHTVALUE: vie.getMessage());\n            return false;\n        }\n\n        def attribValues = newAttrib.getObjectAttributeValueBeans();\n        attribValues.add(newAttribValue);\n        newAttrib.setObjectAttributeValueBeans(attribValues);\n\n        try {\n            newAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\n        } catch (Exception vie) {\n            log.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\n            log.warn(SETINSIGHTVALUE: vie.getMessage());\n            return false;\n        }\n        log.info(\"SETINSIGHTVALUE: Successfully saved value\");\n    }\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">44a3bd0b-1fc7-4868-b7f5-915d55f83c97</arg>
              <arg name="FIELD_NOTES">OP: Doc Template generation - se New Installation OR First Ticket = true</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.opensymphony.workflow.WorkflowException;\nimport com.opensymphony.workflow.InvalidInputException\nimport groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport groovyx.net.http.HTTPBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef requestMethod\ndef baseURL\n\ndef firstTicket =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.firstTkt'].toString())[0]\n\nlog.debug issue.getIssueType().name\nlog.debug issue.getCustomFieldValue(firstTicket)\n\nif(issue.issueType.name != \"Planned Maintenance Ticket\"){\n    /* REST API per Invio Notifica Email ONSITE_REPORT */\n    requestMethod = \"GET\";\n    def rescheduling =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.rescheduling'] ? properties['cf.rescheduling'].toString() : \"OP_CHANGE_SCHEDULING\")[0]\n    def transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm2'].toString())[0]\n\n\n    def first_ticket=false\n    def template=\"\"\n    if(issue.getCustomFieldValue(firstTicket)!=null){\n        first_ticket=true\n        template=\"FIRST_TICKET%7CMANUFACTURER\"\n    }else{\n        template=\"NEW_INSTALLATION_CREATE_TKT%7CMANUFACTURER\"\n    }\n\n    if(issue.getIssueType().name.toString().equals(properties['it.newInstallation'])){\n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/document/generation/check?ISSUE_KEY=\"+ issue.key +\"&amp;DOC_CATEGORY=\" + template + \"&amp;ENABLED_FOR_FIRST_TICKET=\"+first_ticket+\"&amp;IMPORT_FROM=\"\n    }else{\n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/document/generation/check?ISSUE_KEY=\"+ issue.key +\"&amp;DOC_CATEGORY=\" + template + \"&amp;ENABLED_FOR_FIRST_TICKET=\"+first_ticket+\"&amp;IMPORT_FROM=OP_ASSET\"\n    }\n\n    log.debug baseURL\n    URL url = new URL(baseURL)\n    HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n    log.debug \"url: \" + url\n\n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        log.debug \"ErrorStream: \" + connection.getErrorStream().toString()\n        log.debug \"getHeaderFields(): \" + connection.getHeaderFields()\n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-DOCS\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.message)\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="1">
              <post-functions>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="field.type">8</arg>
                  <arg name="full.module.key">com.riadalabs.jira.plugins.insightinsight-post-function</arg>
                  <arg name="field.groovyScript">  import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.fields.CustomField
import com.atlassian.jira.issue.MutableIssue;
import com.atlassian.jira.event.type.EventDispatchOption;

/* Get Insight Object Facade from plugin accessor */
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade"); 
def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);
 
/* Get Insight Object Type Facade from plugin accessor */
Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade"); 
def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);
 
/* Get Insight Object Attribute Facade from plugin accessor */
Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade"); 
def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);

/* Get Insight IQL Facade from plugin accessor */
Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade"); 
def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);

Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory"); 
def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);

/*Insight Schema IDs*/
def OPAA = "OPAA-"
def DO = "DO-"

def cfManager = ComponentAccessor.getCustomFieldManager()

if(issue.issueType.name == "Planned Maintenance Ticket"){
    def supplier = cfManager.getCustomFieldObjectsByName("OP_SUPPLIER")
    def asset = cfManager.getCustomFieldObjectsByName("OP_ASSET")[0]
    def supplierInstallation = cfManager.getCustomFieldObject("22813".toLong())
    def supplierKey, supplierValue
    for (CustomField cf in supplier){
        if(issue.getCustomFieldValue(cf) != null){
            log.warn issue.getCustomFieldValue(cf).toString()
            
            supplierKey = issue.getCustomFieldValue(cf).toString().substring(issue.getCustomFieldValue(cf).toString().lastIndexOf('(')+1,issue.getCustomFieldValue(cf).toString().lastIndexOf(')'))
            def supplierObject = objectFacade.loadObjectBean(supplierKey)
            log.warn supplierObject.toString()
            supplierValue = objectFacade.loadObjectAttributeBean(supplierObject.getId(), "Name").getObjectAttributeValueBeans()
            log.warn "supplierValue: " + supplierValue.toString()
            
            
            
        }
    }
    def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
    
    for (subtask in issue.getSubTaskObjects()){
        log.warn subtask.getCustomFieldValue(asset).toString()
        assetKey = subtask.getCustomFieldValue(asset).toString().substring(subtask.getCustomFieldValue(asset).toString().lastIndexOf('(')+1,subtask.getCustomFieldValue(asset).toString().lastIndexOf(')'))
        log.warn "supplierKey: " + supplierKey.toString()
        log.warn "assetKey: " + assetKey.toString()
        def objects = iqlFacade.findObjectsByIQLAndSchema(28, "objectType = \"Supplier_Installation\" AND \"HARDWARE_REF\" = " + assetKey.toString() + " AND \"SUPPLIER_REF\" = " + supplierKey.toString() + " AND \"MAINTENANCE_ENABLED\" = \"PRIMARY SUPPLIER\"");
        if (objects.size() &gt; 0){
            //compilo sul sub-task il corretto oggetto Supplier_Installation nel campo OP_SUPPLIER
            log.warn objects[0].toString()
            suppInstKey = objects[0].toString().substring(objects[0].toString().lastIndexOf('(')+1,objects[0].toString().lastIndexOf(')'))
            log.warn "suppInstKey: " + suppInstKey
            
            mi = (MutableIssue) subtask;
            mi.setCustomFieldValue(supplierInstallation, [objectFacade.loadObjectBean(suppInstKey)]);
            ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
            
        }else{
            //verifico se esiste associazione con MAINTENANCE_ENABLED = "BACKUP SUPPLIER"
            objects = iqlFacade.findObjectsByIQLAndSchema(28, "objectType = \"Supplier_Installation\" AND \"HARDWARE_REF\" = " + assetKey.toString() + " AND \"SUPPLIER_REF\" = " + supplierKey.toString() + " AND \"MAINTENANCE_ENABLED\" = \"BACKUP SUPPLIER\"");
            if (objects.size() &gt; 0){
                //compilo sul sub-task il corretto oggetto Supplier_Installation nel campo OP_SUPPLIER
                log.warn objects[0].toString()
                suppInstKey = objects[0].toString().substring(objects[0].toString().lastIndexOf('(')+1,objects[0].toString().lastIndexOf(')'))
                log.warn "suppInstKey: " + suppInstKey
                
                mi = (MutableIssue) subtask;
                mi.setCustomFieldValue(supplierInstallation, [objectFacade.loadObjectBean(suppInstKey)]);
                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                
            }else{
                //genero l'oggetto Supplier_Installation con MAINTENANCE_ENABLED = "BACKUP SUPPLIER"
                def objectTypeSupplierInstallation = objectTypeFacade.loadObjectTypeBean(298);
                def newObjectBean = objectTypeSupplierInstallation.createMutableObjectBean();
                
                def objectAttributeBeans = new ArrayList();
                def SupplierInstallationObjects = new ArrayList();
                
                
                
                
                //Set Name
                def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(2682);     
                log.warn "supplierValue: " + supplierValue
                log.warn "supplierValue[0]: " + supplierValue[0]
                log.warn "Name: " + supplierValue[0].toString().substring(supplierValue[0].toString().lastIndexOf('(')+1,supplierValue[0].toString().lastIndexOf(')'))
                objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, nameObjectTypeAttributeBean, supplierValue[0].toString().substring(supplierValue[0].toString().lastIndexOf('(')+1,supplierValue[0].toString().lastIndexOf(')'))));
                newObjectBean.setObjectAttributeBeans(objectAttributeBeans);
                    
                /*Set MAINTENANCE_ENABLED*/
                def maintenanceObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(3033); 
                objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, maintenanceObjectTypeAttributeBean, "BACKUP SUPPLIER"));
                newObjectBean.setObjectAttributeBeans(objectAttributeBeans);
                
                /*Set SAP*/
                def sapObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(3026); 
                objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, sapObjectTypeAttributeBean, "false"));
                newObjectBean.setObjectAttributeBeans(objectAttributeBeans);
                
                /*Set SELECTED*/
                def selectedObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(3040); 
                objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, selectedObjectTypeAttributeBean, "true"));
                newObjectBean.setObjectAttributeBeans(objectAttributeBeans);
                
                /*Set DISABLED*/
                def disabledObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(3041); 
                objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, disabledObjectTypeAttributeBean, "false"));
                newObjectBean.setObjectAttributeBeans(objectAttributeBeans);
                
                /*Set DELETED*/
                def deletedObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(3036); 
                objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, deletedObjectTypeAttributeBean, "false"));
                newObjectBean.setObjectAttributeBeans(objectAttributeBeans);
                           
                /* Store the object into Insight. The new ObjectBean will be updated with an unique ID */
                try {
                    newObjectBean = objectFacade.storeObjectBean(newObjectBean);
                    log.warn("newObjectBean: " + newObjectBean);
                } catch (Exception vie) {
                    log.warn("Could not create issue due to validation exception:" + vie.getMessage());
                }
                
                /* Update SUPPLIER_REF on the newObject */		        
                def objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(3027).createMutable() //The id of the attribute
                
                /* Create the new attribute bean based on the value */
                def newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, supplierKey);
                /* Load the attribute bean */
                def objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), supplierKey);
                if (objectAttributeBean != null) {
                    /* If attribute exist reuse the old id for the new attribute */
                    newObjectAttributeBean.setId(objectAttributeBean.getId());
                }
                /* Store the object attribute into Insight. */
                try {
                    objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);
                } catch (Exception vie) {
                    log.warn("Could not update object attribute due to validation exception:" + vie.getMessage());
                }              
                
                /* Update HARDWARE_REF on the newObject */		        
                objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(3028).createMutable() //The id of the attribute
                
                /* Create the new attribute bean based on the value */
                newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, assetKey);
                /* Load the attribute bean */
                objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), assetKey);
                if (objectAttributeBean != null) {
                    /* If attribute exist reuse the old id for the new attribute */
                    newObjectAttributeBean.setId(objectAttributeBean.getId());
                }
                /* Store the object attribute into Insight. */
                try {
                    objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);
                } catch (Exception vie) {
                    log.warn("Could not update object attribute due to validation exception:" + vie.getMessage());
                } 
                
                /* Update SITE_REF on the newObject */		        
                objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(3031).createMutable() //The id of the attribute
                
                def assetObj = objectFacade.loadObjectBean(assetKey)
                log.warn "assetObj: " + assetObj.toString()
                siteRef = objectFacade.loadObjectAttributeBean(assetObj.getId(), "SITE_REF").getObjectAttributeValueBeans()
                log.warn "siteRef: " + siteRef.toString()
                siteKey = siteRef[0].toString().substring(siteRef[0].toString().lastIndexOf('(')+1,siteRef[0].toString().lastIndexOf(')'))
                
                /* Create the new attribute bean based on the value */
                newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, siteKey);
                /* Load the attribute bean */
                objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), assetKey);
                if (objectAttributeBean != null) {
                    /* If attribute exist reuse the old id for the new attribute */
                    newObjectAttributeBean.setId(objectAttributeBean.getId());
                }
                /* Store the object attribute into Insight. */
                try {
                    objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);
                } catch (Exception vie) {
                    log.warn("Could not update object attribute due to validation exception:" + vie.getMessage());
                } 
                
                /* Update CUSTOMER_REF on the newObject */		        
                objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(3032).createMutable() //The id of the attribute
                
                log.warn "siteKey: " + siteKey
                def siteObj = objectFacade.loadObjectBean("OPAA-" + siteKey)
                log.warn "siteObj: " + siteObj.toString()
                customerRef = objectFacade.loadObjectAttributeBean(siteObj.getId(), "CUSTOMER_REF").getObjectAttributeValueBeans()
                log.warn "customerRef: " + customerRef.toString()
                customerKey = customerRef[0].toString().substring(customerRef[0].toString().lastIndexOf('(')+1,customerRef[0].toString().lastIndexOf(')'))
                
                /* Create the new attribute bean based on the value */
                newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, customerKey);
                /* Load the attribute bean */
                objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), assetKey);
                if (objectAttributeBean != null) {
                    /* If attribute exist reuse the old id for the new attribute */
                    newObjectAttributeBean.setId(objectAttributeBean.getId());
                }
                /* Store the object attribute into Insight. */
                try {
                    objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);
                } catch (Exception vie) {
                    log.warn("Could not update object attribute due to validation exception:" + vie.getMessage());
                } 
                
                SupplierInstallationObjects.add(newObjectBean)
                
                mi = (MutableIssue) subtask;
                mi.setCustomFieldValue(supplierInstallation, SupplierInstallationObjects);
                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                
            }
        }
    }
}  </arg>
                  <arg name="field.filepath" />
                  <arg name="class.name">com.riadalabs.jira.plugins.insight.services.jira.postfunction.InsightPostFunction</arg>
                  <arg name="field.description">Check &amp; Update OP_SUPPLIER on each sub-task</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="561" name="Assegna a tecnici interni" view="fieldscreen">
          <meta name="opsbar-sequence">50</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20117</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">67d21477-5b8c-45a3-88f8-a691f3cb035f</arg>
                <arg name="FIELD_NOTES">OP_ASSET should be evaluated</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"cfValues['OP_ASSET'] != null || issue.issueType.name == 'Planned Maintenance Ticket'","scriptPath":null,"parameters":{}}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">10786a5c-e2b3-4bea-a0d1-46f9012a73e2</arg>
              <arg name="FIELD_NOTES">OP: Check Customer Contract</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.sql.Timestamp\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\ndef warnings = false\ndef missingContract = false\ndef expiredContract = false\ndef errors = false\n\ndef installation =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.asset'].toString())[0]\ndef automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyAssigned'] ? properties['cf.automaticallyAssigned'].toString() : \"OP_AUTOMATICALLY_ASSIGNED\")[0]\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]\n\ndef warningEmptyFields = new ArrayList()\ndef errorMandatoryFields = new ArrayList()\n \n//OP_ASSET\nif(issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"No\")){\n    //Check CUSTOMER_CONTRACT_REF on OP_ASSET\n    \n    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n    def asset = issue.getCustomFieldValue(installation)\n    log.debug \"asset: \" + asset\n    asset=asset.toString()\n    def assetKey = asset.substring(asset.lastIndexOf('(')+1,asset.lastIndexOf(')'))\n    def assetObject = objectFacade.loadObjectBean(assetKey)\n\tlog.debug \"assetObject.getId(): \" + assetObject.getId()\n    def obTriage\n    def customerContract, customerContractAttr\n    customerContractAttr = properties['iobj.hardware.contract'] ? properties['iobj.hardware.contract'].toString() : \"CUSTOMER_CONTRACT_REF\"\n    if(objectFacade.loadObjectAttributeBean(assetObject.getId(), customerContractAttr)){\n        obTriage = objectFacade.loadObjectAttributeBean(assetObject.getId(), customerContractAttr).createMutable()\n        customerContract = obTriage.getObjectAttributeValueBeans().toString()\n    }\n\n    log.debug \"customerContract: \" + customerContract\n    \n    if(customerContract == null){\n        warnings = true\n        missingContract = true\n    }else{\n        //get \"QT_VALID_T\" for that Technician\n        def contract=customerContract.toString()\n        log.debug \"contract:\" + contract\n        def contractId = contract.substring(contract.lastIndexOf('(')+1,contract.lastIndexOf(')'))\n        log.debug \"contractId:\" + contractId\n        log.debug \"properties['iobj.contract.validTo']: \" + properties['iobj.contract.validTo']\n        def expiringDate, expiringDateAttr\n        expiringDateAttr = properties['iobj.contract.validTo'] ? properties['iobj.contract.validTo'].toString() : \"QT_VALID_T\"\n        \n        if(objectFacade.loadObjectAttributeBean(contractId.toInteger(), customerContractAttr)){\n                obTriage = objectFacade.loadObjectAttributeBean(contractId.toInteger(), customerContractAttr).createMutable()\n                contractRef = obTriage.getObjectAttributeValueBeans().toString()\n                contractDO = contractRef.toString()\n                log.debug \"contractDO: \" + contractDO\n                contractDOKey = contractDO.substring(contractDO.lastIndexOf('(')+1,contractDO.lastIndexOf(')'))\n                log.debug \"contractDOKey: \" + contractDOKey\n                contractDOObject = objectFacade.loadObjectBean(properties['ischema.dbo'].toString() + \"-\" + contractDOKey)\n            log.debug \"expiringDateAttr: \" + expiringDateAttr\n                expiringDate = objectFacade.loadObjectAttributeBean(contractDOKey.toInteger(), expiringDateAttr) ? objectFacade.loadObjectAttributeBean(contractDOKey.toInteger(), expiringDateAttr).getObjectAttributeValueBeans().value[0] as Date : null\n        }\n\n        def todaysDateTime = (new Date())\n        log.debug \"expiringDate: \" + expiringDate\n        log.debug \"todaysDateTime: \" + todaysDateTime\n        if(expiringDate &lt; todaysDateTime){\n            warnings = true\n            expiredContract = true\n        }\n        \n    }\n \n}\n\ndef output = new ArrayList()\n\nif (!warnings){\n    return true\n}else{\n    if(warnings){\n        if(issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")){\n            //log.debug \"return true\"\n            return true\n        }else{\n            def wList = new ArrayList()\n\t\t\tdef wListConfirmEmptyContract = new ArrayList()\n            \n            if(missingContract){\n                wListConfirmEmptyContract.add(\"W\")\n                wListConfirmEmptyContract.add(\"CUSTOMER_CONTRACT_MISSING\")\n                wListConfirmEmptyContract.add(null)\n\n                wList.add(wListConfirmEmptyContract)\n            }\n            \n            if(expiredContract){\n                wListConfirmEmptyContract.add(\"W\")\n                wListConfirmEmptyContract.add(\"CUSTOMER_CONTRACT_EXPIRED\")\n                wListConfirmEmptyContract.add(null)\n\n                wList.add(wListConfirmEmptyContract)\n            }\n            output.add(wList)\n            throw new InvalidInputException('{\"W\":\"' + output.toString() + '\"}') \n        }\n    }\n}","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">7a272e30-dcd2-4e28-bf3b-a91abc51c017</arg>
              <arg name="FIELD_NOTES">SAP: update SN status &amp; Create SO</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef sapSN =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_NOTIFICATION\")[0]\n\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\n\nif(issue.issueType.name != \"Planned Maintenance Ticket\" &amp;&amp; issue.getCustomFieldValue(sapSN) != null){\n    requestMethod = \"POST\";\n\n    def body_req = []\n    body_req = [\n        \"issueKey\": issue.key,\n        \"status\": \"PLA\"\n    ] \n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n    log.debug \"baseURL SN: \" + baseURL\n    log.debug \"body_req SN: \" + body_req\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        \n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n        log.debug \"errors: \" +  json_object.errors.toString()\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-SAP-SN-UPDATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0].toString())\n        \n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }else{\n        /** SERVICE ORDER CREATION **/\n        body_req = [\n            \"issueKey\": issue.key\n        ] \n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\n\n        log.debug \"baseURL SO: \" + baseURL\n        log.debug \"body_req SO: \" + body_req\n        url = new URL(baseURL)\n        connection = (HttpURLConnection)url.openConnection();\n        connection.setRequestMethod(requestMethod);\n        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n        connection.setRequestProperty(\"Accept\", \"*/*\");\n        connection.setDoOutput(true);\n        connection.setDoInput(true);\n        connection.outputStream\n        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n        log.debug connection.outputStream\n        connection.connect();\n\n        output = new ArrayList()\n        eList = new ArrayList()\n        eListErrors = new ArrayList()\n        errorMsgs = new ArrayList()\n\n        if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n            log.debug \"url: \" + url\n            log.debug \"ResponseCode:\" + connection.getResponseCode()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n            \n            def outputMsg = ((HttpURLConnection)connection).errorStream.text\n    \t\tlog.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n            \n            def jsonSlurper = new JsonSlurper()\n            def json_object = jsonSlurper.parseText(outputMsg)\n            assert json_object instanceof Map  \n            log.debug \"message: \" +  json_object.message\n            log.debug \"errors: \" +  json_object.errors.toString()\n            \n            eListErrors.add(\"E\")\n            eListErrors.add(\"OP-SAP-SO-CREATE\")\n            errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n            eListErrors.add(errorMsgs)\n            eList.add(eListErrors)\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        }\n    }\n}\n ","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">583df9c7-fce8-41ca-ad87-8f516b4ff5c5</arg>
              <arg name="FIELD_NOTES">Delete previous attachments related to NEW Installation TKT Generation</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\ndef automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]\n\ndef requestMethod\ndef baseURL\n\n/*Script Variables*/\n//Per test da console\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-14062\")\n\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\n\n/*Rimozione allegato rapporto di intervento appena creato*/\n/* Get Insight IQL Facade from plugin accessor */\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\n\n/* Get Insight Object Facade from plugin accessor */\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n/* Get Insight Object Type Facade from plugin accessor */\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\");\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\n\n/* Get Insight Object Attribute Facade from plugin accessor */\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\");\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\n\n/* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include \" around value */\ndef objects = iqlFacade.findObjectsByIQLAndSchema(DBO, \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".\\\"\" + properties['iobj.attachmentCategory.newInstTkt'].toString() + \"\\\" = true AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"); // See the complete list of possible IQL on the Insight Query Language documentation page\n/* If this is a mandatory field you should be able to do this: */\nlog.debug \"IQL: \" + \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".\\\"\" + properties['iobj.attachmentCategory.newInstTkt'].toString() + \"\\\" = true AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"\n\nfor(iobj in objects){\n    /* UPDATE OJBECT DELETED VALUE */\n    def obj = objectFacade.loadObjectBean(iobj.getId());\n        \n    int attachmentDeleted = properties['iobj.attachment.deleted.id'] ? properties['iobj.attachment.deleted.id'].toString().toInteger() : 3265\n    \n    attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(attachmentDeleted); \n\n    newAttrib = obj.createObjectAttributeBean(attribType);\n    def newAttribValue = newAttrib.createObjectAttributeValueBean();\n\n    try {\n    \tnewAttribValue.setValue(attribType, true);\n    } catch (Exception vie) {\n     \tlog.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType + \" to \" + totalAmountSupp + \". Exiting.\");\n     \tlog.warn(SETINSIGHTVALUE: vie.getMessage());\n     \treturn false;\n    }\n    \n    def attribValues = newAttrib.getObjectAttributeValueBeans();\n    attribValues.add(newAttribValue);\n    newAttrib.setObjectAttributeValueBeans(attribValues);\n     \n    try {\n    \tnewAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\n    } catch (Exception vie) {\n    \tlog.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\n     \tlog.warn(SETINSIGHTVALUE: vie.getMessage());\n    return false;\n    }\n    log.info(\"SETINSIGHTVALUE: Successfully saved value\");\n}","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">ae3f3563-1b6f-4e50-a442-a0926310744c</arg>
              <arg name="FIELD_NOTES">OP: Doc Template generation - se New Installation OR First Ticket = true</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.opensymphony.workflow.WorkflowException;\nimport com.opensymphony.workflow.InvalidInputException\nimport groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport groovyx.net.http.HTTPBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef requestMethod\ndef baseURL\n\ndef firstTicket =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.firstTkt'].toString())[0]\n\nlog.debug issue.getIssueType().name\nlog.debug issue.getCustomFieldValue(firstTicket)\n\n\n/* REST API per Invio Notifica Email ONSITE_REPORT */\nrequestMethod = \"GET\";\ndef rescheduling =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.rescheduling'] ? properties['cf.rescheduling'].toString() : \"OP_CHANGE_SCHEDULING\")[0]\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm2'].toString())[0]\n\n\ndef first_ticket=false\ndef template=\"\"\nif(issue.getCustomFieldValue(firstTicket)!=null){\n    first_ticket=true\n    template=\"FIRST_TICKET%7CMANUFACTURER\"\n}else{\n    template=\"NEW_INSTALLATION_CREATE_TKT%7CMANUFACTURER\"\n}\n\nif(issue.getIssueType().name.toString().equals(properties['it.newInstallation'])){\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/document/generation/check?ISSUE_KEY=\"+ issue.key +\"&amp;DOC_CATEGORY=\" + template + \"&amp;ENABLED_FOR_FIRST_TICKET=\"+first_ticket+\"&amp;IMPORT_FROM=\"\n}else{\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/document/generation/check?ISSUE_KEY=\"+ issue.key +\"&amp;DOC_CATEGORY=\" + template + \"&amp;ENABLED_FOR_FIRST_TICKET=\"+first_ticket+\"&amp;IMPORT_FROM=OP_ASSET\"\n}\n\nlog.debug baseURL\nURL url = new URL(baseURL)\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.connect();\n\ndef output = new ArrayList()\ndef eList = new ArrayList()\ndef eListErrors = new ArrayList()\ndef errorMsgs = new ArrayList()\nlog.debug \"url: \" + url\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n    log.debug \"ErrorStream: \" + connection.getErrorStream().toString()\n    log.debug \"getHeaderFields(): \" + connection.getHeaderFields()\n    def outputMsg = ((HttpURLConnection)connection).errorStream.text\n    log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n    def jsonSlurper = new JsonSlurper()\n    def json_object = jsonSlurper.parseText(outputMsg)\n    assert json_object instanceof Map  \n    log.debug \"message: \" +  json_object.message\n\n    eListErrors.add(\"E\")\n    eListErrors.add(\"OP-DOCS\")\n    errorMsgs.add(connection.getResponseCode() + \" \" + json_object.message)\n    eListErrors.add(errorMsgs)\n    eList.add(eListErrors)\n\n    output.add(eList)\n    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n}\n","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">dd185790-4471-4435-99ff-f3aca12a451c</arg>
              <arg name="FIELD_NOTES">OP Email Notification: ASSIGN_TO_INTERNAL_TECHS</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.atlassian.jira.issue.link.IssueLink\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nCategory log = Category.getInstance(\"com.onresolve.jira.groovy.PostFunction\")\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\ndef requestMethod = \"POST\";\ndef relatesInIssueLink=false\ndef relatesOutIssueLink=false\ndef linkedTickets=new ArrayList()\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyAssigned'] ? properties['cf.automaticallyAssigned'].toString() : \"OP_AUTOMATICALLY_ASSIGNED\")[0]\n\n/*OP-1038: verifica ticket collegati*/\nList&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\nfor (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n\n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n        relatesInIssueLink=true\n        linkedTickets.add(issueLink.getSourceObject().toString())\n        log.debug \"Issue con relatesInIssueLink\"\n    }\n}\nList&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\nfor (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n\n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n        relatesOutIssueLink=true\n        linkedTickets.add(issueLink.getDestinationObject().toString())\n        log.debug \"Issue con relatesOutIssueLink\"\n    }\n}\n\ndef body_req\nif(relatesInIssueLink || relatesOutIssueLink){\n    body_req = [\n        \"templateName\": properties['tt.assignToInternalTechs'].toString(),\n        \"pec\": false,\n        \"issueKey\": issue.key,\n        \"linkedTickets\": linkedTickets\n    ]\n}else{\n    body_req = [\n        \"templateName\": properties['tt.assignToInternalTechs'].toString(),\n        \"pec\": false,\n        \"issueKey\": issue.key\n    ]\n}\n\nif(issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"No\")){\n    def baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/transaction/mail/send\"\n    URL url\n    url = new URL(baseURL)\n\n    log.debug \"baseURL: \" + baseURL\n    HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\tlog.debug \"ResponseCode:\" + connection.getResponseCode()\n    \n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        eListErrors.add(\"E\")\n        eListErrors.add(\"SENDMAIL\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n}\n","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="4">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">¶»ž</arg>
                  <arg name="field.name">customfield_23245</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="field.copyFieldSource2" />
                  <arg name="field.copyFieldSource1">customfield_23236</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="field.createTargetValue1" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyFieldMode1">OVERWRITE</arg>
                  <arg name="field.copyFieldDestination1">customfield_22653</arg>
                  <arg name="field.copyFieldSeparator1" />
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescopyValueFromOtherField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.CopyValueFromOtherFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22813</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="field.name">customfield_22639</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="691" name="Conferma e Pianifica senza notifiche" view="fieldscreen">
          <meta name="opsbar-sequence">50</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20112</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">a9655845-bd3d-4171-ab08-fdb0c420b5d2</arg>
                <arg name="FIELD_NOTES">OP_ASSET should be evaluated &amp;&amp; Issue type should be New Installation</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"cfValues['OP_ASSET'] != null || issue.issueType.name == 'Planned Maintenance Ticket'","scriptPath":null,"parameters":{}}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">e335982b-f860-4bed-a8cc-028022cff1ce</arg>
                <arg name="FIELD_NOTES">OP_SUPPLIER should be not null</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"import com.atlassian.jira.component.ComponentAccessor\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\ndef trovato=false\nfor (s in ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplier'].toString())){\n    if (issue.getCustomFieldValue(s) != null){\n        trovato=true\n    }\n}\nreturn trovato","scriptPath":null,"parameters":{}}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">de52ae8f-3a4f-4dd8-93de-2d990003847d</arg>
              <arg name="FIELD_NOTES">OP: Check Customer Contract</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.sql.Timestamp\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\ndef warnings = false\ndef missingContract = false\ndef expiredContract = false\ndef errors = false\n\ndef installation =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.asset'].toString())[0]\ndef automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyAssigned'] ? properties['cf.automaticallyAssigned'].toString() : \"OP_AUTOMATICALLY_ASSIGNED\")[0]\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]\n\ndef warningEmptyFields = new ArrayList()\ndef errorMandatoryFields = new ArrayList()\n\n//OP_ASSET\nif(issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"No\")){\n    //Check CUSTOMER_CONTRACT_REF on OP_ASSET\n    \n    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n    def asset = issue.getCustomFieldValue(installation)\n    log.debug \"asset: \" + asset\n    asset=asset.toString()\n    def assetKey = asset.substring(asset.lastIndexOf('(')+1,asset.lastIndexOf(')'))\n    def assetObject = objectFacade.loadObjectBean(assetKey)\n\tlog.debug \"assetObject.getId(): \" + assetObject.getId()\n    def obTriage\n    def customerContract, customerContractAttr\n    customerContractAttr = properties['iobj.hardware.contract'] ? properties['iobj.hardware.contract'].toString() : \"CUSTOMER_CONTRACT_REF\"\n    if(objectFacade.loadObjectAttributeBean(assetObject.getId(), customerContractAttr)){\n        obTriage = objectFacade.loadObjectAttributeBean(assetObject.getId(), customerContractAttr).createMutable()\n        customerContract = obTriage.getObjectAttributeValueBeans().toString()\n    }\n\n    log.debug \"customerContract: \" + customerContract\n    \n    if(customerContract == null){\n        warnings = true\n        missingContract = true\n    }else{\n        //get \"QT_VALID_T\" for that Technician\n        def contract=customerContract.toString()\n        log.debug \"contract:\" + contract\n        def contractId = contract.substring(contract.lastIndexOf('(')+1,contract.lastIndexOf(')'))\n        log.debug \"contractId:\" + contractId\n        log.debug \"properties['iobj.contract.validTo']: \" + properties['iobj.contract.validTo']\n        def expiringDate, expiringDateAttr\n        expiringDateAttr = properties['iobj.contract.validTo'] ? properties['iobj.contract.validTo'].toString() : \"QT_VALID_T\"\n        \n        if(objectFacade.loadObjectAttributeBean(contractId.toInteger(), customerContractAttr)){\n                obTriage = objectFacade.loadObjectAttributeBean(contractId.toInteger(), customerContractAttr).createMutable()\n                contractRef = obTriage.getObjectAttributeValueBeans().toString()\n                contractDO = contractRef.toString()\n                log.debug \"contractDO: \" + contractDO\n                contractDOKey = contractDO.substring(contractDO.lastIndexOf('(')+1,contractDO.lastIndexOf(')'))\n                log.debug \"contractDOKey: \" + contractDOKey\n                contractDOObject = objectFacade.loadObjectBean(properties['ischema.dbo'].toString() + \"-\" + contractDOKey)\n            log.debug \"expiringDateAttr: \" + expiringDateAttr\n                expiringDate = objectFacade.loadObjectAttributeBean(contractDOKey.toInteger(), expiringDateAttr) ? objectFacade.loadObjectAttributeBean(contractDOKey.toInteger(), expiringDateAttr).getObjectAttributeValueBeans().value[0] as Date : null\n        }\n\n        def todaysDateTime = (new Date())\n        log.debug \"expiringDate: \" + expiringDate\n        log.debug \"todaysDateTime: \" + todaysDateTime\n        if(expiringDate &lt; todaysDateTime){\n            warnings = true\n            expiredContract = true\n        }\n        \n    }\n \n}\n\ndef output = new ArrayList()\n\nif (!warnings){\n    return true\n}else{\n    if(warnings){\n        if(issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")){\n            //log.debug \"return true\"\n            return true\n        }else{\n            def wList = new ArrayList()\n\t\t\tdef wListConfirmEmptyContract = new ArrayList()\n            \n            if(missingContract){\n                wListConfirmEmptyContract.add(\"W\")\n                wListConfirmEmptyContract.add(\"CUSTOMER_CONTRACT_MISSING\")\n                wListConfirmEmptyContract.add(null)\n\n                wList.add(wListConfirmEmptyContract)\n            }\n            \n            if(expiredContract){\n                wListConfirmEmptyContract.add(\"W\")\n                wListConfirmEmptyContract.add(\"CUSTOMER_CONTRACT_EXPIRED\")\n                wListConfirmEmptyContract.add(null)\n\n                wList.add(wListConfirmEmptyContract)\n            }\n            output.add(wList)\n            throw new InvalidInputException('{\"W\":\"' + output.toString() + '\"}') \n        }\n    }\n}","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">a80e150a-63e9-41ea-964a-c564139e7864</arg>
              <arg name="FIELD_NOTES">SAP: update SN status &amp; Create SO</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef sapSN =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_NOTIFICATION\")[0]\n\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\n\nif(issue.issueType.name != \"Planned Maintenance Ticket\" &amp;&amp; issue.getCustomFieldValue(sapSN) != null){\n    requestMethod = \"POST\";\n\n    def body_req = []\n    body_req = [\n        \"issueKey\": issue.key,\n        \"status\": \"PLA\"\n    ] \n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n    log.debug \"baseURL SN: \" + baseURL\n    log.debug \"body_req SN: \" + body_req\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        \n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n        log.debug \"errors: \" +  json_object.errors.toString()\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-SAP-SN-UPDATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0].toString())\n        \n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }else{\n        /** SERVICE ORDER CREATION **/\n        body_req = [\n            \"issueKey\": issue.key\n        ] \n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\n\n        log.debug \"baseURL SO: \" + baseURL\n        log.debug \"body_req SO: \" + body_req\n        url = new URL(baseURL)\n        connection = (HttpURLConnection)url.openConnection();\n        connection.setRequestMethod(requestMethod);\n        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n        connection.setRequestProperty(\"Accept\", \"*/*\");\n        connection.setDoOutput(true);\n        connection.setDoInput(true);\n        connection.outputStream\n        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n        log.debug connection.outputStream\n        connection.connect();\n\n        output = new ArrayList()\n        eList = new ArrayList()\n        eListErrors = new ArrayList()\n        errorMsgs = new ArrayList()\n\t\tlog.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n            log.debug \"url: \" + url\n            log.debug \"ResponseCode:\" + connection.getResponseCode()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n            \n            def outputMsg = ((HttpURLConnection)connection).errorStream.text\n    \t\tlog.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n            \n            def jsonSlurper = new JsonSlurper()\n            def json_object = jsonSlurper.parseText(outputMsg)\n            assert json_object instanceof Map  \n            log.debug \"message: \" +  json_object.message\n            log.debug \"errors: \" +  json_object.errors.toString()\n            \n            eListErrors.add(\"E\")\n            eListErrors.add(\"OP-SAP-SO-CREATE\")\n            errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n            eListErrors.add(errorMsgs)\n            eList.add(eListErrors)\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        }\n    }\n}\n ","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="4">
              <post-functions>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="field.name">customfield_22639</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">0db4b388-06a4-49d8-ace8-c098c9d1a5c2</arg>
                  <arg name="FIELD_NOTES">OP: Check linkedTickets &amp; Fast-Transact them</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.link.IssueLink\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nlog.warn \"${issue.key} Transazione ASSIGN TO SUPPLIER - Post Function check linkedIssues\"\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyAssigned'] ? properties['cf.automaticallyAssigned'].toString() : \"OP_AUTOMATICALLY_ASSIGNED\")[0]\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\n\n//Per test da console\n//issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-276\")\n\n/*PROD*/\nASSIGN_TO_SUPPLIER = properties['wf.tr.assignToSupplierAndScheduleNoMail'] ? properties['wf.tr.assignToSupplierAndScheduleNoMail'].toInteger() : 691\n\ndef user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\ndef issueService = ComponentAccessor.getIssueService()\n\n/*Se eseguo la confirm to customer su un ticket con 1 o + ticket collegati, verifico e sposto in automatico gli eventuali ticket collegati*/\nlog.warn \"verifico e sposto in automatico gli eventuali ticket collegati\"\nlog.debug issue.getIssueType().getName()\nlog.debug issue.getCustomFieldValue(automaticallyConfirmed)\nif((issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"No\"))){\n    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\n    log.debug \"allInIssueLink: \" + allInIssueLink\n    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            log.warn \"Issue con relatesInIssueLink\"\n            /*Eseguire transazione di stato della sourceIssue*/\n            def linkedIssue = issueLink.getSourceObject()\n            def linkedIssueStatus = linkedIssue.getStatus()\n            def transitionId\n            if(linkedIssueStatus.name == properties['wf.open'].toString()){\n                transitionId=ASSIGN_TO_SUPPLIER\n            }\n            if(transitionId==ASSIGN_TO_SUPPLIER){\n                // Prepare our input for the transition\n                def issueInputParameters = issueService.newIssueInputParameters()\n                issueInputParameters.with {\n                    setSkipScreenCheck(true)\n                }\n                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)\n                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), \"Yes\") \n                //log.warn \"issueInputParameters: \" + issueInputParameters\n                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n                def mi = (MutableIssue) linkedIssue\n\n                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)\n                log.warn \"fieldConfig: \" + fieldConfig\n                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())\n\n                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n                issueIndexingService.reIndex(linkedIssue)\n                log.warn \"Updated customfield - issue linkata\"\n\n                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)\n                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {\n                    // Perform the transition\n                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))\n                    if (! issueResult.isValid()) {\n                        log.warn(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n                    }else{\n                        log.warn(\"Transazione fatta 79 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}\")\n                    }\n                } else {\n                    log.warn(\"Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}\")\n                }\n            }\n        }\n    }\n\n    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\n    log.debug \"allOutIssueLink: \" + allOutIssueLink\n    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            log.warn \"Issue con relatesOutIssueLink\"\n            /*Eseguire transazione di stato della destinationIssue*/\n            def linkedIssue = issueLink.getDestinationObject()\n            def linkedIssueStatus = linkedIssue.getStatus()\n            def transitionId\n            log.warn \"linkedIssue: \" + linkedIssue\n            log.warn \"linkedIssueStatus.name: \" + linkedIssueStatus.name\n            if(linkedIssueStatus.name == properties['wf.open'].toString()){\n                transitionId=ASSIGN_TO_SUPPLIER\n            }\n\n            if(transitionId==ASSIGN_TO_SUPPLIER){\n                // Prepare our input for the transition\n                def issueInputParameters = issueService.newIssueInputParameters()\n                issueInputParameters.with {\n                    setSkipScreenCheck(true)\n                }\n                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)\n                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), \"Yes\") \n\n                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n                def mi = (MutableIssue) linkedIssue\n\n                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)\n                log.warn \"fieldConfig: \" + fieldConfig\n                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())\n\n                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n                issueIndexingService.reIndex(linkedIssue)\n                log.warn \"Updated customfield - issue linkata\"\n\n                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {\n                    // Perform the transition\n                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))\n                    if (! issueResult.isValid()) {\n                        log.warn(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n                    }else{\n                        log.warn(\"Transazione fatta 122 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}\")\n                    }\n                } else {\n                    log.warn(\"Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}\")\n                }\n            }\n\n        }\n    }\n}","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="751" name="Assegna a Fornitore senza notifiche" view="fieldscreen">
          <meta name="opsbar-sequence">50</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19904</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">93d6b54e-ad03-41e6-82a8-a6d0a675107e</arg>
                <arg name="FIELD_NOTES">OP_ASSET should be evaluated</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"cfValues['OP_ASSET'] != null || issue.issueType.name == 'Planned Maintenance Ticket'","scriptPath":null}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">862e4160-0f10-49db-afe0-9dc656448701</arg>
                <arg name="FIELD_NOTES">OP_SUPPLIER should be evaluated</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"import com.atlassian.jira.component.ComponentAccessor\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\ndef trovato=false\nfor (s in ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplier'].toString())){\n    if (issue.getCustomFieldValue(s) != null){\n        trovato=true\n    }\n}\nreturn trovato\n","scriptPath":null,"parameters":{}}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE">AAS-15446</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">339d339e-1008-47f6-86fc-0fa1b991ccd2</arg>
              <arg name="FIELD_NOTES">OP: Check Customer Contract</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.sql.Timestamp\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\ndef warnings = false\ndef missingContract = false\ndef expiredContract = false\ndef errors = false\n\ndef installation =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.asset'].toString())[0]\ndef automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyAssigned'] ? properties['cf.automaticallyAssigned'].toString() : \"OP_AUTOMATICALLY_ASSIGNED\")[0]\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]\n\ndef warningEmptyFields = new ArrayList()\ndef errorMandatoryFields = new ArrayList()\n \n//OP_ASSET\nif(issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"No\")){\n    //Check CUSTOMER_CONTRACT_REF on OP_ASSET\n    \n    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n    def asset = issue.getCustomFieldValue(installation)\n    log.debug \"asset: \" + asset\n    asset=asset.toString()\n    def assetKey = asset.substring(asset.indexOf('(')+1,asset.indexOf(')'))\n    def assetObject = objectFacade.loadObjectBean(assetKey)\n\tlog.debug \"assetObject.getId(): \" + assetObject.getId()\n    def obTriage\n    def customerContract, customerContractAttr\n    customerContractAttr = properties['iobj.hardware.contract'] ? properties['iobj.hardware.contract'].toString() : \"CUSTOMER_CONTRACT_REF\"\n    if(objectFacade.loadObjectAttributeBean(assetObject.getId(), customerContractAttr)){\n        obTriage = objectFacade.loadObjectAttributeBean(assetObject.getId(), customerContractAttr).createMutable()\n        customerContract = obTriage.getObjectAttributeValueBeans().toString()\n    }\n\n    log.debug \"customerContract: \" + customerContract\n    \n    if(customerContract == null){\n        warnings = true\n        missingContract = true\n    }else{\n        //get \"QT_VALID_T\" for that Technician\n        def contract=customerContract.toString()\n        log.debug \"contract:\" + contract\n        def contractId = contract.substring(contract.indexOf('(')+1,contract.indexOf(')'))\n        log.debug \"contractId:\" + contractId\n        log.debug \"properties['iobj.contract.validTo']: \" + properties['iobj.contract.validTo']\n        def expiringDate, expiringDateAttr\n        expiringDateAttr = properties['iobj.contract.validTo'] ? properties['iobj.contract.validTo'].toString() : \"QT_VALID_T\"\n        \n        if(objectFacade.loadObjectAttributeBean(contractId.toInteger(), customerContractAttr)){\n                obTriage = objectFacade.loadObjectAttributeBean(contractId.toInteger(), customerContractAttr).createMutable()\n                contractRef = obTriage.getObjectAttributeValueBeans().toString()\n                contractDO = contractRef.toString()\n                log.debug \"contractDO: \" + contractDO\n                contractDOKey = contractDO.substring(contractDO.indexOf('(')+1,contractDO.indexOf(')'))\n                log.debug \"contractDOKey: \" + contractDOKey\n                contractDOObject = objectFacade.loadObjectBean(properties['ischema.dbo'].toString() + \"-\" + contractDOKey)\n            log.debug \"expiringDateAttr: \" + expiringDateAttr\n                expiringDate = objectFacade.loadObjectAttributeBean(contractDOKey.toInteger(), expiringDateAttr) ? objectFacade.loadObjectAttributeBean(contractDOKey.toInteger(), expiringDateAttr).getObjectAttributeValueBeans().value[0] as Date : null\n        }\n\n        def todaysDateTime = (new Date())\n        log.debug \"expiringDate: \" + expiringDate\n        log.debug \"todaysDateTime: \" + todaysDateTime\n        if(expiringDate &lt; todaysDateTime){\n            warnings = true\n            expiredContract = true\n        }\n        \n    }\n \n}\n\ndef output = new ArrayList()\n\nif (!warnings){\n    return true\n}else{\n    if(warnings){\n        if(issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")){\n            //log.debug \"return true\"\n            return true\n        }else{\n            def wList = new ArrayList()\n\t\t\tdef wListConfirmEmptyContract = new ArrayList()\n            \n            if(missingContract){\n                wListConfirmEmptyContract.add(\"W\")\n                wListConfirmEmptyContract.add(\"CUSTOMER_CONTRACT_MISSING\")\n                wListConfirmEmptyContract.add(null)\n\n                wList.add(wListConfirmEmptyContract)\n            }\n            \n            if(expiredContract){\n                wListConfirmEmptyContract.add(\"W\")\n                wListConfirmEmptyContract.add(\"CUSTOMER_CONTRACT_EXPIRED\")\n                wListConfirmEmptyContract.add(null)\n\n                wList.add(wListConfirmEmptyContract)\n            }\n            output.add(wList)\n            throw new InvalidInputException('{\"W\":\"' + output.toString() + '\"}') \n        }\n    }\n}","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">6411a0f5-9ae7-4a56-a7f5-a857227a153e</arg>
              <arg name="FIELD_NOTES">OP: Check Re-Schedule Flag</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.sql.Timestamp\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\ndef warnings = false\ndef missingContract = false\ndef expiredContract = false\ndef errors = false\n\ndef rescheduling =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.rescheduling'] ? properties['cf.rescheduling'].toString() : \"OP_CHANGE_SCHEDULING\")[0]\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm2'].toString())[0]\ndef firstTicket =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.firstTkt'].toString())[0]\n\ndef warningEmptyFields = new ArrayList()\ndef errorMandatoryFields = new ArrayList()\n \nif(issue.getCustomFieldValue(rescheduling).toString().equals(\"Yes\") &amp;&amp; (issue.getIssueType().name.toString().equals(properties['it.newInstallation']) || issue.getCustomFieldValue(firstTicket)!=null)){\n    //Ask confirmation to delete and create again New Installation attachments\n    warnings = true\n}\n\ndef output = new ArrayList()\n\nif (!warnings){\n    return true\n}else{\n    if(warnings){\n        if(issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")){\n            //log.debug \"return true\"\n            return true\n        }else{\n            def wList = new ArrayList()\n\t\t\tdef wListConfirmEmptyContract = new ArrayList()\n            \n            wListConfirmEmptyContract.add(\"W\")\n            wListConfirmEmptyContract.add(\"NEW_DOCS_GENERATION\")\n            wListConfirmEmptyContract.add(null)\n\n            wList.add(wListConfirmEmptyContract)\n        \n            output.add(wList)\n            throw new InvalidInputException('{\"W\":\"' + output.toString() + '\"}') \n        }\n    }\n}","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">136ddcac-3447-4136-8695-c845548ae5b2</arg>
              <arg name="FIELD_NOTES">Delete previous attachments related to NEW Installation TKT Generation</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\ndef automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]\n\ndef rescheduling =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.rescheduling'] ? properties['cf.rescheduling'].toString() : \"OP_CHANGE_SCHEDULING\")[0]\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm2'].toString())[0]\n\ndef requestMethod\ndef baseURL\n\n/*Script Variables*/\n//Per test da console\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-14062\")\n\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\n\n/*Rimozione allegato rapporto di intervento appena creato*/\n/* Get Insight IQL Facade from plugin accessor */\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\n\n/* Get Insight Object Facade from plugin accessor */\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n/* Get Insight Object Type Facade from plugin accessor */\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\");\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\n\n/* Get Insight Object Attribute Facade from plugin accessor */\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\");\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\n\n\nif(issue.getCustomFieldValue(rescheduling).toString().equals(\"Yes\") &amp;&amp; issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")){\n\n    /* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include \" around value */\n    def objects = iqlFacade.findObjectsByIQLAndSchema(DBO, \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".\\\"\" + properties['iobj.attachmentCategory.newInstTkt'].toString() + \"\\\" = true AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"); // See the complete list of possible IQL on the Insight Query Language documentation page\n    /* If this is a mandatory field you should be able to do this: */\n    log.debug \"IQL: \" + \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".\\\"\" + properties['iobj.attachmentCategory.newInstTkt'].toString() + \"\\\" = true AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"\n\n    for(iobj in objects){\n        /* UPDATE OJBECT DELETED VALUE */\n        def obj = objectFacade.loadObjectBean(iobj.getId());\n\n        int attachmentDeleted = properties['iobj.attachment.deleted.id'] ? properties['iobj.attachment.deleted.id'].toString().toInteger() : 3265\n\n        attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(attachmentDeleted); \n\n        newAttrib = obj.createObjectAttributeBean(attribType);\n        def newAttribValue = newAttrib.createObjectAttributeValueBean();\n\n        try {\n            newAttribValue.setValue(attribType, true);\n        } catch (Exception vie) {\n            log.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType + \" to \" + totalAmountSupp + \". Exiting.\");\n            log.warn(SETINSIGHTVALUE: vie.getMessage());\n            return false;\n        }\n\n        def attribValues = newAttrib.getObjectAttributeValueBeans();\n        attribValues.add(newAttribValue);\n        newAttrib.setObjectAttributeValueBeans(attribValues);\n\n        try {\n            newAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\n        } catch (Exception vie) {\n            log.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\n            log.warn(SETINSIGHTVALUE: vie.getMessage());\n        return false;\n        }\n        log.info(\"SETINSIGHTVALUE: Successfully saved value\");\n    }\n    \n}","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">17f1689e-675a-4677-aec8-021a2640fd0c</arg>
              <arg name="FIELD_NOTES">OP: Doc Template generation - se New Installation OR First Ticket = true</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.opensymphony.workflow.WorkflowException;\nimport com.opensymphony.workflow.InvalidInputException\nimport groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport groovyx.net.http.HTTPBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef requestMethod\ndef baseURL\n\ndef firstTicket =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.firstTkt'].toString())[0]\n\nlog.debug issue.getIssueType().name\nlog.debug issue.getCustomFieldValue(firstTicket)\n\n\n/* REST API per Invio Notifica Email ONSITE_REPORT */\nrequestMethod = \"GET\";\ndef rescheduling =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.rescheduling'] ? properties['cf.rescheduling'].toString() : \"OP_CHANGE_SCHEDULING\")[0]\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm2'].toString())[0]\n\nif(issue.getCustomFieldValue(rescheduling).toString().equals(\"Yes\") &amp;&amp; issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\") &amp;&amp; (issue.getIssueType().name.toString().equals(properties['it.newInstallation']) || issue.getCustomFieldValue(firstTicket)!=null)){\n    def first_ticket=false\n    def template=\"\"\n    if(issue.getCustomFieldValue(firstTicket)!=null){\n        first_ticket=true\n        template=\"FIRST_TICKET%7CMANUFACTURER\"\n    }else{\n        template=\"NEW_INSTALLATION_CREATE_TKT%7CMANUFACTURER\"\n    }\n    \n    if(issue.getIssueType().name.toString().equals(properties['it.newInstallation'])){\n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/document/generation/check?ISSUE_KEY=\"+ issue.key +\"&amp;DOC_CATEGORY=\" + template + \"&amp;ENABLED_FOR_FIRST_TICKET=\"+first_ticket+\"&amp;IMPORT_FROM=\"\n    }else{\n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/document/generation/check?ISSUE_KEY=\"+ issue.key +\"&amp;DOC_CATEGORY=\" + template + \"&amp;ENABLED_FOR_FIRST_TICKET=\"+first_ticket+\"&amp;IMPORT_FROM=OP_ASSET\"\n    }\n    \n    log.debug baseURL\n    URL url = new URL(baseURL)\n    HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\tlog.debug \"url: \" + url\n    \n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        log.debug \"ErrorStream: \" + connection.getErrorStream().toString()\n        log.debug \"getHeaderFields(): \" + connection.getHeaderFields()\n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-DOCS\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.message)\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n}\n","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">3bddafa4-9601-4ff0-9db1-83ec1b0f0850</arg>
              <arg name="FIELD_NOTES">Generate SN for old tickets</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef SN =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_NOTIFICATION\")[0]\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\n\nif(issue.getCustomFieldValue(SN) == null &amp;&amp; issue.issueType.name != \"Planned Maintenance Ticket\"){\n    requestMethod = \"POST\";\n\n    def body_req = []\n    body_req = [\n        \"issueKey\": issue.key,\n        \"status\": \"OPE\"\n    ] \n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n    log.debug \"baseURL SN: \" + baseURL\n    log.debug \"body_req SN: \" + body_req\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"201\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        \n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n        log.debug \"errors: \" +  json_object.errors.toString()\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-SAP-SN-UPDATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n}\n ","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="2">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="field.name">customfield_22639</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">×ýÙÇÕ×8msÑ§xóÖ»ß[á§xkÎ|</arg>
                  <arg name="FIELD_NOTES">OP: New Installation - Check linkedTickets &amp; Fast-Transact them</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.link.IssueLink\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nCategory log = Category.getInstance(\"com.onresolve.jira.groovy.PostFunction\")\nlog.setLevel(org.apache.log4j.Level.WARN)\n\nlog.warn \"${issue.key} Transazione ASSIGN TO SUPPLIER - Post Function check linkedIssues\"\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyAssigned'] ? properties['cf.automaticallyAssigned'].toString() : \"OP_AUTOMATICALLY_ASSIGNED\")[0]\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\n\nIssue issue = issue\n//Per test da console\n//issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-276\")\n\n/*DEV*/\nASSIGN_TO_SUPPLIER = properties['wf.tr.assignToSupplier'] ? properties['wf.tr.assignToSupplier'] : 51\n\n/*PROD*/\n//CONFIRM_TO_CUSTOMER\n\ndef user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\ndef issueService = ComponentAccessor.getIssueService()\n\n/*Se eseguo la confirm to customer su un ticket con 1 o + ticket collegati, verifico e sposto in automatico gli eventuali ticket collegati*/\nlog.warn \"verifico e sposto in automatico gli eventuali ticket collegati\"\n\nif(issue.getIssueType().getName() == properties['it.newInstallation'].toString() &amp;&amp; issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"No\")){\n    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            log.warn \"Issue con relatesInIssueLink\"\n            /*Eseguire transazione di stato della sourceIssue*/\n            def linkedIssue = issueLink.getSourceObject()\n            def linkedIssueStatus = linkedIssue.getStatus()\n            def transitionId\n            if(linkedIssueStatus.name == properties['wf.open'].toString()){\n                transitionId=ASSIGN_TO_SUPPLIER\n            }\n            if(transitionId==ASSIGN_TO_SUPPLIER){\n                // Prepare our input for the transition\n                def issueInputParameters = issueService.newIssueInputParameters()\n                issueInputParameters.with {\n                    setSkipScreenCheck(true)\n                }\n                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)\n                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), \"Yes\") \n                //log.warn \"issueInputParameters: \" + issueInputParameters\n                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n                def mi = (MutableIssue) linkedIssue\n\n                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)\n                log.warn \"fieldConfig: \" + fieldConfig\n                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())\n\n                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n                issueIndexingService.reIndex(linkedIssue)\n                log.warn \"Updated customfield - issue linkata\"\n\n                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)\n                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {\n                    // Perform the transition\n                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))\n                    if (! issueResult.isValid()) {\n                        log.warn(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n                    }else{\n                        log.warn(\"Transazione fatta 79 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}\")\n                    }\n                } else {\n                    log.warn(\"Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}\")\n                }\n            }\n        }\n    }\n\n    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            log.warn \"Issue con relatesOutIssueLink\"\n            /*Eseguire transazione di stato della destinationIssue*/\n            def linkedIssue = issueLink.getDestinationObject()\n            def linkedIssueStatus = linkedIssue.getStatus()\n            def transitionId\n            log.warn \"linkedIssue: \" + linkedIssue\n            log.warn \"linkedIssueStatus.name: \" + linkedIssueStatus.name\n            if(linkedIssueStatus.name == properties['wf.open'].toString()){\n                transitionId=ASSIGN_TO_SUPPLIER\n            }\n\n            if(transitionId==ASSIGN_TO_SUPPLIER){\n                // Prepare our input for the transition\n                def issueInputParameters = issueService.newIssueInputParameters()\n                issueInputParameters.with {\n                    setSkipScreenCheck(true)\n                }\n                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)\n                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), \"Yes\") \n\n                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n                def mi = (MutableIssue) linkedIssue\n\n                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)\n                log.warn \"fieldConfig: \" + fieldConfig\n                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())\n\n                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n                issueIndexingService.reIndex(linkedIssue)\n                log.warn \"Updated customfield - issue linkata\"\n\n                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {\n                    // Perform the transition\n                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))\n                    if (! issueResult.isValid()) {\n                        log.warn(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n                    }else{\n                        log.warn(\"Transazione fatta 122 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}\")\n                    }\n                } else {\n                    log.warn(\"Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}\")\n                }\n            }\n\n        }\n    }\n}","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService
import org.apache.log4j.Category
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.link.IssueLink
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.WARN)

log.warn "${issue.key} Transazione ASSIGN TO SUPPLIER - Post Function check linkedIssues"

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyAssigned'] ? properties['cf.automaticallyAssigned'].toString() : "OP_AUTOMATICALLY_ASSIGNED")[0]
IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)

Issue issue = issue
//Per test da console
//issue = issueManager.getIssueByKeyIgnoreCase("OPUT-276")

/*DEV*/
ASSIGN_TO_SUPPLIER = properties['wf.tr.assignToSupplier'] ? properties['wf.tr.assignToSupplier'] : 51

/*PROD*/
//CONFIRM_TO_CUSTOMER

def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
def issueService = ComponentAccessor.getIssueService()

/*Se eseguo la confirm to customer su un ticket con 1 o + ticket collegati, verifico e sposto in automatico gli eventuali ticket collegati*/
log.warn "verifico e sposto in automatico gli eventuali ticket collegati"

if(issue.getIssueType().getName() == properties['it.newInstallation'].toString() &amp;&amp; issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals("No")){
    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            log.warn "Issue con relatesInIssueLink"
            /*Eseguire transazione di stato della sourceIssue*/
            def linkedIssue = issueLink.getSourceObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            def transitionId
            if(linkedIssueStatus.name == properties['wf.open'].toString()){
                transitionId=ASSIGN_TO_SUPPLIER
            }
            if(transitionId==ASSIGN_TO_SUPPLIER){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(true)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                //log.warn "issueInputParameters: " + issueInputParameters
                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"

                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 79 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }
        }
    }

    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            log.warn "Issue con relatesOutIssueLink"
            /*Eseguire transazione di stato della destinationIssue*/
            def linkedIssue = issueLink.getDestinationObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            def transitionId
            log.warn "linkedIssue: " + linkedIssue
            log.warn "linkedIssueStatus.name: " + linkedIssueStatus.name
            if(linkedIssueStatus.name == properties['wf.open'].toString()){
                transitionId=ASSIGN_TO_SUPPLIER
            }

            if(transitionId==ASSIGN_TO_SUPPLIER){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(true)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 

                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"

                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 122 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }

        }
    }
}</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="831" name="Completed to be Closed">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">uıyk¾^÷vøs]¸k½ã×ºõÖÜiï]ãÇ¶{Ç¸</arg>
              <arg name="FIELD_NOTES">OP: REST API: OP per consuntivazione ticket</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\ndef automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]\n\ndef requestMethod\ndef baseURL\n\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\nboolean unatantum=true\n\n/*!!Da rimuovere appena risolti i bug!!*/\n//if(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance'])){\n\n    /*OP-1038: la contabilizzazione dovr\u00e0 prevedere le unatantum rates solo se il ticket non \u00e8 stato chiuso in automatico*/\n    if(issue.getCustomFieldValue(automaticallyClosed)!=null &amp;&amp; issue.getCustomFieldValue(automaticallyClosed).toString().equals(\"Yes\")){\n        unatantum=false    \n    }\n    log.debug \"Consuntivazione ticket \" + issue.key + \" con unatantum: \" + unatantum\n\n    /* REST API per Contabilizzazione Intervento */\n    requestMethod = \"GET\";\n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/AA/ticket/issueKey/\" + issue.key.toString() + \"/close?um=\"+unatantum.toString()\n    log.debug \"baseUrl: \" + baseURL\n\n    /*Definire parametro di input unatantum=true|false in base al valore della variabile booleana unatantum*/\n    URL url = new URL(baseURL)\n    HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.connect();\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n    //IssueIndexingService issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\n    //issueIndexingService.reIndex(issueManager.getIssueObject(issue.key.toString()))\n\n    //def unaTantumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OPAA_UNATANTUM_RATES\")[0]\n    //log.warn \"unaTantumRates: \" + issue.getCustomFieldValue(unaTantumRates)\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        log.debug \"Response: \" + connection\n\n        /*ROLLBACK*/\n        /*Rimozione allegato rapporto di intervento appena creato*/\n        /* Get Insight IQL Facade from plugin accessor */\n        Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \n        def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\n\n        /* Get Insight Object Facade from plugin accessor */\n        Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");\n        def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n        /* Get Insight Object Type Facade from plugin accessor */\n        Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\");\n        def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\n\n        /* Get Insight Object Attribute Facade from plugin accessor */\n        Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n        def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n\n        Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\");\n        def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\n\n        /* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include \" around value */\n        def objects = iqlFacade.findObjectsByIQLAndSchema(DBO, \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".\\\"\" + properties['iobj.attachmentCategory.name'].toString() + \"\\\" = \\\"\" + properties['iobj.attachmentCategory.objs.rappIntFAAC'].toString() + \"\\\" AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"); // See the complete list of possible IQL on the Insight Query Language documentation page\n        /* If this is a mandatory field you should be able to do this: */\n        log.info(\"Insight object: \" + objects[0]);\n\n        if(objects[0]){\n            /* UPDATE OJBECT DELETED VALUE */\n            def obTriage = objectFacade.loadObjectAttributeBean(objects[0].getId(), properties['iobj.attachmentCategory.deleted'].toString()).createMutable()  \n            def value = obTriage.getObjectAttributeValueBeans()\n\n            def valueBean = obTriage.createObjectAttributeValueBean()\n            valueBean.setValue(objectTypeAttributeFacade.loadObjectTypeAttributeBean(obTriage.getObjectTypeAttributeId()), true)\n            /*Clean actual value*/\n            value.clear()\n            value.add(valueBean);\n            obTriage.setObjectAttributeValueBeans(value)\n\n            //Update OJBECT attribute value\n            try {\n                obTriage = objectFacade.storeObjectAttributeBean(obTriage);\n            } catch (Exception vie) {\n                log.warn(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\n            }\n        }\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-TKT-ACCOUNTING\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }else{\n        /*OP-1038: consuntivazione terminata correttamente - se \u00e8 stata eseguita con unatantum=true setto a No il campo OPAA_AUTOMATICALLY_CLOSED*/\n        if(unatantum){\n            def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n            def mi = (MutableIssue) issue\n\n            def fieldConfig = automaticallyClosed.getRelevantConfig(issue)\n            log.debug \"fieldConfig: \" + fieldConfig\n            def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"No\" }\n            automaticallyClosed.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())\n\n            ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n            issueIndexingService.reIndex(issue)\n            log.debug \"Updated customfield - issue principale ${issue.getCustomFieldValue(automaticallyClosed)}\"\n        }\n    }\n//}","scriptPath":null,"parameters":{}}</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService
import org.apache.log4j.Category
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();

IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)
def automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]

def requestMethod
def baseURL

int OPAA = properties['ischema.aa.id'].toString().toInteger()
int DBO = properties['ischema.dbo.id'].toString().toInteger()
boolean unatantum=true

/*OP-1038: la contabilizzazione dovrà prevedere le unatantum rates solo se il ticket non è stato chiuso in automatico*/
if(issue.getCustomFieldValue(automaticallyClosed)!=null &amp;&amp; issue.getCustomFieldValue(automaticallyClosed).toString().equals("Yes")){
	unatantum=false    
}
log.debug "Consuntivazione ticket " + issue.key + " con unatantum: " + unatantum

/* REST API per Contabilizzazione Intervento */
requestMethod = "GET";

baseURL = "http://" + properties['api.env'].toString() + "/op/rest/AA/ticket/issueKey/" + issue.key.toString() + "/close?um="+unatantum.toString()
log.debug "baseUrl: " + baseURL

/*Definire parametro di input unatantum=true|false in base al valore della variabile booleana unatantum*/
URL url = new URL(baseURL)
HttpURLConnection connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.connect();
log.debug "ResponseCode:" + connection.getResponseCode()
log.debug "ResponseMessage:" + connection.getResponseMessage()

//IssueIndexingService issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)
//issueIndexingService.reIndex(issueManager.getIssueObject(issue.key.toString()))

//def unaTantumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName("OPAA_UNATANTUM_RATES")[0]
//log.warn "unaTantumRates: " + issue.getCustomFieldValue(unaTantumRates)

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()
    log.debug "Response: " + connection

    /*ROLLBACK*/
    /*Rimozione allegato rapporto di intervento appena creato*/
    /* Get Insight IQL Facade from plugin accessor */
    Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade"); 
    def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);

    /* Get Insight Object Facade from plugin accessor */
    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");
    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

    /* Get Insight Object Type Facade from plugin accessor */
    Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade");
    def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);

    /* Get Insight Object Attribute Facade from plugin accessor */
    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);

    Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory");
    def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);

    /* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include " around value */
    def objects = iqlFacade.findObjectsByIQLAndSchema(DBO, "\"" + properties['iobj.attachmentCategory.categoryRef'].toString() + "\".\"" + properties['iobj.attachmentCategory.name'].toString() + "\" = \"" + properties['iobj.attachmentCategory.objs.rappIntFAAC'].toString() + "\" AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND object HAVING connectedTickets(key = " + issue.key.toString() + ")"); // See the complete list of possible IQL on the Insight Query Language documentation page
    /* If this is a mandatory field you should be able to do this: */
    log.info("Insight object: " + objects[0]);

    if(objects[0]){
        /* UPDATE OJBECT DELETED VALUE */
        def obTriage = objectFacade.loadObjectAttributeBean(objects[0].getId(), properties['iobj.attachmentCategory.deleted'].toString()).createMutable()  
        def value = obTriage.getObjectAttributeValueBeans()

        def valueBean = obTriage.createObjectAttributeValueBean()
        valueBean.setValue(objectTypeAttributeFacade.loadObjectTypeAttributeBean(obTriage.getObjectTypeAttributeId()), true)
        /*Clean actual value*/
        value.clear()
        value.add(valueBean);
        obTriage.setObjectAttributeValueBeans(value)

        //Update OJBECT attribute value
        try {
            obTriage = objectFacade.storeObjectAttributeBean(obTriage);
        } catch (Exception vie) {
            log.warn("Could not update object attribute due to validation exception:" + vie.getMessage());
        }
    }

    eListErrors.add("E")
    eListErrors.add("OP-TKT-ACCOUNTING")
    errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
    eListErrors.add(errorMsgs)
    eList.add(eListErrors)

    output.add(eList)
    throw new InvalidInputException('{"E":"' + output.toString() + '"}')
    //throw new InvalidInputException("E", output.toString())
}else{
    /*OP-1038: consuntivazione terminata correttamente - se è stata eseguita con unatantum=true setto a No il campo OPAA_AUTOMATICALLY_CLOSED*/
    if(unatantum){
        def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
        def mi = (MutableIssue) issue

        def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
        log.debug "fieldConfig: " + fieldConfig
        def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "No" }
        automaticallyClosed.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())

        ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
        issueIndexingService.reIndex(issue)
        log.debug "Updated customfield - issue principale ${issue.getCustomFieldValue(automaticallyClosed)}"
    }
}
</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">b734e2c5-1436-43e7-ba9d-53f2ba06c457</arg>
              <arg name="FIELD_NOTES">Create SN &amp; SO</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef SN =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_NOTIFICATION\")[0]\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\n\nif(issue.getCustomFieldValue(SN) == null &amp;&amp; issue.issueType.name != \"Planned Maintenance Ticket\"){\n    requestMethod = \"POST\";\n\n    def body_req = []\n    body_req = [\n        \"issueKey\": issue.key,\n        \"status\": \"INP\"\n    ] \n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n    log.debug \"baseURL SN: \" + baseURL\n    log.debug \"body_req SN: \" + body_req\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"201\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        \n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n        log.debug \"errors: \" +  json_object.errors.toString()\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-SAP-SN-UPDATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }else{\n        /** SERVICE ORDER CREATION **/\n        body_req = [\n            \"issueKey\": issue.key\n        ] \n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\n\n        log.debug \"baseURL SO: \" + baseURL\n        log.debug \"body_req SO: \" + body_req\n        url = new URL(baseURL)\n        connection = (HttpURLConnection)url.openConnection();\n        connection.setRequestMethod(requestMethod);\n        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n        connection.setRequestProperty(\"Accept\", \"*/*\");\n        connection.setDoOutput(true);\n        connection.setDoInput(true);\n        connection.outputStream\n        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n        log.debug connection.outputStream\n        connection.connect();\n\n        output = new ArrayList()\n        eList = new ArrayList()\n        eListErrors = new ArrayList()\n        errorMsgs = new ArrayList()\n\n        if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n            log.debug \"url: \" + url\n            log.debug \"ResponseCode:\" + connection.getResponseCode()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n            \n            def outputMsg = ((HttpURLConnection)connection).errorStream.text\n    \t\tlog.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n            \n            def jsonSlurper = new JsonSlurper()\n            def json_object = jsonSlurper.parseText(outputMsg)\n            assert json_object instanceof Map  \n            log.debug \"message: \" +  json_object.message\n            log.debug \"errors: \" +  json_object.errors.toString()\n            \n            eListErrors.add(\"E\")\n            eListErrors.add(\"OP-SAP-SO-CREATE\")\n            errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n            eListErrors.add(errorMsgs)\n            eList.add(eListErrors)\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        }\n    }\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="Not Done" status="‰Þ" step="18">
              <post-functions>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="2" name="Assigned To Supplier">
      <meta name="jira.status.id">14327</meta>
      <actions>
        <action id="71" name="Accetta Intervento" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19905</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">õæ½ë­]å¾ýçŽ¶é·uvúož6uþ¶¶Ÿsw]</arg>
              <arg name="FIELD_NOTES">OP: Check errors &amp; warnings</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   \nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tproperties.load(it)\n}\ndef Category log = Category.getInstance(\"com.onresolve.jira.groovy.PostFunction\")\n \nIssue issue = issue\n\ndef errors = false\ndef warnings = false\n\ndef supplierLabel = properties['cf.supplier'] ? properties['cf.supplier'].toString() : \"OP_SUPPLIER\"\ndef supplier1 = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(supplierLabel)[0]\ndef supplier2 = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(supplierLabel)[1]\n\ndef errorMandatoryFields = new ArrayList()\ndef warningEmptyFields = new ArrayList()\n \n//OP_SUPPLIER_REPAIR vs OP_SUPPLIER_NEWINST\nlog.debug \"supplierLabel: \" + supplierLabel\nlog.debug \"supplier1: \" + supplier1\nlog.debug \"supplier2: \" + supplier2\ndef supplier1empty = issue.getCustomFieldValue(supplier1)==null || (String)issue.getCustomFieldValue(supplier1) == \"\" || issue.getCustomFieldValue(supplier1).toString().equals(\"\")\ndef supplier2empty = issue.getCustomFieldValue(supplier2)==null || (String)issue.getCustomFieldValue(supplier2) == \"\" || issue.getCustomFieldValue(supplier2).toString().equals(\"\")\nlog.debug \"supplier1empty: \" + supplier1empty\nlog.debug \"supplier2empty: \" + supplier2empty\nif((supplier1empty) &amp;&amp; (supplier2empty)){\n\tlog.debug \"supplier1empty &amp;&amp; supplier2empty\"\n    errors = true\n\terrorMandatoryFields.add(supplierLabel)\n    log.debug \"errorMandatoryFields: \" + errorMandatoryFields\n}\n\ndef output = new ArrayList()\n\nif (!errors &amp;&amp; !warnings){\n    return true\n}else{\n    if(!errors &amp;&amp; warnings){\n        def wList = new ArrayList()\n        \n        if(warningEmptyFields.size() &gt; 0){\n            def wListConfirmEmpty = new ArrayList()\n            wListConfirmEmpty.add(\"W\")\n            wListConfirmEmpty.add(\"CONFIRM_EMPTY_FIELDS\")\n            wListConfirmEmpty.add(null)\n            wListConfirmEmpty.add(warningEmptyFields)\n\n            wList.add(wListConfirmEmpty)\n        }\n        \n        output.add(wList)\n        throw new InvalidInputException('{\"W\":\"' + output.toString() + '\"}')\n        //throw new InvalidInputException(\"W\", output.toString())   \n    }\n    if(errors &amp;&amp; !warnings){\n        def eList = new ArrayList()\n        \n        if(errorMandatoryFields.size() &gt; 0){\n            def eListMandatory = new ArrayList()\n            eListMandatory.add(\"E\")\n            eListMandatory.add(\"MANDATORY_FIELDS\")\n            eListMandatory.add(null)\n            eListMandatory.add(errorMandatoryFields)\n            eList.add(eListMandatory)\n        }\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        //throw new InvalidInputException(\"E\", output.toString())   \n    }\n    if(errors &amp;&amp; warnings){\n        def eList = new ArrayList()\n        def wList = new ArrayList()\n        \n        if(errorMandatoryFields.size() &gt; 0){\n            def eListMandatory = new ArrayList()\n            eListMandatory.add(\"E\")\n            eListMandatory.add(\"MANDATORY_FIELDS\")\n            eListMandatory.add(null)\n            eListMandatory.add(errorMandatoryFields)\n            eList.add(eListMandatory)\n        }\n        \n        if(warningEmptyFields.size() &gt; 0){\n            def wListConfirmEmpty = new ArrayList()\n            wListConfirmEmpty.add(\"W\")\n            wListConfirmEmpty.add(\"CONFIRM_EMPTY_FIELDS\")\n            wListConfirmEmpty.add(null)\n            wListConfirmEmpty.add(warningEmptyFields)\n\n            wList.add(wListConfirmEmpty)\n        }\n        \n        output.add(eList)\n        output.add(wList)\n        throw new InvalidInputException('{\"WE\":\"' + output.toString() + '\"}')\n        //throw new InvalidInputException(\"WE\", output.toString())  \n    }\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
 
Issue issue = issue

def errors = false
def warnings = false

def supplierLabel = properties['cf.supplier'] ? properties['cf.supplier'].toString() : "OP_SUPPLIER"
def supplier =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(supplierLabel)[0]

def errorMandatoryFields = new ArrayList()
def warningEmptyFields = new ArrayList()
 
//OP_SUPPLIER_REPAIR vs OP_SUPPLIER_NEWINST
log.debug "supplierLabel: " + supplierLabel
if(issue.getCustomFieldValue(supplier)==null || (String)issue.getCustomFieldValue(supplier) == "" || issue.getCustomFieldValue(supplier).toString().equals("")){
	errors = true
	errorMandatoryFields.add(supplierLabel)
    log.debug "errorMandatoryFields: " + errorMandatoryFields
}


def output = new ArrayList()

if (!errors &amp;&amp; !warnings){
    return true
}else{
    if(!errors &amp;&amp; warnings){
        def wList = new ArrayList()
        
        if(warningEmptyFields.size() &gt; 0){
            def wListConfirmEmpty = new ArrayList()
            wListConfirmEmpty.add("W")
            wListConfirmEmpty.add("CONFIRM_EMPTY_FIELDS")
            wListConfirmEmpty.add(null)
            wListConfirmEmpty.add(warningEmptyFields)

            wList.add(wListConfirmEmpty)
        }
        
        output.add(wList)
        throw new InvalidInputException('{"W":"' + output.toString() + '"}')
        //throw new InvalidInputException("W", output.toString())   
    }
    if(errors &amp;&amp; !warnings){
        def eList = new ArrayList()
        
        if(errorMandatoryFields.size() &gt; 0){
            def eListMandatory = new ArrayList()
            eListMandatory.add("E")
            eListMandatory.add("MANDATORY_FIELDS")
            eListMandatory.add(null)
            eListMandatory.add(errorMandatoryFields)
            eList.add(eListMandatory)
        }
        output.add(eList)
        throw new InvalidInputException('{"E":"' + output.toString() + '"}')
        //throw new InvalidInputException("E", output.toString())   
    }
    if(errors &amp;&amp; warnings){
        def eList = new ArrayList()
        def wList = new ArrayList()
        
        if(errorMandatoryFields.size() &gt; 0){
            def eListMandatory = new ArrayList()
            eListMandatory.add("E")
            eListMandatory.add("MANDATORY_FIELDS")
            eListMandatory.add(null)
            eListMandatory.add(errorMandatoryFields)
            eList.add(eListMandatory)
        }
        
        if(warningEmptyFields.size() &gt; 0){
            def wListConfirmEmpty = new ArrayList()
            wListConfirmEmpty.add("W")
            wListConfirmEmpty.add("CONFIRM_EMPTY_FIELDS")
            wListConfirmEmpty.add(null)
            wListConfirmEmpty.add(warningEmptyFields)

            wList.add(wListConfirmEmpty)
        }
        
        output.add(eList)
        output.add(wList)
        throw new InvalidInputException('{"WE":"' + output.toString() + '"}')
        //throw new InvalidInputException("WE", output.toString())  
    }
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">ebf32ca3-2ea4-4039-9460-4705d533e401</arg>
              <arg name="FIELD_NOTES">Create SN for old tickets</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef SN =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_NOTIFICATION\")[0]\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\n\nif(issue.getCustomFieldValue(SN) == null &amp;&amp; issue.issueType.name != \"Planned Maintenance Ticket\"){\n    requestMethod = \"POST\";\n\n    def body_req = []\n    body_req = [\n        \"issueKey\": issue.key,\n        \"status\": \"OPE\"\n    ] \n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n    log.debug \"baseURL SN: \" + baseURL\n    log.debug \"body_req SN: \" + body_req\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"201\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        \n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n        log.debug \"errors: \" +  json_object.errors.toString()\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-SAP-SN-UPDATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n}","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="3">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">5c617aad-7d1a-4805-8e97-6b2c635a187e</arg>
                  <arg name="FIELD_NOTES">OP: New Installation - Check linkedTickets &amp; Fast-Transact them</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.link.IssueLink\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nCategory log = Category.getInstance(\"com.onresolve.jira.groovy.PostFunction\")\nlog.setLevel(org.apache.log4j.Level.WARN)\n\nlog.warn \"${issue.key} Transazione ACCEPTED BY SUPPLIER - Post Function check linkedIssues\"\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyAccepted'] ? properties['cf.automaticallyAccepted'].toString() : \"OP_AUTOMATICALLY_ACCEPTED\")[0]\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\n\nIssue issue = issue\n//Per test da console\n//issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-276\")\n\n/*DEV*/\nACCEPT = properties['wf.tr.accept'] ? properties['wf.tr.accept'] : 71\n\n/*PROD*/\n//CONFIRM_TO_CUSTOMER\n\ndef user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\ndef issueService = ComponentAccessor.getIssueService()\n\n/*Se eseguo la confirm to customer su un ticket con 1 o + ticket collegati, verifico e sposto in automatico gli eventuali ticket collegati*/\nlog.warn \"verifico e sposto in automatico gli eventuali ticket collegati\"\n\nif(issue.getIssueType().getName() == properties['it.newInstallation'].toString() &amp;&amp; issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"No\")){\n    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            log.warn \"Issue con relatesInIssueLink\"\n            /*Eseguire transazione di stato della sourceIssue*/\n            def linkedIssue = issueLink.getSourceObject()\n            def linkedIssueStatus = linkedIssue.getStatus()\n            def transitionId\n            if(linkedIssueStatus.name == (properties['wf.assignedToSupplier'] ? properties['wf.assignedToSupplier'].toString() : \"Assigned To Supplier\")){\n                transitionId=ACCEPT\n            }\n            if(transitionId==ACCEPT){\n                // Prepare our input for the transition\n                def issueInputParameters = issueService.newIssueInputParameters()\n                issueInputParameters.with {\n                    setSkipScreenCheck(true)\n                }\n                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)\n                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), \"Yes\") \n                //log.warn \"issueInputParameters: \" + issueInputParameters\n                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n                def mi = (MutableIssue) linkedIssue\n\n                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)\n                log.warn \"fieldConfig: \" + fieldConfig\n                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())\n\n                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n                issueIndexingService.reIndex(linkedIssue)\n                log.warn \"Updated customfield - issue linkata\"\n\n                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)\n                if (issueService.validateTransition(user, linkedIssue.id, transitionId.toInteger(), issueInputParameters).isValid()) {\n                    // Perform the transition\n                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId.toInteger(), issueInputParameters))\n                    if (! issueResult.isValid()) {\n                        log.warn(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n                    }else{\n                        log.warn(\"Transazione fatta 79 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}\")\n                    }\n                } else {\n                    log.warn(\"Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}\")\n                }\n            }\n        }\n    }\n\n    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            log.warn \"Issue con relatesOutIssueLink\"\n            /*Eseguire transazione di stato della destinationIssue*/\n            def linkedIssue = issueLink.getDestinationObject()\n            def linkedIssueStatus = linkedIssue.getStatus()\n            def transitionId\n            log.warn \"linkedIssue: \" + linkedIssue\n            log.warn \"linkedIssueStatus.name: \" + linkedIssueStatus.name\n            if(linkedIssueStatus.name == (properties['wf.assignedToSupplier'] ? properties['wf.assignedToSupplier'].toString() : \"Assigned To Supplier\")){\n                transitionId=ACCEPT\n            }\n\n            if(transitionId==ACCEPT){\n                // Prepare our input for the transition\n                def issueInputParameters = issueService.newIssueInputParameters()\n                issueInputParameters.with {\n                    setSkipScreenCheck(true)\n                }\n                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)\n                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), \"Yes\") \n\n                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n                def mi = (MutableIssue) linkedIssue\n\n                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)\n                log.warn \"fieldConfig: \" + fieldConfig\n                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())\n\n                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n                issueIndexingService.reIndex(linkedIssue)\n                log.warn \"Updated customfield - issue linkata\"\n\n                if (issueService.validateTransition(user, linkedIssue.id, transitionId.toInteger(), issueInputParameters).isValid()) {\n                    // Perform the transition\n                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId.toInteger(), issueInputParameters))\n                    if (! issueResult.isValid()) {\n                        log.warn(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n                    }else{\n                        log.warn(\"Transazione fatta 122 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}\")\n                    }\n                } else {\n                    log.warn(\"Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}\")\n                }\n            }\n\n        }\n    }\n}","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService
import org.apache.log4j.Category
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.link.IssueLink
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.WARN)

log.warn "${issue.key} Transazione ACCEPTED BY SUPPLIER - Post Function check linkedIssues"

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyAccepted'] ? properties['cf.automaticallyAccepted'].toString() : "OP_AUTOMATICALLY_ACCEPTED")[0]
IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)

Issue issue = issue
//Per test da console
//issue = issueManager.getIssueByKeyIgnoreCase("OPUT-276")

/*DEV*/
ACCEPT = properties['wf.tr.accept'] ? properties['wf.tr.accept'] : 71

/*PROD*/
//CONFIRM_TO_CUSTOMER

def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
def issueService = ComponentAccessor.getIssueService()

/*Se eseguo la confirm to customer su un ticket con 1 o + ticket collegati, verifico e sposto in automatico gli eventuali ticket collegati*/
log.warn "verifico e sposto in automatico gli eventuali ticket collegati"

if(issue.getIssueType().getName() == properties['it.newInstallation'].toString() &amp;&amp; issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals("No")){
    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            log.warn "Issue con relatesInIssueLink"
            /*Eseguire transazione di stato della sourceIssue*/
            def linkedIssue = issueLink.getSourceObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            def transitionId
            if(linkedIssueStatus.name == (properties['wf.assignedToSupplier'] ? properties['wf.assignedToSupplier'].toString() : "Assigned To Supplier")){
                transitionId=ACCEPT
            }
            if(transitionId==ACCEPT){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(true)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                //log.warn "issueInputParameters: " + issueInputParameters
                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"

                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 79 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }
        }
    }

    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            log.warn "Issue con relatesOutIssueLink"
            /*Eseguire transazione di stato della destinationIssue*/
            def linkedIssue = issueLink.getDestinationObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            def transitionId
            log.warn "linkedIssue: " + linkedIssue
            log.warn "linkedIssueStatus.name: " + linkedIssueStatus.name
            if(linkedIssueStatus.name == (properties['wf.assignedToSupplier'] ? properties['wf.assignedToSupplier'].toString() : "Assigned To Supplier")){
                transitionId=ACCEPT
            }

            if(transitionId==ACCEPT){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(true)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 

                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"

                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 122 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }

        }
    }
}</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">s¿Õ§·Ûu®^u×|½»é÷åÖûï½qî7</arg>
                  <arg name="FIELD_NOTES">OP: Linked Tickets: check and link related issues</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport com.atlassian.jira.issue.IssueManager\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport groovy.json.JsonSlurper\nimport groovy.json.StreamingJsonBuilder\nimport com.atlassian.jira.config.util.JiraHome\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport java.text.SimpleDateFormat\nimport java.text.ParseException\nimport com.atlassian.jira.security.JiraAuthenticationContext\nimport com.atlassian.jira.bc.issue.IssueService.IssueResult\nimport com.atlassian.jira.jql.parser.JqlQueryParser\nimport com.atlassian.jira.bc.issue.search.SearchService\nimport com.atlassian.jira.user.util.UserUtil\nimport com.atlassian.jira.web.bean.PagerFilter\nimport com.atlassian.jira.issue.link.LinkCollectionImpl;\nimport com.atlassian.jira.issue.link.IssueLink;\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\n\nimport groovy.util.logging.Slf4j\nimport java.util.concurrent.ConcurrentHashMap\nimport javax.annotation.PostConstruct\nimport org.springframework.cache.annotation.Cacheable\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\n/*Script Variables*/\n//Per Post Function\nissue = issue\n//Per test da console\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\n//issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-241\")\n\n/*Insight classes &amp; components*/\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\nobjectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\nobjectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n/* Get Insight IQL Facade from plugin accessor */\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \niqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\");\nobjectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\n/* Get Insight Object Type Facade from plugin accessor */\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \nobjectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\n\n/*Customfields*/\ndef supplierCF = properties['cf.supplier'] ? properties['cf.supplier'].toString() : \"OP_SUPPLIER\"\ndef supplierField =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(supplierCF)[0]\ndef plannedDate =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.plannedDate'].toString())[0]\ndef site =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.site'].toString())[0]\ndef wbsPrj =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.wbsPrj'] ? properties['cf.wbsPrj'].toString() : \"OP_WBS_PRJ\")[0]\nlog.debug issue.getCustomFieldValue(supplierField)\n\nJiraAuthenticationContext authContext = ComponentAccessor.getJiraAuthenticationContext()\ndef jqlQueryParser = ComponentAccessor.getComponent(JqlQueryParser)\ndef searchService = ComponentAccessor.getComponent(SearchService)\nUserUtil userUtil = ComponentAccessor.getUserUtil()\ndef user = ComponentAccessor.jiraAuthenticationContext.loggedInUser\n\ndef supplier = issue.getCustomFieldValue(supplierField) ? issue.getCustomFieldValue(supplierField).first().toString() : null\nlog.debug \"supplier: \" + supplier\n\nif(supplier){\n    //Link issues assigned to the same vendor\n    supplier = supplier.substring(1,supplier.indexOf('(')-1)\n\n    List&lt;IssueLink&gt; allInCurrentIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId());\n    List&lt;IssueLink&gt; allOutCurrentIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId());\n    def alreadyLinked=false\n\n    def jqlSearch = \"project = '\" + issue.getProjectObject().name + \"' AND issuetype = '\" + issue.getIssueType().name + \"' AND key != '\" + issue.key.toString() + \"' AND 'OP_SUPPLIER' in iqlFunction('\" + properties['iobj.suppinst.supplierRef'].toString() + \" LIKE \\\"\" + supplier.replaceAll(\"'\",\"\\'\") + \"\\\"')\" + \" AND '\" + properties['cf.site'].toString() + \"' = '\" + issue.getCustomFieldValue(site).first().toString().replaceAll(\"'\",\"\\'\") + \"' AND status IN ('\" + properties['wf.acceptedBySupplier'].toString() + \"') AND \" + (issue.issueType.name.equals(\"Maintenance Ticket\") ? (properties['cf.plannedDate'].toString() + \" &gt;= '\" + issue.getCustomFieldValue(plannedDate).format(\"yyyy-MM-dd HH:mm\") + \"' AND \" + properties['cf.plannedDate'].toString() + \" &lt;= '\" + issue.getCustomFieldValue(plannedDate).format(\"yyyy-MM-dd\").toString() + \" 23:59\" + \"'\") : (properties['cf.wbsPrj'] ? properties['cf.wbsPrj'].toString() : \"OP_WBS_PRJ\") + \" = '\" + issue.getCustomFieldValue(wbsPrj) + \"'\")\n    log.debug \"ricerca: \" + jqlSearch\n    def query = jqlQueryParser.parseQuery(jqlSearch)\n    log.debug \"query: \" + query\n    def search = searchService.search(user, query, PagerFilter.getUnlimitedFilter())\n    def found=false\n    def foundOutward=false\n    def linkedIssue\n    if (search.results) {\t\n        for (i in search.results.first()){\n            /*Per ogni issue restituita dalla query JQL verifico se ha gi\u00e0 dei link Relates To*/\n            log.debug i.key\n\n            def issueService = ComponentAccessor.getIssueService()\n\n            List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(i.getId());\n            log.debug \"allInIssueLink: \" + allInIssueLink\n            for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n                IssueLink issueLink = (IssueLink) outIterator.next();\n                def linkedIssueTemp = issueLink.getSourceObject()\n                String type = linkedIssueTemp.getIssueType().getName();\n\n                log.debug \"issuelink Type: \" + issueLink.issueLinkType.getName()\n                log.debug \"sourceIssue: \" + issueLink.getSourceObject()\n                log.debug \"destinationIssue: \" + issueLink.getDestinationObject()\n\n                if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString()) &amp;&amp; issueLink.getSourceObject().key!=issue.key){\n                    log.debug \"trovato inWardLink - prendo la source issue \" + linkedIssueTemp + \" e la lego alla issue corrente solo se non \u00e8 gi\u00e0 linkata\"\n                    alreadyLinked=false\n                    for(li in allInCurrentIssueLink){\n                        if(linkedIssueTemp.getId() == li.getSourceObject().getId() || linkedIssueTemp.getId() == li.getDestinationObject().getId()){\n                            alreadyLinked=true\n                        }\n                    }\n                    for(li in allOutCurrentIssueLink){\n                        if(linkedIssueTemp.getId() == li.getSourceObject().getId() || linkedIssueTemp.getId() == li.getDestinationObject().getId()){\n                            alreadyLinked=true\n                        }\n                    }\n                    found=true\n                    if(!alreadyLinked){\n                        log.debug \"non \u00e8 linkata, la linko\"\n                        ComponentAccessor.getIssueLinkManager().createIssueLink(linkedIssueTemp.getId(), issue.getId(), Long.parseLong(properties['il.linkedTktsRelatesId'].toString()), 1, user);   \n                    }else{\n                        log.debug \"gi\u00e0 linkata, non la linko di nuovo\"\n                    }\n                }\n            }\n\n            List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(i.getId());\n            log.debug \"allOutIssueLink: \" + allOutIssueLink\n            for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n                IssueLink issueLink = (IssueLink) outIterator.next();\n                def linkedIssueTemp = issueLink.getDestinationObject()\n                String type = linkedIssueTemp.getIssueType().getName();\n\n                log.debug \"issuelink Type: \" + issueLink.issueLinkType.getName()\n                log.debug \"sourceIssue: \" + issueLink.getSourceObject()\n                log.debug \"destinationIssue: \" + issueLink.getDestinationObject()\n\n                if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString()) &amp;&amp; issueLink.getDestinationObject().key!=issue.key){\n                    found=true\n                    log.debug \"trovato outWardLink - prendo la destination issue \" + linkedIssueTemp + \" e la lego alla issue corrente solo se non \u00e8 gi\u00e0 linkata\"\n\n                    alreadyLinked=false\n                    for(li in allInCurrentIssueLink){\n                        if(linkedIssueTemp.getId() == li.getSourceObject().getId() || linkedIssueTemp.getId() == li.getDestinationObject().getId()){\n                            alreadyLinked=true\n                        }\n                    }\n                    for(li in allOutCurrentIssueLink){\n                        if(linkedIssueTemp.getId() == li.getSourceObject().getId() || linkedIssueTemp.getId() == li.getDestinationObject().getId()){\n                            alreadyLinked=true\n                        }\n                    }\n                    found=true\n                    if(!alreadyLinked){\n                        log.debug \"non \u00e8 linkata, la linko\"\n                        ComponentAccessor.getIssueLinkManager().createIssueLink(issue.getId(), linkedIssueTemp.getId(), Long.parseLong(properties['il.linkedTktsRelatesId'].toString()), 1, user);\n                    }else{\n                        log.debug \"gi\u00e0 linkata, non la linko di nuovo\"\n                    }\n                }else if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString()) &amp;&amp; issueLink.getDestinationObject().key==issue.key){\n                    log.debug \"issue gi\u00e0 linkata\"\n                    break\n                }\n            }\n\n            log.debug \"Creo link tra la issue oggetto di transition e la issue risultante dal filtro se non \u00e8 gi\u00e0 linkata\"\n            alreadyLinked=false\n            for(li in allInCurrentIssueLink){\n                if(i.getId() == li.getSourceObject().getId() || i.getId() == li.getDestinationObject().getId()){\n                    alreadyLinked=true\n                }\n            }\n            for(li in allOutCurrentIssueLink){\n                if(i.getId() == li.getSourceObject().getId() || i.getId() == li.getDestinationObject().getId()){\n                    alreadyLinked=true\n                }\n            }\n            if(!alreadyLinked){\n                log.debug \"non \u00e8 linkata, la linko\"\n                ComponentAccessor.getIssueLinkManager().createIssueLink(i.getId(), issue.getId(), Long.parseLong(properties['il.linkedTktsRelatesId'].toString()), 1, user);\n            }else{\n                log.debug \"gi\u00e0 linkata, non la linko di nuovo\"\n            }\n\n\n        }\n\n    } else {\n        log.error(\"Invalid JQL: \" + jqlSearch);\n    } \n}else{\n    //how to link issues assigned to the same internal techs? do we want to do it?\n}\n","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.IssueManager
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import groovy.json.JsonSlurper
import groovy.json.StreamingJsonBuilder
import com.atlassian.jira.config.util.JiraHome
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import java.text.SimpleDateFormat
import java.text.ParseException
import com.atlassian.jira.security.JiraAuthenticationContext
import com.atlassian.jira.bc.issue.IssueService.IssueResult
import com.atlassian.jira.jql.parser.JqlQueryParser
import com.atlassian.jira.bc.issue.search.SearchService
import com.atlassian.jira.user.util.UserUtil
import com.atlassian.jira.web.bean.PagerFilter
import com.atlassian.jira.issue.link.LinkCollectionImpl;
import com.atlassian.jira.issue.link.IssueLink;
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder

import groovy.util.logging.Slf4j
import java.util.concurrent.ConcurrentHashMap
import javax.annotation.PostConstruct
import org.springframework.cache.annotation.Cacheable
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

/*Script Variables*/
//Per Post Function
issue = issue
//Per test da console
//IssueManager issueManager = ComponentAccessor.getIssueManager()
//issue = issueManager.getIssueByKeyIgnoreCase("OPUT-241")

/*Insight classes &amp; components*/
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);
/* Get Insight IQL Facade from plugin accessor */
Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade"); 
iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);
Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory");
objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);
/* Get Insight Object Type Facade from plugin accessor */
Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade"); 
objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);

/*Customfields*/
def supplierInstallation =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplierRepair'].toString())[0]
def supplierNewInstallation =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplierNewInstallation'].toString())[0]
def plannedDate =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.plannedDate'].toString())[0]
def site =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.site'].toString())[0]
def wbsPrj =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.wbsPrj'] ? properties['cf.wbsPrj'].toString() : "OP_WBS_PRJ")[0]
log.debug issue.getCustomFieldValue(supplierInstallation)

JiraAuthenticationContext authContext = ComponentAccessor.getJiraAuthenticationContext()
def jqlQueryParser = ComponentAccessor.getComponent(JqlQueryParser)
def searchService = ComponentAccessor.getComponent(SearchService)
UserUtil userUtil = ComponentAccessor.getUserUtil()
def user = ComponentAccessor.jiraAuthenticationContext.loggedInUser

def supplier = (issue.getCustomFieldValue(supplierInstallation) ? issue.getCustomFieldValue(supplierInstallation).first().toString() : issue.getCustomFieldValue(supplierNewInstallation).first().toString())
log.debug "supplier: " + supplier
supplier = supplier.substring(1,supplier.indexOf('(')-1)

List&lt;IssueLink&gt; allInCurrentIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId());
List&lt;IssueLink&gt; allOutCurrentIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId());
def alreadyLinked=false

def jqlSearch = "project = '" + issue.getProjectObject().name + "' AND issuetype = '" + issue.getIssueType().name + "' AND key != '" + issue.key.toString() + "' AND '" + (issue.getCustomFieldValue(supplierInstallation) ? properties['cf.supplierRepair'].toString() : properties['cf.supplierNewInstallation'].toString()) + "' in iqlFunction('" + properties['iobj.suppinst.supplierRef'].toString() + " LIKE \"" + supplier.replaceAll("'","\'") + "\"')" + " AND '" + properties['cf.site'].toString() + "' = '" + issue.getCustomFieldValue(site).first().toString().replaceAll("'","\'") + "' AND status IN ('" + properties['wf.acceptedBySupplier'].toString() + "') AND " + (issue.getCustomFieldValue(supplierInstallation) ? (properties['cf.plannedDate'].toString() + " &gt;= '" + issue.getCustomFieldValue(plannedDate).format("yyyy-MM-dd HH:mm") + "' AND " + properties['cf.plannedDate'].toString() + " &lt;= '" + issue.getCustomFieldValue(plannedDate).format("yyyy-MM-dd").toString() + " 23:59" + "'") : (properties['cf.wbsPrj'] ? properties['cf.wbsPrj'].toString() : "OP_WBS_PRJ") + " = '" + issue.getCustomFieldValue(wbsPrj) + "'")
log.debug "ricerca: " + jqlSearch
def query = jqlQueryParser.parseQuery(jqlSearch)
log.debug "query: " + query
def search = searchService.search(user, query, PagerFilter.getUnlimitedFilter())
def found=false
def foundOutward=false
def linkedIssue
if (search.results) {	
    for (i in search.results){
        /*Per ogni issue restituita dalla query JQL verifico se ha già dei link Relates To*/
        log.debug i.key

        def issueService = ComponentAccessor.getIssueService()

        List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(i.getId());
        log.debug "allInIssueLink: " + allInIssueLink
        for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
            IssueLink issueLink = (IssueLink) outIterator.next();
            def linkedIssueTemp = issueLink.getSourceObject()
            String type = linkedIssueTemp.getIssueType().getName();

            log.debug "issuelink Type: " + issueLink.issueLinkType.getName()
			log.debug "sourceIssue: " + issueLink.getSourceObject()
            log.debug "destinationIssue: " + issueLink.getDestinationObject()
            
            if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString()) &amp;&amp; issueLink.getSourceObject().key!=issue.key){
                log.debug "trovato inWardLink - prendo la source issue " + linkedIssueTemp + " e la lego alla issue corrente solo se non è già linkata"
                alreadyLinked=false
                for(li in allInCurrentIssueLink){
                    if(linkedIssueTemp.getId() == li.getSourceObject().getId() || linkedIssueTemp.getId() == li.getDestinationObject().getId()){
                        alreadyLinked=true
                    }
                }
                for(li in allOutCurrentIssueLink){
                    if(linkedIssueTemp.getId() == li.getSourceObject().getId() || linkedIssueTemp.getId() == li.getDestinationObject().getId()){
                        alreadyLinked=true
                    }
                }
                found=true
                if(!alreadyLinked){
                    log.debug "non è linkata, la linko"
                 	ComponentAccessor.getIssueLinkManager().createIssueLink(linkedIssueTemp.getId(), issue.getId(), Long.parseLong(properties['il.linkedTktsRelatesId'].toString()), 1, user);   
                }else{
                    log.debug "già linkata, non la linko di nuovo"
                }
            }
        }
        
        List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(i.getId());
        log.debug "allOutIssueLink: " + allOutIssueLink
        for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
            IssueLink issueLink = (IssueLink) outIterator.next();
            def linkedIssueTemp = issueLink.getDestinationObject()
            String type = linkedIssueTemp.getIssueType().getName();

            log.debug "issuelink Type: " + issueLink.issueLinkType.getName()
			log.debug "sourceIssue: " + issueLink.getSourceObject()
            log.debug "destinationIssue: " + issueLink.getDestinationObject()
            
            if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString()) &amp;&amp; issueLink.getDestinationObject().key!=issue.key){
                found=true
                log.debug "trovato outWardLink - prendo la destination issue " + linkedIssueTemp + " e la lego alla issue corrente solo se non è già linkata"
                
                alreadyLinked=false
                for(li in allInCurrentIssueLink){
                    if(linkedIssueTemp.getId() == li.getSourceObject().getId() || linkedIssueTemp.getId() == li.getDestinationObject().getId()){
                        alreadyLinked=true
                    }
                }
                for(li in allOutCurrentIssueLink){
                    if(linkedIssueTemp.getId() == li.getSourceObject().getId() || linkedIssueTemp.getId() == li.getDestinationObject().getId()){
                        alreadyLinked=true
                    }
                }
                found=true
                if(!alreadyLinked){
                    log.debug "non è linkata, la linko"
                 	ComponentAccessor.getIssueLinkManager().createIssueLink(issue.getId(), linkedIssueTemp.getId(), Long.parseLong(properties['il.linkedTktsRelatesId'].toString()), 1, user);
                }else{
                    log.debug "già linkata, non la linko di nuovo"
                }
            }else if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString()) &amp;&amp; issueLink.getDestinationObject().key==issue.key){
                log.debug "issue già linkata"
                break
            }
        }

        log.debug "Creo link tra la issue oggetto di transition e la issue risultante dal filtro se non è già linkata"
        alreadyLinked=false
        for(li in allInCurrentIssueLink){
            if(i.getId() == li.getSourceObject().getId() || i.getId() == li.getDestinationObject().getId()){
                alreadyLinked=true
            }
        }
        for(li in allOutCurrentIssueLink){
            if(i.getId() == li.getSourceObject().getId() || i.getId() == li.getDestinationObject().getId()){
                alreadyLinked=true
            }
        }
        if(!alreadyLinked){
            log.debug "non è linkata, la linko"
            ComponentAccessor.getIssueLinkManager().createIssueLink(i.getId(), issue.getId(), Long.parseLong(properties['il.linkedTktsRelatesId'].toString()), 1, user);
        }else{
            log.debug "già linkata, non la linko di nuovo"
        }
        
              
    }
    
} else {
    log.error("Invalid JQL: " + jqlSearch);
} </arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">a6604d0a-af28-40f6-84ec-7a2dc32df2b0</arg>
                  <arg name="FIELD_NOTES">OP Email Notification: ACCEPTED_BY_SUPPLIER - mantenuta come post function per evitare di generare blocchi al fornitore legati all'invio di notifiche interne</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\ndef requestMethod = \"POST\";\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef body_req = [\n\t\"templateName\": properties['tt.acceptedBySupplier'].toString(),\n\t\"pec\": false,\n    \"issueKey\": issue.key\n]\n\ndef baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/transaction/mail/send\"\nURL url\nurl = new URL(baseURL)\n\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.outputStream\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\nlog.debug connection.outputStream\nconnection.connect();\n\nlog.debug \"url: \" + url\nlog.debug \"ResponseCode:\" + connection.getResponseCode()\nlog.debug \"ResponseMessage:\" + connection.getResponseMessage()\nlog.debug \"getResponseMessage:\" + connection.getResponseMessage()\n\n","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import org.apache.log4j.Category
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def requestMethod = "POST";

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();

def body_req = [
	"templateName": properties['tt.acceptedBySupplier'].toString(),
	"pec": false,
    "issueKey": issue.key
]

def baseURL = "http://" + properties['api.env'].toString() + "/op/rest/jira/AA/transaction/mail/send"
URL url
url = new URL(baseURL)

HttpURLConnection connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.outputStream
connection.outputStream.withWriter("UTF-8") { new StreamingJsonBuilder(it, body_req) }
log.debug connection.outputStream
connection.connect();

log.debug "url: " + url
log.debug "ResponseCode:" + connection.getResponseCode()
log.debug "ResponseMessage:" + connection.getResponseMessage()
log.debug "getResponseMessage:" + connection.getResponseMessage()

</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="81" name="Rifiuta Intervento" view="fieldscreen">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19906</meta>
          <results>
            <unconditional-result old-status="žée" status="žée" step="1">
              <post-functions>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">82bbfbab-2201-4d21-a192-434ad461af50</arg>
                  <arg name="FIELD_NOTES">OP: New Installation - Check linkedTickets &amp; Fast-Transact them</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.link.IssueLink\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nCategory log = Category.getInstance(\"com.onresolve.jira.groovy.PostFunction\")\nlog.setLevel(org.apache.log4j.Level.WARN)\n\nlog.warn \"${issue.key} Transazione REJECT FROM SUPPLIER - Post Function check linkedIssues\"\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyRejected'] ? properties['cf.automaticallyRejected'].toString() : \"OP_AUTOMATICALLY_REJECTED\")[0]\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\n\nIssue issue = issue\n//Per test da console\n//issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-276\")\n\n/*DEV*/\nREJECT = properties['wf.tr.reject'] ? properties['wf.tr.reject'] : 81\n\n/*PROD*/\n//CONFIRM_TO_CUSTOMER\n\ndef user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\ndef issueService = ComponentAccessor.getIssueService()\n\n/*Se eseguo la confirm to customer su un ticket con 1 o + ticket collegati, verifico e sposto in automatico gli eventuali ticket collegati*/\nlog.warn \"verifico e sposto in automatico gli eventuali ticket collegati\"\n\nif(issue.getIssueType().getName() == properties['it.newInstallation'].toString() &amp;&amp; issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"No\")){\n    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            log.warn \"Issue con relatesInIssueLink\"\n            /*Eseguire transazione di stato della sourceIssue*/\n            def linkedIssue = issueLink.getSourceObject()\n            def linkedIssueStatus = linkedIssue.getStatus()\n            def transitionId\n            if(linkedIssueStatus.name == (properties['wf.assignedToSupplier'] ? properties['wf.assignedToSupplier'].toString() : \"Assigned To Supplier\") ){\n                transitionId=REJECT\n            }\n            if(transitionId==REJECT){\n                // Prepare our input for the transition\n                def issueInputParameters = issueService.newIssueInputParameters()\n                issueInputParameters.with {\n                    setSkipScreenCheck(true)\n                }\n                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)\n                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), \"Yes\") \n                //log.warn \"issueInputParameters: \" + issueInputParameters\n                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n                def mi = (MutableIssue) linkedIssue\n\n                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)\n                log.warn \"fieldConfig: \" + fieldConfig\n                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())\n\n                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n                issueIndexingService.reIndex(linkedIssue)\n                log.warn \"Updated customfield - issue linkata\"\n\n                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)\n                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {\n                    // Perform the transition\n                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))\n                    if (! issueResult.isValid()) {\n                        log.warn(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n                    }else{\n                        log.warn(\"Transazione fatta 79 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}\")\n                    }\n                } else {\n                    log.warn(\"Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}\")\n                }\n            }\n        }\n    }\n\n    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            log.warn \"Issue con relatesOutIssueLink\"\n            /*Eseguire transazione di stato della destinationIssue*/\n            def linkedIssue = issueLink.getDestinationObject()\n            def linkedIssueStatus = linkedIssue.getStatus()\n            def transitionId\n            log.warn \"linkedIssue: \" + linkedIssue\n            log.warn \"linkedIssueStatus.name: \" + linkedIssueStatus.name\n            if(linkedIssueStatus.name == (properties['wf.assignedToSupplier'] ? properties['wf.assignedToSupplier'].toString() : \"Assigned To Supplier\")){\n                transitionId=REJECT\n            }\n\n            if(transitionId==REJECT){\n                // Prepare our input for the transition\n                def issueInputParameters = issueService.newIssueInputParameters()\n                issueInputParameters.with {\n                    setSkipScreenCheck(true)\n                }\n                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)\n                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), \"Yes\") \n\n                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n                def mi = (MutableIssue) linkedIssue\n\n                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)\n                log.warn \"fieldConfig: \" + fieldConfig\n                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())\n\n                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n                issueIndexingService.reIndex(linkedIssue)\n                log.warn \"Updated customfield - issue linkata\"\n\n                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {\n                    // Perform the transition\n                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))\n                    if (! issueResult.isValid()) {\n                        log.warn(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n                    }else{\n                        log.warn(\"Transazione fatta 122 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}\")\n                    }\n                } else {\n                    log.warn(\"Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}\")\n                }\n            }\n\n        }\n    }\n}","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService
import org.apache.log4j.Category
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.link.IssueLink
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.WARN)

log.warn "${issue.key} Transazione REJECT FROM SUPPLIER - Post Function check linkedIssues"

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyRejected'] ? properties['cf.automaticallyRejected'].toString() : "OP_AUTOMATICALLY_REJECTED")[0]
IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)

Issue issue = issue
//Per test da console
//issue = issueManager.getIssueByKeyIgnoreCase("OPUT-276")

/*DEV*/
REJECT = properties['wf.tr.reject'] ? properties['wf.tr.reject'] : 81

/*PROD*/
//CONFIRM_TO_CUSTOMER

def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
def issueService = ComponentAccessor.getIssueService()

/*Se eseguo la confirm to customer su un ticket con 1 o + ticket collegati, verifico e sposto in automatico gli eventuali ticket collegati*/
log.warn "verifico e sposto in automatico gli eventuali ticket collegati"

if(issue.getIssueType().getName() == properties['it.newInstallation'].toString() &amp;&amp; issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals("No")){
    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            log.warn "Issue con relatesInIssueLink"
            /*Eseguire transazione di stato della sourceIssue*/
            def linkedIssue = issueLink.getSourceObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            def transitionId
            if(linkedIssueStatus.name == (properties['wf.assignedToSupplier'] ? properties['wf.assignedToSupplier'].toString() : "Assigned To Supplier") ){
                transitionId=REJECT
            }
            if(transitionId==REJECT){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(true)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                //log.warn "issueInputParameters: " + issueInputParameters
                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"

                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 79 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }
        }
    }

    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            log.warn "Issue con relatesOutIssueLink"
            /*Eseguire transazione di stato della destinationIssue*/
            def linkedIssue = issueLink.getDestinationObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            def transitionId
            log.warn "linkedIssue: " + linkedIssue
            log.warn "linkedIssueStatus.name: " + linkedIssueStatus.name
            if(linkedIssueStatus.name == (properties['wf.assignedToSupplier'] ? properties['wf.assignedToSupplier'].toString() : "Assigned To Supplier")){
                transitionId=REJECT
            }

            if(transitionId==REJECT){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(true)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 

                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"

                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 122 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }

        }
    }
}</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22756</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="field2">customfield_22693</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">OP Email Notification: REJECTED_BY_SUPPLIER - Mantenuta come post function per non generare blocchi al fornitore legati a errori di invio mail interne</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import org.apache.log4j.Category
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

def requestMethod = "POST";

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();

def body_req = [
	"templateName": properties['tt.rejectedBySupplier'].toString(),
	"pec": false,
    "issueKey": issue.key
]

def baseURL = "http://" + properties['api.env'].toString() + "/op/rest/jira/AA/transaction/mail/send"
URL url
url = new URL(baseURL)

HttpURLConnection connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.outputStream
connection.outputStream.withWriter("UTF-8") { new StreamingJsonBuilder(it, body_req) }
log.debug connection.outputStream
connection.connect();

log.debug "url: " + url
log.debug "ResponseCode:" + connection.getResponseCode()
log.debug "ResponseMessage:" + connection.getResponseMessage()
log.debug "getResponseMessage:" + connection.getResponseMessage()

</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="471" name="Clona Tkt" view="fieldscreen">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20401</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">c659704c-9678-4844-9a05-6f3497e391e7</arg>
                <arg name="FIELD_NOTES">Enabled only for Repair and New Installation</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"issue.issueType.name == 'Maintenance Ticket' || (issue.issueType.name == 'New Installation' &amp;&amp; cfValues['OP_ASSET'] != null)","scriptPath":null}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="2">
              <post-functions>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="диюбwbХ*'">¶»ž</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue" />
                  <arg name="fieldValue">New Installation</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="targetIssueTypeDefinedByCfSelection" />
                  <arg name="issueTypeId">12301</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">H</arg>
                  <arg name="maxAllowed-integerValue" />
                  <arg name="transitionAttachmentsOperation">rr</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="╡крz╙ыв7Ь╡'еy╦^t+м╢ЙЕЙщ]" />
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId" />
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="²æÅºw-ì">[{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_21909","destinationFieldId":"customfield_21909"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22600","destinationFieldId":"customfield_22600"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22822","destinationFieldId":"customfield_22822"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22601","destinationFieldId":"customfield_22601"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22603","destinationFieldId":"customfield_22603"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22663","destinationFieldId":"customfield_22663"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22634","destinationFieldId":"customfield_22634"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22651","destinationFieldId":"customfield_22651"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22700","destinationFieldId":"customfield_22700"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22606","destinationFieldId":"customfield_22606"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22607","destinationFieldId":"customfield_22607"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22629","destinationFieldId":"customfield_22629"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22652","destinationFieldId":"customfield_22652"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"description","destinationFieldId":"description"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22627","destinationFieldId":"customfield_22627"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22620","destinationFieldId":"customfield_22620"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22668","destinationFieldId":"customfield_22668"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23602","destinationFieldId":"customfield_23203"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22814","destinationFieldId":"customfield_22814"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23237","destinationFieldId":"customfield_23237"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"issuekey","destinationFieldId":"customfield_23243"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"YES","destinationFieldId":"customfield_23238"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22702","destinationFieldId":"customfield_22702"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22703","destinationFieldId":"customfield_22703"}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="диюбwbХ*'">¶»ž</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue" />
                  <arg name="fieldValue">Maintenance Ticket</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="targetIssueTypeDefinedByCfSelection" />
                  <arg name="issueTypeId">13001</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">H</arg>
                  <arg name="maxAllowed-integerValue" />
                  <arg name="transitionAttachmentsOperation">rr</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="╡крz╙ыв7Ь╡'еy╦^t+м╢ЙЕЙщ]" />
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId" />
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="²æÅºw-ì">[{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_21909","destinationFieldId":"customfield_21909"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22600","destinationFieldId":"customfield_22600"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22822","destinationFieldId":"customfield_22822"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22601","destinationFieldId":"customfield_22601"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22603","destinationFieldId":"customfield_22603"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22663","destinationFieldId":"customfield_22663"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22634","destinationFieldId":"customfield_22634"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22651","destinationFieldId":"customfield_22651"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22700","destinationFieldId":"customfield_22700"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22606","destinationFieldId":"customfield_22606"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22607","destinationFieldId":"customfield_22607"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22629","destinationFieldId":"customfield_22629"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22652","destinationFieldId":"customfield_22652"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"description","destinationFieldId":"description"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22627","destinationFieldId":"customfield_22627"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22620","destinationFieldId":"customfield_22620"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22668","destinationFieldId":"customfield_22668"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23602","destinationFieldId":"customfield_23203"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22814","destinationFieldId":"customfield_22814"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23237","destinationFieldId":"customfield_23237"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"issuekey","destinationFieldId":"customfield_23243"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"YES","destinationFieldId":"customfield_23238"}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23602</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="391" name="Modifica Pianificazione" view="fieldscreen">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20113</meta>
          <results>
            <unconditional-result old-status="žée" status="žée" step="2">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="3" name="Accepted By Supplier">
      <meta name="jira.status.id">14328</meta>
      <actions>
        <action id="91" name="Invia Conferma Intervento al Cliente" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19907</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">๕อywwด้อ&lt;so&lt;uฟ{fต๗ทZใv๚q๗๗ญธ</arg>
              <arg name="FIELD_NOTES">OP: Check Required Fields - only errors, no warnings - SOLO SE OPAA_AUTOMATICALLY_CONFIRMED==null OR !=Yes</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\ndef Category log = Category.getInstance(\"com.onresolve.jira.groovy.PostFunction\")\n \nIssue issue = issue\n\ndef errors = false\ndef warnings = false\n\ndef supplierLabel = properties['cf.supplier'] ? properties['cf.supplier'].toString() : \"OP_SUPPLIER\"\ndef supplier1 =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(supplierLabel)[0]\ndef supplier2 =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(supplierLabel)[1]\n\ndef plannedDate =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.plannedDate'].toString())[0]\ndef plannedHour =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.plannedHour'].toString())[0]\ndef plannedTechs =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.technicians'].toString())[0]\n\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]\nlog.debug \"transitionCheck: \" + issue.getCustomFieldValue(transitionCheck)\ndef automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyConfirmed'].toString())[0]\n\ndef errorMandatoryFields = new ArrayList()\ndef warningEmptyFields = new ArrayList()\n\nif((issue.getCustomFieldValue(automaticallyConfirmed)==null || !issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"Yes\")) &amp;&amp; !issue.getIssueType().getName().equals(properties['it.newInstallation'])){\n    //OP_SUPPLIER\n\tif((issue.getCustomFieldValue(supplier1)==null || (String)issue.getCustomFieldValue(supplier1) == \"\" || issue.getCustomFieldValue(supplier1).toString().equals(\"\")) &amp;&amp; (issue.getCustomFieldValue(supplier2)==null || (String)issue.getCustomFieldValue(supplier2) == \"\" || issue.getCustomFieldValue(supplier2).toString().equals(\"\"))){\n\t\terrors = true\n\t\terrorMandatoryFields.add(supplierLabel)\n\t}\n    //OPAA_PLANNED_DATE\n    if(issue.getCustomFieldValue(plannedDate)==null || (String)issue.getCustomFieldValue(plannedDate) == \"\" || issue.getCustomFieldValue(plannedDate).toString().equals(\"\")){\n        errors = true\n        errorMandatoryFields.add(properties['cf.plannedDate'].toString())\n    }\n    //OPAA_PLANNED_HOUR\n    if(issue.getCustomFieldValue(plannedHour)==null || (String)issue.getCustomFieldValue(plannedHour) == \"\" || issue.getCustomFieldValue(plannedHour).toString().equals(\"\")){\n        warnings = true\n        warningEmptyFields.add(properties['cf.plannedHour'].toString())\n    }\n    //OPAA_TECHNICIANS\n    if(issue.getCustomFieldValue(plannedTechs)==null || (String)issue.getCustomFieldValue(plannedTechs) == \"\" || issue.getCustomFieldValue(plannedTechs).toString().equals(\"\")){\n        //errors = true\n        warnings=true\n        //errorMandatoryFields.add(\"OPAA_TECHNICIANS\")\n        warningEmptyFields.add(properties['cf.technicians'].toString())\n    }\n\n    def output = new ArrayList()\n\n    if (!errors &amp;&amp; !warnings){\n        return true\n    }else{\n        if(issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")){\n            //log.debug \"return true - transitionCheck = Yes\"\n            return true\n        }else{\n            if(!errors &amp;&amp; warnings){\n                def wList = new ArrayList()\n\n                if(warningEmptyFields.size() &gt; 0){\n                    def wListConfirmEmpty = new ArrayList()\n                    wListConfirmEmpty.add(\"W\")\n                    wListConfirmEmpty.add(\"CONFIRM_EMPTY_FIELDS\")\n                    wListConfirmEmpty.add(null)\n                    wListConfirmEmpty.add(warningEmptyFields)\n\n                    wList.add(wListConfirmEmpty)\n                }\n\n                output.add(wList)\n                throw new InvalidInputException('{\"W\":\"' + output.toString() + '\"}')\n                //throw new InvalidInputException(\"W\", output.toString())   \n            }\n            if(errors &amp;&amp; !warnings){\n                def eList = new ArrayList()\n\n                if(errorMandatoryFields.size() &gt; 0){\n                    def eListMandatory = new ArrayList()\n                    eListMandatory.add(\"E\")\n                    eListMandatory.add(\"MANDATORY_FIELDS\")\n                    eListMandatory.add(null)\n                    eListMandatory.add(errorMandatoryFields)\n                    eList.add(eListMandatory)\n                }\n\n                output.add(eList)\n                throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n                //throw new InvalidInputException(\"E\", output.toString())   \n            }\n            if(errors &amp;&amp; warnings){\n                def eList = new ArrayList()\n                def wList = new ArrayList()\n\n                if(errorMandatoryFields.size() &gt; 0){\n                    def eListMandatory = new ArrayList()\n                    eListMandatory.add(\"E\")\n                    eListMandatory.add(\"MANDATORY_FIELDS\")\n                    eListMandatory.add(null)\n                    eListMandatory.add(errorMandatoryFields)\n                    eList.add(eListMandatory)\n                }\n\n                if(warningEmptyFields.size() &gt; 0){\n                    def wListConfirmEmpty = new ArrayList()\n                    wListConfirmEmpty.add(\"W\")\n                    wListConfirmEmpty.add(\"CONFIRM_EMPTY_FIELDS\")\n                    wListConfirmEmpty.add(null)\n                    wListConfirmEmpty.add(warningEmptyFields)\n\n                    wList.add(wListConfirmEmpty)\n                }\n\n                output.add(eList)\n                output.add(wList)\n                throw new InvalidInputException('{\"WE\":\"' + output.toString() + '\"}')\n                //throw new InvalidInputException(\"WE\", output.toString())  \n            }\n        }\n    }\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
 
Issue issue = issue

def errors = false
def warnings = false

def supplierLabel = properties['cf.supplier'] ? properties['cf.supplier'].toString() : "OP_SUPPLIER"
def supplier =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(supplierLabel)[0]

def plannedDate =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.plannedDate'].toString())[0]
def plannedHour =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.plannedHour'].toString())[0]
def plannedTechs =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.technicians'].toString())[0]

def transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]
log.debug "transitionCheck: " + issue.getCustomFieldValue(transitionCheck)
def automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyConfirmed'].toString())[0]

def errorMandatoryFields = new ArrayList()
def warningEmptyFields = new ArrayList()

if((issue.getCustomFieldValue(automaticallyConfirmed)==null || !issue.getCustomFieldValue(automaticallyConfirmed).toString().equals("Yes")) &amp;&amp; !issue.getIssueType().getName().equals(properties['it.newInstallation'])){
    //OP_SUPPLIER
    if(issue.getCustomFieldValue(supplier)==null || (String)issue.getCustomFieldValue(supplier) == "" || issue.getCustomFieldValue(supplier).toString().equals("")){
		errors = true
		errorMandatoryFields.add(supplierLabel)
	}
    //OPAA_PLANNED_DATE
    if(issue.getCustomFieldValue(plannedDate)==null || (String)issue.getCustomFieldValue(plannedDate) == "" || issue.getCustomFieldValue(plannedDate).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.plannedDate'].toString())
    }
    //OPAA_PLANNED_HOUR
    if(issue.getCustomFieldValue(plannedHour)==null || (String)issue.getCustomFieldValue(plannedHour) == "" || issue.getCustomFieldValue(plannedHour).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.plannedHour'].toString())
    }
    //OPAA_TECHNICIANS
    if(issue.getCustomFieldValue(plannedTechs)==null || (String)issue.getCustomFieldValue(plannedTechs) == "" || issue.getCustomFieldValue(plannedTechs).toString().equals("")){
        //errors = true
        warnings=true
        //errorMandatoryFields.add("OPAA_TECHNICIANS")
        warningEmptyFields.add(properties['cf.technicians'].toString())
    }

    def output = new ArrayList()

    if (!errors &amp;&amp; !warnings){
        return true
    }else{
        if(issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")){
            //log.debug "return true - transitionCheck = Yes"
            return true
        }else{
            if(!errors &amp;&amp; warnings){
                def wList = new ArrayList()

                if(warningEmptyFields.size() &gt; 0){
                    def wListConfirmEmpty = new ArrayList()
                    wListConfirmEmpty.add("W")
                    wListConfirmEmpty.add("CONFIRM_EMPTY_FIELDS")
                    wListConfirmEmpty.add(null)
                    wListConfirmEmpty.add(warningEmptyFields)

                    wList.add(wListConfirmEmpty)
                }

                output.add(wList)
                throw new InvalidInputException('{"W":"' + output.toString() + '"}')
                //throw new InvalidInputException("W", output.toString())   
            }
            if(errors &amp;&amp; !warnings){
                def eList = new ArrayList()

                if(errorMandatoryFields.size() &gt; 0){
                    def eListMandatory = new ArrayList()
                    eListMandatory.add("E")
                    eListMandatory.add("MANDATORY_FIELDS")
                    eListMandatory.add(null)
                    eListMandatory.add(errorMandatoryFields)
                    eList.add(eListMandatory)
                }

                output.add(eList)
                throw new InvalidInputException('{"E":"' + output.toString() + '"}')
                //throw new InvalidInputException("E", output.toString())   
            }
            if(errors &amp;&amp; warnings){
                def eList = new ArrayList()
                def wList = new ArrayList()

                if(errorMandatoryFields.size() &gt; 0){
                    def eListMandatory = new ArrayList()
                    eListMandatory.add("E")
                    eListMandatory.add("MANDATORY_FIELDS")
                    eListMandatory.add(null)
                    eListMandatory.add(errorMandatoryFields)
                    eList.add(eListMandatory)
                }

                if(warningEmptyFields.size() &gt; 0){
                    def wListConfirmEmpty = new ArrayList()
                    wListConfirmEmpty.add("W")
                    wListConfirmEmpty.add("CONFIRM_EMPTY_FIELDS")
                    wListConfirmEmpty.add(null)
                    wListConfirmEmpty.add(warningEmptyFields)

                    wList.add(wListConfirmEmpty)
                }

                output.add(eList)
                output.add(wList)
                throw new InvalidInputException('{"WE":"' + output.toString() + '"}')
                //throw new InvalidInputException("WE", output.toString())  
            }
        }
    }
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">981a59bf-045e-4211-92ff-363ee26d86b2</arg>
              <arg name="FIELD_NOTES">Generate SN for old tickets</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef SN =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_NOTIFICATION\")[0]\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\n\nif(issue.getCustomFieldValue(SN) == null &amp;&amp; issue.issueType.name != \"Planned Maintenance Ticket\"){\n    requestMethod = \"POST\";\n\n    def body_req = []\n    body_req = [\n        \"issueKey\": issue.key,\n        \"status\": \"OPE\"\n    ] \n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n    log.debug \"baseURL SN: \" + baseURL\n    log.debug \"body_req SN: \" + body_req\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"201\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        \n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n        log.debug \"errors: \" +  json_object.errors.toString()\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-SAP-SN-UPDATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n}","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">6d00c2e9-590a-4072-837b-afca0657f9fb</arg>
              <arg name="FIELD_NOTES">SAP: update SN status &amp; create SO</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef sapSN =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_NOTIFICATION\")[0]\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\n\nif(issue.issueType.name != \"Planned Maintenance Ticket\" &amp;&amp; issue.getCustomFieldValue(sapSN) != null){\n    requestMethod = \"POST\";\n\n    def body_req = []\n    body_req = [\n        \"issueKey\": issue.key,\n        \"status\": \"PLA\"\n    ] \n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n    log.debug \"baseURL SN: \" + baseURL\n    log.debug \"body_req SN: \" + body_req\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        \n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n        log.debug \"errors: \" +  json_object.errors.toString()\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-SAP-SN-UPDATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }else{\n        /** SERVICE ORDER CREATION **/\n        body_req = [\n            \"issueKey\": issue.key\n        ] \n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\n\n        log.debug \"baseURL SO: \" + baseURL\n        log.debug \"body_req SO: \" + body_req\n        url = new URL(baseURL)\n        connection = (HttpURLConnection)url.openConnection();\n        connection.setRequestMethod(requestMethod);\n        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n        connection.setRequestProperty(\"Accept\", \"*/*\");\n        connection.setDoOutput(true);\n        connection.setDoInput(true);\n        connection.outputStream\n        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n        log.debug connection.outputStream\n        connection.connect();\n\n        output = new ArrayList()\n        eList = new ArrayList()\n        eListErrors = new ArrayList()\n        errorMsgs = new ArrayList()\n\n        if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n            log.debug \"url: \" + url\n            log.debug \"ResponseCode:\" + connection.getResponseCode()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n            \n            def outputMsg = ((HttpURLConnection)connection).errorStream.text\n    \t\tlog.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n            \n            def jsonSlurper = new JsonSlurper()\n            def json_object = jsonSlurper.parseText(outputMsg)\n            assert json_object instanceof Map  \n            log.debug \"message: \" +  json_object.message\n            log.debug \"errors: \" +  json_object.errors.toString()\n            \n            eListErrors.add(\"E\")\n            eListErrors.add(\"OP-SAP-SO-CREATE\")\n            errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n            eListErrors.add(errorMsgs)\n            eList.add(eListErrors)\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        }\n    }\n}\n ","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">mÍ|Ùæ¶ë:ãÎ9Ýæ÷qíÞsWtéï]íÆÞÕç:</arg>
              <arg name="FIELD_NOTES">OP Email Notification: CONFIRM_TO_CUSTOMER - Se OPAA_AUTOMATICALLY_CONFIRMED = null OR != Yes</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.atlassian.jira.issue.link.IssueLink\n\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nCategory log = Category.getInstance(\"com.onresolve.jira.groovy.PostFunction\")\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\ndef requestMethod = \"POST\";\ndef relatesInIssueLink=false\ndef relatesOutIssueLink=false\ndef linkedTickets=new ArrayList()\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\n\ndef automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyConfirmed'].toString())[0]\n\nlog.debug \"issue: \" + issue.key + \" - issue.getCustomFieldValue(automaticallyConfirmed): \" + issue.getCustomFieldValue(automaticallyConfirmed)\n\nif(issue.getCustomFieldValue(automaticallyConfirmed)==null || !issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"Yes\")){\n    \n    /*OP-1038: verifica ticket collegati*/\n    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            relatesInIssueLink=true\n            linkedTickets.add(issueLink.getSourceObject().toString())\n            log.debug \"Issue con relatesInIssueLink\"\n        }\n    }\n    log.debug linkedTickets\n    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            relatesOutIssueLink=true\n            linkedTickets.add(issueLink.getDestinationObject().toString())\n            log.debug \"Issue con relatesOutIssueLink\"\n        }\n    }\n    log.debug linkedTickets\n    \n    def body_req\n    if(relatesInIssueLink || relatesOutIssueLink){\n        body_req = [\n        \t\"templateName\": properties['tt.confirmToCustomer'].toString(),\n        \t\"pec\": false,\n        \t\"issueKey\": issue.key,\n            \"linkedTickets\": linkedTickets\n    \t]\n    }else{\n        body_req = [\n            \"templateName\": properties['tt.confirmToCustomer'].toString(),\n            \"pec\": false,\n            \"issueKey\": issue.key\n        ]\n    }\n    \n\n    def baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/transaction/mail/send\"\n    URL url\n    url = new URL(baseURL)\n\n    HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    log.debug connection.getResponseCode().toString()\n    \n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"SENDMAIL\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n        eListErrors.add(json_object.message)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }else{\n        def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n        def mi = (MutableIssue) issue\n\n        def fieldConfig = automaticallyConfirmed.getRelevantConfig(issue)\n        log.debug \"fieldConfig: \" + fieldConfig + \" da aggiornare su issue ${issue}\"\n        def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"No\" }\n        log.debug \"cfNewValue: \" + cfNewValue\n        automaticallyConfirmed.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())\n\n        ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n        issueIndexingService.reIndex(issue)\n        log.debug \"Updated customfield - issue principale: ${issue.getCustomFieldValue(automaticallyConfirmed)}\"\n    }\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.index.IssueIndexingService
import com.atlassian.jira.issue.link.IssueLink

import org.apache.log4j.Category
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

def requestMethod = "POST";
def relatesInIssueLink=false
def relatesOutIssueLink=false
def linkedTickets=new ArrayList()

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)

def automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyConfirmed'].toString())[0]

log.debug "issue: " + issue.key + " - issue.getCustomFieldValue(automaticallyConfirmed): " + issue.getCustomFieldValue(automaticallyConfirmed)

if(issue.getCustomFieldValue(automaticallyConfirmed)==null || !issue.getCustomFieldValue(automaticallyConfirmed).toString().equals("Yes")){
    
    /*OP-1038: verifica ticket collegati*/
    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            relatesInIssueLink=true
            linkedTickets.add(issueLink.getSourceObject().toString())
            log.debug "Issue con relatesInIssueLink"
        }
    }
    log.debug linkedTickets
    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            relatesOutIssueLink=true
            linkedTickets.add(issueLink.getDestinationObject().toString())
            log.debug "Issue con relatesOutIssueLink"
        }
    }
    log.debug linkedTickets
    
    def body_req
    if(relatesInIssueLink || relatesOutIssueLink){
        body_req = [
        	"templateName": properties['tt.confirmToCustomer'].toString(),
        	"pec": false,
        	"issueKey": issue.key,
            "linkedTickets": linkedTickets
    	]
    }else{
        body_req = [
            "templateName": properties['tt.confirmToCustomer'].toString(),
            "pec": false,
            "issueKey": issue.key
        ]
    }
    

    def baseURL = "http://" + properties['api.env'].toString() + "/op/rest/jira/AA/transaction/mail/send"
    URL url
    url = new URL(baseURL)

    HttpURLConnection connection = (HttpURLConnection)url.openConnection();
    connection.setRequestMethod(requestMethod);
    connection.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
    connection.setRequestProperty("Accept", "*/*");
    connection.setDoOutput(true);
    connection.setDoInput(true);
    connection.outputStream
    connection.outputStream.withWriter("UTF-8") { new StreamingJsonBuilder(it, body_req) }
    log.debug connection.outputStream
    connection.connect();

    def output = new ArrayList()
    def eList = new ArrayList()
    def eListErrors = new ArrayList()
    def errorMsgs = new ArrayList()

    log.debug connection.getResponseCode().toString()
    
    if (!connection.getResponseCode().toString().equals("200")){
        log.debug "url: " + url
        log.debug "ResponseCode:" + connection.getResponseCode()
        log.debug "ResponseMessage:" + connection.getResponseMessage()

        def outputMsg = ((HttpURLConnection)connection).errorStream.text
        log.debug "((HttpURLConnection)connection).errorStream.text: " + outputMsg

        def jsonSlurper = new JsonSlurper()
        def json_object = jsonSlurper.parseText(outputMsg)
        assert json_object instanceof Map  
        log.debug "message: " +  json_object.message

        eListErrors.add("E")
        eListErrors.add("SENDMAIL")
        errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
        eListErrors.add(json_object.message)
        eList.add(eListErrors)

        output.add(eList)
        throw new InvalidInputException('{"E":"' + output.toString() + '"}')
        //throw new InvalidInputException("E", output.toString())
    }else{
        def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
        def mi = (MutableIssue) issue

        def fieldConfig = automaticallyConfirmed.getRelevantConfig(issue)
        log.debug "fieldConfig: " + fieldConfig + " da aggiornare su issue ${issue}"
        def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "No" }
        log.debug "cfNewValue: " + cfNewValue
        automaticallyConfirmed.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())

        ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
        issueIndexingService.reIndex(issue)
        log.debug "Updated customfield - issue principale: ${issue.getCustomFieldValue(automaticallyConfirmed)}"
    }
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">8bdd909f-e27d-4d09-9e29-3486f16f1d9e</arg>
              <arg name="FIELD_NOTES">OP: Set OPAA_AUTOMATICALLY_CONFIRMED=No if OPAA_AUTOMATICALLY_CONFIRMED=null OR !=Yes</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.index.IssueIndexingService\n\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\ndef requestMethod = \"POST\";\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\n\ndef automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyConfirmed'].toString())[0]\n\nlog.debug \"issue: \" + issue.key + \" - issue.getCustomFieldValue(automaticallyConfirmed): \" + issue.getCustomFieldValue(automaticallyConfirmed)\n\nif(issue.getCustomFieldValue(automaticallyConfirmed)==null || !issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"Yes\")){\n        def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n        def mi = (MutableIssue) issue\n\n        def fieldConfig = automaticallyConfirmed.getRelevantConfig(issue)\n        log.debug \"fieldConfig: \" + fieldConfig + \" da aggiornare su issue ${issue}\"\n        def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"No\" }\n        log.debug \"cfNewValue: \" + cfNewValue\n        automaticallyConfirmed.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())\n\n        ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n        issueIndexingService.reIndex(issue)\n        log.debug \"Updated customfield - issue principale: ${issue.getCustomFieldValue(automaticallyConfirmed)}\"\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.index.IssueIndexingService

import org.apache.log4j.Category
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

def requestMethod = "POST";

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)

def automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyConfirmed'].toString())[0]

log.debug "issue: " + issue.key + " - issue.getCustomFieldValue(automaticallyConfirmed): " + issue.getCustomFieldValue(automaticallyConfirmed)

if(issue.getCustomFieldValue(automaticallyConfirmed)==null || !issue.getCustomFieldValue(automaticallyConfirmed).toString().equals("Yes")){
        def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
        def mi = (MutableIssue) issue

        def fieldConfig = automaticallyConfirmed.getRelevantConfig(issue)
        log.debug "fieldConfig: " + fieldConfig + " da aggiornare su issue ${issue}"
        def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "No" }
        log.debug "cfNewValue: " + cfNewValue
        automaticallyConfirmed.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())

        ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
        issueIndexingService.reIndex(issue)
        log.debug "Updated customfield - issue principale: ${issue.getCustomFieldValue(automaticallyConfirmed)}"
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="4">
              <post-functions>
                <function type="class">
                  <arg name="field.copyFieldSource1" />
                  <arg name="textValue">-1</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="workflowName-textValue">OPAA: PM Task Workflow</arg>
                  <arg name="performTransitionAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="scopeType">PARENT</arg>
                  <arg name="destination-scopeTarget">SUB_TASK</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitieslinkedtransition-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="{^êÕj[">31</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.linkedtransition.LinkedTransitionFunction</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="status" />
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="field.name">customfield_22640</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">бЧuЮЧWыwЧљЯЮєw·6Эп|Уnфу¦¶yпt</arg>
                  <arg name="FIELD_NOTES">OP: Check linkedTickets &amp; Fast-Transact them</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService
import org.apache.log4j.Category
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.link.IssueLink
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.WARN)

log.warn "${issue.key} Transazione Complete - Post Function check linkedIssues"

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyConfirmed'].toString())[0]
IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)

Issue issue = issue
//Per test da console
//issue = issueManager.getIssueByKeyIgnoreCase("OPUT-276")

/*DEV*/
CONFIRM_TO_CUSTOMER=properties['wf.tr.confirmToCustomer'].toInteger()

/*PROD*/
//CONFIRM_TO_CUSTOMER

def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
def issueService = ComponentAccessor.getIssueService()

/*Se eseguo la confirm to customer su un ticket con 1 o + ticket collegati, verifico e sposto in automatico gli eventuali ticket collegati*/
log.warn "verifico e sposto in automatico gli eventuali ticket collegati"

if(issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals("No")){
    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            log.warn "Issue con relatesInIssueLink"
            /*Eseguire transazione di stato della sourceIssue*/
            def linkedIssue = issueLink.getSourceObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            def transitionId
            if(linkedIssueStatus.name == properties['wf.acceptedBySupplier'].toString()){
                transitionId=CONFIRM_TO_CUSTOMER
            }
            if(transitionId==CONFIRM_TO_CUSTOMER){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(true)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                //log.warn "issueInputParameters: " + issueInputParameters
                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"

                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 79 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }
        }
    }

    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            log.warn "Issue con relatesOutIssueLink"
            /*Eseguire transazione di stato della destinationIssue*/
            def linkedIssue = issueLink.getDestinationObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            def transitionId
            log.warn "linkedIssue: " + linkedIssue
            log.warn "linkedIssueStatus.name: " + linkedIssueStatus.name
            if(linkedIssueStatus.name == properties['wf.acceptedBySupplier'].toString()){
                transitionId=CONFIRM_TO_CUSTOMER
            }

            if(transitionId==CONFIRM_TO_CUSTOMER){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(true)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 

                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"

                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 122 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }

        }
    }
}</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22693</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="101" name="Conferma senza Notifica al Cliente" view="fieldscreen">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19923</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">Ýý{×Ñ¿|ÛÞo}ã¾}ó§5ï~ºÛ­4ë</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="v+nWù">¶»ž</arg>
                <arg name="FIELD_CONDITION">issue.issueType.name == 'New Installation'|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">5075c35e-1e44-4679-bd11-39d59fb7bffa</arg>
              <arg name="FIELD_NOTES">Create SN for old tickets</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef SN =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_NOTIFICATION\")[0]\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\n\nif(issue.getCustomFieldValue(SN) == null &amp;&amp; issue.issueType.name != \"Planned Maintenance Ticket\"){\n    requestMethod = \"POST\";\n\n    def body_req = []\n    body_req = [\n        \"issueKey\": issue.key,\n        \"status\": \"OPE\"\n    ] \n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n    log.debug \"baseURL SN: \" + baseURL\n    log.debug \"body_req SN: \" + body_req\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"201\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        \n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n        log.debug \"errors: \" +  json_object.errors.toString()\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-SAP-SN-UPDATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n}","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">5ee7ae0d-08e5-4368-b76a-c0a38b7b4a52</arg>
              <arg name="FIELD_NOTES">SAP: update SN status</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyConfirmed'].toString())[0]\n\ndef sapSN =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_NOTIFICATION\")[0]\ndef sapSO =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_ORDER\")[0]\ndef requestMethod\ndef baseURL\ndef snResult = false\n\nURL url\nHttpURLConnection connection\n\n\ndef user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\ndef issueService = ComponentAccessor.getIssueService()\n\nif(issue.issueType.name != \"Planned Maintenance Ticket\" &amp;&amp; issue.getCustomFieldValue(sapSN) != null){\n    requestMethod = \"POST\";\n\n    def body_req = []\n    body_req = [\n        \"issueKey\": issue.key,\n        \"status\": \"PLA\"\n    ] \n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n    log.debug \"baseURL SN: \" + baseURL\n    log.debug \"body_req SN: \" + body_req\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        \n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n        log.debug \"errors: \" +  json_object.errors.toString()\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-SAP-SN-UPDATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0].toString())\n        \n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }else{\n        snResult = true\n        \n    }\n}\n\nif(issue.issueType.name != \"Planned Maintenance Ticket\" &amp;&amp; issue.getCustomFieldValue(sapSN) == null){\n    //Creo la SN non presente sul ticket\n    requestMethod = \"POST\";\n\n    def body_req = []\n    body_req = [\n        \"issueKey\": issue.key,\n        \"status\": \"PLA\"\n    ] \n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n    log.debug \"baseURL SN: \" + baseURL\n    log.debug \"body_req SN: \" + body_req\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n    log.debug connection.getResponseMessage()\n\n    if (!connection.getResponseCode().toString().equals(\"201\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n        log.debug \"errors: \" +  json_object.errors.toString()\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-SAP-SN-UPDATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }else{\n        snResult = true\n        \n    }\n}\n\n\n//Verifico se \u00e8 necessario creare il SO\nif(issue.getCustomFieldValue(sapSO) == null &amp;&amp; snResult){\n    /** SERVICE ORDER CREATION **/\n    def body_req = [\n        \"issueKey\": issue.key\n    ] \n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\n\n    log.debug \"baseURL SO: \" + baseURL\n    log.debug \"body_req SO: \" + body_req\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n        log.debug \"errors: \" +  json_object.errors.toString()\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-SAP-SO-CREATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n}\n\nsnResult = false\n\nif(issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"No\")){\n    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            log.warn \"Issue con relatesInIssueLink\"\n            /*Eseguire transazione di stato della sourceIssue*/\n            def linkedIssue = issueLink.getSourceObject()\n            if(linkedIssue.issueType.name != \"Planned Maintenance Ticket\" &amp;&amp; linkedIssue.getCustomFieldValue(sapSN) != null){\n                requestMethod = \"POST\";\n\n                def body_req = []\n                body_req = [\n                    \"issueKey\": linkedIssue.key,\n                    \"status\": \"PLA\"\n                ] \n\n                baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n                log.debug \"baseURL SN: \" + baseURL\n                log.debug \"body_req SN: \" + body_req\n                url = new URL(baseURL)\n                connection = (HttpURLConnection)url.openConnection();\n                connection.setRequestMethod(requestMethod);\n                connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n                connection.setRequestProperty(\"Accept\", \"*/*\");\n                connection.setDoOutput(true);\n                connection.setDoInput(true);\n                connection.outputStream\n                connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n                log.debug connection.outputStream\n                connection.connect();\n\n                def output = new ArrayList()\n                def eList = new ArrayList()\n                def eListErrors = new ArrayList()\n                def errorMsgs = new ArrayList()\n\n                if (!connection.getResponseCode().toString().equals(\"200\")){\n                    log.debug \"url: \" + url\n                    log.debug \"ResponseCode:\" + connection.getResponseCode()\n                    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n                    def outputMsg = ((HttpURLConnection)connection).errorStream.text\n                    log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n                    def jsonSlurper = new JsonSlurper()\n                    def json_object = jsonSlurper.parseText(outputMsg)\n                    assert json_object instanceof Map  \n                    log.debug \"message: \" +  json_object.message\n                    log.debug \"errors: \" +  json_object.errors.toString()\n\n                    eListErrors.add(\"E\")\n                    eListErrors.add(\"OP-SAP-SN-UPDATE\")\n                    errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0].toString())\n\n                    eListErrors.add(\"Error on linked issue: \" + linkedIssue + \": \" + errorMsgs)\n                    eList.add(eListErrors)\n\n                    output.add(eList)\n                    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n                }else{\n                    snResult = true\n                }\n            }\n            \n            if(linkedIssue.getCustomFieldValue(sapSN) == null &amp;&amp; linkedIssue.issueType.name != \"Planned Maintenance Ticket\"){\n                requestMethod = \"POST\";\n\n                def body_req = []\n                body_req = [\n                    \"issueKey\": linkedIssue.key,\n                    \"status\": \"PLA\"\n                ] \n\n                baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n                log.debug \"baseURL SN: \" + baseURL\n                log.debug \"body_req SN: \" + body_req\n                url = new URL(baseURL)\n                connection = (HttpURLConnection)url.openConnection();\n                connection.setRequestMethod(requestMethod);\n                connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n                connection.setRequestProperty(\"Accept\", \"*/*\");\n                connection.setDoOutput(true);\n                connection.setDoInput(true);\n                connection.outputStream\n                connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n                log.debug connection.outputStream\n                connection.connect();\n\n                def output = new ArrayList()\n                def eList = new ArrayList()\n                def eListErrors = new ArrayList()\n                def errorMsgs = new ArrayList()\n                log.debug connection.getResponseMessage()\n\n                if (!connection.getResponseCode().toString().equals(\"201\")){\n                    log.debug \"url: \" + url\n                    log.debug \"ResponseCode:\" + connection.getResponseCode()\n                    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n                    def outputMsg = ((HttpURLConnection)connection).errorStream.text\n                    log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n                    def jsonSlurper = new JsonSlurper()\n                    def json_object = jsonSlurper.parseText(outputMsg)\n                    assert json_object instanceof Map  \n                    log.debug \"message: \" +  json_object.message\n                    log.debug \"errors: \" +  json_object.errors.toString()\n\n                    eListErrors.add(\"E\")\n                    eListErrors.add(\"OP-SAP-SN-UPDATE\")\n                    errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n                    eListErrors.add(\"Error on linked issue: \" + linkedIssue + \": \" + errorMsgs)\n                    eList.add(eListErrors)\n\n                    output.add(eList)\n                    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n                }else{\n                    snResult = true\n                }\n            }\n            \n            /** SERVICE ORDER CREATION **/\n            if(linkedIssue.getCustomFieldValue(sapSO) == null &amp;&amp; snResult){\n                def body_req = [\n                    \"issueKey\": linkedIssue.key\n                ] \n                baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\n\n                log.debug \"baseURL SO: \" + baseURL\n                log.debug \"body_req SO: \" + body_req\n                url = new URL(baseURL)\n                connection = (HttpURLConnection)url.openConnection();\n                connection.setRequestMethod(requestMethod);\n                connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n                connection.setRequestProperty(\"Accept\", \"*/*\");\n                connection.setDoOutput(true);\n                connection.setDoInput(true);\n                connection.outputStream\n                connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n                log.debug connection.outputStream\n                connection.connect();\n\n                def output = new ArrayList()\n                def eList = new ArrayList()\n                def eListErrors = new ArrayList()\n                def errorMsgs = new ArrayList()\n\n                if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n                    log.debug \"url: \" + url\n                    log.debug \"ResponseCode:\" + connection.getResponseCode()\n                    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n                    def outputMsg = ((HttpURLConnection)connection).errorStream.text\n                    log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n                    def jsonSlurper = new JsonSlurper()\n                    def json_object = jsonSlurper.parseText(outputMsg)\n                    assert json_object instanceof Map  \n                    log.debug \"message: \" +  json_object.message\n                    log.debug \"errors: \" +  json_object.errors.toString()\n\n                    eListErrors.add(\"E\")\n                    eListErrors.add(\"OP-SAP-SO-CREATE\")\n                    errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n                    eListErrors.add(\"Error on linked issue: \" + linkedIssue + \": \" + errorMsgs)\n                    eList.add(eListErrors)\n\n                    output.add(eList)\n                    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n                }\n            }\n            \n            snResult = false\n            \n        }\n    }\n\n    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            log.warn \"Issue con relatesOutIssueLink\"\n            /*Eseguire transazione di stato della destinationIssue*/\n            def linkedIssue = issueLink.getDestinationObject()\n            if(linkedIssue.issueType.name != \"Planned Maintenance Ticket\" &amp;&amp; linkedIssue.getCustomFieldValue(sapSN) != null){\n                requestMethod = \"POST\";\n\n                def body_req = []\n                body_req = [\n                    \"issueKey\": linkedIssue.key,\n                    \"status\": \"PLA\"\n                ] \n\n                baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n                log.debug \"baseURL SN: \" + baseURL\n                log.debug \"body_req SN: \" + body_req\n                url = new URL(baseURL)\n                connection = (HttpURLConnection)url.openConnection();\n                connection.setRequestMethod(requestMethod);\n                connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n                connection.setRequestProperty(\"Accept\", \"*/*\");\n                connection.setDoOutput(true);\n                connection.setDoInput(true);\n                connection.outputStream\n                connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n                log.debug connection.outputStream\n                connection.connect();\n\n                def output = new ArrayList()\n                def eList = new ArrayList()\n                def eListErrors = new ArrayList()\n                def errorMsgs = new ArrayList()\n\n                if (!connection.getResponseCode().toString().equals(\"200\")){\n                    log.debug \"url: \" + url\n                    log.debug \"ResponseCode:\" + connection.getResponseCode()\n                    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n                    def outputMsg = ((HttpURLConnection)connection).errorStream.text\n                    log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n                    def jsonSlurper = new JsonSlurper()\n                    def json_object = jsonSlurper.parseText(outputMsg)\n                    assert json_object instanceof Map  \n                    log.debug \"message: \" +  json_object.message\n                    log.debug \"errors: \" +  json_object.errors.toString()\n\n                    eListErrors.add(\"E\")\n                    eListErrors.add(\"OP-SAP-SN-UPDATE\")\n                    errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0].toString())\n\n                    eListErrors.add(\"Error on linked issue: \" + linkedIssue + \": \" + errorMsgs)\n                    eList.add(eListErrors)\n\n                    output.add(eList)\n                    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n                }else{\n                    snResult = true\n                }\n            }\n            \n            if(linkedIssue.getCustomFieldValue(sapSN) == null &amp;&amp; linkedIssue.issueType.name != \"Planned Maintenance Ticket\"){\n                requestMethod = \"POST\";\n\n                def body_req = []\n                body_req = [\n                    \"issueKey\": linkedIssue.key,\n                    \"status\": \"PLA\"\n                ] \n\n                baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n                log.debug \"baseURL SN: \" + baseURL\n                log.debug \"body_req SN: \" + body_req\n                url = new URL(baseURL)\n                connection = (HttpURLConnection)url.openConnection();\n                connection.setRequestMethod(requestMethod);\n                connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n                connection.setRequestProperty(\"Accept\", \"*/*\");\n                connection.setDoOutput(true);\n                connection.setDoInput(true);\n                connection.outputStream\n                connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n                log.debug connection.outputStream\n                connection.connect();\n\n                def output = new ArrayList()\n                def eList = new ArrayList()\n                def eListErrors = new ArrayList()\n                def errorMsgs = new ArrayList()\n                log.debug connection.getResponseMessage()\n\n                if (!connection.getResponseCode().toString().equals(\"201\")){\n                    log.debug \"url: \" + url\n                    log.debug \"ResponseCode:\" + connection.getResponseCode()\n                    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n                    def outputMsg = ((HttpURLConnection)connection).errorStream.text\n                    log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n                    def jsonSlurper = new JsonSlurper()\n                    def json_object = jsonSlurper.parseText(outputMsg)\n                    assert json_object instanceof Map  \n                    log.debug \"message: \" +  json_object.message\n                    log.debug \"errors: \" +  json_object.errors.toString()\n\n                    eListErrors.add(\"E\")\n                    eListErrors.add(\"OP-SAP-SN-UPDATE\")\n                    errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n                    eListErrors.add(\"Error on linked issue: \" + linkedIssue + \": \" + errorMsgs)\n                    eList.add(eListErrors)\n\n                    output.add(eList)\n                    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n                }else{\n                    snResult=true\n                }\n            }\n            \n            if(linkedIssue.getCustomFieldValue(sapSO) == null &amp;&amp; snResult){\n                /** SERVICE ORDER CREATION **/\n                def body_req = [\n                    \"issueKey\": linkedIssue.key\n                ] \n                baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\n\n                log.debug \"baseURL SO: \" + baseURL\n                log.debug \"body_req SO: \" + body_req\n                url = new URL(baseURL)\n                connection = (HttpURLConnection)url.openConnection();\n                connection.setRequestMethod(requestMethod);\n                connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n                connection.setRequestProperty(\"Accept\", \"*/*\");\n                connection.setDoOutput(true);\n                connection.setDoInput(true);\n                connection.outputStream\n                connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n                log.debug connection.outputStream\n                connection.connect();\n\n                def output = new ArrayList()\n                def eList = new ArrayList()\n                def eListErrors = new ArrayList()\n                def errorMsgs = new ArrayList()\n\n                if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n                    log.debug \"url: \" + url\n                    log.debug \"ResponseCode:\" + connection.getResponseCode()\n                    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n                    def outputMsg = ((HttpURLConnection)connection).errorStream.text\n                    log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n                    def jsonSlurper = new JsonSlurper()\n                    def json_object = jsonSlurper.parseText(outputMsg)\n                    assert json_object instanceof Map  \n                    log.debug \"message: \" +  json_object.message\n                    log.debug \"errors: \" +  json_object.errors.toString()\n\n                    eListErrors.add(\"E\")\n                    eListErrors.add(\"OP-SAP-SO-CREATE\")\n                    errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n                    eListErrors.add(\"Error on linked issue: \" + linkedIssue + \": \" + errorMsgs)\n                    eList.add(eListErrors)\n\n                    output.add(eList)\n                    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n                }\n            }\n            \n        }\n    }\n}\n\n\n\n ","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="4">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="field.copyFieldSource1" />
                  <arg name="textValue">-1</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="workflowName-textValue">OPAA: PM Task Workflow</arg>
                  <arg name="performTransitionAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="scopeType">PARENT</arg>
                  <arg name="destination-scopeTarget">SUB_TASK</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitieslinkedtransition-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="{^êÕj[">31</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.linkedtransition.LinkedTransitionFunction</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="status" />
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">OP: Check linkedTickets &amp; Fast-Transact them</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService
import org.apache.log4j.Category
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.link.IssueLink
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.WARN)

log.warn "${issue.key} Transazione Complete - Post Function check linkedIssues"

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyConfirmed'].toString())[0]
IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)

Issue issue = issue
//Per test da console
//issue = issueManager.getIssueByKeyIgnoreCase("OPUT-276")

/*DEV*/
CONFIRM_TO_CUSTOMER = properties['wf.tr.confirmToCustomerNoEmail'] ? properties['wf.tr.confirmToCustomerNoEmail'] : 101

/*PROD*/
//CONFIRM_TO_CUSTOMER

def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
def issueService = ComponentAccessor.getIssueService()

/*Se eseguo la confirm to customer su un ticket con 1 o + ticket collegati, verifico e sposto in automatico gli eventuali ticket collegati*/
log.warn "verifico e sposto in automatico gli eventuali ticket collegati"

if(issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals("No")){
    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            log.warn "Issue con relatesInIssueLink"
            /*Eseguire transazione di stato della sourceIssue*/
            def linkedIssue = issueLink.getSourceObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            def transitionId
            if(linkedIssueStatus.name == properties['wf.acceptedBySupplier'].toString()){
                transitionId=CONFIRM_TO_CUSTOMER
            }
            if(transitionId==CONFIRM_TO_CUSTOMER){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(true)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                //log.warn "issueInputParameters: " + issueInputParameters
                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"

                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 79 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }
        }
    }

    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            log.warn "Issue con relatesOutIssueLink"
            /*Eseguire transazione di stato della destinationIssue*/
            def linkedIssue = issueLink.getDestinationObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            def transitionId
            log.warn "linkedIssue: " + linkedIssue
            log.warn "linkedIssueStatus.name: " + linkedIssueStatus.name
            if(linkedIssueStatus.name == "Accepted By Supplier"){
                transitionId=CONFIRM_TO_CUSTOMER
            }

            if(transitionId==CONFIRM_TO_CUSTOMER){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(true)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 

                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"

                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 122 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }

        }
    }
}</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="481" name="Clona Tkt" view="fieldscreen">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20401</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">c659704c-9678-4844-9a05-6f3497e391e7</arg>
                <arg name="FIELD_NOTES">Enabled only for Repair and New Installation</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"issue.issueType.name == 'Maintenance Ticket' || (issue.issueType.name == 'New Installation' &amp;&amp; cfValues['OP_ASSET'] != null)","scriptPath":null}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="3">
              <post-functions>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="диюбwbХ*'">¶»ž</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue" />
                  <arg name="fieldValue">New Installation</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="targetIssueTypeDefinedByCfSelection" />
                  <arg name="issueTypeId">12301</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">H</arg>
                  <arg name="maxAllowed-integerValue" />
                  <arg name="transitionAttachmentsOperation">rr</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="╡крz╙ыв7Ь╡'еy╦^t+м╢ЙЕЙщ]" />
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId" />
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="²æÅºw-ì">[{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_21909","destinationFieldId":"customfield_21909"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22600","destinationFieldId":"customfield_22600"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22822","destinationFieldId":"customfield_22822"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22601","destinationFieldId":"customfield_22601"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22603","destinationFieldId":"customfield_22603"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22663","destinationFieldId":"customfield_22663"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22634","destinationFieldId":"customfield_22634"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22651","destinationFieldId":"customfield_22651"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22700","destinationFieldId":"customfield_22700"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22606","destinationFieldId":"customfield_22606"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22607","destinationFieldId":"customfield_22607"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22629","destinationFieldId":"customfield_22629"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22652","destinationFieldId":"customfield_22652"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"description","destinationFieldId":"description"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22627","destinationFieldId":"customfield_22627"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22620","destinationFieldId":"customfield_22620"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22668","destinationFieldId":"customfield_22668"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23602","destinationFieldId":"customfield_23203"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22814","destinationFieldId":"customfield_22814"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23237","destinationFieldId":"customfield_23237"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"issuekey","destinationFieldId":"customfield_23243"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"YES","destinationFieldId":"customfield_23238"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22702","destinationFieldId":"customfield_22702"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22703","destinationFieldId":"customfield_22703"}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="диюбwbХ*'">¶»ž</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue" />
                  <arg name="fieldValue">Maintenance Ticket</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="targetIssueTypeDefinedByCfSelection" />
                  <arg name="issueTypeId">13001</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">H</arg>
                  <arg name="maxAllowed-integerValue" />
                  <arg name="transitionAttachmentsOperation">rr</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="╡крz╙ыв7Ь╡'еy╦^t+м╢ЙЕЙщ]" />
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId" />
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="²æÅºw-ì">[{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_21909","destinationFieldId":"customfield_21909"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22600","destinationFieldId":"customfield_22600"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22822","destinationFieldId":"customfield_22822"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22601","destinationFieldId":"customfield_22601"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22603","destinationFieldId":"customfield_22603"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22663","destinationFieldId":"customfield_22663"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22634","destinationFieldId":"customfield_22634"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22651","destinationFieldId":"customfield_22651"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22700","destinationFieldId":"customfield_22700"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22606","destinationFieldId":"customfield_22606"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22607","destinationFieldId":"customfield_22607"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22629","destinationFieldId":"customfield_22629"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22652","destinationFieldId":"customfield_22652"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"description","destinationFieldId":"description"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22627","destinationFieldId":"customfield_22627"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22620","destinationFieldId":"customfield_22620"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22668","destinationFieldId":"customfield_22668"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23602","destinationFieldId":"customfield_23203"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22814","destinationFieldId":"customfield_22814"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23237","destinationFieldId":"customfield_23237"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"issuekey","destinationFieldId":"customfield_23243"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"YES","destinationFieldId":"customfield_23238"}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23602</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="651" name="Compila Rapporto di Intervento" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19908</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">56a3b352-28f5-4d23-87cf-02d9361d37a5</arg>
                <arg name="FIELD_NOTES">disabled</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"true /*issue.issueType.name == 'Maintenance Ticket'*/","scriptPath":null,"parameters":{}}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">}×ßñÖ¼óßÑÇ­vÍ;õ¶ÜóÝûkm]u÷¹</arg>
              <arg name="FIELD_NOTES">OP: Check Required Fields - solo errors, no warnings</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\ndef errors = false\ndef warnings = false\n\ndef plannedTechs =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.technicians'].toString())[0]\ndef automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]\n\ndef errorMandatoryFields = new ArrayList()\ndef warningEmptyFields = new ArrayList()\n \n//OPAA_TECHNICIANS\nif((issue.getCustomFieldValue(automaticallyClosed)==null || issue.getCustomFieldValue(automaticallyClosed).toString().equals(\"No\")) &amp;&amp; (issue.getCustomFieldValue(plannedTechs)==null || (String)issue.getCustomFieldValue(plannedTechs) == \"\" || issue.getCustomFieldValue(plannedTechs).toString().equals(\"\"))){\n    warnings = true\n    warningEmptyFields.add(properties['cf.technicians'].toString())\n}\n\ndef output = new ArrayList()\n\nif (!errors &amp;&amp; !warnings){\n    return true\n}else{\n    if(!errors &amp;&amp; warnings){\n        if(issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")){\n            //log.debug \"return true\"\n            return true\n        }else{\n            def wList = new ArrayList()\n\n            if(warningEmptyFields.size() &gt; 0){\n                def wListConfirmEmpty = new ArrayList()\n                wListConfirmEmpty.add(\"W\")\n                wListConfirmEmpty.add(\"CONFIRM_EMPTY_FIELDS\")\n                wListConfirmEmpty.add(null)\n                wListConfirmEmpty.add(warningEmptyFields)\n\n                wList.add(wListConfirmEmpty)\n            }\n\n            output.add(wList)\n            throw new InvalidInputException('{\"W\":\"' + output.toString() + '\"}')\n            //throw new InvalidInputException(\"W\", output.toString())   \n        }\n    }\n    if(errors &amp;&amp; !warnings){\n        def eList = new ArrayList()\n        \n        if(errorMandatoryFields.size() &gt; 0){\n            def eListMandatory = new ArrayList()\n            eListMandatory.add(\"E\")\n            eListMandatory.add(\"MANDATORY_FIELDS\")\n            eListMandatory.add(null)\n            eListMandatory.add(errorMandatoryFields)\n            eList.add(eListMandatory)\n        }\n        \n\t\toutput.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        //throw new InvalidInputException(\"E\", output.toString())   \n    }\n    if(errors &amp;&amp; warnings){\n        def eList = new ArrayList()\n        def wList = new ArrayList()\n        \n        if(errorMandatoryFields.size() &gt; 0){\n            def eListMandatory = new ArrayList()\n            eListMandatory.add(\"E\")\n            eListMandatory.add(\"MANDATORY_FIELDS\")\n            eListMandatory.add(null)\n            eListMandatory.add(errorMandatoryFields)\n            eList.add(eListMandatory)\n        }\n        \n        if(warningEmptyFields.size() &gt; 0){\n            def wListConfirmEmpty = new ArrayList()\n            wListConfirmEmpty.add(\"W\")\n            wListConfirmEmpty.add(\"CONFIRM_EMPTY_FIELDS\")\n            wListConfirmEmpty.add(null)\n            wListConfirmEmpty.add(warningEmptyFields)\n\n            wList.add(wListConfirmEmpty)\n        }\n        \n        output.add(eList)\n        output.add(wList)\n        throw new InvalidInputException('{\"WE\":\"' + output.toString() + '\"}')\n        //throw new InvalidInputException(\"WE\", output.toString())  \n    }\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
 
Issue issue = issue

def errors = false
def warnings = false

def plannedTechs =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.technicians'].toString())[0]
def automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]
def transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]

def errorMandatoryFields = new ArrayList()
def warningEmptyFields = new ArrayList()
 
//OPAA_TECHNICIANS
if((issue.getCustomFieldValue(automaticallyClosed)==null || issue.getCustomFieldValue(automaticallyClosed).toString().equals("No")) &amp;&amp; (issue.getCustomFieldValue(plannedTechs)==null || (String)issue.getCustomFieldValue(plannedTechs) == "" || issue.getCustomFieldValue(plannedTechs).toString().equals(""))){
    warnings = true
    warningEmptyFields.add(properties['cf.technicians'].toString())
}

def output = new ArrayList()

if (!errors &amp;&amp; !warnings){
    return true
}else{
    if(!errors &amp;&amp; warnings){
        if(issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")){
            //log.debug "return true"
            return true
        }else{
            def wList = new ArrayList()

            if(warningEmptyFields.size() &gt; 0){
                def wListConfirmEmpty = new ArrayList()
                wListConfirmEmpty.add("W")
                wListConfirmEmpty.add("CONFIRM_EMPTY_FIELDS")
                wListConfirmEmpty.add(null)
                wListConfirmEmpty.add(warningEmptyFields)

                wList.add(wListConfirmEmpty)
            }

            output.add(wList)
            throw new InvalidInputException('{"W":"' + output.toString() + '"}')
            //throw new InvalidInputException("W", output.toString())   
        }
    }
    if(errors &amp;&amp; !warnings){
        def eList = new ArrayList()
        
        if(errorMandatoryFields.size() &gt; 0){
            def eListMandatory = new ArrayList()
            eListMandatory.add("E")
            eListMandatory.add("MANDATORY_FIELDS")
            eListMandatory.add(null)
            eListMandatory.add(errorMandatoryFields)
            eList.add(eListMandatory)
        }
        
		output.add(eList)
        throw new InvalidInputException('{"E":"' + output.toString() + '"}')
        //throw new InvalidInputException("E", output.toString())   
    }
    if(errors &amp;&amp; warnings){
        def eList = new ArrayList()
        def wList = new ArrayList()
        
        if(errorMandatoryFields.size() &gt; 0){
            def eListMandatory = new ArrayList()
            eListMandatory.add("E")
            eListMandatory.add("MANDATORY_FIELDS")
            eListMandatory.add(null)
            eListMandatory.add(errorMandatoryFields)
            eList.add(eListMandatory)
        }
        
        if(warningEmptyFields.size() &gt; 0){
            def wListConfirmEmpty = new ArrayList()
            wListConfirmEmpty.add("W")
            wListConfirmEmpty.add("CONFIRM_EMPTY_FIELDS")
            wListConfirmEmpty.add(null)
            wListConfirmEmpty.add(warningEmptyFields)

            wList.add(wListConfirmEmpty)
        }
        
        output.add(eList)
        output.add(wList)
        throw new InvalidInputException('{"WE":"' + output.toString() + '"}')
        //throw new InvalidInputException("WE", output.toString())  
    }
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">7002bce1-f7a6-481e-8ac6-1ef7f880e630</arg>
              <arg name="FIELD_NOTES">Generate SN for old tickets</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef SN =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_NOTIFICATION\")[0]\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\n\nif(issue.getCustomFieldValue(SN) == null &amp;&amp; issue.issueType.name != \"Planned Maintenance Ticket\"){\n    requestMethod = \"POST\";\n\n    def body_req = []\n    body_req = [\n        \"issueKey\": issue.key,\n        \"status\": \"OPE\"\n    ] \n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n    log.debug \"baseURL SN: \" + baseURL\n    log.debug \"body_req SN: \" + body_req\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"201\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        \n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n        log.debug \"errors: \" +  json_object.errors.toString()\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-SAP-SN-UPDATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n}","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">40624e15-ab4b-4591-9698-0fc7e7b49111</arg>
              <arg name="FIELD_NOTES">SAP: update SN status &amp; create SO</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef sapSN =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_NOTIFICATION\")[0]\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\n\nif(issue.issueType.name != \"Planned Maintenance Ticket\" &amp;&amp; issue.getCustomFieldValue(sapSN) != null){\n    requestMethod = \"POST\";\n\n    def body_req = []\n    body_req = [\n        \"issueKey\": issue.key,\n        \"status\": \"INP\"\n    ] \n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n    log.debug \"baseURL SN: \" + baseURL\n    log.debug \"body_req SN: \" + body_req\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        \n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n        log.debug \"errors: \" +  json_object.errors.toString()\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-SAP-SN-UPDATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }else{\n        /** SERVICE ORDER CREATION **/\n        body_req = [\n            \"issueKey\": issue.key\n        ] \n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\n\n        log.debug \"baseURL SO: \" + baseURL\n        log.debug \"body_req SO: \" + body_req\n        url = new URL(baseURL)\n        connection = (HttpURLConnection)url.openConnection();\n        connection.setRequestMethod(requestMethod);\n        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n        connection.setRequestProperty(\"Accept\", \"*/*\");\n        connection.setDoOutput(true);\n        connection.setDoInput(true);\n        connection.outputStream\n        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n        log.debug connection.outputStream\n        connection.connect();\n\n        output = new ArrayList()\n        eList = new ArrayList()\n        eListErrors = new ArrayList()\n        errorMsgs = new ArrayList()\n\n        if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n            log.debug \"url: \" + url\n            log.debug \"ResponseCode:\" + connection.getResponseCode()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n            \n            def outputMsg = ((HttpURLConnection)connection).errorStream.text\n    \t\tlog.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n            \n            def jsonSlurper = new JsonSlurper()\n            def json_object = jsonSlurper.parseText(outputMsg)\n            assert json_object instanceof Map  \n            log.debug \"message: \" +  json_object.message\n            log.debug \"errors: \" +  json_object.errors.toString()\n            \n            eListErrors.add(\"E\")\n            eListErrors.add(\"OP-SAP-SO-CREATE\")\n            errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n            eListErrors.add(errorMsgs)\n            eList.add(eListErrors)\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        }\n    }\n}\n ","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="5">
              <post-functions>
                <function type="class">
                  <arg name="field.copyFieldSource1" />
                  <arg name="textValue">-1</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="workflowName-textValue">OPAA: PM Task Workflow</arg>
                  <arg name="performTransitionAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="scopeType">PARENT</arg>
                  <arg name="destination-scopeTarget">SUB_TASK</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitieslinkedtransition-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="{^êÕj[">41</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.linkedtransition.LinkedTransitionFunction</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="status" />
                </function>
                <function type="class">
                  <arg name="conditionList">6</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="диюбwbХ*'">¶»ž</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue" />
                  <arg name="fieldValue">Planned Maintenance Ticket</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="field.name">customfield_22628</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="field.type">8</arg>
                  <arg name="full.module.key">com.riadalabs.jira.plugins.insightinsight-post-function</arg>
                  <arg name="field.groovyScript"> import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.MutableIssue;
import com.atlassian.jira.event.type.EventDispatchOption;
import org.apache.log4j.Level

Properties relativePath = new Properties()
File relativePathFile = new File('/var/atlassian/application-data/jira/insightPathToScript.properties')
relativePathFile.withInputStream {
	relativePath.load(it)
}

Properties properties = new Properties()
File propertiesFile = new File('/var/atlassian/application-data/jira' + relativePath['pathToScripts'] + 'opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
/* Get Insight Object Facade from plugin accessor */
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade"); 
def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);
  
/* Get Insight Object Type Facade from plugin accessor */
Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade"); 
def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);
  
/* Get Insight Object Attribute Facade from plugin accessor */
Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade"); 
def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
  
Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory"); 
def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);

Issue issue = issue

def plannedTechsField = issue.getCustomFieldValue(ComponentAccessor.getCustomFieldManager().getCustomFieldObjectByName(properties['cf.technicians'].toString()))
def onSiteTechsField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.techniciansOnsite'].toString())[0];
def OnSiteTechObjects = new ArrayList();

def automaticallyClosedField = issue.getCustomFieldValue(ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString()))

def ONSITE_TECH_REPORT_OBJ_TYPE=properties['iobj.onSiteTechReport'].toString().toInteger()
def ONSITE_TECH_REPORT_ATTR_NAME=properties['iobj.onSiteTechReport.name.id'].toString().toInteger()
def ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF=properties['iobj.onSiteTechReport.technicianRef.id'].toString().toInteger()

if(automaticallyClosedField==null || automaticallyClosedField.toString().equals("No")){
    if(plannedTechsField){
        
        for(technician in plannedTechsField){
            
            //extract insight key ang get object
            def tech=technician.toString()
            def techKey = tech.substring(tech.indexOf('(')+1,tech.indexOf(')'))
            def techName = tech.substring(0,tech.indexOf('(')-1)
            def techObject = objectFacade.loadObjectBean(techKey)
            log.info ("techName: " + techName)
            log.info ("techObject: " + techObject)
            
            def objectTypeOnSiteTechReport = objectTypeFacade.loadObjectTypeBean(ONSITE_TECH_REPORT_OBJ_TYPE);
            def newObjectBean = objectTypeOnSiteTechReport.createMutableObjectBean();
            
            def objectAttributeBeans = new ArrayList();
            def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_NAME); 
            
            objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, nameObjectTypeAttributeBean, techName));
                    
            newObjectBean.setObjectAttributeBeans(objectAttributeBeans);
            /* Store the object into Insight. The new ObjectBean will be updated with an unique ID */
            try {
                newObjectBean = objectFacade.storeObjectBean(newObjectBean);
                log.warn("newObjectBean: " + newObjectBean);
            } catch (Exception vie) {
                log.warn("Could not create issue due to validation exception:" + vie.getMessage());
            }
    
            /* Update TECHNICIAN_REF on the newObject */		        
            def objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF).createMutable() //The id of the attribute
            
            /* Create the new attribute bean based on the value */
            def newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, techKey);
            /* Load the attribute bean */
            def objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), techKey);
            if (objectAttributeBean != null) {
               /* If attribute exist reuse the old id for the new attribute */
               newObjectAttributeBean.setId(objectAttributeBean.getId());
            }
            /* Store the object attribute into Insight. */
            try {
                objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);
            } catch (Exception vie) {
                log.warn("Could not update object attribute due to validation exception:" + vie.getMessage());
            }  
            
            OnSiteTechObjects.add(newObjectBean)
         }
    }
    log.info ("OnSiteTechObjects: " + OnSiteTechObjects)
    def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
    
    if (!OnSiteTechObjects.isEmpty()) {
        MutableIssue mi = (MutableIssue) issue;
        mi.setCustomFieldValue(onSiteTechsField, OnSiteTechObjects);
        ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
    }   
}       </arg>
                  <arg name="field.filepath" />
                  <arg name="class.name">com.riadalabs.jira.plugins.insight.services.jira.postfunction.InsightPostFunction</arg>
                  <arg name="field.description">OP: Create OnSite_Tech_Report objects to be associated to the issue's customfield OP_TECHNICIANS_ONSITE</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22693</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="681" name="Modifica Pianificazione" view="fieldscreen">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20113</meta>
          <results>
            <unconditional-result old-status="žée" status="žée" step="3">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="701" name="Ripianifica Tkt">
          <meta name="opsbar-sequence">30</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <results>
            <unconditional-result old-status="žée" status="žée" step="1">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23245</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field6">customfield_22653</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="field3">customfield_22758</arg>
                  <arg name="field2">customfield_22693</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="field5">customfield_22613</arg>
                  <arg name="field4">customfield_22756</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="4" name="Confirmed and Planned">
      <meta name="jira.status.id">14329</meta>
      <actions>
        <action id="111" name="Compila Rapporto di Intervento" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19908</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">c1bea7bb-faff-4fe3-adfb-1dacc9b04219</arg>
                <arg name="FIELD_NOTES">disabled</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"true /*issue.issueType.name == 'Maintenance Ticket'*/","scriptPath":null,"parameters":{}}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">}×ßñÖ¼óßÑÇ­vÍ;õ¶ÜóÝûkm]u÷¹</arg>
              <arg name="FIELD_NOTES">OP: Check Required Fields - solo errors, no warnings</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\ndef errors = false\ndef warnings = false\n\ndef plannedTechs =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.technicians'].toString())[0]\ndef automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]\n\ndef errorMandatoryFields = new ArrayList()\ndef warningEmptyFields = new ArrayList()\n \n//OPAA_TECHNICIANS\nif((issue.getCustomFieldValue(automaticallyClosed)==null || issue.getCustomFieldValue(automaticallyClosed).toString().equals(\"No\")) &amp;&amp; (issue.getCustomFieldValue(plannedTechs)==null || (String)issue.getCustomFieldValue(plannedTechs) == \"\" || issue.getCustomFieldValue(plannedTechs).toString().equals(\"\"))){\n    warnings = true\n    warningEmptyFields.add(properties['cf.technicians'].toString())\n}\n\ndef output = new ArrayList()\n\nif (!errors &amp;&amp; !warnings){\n    return true\n}else{\n    if(!errors &amp;&amp; warnings){\n        if(issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")){\n            //log.debug \"return true\"\n            return true\n        }else{\n            def wList = new ArrayList()\n\n            if(warningEmptyFields.size() &gt; 0){\n                def wListConfirmEmpty = new ArrayList()\n                wListConfirmEmpty.add(\"W\")\n                wListConfirmEmpty.add(\"CONFIRM_EMPTY_FIELDS\")\n                wListConfirmEmpty.add(null)\n                wListConfirmEmpty.add(warningEmptyFields)\n\n                wList.add(wListConfirmEmpty)\n            }\n\n            output.add(wList)\n            throw new InvalidInputException('{\"W\":\"' + output.toString() + '\"}')\n            //throw new InvalidInputException(\"W\", output.toString())   \n        }\n    }\n    if(errors &amp;&amp; !warnings){\n        def eList = new ArrayList()\n        \n        if(errorMandatoryFields.size() &gt; 0){\n            def eListMandatory = new ArrayList()\n            eListMandatory.add(\"E\")\n            eListMandatory.add(\"MANDATORY_FIELDS\")\n            eListMandatory.add(null)\n            eListMandatory.add(errorMandatoryFields)\n            eList.add(eListMandatory)\n        }\n        \n\t\toutput.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        //throw new InvalidInputException(\"E\", output.toString())   \n    }\n    if(errors &amp;&amp; warnings){\n        def eList = new ArrayList()\n        def wList = new ArrayList()\n        \n        if(errorMandatoryFields.size() &gt; 0){\n            def eListMandatory = new ArrayList()\n            eListMandatory.add(\"E\")\n            eListMandatory.add(\"MANDATORY_FIELDS\")\n            eListMandatory.add(null)\n            eListMandatory.add(errorMandatoryFields)\n            eList.add(eListMandatory)\n        }\n        \n        if(warningEmptyFields.size() &gt; 0){\n            def wListConfirmEmpty = new ArrayList()\n            wListConfirmEmpty.add(\"W\")\n            wListConfirmEmpty.add(\"CONFIRM_EMPTY_FIELDS\")\n            wListConfirmEmpty.add(null)\n            wListConfirmEmpty.add(warningEmptyFields)\n\n            wList.add(wListConfirmEmpty)\n        }\n        \n        output.add(eList)\n        output.add(wList)\n        throw new InvalidInputException('{\"WE\":\"' + output.toString() + '\"}')\n        //throw new InvalidInputException(\"WE\", output.toString())  \n    }\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
 
Issue issue = issue

def errors = false
def warnings = false

def plannedTechs =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.technicians'].toString())[0]
def automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]
def transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]

def errorMandatoryFields = new ArrayList()
def warningEmptyFields = new ArrayList()
 
//OPAA_TECHNICIANS
if((issue.getCustomFieldValue(automaticallyClosed)==null || issue.getCustomFieldValue(automaticallyClosed).toString().equals("No")) &amp;&amp; (issue.getCustomFieldValue(plannedTechs)==null || (String)issue.getCustomFieldValue(plannedTechs) == "" || issue.getCustomFieldValue(plannedTechs).toString().equals(""))){
    warnings = true
    warningEmptyFields.add(properties['cf.technicians'].toString())
}

def output = new ArrayList()

if (!errors &amp;&amp; !warnings){
    return true
}else{
    if(!errors &amp;&amp; warnings){
        if(issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")){
            //log.debug "return true"
            return true
        }else{
            def wList = new ArrayList()

            if(warningEmptyFields.size() &gt; 0){
                def wListConfirmEmpty = new ArrayList()
                wListConfirmEmpty.add("W")
                wListConfirmEmpty.add("CONFIRM_EMPTY_FIELDS")
                wListConfirmEmpty.add(null)
                wListConfirmEmpty.add(warningEmptyFields)

                wList.add(wListConfirmEmpty)
            }

            output.add(wList)
            throw new InvalidInputException('{"W":"' + output.toString() + '"}')
            //throw new InvalidInputException("W", output.toString())   
        }
    }
    if(errors &amp;&amp; !warnings){
        def eList = new ArrayList()
        
        if(errorMandatoryFields.size() &gt; 0){
            def eListMandatory = new ArrayList()
            eListMandatory.add("E")
            eListMandatory.add("MANDATORY_FIELDS")
            eListMandatory.add(null)
            eListMandatory.add(errorMandatoryFields)
            eList.add(eListMandatory)
        }
        
		output.add(eList)
        throw new InvalidInputException('{"E":"' + output.toString() + '"}')
        //throw new InvalidInputException("E", output.toString())   
    }
    if(errors &amp;&amp; warnings){
        def eList = new ArrayList()
        def wList = new ArrayList()
        
        if(errorMandatoryFields.size() &gt; 0){
            def eListMandatory = new ArrayList()
            eListMandatory.add("E")
            eListMandatory.add("MANDATORY_FIELDS")
            eListMandatory.add(null)
            eListMandatory.add(errorMandatoryFields)
            eList.add(eListMandatory)
        }
        
        if(warningEmptyFields.size() &gt; 0){
            def wListConfirmEmpty = new ArrayList()
            wListConfirmEmpty.add("W")
            wListConfirmEmpty.add("CONFIRM_EMPTY_FIELDS")
            wListConfirmEmpty.add(null)
            wListConfirmEmpty.add(warningEmptyFields)

            wList.add(wListConfirmEmpty)
        }
        
        output.add(eList)
        output.add(wList)
        throw new InvalidInputException('{"WE":"' + output.toString() + '"}')
        //throw new InvalidInputException("WE", output.toString())  
    }
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">2580b6a9-1e28-4b71-b42f-6b72d015b920</arg>
              <arg name="FIELD_NOTES">Create SN &amp; SO for old tickets</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef SN =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_NOTIFICATION\")[0]\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\n\nif(issue.getCustomFieldValue(SN) == null &amp;&amp; issue.issueType.name != \"Planned Maintenance Ticket\"){\n    requestMethod = \"POST\";\n\n    def body_req = []\n    body_req = [\n        \"issueKey\": issue.key,\n        \"status\": \"OPE\"\n    ] \n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n    log.debug \"baseURL SN: \" + baseURL\n    log.debug \"body_req SN: \" + body_req\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"201\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        \n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n        log.debug \"errors: \" +  json_object.errors.toString()\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-SAP-SN-UPDATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }else{\n        /** SERVICE ORDER CREATION **/\n        body_req = [\n            \"issueKey\": issue.key\n        ] \n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\n\n        log.debug \"baseURL SO: \" + baseURL\n        log.debug \"body_req SO: \" + body_req\n        url = new URL(baseURL)\n        connection = (HttpURLConnection)url.openConnection();\n        connection.setRequestMethod(requestMethod);\n        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n        connection.setRequestProperty(\"Accept\", \"*/*\");\n        connection.setDoOutput(true);\n        connection.setDoInput(true);\n        connection.outputStream\n        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n        log.debug connection.outputStream\n        connection.connect();\n\n        output = new ArrayList()\n        eList = new ArrayList()\n        eListErrors = new ArrayList()\n        errorMsgs = new ArrayList()\n\n        if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n            log.debug \"url: \" + url\n            log.debug \"ResponseCode:\" + connection.getResponseCode()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n            \n            def outputMsg = ((HttpURLConnection)connection).errorStream.text\n    \t\tlog.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n            \n            def jsonSlurper = new JsonSlurper()\n            def json_object = jsonSlurper.parseText(outputMsg)\n            assert json_object instanceof Map  \n            log.debug \"message: \" +  json_object.message\n            log.debug \"errors: \" +  json_object.errors.toString()\n            \n            eListErrors.add(\"E\")\n            eListErrors.add(\"OP-SAP-SO-CREATE\")\n            errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n            eListErrors.add(errorMsgs)\n            eList.add(eListErrors)\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        }\n    }\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">dea2fa04-ea02-41ce-b5d3-f9f9e0a38379</arg>
              <arg name="FIELD_NOTES">SAP: update SN status</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef sapSN =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_NOTIFICATION\")[0]\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\n\nif(issue.issueType.name != \"Planned Maintenance Ticket\" &amp;&amp; issue.getCustomFieldValue(sapSN) != null){\n    requestMethod = \"POST\";\n\n    def body_req = []\n    body_req = [\n        \"issueKey\": issue.key,\n        \"status\": \"INP\"\n    ] \n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        \n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n        log.debug \"errors: \" +  json_object.errors.toString()\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-SAP-SN-UPDATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n        \n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n}\n\n","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="5">
              <post-functions>
                <function type="class">
                  <arg name="field.copyFieldSource1" />
                  <arg name="textValue">-1</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="workflowName-textValue">OPAA: PM Task Workflow</arg>
                  <arg name="performTransitionAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="scopeType">PARENT</arg>
                  <arg name="destination-scopeTarget">SUB_TASK</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitieslinkedtransition-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="{^êÕj[">41</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.linkedtransition.LinkedTransitionFunction</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="status" />
                </function>
                <function type="class">
                  <arg name="conditionList">6</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="диюбwbХ*'">¶»ž</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue" />
                  <arg name="fieldValue">Planned Maintenance Ticket</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="field.name">customfield_22628</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="field.type">8</arg>
                  <arg name="full.module.key">com.riadalabs.jira.plugins.insightinsight-post-function</arg>
                  <arg name="field.groovyScript">import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.MutableIssue;
import com.atlassian.jira.event.type.EventDispatchOption;
import org.apache.log4j.Level

Properties relativePath = new Properties()
File relativePathFile = new File('/var/atlassian/application-data/jira/insightPathToScript.properties')
relativePathFile.withInputStream {
	relativePath.load(it)
}

Properties properties = new Properties()
File propertiesFile = new File('/var/atlassian/application-data/jira/jira-software/scripts/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
/* Get Insight Object Facade from plugin accessor */
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade"); 
def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);
  
/* Get Insight Object Type Facade from plugin accessor */
Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade"); 
def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);
  
/* Get Insight Object Attribute Facade from plugin accessor */
Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade"); 
def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
  
Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory"); 
def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);

Issue issue = issue

def plannedTechsField = issue.getCustomFieldValue(ComponentAccessor.getCustomFieldManager().getCustomFieldObjectByName(properties['cf.technicians'].toString()))
def onSiteTechsField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.techniciansOnsite'].toString())[0];
def OnSiteTechObjects = new ArrayList();

def automaticallyClosedField = issue.getCustomFieldValue(ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString()))

def ONSITE_TECH_REPORT_OBJ_TYPE=properties['iobj.onSiteTechReport'].toString().toInteger()
def ONSITE_TECH_REPORT_ATTR_NAME=properties['iobj.onSiteTechReport.name.id'].toString().toInteger()
def ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF=properties['iobj.onSiteTechReport.technicianRef.id'].toString().toInteger()
def ONSITE_TECH_REPORT_ATTR_SUPPLIER_REF=properties['iobj.onSiteTechReport.supplierRef.id'] ? properties['iobj.onSiteTechReport.supplierRef.id'].toString().toInteger() : 3073

if(automaticallyClosedField==null || automaticallyClosedField.toString().equals("No")){
    if(plannedTechsField){
        
        for(technician in plannedTechsField){
            
            //extract insight key ang get object
            def tech=technician.toString()
            def techKey = tech.substring(tech.indexOf('(')+1,tech.indexOf(')'))
            def techName = tech.substring(0,tech.indexOf('(')-1)
            def techObject = objectFacade.loadObjectBean(techKey)
            log.info "techKey: " + techKey
            log.info ("techName: " + techName)
            log.info ("techObject: " + techObject)
            
            def objectTypeOnSiteTechReport = objectTypeFacade.loadObjectTypeBean(ONSITE_TECH_REPORT_OBJ_TYPE);
            def newObjectBean = objectTypeOnSiteTechReport.createMutableObjectBean();
            
            def objectAttributeBeans = new ArrayList();
            def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_NAME); 
            
            objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, nameObjectTypeAttributeBean, techName));
                    
            newObjectBean.setObjectAttributeBeans(objectAttributeBeans);
            /* Store the object into Insight. The new ObjectBean will be updated with an unique ID */
            try {
                newObjectBean = objectFacade.storeObjectBean(newObjectBean);
                log.warn("newObjectBean: " + newObjectBean);
            } catch (Exception vie) {
                log.warn("Could not create issue due to validation exception:" + vie.getMessage());
            }
    
            /* Update TECHNICIAN_REF on the newObject */		        
            def objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF).createMutable() //The id of the attribute

            /* Create the new attribute bean based on the value */
            def newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, techKey);
            /* Load the attribute bean */
            def objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), techKey);
            if (objectAttributeBean != null) {
               /* If attribute exist reuse the old id for the new attribute */
               newObjectAttributeBean.setId(objectAttributeBean.getId());
            }
            /* Store the object attribute into Insight. */
            try {
                objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);
            } catch (Exception vie) {
                log.warn("Could not update object attribute due to validation exception:" + vie.getMessage());
            }  
            
            /* Update SUPPLIER_REF on the newObject */	
            /* Get SUPPLIER_REF from Tech */
            def obTriage = objectFacade.loadObjectAttributeBean(techObject.getId(), (properties['iobj.techOnsite.supplierRef'] ? properties['iobj.techOnsite.supplierRef'].toString() : "SUPPLIER_REF")).createMutable()
            def suppRef = obTriage.getObjectAttributeValueBeans().toString()
            def supp = suppRef.toString()
            log.info "supp: " + supp
            suppRefId = supp.substring(supp.indexOf('(')+1,supp.indexOf(')'))
            log.info "suppRefId: " + suppRefId
            suppRefKey = properties['ischema.aa'].toString() + "-" + suppRefId
            log.info "suppRefKey: " + suppRefKey
            suppRefObj = objectFacade.loadObjectBean(properties['ischema.aa'].toString() + "-" + suppRefId)
			log.info "suppRefObj: " + suppRefObj
            
            def suppObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_SUPPLIER_REF).createMutable() //The id of the attribute
            
            /* Create the new attribute bean based on the value */
            newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, suppObjectTypeAttributeBean, suppRefKey);
            /* Load the attribute bean */
            objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), suppRefKey);
            if (objectAttributeBean != null) {
               /* If attribute exist reuse the old id for the new attribute */
               newObjectAttributeBean.setId(objectAttributeBean.getId());
            }
            /* Store the object attribute into Insight. */
            try {
                objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);
            } catch (Exception vie) {
                log.warn("Could not update object attribute due to validation exception:" + vie.getMessage());
            }  
            
            OnSiteTechObjects.add(newObjectBean)
         }
    }
    log.info ("OnSiteTechObjects: " + OnSiteTechObjects)
    def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
    
    if (!OnSiteTechObjects.isEmpty()) {
        MutableIssue mi = (MutableIssue) issue;
        mi.setCustomFieldValue(onSiteTechsField, OnSiteTechObjects);
        ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
    }   
}           </arg>
                  <arg name="field.filepath" />
                  <arg name="class.name">com.riadalabs.jira.plugins.insight.services.jira.postfunction.InsightPostFunction</arg>
                  <arg name="field.description">OP: Create OnSite_Tech_Report objects to be associated to the issue's customfield OP_TECHNICIANS_ONSITE</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22693</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="121" name="Ripianifica Tkt">
          <meta name="opsbar-sequence">30</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <results>
            <unconditional-result old-status="žée" status="žée" step="1">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23245</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field6">customfield_22756</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="field3">customfield_22613</arg>
                  <arg name="field2">customfield_22693</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="field5">customfield_22758</arg>
                  <arg name="field4">customfield_22653</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="131" name="Intervento Eseguito con Linked" view="fieldscreen">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19909</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">7bd8f307-ca58-4131-9202-7dc3a5716587</arg>
                <arg name="FIELD_NOTES">New Installation</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"issue.issueType.name == 'New Installation'","scriptPath":null,"parameters":{}}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
              <condition type="class">
                <arg name="Ë.zÀ¨«Ê'">MUST_FIND_ISSUES</arg>
                <arg name="О©Pєкт">issuekey={issue.issuekey} AND issueFunction in linkedIssuesOf("status='Confirmed and planned'", "relates to")</arg>
                <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                <arg name="conditionValue">1</arg>
                <arg name="class.name">com.googlecode.jsu.workflow.condition.JqlCondition</arg>
                <arg name="fieldValue" />
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">3736629c-da1c-49ae-9ff2-eea923bf090d</arg>
                  <arg name="FIELD_NOTES">Set ASSET INSTALLATION_DATE = OP_EXECUTION_DATE</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport com.atlassian.jira.issue.link.IssueLink\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyDone'] ? properties['cf.automaticallyDone'].toString() : \"OP_AUTOMATICALLY_DONE\")[0]\ndef linkedToClose = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.linkedAssets'] ? properties['cf.linkedAssets'].toString() : \"OP_LINKED_ASSETS\")[0]\ndef currentAsset = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.asset'] ? properties['cf.asset'].toString() : \"OP_ASSET\")[0]\n\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\ndef executionDate =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.executionDate'].toString())[0]\ndef asset =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.asset'].toString())[0]\n\ndef requestMethod\ndef baseURL\n\n/*Script Variables*/\n//Per test da console\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-3719\")\n\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\n\n/*Rimozione allegato rapporto di intervento appena creato*/\n/* Get Insight IQL Facade from plugin accessor */\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\n\n/* Get Insight Object Facade from plugin accessor */\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n/* Get Insight Object Type Facade from plugin accessor */\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\");\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\n\n/* Get Insight Object Attribute Facade from plugin accessor */\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\");\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\n\nlog.debug issue.getCustomFieldValue(asset)[0].getId()\nlog.debug issue.getCustomFieldValue(executionDate)\n\ndef obj = objectFacade.loadObjectBean(issue.getCustomFieldValue(asset)[0].getId());\ndef installationDate = properties['iobj.hardware.instDate.id'] ? properties['iobj.hardware.instDate.id'].toString().toInteger() : 2956\ndef attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(installationDate); \n\ndef newAttrib = obj.createObjectAttributeBean(attribType);\ndef newAttribValue = newAttrib.createObjectAttributeValueBean();\n\nif(issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"Yes\")){\n    try {\n        newAttribValue.setValue(attribType, issue.getCustomFieldValue(executionDate)+1);\n    } catch (Exception vie) {\n        log.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType + \" to \" + issue.getCustomFieldValue(executionDate) + \". Exiting.\");\n        log.warn(SETINSIGHTVALUE: vie.getMessage());\n        return false;\n    }\n\n    def attribValues = newAttrib.getObjectAttributeValueBeans();\n    attribValues.add(newAttribValue);\n    newAttrib.setObjectAttributeValueBeans(attribValues);\n\n    try {\n        newAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\n    } catch (Exception vie) {\n        log.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\n        log.warn(SETINSIGHTVALUE: vie.getMessage());\n        return false;\n    }\n    log.info(\"SETINSIGHTVALUE: Successfully saved value\");\n}\n\ndef user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\ndef issueService = ComponentAccessor.getIssueService()\n\nif(issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"No\")){\n    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            log.warn \"Issue con relatesInIssueLink\"\n            /*Eseguire transazione di stato della sourceIssue*/\n            def linkedIssue = issueLink.getSourceObject()\n            \n            def linkedAsset = linkedIssue.getCustomFieldValue(currentAsset)[0]\n            //log.debug \"linkedIssue: \" + linkedIssue\n            //log.debug \"current asset: \" + asset\n            for (a in issue.getCustomFieldValue(linkedToClose)){\n                //log.debug \"asset selezionati: \" + a\n                if (a == linkedAsset){\n                    //log.debug \"a == asset\"\n                    \n                    obj = objectFacade.loadObjectBean(linkedIssue.getCustomFieldValue(asset)[0].getId());\n                    installationDate = properties['iobj.hardware.instDate.id'] ? properties['iobj.hardware.instDate.id'].toString().toInteger() : 2956\n                    attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(installationDate); \n\n                    newAttrib = obj.createObjectAttributeBean(attribType);\n                    newAttribValue = newAttrib.createObjectAttributeValueBean();\n\n                    try {\n                        newAttribValue.setValue(attribType, issue.getCustomFieldValue(executionDate)+1);\n                    } catch (Exception vie) {\n                        log.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType + \" to \" + linkedIssue.getCustomFieldValue(executionDate) + \". Exiting.\");\n                        log.warn(SETINSIGHTVALUE: vie.getMessage());\n                        return false;\n                    }\n\n                    attribValues = newAttrib.getObjectAttributeValueBeans();\n                    attribValues.add(newAttribValue);\n                    newAttrib.setObjectAttributeValueBeans(attribValues);\n\n                    try {\n                        newAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\n                    } catch (Exception vie) {\n                        log.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\n                        log.warn(SETINSIGHTVALUE: vie.getMessage());\n                        return false;\n                    }\n                    log.info(\"SETINSIGHTVALUE: Successfully saved value\");\n                    \n                }\n            }\n                  \n        }\n    }\n\n    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            log.warn \"Issue con relatesOutIssueLink\"\n            /*Eseguire transazione di stato della destinationIssue*/\n            def linkedIssue = issueLink.getDestinationObject()\n\t\t\tdef linkedAsset = linkedIssue.getCustomFieldValue(currentAsset)[0]\n            //log.debug \"linkedIssue: \" + linkedIssue\n            //log.debug \"current asset: \" + asset\n            for (a in issue.getCustomFieldValue(linkedToClose)){\n                //log.debug \"asset selezionati: \" + a\n                if (a == linkedAsset){\n                    //log.debug \"a == asset\"\n                    \n                    obj = objectFacade.loadObjectBean(linkedIssue.getCustomFieldValue(asset)[0].getId());\n                    installationDate = properties['iobj.hardware.instDate.id'] ? properties['iobj.hardware.instDate.id'].toString().toInteger() : 2956\n                    attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(installationDate); \n\n                    newAttrib = obj.createObjectAttributeBean(attribType);\n                    newAttribValue = newAttrib.createObjectAttributeValueBean();\n\n                    try {\n                        newAttribValue.setValue(attribType, issue.getCustomFieldValue(executionDate)+1);\n                    } catch (Exception vie) {\n                        log.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType + \" to \" + linkedIssue.getCustomFieldValue(executionDate) + \". Exiting.\");\n                        log.warn(SETINSIGHTVALUE: vie.getMessage());\n                        return false;\n                    }\n\n                    attribValues = newAttrib.getObjectAttributeValueBeans();\n                    attribValues.add(newAttribValue);\n                    newAttrib.setObjectAttributeValueBeans(attribValues);\n\n                    try {\n                        newAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\n                    } catch (Exception vie) {\n                        log.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\n                        log.warn(SETINSIGHTVALUE: vie.getMessage());\n                        return false;\n                    }\n                    log.info(\"SETINSIGHTVALUE: Successfully saved value\");\n                    \n                }\n            }\n\n        }\n    }\n}\n","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">9b6405df-608f-4326-9959-e675d5b0c407</arg>
                  <arg name="FIELD_NOTES"> OP Email Notification: TKT_EXECUTED - Mantenuta come post function per non generare blocchi al fornitore legati a errori di invio mail interne </arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\ndef requestMethod = \"POST\";\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef body_req = [\n\t\"templateName\": \"TKT_EXECUTED\",\n\t\"pec\": false,\n    \"issueKey\": issue.key\n]\n\ndef baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/transaction/mail/send\"\nURL url\nurl = new URL(baseURL)\n\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.outputStream\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\nlog.debug connection.outputStream\nconnection.connect();\n\nlog.debug \"url: \" + url\nlog.debug \"ResponseCode:\" + connection.getResponseCode()\nlog.debug \"ResponseMessage:\" + connection.getResponseMessage()\nlog.debug \"getResponseMessage:\" + connection.getResponseMessage()\n\n","scriptPath":null}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">64d02ce2-a8a1-49da-9ae5-dc0c74e1252c</arg>
                  <arg name="FIELD_NOTES">OP: New Installation - Check linkedTickets &amp; Fast-Transact them</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.link.IssueLink\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyDone'] ? properties['cf.automaticallyDone'].toString() : \"OP_AUTOMATICALLY_DONE\")[0]\ndef linkedToClose = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.linkedAssets'] ? properties['cf.linkedAssets'].toString() : \"OP_LINKED_ASSETS\")[0]\ndef currentAsset = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.asset'] ? properties['cf.asset'].toString() : \"OP_ASSET\")[0]\ndef executionDate = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.executionDate'] ? properties['cf.executionDate'].toString() : \"OP_EXECUTION_DATE\")[0]\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\n\n//Per test da console\n//issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-4023\")\nlog.warn \"${issue.key} Transazione TKT ESEGUITO - Post Function check linkedIssues\"\n\n/*DEV*/\nint CLOSE_TKT = properties['wf.tr.tktEseguito'] ? properties['wf.tr.tktEseguito'].toInteger() : 131\nint CLOSE_TKT_NO_LINKED = properties['wf.tr.tktEseguitoNoLinked'] ? properties['wf.tr.tktEseguitoNoLinked'].toInteger() : 631\n\ndef user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\ndef issueService = ComponentAccessor.getIssueService()\n\n/*Se eseguo la confirm to customer su un ticket con 1 o + ticket collegati, verifico e sposto in automatico gli eventuali ticket collegati*/\nlog.warn \"verifico e sposto in automatico gli eventuali ticket collegati\"\nlog.warn \"linked to be closed: \" + issue.getCustomFieldValue(linkedToClose)\n\nlog.debug issue.getIssueType().getName() == properties['it.newInstallation'].toString()\nlog.debug issue.getCustomFieldValue(automaticallyConfirmed)==null\nlog.debug issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"No\")\n\nif(issue.getIssueType().getName() == properties['it.newInstallation'].toString() &amp;&amp; issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"No\")){\n    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            log.warn \"Issue con relatesInIssueLink\"\n            /*Eseguire transazione di stato della sourceIssue*/\n            def linkedIssue = issueLink.getSourceObject()\n            def linkedIssueStatus = linkedIssue.getStatus()\n            def transitionId\n            if(linkedIssueStatus.name == (properties['wf.confirmedAndPlanned'] ? properties['wf.confirmedAndPlanned'].toString() : \"Confirmed and Planned\") ){\n                /*Da considerare solo se l'asset collegato \u00e8 nella lista di quelli scelti*/\n                def asset = linkedIssue.getCustomFieldValue(currentAsset)[0]\n                //log.debug \"linkedIssue: \" + linkedIssue\n                //log.debug \"current asset: \" + asset\n                for (a in issue.getCustomFieldValue(linkedToClose)){\n                    log.debug \"asset selezionati: \" + a\n                    log.debug \"asset corrente: \" + asset\n                    log.debug \"equals? \" + a.toString().equals(asset.toString())\n                    if (a.toString().equals(asset.toString())){\n                        log.debug \"a == asset\"\n                        transitionId=CLOSE_TKT\n                    }\n                }\n            }\n            if(transitionId==CLOSE_TKT){\n                // Prepare our input for the transition\n                def issueInputParameters = issueService.newIssueInputParameters()\n                issueInputParameters.with {\n                    setSkipScreenCheck(true)\n                }\n                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)\n                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), \"Yes\") \n                //log.warn \"issueInputParameters: \" + issueInputParameters\n                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n                def mi = (MutableIssue) linkedIssue\n\n                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)\n                log.warn \"fieldConfig: \" + fieldConfig\n                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())\n\t\t\t\texecutionDate.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), issue.getCustomFieldValue(executionDate)), new DefaultIssueChangeHolder())\n                    \n                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n                issueIndexingService.reIndex(linkedIssue)\n                log.warn \"Updated customfield - issue linkata\"\n\n                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)\n                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {\n                    // Perform the transition\n                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))\n                    if (! issueResult.isValid()) {\n                        log.warn(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n                    }else{\n                        log.warn(\"Transazione fatta 79 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}\")\n                    }\n                } else {\n                    log.warn(\"Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}\")\n                    log.warn(\"Try transition NO linked\")\n                    transitionId=CLOSE_TKT_NO_LINKED\n                    if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {\n                        // Perform the transition\n                        def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))\n                        if (! issueResult.isValid()) {\n                            log.warn(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n                        }else{\n                            log.warn(\"Transazione fatta 79 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}\")\n                        }\n                    } else {\n                        log.warn(\"Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}\")\n                    }\n                }\n            }\n        }\n    }\n\n    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            log.warn \"Issue con relatesOutIssueLink\"\n            /*Eseguire transazione di stato della destinationIssue*/\n            def linkedIssue = issueLink.getDestinationObject()\n            def linkedIssueStatus = linkedIssue.getStatus()\n            def transitionId\n            log.warn \"linkedIssue: \" + linkedIssue\n            log.warn \"linkedIssueStatus.name: \" + linkedIssueStatus.name\n            if(linkedIssueStatus.name == (properties['wf.confirmedAndPlanned'] ? properties['wf.confirmedAndPlanned'].toString() : \"Confirmed and Planned\")){\n                /*Da considerare solo se l'asset collegato \u00e8 nella lista di quelli scelti*/\n                def asset = linkedIssue.getCustomFieldValue(currentAsset)[0]\n                //log.debug \"linkedIssue: \" + linkedIssue\n                //log.debug \"current asset: \" + asset\n                for (a in issue.getCustomFieldValue(linkedToClose)){\n                    log.debug \"asset selezionati: \" + a\n                    log.debug \"asset corrente: \" + asset\n                    log.debug \"equals? \" + a.toString().equals(asset.toString())\n                    if (a.toString().equals(asset.toString())){\n                        log.debug \"a == asset\"\n                \t\ttransitionId=CLOSE_TKT\n                    }\n                }\n            }\n\n            if(transitionId==CLOSE_TKT){\n                // Prepare our input for the transition\n                def issueInputParameters = issueService.newIssueInputParameters()\n                issueInputParameters.with {\n                    setSkipScreenCheck(true)\n                }\n                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)\n                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), \"Yes\") \n\n                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n                def mi = (MutableIssue) linkedIssue\n\n                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)\n                log.warn \"fieldConfig: \" + fieldConfig\n                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())\n\t\t\t\texecutionDate.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), issue.getCustomFieldValue(executionDate)), new DefaultIssueChangeHolder())\n                \n                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n                issueIndexingService.reIndex(linkedIssue)\n                log.warn \"Updated customfield - issue linkata\"\n\n                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {\n                    // Perform the transition\n                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))\n                    if (! issueResult.isValid()) {\n                        log.warn(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n                    }else{\n                        log.warn(\"Transazione fatta 122 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}\")\n                    }\n                } else {\n                    log.warn(\"Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}\")\n                    log.warn(\"Try transition NO linked\")\n                    transitionId=CLOSE_TKT_NO_LINKED\n                    if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {\n                        // Perform the transition\n                        def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))\n                        if (! issueResult.isValid()) {\n                            log.warn(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n                        }else{\n                            log.warn(\"Transazione fatta 79 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}\")\n                        }\n                    } else {\n                        log.warn(\"Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}\")\n                    }\n                }\n            }\n\n        }\n    }\n}","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23244</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="491" name="Clona Tkt" view="fieldscreen">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20401</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">c659704c-9678-4844-9a05-6f3497e391e7</arg>
                <arg name="FIELD_NOTES">Enabled only for Repair and New Installation</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"issue.issueType.name == 'Maintenance Ticket' || (issue.issueType.name == 'New Installation' &amp;&amp; cfValues['OP_ASSET'] != null)","scriptPath":null}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="4">
              <post-functions>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="диюбwbХ*'">¶»ž</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue" />
                  <arg name="fieldValue">New Installation</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="targetIssueTypeDefinedByCfSelection" />
                  <arg name="issueTypeId">12301</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">H</arg>
                  <arg name="maxAllowed-integerValue" />
                  <arg name="transitionAttachmentsOperation">rr</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="╡крz╙ыв7Ь╡'еy╦^t+м╢ЙЕЙщ]" />
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId" />
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="²æÅºw-ì">[{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_21909","destinationFieldId":"customfield_21909"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22600","destinationFieldId":"customfield_22600"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22822","destinationFieldId":"customfield_22822"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22601","destinationFieldId":"customfield_22601"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22603","destinationFieldId":"customfield_22603"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22663","destinationFieldId":"customfield_22663"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22634","destinationFieldId":"customfield_22634"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22651","destinationFieldId":"customfield_22651"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22700","destinationFieldId":"customfield_22700"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22606","destinationFieldId":"customfield_22606"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22607","destinationFieldId":"customfield_22607"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22629","destinationFieldId":"customfield_22629"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22652","destinationFieldId":"customfield_22652"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"description","destinationFieldId":"description"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22627","destinationFieldId":"customfield_22627"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22620","destinationFieldId":"customfield_22620"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22668","destinationFieldId":"customfield_22668"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23602","destinationFieldId":"customfield_23203"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22814","destinationFieldId":"customfield_22814"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23237","destinationFieldId":"customfield_23237"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"issuekey","destinationFieldId":"customfield_23243"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"YES","destinationFieldId":"customfield_23238"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22702","destinationFieldId":"customfield_22702"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22703","destinationFieldId":"customfield_22703"}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="диюбwbХ*'">¶»ž</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue" />
                  <arg name="fieldValue">Maintenance Ticket</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="targetIssueTypeDefinedByCfSelection" />
                  <arg name="issueTypeId">13001</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">H</arg>
                  <arg name="maxAllowed-integerValue" />
                  <arg name="transitionAttachmentsOperation">rr</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="╡крz╙ыв7Ь╡'еy╦^t+м╢ЙЕЙщ]" />
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId" />
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="²æÅºw-ì">[{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_21909","destinationFieldId":"customfield_21909"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22600","destinationFieldId":"customfield_22600"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22822","destinationFieldId":"customfield_22822"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22601","destinationFieldId":"customfield_22601"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22603","destinationFieldId":"customfield_22603"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22663","destinationFieldId":"customfield_22663"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22634","destinationFieldId":"customfield_22634"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22651","destinationFieldId":"customfield_22651"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22700","destinationFieldId":"customfield_22700"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22606","destinationFieldId":"customfield_22606"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22607","destinationFieldId":"customfield_22607"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22629","destinationFieldId":"customfield_22629"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22652","destinationFieldId":"customfield_22652"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"description","destinationFieldId":"description"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22627","destinationFieldId":"customfield_22627"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22620","destinationFieldId":"customfield_22620"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22668","destinationFieldId":"customfield_22668"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23602","destinationFieldId":"customfield_23203"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22814","destinationFieldId":"customfield_22814"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23237","destinationFieldId":"customfield_23237"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"issuekey","destinationFieldId":"customfield_23243"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"YES","destinationFieldId":"customfield_23238"}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23602</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="411" name="Modifica Pianificazione" view="fieldscreen">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20113</meta>
          <results>
            <unconditional-result old-status="Not Done" status="‰Þ" step="4">
              <post-functions>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="441" name="Modifica Impianto">
          <meta name="opsbar-sequence">50</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <results>
            <unconditional-result old-status="Not Done" status="‰Þ" step="4">
              <post-functions>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="571" name="Intervento Completato" view="fieldscreen">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19910</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">185e2a49-1a31-4832-a832-448398454451</arg>
                <arg name="FIELD_NOTES">Da abilitare per Maintenance a corpo ?!?</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"false","scriptPath":null}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">9c177ee6-0134-44a2-9497-0109ef2aa809</arg>
              <arg name="FIELD_NOTES">OP: Check Required Fields - solo errors, no warnings</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\ndef Category log = Category.getInstance(\"com.onresolve.jira.groovy.PostFunction\")\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssue issue = issue\n\nlog.debug \"Transazione Complete - Primo validator\"\nlog.debug \"Transazione Complete - Primo validator - Issue: \" + issue\n\ndef errors = false\ndef warnings = false\n\ndef automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]\n\ndef asset =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.asset'].toString())[0]\ndef assetStatusPre =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.assetStatusPre'].toString())[0]\ndef assetStatusPost =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.assetStatusPost'].toString())[0]\ndef risk =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.riskOnsite'].toString())[0]\ndef riskDescription =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.riskDescription'].toString())[0]\ndef custSignature =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.customerSignature'].toString())[0]\ndef custRef =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.custContactOnsite'].toString())[0]\n//def techSignature =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.technicianSignature'].toString())[0]\ndef kms =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.kms'].toString())[0]\ndef travelH =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.travelHours'].toString())[0]\ndef executionDate =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.executionDate'].toString())[0]\ndef techsOnsite =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.techniciansOnsite'].toString())[0]\n\ndef repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.replacedMaterials'].toString())[0]\ndef reqMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.requiredMaterials'].toString())[0]\n\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]\n\ndef lumpSumPrice =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumPrice'].toString())[0]\n\ndef errorMandatoryFields = new ArrayList()\ndef errorJobStartedCompletedFields = new ArrayList()\ndef errorTechSignatureFields = new ArrayList()\ndef warningEmptyFields = new ArrayList()\n\n/*OP-1038: Eseguo la verifica dei campi obbligatori solo se il ticket su cui sto eseguendo la transazione non \u00e8 stato chiuso in automatico dal sistema*/\nlog.debug \"issue.getCustomFieldValue(automaticallyClosed): \" + issue.getCustomFieldValue(automaticallyClosed)\nlog.debug \"check: \" + !issue.getCustomFieldValue(automaticallyClosed).toString().equals(\"Yes\")\nif(issue.getCustomFieldValue(automaticallyClosed)==null || !issue.getCustomFieldValue(automaticallyClosed).toString().equals(\"Yes\")){\n    //OPAA_LUMP_SUM_PRICE\n    if(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance']) &amp;&amp; (issue.getCustomFieldValue(lumpSumPrice)==null || (String)issue.getCustomFieldValue(lumpSumPrice) == \"\" || issue.getCustomFieldValue(lumpSumPrice).toString().equals(\"\"))){\n        errors = true\n        errorMandatoryFields.add(properties['cf.lumpSumPrice'].toString())\n    }\n\n    //OPAA_REPLACED_MATERIALS\n    if(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance']) &amp;&amp; (issue.getCustomFieldValue(repMaterials)==null || (String)issue.getCustomFieldValue(repMaterials) == \"\" || issue.getCustomFieldValue(repMaterials).toString().equals(\"\"))){\n        log.debug \"warnings true\"\n        warnings = true\n        warningEmptyFields.add(properties['cf.replacedMaterials'].toString())\n    }\n    //OPAA_REQUIRED_MATERIALS\n    if(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance']) &amp;&amp; (issue.getCustomFieldValue(reqMaterials)==null || (String)issue.getCustomFieldValue(reqMaterials) == \"\" || issue.getCustomFieldValue(reqMaterials).toString().equals(\"\"))){\n        log.debug \"warnings true\"\n        warnings = true\n        warningEmptyFields.add(properties['cf.requiredMaterials'].toString())\n    }\n\n\n    //OPAA_ASSET\n    if(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance']) &amp;&amp; (issue.getCustomFieldValue(asset)==null || (String)issue.getCustomFieldValue(asset) == \"\" || issue.getCustomFieldValue(asset).toString().equals(\"\"))){\n        errors = true\n        errorMandatoryFields.add(properties['cf.asset'].toString())\n    }\n    //OPAA_ASSET_STATUS_PRE\n    if(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance']) &amp;&amp; (issue.getCustomFieldValue(assetStatusPre)==null || (String)issue.getCustomFieldValue(assetStatusPre) == \"\" || issue.getCustomFieldValue(assetStatusPre).toString().equals(\"\"))){\n        errors = true\n        errorMandatoryFields.add(properties['cf.assetStatusPre'].toString())\n    }\n    //OPAA_ASSET_STATUS_POST\n    if(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance']) &amp;&amp; (issue.getCustomFieldValue(assetStatusPost)==null || (String)issue.getCustomFieldValue(assetStatusPost) == \"\" || issue.getCustomFieldValue(assetStatusPost).toString().equals(\"\"))){\n        errors = true\n        errorMandatoryFields.add(properties['cf.assetStatusPost'].toString())\n    }\n    //OPAA_RISK_ONSITE\n    if(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance']) &amp;&amp; (issue.getCustomFieldValue(risk)==null || (String)issue.getCustomFieldValue(risk) == \"\" || issue.getCustomFieldValue(risk).toString().equals(\"\"))){\n        errors = true\n        errorMandatoryFields.add(properties['cf.riskOnsite'].toString())\n    }\n    //OPAA_RISK_DESCRIPTION\n    if(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance']) &amp;&amp; (issue.getCustomFieldValue(risk).toString().equals(\"Yes\") &amp;&amp; (issue.getCustomFieldValue(riskDescription)==null || (String)issue.getCustomFieldValue(riskDescription) == \"\" || issue.getCustomFieldValue(riskDescription).toString().equals(\"\")))){\n        errors = true\n        errorMandatoryFields.add(properties['cf.riskDescription'].toString())\n    }\n    //OPAA_CUSTOMER_SIGNATURE\n    if(issue.getCustomFieldValue(custSignature)==null || (String)issue.getCustomFieldValue(custSignature) == \"\" || issue.getCustomFieldValue(custSignature).toString().equals(\"\")){\n        errors = true\n        errorMandatoryFields.add(properties['cf.customerSignature'].toString())\n    }\n    //OPAA_CUSTOMER_CONTACT_ONSITE\n    if(issue.getCustomFieldValue(custRef)==null || (String)issue.getCustomFieldValue(custRef) == \"\" || issue.getCustomFieldValue(custRef).toString().equals(\"\")){\n        errors = true\n        errorMandatoryFields.add(properties['cf.custContactOnsite'].toString())\n    }\n    //OPAA_TECHNICIAN_SIGNATURE\n    /*\n    if(issue.getCustomFieldValue(techSignature)==null || (String)issue.getCustomFieldValue(techSignature) == \"\" || issue.getCustomFieldValue(techSignature).toString().equals(\"\")){\n        errors = true\n        errorMandatoryFields.add(properties['cf.technicianSignature'].toString())\n    }\n    */\n    //15.12.2020 AF - tolta obbligatoriet\u00e0 sui campi OP_KMS e OP_TRAVEL_HOURS poich\u00e8 ora la richiesta utenti \u00e8 di implementare:\n    //Cinzia Salituro: dovrebbero essere obbligatori laddove da contratto il fornitore non ha il diritto fisso di chiamata\n    //OPAA_KMS\n    /*if(issue.getCustomFieldValue(kms)==null || (String)issue.getCustomFieldValue(kms) == \"\" || issue.getCustomFieldValue(kms).toString().equals(\"\")){\n        errors = true\n        errorMandatoryFields.add(properties['cf.kms'].toString())\n    }*/\n    //OPAA_TRAVEL_HOURS\n    /*if(issue.getCustomFieldValue(travelH)==null || (String)issue.getCustomFieldValue(travelH) == \"\" || issue.getCustomFieldValue(travelH).toString().equals(\"\")){\n        errors = true\n        errorMandatoryFields.add(properties['cf.travelHours'].toString())\n    }*/\n    //OPAA_EXECUTION_DATE\n    if(issue.getCustomFieldValue(executionDate)==null || (String)issue.getCustomFieldValue(executionDate) == \"\" || issue.getCustomFieldValue(executionDate).toString().equals(\"\")){\n        errors = true\n        errorMandatoryFields.add(properties['cf.executionDate'].toString())\n    }\n\n    //Job Started + Job Completed di ogni oggetto Tech_OnSite_Report associato al campo OPAA_TECHS_ONSITE\n    if(issue.getCustomFieldValue(techsOnsite)!=null &amp;&amp; (String)issue.getCustomFieldValue(techsOnsite) != \"\" &amp;&amp; !issue.getCustomFieldValue(techsOnsite).toString().equals(\"\")){\n        /*Ciclare tutti gli oggetti associati al campo*/\n        //insight classes &amp; components\n        Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n        Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n        def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n        def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n        def techsOnsiteField = issue.getCustomFieldValue(techsOnsite)\n\t\tlog.debug \"techsOnsiteField: \" + techsOnsiteField\n        for(technician in techsOnsiteField){\n            //extract insight key ang get object\n            def techOnsite=technician.toString()\n            def techOnsiteKey = techOnsite.substring(techOnsite.indexOf('(')+1,techOnsite.indexOf(')'))\n            def techOnsiteObject = objectFacade.loadObjectBean(techOnsiteKey)\n            //get \"Job Started\" for that Technician\n            def obTriage\n            def techJobStarted\n            def techJobCompleted\n            def techRef, tech, techRefKey, techRefObject, techRefName\n            if(objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnSite.jobStarted'].toString())){\n                obTriage = objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnSite.jobStarted'].toString()).createMutable()\n                techJobStarted = obTriage.getObjectAttributeValueBeans().toString()\n            }\n            \n            log.debug techJobStarted \n            //get \"Job Completed\" for that Technician\n            if(objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnSite.jobCompleted'].toString())){\n                obTriage = objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnSite.jobCompleted'].toString()).createMutable()\n                techJobCompleted = obTriage.getObjectAttributeValueBeans().toString()\n            }\n            \n            log.debug techJobCompleted\n            //get \"Technician_REF\" for that Technician\n            log.debug \"techOnsiteObject: \" + techOnsiteObject\n            \n            if(objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnsite.technicianRef'].toString())){\n                \n                obTriage = objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnsite.technicianRef'].toString()).createMutable()\n                techRef = obTriage.getObjectAttributeValueBeans().toString()\n                tech = techRef.toString()\n                log.debug \"tech: \" + tech\n                techRefKey = tech.substring(tech.indexOf('(')+1,tech.indexOf(')'))\n                log.debug \"techRefKey: \" + techRefKey\n                techRefObject = objectFacade.loadObjectBean(properties['ischema.aa'].toString() + \"-\" + techRefKey)\n                techRefName = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()\n            }\n            \n    \t\tlog.debug techRefName\n\n            if(!techJobStarted || !techJobCompleted){\n                errors = true\n                errorJobStartedCompletedFields.add(techRefName.substring(techRefName.indexOf('(')+1,techRefName.indexOf(')')))\n            }    \n         }    \n    }\n    \n    def techSignFound=false\n    //Firma di almeno un oggetto Tech_OnSite_Report associato al campo OPAA_TECHS_ONSITE\n    if(issue.getCustomFieldValue(techsOnsite)!=null &amp;&amp; (String)issue.getCustomFieldValue(techsOnsite) != \"\" &amp;&amp; !issue.getCustomFieldValue(techsOnsite).toString().equals(\"\")){\n        /*Ciclare tutti gli oggetti associati al campo*/\n        //insight classes &amp; components\n        Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n        Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n        def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n        def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n        def techsOnsiteField = issue.getCustomFieldValue(techsOnsite)\n\t\tlog.debug \"techsOnsiteField: \" + techsOnsiteField\n        for(technician in techsOnsiteField){\n            //extract insight key ang get object\n            def techOnsite=technician.toString()\n            def techOnsiteKey = techOnsite.substring(techOnsite.indexOf('(')+1,techOnsite.indexOf(')'))\n            def techOnsiteObject = objectFacade.loadObjectBean(techOnsiteKey)\n            //get \"Job Started\" for that Technician\n            def obTriage\n            def techSignature, techSignatureAttr\n            techSignatureAttr = properties['iobj.techOnSite.signature'] ? properties['iobj.techOnSite.signature'].toString() : \"TECHNICIAN_SIGNATURE\"\n            def techRef, tech, techRefKey, techRefObject, techRefName\n            if(objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), techSignatureAttr)){\n                obTriage = objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), techSignatureAttr).createMutable()\n                techSignature = obTriage.getObjectAttributeValueBeans().toString()\n            }\n            \n            log.debug \"techSignature: \" + techSignature \n\n            //get \"Technician_REF\" for that Technician\n            log.debug \"techOnsiteObject: \" + techOnsiteObject\n            \n            if(objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnsite.technicianRef'].toString())){\n                obTriage = objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnsite.technicianRef'].toString()).createMutable()\n                techRef = obTriage.getObjectAttributeValueBeans().toString()\n                tech = techRef.toString()\n                log.debug \"tech: \" + tech\n                techRefKey = tech.substring(tech.indexOf('(')+1,tech.indexOf(')'))\n                log.debug \"techRefKey: \" + techRefKey\n                techRefObject = objectFacade.loadObjectBean(properties['ischema.aa'].toString() + \"-\" + techRefKey)\n                techRefName = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()\n            }\n            \n    \t\tlog.debug techRefName\n\n            if(!techSignature){\n                errorTechSignatureFields.add(techRefName.substring(techRefName.indexOf('(')+1,techRefName.indexOf(')')))\n            }else{\n                techSignFound = true\n                errorTechSignatureFields.clear()\n            }    \n         }\n        if(!techSignFound){\n            errors = true\n        }\n    }\n\n    def output = new ArrayList()\n\n    if (!errors &amp;&amp; !warnings){\n        return true\n    }else{\n        if(!errors &amp;&amp; warnings){\n            //Se ci sono solo warnings verifico se l'utente ha gi\u00e0 dichiarato di voler proseguire comunque\n            // - transition field \"OPAA_CHECK_AND_CONFIRM\"=\"Yes\"\n            // - in caso contrario invio i warning a FE\n\n            //log.debug \"transitionCheck: \" + issue.getCustomFieldValue(transitionCheck)\n            //log.debug \"result: \" + issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")\n            if(issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")){\n                //log.debug \"return true\"\n                return true\n            }else{\n                def wList = new ArrayList()\n\n                if(warningEmptyFields.size() &gt; 0){\n                    def wListConfirmEmpty = new ArrayList()\n                    wListConfirmEmpty.add(\"W\")\n                    wListConfirmEmpty.add(\"CONFIRM_EMPTY_FIELDS\")\n                    wListConfirmEmpty.add(null)\n                    wListConfirmEmpty.add(warningEmptyFields)\n\n                    wList.add(wListConfirmEmpty)\n                }\n\n                output.add(wList)\n                log.debug \"throw exception: \" + output.toString()\n                throw new InvalidInputException('{\"W\":\"' + output.toString() + '\"}')\n                //throw new InvalidInputException(\"W\", output.toString())   \n            }\n\n        }\n        if(errors &amp;&amp; !warnings){\n            def eList = new ArrayList()\n\n            if(errorMandatoryFields.size() &gt; 0){\n                def eListMandatory = new ArrayList()\n                eListMandatory.add(\"E\")\n                eListMandatory.add(\"MANDATORY_FIELDS\")\n                eListMandatory.add(null)\n                eListMandatory.add(errorMandatoryFields)\n                eList.add(eListMandatory)\n            }\n\n            if(errorJobStartedCompletedFields.size() &gt; 0){\n                def eListStartEnd = new ArrayList()\n                eListStartEnd.add(\"E\")\n                eListStartEnd.add(\"MISSING_ONSITE_START_END_DETAILS\")\n                eListStartEnd.add(null)\n                eListStartEnd.add(errorJobStartedCompletedFields)\n                eList.add(eListStartEnd)\n            }\n            \n            if(errorTechSignatureFields.size() &gt; 0){\n                def eListTechSign = new ArrayList()\n                eListTechSign.add(\"E\")\n                eListTechSign.add(\"MISSING_TECH_SIGNATURE\")\n                eListTechSign.add(null)\n                eListTechSign.add(errorTechSignatureFields)\n                eList.add(eListTechSign)\n            }\n\n            output.add(eList)\n            log.debug \"throw exception: \" + output.toString()\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n            //throw new InvalidInputException(\"E\", output.toString())   \n        }\n        if(errors &amp;&amp; warnings){\n            def eList = new ArrayList()\n            def wList = new ArrayList()\n            if(errorMandatoryFields.size() &gt; 0){\n                def eListMandatory = new ArrayList()\n                eListMandatory.add(\"E\")\n                eListMandatory.add(\"MANDATORY_FIELDS\")\n                eListMandatory.add(null)\n                eListMandatory.add(errorMandatoryFields)\n                eList.add(eListMandatory)\n            }\n\n            if(errorJobStartedCompletedFields.size() &gt; 0){\n                def eListStartEnd = new ArrayList()\n                eListStartEnd.add(\"E\")\n                eListStartEnd.add(\"MISSING_ONSITE_START_END_DETAILS\")\n                eListStartEnd.add(null)\n                eListStartEnd.add(errorJobStartedCompletedFields)\n                eList.add(eListStartEnd)\n            }\n\n            \n            if(errorTechSignatureFields.size() &gt; 0){\n                def eListTechSign = new ArrayList()\n                eListTechSign.add(\"E\")\n                eListTechSign.add(\"MISSING_TECH_SIGNATURE\")\n                eListTechSign.add(null)\n                eListTechSign.add(errorTechSignatureFields)\n                eList.add(eListTechSign)\n            }\n            \n            if(warningEmptyFields.size() &gt; 0){\n                def wListConfirmEmpty = new ArrayList()\n                wListConfirmEmpty.add(\"W\")\n                wListConfirmEmpty.add(\"CONFIRM_EMPTY_FIELDS\")\n                wListConfirmEmpty.add(null)\n                wListConfirmEmpty.add(warningEmptyFields)\n\n                wList.add(wListConfirmEmpty)\n            }\n\n            output.add(eList)\n            output.add(wList)\n            log.debug \"throw exception: \" + output.toString()\n            throw new InvalidInputException('{\"WE\":\"' + output.toString() + '\"}')\n            //throw new InvalidInputException(\"WE\", output.toString())  \n        }\n    }\n}\n","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">44d55f4b-44ce-4e70-af32-0ef4516e93e6</arg>
              <arg name="FIELD_NOTES">OP: REST API: OP generazione Rapporto di intervento</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nCategory log = Category.getInstance(\"com.onresolve.jira.groovy.PostFunction\")\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\nlog.debug \"OnSite Report per issue: \" + issue.key\n/* REST API per Generazione Allegato Rapporto di Intervento */\nrequestMethod = \"PUT\";\n\n\n/*!!Da rimuovere appena risolti i bug!!*/\nif(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance'])){\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/AA/ticket/\" + issue.key.toString() + \"/attachment/onsite\"\n    log.debug \"baseUrl: \" + baseURL\n\n    URL url\n    url = new URL(baseURL)\n    HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.connect();\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        eListErrors.add(\"E\")\n        eListErrors.add(\"GENERATE-ONSITEREPORT\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n\n}\n","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">4982e177-86e5-4bc8-8965-b00de7d61755</arg>
              <arg name="FIELD_NOTES">OP: REST API: OP per consuntivazione ticket</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nCategory log = Category.getInstance(\"com.onresolve.jira.groovy.PostFunction\")\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\ndef automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]\n\ndef requestMethod\ndef baseURL\n\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\nboolean unatantum=true\n\n/*!!Da rimuovere appena risolti i bug!!*/\nif(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance'])){\n\n    /*OP-1038: la contabilizzazione dovr\u00e0 prevedere le unatantum rates solo se il ticket non \u00e8 stato chiuso in automatico*/\n    if(issue.getCustomFieldValue(automaticallyClosed)!=null &amp;&amp; issue.getCustomFieldValue(automaticallyClosed).toString().equals(\"Yes\")){\n        unatantum=false    \n    }\n    log.debug \"Consuntivazione ticket \" + issue.key + \" con unatantum: \" + unatantum\n\n    /* REST API per Contabilizzazione Intervento */\n    requestMethod = \"GET\";\n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/AA/ticket/issueKey/\" + issue.key.toString() + \"/close?um=\"+unatantum.toString()\n    log.debug \"baseUrl: \" + baseURL\n\n    /*Definire parametro di input unatantum=true|false in base al valore della variabile booleana unatantum*/\n    URL url = new URL(baseURL)\n    HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.connect();\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n    //IssueIndexingService issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\n    //issueIndexingService.reIndex(issueManager.getIssueObject(issue.key.toString()))\n\n    //def unaTantumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OPAA_UNATANTUM_RATES\")[0]\n    //log.warn \"unaTantumRates: \" + issue.getCustomFieldValue(unaTantumRates)\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        log.debug \"Response: \" + connection\n\n        /*ROLLBACK*/\n        /*Rimozione allegato rapporto di intervento appena creato*/\n        /* Get Insight IQL Facade from plugin accessor */\n        Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \n        def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\n\n        /* Get Insight Object Facade from plugin accessor */\n        Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");\n        def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n        /* Get Insight Object Type Facade from plugin accessor */\n        Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\");\n        def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\n\n        /* Get Insight Object Attribute Facade from plugin accessor */\n        Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n        def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n\n        Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\");\n        def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\n\n        /* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include \" around value */\n        def objects = iqlFacade.findObjectsByIQLAndSchema(DBO, \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".\\\"\" + properties['iobj.attachmentCategory.name'].toString() + \"\\\" = \\\"\" + properties['iobj.attachmentCategory.objs.rappIntFAAC'].toString() + \"\\\" AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"); // See the complete list of possible IQL on the Insight Query Language documentation page\n        /* If this is a mandatory field you should be able to do this: */\n        log.info(\"Insight object: \" + objects[0]);\n\n        if(objects[0]){\n            /* UPDATE OJBECT DELETED VALUE */\n            def obTriage = objectFacade.loadObjectAttributeBean(objects[0].getId(), properties['iobj.attachmentCategory.deleted'].toString()).createMutable()  \n            def value = obTriage.getObjectAttributeValueBeans()\n\n            def valueBean = obTriage.createObjectAttributeValueBean()\n            valueBean.setValue(objectTypeAttributeFacade.loadObjectTypeAttributeBean(obTriage.getObjectTypeAttributeId()), true)\n            /*Clean actual value*/\n            value.clear()\n            value.add(valueBean);\n            obTriage.setObjectAttributeValueBeans(value)\n\n            //Update OJBECT attribute value\n            try {\n                obTriage = objectFacade.storeObjectAttributeBean(obTriage);\n            } catch (Exception vie) {\n                log.warn(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\n            }\n        }\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-TKT-ACCOUNTING\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }else{\n        /*OP-1038: consuntivazione terminata correttamente - se \u00e8 stata eseguita con unatantum=true setto a No il campo OPAA_AUTOMATICALLY_CLOSED*/\n        if(unatantum){\n            def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n            def mi = (MutableIssue) issue\n\n            def fieldConfig = automaticallyClosed.getRelevantConfig(issue)\n            log.debug \"fieldConfig: \" + fieldConfig\n            def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"No\" }\n            automaticallyClosed.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())\n\n            ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n            issueIndexingService.reIndex(issue)\n            log.debug \"Updated customfield - issue principale ${issue.getCustomFieldValue(automaticallyClosed)}\"\n        }\n    }\n}","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">c6fc1cea-b26c-460d-83ef-3294126d30cf</arg>
              <arg name="FIELD_NOTES">OP: REST API: OP Email Notification: ONSITE_REPORT - only IF OPAA_AUTOMATICALLY_CLOSED!=Yes AND sendMail!=NO MAIL AND ci sono ticket collegati. ----&gt; DISABLED su transazione complete - viene fatto manualmente da SEND ONSITE REPORT</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.link.IssueLink\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nCategory log = Category.getInstance(\"com.onresolve.jira.groovy.PostFunction\")\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]\ndef sendMailTo =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.sendMailTo'].toString())[0]\ndef sendMailToRec =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.sendMailToRecipients'].toString())[0]\ndef onsiteReportDate = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.wfOnsiteReport'].toString())[0]\n\ndef requestMethod\ndef baseURL\n\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\ndef relatesInIssueLink=false\ndef relatesOutIssueLink=false\ndef linkedTickets=new ArrayList()\ndef body_req\ndef sendmail=true\n\nif(issue.getCustomFieldValue(automaticallyClosed)==null || !issue.getCustomFieldValue(automaticallyClosed).toString().equals(\"Yes\")){\n\n    /*OP-1038: verifica ticket collegati*/\n    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            relatesInIssueLink=true\n            linkedTickets.add(issueLink.getSourceObject().toString())\n            log.debug \"Issue con relatesInIssueLink\"\n        }\n    }\n    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            relatesOutIssueLink=true\n            linkedTickets.add(issueLink.getDestinationObject().toString())\n            log.debug \"Issue con relatesOutIssueLink\"\n        }\n    }\n    \n    log.debug \"issue.getCustomFieldValue(sendMailTo).toString(): \" + issue.getCustomFieldValue(sendMailTo).toString()\n    if((relatesInIssueLink || relatesOutIssueLink) &amp;&amp; !issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.noEmail'].toString()) &amp;&amp; issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.currentReport'].toString())){\n        //OP-1038: inviare solo la mail con il rapporto di intervento del ticket corrente\n        body_req = [\n            \"templateName\": properties['tt.onSiteReport'].toString(),\n            \"pec\": false,\n            \"issueKey\": issue.key,\n            \"additionalRecipients\": issue.getCustomFieldValue(sendMailToRec).toString()\n        ]\n        /*31.07.2020 AF: nella transazione complete NON inviare mail la mail per i ticket con collegati - il rapporto di intervento dei ticket \"figli\" viene generato dopo l'invio della mail sul \"padre\" quindi non verrebbe incluso nella mail*/\n        /*L'invio della mail verr\u00e0 fatto successivamente rispetto alla chiusura con \"Send OnSite Report\"*/\n        sendmail=false\n    }else if((relatesInIssueLink || relatesOutIssueLink) &amp;&amp; !issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.noEmail'].toString()) &amp;&amp; issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.currentReport'].toString())){\n        //OP-1038: inviare la mail con tutti i rapporti di intervento dei ticket collegati\n        body_req = [\n            \"templateName\": properties['tt.onSiteReport'].toString(),\n            \"pec\": false,\n            \"issueKey\": issue.key,\n            \"linkedTickets\": linkedTickets,\n            \"additionalRecipients\": issue.getCustomFieldValue(sendMailToRec).toString()\n        ]\n        /*31.07.2020 AF: nella transazione complete NON inviare mail la mail per i ticket con collegati - il rapporto di intervento dei ticket \"figli\" viene generato dopo l'invio della mail sul \"padre\" quindi non verrebbe incluso nella mail*/\n        /*L'invio della mail verr\u00e0 fatto successivamente rispetto alla chiusura con \"Send OnSite Report\"*/\n        sendmail=false\n    }else if(!relatesInIssueLink &amp;&amp; !relatesOutIssueLink){\n        /*AF 20200729 - su FAAC Service la notifica con il rapporto di intervento viene inviata solo su esplicita decisione dell'utente - che spinger\u00e0 SEND ONSITE REPORT dopo aver chiuso il ticket. Quindi se non ci sono ticket collegati settiamo sendmail=false*/\n        sendmail=false\n        body_req = [\n            \"templateName\": properties['tt.onSiteReport'].toString(),\n            \"pec\": false,\n            \"issueKey\": issue.key,\n            \"additionalRecipients\": issue.getCustomFieldValue(sendMailToRec).toString()\n        ]\n    }else{\n        //OP-1038: non inviare la mail\n        sendmail=false\n    }\n    \n    log.debug \"sendmail: \" + sendmail\n    if(sendmail){\n        /* REST API per Invio Notifica Email ONSITE_REPORT */\n        requestMethod = \"POST\";\n\n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/transaction/mail/send\"\n        URL url = new URL(baseURL)\n        HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n        connection.setRequestMethod(requestMethod);\n        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n        connection.setRequestProperty(\"Accept\", \"*/*\");\n        connection.setDoOutput(true);\n        connection.setDoInput(true);\n        connection.outputStream\n        log.debug \"body_req: \" + body_req\n        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n        log.debug connection.outputStream\n        connection.connect();\n        \n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        //log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n        def output = new ArrayList()\n        def eList = new ArrayList()\n        def eListErrors = new ArrayList()\n        def errorMsgs = new ArrayList()\n\n        if (!connection.getResponseCode().toString().equals(\"200\")){\n            log.debug \"url: \" + url\n            log.debug \"ResponseCode:\" + connection.getResponseCode()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n            \n            /* Get Insight IQL Facade from plugin accessor */\n            Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \n            def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\n\n            /* Get Insight Object Facade from plugin accessor */\n            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");\n            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n            /* Get Insight Object Type Facade from plugin accessor */\n            Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\");\n            def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\n\n            /* Get Insight Object Attribute Facade from plugin accessor */\n            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n\n            Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\");\n            def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\n\n            /* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include \" around value */\n            /*ROLLBACK*/\n            /*Rimozione allegato rapporto di intervento appena creato*/\n            def objects = iqlFacade.findObjectsByIQLAndSchema(DBO, \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".\\\"Name\\\" = \\\"\" + properties['iobj.attachmentCategory.objs.rappIntFAAC'].toString() + \"\\\" AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"); // See the complete list of possible IQL on the Insight Query Language documentation page\n            /* If this is a mandatory field you should be able to do this: */\n            //log.info(\"Insight object: \" + objects[0]);\n\n            if(objects[0]){\n                /* UPDATE OJBECT DELETED VALUE */\n                def obTriage = objectFacade.loadObjectAttributeBean(objects[0].getId(), properties['iobj.attachmentCategory.deleted'].toString()).createMutable()  \n                def value = obTriage.getObjectAttributeValueBeans()\n\n                def valueBean = obTriage.createObjectAttributeValueBean()\n                valueBean.setValue(objectTypeAttributeFacade.loadObjectTypeAttributeBean(obTriage.getObjectTypeAttributeId()), true)\n                /*Clean actual value*/\n                value.clear()\n                value.add(valueBean);\n                obTriage.setObjectAttributeValueBeans(value)\n\n                //Update OJBECT attribute value\n                try {\n                    obTriage = objectFacade.storeObjectAttributeBean(obTriage);\n                } catch (Exception vie) {\n                    log.warn(\"1. Could not update object attribute due to validation exception:\" + vie.getMessage());\n                }\n            }\n\n            /*Rollback contabilizzazione intervento*/\n            /*Cancellare tutti gli oggetti OnSite_Rate_Report registrati nei campi OPAA_LUMP_SUM_RATES, OPAA_UNA_TANTUM_RATES, OPAA_TRAVEL_RATES, OPAA_LABOUR_RATES*/\n            /*Ciclare tutti gli oggetti associati al campo*/\n\n            /* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include \" around value */\n            objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = \" + properties['iobj.onSiteRateReport'].toString() + \" AND object HAVING connectedTickets(key=\" + issue.key.toString() + \") AND \\\"\" + properties['iobj.onSiteRateReport.deleted'].toString() + \"\\\" != true\"); // See the complete list of possible IQL on the Insight Query Language documentation page\n            /* If this is a mandatory field you should be able to do this: */\n            //log.info(\"Insight objects da cancellare: \" + objects);\n\n            for(obj in objects){\n                /* DELETE CONNECTED OBJECTS */\n                objectFacade.deleteObjectBean(obj.getId());  \n            }\n\n            /*Cancellare gli importi fornitore, cliente e i totali su tutti gli oggetti Component in OPAA_REPLACED_MATERIALS*/\n            def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.replacedMaterials'].toString())[0]\n            def repMatList = issue.getCustomFieldValue(repMaterials)\n\n            for(mat in repMatList){\n                //extract insight key and get object\n                def component=mat.toString()\n                def componentKey = component.substring(component.indexOf('(')+1,component.indexOf(')'))\n                def componentObject = objectFacade.loadObjectBean(componentKey)\n                //set \"APPLIED_TO\", \"ACCOUNTING_SUPPLIER_MATERIAL_REF\", \"ACCOUNTING_CUSTOMER_MATERIAL_REF\", \"TOTAL_AMOUNT_SUPPLIER\", \"TOTAL_AMOUNT_CUSTOMER\" to null for that component\n\n                //APPLIED_TO\n                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString())){\n                    def obTriageAppliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString()).createMutable()\n                    def valueAppliedTo = obTriageAppliedTo.getObjectAttributeValueBeans()\n                    log.warn \"valueAppliedTo: \" + valueAppliedTo\n                    if (valueAppliedTo.size() &gt; 0){\n                        valueAppliedTo.clear() \n\n                        try {\n                            obTriageAppliedTo = objectFacade.deleteObjectAttributeBean(obTriageAppliedTo.id);\n                        } catch (Exception vie){ \n                            log.error(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\n                        }\n                    }\n                }\n\n                //ACCOUNTING_SUPPLIER_MATERIAL_REF\n                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingSuppMaterial'].toString())){\n                    def obTriageMatS = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingSuppMaterial'].toString()).createMutable()\n                    def valueMatS = obTriageMatS.getObjectAttributeValueBeans()\n                    log.warn \"valueMatS: \" + valueMatS\n                    if (valueMatS.size() &gt; 0){\n                        valueMatS.clear() \n\n                        try {\n                            obTriageMatS = objectFacade.deleteObjectAttributeBean(obTriageMatS.id);\n                        } catch (Exception vie){ \n                            log.error(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\n                        }\n                    }\n                }\n\n                //ACCOUNTING_CUSTOMER_MATERIAL_REF\n                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingCustMaterial'].toString())){\n                    def obTriageMatC = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingCustMaterial'].toString()).createMutable()\n                    def valueMatC = obTriageMatC.getObjectAttributeValueBeans()\n                    log.warn \"valueMatC: \" + valueMatC\n                    if (valueMatC.size() &gt; 0){\n                        valueMatC.clear() \n\n                        try {\n                            obTriageMatC = objectFacade.deleteObjectAttributeBean(obTriageMatC.id);\n                        } catch (Exception vie){ \n                            log.error(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\n                        }\n                    }\n                }\n                \n                //TOTAL_AMOUNT_SUPPLIER\n                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString())){\n                    def obTriageTotS = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString()).createMutable()\n                    def valueTotS = obTriageTotS.getObjectAttributeValueBeans()\n                    log.warn \"valueTotS: \" + valueTotS\n                    if (valueTotS.size() &gt; 0){\n                        valueTotS.clear() \n\n                        try {\n                            obTriageTotS = objectFacade.deleteObjectAttributeBean(obTriageTotS.id);\n                        } catch (Exception vie){ \n                            log.error(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\n                        }\n                    }\n\n                }\n                \n                //TOTAL_AMOUNT_CUSTOMER\n                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString())){\n                    def obTriageTotC = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()).createMutable()\n                    def valueTotC = obTriageTotC.getObjectAttributeValueBeans()\n                    log.warn \"valueTotC: \" + valueTotC\n                    if (valueTotC.size() &gt; 0){\n                        valueTotC.clear() \n\n                        try {\n                            obTriageTotC = objectFacade.deleteObjectAttributeBean(obTriageTotC.id);\n                        } catch (Exception vie){ \n                            log.error(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\n                        }\n                    }\n                }\n            }    \n\n            def outputMsg = ((HttpURLConnection)connection).errorStream.text\n            log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n            def jsonSlurper = new JsonSlurper()\n            def json_object = jsonSlurper.parseText(outputMsg)\n            assert json_object instanceof Map  \n            log.debug \"message: \" +  json_object.message\n            \n            eListErrors.add(\"E\")\n            eListErrors.add(\"SENDMAIL\")\n            errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n            eListErrors.add(json_object.message)\n            eList.add(eListErrors)\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        }else{\n            /*L'email \u00e8 stata inviata correttamente, aggiorno il campo ONSITE_REPORT con la data corrente*/\n\n            // log.warn \"issue \"+issue.getKey()\n            def cfv = issue.getCustomFieldValue(onsiteReportDate)\n            if (!cfv) {\n              def t0  = new java.sql.Timestamp(System.currentTimeMillis())\n              log.warn \"StartTime =&gt; '\"+t0.toString()+\"'\"\n              def mv = new ModifiedValue(onsiteReportDate, t0)\n              def ch = new DefaultIssueChangeHolder()\n              onsiteReportDate.updateValue(null, issue, mv, ch) \n            } else {\n              log.warn \"StartTime == '\"+cfv.toString()+\"'\"\n            }\n        }\n    }\n}","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="Not Done" status="‰Þ" step="6">
              <post-functions>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">f4339be8-c25a-4951-b5bf-e4f2a6ac6e06</arg>
                  <arg name="FIELD_NOTES">OP: Check linkedTickets &amp; Fast-Transact them</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.link.IssueLink\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nCategory log = Category.getInstance(\"com.onresolve.jira.groovy.PostFunction\")\nlog.setLevel(org.apache.log4j.Level.WARN)\n\nlog.warn \"${issue.key} Transazione Complete - Post Function check linkedIssues\"\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\n\nIssue issue = issue\n//Per test da console\n//issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-276\")\n\nSTART_PROGRESS=properties['wf.tr.startProgress']\nCOMPLETE=properties['wf.tr.complete']\n\ndef user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\ndef issueService = ComponentAccessor.getIssueService()\n\nlog.warn \"issue.getCustomFieldValue(automaticallyClosed): \" + issue.getCustomFieldValue(automaticallyClosed)\n\nif(issue.getCustomFieldValue(automaticallyClosed)==null || issue.getCustomFieldValue(automaticallyClosed).toString().equals(\"No\")){\n    /*OP-1038: se ho eseguito la Complete sul ticket \"padre\" verifico e sposto in automatico gli eventuali ticket collegati*/\n    \n    log.warn \"verifico e sposto in automatico gli eventuali ticket collegati\"\n    \n    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            /*Eseguire transazione di stato con OPAA_AUTOMATICALLY_CLOSED=Yes della sourceIssue*/\n            def linkedIssue = issueLink.getSourceObject()\n            def linkedIssueStatus = linkedIssue.getStatus()\n            log.warn \"Issue con relatesInIssueLink ${linkedIssue} con stato ${linkedIssueStatus}\"\n            def transitionId\n            if(linkedIssueStatus.name == properties['wf.confirmedAndPlanned'].toString()){\n                transitionId=START_PROGRESS\n            }\n            if(linkedIssueStatus.name == properties['wf.inProgress'].toString()){\n                transitionId=COMPLETE\n            }\n            if(transitionId==START_PROGRESS){\n                // Prepare our input for the transition\n                def issueInputParameters = issueService.newIssueInputParameters()\n                issueInputParameters.with {\n                    setSkipScreenCheck(false)\n                }\n                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)\n                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), \"Yes\") \n                //log.warn \"issueInputParameters: \" + issueInputParameters\n                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n                def mi = (MutableIssue) linkedIssue\n\n                def fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)\n                log.warn \"fieldConfig: \" + fieldConfig\n                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())\n\n                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n                issueIndexingService.reIndex(linkedIssue)\n                log.warn \"Updated customfield - issue linkata\"\n                \n                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)\n                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {\n                    // Perform the transition\n                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))\n                    if (! issueResult.isValid()) {\n                        log.warn(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n                    }else{\n                        log.warn(\"Transazione fatta 96 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}\")\n                        transitionId=COMPLETE\n                        // Prepare our input for the transition\n                        issueInputParameters = issueService.newIssueInputParameters()\n                        issueInputParameters.with {\n                            setSkipScreenCheck(false)\n                        }\n                        //fieldConfig = automaticallyClosed.getRelevantConfig(issue)\n                        //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                        //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), \"Yes\") \n                        //validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)\n                        currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n                        mi = (MutableIssue) linkedIssue\n\n                        //fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)\n                        //log.warn \"fieldConfig: \" + fieldConfig\n                        //cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                        //automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())\n\n                        //ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n                        //issueIndexingService.reIndex(linkedIssue)\n                        //log.warn \"Updated customfield - issue linkata\"\n                        if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {\n                            // Perform the transition\n                            issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))\n                            if (! issueResult.isValid()) {\n                                log.warn(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n                            }else{\n                                log.warn(\"Transazione fatta 124 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}\")\n                            }\n                        } else {\n                            log.warn(\"Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}\")\n                        }\n                    }\n                } else {\n                    log.warn(\"Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}\")\n                }\n            }else if (transitionId==COMPLETE){\n                def issueInputParameters = issueService.newIssueInputParameters()\n                issueInputParameters.with {\n                    setSkipScreenCheck(false)\n                }\n                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)\n                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), \"Yes\") \n                \n                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n                def mi = (MutableIssue) linkedIssue\n\n                def fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)\n                log.warn \"fieldConfig: \" + fieldConfig\n                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())\n\n                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n                issueIndexingService.reIndex(linkedIssue)\n                log.warn \"Updated customfield - issue linkata\"\n                \n                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)\n                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {\n                    // Perform the transition\n                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))\n                    if (! issueResult.isValid()) {\n                        log.warn(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n                    }else{\n                        log.warn(\"Transazione fatta 161 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}\")\n                    }\n                } else {\n                    log.warn(\"Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}\")\n                }\n            }\n        }\n    }\n    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            log.warn \"Issue con relatesOutIssueLink\"\n            /*Eseguire transazione di stato con OPAA_AUTOMATICALLY_CLOSED=Yes della destinationIssue*/\n            def linkedIssue = issueLink.getDestinationObject()\n            def linkedIssueStatus = linkedIssue.getStatus()\n            def transitionId\n            log.warn \"linkedIssue: \" + linkedIssue\n            log.warn \"linkedIssueStatus.name: \" + linkedIssueStatus.name\n            if(linkedIssueStatus.name == \"Confirmed and Planned\"){\n                transitionId=START_PROGRESS\n            }\n            if(linkedIssueStatus.name == properties['wf.inProgress'].toString()){\n                transitionId=COMPLETE\n            }\n            log.warn \"transitionId: \" + transitionId\n            if(transitionId==START_PROGRESS){\n                // Prepare our input for the transition\n                def issueInputParameters = issueService.newIssueInputParameters()\n                issueInputParameters.with {\n                    setSkipScreenCheck(false)\n                }\n                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)\n                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), \"Yes\") \n                \n                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n                def mi = (MutableIssue) linkedIssue\n\n                def fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)\n                log.warn \"fieldConfig: \" + fieldConfig\n                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())\n\n                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n                issueIndexingService.reIndex(linkedIssue)\n                log.warn \"Updated customfield - issue linkata\"\n                \n                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)\n                log.warn \"issueInputParameters: \" + issueInputParameters\n                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {\n                    // Perform the transition\n                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))\n                    if (! issueResult.isValid()) {\n                        log.warn(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n                    }else{\n                        log.warn(\"Transazione fatta 218 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}\")\n                        transitionId=COMPLETE\n                        // Prepare our input for the transition\n                        issueInputParameters = issueService.newIssueInputParameters()\n                        issueInputParameters.with {\n                            setSkipScreenCheck(false)\n                        }\n                        //fieldConfig = automaticallyClosed.getRelevantConfig(issue)\n                        //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                        //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), \"Yes\") \n                        \n                        currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n                        mi = (MutableIssue) linkedIssue\n\n                        fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)\n                        log.warn \"fieldConfig: \" + fieldConfig\n                        cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                        automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())\n\n                        ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n                        issueIndexingService.reIndex(linkedIssue)\n                        log.warn \"Updated customfield - issue linkata\"\n                        \n                        //validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)\n                        if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {\n                            // Perform the transition\n                            issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))\n                            if (! issueResult.isValid()) {\n                                log.warn(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n                            }else{\n                                log.warn(\"Transazione fatta 248 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}\")\n                            }\n                        } else {\n                            log.warn(\"Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}\")\n                        }\n                    }\n                } else {\n                    log.warn(\"Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}\")\n                }\n            }else{\n                log.warn \"issue da completare\"\n                def issueInputParameters = issueService.newIssueInputParameters()\n                issueInputParameters.with {\n                    setSkipScreenCheck(false)\n                }\n                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)\n                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), \"Yes\") \n                //log.warn \"validateResult\"\n                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n                def mi = (MutableIssue) linkedIssue\n\n                def fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)\n                log.warn \"fieldConfig: \" + fieldConfig\n                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())\n\n                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n                issueIndexingService.reIndex(linkedIssue)\n                log.warn \"Updated customfield - issue linkata\"\n                \n                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {\n                    // Perform the transition\n                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))\n                    if (! issueResult.isValid()) {\n                        log.warn(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n                    }else{\n                        log.warn(\"Transazione fatta 285 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}\")\n                    }\n                } else {\n                    log.warn(\"Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}\")\n                }\n            }\n        }\n    }\n\n}","scriptPath":null}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22693</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="631" name="Intervento Eseguito no Linked" view="fieldscreen">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19909</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">cd0dd24f-b782-4024-a92e-4d4074c29982</arg>
                <arg name="FIELD_NOTES">New Installation</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"issue.issueType.name == 'New Installation'","scriptPath":null,"parameters":{}}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
              <condition type="class">
                <arg name="Ë.zÀ¨«Ê'">MUST_NOT_FIND_ISSUES</arg>
                <arg name="О©Pєкт">issuekey={issue.issuekey} AND issueFunction in linkedIssuesOf("status='Confirmed and planned'", "relates to")</arg>
                <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                <arg name="conditionValue">1</arg>
                <arg name="class.name">com.googlecode.jsu.workflow.condition.JqlCondition</arg>
                <arg name="fieldValue" />
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">886f8744-f504-454d-8533-7c8c1e78c1dd</arg>
                  <arg name="FIELD_NOTES">Set ASSET INSTALLATION_DATE = OP_EXECUTION_DATE</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\ndef executionDate =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.executionDate'].toString())[0]\ndef asset =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.asset'].toString())[0]\n\ndef requestMethod\ndef baseURL\n\n/*Script Variables*/\n//Per test da console\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-3719\")\n\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\n\n/*Rimozione allegato rapporto di intervento appena creato*/\n/* Get Insight IQL Facade from plugin accessor */\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\n\n/* Get Insight Object Facade from plugin accessor */\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n/* Get Insight Object Type Facade from plugin accessor */\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\");\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\n\n/* Get Insight Object Attribute Facade from plugin accessor */\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\");\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\n\nlog.debug issue.getCustomFieldValue(asset)[0].getId()\nlog.debug issue.getCustomFieldValue(executionDate)\n\ndef obj = objectFacade.loadObjectBean(issue.getCustomFieldValue(asset)[0].getId());\ndef installationDate = properties['iobj.hardware.instDate.id'] ? properties['iobj.hardware.instDate.id'].toString().toInteger() : 2956\ndef attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(installationDate); \n\ndef newAttrib = obj.createObjectAttributeBean(attribType);\ndef newAttribValue = newAttrib.createObjectAttributeValueBean();\n\ntry {\n    newAttribValue.setValue(attribType, issue.getCustomFieldValue(executionDate)+1);\n} catch (Exception vie) {\n    log.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType + \" to \" + issue.getCustomFieldValue(executionDate) + \". Exiting.\");\n    log.warn(SETINSIGHTVALUE: vie.getMessage());\n    return false;\n}\n\ndef attribValues = newAttrib.getObjectAttributeValueBeans();\nattribValues.add(newAttribValue);\nnewAttrib.setObjectAttributeValueBeans(attribValues);\n\ntry {\n    newAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\n} catch (Exception vie) {\n    log.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\n    log.warn(SETINSIGHTVALUE: vie.getMessage());\n    return false;\n}\nlog.info(\"SETINSIGHTVALUE: Successfully saved value\");\n","scriptPath":null}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">ecba5d38-8970-49d4-af83-757b269ecbb1</arg>
                  <arg name="FIELD_NOTES"> OP Email Notification: TKT_EXECUTED - Mantenuta come post function per non generare blocchi al fornitore legati a errori di invio mail interne </arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\ndef requestMethod = \"POST\";\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef body_req = [\n\t\"templateName\": \"TKT_EXECUTED\",\n\t\"pec\": false,\n    \"issueKey\": issue.key\n]\n\ndef baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/transaction/mail/send\"\nURL url\nurl = new URL(baseURL)\n\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.outputStream\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\nlog.debug connection.outputStream\nconnection.connect();\n\nlog.debug \"url: \" + url\nlog.debug \"ResponseCode:\" + connection.getResponseCode()\nlog.debug \"ResponseMessage:\" + connection.getResponseMessage()\nlog.debug \"getResponseMessage:\" + connection.getResponseMessage()\n\n","scriptPath":null}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="841" name="Chiudi Intervento da cartaceo" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20300</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">e11c2942-0754-423c-8e92-d78a6375f221</arg>
                <arg name="FIELD_NOTES">Only for PM Ticket</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="v+nWù">false</arg>
                <arg name="FIELD_CONDITION">{"script":"issue.issueType.name == 'Planned Maintenance Ticket'","scriptPath":null,"parameters":{}}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">}­ûã®Ú÷6ÏváÇuë×ym®}õ×ï_vç9</arg>
              <arg name="FIELD_NOTES">OP: Check Required Fields - solo errors, no warnings</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport com.atlassian.jira.issue.IssueManager\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport java.text.SimpleDateFormat;\nimport com.atlassian.jira.issue.index.IssueIndexingService\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-4159\")\n\nlog.debug \"Transazione Complete - Primo validator\"\nlog.debug \"Transazione Complete - Primo validator - Issue: \" + issue\n\ndef errors = false\ndef warnings = false\n\ndef automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]\n\ndef asset =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.asset'].toString())[0]\ndef assetStatusPre =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.assetStatusPre'].toString())[0]\ndef assetStatusPost =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.assetStatusPost'].toString())[0]\ndef risk =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.riskOnsite'].toString())[0]\ndef riskDescription =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.riskDescription'].toString())[0]\ndef custSignature =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.customerSignature'].toString())[0]\ndef custRef =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.custContactOnsite'].toString())[0]\n//def techSignature =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.technicianSignature'].toString())[0]\ndef kms =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.kms'].toString())[0]\ndef travelH =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.travelHours'].toString())[0]\ndef executionDate =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.executionDate'].toString())[0]\ndef techsOnsite =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.techniciansOnsite'].toString())[0]\n\ndef repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.replacedMaterials'].toString())[0]\ndef reqMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.requiredMaterials'].toString())[0]\n\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]\n\ndef lumpSumPrice =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumPrice'].toString())[0]\n\ndef errorMandatoryFields = new ArrayList()\ndef errorJobStartedCompletedFields = new ArrayList()\ndef errorJobStartedCompletedvsExecution = new ArrayList()\ndef errorJobStartedDatevsCompleted = new ArrayList()\ndef errorGlobalExecutionDate = false\ndef errorTechSignatureFields = new ArrayList()\ndef warningEmptyFields = new ArrayList()\ndef errorSubTaskResolution = false\ndef errorTechsMissing = false\n\ndef executionDateDate\n\n/*OP-1038: Eseguo la verifica dei campi obbligatori solo se il ticket su cui sto eseguendo la transazione non \u00e8 stato chiuso in automatico dal sistema*/\nlog.debug \"issue.getCustomFieldValue(automaticallyClosed): \" + issue.getCustomFieldValue(automaticallyClosed)\nlog.debug \"check: \" + !issue.getCustomFieldValue(automaticallyClosed).toString().equals(\"Yes\")\nif(issue.getCustomFieldValue(automaticallyClosed)==null || !issue.getCustomFieldValue(automaticallyClosed).toString().equals(\"Yes\")){\n    //OPAA_LUMP_SUM_PRICE\n    if(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance']) &amp;&amp; (issue.getCustomFieldValue(lumpSumPrice)==null || (String)issue.getCustomFieldValue(lumpSumPrice) == \"\" || issue.getCustomFieldValue(lumpSumPrice).toString().equals(\"\"))){\n        errors = true\n        errorMandatoryFields.add(properties['cf.lumpSumPrice'].toString())\n    }\n\n    //OPAA_REPLACED_MATERIALS\n    if(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance']) &amp;&amp; (issue.getCustomFieldValue(repMaterials)==null || (String)issue.getCustomFieldValue(repMaterials) == \"\" || issue.getCustomFieldValue(repMaterials).toString().equals(\"\"))){\n        log.debug \"warnings true\"\n        warnings = true\n        warningEmptyFields.add(properties['cf.replacedMaterials'].toString())\n    }\n    //OPAA_REQUIRED_MATERIALS\n    if(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance']) &amp;&amp; (issue.getCustomFieldValue(reqMaterials)==null || (String)issue.getCustomFieldValue(reqMaterials) == \"\" || issue.getCustomFieldValue(reqMaterials).toString().equals(\"\"))){\n        log.debug \"warnings true\"\n        warnings = true\n        warningEmptyFields.add(properties['cf.requiredMaterials'].toString())\n    }\n\n\n    //OPAA_ASSET\n    if(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance']) &amp;&amp; (issue.getCustomFieldValue(asset)==null || (String)issue.getCustomFieldValue(asset) == \"\" || issue.getCustomFieldValue(asset).toString().equals(\"\"))){\n        errors = true\n        errorMandatoryFields.add(properties['cf.asset'].toString())\n    }\n    //OPAA_ASSET_STATUS_PRE\n    if(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance']) &amp;&amp; (issue.getCustomFieldValue(assetStatusPre)==null || (String)issue.getCustomFieldValue(assetStatusPre) == \"\" || issue.getCustomFieldValue(assetStatusPre).toString().equals(\"\"))){\n        errors = true\n        errorMandatoryFields.add(properties['cf.assetStatusPre'].toString())\n    }\n    //OPAA_ASSET_STATUS_POST\n    if(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance']) &amp;&amp; (issue.getCustomFieldValue(assetStatusPost)==null || (String)issue.getCustomFieldValue(assetStatusPost) == \"\" || issue.getCustomFieldValue(assetStatusPost).toString().equals(\"\"))){\n        errors = true\n        errorMandatoryFields.add(properties['cf.assetStatusPost'].toString())\n    }\n    //OPAA_RISK_ONSITE\n    if(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance']) &amp;&amp; (issue.getCustomFieldValue(risk)==null || (String)issue.getCustomFieldValue(risk) == \"\" || issue.getCustomFieldValue(risk).toString().equals(\"\"))){\n        errors = true\n        errorMandatoryFields.add(properties['cf.riskOnsite'].toString())\n    }\n    //OPAA_RISK_DESCRIPTION\n    if(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance']) &amp;&amp; (issue.getCustomFieldValue(risk).toString().equals(\"Yes\") &amp;&amp; (issue.getCustomFieldValue(riskDescription)==null || (String)issue.getCustomFieldValue(riskDescription) == \"\" || issue.getCustomFieldValue(riskDescription).toString().equals(\"\")))){\n        errors = true\n        errorMandatoryFields.add(properties['cf.riskDescription'].toString())\n    }\n    //OPAA_CUSTOMER_SIGNATURE\n    if(issue.getCustomFieldValue(custSignature)==null || (String)issue.getCustomFieldValue(custSignature) == \"\" || issue.getCustomFieldValue(custSignature).toString().equals(\"\")){\n        errors = true\n        errorMandatoryFields.add(properties['cf.customerSignature'].toString())\n    }\n    //OPAA_CUSTOMER_CONTACT_ONSITE\n    if(issue.getCustomFieldValue(custRef)==null || (String)issue.getCustomFieldValue(custRef) == \"\" || issue.getCustomFieldValue(custRef).toString().equals(\"\")){\n        errors = true\n        errorMandatoryFields.add(properties['cf.custContactOnsite'].toString())\n    }\n    \n    //PM TICKET - all sub-tasks must be Completed\n    if(issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance'])){\n        def subTasks = issue.getSubTaskObjects()\n\n        if(subTasks){\n            subTasks.each { //Loop each subtask of parent issue\n                //If the subtask is \"Planned Maintenance Task\"\n                if (it.issueType.name == \"Planned Maintenance Task\") {\n                    if(!it.getResolution() || it.getResolution().name != \"Completed\"){ \n                        errors = true\n                        errorSubTaskResolution = true\n                    }\n                } \n            }\n        }\n    }\n    \n    //OPAA_TECHNICIAN_SIGNATURE\n    /*\n    if(issue.getCustomFieldValue(techSignature)==null || (String)issue.getCustomFieldValue(techSignature) == \"\" || issue.getCustomFieldValue(techSignature).toString().equals(\"\")){\n        errors = true\n        errorMandatoryFields.add(properties['cf.technicianSignature'].toString())\n    }\n    */\n    //15.12.2020 AF - tolta obbligatoriet\u00e0 sui campi OP_KMS e OP_TRAVEL_HOURS poich\u00e8 ora la richiesta utenti \u00e8 di implementare:\n    //Cinzia Salituro: dovrebbero essere obbligatori laddove da contratto il fornitore non ha il diritto fisso di chiamata\n    //OPAA_KMS\n    /*if(issue.getCustomFieldValue(kms)==null || (String)issue.getCustomFieldValue(kms) == \"\" || issue.getCustomFieldValue(kms).toString().equals(\"\")){\n        errors = true\n        errorMandatoryFields.add(properties['cf.kms'].toString())\n    }*/\n    //OPAA_TRAVEL_HOURS\n    /*if(issue.getCustomFieldValue(travelH)==null || (String)issue.getCustomFieldValue(travelH) == \"\" || issue.getCustomFieldValue(travelH).toString().equals(\"\")){\n        errors = true\n        errorMandatoryFields.add(properties['cf.travelHours'].toString())\n    }*/\n    //OPAA_EXECUTION_DATE\n    /*\n    if(issue.getCustomFieldValue(executionDate)==null || (String)issue.getCustomFieldValue(executionDate) == \"\" || issue.getCustomFieldValue(executionDate).toString().equals(\"\")){\n        errors = true\n        errorMandatoryFields.add(properties['cf.executionDate'].toString())\n    }else{\n\t\texecutionDateDate = issue.getCustomFieldValue(executionDate).format('dd/MM/yyyy')\n\t}\n    */\n    \n    //Job Started + Job Completed di ogni oggetto Tech_OnSite_Report associato al campo OPAA_TECHS_ONSITE\n    def globalExecDate\n    if(issue.getCustomFieldValue(techsOnsite)!=null &amp;&amp; (String)issue.getCustomFieldValue(techsOnsite) != \"\" &amp;&amp; !issue.getCustomFieldValue(techsOnsite).toString().equals(\"\")){\n        /*Ciclare tutti gli oggetti associati al campo*/\n        //insight classes &amp; components\n        Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n        Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n        def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n        def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n        def techsOnsiteField = issue.getCustomFieldValue(techsOnsite)\n\t\tlog.debug \"techsOnsiteField: \" + techsOnsiteField\n        for(technician in techsOnsiteField){\n            //extract insight key ang get object\n            def techOnsite=technician.toString()\n            def techOnsiteKey = techOnsite.substring(techOnsite.indexOf('(')+1,techOnsite.indexOf(')'))\n            def techOnsiteObject = objectFacade.loadObjectBean(techOnsiteKey)\n            //get \"Job Started\" for that Technician\n            def obTriage\n            def techJobStarted\n            def techJobCompleted\n            def techJobStartedDate, techJobCompletedDate\n            def techRef, tech, techRefKey, techRefObject, techRefName\n            if(objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnSite.jobStarted'].toString())){\n                obTriage = objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnSite.jobStarted'].toString()).createMutable()\n                techJobStarted = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n                techJobStartedDate = obTriage.getObjectAttributeValueBeans()[0].getValue().format('dd/MM/yyyy')\n            }\n            \n            log.debug \"techJobStarted: \" + techJobStartedDate\n            //get \"Job Completed\" for that Technician\n            if(objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnSite.jobCompleted'].toString())){\n                obTriage = objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnSite.jobCompleted'].toString()).createMutable()\n                techJobCompleted = obTriage.getObjectAttributeValueBeans().toString()\n                techJobCompletedDate = obTriage.getObjectAttributeValueBeans()[0].getValue().format('dd/MM/yyyy')\n            }\n            \n            log.debug \"techJobCompleted: \" + techJobCompleted\n            //get \"Technician_REF\" for that Technician\n            log.debug \"techOnsiteObject: \" + techOnsiteObject\n            \n            if(objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnsite.technicianRef'].toString())){\n                \n                obTriage = objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnsite.technicianRef'].toString()).createMutable()\n                techRef = obTriage.getObjectAttributeValueBeans().toString()\n                tech = techRef.toString()\n                log.debug \"tech: \" + tech\n                techRefKey = tech.substring(tech.indexOf('(')+1,tech.indexOf(')'))\n                log.debug \"techRefKey: \" + techRefKey\n                techRefObject = objectFacade.loadObjectBean(properties['ischema.aa'].toString() + \"-\" + techRefKey)\n                techRefName = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()\n            }\n            \n    \t\tlog.debug techRefName\n\n            if(!techJobStarted || !techJobCompleted){\n                errors = true\n                errorJobStartedCompletedFields.add(techRefName.substring(techRefName.indexOf('(')+1,techRefName.indexOf(')')))\n            }    \n            if(issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance']) &amp;&amp; techJobStartedDate != techJobCompletedDate){\n                errors = true\n                errorJobStartedDatevsCompleted.add(techRefName.substring(techRefName.indexOf('(')+1,techRefName.indexOf(')')))\n            }\n\t\t\tif(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance']) &amp;&amp; executionDateDate != null &amp;&amp; techJobStartedDate != executionDateDate){\n                errors = true\n                errorJobStartedCompletedvsExecution.add(techRefName.substring(techRefName.indexOf('(')+1,techRefName.indexOf(')')))\n            }\n            \n            if(globalExecDate==null &amp;&amp; techJobStartedDate == techJobCompletedDate){\n                globalExecDate = techJobStartedDate\n            }else{\n                if(globalExecDate!=null &amp;&amp; globalExecDate!=techJobStartedDate){\n                    errors=true\n                    errorGlobalExecutionDate = true\n                }\n            }\n         }    \n    }else{\n        if(issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance'])){\n            errors = true\n            errorTechsMissing = true\n        }\n    }\n\n    def techSignFound=false\n    //Firma di almeno un oggetto Tech_OnSite_Report associato al campo OPAA_TECHS_ONSITE\n    if(issue.getCustomFieldValue(techsOnsite)!=null &amp;&amp; (String)issue.getCustomFieldValue(techsOnsite) != \"\" &amp;&amp; !issue.getCustomFieldValue(techsOnsite).toString().equals(\"\")){\n        /*Ciclare tutti gli oggetti associati al campo*/\n        //insight classes &amp; components\n        Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n        Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n        def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n        def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n        def techsOnsiteField = issue.getCustomFieldValue(techsOnsite)\n\t\tlog.debug \"techsOnsiteField: \" + techsOnsiteField\n        for(technician in techsOnsiteField){\n            //extract insight key ang get object\n            def techOnsite=technician.toString()\n            def techOnsiteKey = techOnsite.substring(techOnsite.indexOf('(')+1,techOnsite.indexOf(')'))\n            def techOnsiteObject = objectFacade.loadObjectBean(techOnsiteKey)\n            //get \"Job Started\" for that Technician\n            def obTriage\n            def techSignature, techSignatureAttr\n            techSignatureAttr = properties['iobj.techOnSite.signature'] ? properties['iobj.techOnSite.signature'].toString() : \"TECHNICIAN_SIGNATURE\"\n            def techRef, tech, techRefKey, techRefObject, techRefName\n            if(objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), techSignatureAttr)){\n                obTriage = objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), techSignatureAttr).createMutable()\n                techSignature = obTriage.getObjectAttributeValueBeans().toString()\n            }\n            \n            log.debug \"techSignature: \" + techSignature \n\n            //get \"Technician_REF\" for that Technician\n            log.debug \"techOnsiteObject: \" + techOnsiteObject\n            \n            if(objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnsite.technicianRef'].toString())){\n                obTriage = objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnsite.technicianRef'].toString()).createMutable()\n                techRef = obTriage.getObjectAttributeValueBeans().toString()\n                tech = techRef.toString()\n                log.debug \"tech: \" + tech\n                techRefKey = tech.substring(tech.indexOf('(')+1,tech.indexOf(')'))\n                log.debug \"techRefKey: \" + techRefKey\n                techRefObject = objectFacade.loadObjectBean(properties['ischema.aa'].toString() + \"-\" + techRefKey)\n                techRefName = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()\n            }\n            \n    \t\tlog.debug techRefName\n\n            if(!techSignature &amp;&amp; !techSignFound){\n                errorTechSignatureFields.add(techRefName.substring(techRefName.indexOf('(')+1,techRefName.indexOf(')')))\n            }else{\n                if(techSignature){\n                    techSignFound = true\n                    errorTechSignatureFields.clear()\n                }\n            }    \n         }\n        if(!techSignFound){\n            errors = true\n        }\n    }\n\n    def output = new ArrayList()\n\n    if (!errors &amp;&amp; !warnings){\n        return true\n    }else{\n        if(!errors &amp;&amp; warnings){\n            //Se ci sono solo warnings verifico se l'utente ha gi\u00e0 dichiarato di voler proseguire comunque\n            // - transition field \"OPAA_CHECK_AND_CONFIRM\"=\"Yes\"\n            // - in caso contrario invio i warning a FE\n\n            //log.debug \"transitionCheck: \" + issue.getCustomFieldValue(transitionCheck)\n            //log.debug \"result: \" + issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")\n            if(issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")){\n                //log.debug \"return true\"\n                return true\n            }else{\n                def wList = new ArrayList()\n\n                if(warningEmptyFields.size() &gt; 0){\n                    def wListConfirmEmpty = new ArrayList()\n                    wListConfirmEmpty.add(\"W\")\n                    wListConfirmEmpty.add(\"CONFIRM_EMPTY_FIELDS\")\n                    wListConfirmEmpty.add(null)\n                    wListConfirmEmpty.add(warningEmptyFields)\n\n                    wList.add(wListConfirmEmpty)\n                }\n\n                output.add(wList)\n                log.debug \"throw exception: \" + output.toString()\n                throw new InvalidInputException('{\"W\":\"' + output.toString() + '\"}')\n                //throw new InvalidInputException(\"W\", output.toString())   \n            }\n\n        }\n        if(errors &amp;&amp; !warnings){\n            def eList = new ArrayList()\n\n            if(errorMandatoryFields.size() &gt; 0){\n                def eListMandatory = new ArrayList()\n                eListMandatory.add(\"E\")\n                eListMandatory.add(\"MANDATORY_FIELDS\")\n                eListMandatory.add(null)\n                eListMandatory.add(errorMandatoryFields)\n                eList.add(eListMandatory)\n            }\n\n            if(errorJobStartedCompletedFields.size() &gt; 0){\n                def eListStartEnd = new ArrayList()\n                eListStartEnd.add(\"E\")\n                eListStartEnd.add(\"MISSING_ONSITE_START_END_DETAILS\")\n                eListStartEnd.add(null)\n                eListStartEnd.add(errorJobStartedCompletedFields)\n                eList.add(eListStartEnd)\n            }\n            \n            if(errorJobStartedCompletedvsExecution.size() &gt; 0){\n                def eListStartEndExec = new ArrayList()\n                eListStartEndExec.add(\"E\")\n                eListStartEndExec.add(\"EXECUTION_DATE_VS_TECH_START_COMPLETED\")\n                eListStartEndExec.add(null)\n                eListStartEndExec.add(errorJobStartedCompletedvsExecution)\n                eList.add(eListStartEndExec)\n            }\n            \n            if(errorTechSignatureFields.size() &gt; 0){\n                def eListTechSign = new ArrayList()\n                eListTechSign.add(\"E\")\n                eListTechSign.add(\"MISSING_TECH_SIGNATURE\")\n                eListTechSign.add(null)\n                eListTechSign.add(errorTechSignatureFields)\n                eList.add(eListTechSign)\n            }\n            \n            if(errorSubTaskResolution){\n                def eListSubTaskCompleted = new ArrayList()\n                eListSubTaskCompleted.add(\"E\")\n                eListSubTaskCompleted.add(\"SUBTASK_NOT_COMPLETED\")\n                eListSubTaskCompleted.add(null)\n                eListSubTaskCompleted.add(null)\n                eList.add(eListSubTaskCompleted)\n            }\n            \n            if(errorTechsMissing){\n                def eListSubTaskCompleted = new ArrayList()\n                eListSubTaskCompleted.add(\"E\")\n                eListSubTaskCompleted.add(\"MISSING_TECHNICIANS\")\n                eListSubTaskCompleted.add(null)\n                eListSubTaskCompleted.add(null)\n                eList.add(eListSubTaskCompleted)\n            }\n            \n            if(errorJobStartedDatevsCompleted.size() &gt; 0){\n                def eListStartEnd = new ArrayList()\n                eListStartEnd.add(\"E\")\n                eListStartEnd.add(\"TECH_START_COMPLETED_DATE\")\n                eListStartEnd.add(null)\n                eListStartEnd.add(errorJobStartedDatevsCompleted)\n                eList.add(eListStartEnd)\n            }\n            \n            if(errorGlobalExecutionDate){\n                def eListExecDate = new ArrayList()\n                eListExecDate.add(\"E\")\n                eListExecDate.add(\"EXECUTION_DATE_ALL_TECHS\")\n                eListExecDate.add(null)\n                eListExecDate.add(null)\n                eList.add(eListExecDate)\n            }\n\n            output.add(eList)\n            log.debug \"throw exception: \" + output.toString()\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n            //throw new InvalidInputException(\"E\", output.toString())   \n        }\n        if(errors &amp;&amp; warnings){\n            def eList = new ArrayList()\n            def wList = new ArrayList()\n            if(errorMandatoryFields.size() &gt; 0){\n                def eListMandatory = new ArrayList()\n                eListMandatory.add(\"E\")\n                eListMandatory.add(\"MANDATORY_FIELDS\")\n                eListMandatory.add(null)\n                eListMandatory.add(errorMandatoryFields)\n                eList.add(eListMandatory)\n            }\n\n            if(errorJobStartedCompletedFields.size() &gt; 0){\n                def eListStartEnd = new ArrayList()\n                eListStartEnd.add(\"E\")\n                eListStartEnd.add(\"MISSING_ONSITE_START_END_DETAILS\")\n                eListStartEnd.add(null)\n                eListStartEnd.add(errorJobStartedCompletedFields)\n                eList.add(eListStartEnd)\n            }\n            \n            if(errorJobStartedCompletedvsExecution.size() &gt; 0){\n                def eListStartEndExec = new ArrayList()\n                eListStartEndExec.add(\"E\")\n                eListStartEndExec.add(\"EXECUTION_DATE_VS_TECH_START_COMPLETED\")\n                eListStartEndExec.add(null)\n                eListStartEndExec.add(errorJobStartedCompletedvsExecution)\n                eList.add(eListStartEndExec)\n            }\n\n            \n            if(errorTechSignatureFields.size() &gt; 0){\n                def eListTechSign = new ArrayList()\n                eListTechSign.add(\"E\")\n                eListTechSign.add(\"MISSING_TECH_SIGNATURE\")\n                eListTechSign.add(null)\n                eListTechSign.add(errorTechSignatureFields)\n                eList.add(eListTechSign)\n            }\n            \n            if(errorSubTaskResolution){\n                def eListSubTaskCompleted = new ArrayList()\n                eListSubTaskCompleted.add(\"E\")\n                eListSubTaskCompleted.add(\"SUBTASK_NOT_COMPLETED\")\n                eListSubTaskCompleted.add(null)\n                eListSubTaskCompleted.add(null)\n                eList.add(eListSubTaskCompleted)\n            }\n            \n            if(errorTechsMissing){\n                def eListSubTaskCompleted = new ArrayList()\n                eListSubTaskCompleted.add(\"E\")\n                eListSubTaskCompleted.add(\"MISSING_TECHNICIANS\")\n                eListSubTaskCompleted.add(null)\n                eListSubTaskCompleted.add(null)\n                eList.add(eListSubTaskCompleted)\n            }\n            \n            if(errorJobStartedDatevsCompleted.size() &gt; 0){\n                def eListStartEnd = new ArrayList()\n                eListStartEnd.add(\"E\")\n                eListStartEnd.add(\"TECH_START_COMPLETED_DATE\")\n                eListStartEnd.add(null)\n                eListStartEnd.add(errorJobStartedDatevsCompleted)\n                eList.add(eListStartEnd)\n            }\n            \n            if(errorGlobalExecutionDate){\n                def eListExecDate = new ArrayList()\n                eListExecDate.add(\"E\")\n                eListExecDate.add(\"EXECUTION_DATE_ALL_TECHS\")\n                eListExecDate.add(null)\n                eListExecDate.add(null)\n                eList.add(eListExecDate)\n            }\n            \n            if(warningEmptyFields.size() &gt; 0){\n                def wListConfirmEmpty = new ArrayList()\n                wListConfirmEmpty.add(\"W\")\n                wListConfirmEmpty.add(\"CONFIRM_EMPTY_FIELDS\")\n                wListConfirmEmpty.add(null)\n                wListConfirmEmpty.add(warningEmptyFields)\n\n                wList.add(wListConfirmEmpty)\n            }\n\n            output.add(eList)\n            output.add(wList)\n            log.debug \"throw exception: \" + output.toString()\n            throw new InvalidInputException('{\"WE\":\"' + output.toString() + '\"}')\n            //throw new InvalidInputException(\"WE\", output.toString())  \n        }\n    }\n}\n","scriptPath":null,"parameters":{}}</arg>
              <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

Issue issue = issue

log.debug "Transazione Complete - Primo validator"
log.debug "Transazione Complete - Primo validator - Issue: " + issue

def errors = false
def warnings = false

def automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]

def asset =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.asset'].toString())[0]
def assetStatusPre =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.assetStatusPre'].toString())[0]
def assetStatusPost =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.assetStatusPost'].toString())[0]
def risk =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.riskOnsite'].toString())[0]
def riskDescription =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.riskDescription'].toString())[0]
def custSignature =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.customerSignature'].toString())[0]
def custRef =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.custContactOnsite'].toString())[0]
def techSignature =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.technicianSignature'].toString())[0]
def kms =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.kms'].toString())[0]
def travelH =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.travelHours'].toString())[0]
def executionDate =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.executionDate'].toString())[0]
def techsOnsite =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.techniciansOnsite'].toString())[0]

def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.replacedMaterials'].toString())[0]
def reqMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.requiredMaterials'].toString())[0]

def transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]

def lumpSumPrice =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumPrice'].toString())[0]

def errorMandatoryFields = new ArrayList()
def errorJobStartedCompletedFields = new ArrayList()
def warningEmptyFields = new ArrayList()

/*OP-1038: Eseguo la verifica dei campi obbligatori solo se il ticket su cui sto eseguendo la transazione non è stato chiuso in automatico dal sistema*/
log.debug "issue.getCustomFieldValue(automaticallyClosed): " + issue.getCustomFieldValue(automaticallyClosed)
log.debug "check: " + !issue.getCustomFieldValue(automaticallyClosed).toString().equals("Yes")
if(issue.getCustomFieldValue(automaticallyClosed)==null || !issue.getCustomFieldValue(automaticallyClosed).toString().equals("Yes")){
    //OPAA_LUMP_SUM_PRICE
    if(issue.getCustomFieldValue(lumpSumPrice)==null || (String)issue.getCustomFieldValue(lumpSumPrice) == "" || issue.getCustomFieldValue(lumpSumPrice).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.lumpSumPrice'].toString())
    }

    //OPAA_REPLACED_MATERIALS
    if(issue.getCustomFieldValue(repMaterials)==null || (String)issue.getCustomFieldValue(repMaterials) == "" || issue.getCustomFieldValue(repMaterials).toString().equals("")){
        log.debug "warnings true"
        warnings = true
        warningEmptyFields.add(properties['cf.replacedMaterials'].toString())
    }
    //OPAA_REQUIRED_MATERIALS
    if(issue.getCustomFieldValue(reqMaterials)==null || (String)issue.getCustomFieldValue(reqMaterials) == "" || issue.getCustomFieldValue(reqMaterials).toString().equals("")){
        log.debug "warnings true"
        warnings = true
        warningEmptyFields.add(properties['cf.requiredMaterials'].toString())
    }


    //OPAA_ASSET
    if(issue.getCustomFieldValue(asset)==null || (String)issue.getCustomFieldValue(asset) == "" || issue.getCustomFieldValue(asset).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.asset'].toString())
    }
    //OPAA_ASSET_STATUS_PRE
    if(issue.getCustomFieldValue(assetStatusPre)==null || (String)issue.getCustomFieldValue(assetStatusPre) == "" || issue.getCustomFieldValue(assetStatusPre).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.assetStatusPre'].toString())
    }
    //OPAA_ASSET_STATUS_POST
    if(issue.getCustomFieldValue(assetStatusPost)==null || (String)issue.getCustomFieldValue(assetStatusPost) == "" || issue.getCustomFieldValue(assetStatusPost).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.assetStatusPost'].toString())
    }
    //OPAA_RISK_ONSITE
    if(issue.getCustomFieldValue(risk)==null || (String)issue.getCustomFieldValue(risk) == "" || issue.getCustomFieldValue(risk).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.riskOnsite'].toString())
    }
    //OPAA_RISK_DESCRIPTION
    if(issue.getCustomFieldValue(risk).toString().equals("Yes") &amp;&amp; (issue.getCustomFieldValue(riskDescription)==null || (String)issue.getCustomFieldValue(riskDescription) == "" || issue.getCustomFieldValue(riskDescription).toString().equals(""))){
        errors = true
        errorMandatoryFields.add(properties['cf.riskDescription'].toString())
    }
    //OPAA_CUSTOMER_SIGNATURE
    if(issue.getCustomFieldValue(custSignature)==null || (String)issue.getCustomFieldValue(custSignature) == "" || issue.getCustomFieldValue(custSignature).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.customerSignature'].toString())
    }
    //OPAA_CUSTOMER_CONTACT_ONSITE
    if(issue.getCustomFieldValue(custRef)==null || (String)issue.getCustomFieldValue(custRef) == "" || issue.getCustomFieldValue(custRef).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.custContactOnsite'].toString())
    }
    //OPAA_TECHNICIAN_SIGNATURE
    if(issue.getCustomFieldValue(techSignature)==null || (String)issue.getCustomFieldValue(techSignature) == "" || issue.getCustomFieldValue(techSignature).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.technicianSignature'].toString())
    }
    //15.12.2020 AF - tolta obbligatorietà sui campi OP_KMS e OP_TRAVEL_HOURS poichè ora la richiesta utenti è di implementare:
    //Cinzia Salituro: dovrebbero essere obbligatori laddove da contratto il fornitore non ha il diritto fisso di chiamata
    //OPAA_KMS
    /*if(issue.getCustomFieldValue(kms)==null || (String)issue.getCustomFieldValue(kms) == "" || issue.getCustomFieldValue(kms).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.kms'].toString())
    }*/
    //OPAA_TRAVEL_HOURS
    /*if(issue.getCustomFieldValue(travelH)==null || (String)issue.getCustomFieldValue(travelH) == "" || issue.getCustomFieldValue(travelH).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.travelHours'].toString())
    }*/
    //OPAA_EXECUTION_DATE
    if(issue.getCustomFieldValue(executionDate)==null || (String)issue.getCustomFieldValue(executionDate) == "" || issue.getCustomFieldValue(executionDate).toString().equals("")){
        errors = true
        errorMandatoryFields.add(properties['cf.executionDate'].toString())
    }

    //Job Started + Job Completed di ogni oggetto Tech_OnSite_Report associato al campo OPAA_TECHS_ONSITE
    if(issue.getCustomFieldValue(techsOnsite)!=null &amp;&amp; (String)issue.getCustomFieldValue(techsOnsite) != "" &amp;&amp; !issue.getCustomFieldValue(techsOnsite).toString().equals("")){
        /*Ciclare tutti gli oggetti associati al campo*/
        //insight classes &amp; components
        Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
        Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
        def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
        def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

        def techsOnsiteField = issue.getCustomFieldValue(techsOnsite)
		log.debug "techsOnsiteField: " + techsOnsiteField
        for(technician in techsOnsiteField){
            //extract insight key ang get object
            def techOnsite=technician.toString()
            def techOnsiteKey = techOnsite.substring(techOnsite.indexOf('(')+1,techOnsite.indexOf(')'))
            def techOnsiteObject = objectFacade.loadObjectBean(techOnsiteKey)
            //get "Job Started" for that Technician
            def obTriage
            def techJobStarted
            def techJobCompleted
            def techRef, tech, techRefKey, techRefObject, techRefName
            if(objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnSite.jobStarted'].toString())){
                obTriage = objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnSite.jobStarted'].toString()).createMutable()
                techJobStarted = obTriage.getObjectAttributeValueBeans().toString()
            }
            
            log.debug techJobStarted 
            //get "Job Completed" for that Technician
            if(objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnSite.jobCompleted'].toString())){
                obTriage = objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnSite.jobCompleted'].toString()).createMutable()
                techJobCompleted = obTriage.getObjectAttributeValueBeans().toString()
            }
            
            log.debug techJobCompleted
            //get "Technician_REF" for that Technician
            log.debug "techOnsiteObject: " + techOnsiteObject
            
            if(objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnsite.technicianRef'].toString())){
                
                obTriage = objectFacade.loadObjectAttributeBean(techOnsiteObject.getId(), properties['iobj.techOnsite.technicianRef'].toString()).createMutable()
                techRef = obTriage.getObjectAttributeValueBeans().toString()
                tech = techRef.toString()
                log.debug "tech: " + tech
                techRefKey = tech.substring(tech.indexOf('(')+1,tech.indexOf(')'))
                log.debug "techRefKey: " + techRefKey
                techRefObject = objectFacade.loadObjectBean(properties['ischema.aa'].toString() + "-" + techRefKey)
                techRefName = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()
            }
            
    		log.debug techRefName

            if(!techJobStarted || !techJobCompleted){
                errors = true
                errorJobStartedCompletedFields.add(techRefName.substring(techRefName.indexOf('(')+1,techRefName.indexOf(')')))
            }    
         }    
    }

    def output = new ArrayList()

    if (!errors &amp;&amp; !warnings){
        return true
    }else{
        if(!errors &amp;&amp; warnings){
            //Se ci sono solo warnings verifico se l'utente ha già dichiarato di voler proseguire comunque
            // - transition field "OPAA_CHECK_AND_CONFIRM"="Yes"
            // - in caso contrario invio i warning a FE

            //log.debug "transitionCheck: " + issue.getCustomFieldValue(transitionCheck)
            //log.debug "result: " + issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")
            if(issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")){
                //log.debug "return true"
                return true
            }else{
                def wList = new ArrayList()

                if(warningEmptyFields.size() &gt; 0){
                    def wListConfirmEmpty = new ArrayList()
                    wListConfirmEmpty.add("W")
                    wListConfirmEmpty.add("CONFIRM_EMPTY_FIELDS")
                    wListConfirmEmpty.add(null)
                    wListConfirmEmpty.add(warningEmptyFields)

                    wList.add(wListConfirmEmpty)
                }

                output.add(wList)
                log.debug "throw exception: " + output.toString()
                throw new InvalidInputException('{"W":"' + output.toString() + '"}')
                //throw new InvalidInputException("W", output.toString())   
            }

        }
        if(errors &amp;&amp; !warnings){
            def eList = new ArrayList()

            if(errorMandatoryFields.size() &gt; 0){
                def eListMandatory = new ArrayList()
                eListMandatory.add("E")
                eListMandatory.add("MANDATORY_FIELDS")
                eListMandatory.add(null)
                eListMandatory.add(errorMandatoryFields)
                eList.add(eListMandatory)
            }

            if(errorJobStartedCompletedFields.size() &gt; 0){
                def eListStartEnd = new ArrayList()
                eListStartEnd.add("E")
                eListStartEnd.add("MISSING_ONSITE_START_END_DETAILS")
                eListStartEnd.add(null)
                eListStartEnd.add(errorJobStartedCompletedFields)
                eList.add(eListStartEnd)
            }

            output.add(eList)
            log.debug "throw exception: " + output.toString()
            throw new InvalidInputException('{"E":"' + output.toString() + '"}')
            //throw new InvalidInputException("E", output.toString())   
        }
        if(errors &amp;&amp; warnings){
            def eList = new ArrayList()
            def wList = new ArrayList()
            if(errorMandatoryFields.size() &gt; 0){
                def eListMandatory = new ArrayList()
                eListMandatory.add("E")
                eListMandatory.add("MANDATORY_FIELDS")
                eListMandatory.add(null)
                eListMandatory.add(errorMandatoryFields)
                eList.add(eListMandatory)
            }

            if(errorJobStartedCompletedFields.size() &gt; 0){
                def eListStartEnd = new ArrayList()
                eListStartEnd.add("E")
                eListStartEnd.add("MISSING_ONSITE_START_END_DETAILS")
                eListStartEnd.add(null)
                eListStartEnd.add(errorJobStartedCompletedFields)
                eList.add(eListStartEnd)
            }

            if(warningEmptyFields.size() &gt; 0){
                def wListConfirmEmpty = new ArrayList()
                wListConfirmEmpty.add("W")
                wListConfirmEmpty.add("CONFIRM_EMPTY_FIELDS")
                wListConfirmEmpty.add(null)
                wListConfirmEmpty.add(warningEmptyFields)

                wList.add(wListConfirmEmpty)
            }

            output.add(eList)
            output.add(wList)
            log.debug "throw exception: " + output.toString()
            throw new InvalidInputException('{"WE":"' + output.toString() + '"}')
            //throw new InvalidInputException("WE", output.toString())  
        }
    }
}
</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">υχ΄}®uχWxo¦½Υ¶»γΞwσGίρέυχZρχ»</arg>
              <arg name="FIELD_NOTES">OP: REST API: OP generazione Rapporto di intervento</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\nlog.debug \"OnSite Report per issue: \" + issue.key\n/* REST API per Generazione Allegato Rapporto di Intervento */\nrequestMethod = \"PUT\";\n/*Script Variables*/\n//Per test da console\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-14062\")\n\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\n\n/*Rimozione allegato rapporto di intervento appena creato*/\n/* Get Insight IQL Facade from plugin accessor */\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\n\n/* Get Insight Object Facade from plugin accessor */\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n/* Get Insight Object Type Facade from plugin accessor */\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\");\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\n\n/* Get Insight Object Attribute Facade from plugin accessor */\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\");\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\n\n/* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include \" around value */\ndef objects = iqlFacade.findObjectsByIQLAndSchema(DBO, \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".Name LIKE \\\"Rapporto di intervento\\\" AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"); // See the complete list of possible IQL on the Insight Query Language documentation page\n/* If this is a mandatory field you should be able to do this: */\nlog.debug \"IQL: \" + \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".Name LIKE \\\"Rapporto di intervento\\\" AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"\n\n/*!!Da rimuovere appena risolti i bug!!*/\nif((objects == null || objects.size==0) &amp;&amp; !issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance'])){\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/AA/ticket/\" + issue.key.toString() + \"/attachment/onsite\"\n    log.debug \"baseUrl: \" + baseURL\n\n    URL url\n    url = new URL(baseURL)\n    HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.connect();\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        eListErrors.add(\"E\")\n        eListErrors.add(\"GENERATE-ONSITEREPORT\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n\n}\n","scriptPath":null,"parameters":{}}</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import org.apache.log4j.Category
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def requestMethod
def baseURL
log.debug "OnSite Report per issue: " + issue.key
/* REST API per Generazione Allegato Rapporto di Intervento */
requestMethod = "PUT";

baseURL = "http://" + properties['api.env'].toString() + "/op/rest/automation/AA/ticket/" + issue.key.toString() + "/attachment/onsite"
log.debug "baseUrl: " + baseURL

URL url
url = new URL(baseURL)
HttpURLConnection connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.connect();
log.debug "ResponseCode:" + connection.getResponseCode()
log.debug "ResponseMessage:" + connection.getResponseMessage()

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()
    eListErrors.add("E")
    eListErrors.add("GENERATE-ONSITEREPORT")
    errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
    eListErrors.add(errorMsgs)
    eList.add(eListErrors)

    output.add(eList)
    throw new InvalidInputException('{"E":"' + output.toString() + '"}')
    //throw new InvalidInputException("E", output.toString())
}
</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">b734e2c5-1436-43e7-ba9d-53f2ba06c457</arg>
              <arg name="FIELD_NOTES">Create SN &amp; SO for old tickets + for Completed during Maintenance</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef SN =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_NOTIFICATION\")[0]\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\n\nif(issue.getCustomFieldValue(SN) == null &amp;&amp; issue.issueType.name != \"Planned Maintenance Ticket\"){\n    requestMethod = \"POST\";\n\n    def body_req = []\n    body_req = [\n        \"issueKey\": issue.key,\n        \"status\": \"INP\"\n    ] \n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n    log.debug \"baseURL SN: \" + baseURL\n    log.debug \"body_req SN: \" + body_req\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"201\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        \n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n        log.debug \"errors: \" +  json_object.errors.toString()\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-SAP-SN-UPDATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }else{\n        /** SERVICE ORDER CREATION **/\n        body_req = [\n            \"issueKey\": issue.key\n        ] \n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\n\n        log.debug \"baseURL SO: \" + baseURL\n        log.debug \"body_req SO: \" + body_req\n        url = new URL(baseURL)\n        connection = (HttpURLConnection)url.openConnection();\n        connection.setRequestMethod(requestMethod);\n        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n        connection.setRequestProperty(\"Accept\", \"*/*\");\n        connection.setDoOutput(true);\n        connection.setDoInput(true);\n        connection.outputStream\n        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n        log.debug connection.outputStream\n        connection.connect();\n\n        output = new ArrayList()\n        eList = new ArrayList()\n        eListErrors = new ArrayList()\n        errorMsgs = new ArrayList()\n\n        if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n            log.debug \"url: \" + url\n            log.debug \"ResponseCode:\" + connection.getResponseCode()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n            \n            def outputMsg = ((HttpURLConnection)connection).errorStream.text\n    \t\tlog.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n            \n            def jsonSlurper = new JsonSlurper()\n            def json_object = jsonSlurper.parseText(outputMsg)\n            assert json_object instanceof Map  \n            log.debug \"message: \" +  json_object.message\n            log.debug \"errors: \" +  json_object.errors.toString()\n            \n            eListErrors.add(\"E\")\n            eListErrors.add(\"OP-SAP-SO-CREATE\")\n            errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n            eListErrors.add(errorMsgs)\n            eList.add(eListErrors)\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        }\n    }\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">ß·6w¿8÷fçýá¿=×·yó~6w¹sm}mï|</arg>
              <arg name="FIELD_NOTES">OP: REST API: OP Email Notification: ONSITE_REPORT - only IF OPAA_AUTOMATICALLY_CLOSED!=Yes AND sendMail!=NO MAIL AND ci sono ticket collegati. ----&gt; DISABLED su transazione complete - viene fatto manualmente da SEND ONSITE REPORT</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.link.IssueLink\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]\ndef sendMailTo =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.sendMailTo'].toString())[0]\ndef sendMailToRec =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.sendMailToRecipients'].toString())[0]\ndef onsiteReportDate = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.wfOnsiteReport'].toString())[0]\n\ndef requestMethod\ndef baseURL\n\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\ndef relatesInIssueLink=false\ndef relatesOutIssueLink=false\ndef linkedTickets=new ArrayList()\ndef body_req\ndef sendmail=true\n\nif(issue.getCustomFieldValue(automaticallyClosed)==null || !issue.getCustomFieldValue(automaticallyClosed).toString().equals(\"Yes\")){\n\n    /*OP-1038: verifica ticket collegati*/\n    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            relatesInIssueLink=true\n            linkedTickets.add(issueLink.getSourceObject().toString())\n            log.debug \"Issue con relatesInIssueLink\"\n        }\n    }\n    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            relatesOutIssueLink=true\n            linkedTickets.add(issueLink.getDestinationObject().toString())\n            log.debug \"Issue con relatesOutIssueLink\"\n        }\n    }\n    \n    log.debug \"issue.getCustomFieldValue(sendMailTo).toString(): \" + issue.getCustomFieldValue(sendMailTo).toString()\n    if((relatesInIssueLink || relatesOutIssueLink) &amp;&amp; !issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.noEmail'].toString()) &amp;&amp; issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.currentReport'].toString())){\n        //OP-1038: inviare solo la mail con il rapporto di intervento del ticket corrente\n        body_req = [\n            \"templateName\": properties['tt.onSiteReport'].toString(),\n            \"pec\": false,\n            \"issueKey\": issue.key,\n            \"additionalRecipients\": issue.getCustomFieldValue(sendMailToRec).toString()\n        ]\n        /*31.07.2020 AF: nella transazione complete NON inviare mail la mail per i ticket con collegati - il rapporto di intervento dei ticket \"figli\" viene generato dopo l'invio della mail sul \"padre\" quindi non verrebbe incluso nella mail*/\n        /*L'invio della mail verr\u00e0 fatto successivamente rispetto alla chiusura con \"Send OnSite Report\"*/\n        sendmail=false\n    }else if((relatesInIssueLink || relatesOutIssueLink) &amp;&amp; !issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.noEmail'].toString()) &amp;&amp; issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.currentReport'].toString())){\n        //OP-1038: inviare la mail con tutti i rapporti di intervento dei ticket collegati\n        body_req = [\n            \"templateName\": properties['tt.onSiteReport'].toString(),\n            \"pec\": false,\n            \"issueKey\": issue.key,\n            \"linkedTickets\": linkedTickets,\n            \"additionalRecipients\": issue.getCustomFieldValue(sendMailToRec).toString()\n        ]\n        /*31.07.2020 AF: nella transazione complete NON inviare mail la mail per i ticket con collegati - il rapporto di intervento dei ticket \"figli\" viene generato dopo l'invio della mail sul \"padre\" quindi non verrebbe incluso nella mail*/\n        /*L'invio della mail verr\u00e0 fatto successivamente rispetto alla chiusura con \"Send OnSite Report\"*/\n        sendmail=false\n    }else if(!relatesInIssueLink &amp;&amp; !relatesOutIssueLink){\n        /*AF 20200729 - su FAAC Service la notifica con il rapporto di intervento viene inviata solo su esplicita decisione dell'utente - che spinger\u00e0 SEND ONSITE REPORT dopo aver chiuso il ticket. Quindi se non ci sono ticket collegati settiamo sendmail=false*/\n        sendmail=false\n        body_req = [\n            \"templateName\": properties['tt.onSiteReport'].toString(),\n            \"pec\": false,\n            \"issueKey\": issue.key,\n            \"additionalRecipients\": issue.getCustomFieldValue(sendMailToRec).toString()\n        ]\n    }else{\n        //OP-1038: non inviare la mail\n        sendmail=false\n    }\n    \n    log.debug \"sendmail: \" + sendmail\n    if(sendmail){\n        /* REST API per Invio Notifica Email ONSITE_REPORT */\n        requestMethod = \"POST\";\n\n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/transaction/mail/send\"\n        URL url = new URL(baseURL)\n        HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n        connection.setRequestMethod(requestMethod);\n        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n        connection.setRequestProperty(\"Accept\", \"*/*\");\n        connection.setDoOutput(true);\n        connection.setDoInput(true);\n        connection.outputStream\n        log.debug \"body_req: \" + body_req\n        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n        log.debug connection.outputStream\n        connection.connect();\n        \n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        //log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n        def output = new ArrayList()\n        def eList = new ArrayList()\n        def eListErrors = new ArrayList()\n        def errorMsgs = new ArrayList()\n\n        if (!connection.getResponseCode().toString().equals(\"200\")){\n            log.debug \"url: \" + url\n            log.debug \"ResponseCode:\" + connection.getResponseCode()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n            \n            /* Get Insight IQL Facade from plugin accessor */\n            Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \n            def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\n\n            /* Get Insight Object Facade from plugin accessor */\n            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");\n            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n            /* Get Insight Object Type Facade from plugin accessor */\n            Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\");\n            def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\n\n            /* Get Insight Object Attribute Facade from plugin accessor */\n            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n\n            Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\");\n            def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\n\n            /* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include \" around value */\n            /*ROLLBACK*/\n            /*Rimozione allegato rapporto di intervento appena creato*/\n            def objects = iqlFacade.findObjectsByIQLAndSchema(DBO, \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".\\\"Name\\\" = \\\"\" + properties['iobj.attachmentCategory.objs.rappIntFAAC'].toString() + \"\\\" AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"); // See the complete list of possible IQL on the Insight Query Language documentation page\n            /* If this is a mandatory field you should be able to do this: */\n            //log.info(\"Insight object: \" + objects[0]);\n\n            if(objects[0]){\n                /* UPDATE OJBECT DELETED VALUE */\n                def obTriage = objectFacade.loadObjectAttributeBean(objects[0].getId(), properties['iobj.attachmentCategory.deleted'].toString()).createMutable()  \n                def value = obTriage.getObjectAttributeValueBeans()\n\n                def valueBean = obTriage.createObjectAttributeValueBean()\n                valueBean.setValue(objectTypeAttributeFacade.loadObjectTypeAttributeBean(obTriage.getObjectTypeAttributeId()), true)\n                /*Clean actual value*/\n                value.clear()\n                value.add(valueBean);\n                obTriage.setObjectAttributeValueBeans(value)\n\n                //Update OJBECT attribute value\n                try {\n                    obTriage = objectFacade.storeObjectAttributeBean(obTriage);\n                } catch (Exception vie) {\n                    log.warn(\"1. Could not update object attribute due to validation exception:\" + vie.getMessage());\n                }\n            }\n\n            /*Rollback contabilizzazione intervento*/\n            /*Cancellare tutti gli oggetti OnSite_Rate_Report registrati nei campi OPAA_LUMP_SUM_RATES, OPAA_UNA_TANTUM_RATES, OPAA_TRAVEL_RATES, OPAA_LABOUR_RATES*/\n            /*Ciclare tutti gli oggetti associati al campo*/\n\n            /* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include \" around value */\n            objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, \"objectType = \" + properties['iobj.onSiteRateReport'].toString() + \" AND object HAVING connectedTickets(key=\" + issue.key.toString() + \") AND \\\"\" + properties['iobj.onSiteRateReport.deleted'].toString() + \"\\\" != true\"); // See the complete list of possible IQL on the Insight Query Language documentation page\n            /* If this is a mandatory field you should be able to do this: */\n            //log.info(\"Insight objects da cancellare: \" + objects);\n\n            for(obj in objects){\n                /* DELETE CONNECTED OBJECTS */\n                objectFacade.deleteObjectBean(obj.getId());  \n            }\n\n            /*Cancellare gli importi fornitore, cliente e i totali su tutti gli oggetti Component in OPAA_REPLACED_MATERIALS*/\n            def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.replacedMaterials'].toString())[0]\n            def repMatList = issue.getCustomFieldValue(repMaterials)\n\n            for(mat in repMatList){\n                //extract insight key and get object\n                def component=mat.toString()\n                def componentKey = component.substring(component.indexOf('(')+1,component.indexOf(')'))\n                def componentObject = objectFacade.loadObjectBean(componentKey)\n                //set \"APPLIED_TO\", \"ACCOUNTING_SUPPLIER_MATERIAL_REF\", \"ACCOUNTING_CUSTOMER_MATERIAL_REF\", \"TOTAL_AMOUNT_SUPPLIER\", \"TOTAL_AMOUNT_CUSTOMER\" to null for that component\n\n                //APPLIED_TO\n                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString())){\n                    def obTriageAppliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString()).createMutable()\n                    def valueAppliedTo = obTriageAppliedTo.getObjectAttributeValueBeans()\n                    log.warn \"valueAppliedTo: \" + valueAppliedTo\n                    if (valueAppliedTo.size() &gt; 0){\n                        valueAppliedTo.clear() \n\n                        try {\n                            obTriageAppliedTo = objectFacade.deleteObjectAttributeBean(obTriageAppliedTo.id);\n                        } catch (Exception vie){ \n                            log.error(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\n                        }\n                    }\n                }\n\n                //ACCOUNTING_SUPPLIER_MATERIAL_REF\n                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingSuppMaterial'].toString())){\n                    def obTriageMatS = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingSuppMaterial'].toString()).createMutable()\n                    def valueMatS = obTriageMatS.getObjectAttributeValueBeans()\n                    log.warn \"valueMatS: \" + valueMatS\n                    if (valueMatS.size() &gt; 0){\n                        valueMatS.clear() \n\n                        try {\n                            obTriageMatS = objectFacade.deleteObjectAttributeBean(obTriageMatS.id);\n                        } catch (Exception vie){ \n                            log.error(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\n                        }\n                    }\n                }\n\n                //ACCOUNTING_CUSTOMER_MATERIAL_REF\n                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingCustMaterial'].toString())){\n                    def obTriageMatC = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingCustMaterial'].toString()).createMutable()\n                    def valueMatC = obTriageMatC.getObjectAttributeValueBeans()\n                    log.warn \"valueMatC: \" + valueMatC\n                    if (valueMatC.size() &gt; 0){\n                        valueMatC.clear() \n\n                        try {\n                            obTriageMatC = objectFacade.deleteObjectAttributeBean(obTriageMatC.id);\n                        } catch (Exception vie){ \n                            log.error(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\n                        }\n                    }\n                }\n                \n                //TOTAL_AMOUNT_SUPPLIER\n                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString())){\n                    def obTriageTotS = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString()).createMutable()\n                    def valueTotS = obTriageTotS.getObjectAttributeValueBeans()\n                    log.warn \"valueTotS: \" + valueTotS\n                    if (valueTotS.size() &gt; 0){\n                        valueTotS.clear() \n\n                        try {\n                            obTriageTotS = objectFacade.deleteObjectAttributeBean(obTriageTotS.id);\n                        } catch (Exception vie){ \n                            log.error(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\n                        }\n                    }\n\n                }\n                \n                //TOTAL_AMOUNT_CUSTOMER\n                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString())){\n                    def obTriageTotC = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()).createMutable()\n                    def valueTotC = obTriageTotC.getObjectAttributeValueBeans()\n                    log.warn \"valueTotC: \" + valueTotC\n                    if (valueTotC.size() &gt; 0){\n                        valueTotC.clear() \n\n                        try {\n                            obTriageTotC = objectFacade.deleteObjectAttributeBean(obTriageTotC.id);\n                        } catch (Exception vie){ \n                            log.error(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\n                        }\n                    }\n                }\n            }    \n\n            def outputMsg = ((HttpURLConnection)connection).errorStream.text\n            log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n            def jsonSlurper = new JsonSlurper()\n            def json_object = jsonSlurper.parseText(outputMsg)\n            assert json_object instanceof Map  \n            log.debug \"message: \" +  json_object.message\n            \n            eListErrors.add(\"E\")\n            eListErrors.add(\"SENDMAIL\")\n            errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n            eListErrors.add(json_object.message)\n            eList.add(eListErrors)\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        }else{\n            /*L'email \u00e8 stata inviata correttamente, aggiorno il campo ONSITE_REPORT con la data corrente*/\n\n            // log.warn \"issue \"+issue.getKey()\n            def cfv = issue.getCustomFieldValue(onsiteReportDate)\n            if (!cfv) {\n              def t0  = new java.sql.Timestamp(System.currentTimeMillis())\n              log.warn \"StartTime =&gt; '\"+t0.toString()+\"'\"\n              def mv = new ModifiedValue(onsiteReportDate, t0)\n              def ch = new DefaultIssueChangeHolder()\n              onsiteReportDate.updateValue(null, issue, mv, ch) \n            } else {\n              log.warn \"StartTime == '\"+cfv.toString()+\"'\"\n            }\n        }\n    }\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.event.type.EventDispatchOption
import org.apache.log4j.Category
import com.atlassian.jira.issue.link.IssueLink
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]
def sendMailTo =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.sendMailTo'].toString())[0]
def sendMailToRec =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.sendMailToRecipients'].toString())[0]
def onsiteReportDate = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.wfOnsiteReport'].toString())[0]

def requestMethod
def baseURL

int OPAA = properties['ischema.aa.id'].toString().toInteger()
int DBO = properties['ischema.dbo.id'].toString().toInteger()
def relatesInIssueLink=false
def relatesOutIssueLink=false
def linkedTickets=new ArrayList()
def body_req
def sendmail=true

if(issue.getCustomFieldValue(automaticallyClosed)==null || !issue.getCustomFieldValue(automaticallyClosed).toString().equals("Yes")){

    /*OP-1038: verifica ticket collegati*/
    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            relatesInIssueLink=true
            linkedTickets.add(issueLink.getSourceObject().toString())
            log.debug "Issue con relatesInIssueLink"
        }
    }
    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            relatesOutIssueLink=true
            linkedTickets.add(issueLink.getDestinationObject().toString())
            log.debug "Issue con relatesOutIssueLink"
        }
    }
    
    log.debug "issue.getCustomFieldValue(sendMailTo).toString(): " + issue.getCustomFieldValue(sendMailTo).toString()
    if((relatesInIssueLink || relatesOutIssueLink) &amp;&amp; !issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.noEmail'].toString()) &amp;&amp; issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.currentReport'].toString())){
        //OP-1038: inviare solo la mail con il rapporto di intervento del ticket corrente
        body_req = [
            "templateName": properties['tt.onSiteReport'].toString(),
            "pec": false,
            "issueKey": issue.key,
            "additionalRecipients": issue.getCustomFieldValue(sendMailToRec).toString()
        ]
        /*31.07.2020 AF: nella transazione complete NON inviare mail la mail per i ticket con collegati - il rapporto di intervento dei ticket "figli" viene generato dopo l'invio della mail sul "padre" quindi non verrebbe incluso nella mail*/
        /*L'invio della mail verrà fatto successivamente rispetto alla chiusura con "Send OnSite Report"*/
        sendmail=false
    }else if((relatesInIssueLink || relatesOutIssueLink) &amp;&amp; !issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.noEmail'].toString()) &amp;&amp; issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.currentReport'].toString())){
        //OP-1038: inviare la mail con tutti i rapporti di intervento dei ticket collegati
        body_req = [
            "templateName": properties['tt.onSiteReport'].toString(),
            "pec": false,
            "issueKey": issue.key,
            "linkedTickets": linkedTickets,
            "additionalRecipients": issue.getCustomFieldValue(sendMailToRec).toString()
        ]
        /*31.07.2020 AF: nella transazione complete NON inviare mail la mail per i ticket con collegati - il rapporto di intervento dei ticket "figli" viene generato dopo l'invio della mail sul "padre" quindi non verrebbe incluso nella mail*/
        /*L'invio della mail verrà fatto successivamente rispetto alla chiusura con "Send OnSite Report"*/
        sendmail=false
    }else if(!relatesInIssueLink &amp;&amp; !relatesOutIssueLink){
        /*AF 20200729 - su FAAC Service la notifica con il rapporto di intervento viene inviata solo su esplicita decisione dell'utente - che spingerà SEND ONSITE REPORT dopo aver chiuso il ticket. Quindi se non ci sono ticket collegati settiamo sendmail=false*/
        sendmail=false
        body_req = [
            "templateName": properties['tt.onSiteReport'].toString(),
            "pec": false,
            "issueKey": issue.key,
            "additionalRecipients": issue.getCustomFieldValue(sendMailToRec).toString()
        ]
    }else{
        //OP-1038: non inviare la mail
        sendmail=false
    }
    
    log.debug "sendmail: " + sendmail
    if(sendmail){
        /* REST API per Invio Notifica Email ONSITE_REPORT */
        requestMethod = "POST";

        baseURL = "http://" + properties['api.env'].toString() + "/op/rest/jira/AA/transaction/mail/send"
        URL url = new URL(baseURL)
        HttpURLConnection connection = (HttpURLConnection)url.openConnection();
        connection.setRequestMethod(requestMethod);
        connection.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
        connection.setRequestProperty("Accept", "*/*");
        connection.setDoOutput(true);
        connection.setDoInput(true);
        connection.outputStream
        log.debug "body_req: " + body_req
        connection.outputStream.withWriter("UTF-8") { new StreamingJsonBuilder(it, body_req) }
        log.debug connection.outputStream
        connection.connect();
        
        log.debug "url: " + url
        log.debug "ResponseCode:" + connection.getResponseCode()
        //log.debug "ResponseMessage:" + connection.getResponseMessage()

        def output = new ArrayList()
        def eList = new ArrayList()
        def eListErrors = new ArrayList()
        def errorMsgs = new ArrayList()

        if (!connection.getResponseCode().toString().equals("200")){
            log.debug "url: " + url
            log.debug "ResponseCode:" + connection.getResponseCode()
            log.debug "ResponseMessage:" + connection.getResponseMessage()

            
            /* Get Insight IQL Facade from plugin accessor */
            Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade"); 
            def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);

            /* Get Insight Object Facade from plugin accessor */
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            /* Get Insight Object Type Facade from plugin accessor */
            Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade");
            def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);

            /* Get Insight Object Attribute Facade from plugin accessor */
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);

            Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory");
            def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);

            /* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include " around value */
            /*ROLLBACK*/
            /*Rimozione allegato rapporto di intervento appena creato*/
            def objects = iqlFacade.findObjectsByIQLAndSchema(DBO, "\"" + properties['iobj.attachmentCategory.categoryRef'].toString() + "\".\"Name\" = \"" + properties['iobj.attachmentCategory.objs.rappIntFAAC'].toString() + "\" AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND object HAVING connectedTickets(key = " + issue.key.toString() + ")"); // See the complete list of possible IQL on the Insight Query Language documentation page
            /* If this is a mandatory field you should be able to do this: */
            //log.info("Insight object: " + objects[0]);

            if(objects[0]){
                /* UPDATE OJBECT DELETED VALUE */
                def obTriage = objectFacade.loadObjectAttributeBean(objects[0].getId(), properties['iobj.attachmentCategory.deleted'].toString()).createMutable()  
                def value = obTriage.getObjectAttributeValueBeans()

                def valueBean = obTriage.createObjectAttributeValueBean()
                valueBean.setValue(objectTypeAttributeFacade.loadObjectTypeAttributeBean(obTriage.getObjectTypeAttributeId()), true)
                /*Clean actual value*/
                value.clear()
                value.add(valueBean);
                obTriage.setObjectAttributeValueBeans(value)

                //Update OJBECT attribute value
                try {
                    obTriage = objectFacade.storeObjectAttributeBean(obTriage);
                } catch (Exception vie) {
                    log.warn("1. Could not update object attribute due to validation exception:" + vie.getMessage());
                }
            }

            /*Rollback contabilizzazione intervento*/
            /*Cancellare tutti gli oggetti OnSite_Rate_Report registrati nei campi OPAA_LUMP_SUM_RATES, OPAA_UNA_TANTUM_RATES, OPAA_TRAVEL_RATES, OPAA_LABOUR_RATES*/
            /*Ciclare tutti gli oggetti associati al campo*/

            /* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include " around value */
            objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, "objectType = " + properties['iobj.onSiteRateReport'].toString() + " AND object HAVING connectedTickets(key=" + issue.key.toString() + ") AND \"" + properties['iobj.onSiteRateReport.deleted'].toString() + "\" != true"); // See the complete list of possible IQL on the Insight Query Language documentation page
            /* If this is a mandatory field you should be able to do this: */
            //log.info("Insight objects da cancellare: " + objects);

            for(obj in objects){
                /* DELETE CONNECTED OBJECTS */
                objectFacade.deleteObjectBean(obj.getId());  
            }

            /*Cancellare gli importi fornitore, cliente e i totali su tutti gli oggetti Component in OPAA_REPLACED_MATERIALS*/
            def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.replacedMaterials'].toString())[0]
            def repMatList = issue.getCustomFieldValue(repMaterials)

            for(mat in repMatList){
                //extract insight key and get object
                def component=mat.toString()
                def componentKey = component.substring(component.indexOf('(')+1,component.indexOf(')'))
                def componentObject = objectFacade.loadObjectBean(componentKey)
                //set "APPLIED_TO", "ACCOUNTING_SUPPLIER_MATERIAL_REF", "ACCOUNTING_CUSTOMER_MATERIAL_REF", "TOTAL_AMOUNT_SUPPLIER", "TOTAL_AMOUNT_CUSTOMER" to null for that component

                //APPLIED_TO
                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString())){
                    def obTriageAppliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString()).createMutable()
                    def valueAppliedTo = obTriageAppliedTo.getObjectAttributeValueBeans()
                    log.warn "valueAppliedTo: " + valueAppliedTo
                    if (valueAppliedTo.size() &gt; 0){
                        valueAppliedTo.clear() 

                        try {
                            obTriageAppliedTo = objectFacade.deleteObjectAttributeBean(obTriageAppliedTo.id);
                        } catch (Exception vie){ 
                            log.error("Could not update object attribute due to validation exception:" + vie.getMessage());
                        }
                    }
                }

                //ACCOUNTING_SUPPLIER_MATERIAL_REF
                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingSuppMaterial'].toString())){
                    def obTriageMatS = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingSuppMaterial'].toString()).createMutable()
                    def valueMatS = obTriageMatS.getObjectAttributeValueBeans()
                    log.warn "valueMatS: " + valueMatS
                    if (valueMatS.size() &gt; 0){
                        valueMatS.clear() 

                        try {
                            obTriageMatS = objectFacade.deleteObjectAttributeBean(obTriageMatS.id);
                        } catch (Exception vie){ 
                            log.error("Could not update object attribute due to validation exception:" + vie.getMessage());
                        }
                    }
                }

                //ACCOUNTING_CUSTOMER_MATERIAL_REF
                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingCustMaterial'].toString())){
                    def obTriageMatC = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingCustMaterial'].toString()).createMutable()
                    def valueMatC = obTriageMatC.getObjectAttributeValueBeans()
                    log.warn "valueMatC: " + valueMatC
                    if (valueMatC.size() &gt; 0){
                        valueMatC.clear() 

                        try {
                            obTriageMatC = objectFacade.deleteObjectAttributeBean(obTriageMatC.id);
                        } catch (Exception vie){ 
                            log.error("Could not update object attribute due to validation exception:" + vie.getMessage());
                        }
                    }
                }
                
                //TOTAL_AMOUNT_SUPPLIER
                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString())){
                    def obTriageTotS = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString()).createMutable()
                    def valueTotS = obTriageTotS.getObjectAttributeValueBeans()
                    log.warn "valueTotS: " + valueTotS
                    if (valueTotS.size() &gt; 0){
                        valueTotS.clear() 

                        try {
                            obTriageTotS = objectFacade.deleteObjectAttributeBean(obTriageTotS.id);
                        } catch (Exception vie){ 
                            log.error("Could not update object attribute due to validation exception:" + vie.getMessage());
                        }
                    }

                }
                
                //TOTAL_AMOUNT_CUSTOMER
                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString())){
                    def obTriageTotC = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()).createMutable()
                    def valueTotC = obTriageTotC.getObjectAttributeValueBeans()
                    log.warn "valueTotC: " + valueTotC
                    if (valueTotC.size() &gt; 0){
                        valueTotC.clear() 

                        try {
                            obTriageTotC = objectFacade.deleteObjectAttributeBean(obTriageTotC.id);
                        } catch (Exception vie){ 
                            log.error("Could not update object attribute due to validation exception:" + vie.getMessage());
                        }
                    }
                }
            }    

            def outputMsg = ((HttpURLConnection)connection).errorStream.text
            log.debug "((HttpURLConnection)connection).errorStream.text: " + outputMsg

            def jsonSlurper = new JsonSlurper()
            def json_object = jsonSlurper.parseText(outputMsg)
            assert json_object instanceof Map  
            log.debug "message: " +  json_object.message
            
            eListErrors.add("E")
            eListErrors.add("SENDMAIL")
            errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
            eListErrors.add(json_object.message)
            eList.add(eListErrors)

            output.add(eList)
            throw new InvalidInputException('{"E":"' + output.toString() + '"}')
            //throw new InvalidInputException("E", output.toString())
        }else{
            /*L'email è stata inviata correttamente, aggiorno il campo ONSITE_REPORT con la data corrente*/

            // log.warn "issue "+issue.getKey()
            def cfv = issue.getCustomFieldValue(onsiteReportDate)
            if (!cfv) {
              def t0  = new java.sql.Timestamp(System.currentTimeMillis())
              log.warn "StartTime =&gt; '"+t0.toString()+"'"
              def mv = new ModifiedValue(onsiteReportDate, t0)
              def ch = new DefaultIssueChangeHolder()
              onsiteReportDate.updateValue(null, issue, mv, ch) 
            } else {
              log.warn "StartTime == '"+cfv.toString()+"'"
            }
        }
    }
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">uıyk¾^÷vøs]¸k½ã×ºõÖÜiï]ãÇ¶{Ç¸</arg>
              <arg name="FIELD_NOTES">OP: REST API: OP per consuntivazione ticket</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\ndef automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]\n\ndef requestMethod\ndef baseURL\n\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\nboolean unatantum=true\n\n/*!!Da rimuovere appena risolti i bug!!*/\n//if(!issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance'])){\n\n    /*OP-1038: la contabilizzazione dovr\u00e0 prevedere le unatantum rates solo se il ticket non \u00e8 stato chiuso in automatico*/\n    if(issue.getCustomFieldValue(automaticallyClosed)!=null &amp;&amp; issue.getCustomFieldValue(automaticallyClosed).toString().equals(\"Yes\")){\n        unatantum=false    \n    }\n    log.debug \"Consuntivazione ticket \" + issue.key + \" con unatantum: \" + unatantum\n\n    /* REST API per Contabilizzazione Intervento */\n    requestMethod = \"GET\";\n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/AA/ticket/issueKey/\" + issue.key.toString() + \"/close?um=\"+unatantum.toString()\n    log.debug \"baseUrl: \" + baseURL\n\n    /*Definire parametro di input unatantum=true|false in base al valore della variabile booleana unatantum*/\n    URL url = new URL(baseURL)\n    HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.connect();\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n    //IssueIndexingService issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\n    //issueIndexingService.reIndex(issueManager.getIssueObject(issue.key.toString()))\n\n    //def unaTantumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OPAA_UNATANTUM_RATES\")[0]\n    //log.warn \"unaTantumRates: \" + issue.getCustomFieldValue(unaTantumRates)\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        log.debug \"Response: \" + connection\n\n        /*ROLLBACK*/\n        /*Rimozione allegato rapporto di intervento appena creato*/\n        /* Get Insight IQL Facade from plugin accessor */\n        Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \n        def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\n\n        /* Get Insight Object Facade from plugin accessor */\n        Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");\n        def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n        /* Get Insight Object Type Facade from plugin accessor */\n        Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\");\n        def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\n\n        /* Get Insight Object Attribute Facade from plugin accessor */\n        Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n        def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n\n        Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\");\n        def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\n\n        /* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include \" around value */\n        def objects = iqlFacade.findObjectsByIQLAndSchema(DBO, \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".\\\"\" + properties['iobj.attachmentCategory.name'].toString() + \"\\\" = \\\"\" + properties['iobj.attachmentCategory.objs.rappIntFAAC'].toString() + \"\\\" AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"); // See the complete list of possible IQL on the Insight Query Language documentation page\n        /* If this is a mandatory field you should be able to do this: */\n        log.info(\"Insight object: \" + objects[0]);\n\n        if(objects[0]){\n            /* UPDATE OJBECT DELETED VALUE */\n            def obTriage = objectFacade.loadObjectAttributeBean(objects[0].getId(), properties['iobj.attachmentCategory.deleted'].toString()).createMutable()  \n            def value = obTriage.getObjectAttributeValueBeans()\n\n            def valueBean = obTriage.createObjectAttributeValueBean()\n            valueBean.setValue(objectTypeAttributeFacade.loadObjectTypeAttributeBean(obTriage.getObjectTypeAttributeId()), true)\n            /*Clean actual value*/\n            value.clear()\n            value.add(valueBean);\n            obTriage.setObjectAttributeValueBeans(value)\n\n            //Update OJBECT attribute value\n            try {\n                obTriage = objectFacade.storeObjectAttributeBean(obTriage);\n            } catch (Exception vie) {\n                log.warn(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\n            }\n        }\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-TKT-ACCOUNTING\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }else{\n        /*OP-1038: consuntivazione terminata correttamente - se \u00e8 stata eseguita con unatantum=true setto a No il campo OPAA_AUTOMATICALLY_CLOSED*/\n        if(unatantum){\n            def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n            def mi = (MutableIssue) issue\n\n            def fieldConfig = automaticallyClosed.getRelevantConfig(issue)\n            log.debug \"fieldConfig: \" + fieldConfig\n            def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"No\" }\n            automaticallyClosed.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())\n\n            ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n            issueIndexingService.reIndex(issue)\n            log.debug \"Updated customfield - issue principale ${issue.getCustomFieldValue(automaticallyClosed)}\"\n        }\n    }\n//}","scriptPath":null,"parameters":{}}</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService
import org.apache.log4j.Category
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();

IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)
def automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]

def requestMethod
def baseURL

int OPAA = properties['ischema.aa.id'].toString().toInteger()
int DBO = properties['ischema.dbo.id'].toString().toInteger()
boolean unatantum=true

/*OP-1038: la contabilizzazione dovrà prevedere le unatantum rates solo se il ticket non è stato chiuso in automatico*/
if(issue.getCustomFieldValue(automaticallyClosed)!=null &amp;&amp; issue.getCustomFieldValue(automaticallyClosed).toString().equals("Yes")){
	unatantum=false    
}
log.debug "Consuntivazione ticket " + issue.key + " con unatantum: " + unatantum

/* REST API per Contabilizzazione Intervento */
requestMethod = "GET";

baseURL = "http://" + properties['api.env'].toString() + "/op/rest/AA/ticket/issueKey/" + issue.key.toString() + "/close?um="+unatantum.toString()
log.debug "baseUrl: " + baseURL

/*Definire parametro di input unatantum=true|false in base al valore della variabile booleana unatantum*/
URL url = new URL(baseURL)
HttpURLConnection connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.connect();
log.debug "ResponseCode:" + connection.getResponseCode()
log.debug "ResponseMessage:" + connection.getResponseMessage()

//IssueIndexingService issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)
//issueIndexingService.reIndex(issueManager.getIssueObject(issue.key.toString()))

//def unaTantumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName("OPAA_UNATANTUM_RATES")[0]
//log.warn "unaTantumRates: " + issue.getCustomFieldValue(unaTantumRates)

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()
    log.debug "Response: " + connection

    /*ROLLBACK*/
    /*Rimozione allegato rapporto di intervento appena creato*/
    /* Get Insight IQL Facade from plugin accessor */
    Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade"); 
    def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);

    /* Get Insight Object Facade from plugin accessor */
    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");
    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

    /* Get Insight Object Type Facade from plugin accessor */
    Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade");
    def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);

    /* Get Insight Object Attribute Facade from plugin accessor */
    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);

    Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory");
    def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);

    /* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include " around value */
    def objects = iqlFacade.findObjectsByIQLAndSchema(DBO, "\"" + properties['iobj.attachmentCategory.categoryRef'].toString() + "\".\"" + properties['iobj.attachmentCategory.name'].toString() + "\" = \"" + properties['iobj.attachmentCategory.objs.rappIntFAAC'].toString() + "\" AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND object HAVING connectedTickets(key = " + issue.key.toString() + ")"); // See the complete list of possible IQL on the Insight Query Language documentation page
    /* If this is a mandatory field you should be able to do this: */
    log.info("Insight object: " + objects[0]);

    if(objects[0]){
        /* UPDATE OJBECT DELETED VALUE */
        def obTriage = objectFacade.loadObjectAttributeBean(objects[0].getId(), properties['iobj.attachmentCategory.deleted'].toString()).createMutable()  
        def value = obTriage.getObjectAttributeValueBeans()

        def valueBean = obTriage.createObjectAttributeValueBean()
        valueBean.setValue(objectTypeAttributeFacade.loadObjectTypeAttributeBean(obTriage.getObjectTypeAttributeId()), true)
        /*Clean actual value*/
        value.clear()
        value.add(valueBean);
        obTriage.setObjectAttributeValueBeans(value)

        //Update OJBECT attribute value
        try {
            obTriage = objectFacade.storeObjectAttributeBean(obTriage);
        } catch (Exception vie) {
            log.warn("Could not update object attribute due to validation exception:" + vie.getMessage());
        }
    }

    eListErrors.add("E")
    eListErrors.add("OP-TKT-ACCOUNTING")
    errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
    eListErrors.add(errorMsgs)
    eList.add(eListErrors)

    output.add(eList)
    throw new InvalidInputException('{"E":"' + output.toString() + '"}')
    //throw new InvalidInputException("E", output.toString())
}else{
    /*OP-1038: consuntivazione terminata correttamente - se è stata eseguita con unatantum=true setto a No il campo OPAA_AUTOMATICALLY_CLOSED*/
    if(unatantum){
        def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
        def mi = (MutableIssue) issue

        def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
        log.debug "fieldConfig: " + fieldConfig
        def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "No" }
        automaticallyClosed.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())

        ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
        issueIndexingService.reIndex(issue)
        log.debug "Updated customfield - issue principale ${issue.getCustomFieldValue(automaticallyClosed)}"
    }
}
</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="6">
              <post-functions>
                <function type="class">
                  <arg name="field.copyFieldSource1" />
                  <arg name="textValue">6</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="workflowName-textValue">OPAA: PM Task Workflow</arg>
                  <arg name="performTransitionAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="scopeType">PARENT</arg>
                  <arg name="destination-scopeTarget">SUB_TASK</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitieslinkedtransition-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="{^êÕj[">91</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.linkedtransition.LinkedTransitionFunction</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="status" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">81aa9673-d0a1-4cdb-9909-19371f018388</arg>
                  <arg name="FIELD_NOTES">PM Ticket - Update HARDWARE.MAINTENANCE_NEXT_TICKET_DATE + HARDWARE.MAINTENANCE_LAST_TICKET_DATE</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.component.ComponentAccessor\nimport com.atlassian.jira.issue.IssueManager\nimport com.atlassian.jira.issue.Issue\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.index.IssueIndexingService;\nimport org.ofbiz.core.entity.DelegatorInterface\nimport com.atlassian.jira.util.BuildUtilsInfo\nimport com.atlassian.jira.issue.issuetype.IssueType\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager()\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-23692\")\n\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\ndef asset = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_ASSET\")[0]\ndef executionDate = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_EXECUTION_DATE\")[0]\n\nlog.debug \"Data di esecuzione intervento: \" + issue.getCustomFieldValue(executionDate)\n\nif(issue.getIssueType().name == \"Planned Maintenance Ticket\"){\n    def subTasks = issue.getSubTaskObjects()\n    def itAsset \n    Date newDate\n\n    subTasks.each {\n        if (it.getIssueType().name == \"Planned Maintenance Task\" &amp;&amp; it.getResolution()){\n            log.debug \"asset: \" + it.getCustomFieldValue(asset)\n            itAsset = it.getCustomFieldValue(asset)[0].toString()\n            itAssetKey = itAsset.substring(itAsset.lastIndexOf('(')+1, itAsset.lastIndexOf(')'))\n            log.debug \"itAssetKey: \" + itAssetKey\n\n            def obTriage\n            def hwPMnumber\n            if(objectFacade.loadObjectAttributeBean(objectFacade.loadObjectBean(itAssetKey).getId(), \"PLANNED_MAINTENANCE_VISITS_NUM\")){\n                obTriage = objectFacade.loadObjectAttributeBean(objectFacade.loadObjectBean(itAssetKey).getId(), \"PLANNED_MAINTENANCE_VISITS_NUM\").createMutable()\n                hwPMnumber = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n                log.debug \"hwPMnumber: \" + hwPMnumber\n            }\n\n            //Check HARDWARE.PLANNED_MAINTENANCE_VISITS_NUM\n            if(hwPMnumber){\n                newDate = (issue.getCustomFieldValue(executionDate) + Math.round(365/hwPMnumber.toInteger()).toInteger())\n                log.debug \"new date: \" + (issue.getCustomFieldValue(executionDate) + Math.round(365/hwPMnumber.toInteger()).toInteger())\n            }else{\n                //Check HARDWARE.CUSTOMER_CONTRACT_REF.CONTRACT_TYPE\n                def contract, contractKey, contractObject, contractType, frequency, freqDays, pack, pmIncluded\n                if(objectFacade.loadObjectAttributeBean(objectFacade.loadObjectBean(itAssetKey).getId(), \"CUSTOMER_CONTRACT_REF\")){\n                    obTriage = objectFacade.loadObjectAttributeBean(objectFacade.loadObjectBean(itAssetKey).getId(), \"CUSTOMER_CONTRACT_REF\").createMutable()\n                    contract = obTriage.getObjectAttributeValueBeans()[0].getValue()\n                    log.debug \"contract: \" + contract\n                    obTriage = objectFacade.loadObjectAttributeBean(contract, \"CONTRACT_TYPE\").createMutable()\n                    contractType = obTriage.getObjectAttributeValueBeans()[0].getValue()\n                    log.debug \"contractType: \" + contractType\n\n                    if(contractType.equals(\"MAINTENANCE TICKET CONTRACT\")){\n                        obTriage = objectFacade.loadObjectAttributeBean(contract, \"PM_FREQUENCY_REF\").createMutable()\n                        frequency = obTriage.getObjectAttributeValueBeans()[0].getValue()\n                        log.debug \"frequency: \" + frequency\n                        obTriage = objectFacade.loadObjectAttributeBean(frequency, \"DAYS\").createMutable()\n                        freqDays = obTriage.getObjectAttributeValueBeans()[0].getValue()\n                        log.debug \"freqDays: \" + freqDays\n                        newDate = (issue.getCustomFieldValue(executionDate) + freqDays.toInteger())\n                        log.debug \"new date: \" + (issue.getCustomFieldValue(executionDate) + freqDays.toInteger())\n                    }else{\n                        if(contractType.equals(\"MAINTENANCE FEE CONTRACT\")){\n                            obTriage = objectFacade.loadObjectAttributeBean(contract, \"PACKAGE_REF\").createMutable()\n                            pack = obTriage.getObjectAttributeValueBeans()[0].getValue()\n                            log.debug \"pack: \" + pack\n                            obTriage = objectFacade.loadObjectAttributeBean(frequency, \"PM_INCLUDED\").createMutable()\n                            pmIncluded = obTriage.getObjectAttributeValueBeans()[0].getValue()\n                            log.debug \"pmIncluded: \" + pmIncluded\n                            newDate = (issue.getCustomFieldValue(executionDate) + pmIncluded.toInteger())\n                            log.debug \"new date: \" + (issue.getCustomFieldValue(executionDate) + pmIncluded.toInteger())\n                        }\n                    }\n                }\n            }\n\n            def assetObj = objectFacade.loadObjectBean(itAssetKey)      \n            log.debug \"newDate: \" + newDate\n            def obj = objectFacade.loadObjectBean(assetObj.getId());\n            /* Create a new unsaved object bean - MAINTENANCE NEXT TICKET DATE*/\n            def attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(3777); \n            def newAttrib = obj.createObjectAttributeBean(attribType);\n            def newAttribValue = newAttrib.createObjectAttributeValueBean();\n            def objectAttributeBeans = new ArrayList();\n\n            newAttribValue.setDateValue(newDate)\n            def attribValues = newAttrib.getObjectAttributeValueBeans();\n            attribValues.add(newAttribValue);\n            newAttrib.setObjectAttributeValueBeans(attribValues);\n            \n            /* Create a new unsaved object bean - MAINTENANCE LAST TICKET DATE */\n            attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(3776); \n            newAttrib = obj.createObjectAttributeBean(attribType);\n            newAttribValue = newAttrib.createObjectAttributeValueBean();\n            objectAttributeBeans = new ArrayList();\n\n            newAttribValue.setDateValue(issue.getCustomFieldValue(executionDate))\n            attribValues = newAttrib.getObjectAttributeValueBeans();\n            attribValues.add(newAttribValue);\n            newAttrib.setObjectAttributeValueBeans(attribValues);\n\n            try {\n                newAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\n            } catch (Exception vie) {\n                log.warn(\"Unable to save changes. Exiting.\");\n                log.warn(vie.getMessage());\n                return false;\n            }\n        }\n    }\n}\n","scriptPath":null}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">OP: Check linkedTickets &amp; Fast-Transact them</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService
import org.apache.log4j.Category
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.link.IssueLink
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.WARN)

log.warn "${issue.key} Transazione Complete - Post Function check linkedIssues"

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]
IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)

Issue issue = issue
//Per test da console
//issue = issueManager.getIssueByKeyIgnoreCase("OPUT-276")

START_PROGRESS=properties['wf.tr.startProgress']
COMPLETE=properties['wf.tr.complete']

def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
def issueService = ComponentAccessor.getIssueService()

log.warn "issue.getCustomFieldValue(automaticallyClosed): " + issue.getCustomFieldValue(automaticallyClosed)

if(issue.getCustomFieldValue(automaticallyClosed)==null || issue.getCustomFieldValue(automaticallyClosed).toString().equals("No")){
    /*OP-1038: se ho eseguito la Complete sul ticket "padre" verifico e sposto in automatico gli eventuali ticket collegati*/
    
    log.warn "verifico e sposto in automatico gli eventuali ticket collegati"
    
    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            /*Eseguire transazione di stato con OPAA_AUTOMATICALLY_CLOSED=Yes della sourceIssue*/
            def linkedIssue = issueLink.getSourceObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            log.warn "Issue con relatesInIssueLink ${linkedIssue} con stato ${linkedIssueStatus}"
            def transitionId
            if(linkedIssueStatus.name == properties['wf.confirmedAndPlanned'].toString()){
                transitionId=START_PROGRESS
            }
            if(linkedIssueStatus.name == properties['wf.inProgress'].toString()){
                transitionId=COMPLETE
            }
            if(transitionId==START_PROGRESS){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(false)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                //log.warn "issueInputParameters: " + issueInputParameters
                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"
                
                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 96 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                        transitionId=COMPLETE
                        // Prepare our input for the transition
                        issueInputParameters = issueService.newIssueInputParameters()
                        issueInputParameters.with {
                            setSkipScreenCheck(false)
                        }
                        //fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                        //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                        //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                        //validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                        currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                        mi = (MutableIssue) linkedIssue

                        //fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)
                        //log.warn "fieldConfig: " + fieldConfig
                        //cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                        //automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())

                        //ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                        //issueIndexingService.reIndex(linkedIssue)
                        //log.warn "Updated customfield - issue linkata"
                        if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                            // Perform the transition
                            issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                            if (! issueResult.isValid()) {
                                log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                            }else{
                                log.warn("Transazione fatta 124 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                            }
                        } else {
                            log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                        }
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }else if (transitionId==COMPLETE){
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(false)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                
                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"
                
                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 161 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }
        }
    }
    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            log.warn "Issue con relatesOutIssueLink"
            /*Eseguire transazione di stato con OPAA_AUTOMATICALLY_CLOSED=Yes della destinationIssue*/
            def linkedIssue = issueLink.getDestinationObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            def transitionId
            log.warn "linkedIssue: " + linkedIssue
            log.warn "linkedIssueStatus.name: " + linkedIssueStatus.name
            if(linkedIssueStatus.name == "Confirmed and Planned"){
                transitionId=START_PROGRESS
            }
            if(linkedIssueStatus.name == properties['wf.inProgress'].toString()){
                transitionId=COMPLETE
            }
            log.warn "transitionId: " + transitionId
            if(transitionId==START_PROGRESS){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(false)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                
                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"
                
                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                log.warn "issueInputParameters: " + issueInputParameters
                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 218 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                        transitionId=COMPLETE
                        // Prepare our input for the transition
                        issueInputParameters = issueService.newIssueInputParameters()
                        issueInputParameters.with {
                            setSkipScreenCheck(false)
                        }
                        //fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                        //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                        //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                        
                        currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                        mi = (MutableIssue) linkedIssue

                        fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)
                        log.warn "fieldConfig: " + fieldConfig
                        cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                        automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())

                        ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                        issueIndexingService.reIndex(linkedIssue)
                        log.warn "Updated customfield - issue linkata"
                        
                        //validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                        if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                            // Perform the transition
                            issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                            if (! issueResult.isValid()) {
                                log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                            }else{
                                log.warn("Transazione fatta 248 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                            }
                        } else {
                            log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                        }
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }else{
                log.warn "issue da completare"
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(false)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                //log.warn "validateResult"
                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"
                
                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 285 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }
        }
    }

}</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="v+nWù">¶»ž</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22693</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="5" name="In Progress">
      <meta name="jira.status.id">3</meta>
      <actions>
<common-action id="141" />
        <action id="151" name="Annulla Rapporto di Intervento">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <results>
            <unconditional-result old-status="žée" status="žée" step="4">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="501" name="Clona Tkt" view="fieldscreen">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20401</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">c659704c-9678-4844-9a05-6f3497e391e7</arg>
                <arg name="FIELD_NOTES">Enabled only for Repair and New Installation</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"issue.issueType.name == 'Maintenance Ticket' || (issue.issueType.name == 'New Installation' &amp;&amp; cfValues['OP_ASSET'] != null)","scriptPath":null}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="5">
              <post-functions>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="диюбwbХ*'">¶»ž</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue" />
                  <arg name="fieldValue">New Installation</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="targetIssueTypeDefinedByCfSelection" />
                  <arg name="issueTypeId">12301</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">H</arg>
                  <arg name="maxAllowed-integerValue" />
                  <arg name="transitionAttachmentsOperation">rr</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="╡крz╙ыв7Ь╡'еy╦^t+м╢ЙЕЙщ]" />
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId" />
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="²æÅºw-ì">[{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_21909","destinationFieldId":"customfield_21909"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22600","destinationFieldId":"customfield_22600"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22822","destinationFieldId":"customfield_22822"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22601","destinationFieldId":"customfield_22601"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22603","destinationFieldId":"customfield_22603"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22663","destinationFieldId":"customfield_22663"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22634","destinationFieldId":"customfield_22634"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22651","destinationFieldId":"customfield_22651"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22700","destinationFieldId":"customfield_22700"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22606","destinationFieldId":"customfield_22606"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22607","destinationFieldId":"customfield_22607"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22629","destinationFieldId":"customfield_22629"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22652","destinationFieldId":"customfield_22652"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"description","destinationFieldId":"description"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22627","destinationFieldId":"customfield_22627"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22620","destinationFieldId":"customfield_22620"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22668","destinationFieldId":"customfield_22668"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23602","destinationFieldId":"customfield_23203"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22814","destinationFieldId":"customfield_22814"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23237","destinationFieldId":"customfield_23237"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"issuekey","destinationFieldId":"customfield_23243"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"YES","destinationFieldId":"customfield_23238"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22702","destinationFieldId":"customfield_22702"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22703","destinationFieldId":"customfield_22703"}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="диюбwbХ*'">¶»ž</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue" />
                  <arg name="fieldValue">Maintenance Ticket</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="targetIssueTypeDefinedByCfSelection" />
                  <arg name="issueTypeId">13001</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">H</arg>
                  <arg name="maxAllowed-integerValue" />
                  <arg name="transitionAttachmentsOperation">rr</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="╡крz╙ыв7Ь╡'еy╦^t+м╢ЙЕЙщ]" />
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId" />
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="²æÅºw-ì">[{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_21909","destinationFieldId":"customfield_21909"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22600","destinationFieldId":"customfield_22600"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22822","destinationFieldId":"customfield_22822"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22601","destinationFieldId":"customfield_22601"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22603","destinationFieldId":"customfield_22603"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22663","destinationFieldId":"customfield_22663"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22634","destinationFieldId":"customfield_22634"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22651","destinationFieldId":"customfield_22651"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22700","destinationFieldId":"customfield_22700"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22606","destinationFieldId":"customfield_22606"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22607","destinationFieldId":"customfield_22607"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22629","destinationFieldId":"customfield_22629"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22652","destinationFieldId":"customfield_22652"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"description","destinationFieldId":"description"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22627","destinationFieldId":"customfield_22627"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22620","destinationFieldId":"customfield_22620"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22668","destinationFieldId":"customfield_22668"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23602","destinationFieldId":"customfield_23203"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22814","destinationFieldId":"customfield_22814"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23237","destinationFieldId":"customfield_23237"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"issuekey","destinationFieldId":"customfield_23243"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"YES","destinationFieldId":"customfield_23238"}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23602</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="451" name="Modifica Impianto">
          <meta name="opsbar-sequence">50</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">19072275-7e71-48ef-9842-e5955dbe1cd9</arg>
                <arg name="FIELD_NOTES">Not enabled for PM Tickets</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"cfValues['OP_ASSET'] != null","scriptPath":null}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="Not Done" status="‰Þ" step="5">
              <post-functions>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="6" name="Completed to be Closed">
      <meta name="jira.status.id">14330</meta>
      <actions>
        <action id="161" name="ODV" view="fieldscreen">
          <meta name="opsbar-sequence">40</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19908</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">1428cc10-dd49-4245-bfa5-1c21e88f47e3</arg>
                <arg name="FIELD_NOTES">Maintenance Ticket OR PM Ticket</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"issue.issueType.name == 'Maintenance Ticket' || issue.issueType.name == 'Planned Maintenance Ticket'","scriptPath":null,"parameters":{}}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
              <condition type="class">
                <arg name="FIELD_NOTES">OP: Check OP_SALES_ORDER_DATE - If not null - transition has already been executed</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
cfValues[properties['cf.salesOrderDate']] == null|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
              <condition type="class">
                <arg name="FIELD_NOTES">OP: Check OP_AUTOMATICALLY_CLOSED - if Yes don't allow transition</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
cfValues[properties['cf.automaticallyClosed']] == null || cfValues[properties['cf.automaticallyClosed']]?.value == 'No'|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">ÝÞøy¶om¼×ßZ}þôé÷4{~yïvºw§_ßWÛ</arg>
              <arg name="FIELD_NOTES">OP: Check Required Fields - solo errors, no warnings</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper\nimport groovy.json.JsonBuilder\nimport groovy.json.StreamingJsonBuilder\n\nimport com.atlassian.jira.issue.CustomFieldManager\nimport com.atlassian.jira.issue.fields.CustomField\nimport com.atlassian.jira.issue.IssueManager\nimport com.atlassian.jira.component.ComponentAccessor\nimport com.atlassian.jira.issue.Issue\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.issue.link.IssueLink\n\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\n\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n \n//Per test da console\n//IssueManager issueManager = ComponentAccessor.getIssueManager();\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-3411\")\n\ndef errors = false\ndef warnings = false\ndef relatesInIssueLink=false\ndef relatesOutIssueLink=false\ndef wListConfirmEmptyMatQuoteLinked = new ArrayList()\ndef wListConfirmEmptyRateQuoteLinked = new ArrayList()\n\ndef lumpSumPrice =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumPrice'].toString())[0]\n\n/*Campi con dati obbligatori per ticket non a corpo*/\ndef repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.replacedMaterials'].toString())[0]\ndef unaTantumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.unatantumRates'].toString())[0]\ndef labourRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.labourRates'].toString())[0]\ndef travelRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.travelRates'].toString())[0]\n\n/*Campi con dati obbligatori per ticket a corpo*/\ndef lumpSumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumRates'].toString())[0]\n\n/*Conferma utente su warnings*/\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]\ndef transitionCheckValue = issue.getCustomFieldValue(transitionCheck)\n\n/*Insight Schema IDs*/\ndef DBObjects = properties['ischema.dbo'].toString() + \"-\"\ndef OPAA = properties['ischema.aa'].toString() + \"-\"\n\n/*Array warnings ed errors per la issue principale, uno per ogni tipologia di errore o warning*/\ndef issueWarningEmptyQuoteMatCustomer = new ArrayList()\ndef issueWarningEmptyQuoteRateCustomer = new ArrayList()\n//def issueError...\n\n/*Verifica campi su ticket oggetto della transazione*/\nif(issue.getCustomFieldValue(lumpSumPrice)!=null &amp;&amp; issue.getCustomFieldValue(lumpSumPrice).toString().equals(\"Yes\")){\n\t/*Contabilizzazione a corpo*/\n\tlog.debug \"Contabilizzazione a corpo\"\n\t//OPAA_LUMP_SUM_RATES\n\tif(issue.getCustomFieldValue(lumpSumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(lumpSumRates) != \"\" &amp;&amp; !issue.getCustomFieldValue(lumpSumRates).toString().equals(\"\")){\n\t\t/*Ciclare tutti gli oggetti associati al campo*/\n\t\t//insight classes &amp; components\n\t\tClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n\t\tClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n\t\tdef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n\t\tdef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n\t\tdef lsRatesList = issue.getCustomFieldValue(lumpSumRates)\n\n\t\tfor(ls in lsRatesList){\n\t\t\t//extract insight key ang get object\n\t\t\tdef lsRate=ls.toString()\n\t\t\tdef lsRateKey = lsRate.substring(lsRate.indexOf('(')+1,lsRate.indexOf(')'))\n\t\t\tdef lsRateObject = objectFacade.loadObjectBean(lsRateKey)\n\t\t\t//get \"APPLIED_TO\" for that rate\n\t\t\tdef lsAppliedTo = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()\n\t\t\tdef lsAppliedToValue\n\t\t\tif (lsAppliedTo){\n\t\t\t\tlsAppliedToValue = lsAppliedTo.substring(lsAppliedTo.indexOf('(')+1,lsAppliedTo.indexOf(')'))\n\t\t\t}\n            //get \"DELETED\" for that rate\n            def deleted\n            def deletedValue\n            if(objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString())){\n                deleted = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString()\n                log.debug \"deleted: \" + deleted\n                if (deleted){\n                    deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))\n                }\n            }\n\t\t\t\n\t\t\tdef lsRateRef = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()\n\t\t\t\n\t\t\tdef lsRateRefKey\n\t\t\tdef lsRateRefValue\n\t\t\tif(lsRateRef.size() &gt; 0){\n\t\t\t\tlsRateRef = lsRateRef.toString()\n\t\t\t\tlsRateRefKey = lsRateRef.substring(lsRateRef.indexOf('(')+1,lsRateRef.indexOf(')'))\n\t\t\t\tdef lsRateRefObject = objectFacade.loadObjectBean(DBObjects + lsRateRefKey)\n\t\t\t\tlsRateRefValue = objectFacade.loadObjectAttributeBean(lsRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()\n\t\t\t\tlsRateRefValue = lsRateRefValue.substring(lsRateRefValue.indexOf('(')+1,lsRateRefValue.indexOf(')'))\n\t\t\t}\n\n\t\t\tif((lsAppliedToValue.toString().equals(\"BOTH\") || lsAppliedToValue.toString().equals(\"CUSTOMER\")) &amp;&amp; !deletedValue.toString().equals(\"true\")){\n\t\t\t\t//get \"TOTAL_AMOUNT_CUSTOMER\" for that component\n\t\t\t\tdef totCustomer \n\t\t\t\tif(objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString())){\n\t\t\t\t\ttotCustomer = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()\n\t\t\t\t}\n\t\t\t\tif(!totCustomer || totCustomer[0].getValue().toString().equals(\"0.0\")){\n\t\t\t\t\twarnings=true\n\t\t\t\t\tissueWarningEmptyQuoteRateCustomer.add(lsRateRefValue.toString())\n\t\t\t\t\tlog.debug issue.key.toString() + \" issueWarningEmptyQuoteRateCustomer: \" + issueWarningEmptyQuoteRateCustomer\n\t\t\t\t}\n\t\t\t}\n\t\t }    \n\t}\n\n}else{\n\t/*Contabilizzazione non a corpo*/\n\tlog.debug \"Contabilizzazione NON a corpo\"\n\n\t//OPAA_REPLACED_MATERIALS\n\tif(issue.getCustomFieldValue(repMaterials)!=null &amp;&amp; (String)issue.getCustomFieldValue(repMaterials) != \"\" &amp;&amp; !issue.getCustomFieldValue(repMaterials).toString().equals(\"\")){\n\t\t//log.debug \"Materiali: \" + issue.getCustomFieldValue(repMaterials)\n\t\t/*Ciclare tutti gli oggetti associati al campo*/\n\t\t//insight classes &amp; components\n\t\tClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n\t\tClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n\t\tdef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n\t\tdef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n\t\tdef repMatList = issue.getCustomFieldValue(repMaterials)\n\n\t\tfor(mat in repMatList){\n\t\t\t//extract insight key ang get object\n\t\t\tdef component=mat.toString()\n\t\t\t//def componentKey = component.substring(component.indexOf('(')+1,component.indexOf(')'))\n            def componentKey = component.substring(component.indexOf('('+OPAA)+1,component.length()-1)\n\t\t\tdef componentObject = objectFacade.loadObjectBean(componentKey)\n\t\t\t//get \"APPLIED_TO\" for that component\n\t\t\tdef appliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString()).getObjectAttributeValueBeans() as ArrayList\n\t\t\tdef appliedToValue\n\t\t\tif(appliedTo.size() &gt; 0){\n\t\t\t\tappliedTo = appliedTo.toString()\n\t\t\t\tappliedToValue = appliedTo.substring(appliedTo.indexOf('(')+1,appliedTo.indexOf(')'))\n\t\t\t\t//log.debug \"appliedToValue: \" + appliedToValue\n\t\t\t}\n            //get \"DELETED\" for that rate\n            def deleted\n            def deletedValue\n            if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString())){\n                deleted = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString()).getObjectAttributeValueBeans().toString()\n                log.debug \"deleted: \" + deleted\n                if (deleted){\n                    deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))\n                }\n            }\n\t\t\t\n\t\t\tdef matNumber\n\t\t\tdef matNumberKey\n\t\t\tdef matNumberValue\n\t\t\tif(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString())){\n\t\t\t\tmatNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).getObjectAttributeValueBeans() as ArrayList\n\t\t\t\tif(matNumber.size() &gt; 0){\n\t\t\t\t\tmatNumber = matNumber.toString()\n\t\t\t\t\tmatNumberKey = matNumber.substring(matNumber.indexOf('(')+1,matNumber.indexOf(')'))\n\t\t\t\t\tdef matNumberObject = objectFacade.loadObjectBean(DBObjects + matNumberKey)\n\t\t\t\t\tmatNumberValue = objectFacade.loadObjectAttributeBean(matNumberObject.getId(), properties['iobj.material.name'].toString()).getObjectAttributeValueBeans().toString()\n\t\t\t\t\tmatNumberValue = matNumberValue.substring(matNumberValue.indexOf('(')+1,matNumberValue.indexOf(')'))\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tdef serialNumber\n\t\t\tdef serialNumberValue\n\t\t\tif(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString())){\n\t\t\t\tserialNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()).getObjectAttributeValueBeans() as ArrayList\n\t\t\t\tif(serialNumber.size() &gt; 0){\n\t\t\t\t\tserialNumber = serialNumber.toString()\n\t\t\t\t\tserialNumberValue = serialNumber.substring(serialNumber.indexOf('(')+1,serialNumber.indexOf(')'))\n\t\t\t\t}  \n\t\t\t}\t\t\t\t\n\n\t\t\tif((appliedToValue.toString().equals(\"BOTH\") || appliedToValue.toString().equals(\"CUSTOMER\")) &amp;&amp; !deletedValue.toString().equals(\"true\")){\n\t\t\t\t//get \"TOTAL_AMOUNT_CUSTOMER\" for that component\n\t\t\t\tdef totCustomer \n\t\t\t\tif(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString())){\n\t\t\t\t\ttotCustomer = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()).getObjectAttributeValueBeans()\n\t\t\t\t}\n\t\t\t\tif(!totCustomer || totCustomer[0].getValue().toString().equals(\"0.0\")){\n\t\t\t\t\twarnings=true\n\t\t\t\t\tissueWarningEmptyQuoteMatCustomer.add(matNumberValue.toString() + (!serialNumber.toString().equals(\"[]\") ? \" (\" + (serialNumberValue ? serialNumberValue.toString() : \"\") + \")\" : \" ()\"))   \n\t\t\t\t\tlog.debug issue.key.toString() + \" issueWarningEmptyQuoteMatCustomer: \" + issueWarningEmptyQuoteMatCustomer\n\t\t\t\t}\n\t\t\t}\n\t\t }    \n\t}  \n\n\t//OPAA_UNATANTUM_RATES\n\tif(issue.getCustomFieldValue(unaTantumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(unaTantumRates) != \"\" &amp;&amp; !issue.getCustomFieldValue(unaTantumRates).toString().equals(\"\")){\n\t\tlog.debug \"Una tantum rates: \" + issue.getCustomFieldValue(unaTantumRates)\n\t\t/*Ciclare tutti gli oggetti associati al campo*/\n\t\t//insight classes &amp; components\n\t\tClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n\t\tClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n\t\tdef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n\t\tdef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n\t\tdef umRatesList = issue.getCustomFieldValue(unaTantumRates)\n\n\t\tfor(um in umRatesList){\n\t\t\t//extract insight key ang get object\n\t\t\tdef umRate=um.toString()\n\t\t\tdef umRateKey = umRate.substring(umRate.indexOf('(')+1,umRate.indexOf(')'))\n\t\t\tdef umRateObject = objectFacade.loadObjectBean(umRateKey)\n\t\t\t//get \"APPLIED_TO\" for that rate\n\t\t\tdef umAppliedTo = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()\n\t\t\tdef umAppliedToValue = umAppliedTo.substring(umAppliedTo.indexOf('(')+1,umAppliedTo.indexOf(')'))\n            \n            //get \"DELETED\" for that rate\n\t\t\tdef deleted\n            def deletedValue\n            if (objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString())){\n                deleted = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString()\n                log.debug \"deleted: \" + deleted\n                if (deleted){\n                    deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))\n                }\n            }\n\n\t\t\tdef umRateRef\n\t\t\tif(objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){\n\t\t\t\tumRateRef=objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()\n\t\t\t}\n\t\t\t\n\t\t\tdef umRateRefKey\n\t\t\tdef umRateRefValue\n\t\t\tif(umRateRef){\n\t\t\t\tumRateRef = umRateRef.toString()\n\t\t\t\tumRateRefKey = umRateRef.substring(umRateRef.indexOf('(')+1,umRateRef.indexOf(')'))\n\t\t\t\tdef umRateRefObject = objectFacade.loadObjectBean(DBObjects + umRateRefKey)\n\t\t\t\tumRateRefValue = objectFacade.loadObjectAttributeBean(umRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()\n\t\t\t\tumRateRefValue = umRateRefValue.substring(umRateRefValue.indexOf('(')+1,umRateRefValue.indexOf(')'))\n\t\t\t}\n\t\t\t\n\t\t\tif((umAppliedToValue.toString().equals(\"BOTH\") || umAppliedToValue.toString().equals(\"CUSTOMER\")) &amp;&amp; !deletedValue.toString().equals(\"true\")){\n\t\t\t\t//get \"TOTAL_AMOUNT_CUSTOMER\" for that component\n\t\t\t\tdef totCustomer\n\t\t\t\tif(objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString())){\n\t\t\t\t\ttotCustomer=objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()\n\t\t\t\t}\n\t\t\t\tif(!totCustomer || totCustomer[0].getValue().toString().equals(\"0.0\")){\n\t\t\t\t\twarnings=true\n\t\t\t\t\tissueWarningEmptyQuoteRateCustomer.add(umRateRefValue.toString())\n\t\t\t\t\tlog.debug issue.key.toString() + \" issueWarningEmptyQuoteRateCustomer: \" + issueWarningEmptyQuoteRateCustomer\n\t\t\t\t}\n\t\t\t}\n\t\t }    \n\t}\n\n\t//OPAA_LABOUR_RATES\n\tif(issue.getCustomFieldValue(labourRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(labourRates) != \"\" &amp;&amp; !issue.getCustomFieldValue(labourRates).toString().equals(\"\")){\n\t\tlog.debug \"Labour rates: \" + issue.getCustomFieldValue(labourRates)\n\t\t/*Ciclare tutti gli oggetti associati al campo*/\n\t\t//insight classes &amp; components\n\t\tClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n\t\tClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n\t\tdef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n\t\tdef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n\t\tdef labourRatesList = issue.getCustomFieldValue(labourRates)\n\n\t\tfor(lb in labourRatesList){\n\t\t\t//extract insight key ang get object\n\t\t\tdef lbRate=lb.toString()\n\t\t\tdef lbRateKey = lbRate.substring(lbRate.indexOf('(')+1,lbRate.indexOf(')'))\n\t\t\tdef lbRateObject = objectFacade.loadObjectBean(lbRateKey)\n\t\t\t//get \"APPLIED_TO\" for that rate\n\t\t\tdef lbAppliedTo = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()\n\t\t\tdef lbAppliedToValue = lbAppliedTo.substring(lbAppliedTo.indexOf('(')+1,lbAppliedTo.indexOf(')'))\n            //get \"DELETED\" for that rate\n\t\t\tdef deleted\n            def deletedValue\n            if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.component.deleted'].toString())){\n                deleted = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.component.deleted'].toString()).getObjectAttributeValueBeans().toString()\n                log.debug \"deleted: \" + deleted\n                if (deleted){\n                    deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))\n                }\n            }\n\n\t\t\tdef lbRateRef\n\t\t\tif(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){\n\t\t\t\tlbRateRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()\n\t\t\t}\n\t\t\t\n\t\t\tdef techRef\n            if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.technicianRef'].toString())){\n                techRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.technicianRef'].toString()).getObjectAttributeValueBeans().toString()\n            }\n\t\t\t\n            def lbRateRefKey\n            def lbRateRefValue\n            if(lbRateRef &amp;&amp; lbRateRef.size() &gt; 0){\n                lbRateRef = lbRateRef.toString()\n                lbRateRefKey = lbRateRef.substring(lbRateRef.indexOf('(')+1,lbRateRef.indexOf(')'))\n                def lbRateRefObject = objectFacade.loadObjectBean(DBObjects + lbRateRefKey)\n                lbRateRefValue = objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()\n                lbRateRefValue = lbRateRefValue.substring(lbRateRefValue.indexOf('(')+1,lbRateRefValue.indexOf(')'))\n            }\n\t\t\t\n\t\t\tdef techRefKey\n            def techRefValue\n            if(techRef){\n                techRef = techRef.toString()\n                log.debug \"techRef: \" + techRef\n                techRefKey = techRef.substring(techRef.indexOf('(')+1,techRef.indexOf(')'))\n                def techRefObject = objectFacade.loadObjectBean(OPAA + techRefKey)\n                techRefValue = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()\n                if(techRefValue){\n                    techRefValue = techRefValue.substring(techRefValue.indexOf('(')+1,techRefValue.indexOf(')'))\n                }\n                log.debug \"techRefValue: \" + techRefValue\n            }\n\t\t\tlog.debug lbAppliedToValue.toString()\n\t\t\tif((lbAppliedToValue.toString().equals(\"BOTH\") || lbAppliedToValue.toString().equals(\"CUSTOMER\")) &amp;&amp; !deletedValue.toString().equals(\"true\")){\n\t\t\t\t//get \"TOTAL_AMOUNT_CUSTOMER\" for that component\n\t\t\t\tdef totCustomer\n\t\t\t\tif(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString())){\n\t\t\t\t\ttotCustomer=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()\n\t\t\t\t}\n                log.debug totCustomer[0].getValue()\n\t\t\t\tif(!totCustomer || totCustomer[0].getValue().toString().equals(\"0.0\")){\n\t\t\t\t\twarnings=true\n\t\t\t\t\tissueWarningEmptyQuoteRateCustomer.add(lbRateRefValue.toString() + \" (\" + techRefValue + \")\")\n\t\t\t\t\tlog.debug issue.key.toString() + \" issueWarningEmptyQuoteRateCustomer: \" + issueWarningEmptyQuoteRateCustomer \n\t\t\t\t}\n\t\t\t}\n\t\t }    \n\t}\n\n\t//OPAA_TRAVEL_RATES\n\tif(issue.getCustomFieldValue(travelRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(travelRates) != \"\" &amp;&amp; !issue.getCustomFieldValue(travelRates).toString().equals(\"\")){\n\t\tlog.debug \"Travel rates: \" + issue.getCustomFieldValue(travelRates)\n\t\t/*Ciclare tutti gli oggetti associati al campo*/\n\t\t//insight classes &amp; components\n\t\tClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n\t\tClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n\t\tdef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n\t\tdef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n\t\tdef travelRatesList = issue.getCustomFieldValue(travelRates)\n\n\t\tfor(tr in travelRatesList){\n\t\t\t//extract insight key ang get object\n\t\t\tdef trRate=tr.toString()\n\t\t\tdef trRateKey = trRate.substring(trRate.indexOf('(')+1,trRate.indexOf(')'))\n\t\t\tdef trRateObject = objectFacade.loadObjectBean(trRateKey)\n\t\t\t//get \"APPLIED_TO\" for that rate\n            def trAppliedTo\n            def trAppliedToValue\n            if(objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString())){\n                trAppliedTo = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()\n                trAppliedToValue = trAppliedTo.substring(trAppliedTo.indexOf('(')+1,trAppliedTo.indexOf(')'))\n            }\n            //get \"DELETED\" for that rate\n\t\t\tdef deleted\n            def deletedValue\n            if(objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString())){\n                deleted = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString()\n                log.debug \"deleted: \" + deleted\n                if (deleted){\n                    deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))\n                }\n            }\n\n\t\t\tdef trRateRef\n\t\t\tif(objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){\n\t\t\t\ttrRateRef=objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()\n\t\t\t}\n\t\t\t\n\t\t\tdef trRateRefKey\n\t\t\tdef trRateRefValue\n\t\t\tif(trRateRef != null &amp;&amp; trRateRef.size() &gt; 0){\n\t\t\t\ttrRateRef = trRateRef.toString()\n\t\t\t\ttrRateRefKey = trRateRef.substring(trRateRef.indexOf('(')+1,trRateRef.indexOf(')'))\n\t\t\t\tdef trRateRefObject = objectFacade.loadObjectBean(DBObjects + trRateRefKey)\n\t\t\t\ttrRateRefValue = objectFacade.loadObjectAttributeBean(trRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()\n\t\t\t\ttrRateRefValue = trRateRefValue.substring(trRateRefValue.indexOf('(')+1,trRateRefValue.indexOf(')'))\n\t\t\t}\n\n\t\t\tif(trAppliedToValue != null &amp;&amp; !deletedValue.toString().equals(\"true\") &amp;&amp; (trAppliedToValue.toString().equals(\"BOTH\") || trAppliedToValue.toString().equals(\"CUSTOMER\"))){\n\t\t\t\t//get \"TOTAL_AMOUNT_CUSTOMER\" for that component\n\t\t\t\tdef totCustomer\n\t\t\t\tif(objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString())){\n\t\t\t\t\ttotCustomer=objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()\n\t\t\t\t}\n\t\t\t\tif(!totCustomer || totCustomer[0].getValue().toString().equals(\"0.0\")){\n\t\t\t\t\twarnings=true\n\t\t\t\t\tissueWarningEmptyQuoteRateCustomer.add(trRateRefValue.toString())\n\t\t\t\t\tlog.debug issue.key.toString() + \" issueWarningEmptyQuoteRateCustomer: \" + issueWarningEmptyQuoteRateCustomer\n\t\t\t\t}\n\t\t\t}\n\t\t }    \n\t}\n\n}\n\ndef linkedTickets=new ArrayList()\n\n/*OP-1038: verifica ticket collegati -  e su ciascuno verifica campi obbligatori*/\nList&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\nfor (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n\n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n        relatesInIssueLink=true\n        linkedTickets.add(issueLink.getSourceObject())\n        log.debug \"Issue con relatesInIssueLink\"\n    }\n}\nList&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\nfor (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n\n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n        relatesOutIssueLink=true\n        linkedTickets.add(issueLink.getDestinationObject())\n        log.debug \"Issue con relatesOutIssueLink\"\n    }\n}\n\n/*Array warnings ed errors per le issue linkate, uno per ogni tipologia di errore o warning*/\ndef warningsMatLinkedIssues = new ArrayList()\ndef warningsRateLinkedIssues = new ArrayList()\n//def errorsLinkedIssues = new ArrayList()\n\nfor(i in linkedTickets){\n    issue=i as Issue\n\n    /*Array warnings ed errors per la singola issue linkata, uno per ogni tipologia di errore o warning*/\n    def warningEmptyQuoteRateCustomer = new ArrayList()\n    def warningEmptyQuoteMatCustomer = new ArrayList() \n    //def error...\n    \n    if(issue.getCustomFieldValue(lumpSumPrice)!=null &amp;&amp; issue.getCustomFieldValue(lumpSumPrice).toString().equals(\"Yes\")){\n        /*Contabilizzazione a corpo*/\n        log.debug \"Contabilizzazione a corpo\"\n        //OPAA_LUMP_SUM_RATES\n        if(issue.getCustomFieldValue(lumpSumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(lumpSumRates) != \"\" &amp;&amp; !issue.getCustomFieldValue(lumpSumRates).toString().equals(\"\")){\n            /*Ciclare tutti gli oggetti associati al campo*/\n            //insight classes &amp; components\n            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n            def lsRatesList = issue.getCustomFieldValue(lumpSumRates)\n\n            for(ls in lsRatesList){\n                //extract insight key ang get object\n                def lsRate=ls.toString()\n                def lsRateKey = lsRate.substring(lsRate.indexOf('(')+1,lsRate.indexOf(')'))\n                def lsRateObject = objectFacade.loadObjectBean(lsRateKey)\n                //get \"APPLIED_TO\" for that rate\n                def lsAppliedTo = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()\n                def lsAppliedToValue\n                if (lsAppliedTo){\n                    lsAppliedToValue = lsAppliedTo.substring(lsAppliedTo.indexOf('(')+1,lsAppliedTo.indexOf(')'))\n                }\n                \n                //get \"DELETED\" for that rate\n                def deleted\n                def deletedValue\n                if(objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString())){\n                    deleted = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString()\n                    log.debug \"deleted: \" + deleted\n                    if (deleted){\n                        deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))\n                    }\n                }\n\n                def lsRateRef = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()\n\n                def lsRateRefKey\n                def lsRateRefValue\n                if(lsRateRef.size() &gt; 0){\n                    lsRateRef = lsRateRef.toString()\n                    lsRateRefKey = lsRateRef.substring(lsRateRef.indexOf('(')+1,lsRateRef.indexOf(')'))\n                    def lsRateRefObject = objectFacade.loadObjectBean(DBObjects + lsRateRefKey)\n                    lsRateRefValue = objectFacade.loadObjectAttributeBean(lsRateRefObject.getId(), properties['iobj.rate.name'].toString()).getObjectAttributeValueBeans().toString()\n                    lsRateRefValue = lsRateRefValue.substring(lsRateRefValue.indexOf('(')+1,lsRateRefValue.indexOf(')'))\n                }\n\n                if((lsAppliedToValue.toString().equals(\"BOTH\") || lsAppliedToValue.toString().equals(\"CUSTOMER\")) &amp;&amp; !deletedValue.toString().equals(\"true\")){\n                    //get \"TOTAL_AMOUNT_CUSTOMER\" for that component\n                    def totCustomer\n                    if(objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString())){\n                    \ttotCustomer = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()\n                    }\n                    if(!totCustomer || totCustomer[0].getValue().toString().equals(\"0.0\")){\n                        warnings=true    \n                        warningEmptyQuoteRateCustomer.add(lsRateRefValue.toString())\n                        log.debug issue.key.toString() + \" warningEmptyQuoteRateCustomer: \" + warningEmptyQuoteRateCustomer\n                    }\n                }\n            }    \n        }\n\n    }else{\n        /*Contabilizzazione non a corpo*/\n        log.debug \"Contabilizzazione NON a corpo\"\n\n        //OPAA_REPLACED_MATERIALS\n        if(issue.getCustomFieldValue(repMaterials)!=null &amp;&amp; (String)issue.getCustomFieldValue(repMaterials) != \"\" &amp;&amp; !issue.getCustomFieldValue(repMaterials).toString().equals(\"\")){\n            log.debug \"Materiali: \" + issue.getCustomFieldValue(repMaterials)\n            /*Ciclare tutti gli oggetti associati al campo*/\n            //insight classes &amp; components\n            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n            def repMatList = issue.getCustomFieldValue(repMaterials)\n\n            for(mat in repMatList){\n                //extract insight key ang get object\n                def component=mat.toString()\n                //def componentKey = component.substring(component.indexOf('(')+1,component.indexOf(')'))\n                def componentKey = component.substring(component.indexOf('('+OPAA)+1,component.length()-1)\n                def componentObject = objectFacade.loadObjectBean(componentKey)\n                //get \"APPLIED_TO\" for that component\n                def appliedTo\n                def appliedToValue\n                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString())){\n                    appliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString()).getObjectAttributeValueBeans() as ArrayList\n                    if(appliedTo.size() &gt; 0){\n                        appliedTo = appliedTo.toString()\n                        appliedToValue = appliedTo.substring(appliedTo.indexOf('(')+1,appliedTo.indexOf(')'))\n                        log.debug \"appliedToValue: \" + appliedToValue\n                    }\n                }\n                //get \"DELETED\" for that rate\n                def deleted\n                def deletedValue\n                if(objectFacade.loadObjectAttributeBean(component.getId(), properties['iobj.component.deleted'].toString())){\n                    deleted = objectFacade.loadObjectAttributeBean(component.getId(), properties['iobj.component.deleted'].toString()).getObjectAttributeValueBeans().toString()\n                    log.debug \"deleted: \" + deleted\n                    if (deleted){\n                        deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))\n                    }\n                }\n                \n                def matNumber\n                def matNumberKey\n                def matNumberValue\n                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString())){\n                    matNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).getObjectAttributeValueBeans() as ArrayList\n                    if(matNumber.size() &gt; 0){\n                        matNumber = matNumber.toString()\n                        matNumberKey = matNumber.substring(matNumber.indexOf('(')+1,matNumber.indexOf(')'))\n                        def matNumberObject = objectFacade.loadObjectBean(DBObjects + matNumberKey)\n                        matNumberValue = objectFacade.loadObjectAttributeBean(matNumberObject.getId(), properties['iobj.material.name'].toString()).getObjectAttributeValueBeans().toString()\n                        matNumberValue = matNumberValue.substring(matNumberValue.indexOf('(')+1,matNumberValue.indexOf(')'))\n                    }\n                }\n\n                def serialNumber\n                def serialNumberValue\n                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString())){\n                    serialNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()).getObjectAttributeValueBeans() as ArrayList\n                    if(serialNumber.size() &gt; 0){\n                        serialNumber = serialNumber.toString()\n                        serialNumberValue = serialNumber.substring(serialNumber.indexOf('(')+1,serialNumber.indexOf(')'))\n                    }               \n                }\n\n                if(appliedToValue &amp;&amp; !deletedValue.toString().equals(\"true\") &amp;&amp; (appliedToValue.toString().equals(\"BOTH\") || appliedToValue.toString().equals(\"CUSTOMER\"))){\n                    //get \"TOTAL_AMOUNT_CUSTOMER\" for that component\n                    log.debug \"AppliedTo verificato =&gt; \" + objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString())\n                    def totCustomer \n                    if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString())){\n                    \ttotCustomer = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()).getObjectAttributeValueBeans()\n                    }\n                    if(!totCustomer || totCustomer[0].getValue().toString().equals(\"0.0\")){\n                        warnings=true\n                        warningEmptyQuoteMatCustomer.add(matNumberValue.toString() + (!serialNumber.toString().equals(\"[]\") ? \" (\" + serialNumberValue.toString() + \")\" : \" ()\"))\n                        log.debug issue.key.toString() + \" warningEmptyQuoteMatCustomer: \"+ warningEmptyQuoteMatCustomer\n                    }\n                }\n            }    \n        }  \n\n        //OPAA_UNATANTUM_RATES\n        if(issue.getCustomFieldValue(unaTantumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(unaTantumRates) != \"\" &amp;&amp; !issue.getCustomFieldValue(unaTantumRates).toString().equals(\"\")){\n            log.debug \"Una tantum rates: \" + issue.getCustomFieldValue(unaTantumRates)\n            /*Ciclare tutti gli oggetti associati al campo*/\n            //insight classes &amp; components\n            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n            def umRatesList = issue.getCustomFieldValue(unaTantumRates)\n\n            for(um in umRatesList){\n                //extract insight key ang get object\n                def umRate=um.toString()\n                def umRateKey = umRate.substring(umRate.indexOf('(')+1,umRate.indexOf(')'))\n                def umRateObject = objectFacade.loadObjectBean(umRateKey)\n                //get \"APPLIED_TO\" for that rate\n                def umAppliedTo = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()\n                def umAppliedToValue = umAppliedTo.substring(umAppliedTo.indexOf('(')+1,umAppliedTo.indexOf(')'))\n                \n                //get \"DELETED\" for that rate\n                def deleted\n                def deletedValue\n                if(objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString())){\n                    deleted = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString()\n                    log.debug \"deleted: \" + deleted\n                    if (deleted){\n                        deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))\n                    }\n                }\n\n                def umRateRef\n                if(objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){\n                    umRateRef=objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()\n                }\n\n                def umRateRefKey\n                def umRateRefValue\n                if(umRateRef){\n                    umRateRef = umRateRef.toString()\n                    umRateRefKey = umRateRef.substring(umRateRef.indexOf('(')+1,umRateRef.indexOf(')'))\n                    def umRateRefObject = objectFacade.loadObjectBean(DBObjects + umRateRefKey)\n                    umRateRefValue = objectFacade.loadObjectAttributeBean(umRateRefObject.getId(), \"Name\").getObjectAttributeValueBeans().toString()\n                    umRateRefValue = umRateRefValue.substring(umRateRefValue.indexOf('(')+1,umRateRefValue.indexOf(')'))\n                }\n\n                if((umAppliedToValue.toString().equals(\"BOTH\") || umAppliedToValue.toString().equals(\"CUSTOMER\")) &amp;&amp; !deletedValue.toString().equals(\"true\")){\n                    //get \"TOTAL_AMOUNT_CUSTOMER\" for that component\n                    def totCustomer \n                    if(objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString())){\n                        totCustomer=objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()\n                    }\n                    if(!totCustomer || totCustomer[0].getValue().toString().equals(\"0.0\")){\n                        warnings=true\n                        warningEmptyQuoteRateCustomer.add(umRateRefValue.toString())\n                        log.debug issue.key.toString() + \" warningEmptyQuoteRateCustomer: \" + warningEmptyQuoteRateCustomer\n                    }\n                }\n            }    \n        }\n\n        //OPAA_LABOUR_RATES\n        if(issue.getCustomFieldValue(labourRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(labourRates) != \"\" &amp;&amp; !issue.getCustomFieldValue(labourRates).toString().equals(\"\")){\n            log.debug \"Labour rates: \" + issue.getCustomFieldValue(labourRates)\n            /*Ciclare tutti gli oggetti associati al campo*/\n            //insight classes &amp; components\n            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n            def labourRatesList = issue.getCustomFieldValue(labourRates)\n\n            for(lb in labourRatesList){\n                //extract insight key ang get object\n                def lbRate=lb.toString()\n                def lbRateKey = lbRate.substring(lbRate.indexOf('(')+1,lbRate.indexOf(')'))\n                def lbRateObject = objectFacade.loadObjectBean(lbRateKey)\n                //get \"APPLIED_TO\" for that rate\n                def lbAppliedTo = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()\n                def lbAppliedToValue = lbAppliedTo.substring(lbAppliedTo.indexOf('(')+1,lbAppliedTo.indexOf(')'))\n\n                //get \"DELETED\" for that rate\n                def deleted\n                def deletedValue\n                if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString())){\n                    deleted = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString()\n                    log.debug \"deleted: \" + deleted\n                    if (deleted){\n                        deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))\n                    }\n                }\n                \n                def lbRateRef = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()\n\n                def techRef\n                if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.technicianRef'].toString())){\n                    techRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.technicianRef'].toString()).getObjectAttributeValueBeans().toString()\n                }\n\n                def lbRateRefKey\n                def lbRateRefValue\n                if(lbRateRef.size() &gt; 0){\n                    lbRateRef = lbRateRef.toString()\n                    lbRateRefKey = lbRateRef.substring(lbRateRef.indexOf('(')+1,lbRateRef.indexOf(')'))\n                    def lbRateRefObject = objectFacade.loadObjectBean(DBObjects + lbRateRefKey)\n                    lbRateRefValue = objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.name'].toString()).getObjectAttributeValueBeans().toString()\n                    lbRateRefValue = lbRateRefValue.substring(lbRateRefValue.indexOf('(')+1,lbRateRefValue.indexOf(')'))\n                }\n\n                def techRefKey\n                def techRefValue\n                if(techRef){\n                    techRef = techRef.toString()\n                    log.debug \"techRef: \" + techRef\n                    techRefKey = techRef.substring(techRef.indexOf('(')+1,techRef.indexOf(')'))\n                    def techRefObject = objectFacade.loadObjectBean(OPAA + techRefKey)\n                    techRefValue = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()\n                    techRefValue = lbRateRefValue.substring(techRefValue.indexOf('(')+1,techRefValue.indexOf(')'))\n                    \n                }\n                \n\t\t\t\tlog.debug lbAppliedToValue.toString()\n                if((lbAppliedToValue.toString().equals(\"BOTH\") || lbAppliedToValue.toString().equals(\"CUSTOMER\")) &amp;&amp; !deletedValue.toString().equals(\"true\")){\n                    //get \"TOTAL_AMOUNT_CUSTOMER\" for that component\n                    def totCustomer \n                    if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString())){\n                        totCustomer = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()\n                        log.debug \"totCustomer: \" + totCustomer\n                    }\n                    if(!totCustomer || totCustomer[0].getValue().toString().equals(\"0.0\")){\n                        warnings=true\n                        warningEmptyQuoteRateCustomer.add(lbRateRefValue.toString() + \" (\" + techRefValue.toString() + \")\")\n                        log.debug issue.key.toString() + \" warningEmptyQuoteRateCustomer: \" + warningEmptyQuoteRateCustomer\n                    }\n                }\n            }    \n        }\n\n        //OPAA_TRAVEL_RATES\n        if(issue.getCustomFieldValue(travelRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(travelRates) != \"\" &amp;&amp; !issue.getCustomFieldValue(travelRates).toString().equals(\"\")){\n            log.debug \"Travel rates: \" + issue.getCustomFieldValue(travelRates)\n            /*Ciclare tutti gli oggetti associati al campo*/\n            //insight classes &amp; components\n            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n            def travelRatesList = issue.getCustomFieldValue(travelRates)\n\n            for(tr in travelRatesList){\n                //extract insight key ang get object\n                def trRate=tr.toString()\n                def trRateKey = trRate.substring(trRate.indexOf('(')+1,trRate.indexOf(')'))\n                def trRateObject = objectFacade.loadObjectBean(trRateKey)\n                //get \"APPLIED_TO\" for that rate\n                def trAppliedTo = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()\n                def trAppliedToValue = trAppliedTo.substring(trAppliedTo.indexOf('(')+1,trAppliedTo.indexOf(')'))\n\n                //get \"DELETED\" for that rate\n                def deleted\n                def deletedValue\n                if(objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString())){\n                    deleted = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString()\n                    log.debug \"deleted: \" + deleted\n                    if (deleted){\n                        deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))\n                    }\n                }\n                \n                def trRateRef = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()\n\n                def trRateRefKey\n                def trRateRefValue\n                if(trRateRef.size() &gt; 0){\n                    trRateRef = trRateRef.toString()\n                    trRateRefKey = trRateRef.substring(trRateRef.indexOf('(')+1,trRateRef.indexOf(')'))\n                    def trRateRefObject = objectFacade.loadObjectBean(DBObjects + trRateRefKey)\n                    trRateRefValue = objectFacade.loadObjectAttributeBean(trRateRefObject.getId(), properties['iobj.rate.name'].toString()).getObjectAttributeValueBeans().toString()\n                    trRateRefValue = trRateRefValue.substring(trRateRefValue.indexOf('(')+1,trRateRefValue.indexOf(')'))\n                }\n\n                if((trAppliedToValue.toString().equals(\"BOTH\") || trAppliedToValue.toString().equals(\"CUSTOMER\")) &amp;&amp; !deletedValue.toString().equals(\"true\")){\n                    //get \"TOTAL_AMOUNT_CUSTOMER\" for that component\n                    def totCustomer\n                    if(objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString())){\n                        totCustomer=objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()\n                    }\n                    if(!totCustomer || totCustomer[0].getValue().toString().equals(\"0.0\")){\n                        warnings=true\n                        warningEmptyQuoteRateCustomer.add(trRateRefValue.toString())\n                        log.debug issue.key.toString() + \" warningEmptyQuoteRateCustomer: \" + warningEmptyQuoteRateCustomer\n                    }\n                }\n            }    \n        }\n\n    }\n    \n    /*Verifico la presenza di errori e warning sulla issue corrente e, se presenti, li aggiungo agli array degli errori e warning delle issue linkate*/\n    if(warningEmptyQuoteMatCustomer.size()&gt;0){\n        def objList = new ArrayList()\n        objList.add(issue)\n        objList.add(warningEmptyQuoteMatCustomer)\n        warningsMatLinkedIssues.add(objList)\n    }\n    \n    if(warningEmptyQuoteRateCustomer.size()&gt;0){\n        def objList = new ArrayList()\n        objList.add(issue)\n        objList.add(warningEmptyQuoteRateCustomer)\n        warningsRateLinkedIssues.add(objList)\n    }\n    \n    //if(errors...)\n    \n}\n\nlog.debug \"warningsMatLinkedIssues: \" + warningsMatLinkedIssues\nlog.debug \"warningsRateLinkedIssues: \" + warningsRateLinkedIssues\n\ndef output = new ArrayList()\n\nif (!errors &amp;&amp; !warnings){\n\treturn true\n}else{\n\tif(!errors &amp;&amp; warnings){\n\t\t//Se ci sono solo warnings verifico se l'utente ha gi\u00e0 dichiarato di voler proseguire comunque\n\t\t// - transition field \"OPAA_CHECK_AND_CONFIRM\"=\"Yes\"\n\t\t// - in caso contrario invio i warning a FE\n\n\t\tlog.debug \"transitionCheck: \" + issue.getCustomFieldValue(transitionCheck)\n\t\t//log.debug \"result: \" + issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")\n\t\tif(transitionCheckValue.toString().equals(\"Yes\")){\n\t\t\tlog.debug \"return true - transitionCheck = Yes\"\n\t\t\treturn true\n\t\t}else{\n\t\t\tdef wList = new ArrayList()\n\n\t\t\tif(issueWarningEmptyQuoteRateCustomer.size() &gt; 0){\n\t\t\t\tdef wListConfirmEmptyRate = new ArrayList()\n\t\t\t\twListConfirmEmptyRate.add(\"W\")\n\t\t\t\twListConfirmEmptyRate.add(\"CUSTOMER_CONFIRM_EMPTY_RATES\")\n\t\t\t\twListConfirmEmptyRate.add(null)\n\t\t\t\twListConfirmEmptyRate.add(issueWarningEmptyQuoteRateCustomer)\n\n\t\t\t\twList.add(wListConfirmEmptyRate)\n\t\t\t}\n\n\t\t\tif(issueWarningEmptyQuoteMatCustomer.size() &gt; 0){\n\t\t\t\tdef wListConfirmEmptyMatQuote = new ArrayList()\n\t\t\t\twListConfirmEmptyMatQuote.add(\"W\")\n\t\t\t\twListConfirmEmptyMatQuote.add(\"CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE\")\n\t\t\t\twListConfirmEmptyMatQuote.add(null)\n\t\t\t\twListConfirmEmptyMatQuote.add(issueWarningEmptyQuoteMatCustomer)\n\n\t\t\t\twList.add(wListConfirmEmptyMatQuote)\n\t\t\t}\n\t\t\t\n\t\t\tif(warningsMatLinkedIssues.size() &gt; 0){\n                for(obj in warningsMatLinkedIssues){\n                    def wListConfirmEmptyMatQuote = new ArrayList()\n                    wListConfirmEmptyMatQuote.add(\"W\")\n                    wListConfirmEmptyMatQuote.add(\"CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE\")\n                    wListConfirmEmptyMatQuote.add(obj[0])\n                    wListConfirmEmptyMatQuote.add(obj[1])\n\n                    wList.add(wListConfirmEmptyMatQuote)\n                }\n            }\n            \n            if(warningsRateLinkedIssues.size() &gt; 0){\n                for(obj in warningsRateLinkedIssues){\n                    def wListConfirmEmptyRate = new ArrayList()\n                    wListConfirmEmptyRate.add(\"W\")\n                    wListConfirmEmptyRate.add(\"CUSTOMER_CONFIRM_EMPTY_RATES\")\n                    wListConfirmEmptyRate.add(obj[0])\n                    wListConfirmEmptyRate.add(obj[1])\n\n                    wList.add(wListConfirmEmptyRate)\n                }\n            }\n\n\t\t\toutput.add(wList)\n            throw new InvalidInputException('{\"W\":\"' + output.toString() + '\"}')\n\t\t\t//throw new InvalidInputException(\"W\", output.toString())   \n\t\t}\n\n\t}\n\tif(errors &amp;&amp; !warnings){\n\t\tdef eList = new ArrayList()\n\n\t\toutput.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n\t\t//throw new InvalidInputException(\"E\", output.toString())   \n\t}\n\tif(errors &amp;&amp; warnings){\n\t\tdef eList = new ArrayList()\n\t\tdef wList = new ArrayList()\n\n\t\tif(issueWarningEmptyQuoteRateCustomer.size() &gt; 0){\n\t\t\tdef wListConfirmEmptyRate = new ArrayList()\n\t\t\twListConfirmEmptyRate.add(\"W\")\n\t\t\twListConfirmEmptyRate.add(\"CUSTOMER_CONFIRM_EMPTY_RATES\")\n\t\t\twListConfirmEmptyRate.add(null)\n\t\t\twListConfirmEmptyRate.add(issueWarningEmptyQuoteRateCustomer)\n\n\t\t\twList.add(wListConfirmEmptyRate)\n\t\t}\n\n\t\tif(issueWarningEmptyQuoteMatCustomer.size() &gt; 0){\n\t\t\tdef wListConfirmEmptyMatQuote = new ArrayList()\n\t\t\twListConfirmEmptyMatQuote.add(\"W\")\n\t\t\twListConfirmEmptyMatQuote.add(\"CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE\")\n\t\t\twListConfirmEmptyMatQuote.add(null)\n\t\t\twListConfirmEmptyMatQuote.add(issueWarningEmptyQuoteMatCustomer)\n\n\t\t\twList.add(wListConfirmEmptyMatQuote)\n\t\t}\n\t\t\n\t\tif(warningsMatLinkedIssues.size() &gt; 0){\n\t\t\tfor(obj in warningsMatLinkedIssues){\n\t\t\t\tdef wListConfirmEmptyMatQuote = new ArrayList()\n\t\t\t\twListConfirmEmptyMatQuote.add(\"W\")\n\t\t\t\twListConfirmEmptyMatQuote.add(\"CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE\")\n\t\t\t\twListConfirmEmptyMatQuote.add(obj[0])\n\t\t\t\twListConfirmEmptyMatQuote.add(obj[1])\n\n\t\t\t\twList.add(wListConfirmEmptyMatQuote)\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(warningsRateLinkedIssues.size() &gt; 0){\n\t\t\tfor(obj in warningsRateLinkedIssues){\n\t\t\t\tdef wListConfirmEmptyRate = new ArrayList()\n\t\t\t\twListConfirmEmptyRate.add(\"W\")\n\t\t\t\twListConfirmEmptyRate.add(\"CUSTOMER_CONFIRM_EMPTY_RATES\")\n\t\t\t\twListConfirmEmptyRate.add(obj[0])\n\t\t\t\twListConfirmEmptyRate.add(obj[1])\n\n\t\t\t\twList.add(wListConfirmEmptyRate)\n\t\t\t}\n\t\t}\n\n\t\toutput.add(eList)\n\t\toutput.add(wList)\n        throw new InvalidInputException('{\"WE\":\"' + output.toString() + '\"}')\n\t\t//throw new InvalidInputException(\"WE\", output.toString())  \n\t}\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper
import groovy.json.JsonBuilder
import groovy.json.StreamingJsonBuilder

import com.atlassian.jira.issue.CustomFieldManager
import com.atlassian.jira.issue.fields.CustomField
import com.atlassian.jira.issue.IssueManager
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.issue.link.IssueLink

import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService

import org.apache.log4j.Category
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)
 
Issue issue = issue
//Per test da console
//IssueManager issueManager = ComponentAccessor.getIssueManager();
//issue = issueManager.getIssueByKeyIgnoreCase("OPUT-14065")

def errors = false
def warnings = false
def relatesInIssueLink=false
def relatesOutIssueLink=false
def wListConfirmEmptyMatQuoteLinked = new ArrayList()
def wListConfirmEmptyRateQuoteLinked = new ArrayList()

def lumpSumPrice =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumPrice'].toString())[0]

/*Campi con dati obbligatori per ticket non a corpo*/
def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.replacedMaterials'].toString())[0]
def unaTantumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.unatantumRates'].toString())[0]
def labourRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.labourRates'].toString())[0]
def travelRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.travelRates'].toString())[0]

/*Campi con dati obbligatori per ticket a corpo*/
def lumpSumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumRates'].toString())[0]

/*Conferma utente su warnings*/
def transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]
def transitionCheckValue = issue.getCustomFieldValue(transitionCheck)

/*Insight Schema IDs*/
def DBObjects = properties['ischema.dbo'].toString() + "-"
def OPAA = properties['ischema.aa'].toString() + "-"

/*Array warnings ed errors per la issue principale, uno per ogni tipologia di errore o warning*/
def issueWarningEmptyQuoteMatCustomer = new ArrayList()
def issueWarningEmptyQuoteRateCustomer = new ArrayList()
//def issueError...

/*Verifica campi su ticket oggetto della transazione*/
if(issue.getCustomFieldValue(lumpSumPrice)!=null &amp;&amp; issue.getCustomFieldValue(lumpSumPrice).toString().equals("Yes")){
	/*Contabilizzazione a corpo*/
	log.debug "Contabilizzazione a corpo"
	//OPAA_LUMP_SUM_RATES
	if(issue.getCustomFieldValue(lumpSumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(lumpSumRates) != "" &amp;&amp; !issue.getCustomFieldValue(lumpSumRates).toString().equals("")){
		/*Ciclare tutti gli oggetti associati al campo*/
		//insight classes &amp; components
		Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
		Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
		def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
		def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

		def lsRatesList = issue.getCustomFieldValue(lumpSumRates)

		for(ls in lsRatesList){
			//extract insight key ang get object
			def lsRate=ls.toString()
			def lsRateKey = lsRate.substring(lsRate.indexOf('(')+1,lsRate.indexOf(')'))
			def lsRateObject = objectFacade.loadObjectBean(lsRateKey)
			//get "APPLIED_TO" for that rate
			def lsAppliedTo = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
			def lsAppliedToValue
			if (lsAppliedTo){
				lsAppliedToValue = lsAppliedTo.substring(lsAppliedTo.indexOf('(')+1,lsAppliedTo.indexOf(')'))
			}
            //get "DELETED" for that rate
            def deleted
            def deletedValue
            if(objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString())){
                deleted = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString()
                log.debug "deleted: " + deleted
                if (deleted){
                    deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
                }
            }
			
			def lsRateRef = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
			
			def lsRateRefKey
			def lsRateRefValue
			if(lsRateRef.size() &gt; 0){
				lsRateRef = lsRateRef.toString()
				lsRateRefKey = lsRateRef.substring(lsRateRef.indexOf('(')+1,lsRateRef.indexOf(')'))
				def lsRateRefObject = objectFacade.loadObjectBean(OPAA + lsRateRefKey)
				lsRateRefValue = objectFacade.loadObjectAttributeBean(lsRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
				lsRateRefValue = lsRateRefValue.substring(lsRateRefValue.indexOf('(')+1,lsRateRefValue.indexOf(')'))
			}

			if((lsAppliedToValue.toString().equals("BOTH") || lsAppliedToValue.toString().equals("CUSTOMER")) &amp;&amp; !deletedValue.toString().equals("true")){
				//get "TOTAL_AMOUNT_CUSTOMER" for that component
				def totCustomer 
				if(objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString())){
					totCustomer = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()
				}
				if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
					warnings=true
					issueWarningEmptyQuoteRateCustomer.add(lsRateRefValue.toString())
					log.debug issue.key.toString() + " issueWarningEmptyQuoteRateCustomer: " + issueWarningEmptyQuoteRateCustomer
				}
			}
		 }    
	}

}else{
	/*Contabilizzazione non a corpo*/
	log.debug "Contabilizzazione NON a corpo"

	//OPAA_REPLACED_MATERIALS
	if(issue.getCustomFieldValue(repMaterials)!=null &amp;&amp; (String)issue.getCustomFieldValue(repMaterials) != "" &amp;&amp; !issue.getCustomFieldValue(repMaterials).toString().equals("")){
		//log.debug "Materiali: " + issue.getCustomFieldValue(repMaterials)
		/*Ciclare tutti gli oggetti associati al campo*/
		//insight classes &amp; components
		Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
		Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
		def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
		def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

		def repMatList = issue.getCustomFieldValue(repMaterials)

		for(mat in repMatList){
			//extract insight key ang get object
			def component=mat.toString()
			//def componentKey = component.substring(component.indexOf('(')+1,component.indexOf(')'))
            def componentKey = component.substring(component.indexOf('('+OPAA)+1,component.length()-1)
			def componentObject = objectFacade.loadObjectBean(componentKey)
			//get "APPLIED_TO" for that component
			def appliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString()).getObjectAttributeValueBeans() as ArrayList
			def appliedToValue
			if(appliedTo.size() &gt; 0){
				appliedTo = appliedTo.toString()
				appliedToValue = appliedTo.substring(appliedTo.indexOf('(')+1,appliedTo.indexOf(')'))
				//log.debug "appliedToValue: " + appliedToValue
			}
            //get "DELETED" for that rate
            def deleted
            def deletedValue
            if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString())){
                deleted = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString()).getObjectAttributeValueBeans().toString()
                log.debug "deleted: " + deleted
                if (deleted){
                    deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
                }
            }
			
			def matNumber
			def matNumberKey
			def matNumberValue
			if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString())){
				matNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).getObjectAttributeValueBeans() as ArrayList
				if(matNumber.size() &gt; 0){
					matNumber = matNumber.toString()
					matNumberKey = matNumber.substring(matNumber.indexOf('(')+1,matNumber.indexOf(')'))
					def matNumberObject = objectFacade.loadObjectBean(DBObjects + matNumberKey)
					matNumberValue = objectFacade.loadObjectAttributeBean(matNumberObject.getId(), properties['iobj.material.name'].toString()).getObjectAttributeValueBeans().toString()
					matNumberValue = matNumberValue.substring(matNumberValue.indexOf('(')+1,matNumberValue.indexOf(')'))
				}
			}
			
			def serialNumber
			def serialNumberValue
			if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString())){
				serialNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()).getObjectAttributeValueBeans() as ArrayList
				if(serialNumber.size() &gt; 0){
					serialNumber = serialNumber.toString()
					serialNumberValue = serialNumber.substring(serialNumber.indexOf('(')+1,serialNumber.indexOf(')'))
				}  
			}				

			if((appliedToValue.toString().equals("BOTH") || appliedToValue.toString().equals("CUSTOMER")) &amp;&amp; !deletedValue.toString().equals("true")){
				//get "TOTAL_AMOUNT_CUSTOMER" for that component
				def totCustomer 
				if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString())){
					totCustomer = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()).getObjectAttributeValueBeans()
				}
				if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
					warnings=true
					issueWarningEmptyQuoteMatCustomer.add(matNumberValue.toString() + (!serialNumber.toString().equals("[]") ? " (" + serialNumberValue.toString() + ")" : " ()"))   
					log.debug issue.key.toString() + " issueWarningEmptyQuoteMatCustomer: " + issueWarningEmptyQuoteMatCustomer
				}
			}
		 }    
	}  

	//OPAA_UNATANTUM_RATES
	if(issue.getCustomFieldValue(unaTantumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(unaTantumRates) != "" &amp;&amp; !issue.getCustomFieldValue(unaTantumRates).toString().equals("")){
		log.debug "Una tantum rates: " + issue.getCustomFieldValue(unaTantumRates)
		/*Ciclare tutti gli oggetti associati al campo*/
		//insight classes &amp; components
		Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
		Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
		def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
		def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

		def umRatesList = issue.getCustomFieldValue(unaTantumRates)

		for(um in umRatesList){
			//extract insight key ang get object
			def umRate=um.toString()
			def umRateKey = umRate.substring(umRate.indexOf('(')+1,umRate.indexOf(')'))
			def umRateObject = objectFacade.loadObjectBean(umRateKey)
			//get "APPLIED_TO" for that rate
			def umAppliedTo = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
			def umAppliedToValue = umAppliedTo.substring(umAppliedTo.indexOf('(')+1,umAppliedTo.indexOf(')'))
            
            //get "DELETED" for that rate
			def deleted
            def deletedValue
            if (objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString())){
                deleted = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString()
                log.debug "deleted: " + deleted
                if (deleted){
                    deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
                }
            }

			def umRateRef
			if(objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){
				umRateRef=objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
			}
			
			def umRateRefKey
			def umRateRefValue
			if(umRateRef){
				umRateRef = umRateRef.toString()
				umRateRefKey = umRateRef.substring(umRateRef.indexOf('(')+1,umRateRef.indexOf(')'))
				def umRateRefObject = objectFacade.loadObjectBean(OPAA + umRateRefKey)
				umRateRefValue = objectFacade.loadObjectAttributeBean(umRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
				umRateRefValue = umRateRefValue.substring(umRateRefValue.indexOf('(')+1,umRateRefValue.indexOf(')'))
			}
			
			if((umAppliedToValue.toString().equals("BOTH") || umAppliedToValue.toString().equals("CUSTOMER")) &amp;&amp; !deletedValue.toString().equals("true")){
				//get "TOTAL_AMOUNT_CUSTOMER" for that component
				def totCustomer
				if(objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString())){
					totCustomer=objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()
				}
				if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
					warnings=true
					issueWarningEmptyQuoteRateCustomer.add(umRateRefValue.toString())
					log.debug issue.key.toString() + " issueWarningEmptyQuoteRateCustomer: " + issueWarningEmptyQuoteRateCustomer
				}
			}
		 }    
	}

	//OPAA_LABOUR_RATES
	if(issue.getCustomFieldValue(labourRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(labourRates) != "" &amp;&amp; !issue.getCustomFieldValue(labourRates).toString().equals("")){
		log.debug "Labour rates: " + issue.getCustomFieldValue(labourRates)
		/*Ciclare tutti gli oggetti associati al campo*/
		//insight classes &amp; components
		Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
		Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
		def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
		def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

		def labourRatesList = issue.getCustomFieldValue(labourRates)

		for(lb in labourRatesList){
			//extract insight key ang get object
			def lbRate=lb.toString()
			def lbRateKey = lbRate.substring(lbRate.indexOf('(')+1,lbRate.indexOf(')'))
			def lbRateObject = objectFacade.loadObjectBean(lbRateKey)
			//get "APPLIED_TO" for that rate
			def lbAppliedTo = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.component.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
			def lbAppliedToValue = lbAppliedTo.substring(lbAppliedTo.indexOf('(')+1,lbAppliedTo.indexOf(')'))
            //get "DELETED" for that rate
			def deleted
            def deletedValue
            if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.component.deleted'].toString())){
                deleted = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.component.deleted'].toString()).getObjectAttributeValueBeans().toString()
                log.debug "deleted: " + deleted
                if (deleted){
                    deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
                }
            }

			def lbRateRef
			if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){
				lbRateRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
			}
			
			def techRef
            if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.technicianRef'].toString())){
                techRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.technicianRef'].toString()).getObjectAttributeValueBeans().toString()
            }
			
            def lbRateRefKey
            def lbRateRefValue
            if(lbRateRef &amp;&amp; lbRateRef.size() &gt; 0){
                lbRateRef = lbRateRef.toString()
                lbRateRefKey = lbRateRef.substring(lbRateRef.indexOf('(')+1,lbRateRef.indexOf(')'))
                def lbRateRefObject = objectFacade.loadObjectBean(OPAA + lbRateRefKey)
                lbRateRefValue = objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
                lbRateRefValue = lbRateRefValue.substring(lbRateRefValue.indexOf('(')+1,lbRateRefValue.indexOf(')'))
            }
			
			def techRefKey
            def techRefValue
            if(techRef){
                techRef = techRef.toString()
                log.debug "techRef: " + techRef
                techRefKey = techRef.substring(techRef.indexOf('(')+1,techRef.indexOf(')'))
                def techRefObject = objectFacade.loadObjectBean(OPAA + techRefKey)
                techRefValue = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()
                if(techRefValue){
                    techRefValue = techRefValue.substring(techRefValue.indexOf('(')+1,techRefValue.indexOf(')'))
                }
            }
			
			if((lbAppliedToValue.toString().equals("BOTH") || lbAppliedToValue.toString().equals("CUSTOMER")) &amp;&amp; !deletedValue.toString().equals("true")){
				//get "TOTAL_AMOUNT_CUSTOMER" for that component
				def totCustomer
				if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString())){
					totCustomer=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()
				}
				if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
					warnings=true
					issueWarningEmptyQuoteRateCustomer.add(lbRateRefValue.toString())
					log.debug issue.key.toString() + " issueWarningEmptyQuoteRateCustomer: " + issueWarningEmptyQuoteRateCustomer
				}
			}
		 }    
	}

	//OPAA_TRAVEL_RATES
	if(issue.getCustomFieldValue(travelRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(travelRates) != "" &amp;&amp; !issue.getCustomFieldValue(travelRates).toString().equals("")){
		log.debug "Travel rates: " + issue.getCustomFieldValue(travelRates)
		/*Ciclare tutti gli oggetti associati al campo*/
		//insight classes &amp; components
		Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
		Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
		def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
		def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

		def travelRatesList = issue.getCustomFieldValue(travelRates)

		for(tr in travelRatesList){
			//extract insight key ang get object
			def trRate=tr.toString()
			def trRateKey = trRate.substring(trRate.indexOf('(')+1,trRate.indexOf(')'))
			def trRateObject = objectFacade.loadObjectBean(trRateKey)
			//get "APPLIED_TO" for that rate
            def trAppliedTo
            def trAppliedToValue
            if(objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iboj.component.appliedTo'].toString())){
                trAppliedTo = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iboj.component.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                trAppliedToValue = trAppliedTo.substring(trAppliedTo.indexOf('(')+1,trAppliedTo.indexOf(')'))
            }
            //get "DELETED" for that rate
			def deleted
            def deletedValue
            if(objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString())){
                deleted = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString()
                log.debug "deleted: " + deleted
                if (deleted){
                    deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
                }
            }

			def trRateRef
			if(objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){
				trRateRef=objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
			}
			
			def trRateRefKey
			def trRateRefValue
			if(trRateRef != null &amp;&amp; trRateRef.size() &gt; 0){
				trRateRef = trRateRef.toString()
				trRateRefKey = trRateRef.substring(trRateRef.indexOf('(')+1,trRateRef.indexOf(')'))
				def trRateRefObject = objectFacade.loadObjectBean(OPAA + trRateRefKey)
				trRateRefValue = objectFacade.loadObjectAttributeBean(trRateRefObject.getId(), properties['iboj.rate.name'].toString()).getObjectAttributeValueBeans().toString()
				trRateRefValue = trRateRefValue.substring(trRateRefValue.indexOf('(')+1,trRateRefValue.indexOf(')'))
			}

			if(trAppliedToValue != null &amp;&amp; !deletedValue.toString().equals("true") &amp;&amp; (trAppliedToValue.toString().equals("BOTH") || trAppliedToValue.toString().equals("CUSTOMER"))){
				//get "TOTAL_AMOUNT_CUSTOMER" for that component
				def totCustomer
				if(objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString())){
					totCustomer=objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()
				}
				if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
					warnings=true
					issueWarningEmptyQuoteRateCustomer.add(trRateRefValue.toString())
					log.debug issue.key.toString() + " issueWarningEmptyQuoteRateCustomer: " + issueWarningEmptyQuoteRateCustomer
				}
			}
		 }    
	}

}

def linkedTickets=new ArrayList()

/*OP-1038: verifica ticket collegati -  e su ciascuno verifica campi obbligatori*/
List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesInIssueLink=true
        linkedTickets.add(issueLink.getSourceObject())
        log.debug "Issue con relatesInIssueLink"
    }
}
List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesOutIssueLink=true
        linkedTickets.add(issueLink.getDestinationObject())
        log.debug "Issue con relatesOutIssueLink"
    }
}

/*Array warnings ed errors per le issue linkate, uno per ogni tipologia di errore o warning*/
def warningsMatLinkedIssues = new ArrayList()
def warningsRateLinkedIssues = new ArrayList()
//def errorsLinkedIssues = new ArrayList()

for(i in linkedTickets){
    issue=i as Issue

    /*Array warnings ed errors per la singola issue linkata, uno per ogni tipologia di errore o warning*/
    def warningEmptyQuoteRateCustomer = new ArrayList()
    def warningEmptyQuoteMatCustomer = new ArrayList() 
    //def error...
    
    if(issue.getCustomFieldValue(lumpSumPrice)!=null &amp;&amp; issue.getCustomFieldValue(lumpSumPrice).toString().equals("Yes")){
        /*Contabilizzazione a corpo*/
        log.debug "Contabilizzazione a corpo"
        //OPAA_LUMP_SUM_RATES
        if(issue.getCustomFieldValue(lumpSumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(lumpSumRates) != "" &amp;&amp; !issue.getCustomFieldValue(lumpSumRates).toString().equals("")){
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def lsRatesList = issue.getCustomFieldValue(lumpSumRates)

            for(ls in lsRatesList){
                //extract insight key ang get object
                def lsRate=ls.toString()
                def lsRateKey = lsRate.substring(lsRate.indexOf('(')+1,lsRate.indexOf(')'))
                def lsRateObject = objectFacade.loadObjectBean(lsRateKey)
                //get "APPLIED_TO" for that rate
                def lsAppliedTo = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                def lsAppliedToValue
                if (lsAppliedTo){
                    lsAppliedToValue = lsAppliedTo.substring(lsAppliedTo.indexOf('(')+1,lsAppliedTo.indexOf(')'))
                }
                
                //get "DELETED" for that rate
                def deleted
                def deletedValue
                if(objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString())){
                    deleted = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString()
                    log.debug "deleted: " + deleted
                    if (deleted){
                        deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
                    }
                }

                def lsRateRef = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()

                def lsRateRefKey
                def lsRateRefValue
                if(lsRateRef.size() &gt; 0){
                    lsRateRef = lsRateRef.toString()
                    lsRateRefKey = lsRateRef.substring(lsRateRef.indexOf('(')+1,lsRateRef.indexOf(')'))
                    def lsRateRefObject = objectFacade.loadObjectBean(OPAA + lsRateRefKey)
                    lsRateRefValue = objectFacade.loadObjectAttributeBean(lsRateRefObject.getId(), properties['iobj.rate.name'].toString()).getObjectAttributeValueBeans().toString()
                    lsRateRefValue = lsRateRefValue.substring(lsRateRefValue.indexOf('(')+1,lsRateRefValue.indexOf(')'))
                }

                if((lsAppliedToValue.toString().equals("BOTH") || lsAppliedToValue.toString().equals("CUSTOMER")) &amp;&amp; !deletedValue.toString().equals("true")){
                    //get "TOTAL_AMOUNT_CUSTOMER" for that component
                    def totCustomer
                    if(objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString())){
                    	totCustomer = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()
                    }
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true    
                        warningEmptyQuoteRateCustomer.add(lsRateRefValue.toString())
                        log.debug issue.key.toString() + " warningEmptyQuoteRateCustomer: " + warningEmptyQuoteRateCustomer
                    }
                }
            }    
        }

    }else{
        /*Contabilizzazione non a corpo*/
        log.debug "Contabilizzazione NON a corpo"

        //OPAA_REPLACED_MATERIALS
        if(issue.getCustomFieldValue(repMaterials)!=null &amp;&amp; (String)issue.getCustomFieldValue(repMaterials) != "" &amp;&amp; !issue.getCustomFieldValue(repMaterials).toString().equals("")){
            log.debug "Materiali: " + issue.getCustomFieldValue(repMaterials)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def repMatList = issue.getCustomFieldValue(repMaterials)

            for(mat in repMatList){
                //extract insight key ang get object
                def component=mat.toString()
                //def componentKey = component.substring(component.indexOf('(')+1,component.indexOf(')'))
                def componentKey = component.substring(component.indexOf('('+OPAA)+1,component.length()-1)
                def componentObject = objectFacade.loadObjectBean(componentKey)
                //get "APPLIED_TO" for that component
                def appliedTo
                def appliedToValue
                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString())){
                    appliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString()).getObjectAttributeValueBeans() as ArrayList
                    if(appliedTo.size() &gt; 0){
                        appliedTo = appliedTo.toString()
                        appliedToValue = appliedTo.substring(appliedTo.indexOf('(')+1,appliedTo.indexOf(')'))
                        log.debug "appliedToValue: " + appliedToValue
                    }
                }
                //get "DELETED" for that rate
                def deleted
                def deletedValue
                if(objectFacade.loadObjectAttributeBean(component.getId(), properties['iobj.component.deleted'].toString())){
                    deleted = objectFacade.loadObjectAttributeBean(component.getId(), properties['iobj.component.deleted'].toString()).getObjectAttributeValueBeans().toString()
                    log.debug "deleted: " + deleted
                    if (deleted){
                        deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
                    }
                }
                
                def matNumber
                def matNumberKey
                def matNumberValue
                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString())){
                    matNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).getObjectAttributeValueBeans() as ArrayList
                    if(matNumber.size() &gt; 0){
                        matNumber = matNumber.toString()
                        matNumberKey = matNumber.substring(matNumber.indexOf('(')+1,matNumber.indexOf(')'))
                        def matNumberObject = objectFacade.loadObjectBean(DBObjects + matNumberKey)
                        matNumberValue = objectFacade.loadObjectAttributeBean(matNumberObject.getId(), properties['iobj.material.name'].toString()).getObjectAttributeValueBeans().toString()
                        matNumberValue = matNumberValue.substring(matNumberValue.indexOf('(')+1,matNumberValue.indexOf(')'))
                    }
                }

                def serialNumber
                def serialNumberValue
                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString())){
                    serialNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()).getObjectAttributeValueBeans() as ArrayList
                    if(serialNumber.size() &gt; 0){
                        serialNumber = serialNumber.toString()
                        serialNumberValue = serialNumber.substring(serialNumber.indexOf('(')+1,serialNumber.indexOf(')'))
                    }               
                }

                if(appliedToValue &amp;&amp; !deletedValue.toString().equals("true") &amp;&amp; (appliedToValue.toString().equals("BOTH") || appliedToValue.toString().equals("CUSTOMER"))){
                    //get "TOTAL_AMOUNT_CUSTOMER" for that component
                    log.debug "AppliedTo verificato =&gt; " + objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString())
                    def totCustomer 
                    if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString())){
                    	totCustomer = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()).getObjectAttributeValueBeans()
                    }
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteMatCustomer.add(matNumberValue.toString() + (!serialNumber.toString().equals("[]") ? " (" + serialNumberValue.toString() + ")" : " ()"))
                        log.debug issue.key.toString() + " warningEmptyQuoteMatCustomer: "+ warningEmptyQuoteMatCustomer
                    }
                }
            }    
        }  

        //OPAA_UNATANTUM_RATES
        if(issue.getCustomFieldValue(unaTantumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(unaTantumRates) != "" &amp;&amp; !issue.getCustomFieldValue(unaTantumRates).toString().equals("")){
            log.debug "Una tantum rates: " + issue.getCustomFieldValue(unaTantumRates)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def umRatesList = issue.getCustomFieldValue(unaTantumRates)

            for(um in umRatesList){
                //extract insight key ang get object
                def umRate=um.toString()
                def umRateKey = umRate.substring(umRate.indexOf('(')+1,umRate.indexOf(')'))
                def umRateObject = objectFacade.loadObjectBean(umRateKey)
                //get "APPLIED_TO" for that rate
                def umAppliedTo = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                def umAppliedToValue = umAppliedTo.substring(umAppliedTo.indexOf('(')+1,umAppliedTo.indexOf(')'))
                
                //get "DELETED" for that rate
                def deleted
                def deletedValue
                if(objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString())){
                    deleted = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString()
                    log.debug "deleted: " + deleted
                    if (deleted){
                        deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
                    }
                }

                def umRateRef
                if(objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){
                    umRateRef=objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
                }

                def umRateRefKey
                def umRateRefValue
                if(umRateRef){
                    umRateRef = umRateRef.toString()
                    umRateRefKey = umRateRef.substring(umRateRef.indexOf('(')+1,umRateRef.indexOf(')'))
                    def umRateRefObject = objectFacade.loadObjectBean(OPAA + umRateRefKey)
                    umRateRefValue = objectFacade.loadObjectAttributeBean(umRateRefObject.getId(), "Name").getObjectAttributeValueBeans().toString()
                    umRateRefValue = umRateRefValue.substring(umRateRefValue.indexOf('(')+1,umRateRefValue.indexOf(')'))
                }

                if((umAppliedToValue.toString().equals("BOTH") || umAppliedToValue.toString().equals("CUSTOMER")) &amp;&amp; !deletedValue.toString().equals("true")){
                    //get "TOTAL_AMOUNT_CUSTOMER" for that component
                    def totCustomer 
                    if(objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString())){
                        totCustomer=objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()
                    }
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateCustomer.add(umRateRefValue.toString())
                        log.debug issue.key.toString() + " warningEmptyQuoteRateCustomer: " + warningEmptyQuoteRateCustomer
                    }
                }
            }    
        }

        //OPAA_LABOUR_RATES
        if(issue.getCustomFieldValue(labourRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(labourRates) != "" &amp;&amp; !issue.getCustomFieldValue(labourRates).toString().equals("")){
            log.debug "Labour rates: " + issue.getCustomFieldValue(labourRates)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def labourRatesList = issue.getCustomFieldValue(labourRates)

            for(lb in labourRatesList){
                //extract insight key ang get object
                def lbRate=lb.toString()
                def lbRateKey = lbRate.substring(lbRate.indexOf('(')+1,lbRate.indexOf(')'))
                def lbRateObject = objectFacade.loadObjectBean(lbRateKey)
                //get "APPLIED_TO" for that rate
                def lbAppliedTo = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                def lbAppliedToValue = lbAppliedTo.substring(lbAppliedTo.indexOf('(')+1,lbAppliedTo.indexOf(')'))

                //get "DELETED" for that rate
                def deleted
                def deletedValue
                if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString())){
                    deleted = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString()
                    log.debug "deleted: " + deleted
                    if (deleted){
                        deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
                    }
                }
                
                def lbRateRef = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()

                def techRef
                if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.technicianRef'].toString())){
                    techRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.technicianRef'].toString()).getObjectAttributeValueBeans().toString()
                }

                def lbRateRefKey
                def lbRateRefValue
                if(lbRateRef.size() &gt; 0){
                    lbRateRef = lbRateRef.toString()
                    lbRateRefKey = lbRateRef.substring(lbRateRef.indexOf('(')+1,lbRateRef.indexOf(')'))
                    def lbRateRefObject = objectFacade.loadObjectBean(OPAA + lbRateRefKey)
                    lbRateRefValue = objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.name'].toString()).getObjectAttributeValueBeans().toString()
                    lbRateRefValue = lbRateRefValue.substring(lbRateRefValue.indexOf('(')+1,lbRateRefValue.indexOf(')'))
                }

                def techRefKey
                def techRefValue
                if(techRef){
                    techRef = techRef.toString()
                    log.debug "techRef: " + techRef
                    techRefKey = techRef.substring(techRef.indexOf('(')+1,techRef.indexOf(')'))
                    def techRefObject = objectFacade.loadObjectBean(OPAA + techRefKey)
                    techRefValue = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()
                    techRefValue = lbRateRefValue.substring(techRefValue.indexOf('(')+1,techRefValue.indexOf(')'))
                }

                if((lbAppliedToValue.toString().equals("BOTH") || lbAppliedToValue.toString().equals("CUSTOMER")) &amp;&amp; !deletedValue.toString().equals("true")){
                    //get "TOTAL_AMOUNT_CUSTOMER" for that component
                    def totCustomer 
                    if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString())){
                        totCustomer = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()
                    }
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateCustomer.add(lbRateRefValue.toString() + " (" + techRefValue.toString() + ")")
                        log.debug issue.key.toString() + " warningEmptyQuoteRateCustomer: " + warningEmptyQuoteRateCustomer
                    }
                }
            }    
        }

        //OPAA_TRAVEL_RATES
        if(issue.getCustomFieldValue(travelRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(travelRates) != "" &amp;&amp; !issue.getCustomFieldValue(travelRates).toString().equals("")){
            log.debug "Travel rates: " + issue.getCustomFieldValue(travelRates)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def travelRatesList = issue.getCustomFieldValue(travelRates)

            for(tr in travelRatesList){
                //extract insight key ang get object
                def trRate=tr.toString()
                def trRateKey = trRate.substring(trRate.indexOf('(')+1,trRate.indexOf(')'))
                def trRateObject = objectFacade.loadObjectBean(trRateKey)
                //get "APPLIED_TO" for that rate
                def trAppliedTo = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                def trAppliedToValue = trAppliedTo.substring(trAppliedTo.indexOf('(')+1,trAppliedTo.indexOf(')'))

                //get "DELETED" for that rate
                def deleted
                def deletedValue
                if(objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString())){
                    deleted = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString()
                    log.debug "deleted: " + deleted
                    if (deleted){
                        deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
                    }
                }
                
                def trRateRef = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()

                def trRateRefKey
                def trRateRefValue
                if(trRateRef.size() &gt; 0){
                    trRateRef = trRateRef.toString()
                    trRateRefKey = trRateRef.substring(trRateRef.indexOf('(')+1,trRateRef.indexOf(')'))
                    def trRateRefObject = objectFacade.loadObjectBean(OPAA + trRateRefKey)
                    trRateRefValue = objectFacade.loadObjectAttributeBean(trRateRefObject.getId(), properties['iobj.rate.name'].toString()).getObjectAttributeValueBeans().toString()
                    trRateRefValue = trRateRefValue.substring(trRateRefValue.indexOf('(')+1,trRateRefValue.indexOf(')'))
                }

                if((trAppliedToValue.toString().equals("BOTH") || trAppliedToValue.toString().equals("CUSTOMER")) &amp;&amp; !deletedValue.toString().equals("true")){
                    //get "TOTAL_AMOUNT_CUSTOMER" for that component
                    def totCustomer
                    if(objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString())){
                        totCustomer=objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()
                    }
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateCustomer.add(trRateRefValue.toString())
                        log.debug issue.key.toString() + " warningEmptyQuoteRateCustomer: " + warningEmptyQuoteRateCustomer
                    }
                }
            }    
        }

    }
    
    /*Verifico la presenza di errori e warning sulla issue corrente e, se presenti, li aggiungo agli array degli errori e warning delle issue linkate*/
    if(warningEmptyQuoteMatCustomer.size()&gt;0){
        def objList = new ArrayList()
        objList.add(issue)
        objList.add(warningEmptyQuoteMatCustomer)
        warningsMatLinkedIssues.add(objList)
    }
    
    if(warningEmptyQuoteRateCustomer.size()&gt;0){
        def objList = new ArrayList()
        objList.add(issue)
        objList.add(warningEmptyQuoteRateCustomer)
        warningsRateLinkedIssues.add(objList)
    }
    
    //if(errors...)
    
}

log.debug "warningsMatLinkedIssues: " + warningsMatLinkedIssues
log.debug "warningsRateLinkedIssues: " + warningsRateLinkedIssues

def output = new ArrayList()

if (!errors &amp;&amp; !warnings){
	return true
}else{
	if(!errors &amp;&amp; warnings){
		//Se ci sono solo warnings verifico se l'utente ha già dichiarato di voler proseguire comunque
		// - transition field "OPAA_CHECK_AND_CONFIRM"="Yes"
		// - in caso contrario invio i warning a FE

		log.debug "transitionCheck: " + issue.getCustomFieldValue(transitionCheck)
		//log.debug "result: " + issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")
		if(transitionCheckValue.toString().equals("Yes")){
			log.debug "return true - transitionCheck = Yes"
			return true
		}else{
			def wList = new ArrayList()

			if(issueWarningEmptyQuoteRateCustomer.size() &gt; 0){
				def wListConfirmEmptyRate = new ArrayList()
				wListConfirmEmptyRate.add("W")
				wListConfirmEmptyRate.add("CUSTOMER_CONFIRM_EMPTY_RATES")
				wListConfirmEmptyRate.add(null)
				wListConfirmEmptyRate.add(issueWarningEmptyQuoteRateCustomer)

				wList.add(wListConfirmEmptyRate)
			}

			if(issueWarningEmptyQuoteMatCustomer.size() &gt; 0){
				def wListConfirmEmptyMatQuote = new ArrayList()
				wListConfirmEmptyMatQuote.add("W")
				wListConfirmEmptyMatQuote.add("CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE")
				wListConfirmEmptyMatQuote.add(null)
				wListConfirmEmptyMatQuote.add(issueWarningEmptyQuoteMatCustomer)

				wList.add(wListConfirmEmptyMatQuote)
			}
			
			if(warningsMatLinkedIssues.size() &gt; 0){
                for(obj in warningsMatLinkedIssues){
                    def wListConfirmEmptyMatQuote = new ArrayList()
                    wListConfirmEmptyMatQuote.add("W")
                    wListConfirmEmptyMatQuote.add("CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE")
                    wListConfirmEmptyMatQuote.add(obj[0])
                    wListConfirmEmptyMatQuote.add(obj[1])

                    wList.add(wListConfirmEmptyMatQuote)
                }
            }
            
            if(warningsRateLinkedIssues.size() &gt; 0){
                for(obj in warningsRateLinkedIssues){
                    def wListConfirmEmptyRate = new ArrayList()
                    wListConfirmEmptyRate.add("W")
                    wListConfirmEmptyRate.add("CUSTOMER_CONFIRM_EMPTY_RATES")
                    wListConfirmEmptyRate.add(obj[0])
                    wListConfirmEmptyRate.add(obj[1])

                    wList.add(wListConfirmEmptyRate)
                }
            }

			output.add(wList)
            throw new InvalidInputException('{"W":"' + output.toString() + '"}')
			//throw new InvalidInputException("W", output.toString())   
		}

	}
	if(errors &amp;&amp; !warnings){
		def eList = new ArrayList()

		output.add(eList)
        throw new InvalidInputException('{"E":"' + output.toString() + '"}')
		//throw new InvalidInputException("E", output.toString())   
	}
	if(errors &amp;&amp; warnings){
		def eList = new ArrayList()
		def wList = new ArrayList()

		if(issueWarningEmptyQuoteRateCustomer.size() &gt; 0){
			def wListConfirmEmptyRate = new ArrayList()
			wListConfirmEmptyRate.add("W")
			wListConfirmEmptyRate.add("CUSTOMER_CONFIRM_EMPTY_RATES")
			wListConfirmEmptyRate.add(null)
			wListConfirmEmptyRate.add(issueWarningEmptyQuoteRateCustomer)

			wList.add(wListConfirmEmptyRate)
		}

		if(issueWarningEmptyQuoteMatCustomer.size() &gt; 0){
			def wListConfirmEmptyMatQuote = new ArrayList()
			wListConfirmEmptyMatQuote.add("W")
			wListConfirmEmptyMatQuote.add("CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE")
			wListConfirmEmptyMatQuote.add(null)
			wListConfirmEmptyMatQuote.add(issueWarningEmptyQuoteMatCustomer)

			wList.add(wListConfirmEmptyMatQuote)
		}
		
		if(warningsMatLinkedIssues.size() &gt; 0){
			for(obj in warningsMatLinkedIssues){
				def wListConfirmEmptyMatQuote = new ArrayList()
				wListConfirmEmptyMatQuote.add("W")
				wListConfirmEmptyMatQuote.add("CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE")
				wListConfirmEmptyMatQuote.add(obj[0])
				wListConfirmEmptyMatQuote.add(obj[1])

				wList.add(wListConfirmEmptyMatQuote)
			}
		}
		
		if(warningsRateLinkedIssues.size() &gt; 0){
			for(obj in warningsRateLinkedIssues){
				def wListConfirmEmptyRate = new ArrayList()
				wListConfirmEmptyRate.add("W")
				wListConfirmEmptyRate.add("CUSTOMER_CONFIRM_EMPTY_RATES")
				wListConfirmEmptyRate.add(obj[0])
				wListConfirmEmptyRate.add(obj[1])

				wList.add(wListConfirmEmptyRate)
			}
		}

		output.add(eList)
		output.add(wList)
        throw new InvalidInputException('{"WE":"' + output.toString() + '"}')
		//throw new InvalidInputException("WE", output.toString())  
	}
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">4ff179ac-14f3-424d-9faa-d832d37c527a</arg>
              <arg name="FIELD_NOTES">Create SN &amp; SO for old tickets</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef SN =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_NOTIFICATION\")[0]\ndef SO =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_ORDER\")[0]\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\ndef body_req = []\ndef output = new ArrayList()\ndef eList = new ArrayList()\ndef eListErrors = new ArrayList()\ndef errorMsgs = new ArrayList()\n\nif(issue.getCustomFieldValue(SN) == null &amp;&amp; issue.issueType.name != \"Planned Maintenance Ticket\"){\n    requestMethod = \"POST\";\n    body_req = [\n        \"issueKey\": issue.key,\n        \"status\": \"OPE\"\n    ] \n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n    log.debug \"baseURL SN: \" + baseURL\n    log.debug \"body_req SN: \" + body_req\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n    \n    if (!connection.getResponseCode().toString().equals(\"201\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        \n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n        log.debug \"errors: \" +  json_object.errors.toString()\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-SAP-SN-UPDATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }else{\n        /** SERVICE ORDER CREATION **/\n        body_req = [\n            \"issueKey\": issue.key\n        ] \n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\n\n        log.debug \"baseURL SO: \" + baseURL\n        log.debug \"body_req SO: \" + body_req\n        url = new URL(baseURL)\n        connection = (HttpURLConnection)url.openConnection();\n        connection.setRequestMethod(requestMethod);\n        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n        connection.setRequestProperty(\"Accept\", \"*/*\");\n        connection.setDoOutput(true);\n        connection.setDoInput(true);\n        connection.outputStream\n        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n        log.debug connection.outputStream\n        connection.connect();\n\n        output = new ArrayList()\n        eList = new ArrayList()\n        eListErrors = new ArrayList()\n        errorMsgs = new ArrayList()\n\n        if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n            log.debug \"url: \" + url\n            log.debug \"ResponseCode:\" + connection.getResponseCode()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n            \n            def outputMsg = ((HttpURLConnection)connection).errorStream.text\n    \t\tlog.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n            \n            def jsonSlurper = new JsonSlurper()\n            def json_object = jsonSlurper.parseText(outputMsg)\n            assert json_object instanceof Map  \n            log.debug \"message: \" +  json_object.message\n            log.debug \"errors: \" +  json_object.errors.toString()\n            \n            eListErrors.add(\"E\")\n            eListErrors.add(\"OP-SAP-SO-CREATE\")\n            errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n            eListErrors.add(errorMsgs)\n            eList.add(eListErrors)\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        }\n    }\n}else{\n    if(issue.getCustomFieldValue(SN) != null &amp;&amp; issue.getCustomFieldValue(SO) == null &amp;&amp; issue.issueType.name != \"Planned Maintenance Ticket\"){\n        /** SERVICE ORDER CREATION **/\n        requestMethod = \"POST\";\n        body_req = [\n            \"issueKey\": issue.key\n        ] \n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\n\n        log.debug \"baseURL SO: \" + baseURL\n        log.debug \"body_req SO: \" + body_req\n        url = new URL(baseURL)\n        connection = (HttpURLConnection)url.openConnection();\n        connection.setRequestMethod(requestMethod);\n        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n        connection.setRequestProperty(\"Accept\", \"*/*\");\n        connection.setDoOutput(true);\n        connection.setDoInput(true);\n        connection.outputStream\n        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n        log.debug connection.outputStream\n        connection.connect();\n\n        output = new ArrayList()\n        eList = new ArrayList()\n        eListErrors = new ArrayList()\n        errorMsgs = new ArrayList()\n\n        if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n            log.debug \"url: \" + url\n            log.debug \"ResponseCode:\" + connection.getResponseCode()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n            \n            def outputMsg = ((HttpURLConnection)connection).errorStream.text\n    \t\tlog.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n            \n            def jsonSlurper = new JsonSlurper()\n            def json_object = jsonSlurper.parseText(outputMsg)\n            assert json_object instanceof Map  \n            log.debug \"message: \" +  json_object.message\n            log.debug \"errors: \" +  json_object.errors.toString()\n            \n            eListErrors.add(\"E\")\n            eListErrors.add(\"OP-SAP-SO-CREATE\")\n            errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n            eListErrors.add(errorMsgs)\n            eList.add(eListErrors)\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        }\n    }\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">¿x{né®táÝÜs¾úmÞ\×§w}þuñ÷õÝ¾</arg>
              <arg name="FIELD_NOTES">OP: REST API: OP generazione ODV su SAP</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.opensymphony.workflow.WorkflowException;\nimport com.opensymphony.workflow.InvalidInputException\nimport groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport groovyx.net.http.HTTPBuilder\nimport com.atlassian.jira.issue.link.IssueLink\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nCategory log = Category.getInstance(\"com.onresolve.jira.groovy.PostFunction\")\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\n\ndef requestMethod = \"POST\"\n\ndef relatesInIssueLink=false\ndef relatesOutIssueLink=false\ndef linkedTickets=new ArrayList()\n\nList&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            relatesInIssueLink=true\n            linkedTickets.add(issueLink.getSourceObject().toString())\n            log.debug \"Issue con relatesInIssueLink\"\n        }\n    }\n    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            relatesOutIssueLink=true\n            linkedTickets.add(issueLink.getDestinationObject().toString())\n            log.debug \"Issue con relatesOutIssueLink\"\n        }\n    }\n\n/* REST API per Invio Notifica Email ONSITE_REPORT */\ndef body_req\n\nif(relatesInIssueLink || relatesOutIssueLink){\n    body_req = [\n        \"issueKey\": issue.key,\n        \"linkedTickets\": linkedTickets\n    ]\n}else{\n    body_req = [\n        \"issueKey\": issue.key\n    ]\n}\n\ndef baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/sales/order/create\"\nlog.debug baseURL\nURL url = new URL(baseURL)\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.outputStream\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\nlog.debug connection.outputStream\nconnection.connect();\n\ndef output = new ArrayList()\ndef eList = new ArrayList()\ndef eListErrors = new ArrayList()\ndef errorMsgs = new ArrayList()\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n    log.debug \"ErrorStream: \" + connection.getErrorStream().toString()\n    log.debug \"getHeaderFields(): \" + connection.getHeaderFields()\n    def outputMsg = ((HttpURLConnection)connection).errorStream.text\n    log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n    \n    def jsonSlurper = new JsonSlurper()\n    def json_object = jsonSlurper.parseText(outputMsg)\n    assert json_object instanceof Map  \n    log.debug \"message: \" +  json_object.message\n    \n    eListErrors.add(\"E\")\n    eListErrors.add(\"OP-SAP-ODV\")\n    errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0].toString())\n    eListErrors.add(errorMsgs)\n    eList.add(eListErrors)\n\n    output.add(eList)\n    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    //throw new InvalidInputException(\"E\", output.toString())\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="FIELD_INLINE_SCRIPT">import com.opensymphony.workflow.WorkflowException;
import com.opensymphony.workflow.InvalidInputException
import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import org.apache.log4j.Category
import groovyx.net.http.HTTPBuilder
import com.atlassian.jira.issue.link.IssueLink
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();


def requestMethod = "POST"

def relatesInIssueLink=false
def relatesOutIssueLink=false
def linkedTickets=new ArrayList()

List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            relatesInIssueLink=true
            linkedTickets.add(issueLink.getSourceObject().toString())
            log.debug "Issue con relatesInIssueLink"
        }
    }
    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            relatesOutIssueLink=true
            linkedTickets.add(issueLink.getDestinationObject().toString())
            log.debug "Issue con relatesOutIssueLink"
        }
    }

/* REST API per Invio Notifica Email ONSITE_REPORT */
def body_req

if(relatesInIssueLink || relatesOutIssueLink){
    body_req = [
        "issueKey": issue.key,
        "linkedTickets": linkedTickets
    ]
}else{
    body_req = [
        "issueKey": issue.key
    ]
}

def baseURL = "http://" + properties['api.env'].toString() + "/op/rest/jira/AA/sales/order/create"
log.debug baseURL
URL url = new URL(baseURL)
HttpURLConnection connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.outputStream
connection.outputStream.withWriter("UTF-8") { new StreamingJsonBuilder(it, body_req) }
log.debug connection.outputStream
connection.connect();

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()
    log.debug "ErrorStream: " + connection.getErrorStream().toString()
    log.debug "getHeaderFields(): " + connection.getHeaderFields()
    def outputMsg = ((HttpURLConnection)connection).errorStream.text
    log.debug "((HttpURLConnection)connection).errorStream.text: " + outputMsg
    
    def jsonSlurper = new JsonSlurper()
    def json_object = jsonSlurper.parseText(outputMsg)
    assert json_object instanceof Map  
    log.debug "message: " +  json_object.message
    
    eListErrors.add("E")
    eListErrors.add("OP-SAP-ODV")
    errorMsgs.add(connection.getResponseCode() + " " + json_object.message)
    eListErrors.add(errorMsgs)
    eList.add(eListErrors)

    output.add(eList)
    throw new InvalidInputException('{"E":"' + output.toString() + '"}')
    //throw new InvalidInputException("E", output.toString())
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_ACTION">181 Tkt Chiuso</arg>
                  <arg name="FIELD_NOTES">OP: Close tkt if ODV and ODA have been created</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.FasttrackTransition</arg>
                  <arg name="FIELD_CONDITION">cfValues['OP_PURCHASE_ORDER'] != null &amp;&amp; cfValues['OP_PURCHASE_ORDER_DATE'] != null &amp;&amp; cfValues['OP_PURCHASE_ORDER_TOTAL'] != null|||</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_TRANSITION_OPTIONS" />
                  <arg name="FIELD_ADDITIONAL_SCRIPT">`!`</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="171" name="ODA" view="fieldscreen">
          <meta name="opsbar-sequence">50</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19908</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">edf645c7-f017-4c6b-a509-5be062f0a1cd</arg>
                <arg name="FIELD_NOTES">Maintenance Tkt OR PM Ticket - AND Supplier NOT NULL</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"import com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\ndef supplier = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplier'].toString())\ndef trovato = false\n\nfor (s in supplier){\n    if (issue.getCustomFieldValue(s) != null){\n        trovato = true\n    }\n}\n(issue.issueType.name == 'Maintenance Ticket' || issue.issueType.name == 'Planned Maintenance Ticket') &amp;&amp; trovato == true","scriptPath":null,"parameters":{}}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
              <condition type="class">
                <arg name="FIELD_NOTES">OP: Check OP_PURCHASE_ORDER_DATE - If not null - transition has already been executed</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
cfValues[properties['cf.purchaseOrderDate']] == null &amp;&amp; cfValues[properties['cf.wfPurchaseOrderToS']] == null|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
              <condition type="class">
                <arg name="FIELD_NOTES">OP: Check OPAA_AUTOMATICALLY_CLOSED - if Yes don't allow transition</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
cfValues[properties['cf.automaticallyClosed']] == null || cfValues[properties['cf.automaticallyClosed']]?.value == 'No'|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">ЭО{Ы]Ы‡5ЧfЬ}э6Сп:ЯMwбНiэхs~w</arg>
              <arg name="FIELD_NOTES">OP: Check Required Fields - solo errors, no warnings</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper\nimport groovy.json.JsonBuilder\nimport groovy.json.StreamingJsonBuilder\n\nimport com.atlassian.jira.issue.CustomFieldManager\nimport com.atlassian.jira.issue.fields.CustomField\nimport com.atlassian.jira.issue.IssueManager\nimport com.atlassian.jira.component.ComponentAccessor\nimport com.atlassian.jira.issue.Issue\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.issue.link.IssueLink\n\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\n\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\n//Per test da console\n//IssueManager issueManager = ComponentAccessor.getIssueManager();\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-3985\")\n\ndef errors = false\ndef warnings = false\ndef relatesInIssueLink=false\ndef relatesOutIssueLink=false\ndef wListConfirmEmptyMatQuoteLinked = new ArrayList()\ndef wListConfirmEmptyRateQuoteLinked = new ArrayList()\n\ndef lumpSumPrice =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumPrice'].toString())[0]\n\n/*Campi con dati obbligatori per ticket non a corpo*/\ndef repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.replacedMaterials'].toString())[0]\ndef unaTantumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.unatantumRates'].toString())[0]\ndef labourRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.labourRates'].toString())[0]\ndef travelRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.travelRates'].toString())[0]\n\n/*Campi con dati obbligatori per ticket a corpo*/\ndef lumpSumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumRates'].toString())[0]\n\n/*Conferma utente su warnings*/\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]\nlog.debug \"transitionCheck: \" + issue.getCustomFieldValue(transitionCheck)\n/*Insight Schema IDs*/\ndef DBObjects = properties['ischema.dbo'].toString() + \"-\"\ndef OPAA = properties['ischema.aa'].toString() + \"-\"\ndef DO = properties['ischema.dbo'].toString() + \"-\"\n\n/*Array warnings ed errors per la issue principale, uno per ogni tipologia di errore o warning*/\ndef issueWarningEmptyQuoteMatSupplier = new ArrayList()\ndef issueWarningEmptyQuoteRateSupplier = new ArrayList()\n//def issueError...\n\nif(issue.getCustomFieldValue(transitionCheck)==null || !issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")){\n    /*Verifica campi su ticket oggetto della transazione*/\n    if(issue.getCustomFieldValue(lumpSumPrice)!=null &amp;&amp; issue.getCustomFieldValue(lumpSumPrice).toString().equals(\"Yes\")){\n        /*Contabilizzazione a corpo*/\n        log.debug \"Contabilizzazione a corpo\"\n        //OPAA_LUMP_SUM_RATES\n        if(issue.getCustomFieldValue(lumpSumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(lumpSumRates) != \"\" &amp;&amp; !issue.getCustomFieldValue(lumpSumRates).toString().equals(\"\")){\n            /*Ciclare tutti gli oggetti associati al campo*/\n            //insight classes &amp; components\n            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n            def lsRatesList = issue.getCustomFieldValue(lumpSumRates)\n\n            for(ls in lsRatesList){\n                //extract insight key ang get object\n                def lsRate=ls.toString()\n                def lsRateKey = lsRate.substring(lsRate.indexOf('(')+1,lsRate.indexOf(')'))\n                def lsRateObject = objectFacade.loadObjectBean(lsRateKey)\n                //get \"DELETED\" for that that rate\n                def lsDel = objectFacade.loadObjectAttributeBean(lsRate.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(lsRate.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : \"\"\n                def lsDelValue = lsDel != \"\" ? lsDel.substring(lsDel.indexOf('(')+1,lsDel.indexOf(')')) : \"\"\n\n                //get \"APPLIED_TO\" for that rate\n                def lsAppliedTo = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()\n                def lsAppliedToValue\n                if (lsAppliedTo){\n                    lsAppliedToValue = lsAppliedTo.substring(lsAppliedTo.indexOf('(')+1,lsAppliedTo.indexOf(')'))\n                }\n\n                def lsRateRef = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()\n\n                def lsRateRefKey\n                def lsRateRefValue\n                if(lsRateRef.size() &gt; 0){\n                    lsRateRef = lsRateRef.toString()\n                    lsRateRefKey = lsRateRef.substring(lsRateRef.indexOf('(')+1,lsRateRef.indexOf(')'))\n                    def lsRateRefObject = objectFacade.loadObjectBean(DO + lsRateRefKey)\n                    lsRateRefValue = objectFacade.loadObjectAttributeBean(lsRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()\n                    lsRateRefValue = lsRateRefValue.substring(lsRateRefValue.indexOf('(')+1,lsRateRefValue.indexOf(')'))\n                }\n\n                if((lsAppliedToValue.toString().equals(\"BOTH\") || lsAppliedToValue.toString().equals(\"SUPPLIER\")) &amp;&amp; !lsDelValue.equals(\"true\")){\n                    //get \"TOTAL_AMOUNT_SUPPLIER\" for that component\n                    def totSupplier\n                    if(objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString())){\n                        totSupplier = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()\n                    }\n                    if(!totSupplier || totSupplier[0].getValue().toString().equals(\"0.0\")){\n                        warnings=true\n                        issueWarningEmptyQuoteRateSupplier.add(lsRateRefValue.toString())\n                        log.debug issue.key.toString() + \" issueWarningEmptyQuoteRateSupplier: \" + issueWarningEmptyQuoteRateSupplier\n                    }\n                }\n            }    \n        }\n\n    }else{\n        /*Contabilizzazione non a corpo*/\n        log.debug \"Contabilizzazione NON a corpo\"\n\n        //OPAA_REPLACED_MATERIALS\n        if(issue.getCustomFieldValue(repMaterials)!=null &amp;&amp; (String)issue.getCustomFieldValue(repMaterials) != \"\" &amp;&amp; !issue.getCustomFieldValue(repMaterials).toString().equals(\"\")){\n            //log.debug \"Materiali: \" + issue.getCustomFieldValue(repMaterials)\n            /*Ciclare tutti gli oggetti associati al campo*/\n            //insight classes &amp; components\n            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n            def repMatList = issue.getCustomFieldValue(repMaterials)\n\n            for(mat in repMatList){\n                //extract insight key ang get object\n                def component=mat.toString()\n                def componentKey = component.substring(component.indexOf('('+OPAA)+1,component.length()-1)\n                def componentObject = objectFacade.loadObjectBean(componentKey)\n                //get \"DELETED\" for that component\n                def matDel = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : \"\"\n                def matDelValue = matDel != \"\" ? matDel.substring(matDel.indexOf('(')+1,matDel.indexOf(')')) : \"\"\n\n\n                //get \"APPLIED_TO\" for that component\n                def appliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans() as ArrayList\n                def appliedToValue\n                if(appliedTo.size() &gt; 0){\n                    appliedTo = appliedTo.toString()\n                    appliedToValue = appliedTo.substring(appliedTo.indexOf('(')+1,appliedTo.indexOf(')'))\n                    //log.debug \"appliedToValue: \" + appliedToValue\n                }\n\n                def matNumber\n                def matNumberKey\n                def matNumberValue\n                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString())){\n                    matNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).getObjectAttributeValueBeans() as ArrayList\n                    if(matNumber.size() &gt; 0){\n                        matNumber = matNumber.toString()\n                        matNumberKey = matNumber.substring(matNumber.indexOf('(')+1,matNumber.indexOf(')'))\n                        def matNumberObject = objectFacade.loadObjectBean(DBObjects + matNumberKey)\n                        matNumberValue = objectFacade.loadObjectAttributeBean(matNumberObject.getId(), properties['iobj.material.name'].toString()).getObjectAttributeValueBeans().toString()\n                        matNumberValue = matNumberValue.substring(matNumberValue.indexOf('(')+1,matNumberValue.indexOf(')'))\n                    }\n                }\n\n                def serialNumber\n                def serialNumberValue\n                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString())){\n                    serialNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()).getObjectAttributeValueBeans() as ArrayList\n                    if(serialNumber.size() &gt; 0){\n                        serialNumber = serialNumber.toString()\n                        serialNumberValue = serialNumber.substring(serialNumber.indexOf('(')+1,serialNumber.indexOf(')'))\n                    }               \n                }\n\n                if((appliedToValue.toString().equals(\"BOTH\") || appliedToValue.toString().equals(\"SUPPLIER\")) &amp;&amp; !matDelValue.equals(\"true\")){\n                    //get \"TOTAL_AMOUNT_SUPPLIER\" for that component\n                    def totSupplier\n                    if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString())){\n                        totSupplier = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString()).getObjectAttributeValueBeans()\n                    }\n                    if(!totSupplier || totSupplier[0].getValue().toString().equals(\"0.0\")){\n                        warnings=true\n                        issueWarningEmptyQuoteMatSupplier.add(matNumberValue.toString() + (!serialNumber.toString().equals(\"[]\") ? \" (\" + (serialNumberValue ? serialNumberValue.toString() : \"\") + \")\" : \" ()\"))\n                        log.debug issue.key.toString() + \" issueWarningEmptyQuoteMatSupplier: \" + issueWarningEmptyQuoteMatSupplier\n                    }\n                }\n            }    \n        }  \n\n        //OPAA_UNATANTUM_RATES\n        if(issue.getCustomFieldValue(unaTantumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(unaTantumRates) != \"\" &amp;&amp; !issue.getCustomFieldValue(unaTantumRates).toString().equals(\"\")){\n            log.debug \"Una tantum rates: \" + issue.getCustomFieldValue(unaTantumRates)\n            /*Ciclare tutti gli oggetti associati al campo*/\n            //insight classes &amp; components\n            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n            def umRatesList = issue.getCustomFieldValue(unaTantumRates)\n\n            for(um in umRatesList){\n                //extract insight key ang get object\n                def umRate=um.toString()\n                def umRateKey = umRate.substring(umRate.indexOf('(')+1,umRate.indexOf(')'))\n                def umRateObject = objectFacade.loadObjectBean(umRateKey)\n\n                def umDel = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : \"\"\n                def umDelValue = umDel != \"\" ? umDel.substring(umDel.indexOf('(')+1,umDel.indexOf(')')) : \"\"\n\n                //get \"APPLIED_TO\" for that rate\n                def umAppliedTo = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()\n                def umAppliedToValue = umAppliedTo.substring(umAppliedTo.indexOf('(')+1,umAppliedTo.indexOf(')'))\n\n                def umRateRef\n                if(objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){\n                    umRateRef=objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()\n                }\n\n                def umRateRefKey\n                def umRateRefValue\n                if(umRateRef){\n                    umRateRef = umRateRef.toString()\n                    umRateRefKey = umRateRef.substring(umRateRef.lastIndexOf('(')+1,umRateRef.lastIndexOf(')'))\n                    log.debug \"umRateRefKey: \" + umRateRefKey\n                    def umRateRefObject = objectFacade.loadObjectBean(DO + umRateRefKey)\n                    log.debug \"umRateRefObject: \" + umRateRefObject\n                    umRateRefValue = objectFacade.loadObjectAttributeBean(umRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()\n                    umRateRefValue = umRateRefValue.substring(umRateRefValue.indexOf('(')+1,umRateRefValue.indexOf(')'))\n                }\n\n                if((umAppliedToValue.toString().equals(\"BOTH\") || umAppliedToValue.toString().equals(\"SUPPLIER\")) &amp;&amp; !umDelValue.equals(\"true\")){\n                    //get \"TOTAL_AMOUNT_SUPPLIER\" for that component\n                    def totSupplier\n                    if(objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString())){\n                        totSupplier = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()\n                    }\n                    if(!totSupplier || totSupplier[0].getValue().toString().equals(\"0.0\")){\n                        warnings=true\n                        issueWarningEmptyQuoteRateSupplier.add(umRateRefValue.toString())\n                        log.debug issue.key.toString() + \" issueWarningEmptyQuoteRateSupplier: \" + issueWarningEmptyQuoteRateSupplier\n                    }\n                }\n            }    \n        }\n\n        //OPAA_LABOUR_RATES\n        if(issue.getCustomFieldValue(labourRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(labourRates) != \"\" &amp;&amp; !issue.getCustomFieldValue(labourRates).toString().equals(\"\")){\n            log.debug \"Labour rates: \" + issue.getCustomFieldValue(labourRates)\n            /*Ciclare tutti gli oggetti associati al campo*/\n            //insight classes &amp; components\n            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n            def labourRatesList = issue.getCustomFieldValue(labourRates)\n\n            for(lb in labourRatesList){\n                //extract insight key ang get object\n                def lbRate=lb.toString()\n                def lbRateKey = lbRate.substring(lbRate.indexOf('(')+1,lbRate.indexOf(')'))\n                def lbRateObject = objectFacade.loadObjectBean(lbRateKey)\n                log.debug \"lbRateObject: \" + lbRateObject\n                //get \"DELETED\" for that rate\n                def lbDel = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : \"\"\n                def lbDelValue = lbDel != \"\" ? lbDel.substring(lbDel.indexOf('(')+1,lbDel.indexOf(')')) : \"\"\n\n                //get \"APPLIED_TO\" for that rate\n                def lbAppliedTo = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()\n                def lbAppliedToValue = lbAppliedTo.substring(lbAppliedTo.indexOf('(')+1,lbAppliedTo.indexOf(')'))\n\n                def lbRateRef\n                if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){\n                    lbRateRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()\n                }\n\n                def techRef\n                if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.technicianRef'].toString())){\n                    techRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.technicianRef'].toString()).getObjectAttributeValueBeans().toString()\n                }\n                log.debug \"techRef: \" + techRef\n                def lbRateRefKey\n                def lbRateRefValue\n                if(lbRateRef.size() &gt; 0){\n                    lbRateRef = lbRateRef.toString()\n                    lbRateRefKey = lbRateRef.substring(lbRateRef.indexOf('(')+1,lbRateRef.indexOf(')'))\n                    def lbRateRefObject = objectFacade.loadObjectBean(DO + lbRateRefKey)\n                    lbRateRefValue = objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()\n                    lbRateRefValue = lbRateRefValue.substring(lbRateRefValue.indexOf('(')+1,lbRateRefValue.indexOf(')'))\n                }\n\n                def techRefKey\n                def techRefValue\n                log.debug \"techRef: \" + techRef\n                if(techRef){\n                    techRef = techRef.toString()\n                    log.debug \"techRef: \" + techRef\n                    techRefKey = techRef.substring(techRef.indexOf('(')+1,techRef.indexOf(')'))\n                    def techRefObject = objectFacade.loadObjectBean(OPAA + techRefKey)\n                    log.debug \"techRefObject: \" + techRefObject\n                    techRefValue = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()\n                    techRefValue = techRefValue.substring(techRefValue.indexOf('(')+1,techRefValue.indexOf(')'))\n                    log.debug \"techRefValue: \" + techRefValue\n                }\n\n                if((lbAppliedToValue.toString().equals(\"BOTH\") || lbAppliedToValue.toString().equals(\"SUPPLIER\")) &amp;&amp; !lbDelValue.equals(\"true\")){\n                    //get \"TOTAL_AMOUNT_SUPPLIER\" for that component\n                    def totSupplier\n                    if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString())){\n                        totSupplier = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()\n                    }\n                    if(!totSupplier || totSupplier[0].getValue().toString().equals(\"0.0\")){\n                        warnings=true\n                        issueWarningEmptyQuoteRateSupplier.add(lbRateRefValue.toString() + \" (\" + techRefValue.toString() + \")\")\n                        log.debug issue.key.toString() + \" issueWarningEmptyQuoteRateSupplier: \" + issueWarningEmptyQuoteRateSupplier\n                    }\n                }\n            }    \n        }\n\n        //OPAA_TRAVEL_RATES\n        if(issue.getCustomFieldValue(travelRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(travelRates) != \"\" &amp;&amp; !issue.getCustomFieldValue(travelRates).toString().equals(\"\")){\n            log.debug \"Travel rates: \" + issue.getCustomFieldValue(travelRates)\n            /*Ciclare tutti gli oggetti associati al campo*/\n            //insight classes &amp; components\n            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n            def travelRatesList = issue.getCustomFieldValue(travelRates)\n\n            for(tr in travelRatesList){\n                //extract insight key ang get object\n                def trRate=tr.toString()\n                def trRateKey = trRate.substring(trRate.indexOf('(')+1,trRate.indexOf(')'))\n                def trRateObject = objectFacade.loadObjectBean(trRateKey)\n\n                def trDel = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : \"\"\n                def trDelValue = trDel != \"\" ? trDel.substring(trDel.indexOf('(')+1,trDel.indexOf(')')) : \"\"\n\n                //get \"APPLIED_TO\" for that rate\n                def trAppliedTo = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()\n                def trAppliedToValue = trAppliedTo.substring(trAppliedTo.indexOf('(')+1,trAppliedTo.indexOf(')'))\n\n                def trRateRef\n                if(objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){\n                    trRateRef=objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()\n                }\n\n                def trRateRefKey\n                def trRateRefValue\n                if(trRateRef.size() &gt; 0){\n                    trRateRef = trRateRef.toString()\n                    trRateRefKey = trRateRef.substring(trRateRef.indexOf('(')+1,trRateRef.indexOf(')'))\n                    def trRateRefObject = objectFacade.loadObjectBean(DO + trRateRefKey)\n                    trRateRefValue = objectFacade.loadObjectAttributeBean(trRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()\n                    trRateRefValue = trRateRefValue.substring(trRateRefValue.indexOf('(')+1,trRateRefValue.indexOf(')'))\n                }\n\n                if((trAppliedToValue.toString().equals(\"BOTH\") || trAppliedToValue.toString().equals(\"SUPPLIER\")) &amp;&amp; !trDelValue.equals(\"true\")){\n                    //get \"TOTAL_AMOUNT_SUPPLIER\" for that component\n                    def totSupplier\n                    if(objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString())){\n                        totSupplier=objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()\n                    }\n                    if(!totSupplier || totSupplier[0].getValue().toString().equals(\"0.0\")){\n                        warnings=true\n                        issueWarningEmptyQuoteRateSupplier.add(trRateRefValue.toString())\n                        log.debug issue.key.toString() + \" issueWarningEmptyQuoteRateSupplier: \" + issueWarningEmptyQuoteRateSupplier\n                    }\n                }\n            }    \n        }\n\n    }\n\n    def linkedTickets=new ArrayList()\n\n    /*OP-1038: verifica ticket collegati -  e su ciascuno verifica campi obbligatori*/\n    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            relatesInIssueLink=true\n            linkedTickets.add(issueLink.getSourceObject())\n            log.debug \"Issue con relatesInIssueLink\"\n        }\n    }\n    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            relatesOutIssueLink=true\n            linkedTickets.add(issueLink.getDestinationObject())\n            log.debug \"Issue con relatesOutIssueLink\"\n        }\n    }\n\n    /*Array warnings ed errors per le issue linkate, uno per ogni tipologia di errore o warning*/\n    def warningsMatLinkedIssues = new ArrayList()\n    def warningsRateLinkedIssues = new ArrayList()\n    //def errorsLinkedIssues = new ArrayList()\n\n    for(i in linkedTickets){\n        issue=i as Issue\n\n        /*Array warnings ed errors per la singola issue linkata, uno per ogni tipologia di errore o warning*/\n        def warningEmptyQuoteRateSupplier = new ArrayList()\n        def warningEmptyQuoteMatSupplier = new ArrayList() \n        //def error...\n\n        if(issue.getCustomFieldValue(lumpSumPrice)!=null &amp;&amp; issue.getCustomFieldValue(lumpSumPrice).toString().equals(\"Yes\")){\n            /*Contabilizzazione a corpo*/\n            log.debug \"Contabilizzazione a corpo\"\n            //OPAA_LUMP_SUM_RATES\n            if(issue.getCustomFieldValue(lumpSumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(lumpSumRates) != \"\" &amp;&amp; !issue.getCustomFieldValue(lumpSumRates).toString().equals(\"\")){\n                /*Ciclare tutti gli oggetti associati al campo*/\n                //insight classes &amp; components\n                Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n                Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n                def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n                def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n                def lsRatesList = issue.getCustomFieldValue(lumpSumRates)\n\n                for(ls in lsRatesList){\n                    //extract insight key ang get object\n                    def lsRate=ls.toString()\n                    def lsRateKey = lsRate.substring(lsRate.indexOf('(')+1,lsRate.indexOf(')'))\n                    def lsRateObject = objectFacade.loadObjectBean(lsRateKey)\n                    //get \"DELETED\" for that component\n                    def lsDel = objectFacade.loadObjectAttributeBean(lsRate.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(lsRate.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : \"\"\n                    def lsDelValue = lsDel != \"\" ? lsDel.substring(lsDel.indexOf('(')+1,lsDel.indexOf(')')) : \"\"\n\n                    //get \"APPLIED_TO\" for that rate\n                    def lsAppliedTo = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()\n                    def lsAppliedToValue\n                    if (lsAppliedTo){\n                        lsAppliedToValue = lsAppliedTo.substring(lsAppliedTo.indexOf('(')+1,lsAppliedTo.indexOf(')'))\n                    }\n\n                    def lsRateRef = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()\n\n                    def lsRateRefKey\n                    def lsRateRefValue\n                    if(lsRateRef.size() &gt; 0){\n                        lsRateRef = lsRateRef.toString()\n                        lsRateRefKey = lsRateRef.substring(lsRateRef.indexOf('(')+1,lsRateRef.indexOf(')'))\n                        def lsRateRefObject = objectFacade.loadObjectBean(DO + lsRateRefKey)\n                        lsRateRefValue = objectFacade.loadObjectAttributeBean(lsRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()\n                        lsRateRefValue = lsRateRefValue.substring(lsRateRefValue.indexOf('(')+1,lsRateRefValue.indexOf(')'))\n                    }\n\n                    if((lsAppliedToValue.toString().equals(\"BOTH\") || lsAppliedToValue.toString().equals(\"SUPPLIER\")) &amp;&amp; !lsDelValue.equals(\"true\")){\n                        //get \"TOTAL_AMOUNT_SUPPLIER\" for that component\n                        def totSupplier\n                        if(objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString())){\n                            totSupplier = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()\n                        }\n                        if(!totSupplier || totSupplier[0].getValue().toString().equals(\"0.0\")){\n                            warnings=true    \n                            warningEmptyQuoteRateSupplier.add(lsRateRefValue.toString())\n                            log.debug issue.key.toString() + \" warningEmptyQuoteRateSupplier: \" + warningEmptyQuoteRateSupplier\n                        }\n                    }\n                }    \n            }\n\n        }else{\n            /*Contabilizzazione non a corpo*/\n            log.debug \"Contabilizzazione NON a corpo\"\n\n            //OPAA_REPLACED_MATERIALS\n            if(issue.getCustomFieldValue(repMaterials)!=null &amp;&amp; (String)issue.getCustomFieldValue(repMaterials) != \"\" &amp;&amp; !issue.getCustomFieldValue(repMaterials).toString().equals(\"\")){\n                log.debug \"Materiali: \" + issue.getCustomFieldValue(repMaterials)\n                /*Ciclare tutti gli oggetti associati al campo*/\n                //insight classes &amp; components\n                Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n                Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n                def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n                def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n                def repMatList = issue.getCustomFieldValue(repMaterials)\n\n                for(mat in repMatList){\n                    //extract insight key ang get object\n                    def component=mat.toString()\n                    def componentKey = component.substring(component.indexOf('('+OPAA)+1,component.length()-1)\n                    def componentObject = objectFacade.loadObjectBean(componentKey)\n                    //get \"DELETED\" for that component\n                    def matDel = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : \"\"\n                    def matDelValue = matDel != \"\" ? matDel.substring(matDel.indexOf('(')+1,matDel.indexOf(')')) : \"\"\n\n                    //get \"APPLIED_TO\" for that component\n                    def appliedTo\n                    def appliedToValue\n                    if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString())){\n                        appliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans() as ArrayList\n                        if(appliedTo.size() &gt; 0){\n                            appliedTo = appliedTo.toString()\n                            appliedToValue = appliedTo.substring(appliedTo.indexOf('(')+1,appliedTo.indexOf(')'))\n                            log.debug \"appliedToValue: \" + appliedToValue\n                        }\n                    }\n\n                    def matNumber\n                    def matNumberKey\n                    def matNumberValue\n                    if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString())){\n                        matNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).getObjectAttributeValueBeans() as ArrayList\n                        if(matNumber.size() &gt; 0){\n                            matNumber = matNumber.toString()\n                            matNumberKey = matNumber.substring(matNumber.indexOf('(')+1,matNumber.indexOf(')'))\n                            def matNumberObject = objectFacade.loadObjectBean(DBObjects + matNumberKey)\n                            matNumberValue = objectFacade.loadObjectAttributeBean(matNumberObject.getId(), properties['iobj.material.name'].toString()).getObjectAttributeValueBeans().toString()\n                            matNumberValue = matNumberValue.substring(matNumberValue.indexOf('(')+1,matNumberValue.indexOf(')'))\n                        }\n                    }\n\n                    def serialNumber\n                    def serialNumberValue\n                    if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString())){\n                        serialNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()).getObjectAttributeValueBeans() as ArrayList\n                        if(serialNumber.size() &gt; 0){\n                            serialNumber = serialNumber.toString()\n                            serialNumberValue = serialNumber.substring(serialNumber.indexOf('(')+1,serialNumber.indexOf(')'))\n                        }               \n                    }\n\n                    if(appliedToValue &amp;&amp; !matDelValue.equals(\"true\") &amp;&amp; (appliedToValue.toString().equals(\"BOTH\") || appliedToValue.toString().equals(\"SUPPLIER\"))){\n                        //get \"TOTAL_AMOUNT_SUPPLIER\" for that component\n                        log.debug \"AppliedTo verificato =&gt; \" + objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString())\n                        def totSupplier \n                        if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString())){\n                            totSupplier = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString()).getObjectAttributeValueBeans()\n                        }\n                        if(!totSupplier || totSupplier[0].getValue().toString().equals(\"0.0\")){\n                            warnings=true\n                            warningEmptyQuoteMatSupplier.add(matNumberValue.toString() + (!serialNumber.toString().equals(\"[]\") ? \" (\" + serialNumberValue.toString() + \")\" : \" ()\"))\n                            log.debug issue.key.toString() + \" warningEmptyQuoteMatSupplier: \"+ warningEmptyQuoteMatSupplier\n                        }\n                    }\n                }    \n            }  \n\n            //OPAA_UNATANTUM_RATES\n            if(issue.getCustomFieldValue(unaTantumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(unaTantumRates) != \"\" &amp;&amp; !issue.getCustomFieldValue(unaTantumRates).toString().equals(\"\")){\n                log.debug \"Una tantum rates: \" + issue.getCustomFieldValue(unaTantumRates)\n                /*Ciclare tutti gli oggetti associati al campo*/\n                //insight classes &amp; components\n                Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n                Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n                def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n                def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n                def umRatesList = issue.getCustomFieldValue(unaTantumRates)\n\n                for(um in umRatesList){\n                    //extract insight key ang get object\n                    def umRate=um.toString()\n                    def umRateKey = umRate.substring(umRate.indexOf('(')+1,umRate.indexOf(')'))\n                    def umRateObject = objectFacade.loadObjectBean(umRateKey)\n                    //get \"DELETED\" for that component\n                    def umDel = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(umRate.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : \"\"\n                    def umDelValue = umDel != \"\" ? umDel.substring(umDel.indexOf('(')+1,umDel.indexOf(')')) : \"\"\n\n                    //get \"APPLIED_TO\" for that rate\n                    def umAppliedTo = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()\n                    def umAppliedToValue = umAppliedTo.substring(umAppliedTo.indexOf('(')+1,umAppliedTo.indexOf(')'))\n\n                    def umRateRef\n                    if(objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){\n                        umRateRef=objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()\n                    }\n                    def techRef\n                    if(objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iboj.onSiteRateReport.technicianRef'].toString())){\n                        techRef=objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iboj.onSiteRateReport.technicianRef'].toString()).getObjectAttributeValueBeans().toString()\n                    }\n\n                    def umRateRefKey\n                    def umRateRefValue\n                    if(umRateRef){\n                        umRateRef = umRateRef.toString()\n                        umRateRefKey = umRateRef.substring(umRateRef.indexOf('(')+1,umRateRef.indexOf(')'))\n                        def umRateRefObject = objectFacade.loadObjectBean(DO + umRateRefKey)\n                        umRateRefValue = objectFacade.loadObjectAttributeBean(umRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()\n                        umRateRefValue = umRateRefValue.substring(umRateRefValue.indexOf('(')+1,umRateRefValue.indexOf(')'))\n                    }\n\n                    def techRefKey\n                    def techRefValue\n                    if(techRef){\n                        techRef = techRef.toString()\n                        log.debug \"techRef: \" + techRef\n                        techRefKey = techRef.substring(techRef.indexOf('(')+1,techRef.indexOf(')'))\n                        def umRateRefObject = objectFacade.loadObjectBean(DO + umRateRefKey)\n                        techRefValue = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()\n                        techRefValue = techRefValue.substring(techRefValue.indexOf('(')+1,techRefValue.indexOf(')'))\n                    }\n\n                    if((umAppliedToValue.toString().equals(\"BOTH\") || umAppliedToValue.toString().equals(\"SUPPLIER\")) &amp;&amp; !umDelValue.equals(\"true\")){\n                        //get \"TOTAL_AMOUNT_SUPPLIER\" for that component\n                        def totSupplier \n                        if(objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString())){\n                            totSupplier=objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()\n                        }\n                        if(!totSupplier || totSupplier[0].getValue().toString().equals(\"0.0\")){\n                            warnings=true\n                            warningEmptyQuoteRateSupplier.add(umRateRefValue.toString() + \" (\" + techRefValue.toString() + \")\")\n                            log.debug issue.key.toString() + \" warningEmptyQuoteRateSupplier: \" + warningEmptyQuoteRateSupplier\n                        }\n                    }\n                }    \n            }\n\n            //OPAA_LABOUR_RATES\n            if(issue.getCustomFieldValue(labourRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(labourRates) != \"\" &amp;&amp; !issue.getCustomFieldValue(labourRates).toString().equals(\"\")){\n                log.debug \"Labour rates: \" + issue.getCustomFieldValue(labourRates)\n                /*Ciclare tutti gli oggetti associati al campo*/\n                //insight classes &amp; components\n                Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n                Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n                def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n                def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n                def labourRatesList = issue.getCustomFieldValue(labourRates)\n\n                for(lb in labourRatesList){\n                    //extract insight key ang get object\n                    def lbRate=lb.toString()\n                    def lbRateKey = lbRate.substring(lbRate.indexOf('(')+1,lbRate.indexOf(')'))\n                    def lbRateObject = objectFacade.loadObjectBean(lbRateKey)\n                    //get \"DELETED\" for that component\n                    def lbDel = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(lbRate.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : \"\"\n                    def lbDelValue = lbDel != \"\" ? lbDel.substring(lbDel.indexOf('(')+1,lbDel.indexOf(')')) : \"\"\n\n                    //get \"APPLIED_TO\" for that rate\n                    def lbAppliedTo = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()\n                    def lbAppliedToValue = lbAppliedTo.substring(lbAppliedTo.indexOf('(')+1,lbAppliedTo.indexOf(')'))\n\n                    def lbRateRef = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()\n\n                    def techRef\n                    if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.technicianRef'].toString())){\n                        techRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.technicianRef'].toString()).getObjectAttributeValueBeans().toString()\n                    }\n\n                    def lbRateRefKey\n                    def lbRateRefValue\n                    if(lbRateRef.size() &gt; 0){\n                        lbRateRef = lbRateRef.toString()\n                        lbRateRefKey = lbRateRef.substring(lbRateRef.indexOf('(')+1,lbRateRef.indexOf(')'))\n                        def lbRateRefObject = objectFacade.loadObjectBean(DO + lbRateRefKey)\n                        lbRateRefValue = objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()\n                        lbRateRefValue = lbRateRefValue.substring(lbRateRefValue.indexOf('(')+1,lbRateRefValue.indexOf(')'))\n                    }\n\n                    def techRefKey\n                    def techRefValue\n                    if(techRef){\n                        techRef = techRef.toString()\n                        techRefKey = techRef.substring(techRef.indexOf('(')+1,techRef.indexOf(')'))\n                        def techRefObject = objectFacade.loadObjectBean(OPAA + techRefKey)\n                        techRefValue = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()\n                        techRefValue = lbRateRefValue.substring(techRefValue.indexOf('(')+1,techRefValue.indexOf(')'))\n                    }\n\n                    if((lbAppliedToValue.toString().equals(\"BOTH\") || lbAppliedToValue.toString().equals(\"SUPPLIER\")) &amp;&amp; !lbDelValue.equals(\"true\")){\n                        //get \"TOTAL_AMOUNT_SUPPLIER\" for that component\n                        def totSupplier \n                        if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString())){\n                            totSupplier = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()\n                        }\n                        if(!totSupplier || totSupplier[0].getValue().toString().equals(\"0.0\")){\n                            warnings=true\n                            warningEmptyQuoteRateSupplier.add(lbRateRefValue.toString())\n                            log.debug issue.key.toString() + \" warningEmptyQuoteRateSupplier: \" + warningEmptyQuoteRateSupplier\n                        }\n                    }\n                }    \n            }\n\n            //OPAA_TRAVEL_RATES\n            if(issue.getCustomFieldValue(travelRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(travelRates) != \"\" &amp;&amp; !issue.getCustomFieldValue(travelRates).toString().equals(\"\")){\n                log.debug \"Travel rates: \" + issue.getCustomFieldValue(travelRates)\n                /*Ciclare tutti gli oggetti associati al campo*/\n                //insight classes &amp; components\n                Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n                Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n                def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n                def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n                def travelRatesList = issue.getCustomFieldValue(travelRates)\n\n                for(tr in travelRatesList){\n                    //extract insight key ang get object\n                    def trRate=tr.toString()\n                    def trRateKey = trRate.substring(trRate.indexOf('(')+1,trRate.indexOf(')'))\n                    def trRateObject = objectFacade.loadObjectBean(trRateKey)\n                    //get \"DELETED\" for that component\n                    def trDel = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(trRate.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : \"\"\n                    def trDelValue = trDel != \"\" ? trDel.substring(trDel.indexOf('(')+1,trDel.indexOf(')')) : \"\"\n\n                    //get \"APPLIED_TO\" for that rate\n                    def trAppliedTo = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()\n                    def trAppliedToValue = trAppliedTo.substring(trAppliedTo.indexOf('(')+1,trAppliedTo.indexOf(')'))\n\n                    def trRateRef = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()\n\n                    def trRateRefKey\n                    def trRateRefValue\n                    if(trRateRef.size() &gt; 0){\n                        trRateRef = trRateRef.toString()\n                        trRateRefKey = trRateRef.substring(trRateRef.indexOf('(')+1,trRateRef.indexOf(')'))\n                        def trRateRefObject = objectFacade.loadObjectBean(DO + trRateRefKey)\n                        trRateRefValue = objectFacade.loadObjectAttributeBean(trRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()\n                        trRateRefValue = trRateRefValue.substring(trRateRefValue.indexOf('(')+1,trRateRefValue.indexOf(')'))\n                    }\n\n                    if((trAppliedToValue.toString().equals(\"BOTH\") || trAppliedToValue.toString().equals(\"SUPPLIER\")) &amp;&amp; !trDelValue.equals(\"true\")){\n                        //get \"TOTAL_AMOUNT_SUPPLIER\" for that component\n                        def totSupplier\n                        if(objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString())){\n                            totSupplier=objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()\n                        }\n                        if(!totSupplier || totSupplier[0].getValue().toString().equals(\"0.0\")){\n                            warnings=true\n                            warningEmptyQuoteRateSupplier.add(trRateRefValue.toString())\n                            log.debug issue.key.toString() + \" warningEmptyQuoteRateSupplier: \" + warningEmptyQuoteRateSupplier\n                        }\n                    }\n                }    \n            }\n\n        }\n\n        /*Verifico la presenza di errori e warning sulla issue corrente e, se presenti, li aggiungo agli array degli errori e warning delle issue linkate*/\n        if(warningEmptyQuoteMatSupplier.size()&gt;0){\n            def objList = new ArrayList()\n            objList.add(issue)\n            objList.add(warningEmptyQuoteMatSupplier)\n            warningsMatLinkedIssues.add(objList)\n        }\n\n        if(warningEmptyQuoteRateSupplier.size()&gt;0){\n            def objList = new ArrayList()\n            objList.add(issue)\n            objList.add(warningEmptyQuoteRateSupplier)\n            warningsRateLinkedIssues.add(objList)\n        }\n\n        //if(errors...)\n\n    }\n\n    log.debug \"warningsMatLinkedIssues: \" + warningsMatLinkedIssues\n    log.debug \"warningsRateLinkedIssues: \" + warningsRateLinkedIssues\n\n    def output = new ArrayList()\n\n    if (!errors &amp;&amp; !warnings){\n        return true\n    }else{\n        if(!errors &amp;&amp; warnings){\n            //Se ci sono solo warnings verifico se l'utente ha gi\u00e0 dichiarato di voler proseguire comunque\n            // - transition field \"OPAA_CHECK_AND_CONFIRM\"=\"Yes\"\n            // - in caso contrario invio i warning a FE\n\n            //log.debug \"transitionCheck: \" + issue.getCustomFieldValue(transitionCheck)\n            //log.debug \"result: \" + issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")\n            if(issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")){\n                //log.debug \"return true - transitionCheck = Yes\"\n                return true\n            }else{\n                def wList = new ArrayList()\n\n                if(issueWarningEmptyQuoteRateSupplier.size() &gt; 0){\n                    def wListConfirmEmptyRate = new ArrayList()\n                    wListConfirmEmptyRate.add(\"W\")\n                    wListConfirmEmptyRate.add(\"SUPPLIER_CONFIRM_EMPTY_RATES\")\n                    wListConfirmEmptyRate.add(null)\n                    wListConfirmEmptyRate.add(issueWarningEmptyQuoteRateSupplier)\n\n                    wList.add(wListConfirmEmptyRate)\n                }\n\n                if(issueWarningEmptyQuoteMatSupplier.size() &gt; 0){\n                    def wListConfirmEmptyMatQuote = new ArrayList()\n                    wListConfirmEmptyMatQuote.add(\"W\")\n                    wListConfirmEmptyMatQuote.add(\"SUPPLIER_CONFIRM_EMPTY_MAT_QUOTE\")\n                    wListConfirmEmptyMatQuote.add(null)\n                    wListConfirmEmptyMatQuote.add(issueWarningEmptyQuoteMatSupplier)\n\n                    wList.add(wListConfirmEmptyMatQuote)\n                }\n\n                if(warningsMatLinkedIssues.size() &gt; 0){\n                    for(obj in warningsMatLinkedIssues){\n                        def wListConfirmEmptyMatQuote = new ArrayList()\n                        wListConfirmEmptyMatQuote.add(\"W\")\n                        wListConfirmEmptyMatQuote.add(\"SUPPLIER_CONFIRM_EMPTY_MAT_QUOTE\")\n                        wListConfirmEmptyMatQuote.add(obj[0])\n                        wListConfirmEmptyMatQuote.add(obj[1])\n\n                        wList.add(wListConfirmEmptyMatQuote)\n                    }\n                }\n\n                if(warningsRateLinkedIssues.size() &gt; 0){\n                    for(obj in warningsRateLinkedIssues){\n                        def wListConfirmEmptyRate = new ArrayList()\n                        wListConfirmEmptyRate.add(\"W\")\n                        wListConfirmEmptyRate.add(\"SUPPLIER_CONFIRM_EMPTY_RATES\")\n                        wListConfirmEmptyRate.add(obj[0])\n                        wListConfirmEmptyRate.add(obj[1])\n\n                        wList.add(wListConfirmEmptyRate)\n                    }\n                }\n\n                output.add(wList)\n                throw new InvalidInputException('{\"W\":\"' + output.toString() + '\"}')\n                //throw new InvalidInputException(\"W\", output.toString())   \n            }\n\n        }\n        if(errors &amp;&amp; !warnings){\n            def eList = new ArrayList()\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n            //throw new InvalidInputException(\"E\", output.toString())   \n        }\n        if(errors &amp;&amp; warnings){\n            def eList = new ArrayList()\n            def wList = new ArrayList()\n\n            if(issueWarningEmptyQuoteRateSupplier.size() &gt; 0){\n                def wListConfirmEmptyRate = new ArrayList()\n                wListConfirmEmptyRate.add(\"W\")\n                wListConfirmEmptyRate.add(\"SUPPLIER_CONFIRM_EMPTY_RATES\")\n                wListConfirmEmptyRate.add(null)\n                wListConfirmEmptyRate.add(issueWarningEmptyQuoteRateSupplier)\n\n                wList.add(wListConfirmEmptyRate)\n            }\n\n            if(issueWarningEmptyQuoteMatSupplier.size() &gt; 0){\n                def wListConfirmEmptyMatQuote = new ArrayList()\n                wListConfirmEmptyMatQuote.add(\"W\")\n                wListConfirmEmptyMatQuote.add(\"SUPPLIER_CONFIRM_EMPTY_MAT_QUOTE\")\n                wListConfirmEmptyMatQuote.add(null)\n                wListConfirmEmptyMatQuote.add(issueWarningEmptyQuoteMatSupplier)\n\n                wList.add(wListConfirmEmptyMatQuote)\n            }\n\n            if(warningsMatLinkedIssues.size() &gt; 0){\n                for(obj in warningsMatLinkedIssues){\n                    def wListConfirmEmptyMatQuote = new ArrayList()\n                    wListConfirmEmptyMatQuote.add(\"W\")\n                    wListConfirmEmptyMatQuote.add(\"SUPPLIER_CONFIRM_EMPTY_MAT_QUOTE\")\n                    wListConfirmEmptyMatQuote.add(obj[0])\n                    wListConfirmEmptyMatQuote.add(obj[1])\n\n                    wList.add(wListConfirmEmptyMatQuote)\n                }\n            }\n\n            if(warningsRateLinkedIssues.size() &gt; 0){\n                for(obj in warningsRateLinkedIssues){\n                    def wListConfirmEmptyRate = new ArrayList()\n                    wListConfirmEmptyRate.add(\"W\")\n                    wListConfirmEmptyRate.add(\"SUPPLIER_CONFIRM_EMPTY_RATES\")\n                    wListConfirmEmptyRate.add(obj[0])\n                    wListConfirmEmptyRate.add(obj[1])\n\n                    wList.add(wListConfirmEmptyRate)\n                }\n            }\n\n            output.add(eList)\n            output.add(wList)\n            throw new InvalidInputException('{\"WE\":\"' + output.toString() + '\"}')\n            //throw new InvalidInputException(\"WE\", output.toString())  \n        }\n    }\n}else{\n    return true\n}\n\n","scriptPath":null,"parameters":{}}</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper
import groovy.json.JsonBuilder
import groovy.json.StreamingJsonBuilder

import com.atlassian.jira.issue.CustomFieldManager
import com.atlassian.jira.issue.fields.CustomField
import com.atlassian.jira.issue.IssueManager
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.issue.link.IssueLink

import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService

import org.apache.log4j.Category
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

Issue issue = issue
//Per test da console
//IssueManager issueManager = ComponentAccessor.getIssueManager();
//Issue issue = issueManager.getIssueByKeyIgnoreCase("AAS-2202")

def errors = false
def warnings = false
def relatesInIssueLink=false
def relatesOutIssueLink=false
def wListConfirmEmptyMatQuoteLinked = new ArrayList()
def wListConfirmEmptyRateQuoteLinked = new ArrayList()

def lumpSumPrice =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumPrice'].toString())[0]

/*Campi con dati obbligatori per ticket non a corpo*/
def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.replacedMaterials'].toString())[0]
def unaTantumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.unatantumRates'].toString())[0]
def labourRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.labourRates'].toString())[0]
def travelRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.travelRates'].toString())[0]

/*Campi con dati obbligatori per ticket a corpo*/
def lumpSumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumRates'].toString())[0]

/*Conferma utente su warnings*/
def transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]

/*Insight Schema IDs*/
def DBObjects = properties['ischema.dbo'].toString() + "-"
def OPAA = properties['ischema.aa'].toString() + "-"

/*Array warnings ed errors per la issue principale, uno per ogni tipologia di errore o warning*/
def issueWarningEmptyQuoteMatSupplier = new ArrayList()
def issueWarningEmptyQuoteRateSupplier = new ArrayList()
//def issueError...

/*Verifica campi su ticket oggetto della transazione*/
if(issue.getCustomFieldValue(lumpSumPrice)!=null &amp;&amp; issue.getCustomFieldValue(lumpSumPrice).toString().equals("Yes")){
    /*Contabilizzazione a corpo*/
    log.debug "Contabilizzazione a corpo"
    //OPAA_LUMP_SUM_RATES
    if(issue.getCustomFieldValue(lumpSumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(lumpSumRates) != "" &amp;&amp; !issue.getCustomFieldValue(lumpSumRates).toString().equals("")){
        /*Ciclare tutti gli oggetti associati al campo*/
        //insight classes &amp; components
        Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
        Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
        def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
        def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

        def lsRatesList = issue.getCustomFieldValue(lumpSumRates)

        for(ls in lsRatesList){
            //extract insight key ang get object
            def lsRate=ls.toString()
            log.debug lsRate
            def lsRateKey = lsRate.substring(lsRate.indexOf('(')+1,lsRate.indexOf(')'))
            def lsRateObject = objectFacade.loadObjectBean(lsRateKey)
            //get "DELETED" for that that rate
			def lsDel = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : ""
	        def lsDelValue = lsDel != "" ? lsDel.substring(lsDel.indexOf('(')+1,lsDel.indexOf(')')) : ""

            //get "APPLIED_TO" for that rate
            def lsAppliedTo = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
            def lsAppliedToValue
            if (lsAppliedTo){
                lsAppliedToValue = lsAppliedTo.substring(lsAppliedTo.indexOf('(')+1,lsAppliedTo.indexOf(')'))
            }

            def lsRateRef = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()

            def lsRateRefKey
            def lsRateRefValue
            if(lsRateRef.size() &gt; 0){
                lsRateRef = lsRateRef.toString()
                lsRateRefKey = lsRateRef.substring(lsRateRef.indexOf('(')+1,lsRateRef.indexOf(')'))
                def lsRateRefObject = objectFacade.loadObjectBean(OPAA + lsRateRefKey)
                lsRateRefValue = objectFacade.loadObjectAttributeBean(lsRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
                lsRateRefValue = lsRateRefValue.substring(lsRateRefValue.indexOf('(')+1,lsRateRefValue.indexOf(')'))
            }

            if((lsAppliedToValue.toString().equals("BOTH") || lsAppliedToValue.toString().equals("SUPPLIER")) &amp;&amp; !lsDelValue.equals("true")){
                //get "TOTAL_AMOUNT_SUPPLIER" for that component
                def totSupplier
				if(objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString())){
					totSupplier = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()
				}
                if(!totSupplier || totSupplier[0].getValue().toString().equals("0.0")){
                    warnings=true
                    issueWarningEmptyQuoteRateSupplier.add(lsRateRefValue.toString())
                    log.debug issue.key.toString() + " issueWarningEmptyQuoteRateSupplier: " + issueWarningEmptyQuoteRateSupplier
                }
            }
        }    
    }

}else{
    /*Contabilizzazione non a corpo*/
    log.debug "Contabilizzazione NON a corpo"

    //OPAA_REPLACED_MATERIALS
    if(issue.getCustomFieldValue(repMaterials)!=null &amp;&amp; (String)issue.getCustomFieldValue(repMaterials) != "" &amp;&amp; !issue.getCustomFieldValue(repMaterials).toString().equals("")){
        //log.debug "Materiali: " + issue.getCustomFieldValue(repMaterials)
        /*Ciclare tutti gli oggetti associati al campo*/
        //insight classes &amp; components
        Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
        Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
        def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
        def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

        def repMatList = issue.getCustomFieldValue(repMaterials)

        for(mat in repMatList){
            //extract insight key ang get object
            def component=mat.toString()
            def componentKey = component.substring(component.indexOf('('+OPAA)+1,component.length()-1)
            def componentObject = objectFacade.loadObjectBean(componentKey)
        	//get "DELETED" for that component
			def matDel = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : ""
	        def matDelValue = matDel != "" ? matDel.substring(matDel.indexOf('(')+1,matDel.indexOf(')')) : ""

            
            //get "APPLIED_TO" for that component
            def appliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans() as ArrayList
            def appliedToValue
            if(appliedTo.size() &gt; 0){
                appliedTo = appliedTo.toString()
                appliedToValue = appliedTo.substring(appliedTo.indexOf('(')+1,appliedTo.indexOf(')'))
                //log.debug "appliedToValue: " + appliedToValue
            }

            def matNumber
            def matNumberKey
            def matNumberValue
            if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString())){
                matNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).getObjectAttributeValueBeans() as ArrayList
                if(matNumber.size() &gt; 0){
                    matNumber = matNumber.toString()
                    matNumberKey = matNumber.substring(matNumber.indexOf('(')+1,matNumber.indexOf(')'))
                    def matNumberObject = objectFacade.loadObjectBean(DBObjects + matNumberKey)
                    matNumberValue = objectFacade.loadObjectAttributeBean(matNumberObject.getId(), properties['iobj.material.name'].toString()).getObjectAttributeValueBeans().toString()
                    matNumberValue = matNumberValue.substring(matNumberValue.indexOf('(')+1,matNumberValue.indexOf(')'))
                }
            }
            
            def serialNumber
            def serialNumberValue
            if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString())){
                serialNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()).getObjectAttributeValueBeans() as ArrayList
                if(serialNumber.size() &gt; 0){
                    serialNumber = serialNumber.toString()
                    serialNumberValue = serialNumber.substring(serialNumber.indexOf('(')+1,serialNumber.indexOf(')'))
                }               
            }
            
            if((appliedToValue.toString().equals("BOTH") || appliedToValue.toString().equals("SUPPLIER")) &amp;&amp; !matDelValue.equals("true")){
                //get "TOTAL_AMOUNT_SUPPLIER" for that component
                def totSupplier
                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString())){
                    totSupplier = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString()).getObjectAttributeValueBeans()
                }
                if(!totSupplier || totSupplier[0].getValue().toString().equals("0.0")){
                    warnings=true
                    issueWarningEmptyQuoteMatSupplier.add(matNumberValue.toString() + (!serialNumber.toString().equals("[]") ? " (" + serialNumberValue.toString() + ")" : " ()"))
                    log.debug issue.key.toString() + " issueWarningEmptyQuoteMatSupplier: " + issueWarningEmptyQuoteMatSupplier
                }
            }
        }    
    }  

    //OPAA_UNATANTUM_RATES
    if(issue.getCustomFieldValue(unaTantumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(unaTantumRates) != "" &amp;&amp; !issue.getCustomFieldValue(unaTantumRates).toString().equals("")){
        log.debug "Una tantum rates: " + issue.getCustomFieldValue(unaTantumRates)
        /*Ciclare tutti gli oggetti associati al campo*/
        //insight classes &amp; components
        Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
        Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
        def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
        def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

        def umRatesList = issue.getCustomFieldValue(unaTantumRates)

        for(um in umRatesList){
            //extract insight key ang get object
            def umRate=um.toString()
            def umRateKey = umRate.substring(umRate.indexOf('(')+1,umRate.indexOf(')'))
            def umRateObject = objectFacade.loadObjectBean(umRateKey)
            
            def umDel = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : ""
            def umDelValue = umDel != "" ? umDel.substring(umDel.indexOf('(')+1,umDel.indexOf(')')) : ""
            
            //get "APPLIED_TO" for that rate
            def umAppliedTo = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
            def umAppliedToValue = umAppliedTo.substring(umAppliedTo.indexOf('(')+1,umAppliedTo.indexOf(')'))

            def umRateRef
            if(objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){
                umRateRef=objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
            }

            def umRateRefKey
            def umRateRefValue
            if(umRateRef){
                umRateRef = umRateRef.toString()
                umRateRefKey = umRateRef.substring(umRateRef.indexOf('(')+1,umRateRef.indexOf(')'))
                def umRateRefObject = objectFacade.loadObjectBean(OPAA + umRateRefKey)
                umRateRefValue = objectFacade.loadObjectAttributeBean(umRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
                umRateRefValue = umRateRefValue.substring(umRateRefValue.indexOf('(')+1,umRateRefValue.indexOf(')'))
            }

            if((umAppliedToValue.toString().equals("BOTH") || umAppliedToValue.toString().equals("SUPPLIER")) &amp;&amp; !umDelValue.equals("true")){
                //get "TOTAL_AMOUNT_SUPPLIER" for that component
                def totSupplier
                if(objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString())){
                    totSupplier = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()
                }
                if(!totSupplier || totSupplier[0].getValue().toString().equals("0.0")){
                    warnings=true
                    issueWarningEmptyQuoteRateSupplier.add(umRateRefValue.toString())
                    log.debug issue.key.toString() + " issueWarningEmptyQuoteRateSupplier: " + issueWarningEmptyQuoteRateSupplier
                }
            }
        }    
    }

    //OPAA_LABOUR_RATES
    if(issue.getCustomFieldValue(labourRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(labourRates) != "" &amp;&amp; !issue.getCustomFieldValue(labourRates).toString().equals("")){
        log.debug "Labour rates: " + issue.getCustomFieldValue(labourRates)
        /*Ciclare tutti gli oggetti associati al campo*/
        //insight classes &amp; components
        Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
        Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
        def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
        def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

        def labourRatesList = issue.getCustomFieldValue(labourRates)

        for(lb in labourRatesList){
            //extract insight key ang get object
            def lbRate=lb.toString()
            def lbRateKey = lbRate.substring(lbRate.indexOf('(')+1,lbRate.indexOf(')'))
            def lbRateObject = objectFacade.loadObjectBean(lbRateKey)
            //get "DELETED" for that rate
            def lbDel = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : ""
            def lbDelValue = lbDel != "" ? lbDel.substring(lbDel.indexOf('(')+1,lbDel.indexOf(')')) : ""
            
            //get "APPLIED_TO" for that rate
            def lbAppliedTo = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
            def lbAppliedToValue = lbAppliedTo.substring(lbAppliedTo.indexOf('(')+1,lbAppliedTo.indexOf(')'))

            def lbRateRef
			if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){
				lbRateRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
			}

			def techRef
            if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.technicianRef'].toString())){
                techRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.technicianRef'].toString()).getObjectAttributeValueBeans().toString()
            }
			
            def lbRateRefKey
            def lbRateRefValue
            if(lbRateRef.size() &gt; 0){
                lbRateRef = lbRateRef.toString()
                lbRateRefKey = lbRateRef.substring(lbRateRef.indexOf('(')+1,lbRateRef.indexOf(')'))
                def lbRateRefObject = objectFacade.loadObjectBean(OPAA + lbRateRefKey)
                lbRateRefValue = objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
                lbRateRefValue = lbRateRefValue.substring(lbRateRefValue.indexOf('(')+1,lbRateRefValue.indexOf(')'))
            }
			
			def techRefKey
            def techRefValue
            if(techRef){
                techRef = techRef.toString()
                log.debug "techRef: " + techRef
                techRefKey = techRef.substring(techRef.indexOf('(')+1,techRef.indexOf(')'))
                def techRefObject = objectFacade.loadObjectBean(OPAA + techRefKey)
                techRefValue = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()
                techRefValue = lbRateRefValue.substring(techRefValue.indexOf('(')+1,techRefValue.indexOf(')'))
            }

            if((lbAppliedToValue.toString().equals("BOTH") || lbAppliedToValue.toString().equals("SUPPLIER")) &amp;&amp; !lbDelValue.equals("true")){
                //get "TOTAL_AMOUNT_SUPPLIER" for that component
                def totSupplier
                if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString())){
                    totSupplier = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()
                }
                if(!totSupplier || totSupplier[0].getValue().toString().equals("0.0")){
                    warnings=true
                    issueWarningEmptyQuoteRateSupplier.add(lbRateRefValue.toString() + " (" + techRefValue.toString() + ")")
                    log.debug issue.key.toString() + " issueWarningEmptyQuoteRateSupplier: " + issueWarningEmptyQuoteRateSupplier
                }
            }
        }    
    }

    //OPAA_TRAVEL_RATES
    if(issue.getCustomFieldValue(travelRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(travelRates) != "" &amp;&amp; !issue.getCustomFieldValue(travelRates).toString().equals("")){
        log.debug "Travel rates: " + issue.getCustomFieldValue(travelRates)
        /*Ciclare tutti gli oggetti associati al campo*/
        //insight classes &amp; components
        Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
        Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
        def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
        def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

        def travelRatesList = issue.getCustomFieldValue(travelRates)

        for(tr in travelRatesList){
            //extract insight key ang get object
            def trRate=tr.toString()
            def trRateKey = trRate.substring(trRate.indexOf('(')+1,trRate.indexOf(')'))
            def trRateObject = objectFacade.loadObjectBean(trRateKey)
            
            def trDel = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : ""
            def trDelValue = trDel != "" ? trDel.substring(trDel.indexOf('(')+1,trDel.indexOf(')')) : ""
            
            //get "APPLIED_TO" for that rate
            def trAppliedTo = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
            def trAppliedToValue = trAppliedTo.substring(trAppliedTo.indexOf('(')+1,trAppliedTo.indexOf(')'))

            def trRateRef
			if(objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){
				trRateRef=objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
			}

            def trRateRefKey
            def trRateRefValue
            if(trRateRef.size() &gt; 0){
                trRateRef = trRateRef.toString()
                trRateRefKey = trRateRef.substring(trRateRef.indexOf('(')+1,trRateRef.indexOf(')'))
                def trRateRefObject = objectFacade.loadObjectBean(OPAA + trRateRefKey)
                trRateRefValue = objectFacade.loadObjectAttributeBean(trRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
                trRateRefValue = trRateRefValue.substring(trRateRefValue.indexOf('(')+1,trRateRefValue.indexOf(')'))
            }

            if((trAppliedToValue.toString().equals("BOTH") || trAppliedToValue.toString().equals("SUPPLIER")) &amp;&amp; !trDelValue.equals("true")){
                //get "TOTAL_AMOUNT_SUPPLIER" for that component
                def totSupplier
                if(objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString())){
                    totSupplier=objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()
                }
                if(!totSupplier || totSupplier[0].getValue().toString().equals("0.0")){
                    warnings=true
                    issueWarningEmptyQuoteRateSupplier.add(trRateRefValue.toString())
                    log.debug issue.key.toString() + " issueWarningEmptyQuoteRateSupplier: " + issueWarningEmptyQuoteRateSupplier
                }
            }
        }    
    }

}

def linkedTickets=new ArrayList()

/*OP-1038: verifica ticket collegati -  e su ciascuno verifica campi obbligatori*/
List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesInIssueLink=true
        linkedTickets.add(issueLink.getSourceObject())
        log.debug "Issue con relatesInIssueLink"
    }
}
List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesOutIssueLink=true
        linkedTickets.add(issueLink.getDestinationObject())
        log.debug "Issue con relatesOutIssueLink"
    }
}

/*Array warnings ed errors per le issue linkate, uno per ogni tipologia di errore o warning*/
def warningsMatLinkedIssues = new ArrayList()
def warningsRateLinkedIssues = new ArrayList()
//def errorsLinkedIssues = new ArrayList()

for(i in linkedTickets){
    issue=i as Issue

    /*Array warnings ed errors per la singola issue linkata, uno per ogni tipologia di errore o warning*/
    def warningEmptyQuoteRateSupplier = new ArrayList()
    def warningEmptyQuoteMatSupplier = new ArrayList() 
    //def error...
    
    if(issue.getCustomFieldValue(lumpSumPrice)!=null &amp;&amp; issue.getCustomFieldValue(lumpSumPrice).toString().equals("Yes")){
        /*Contabilizzazione a corpo*/
        log.debug "Contabilizzazione a corpo"
        //OPAA_LUMP_SUM_RATES
        if(issue.getCustomFieldValue(lumpSumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(lumpSumRates) != "" &amp;&amp; !issue.getCustomFieldValue(lumpSumRates).toString().equals("")){
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def lsRatesList = issue.getCustomFieldValue(lumpSumRates)

            for(ls in lsRatesList){
                //extract insight key ang get object
                def lsRate=ls.toString()
                def lsRateKey = lsRate.substring(lsRate.indexOf('(')+1,lsRate.indexOf(')'))
                def lsRateObject = objectFacade.loadObjectBean(lsRateKey)
                //get "DELETED" for that component
                def lsDel = objectFacade.loadObjectAttributeBean(lsRate.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(lsRate.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : ""
                def lsDelValue = lsDel != "" ? lsDel.substring(lsDel.indexOf('(')+1,lsDel.indexOf(')')) : ""

                //get "APPLIED_TO" for that rate
                def lsAppliedTo = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                def lsAppliedToValue
                if (lsAppliedTo){
                    lsAppliedToValue = lsAppliedTo.substring(lsAppliedTo.indexOf('(')+1,lsAppliedTo.indexOf(')'))
                }

                def lsRateRef = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()

                def lsRateRefKey
                def lsRateRefValue
                if(lsRateRef.size() &gt; 0){
                    lsRateRef = lsRateRef.toString()
                    lsRateRefKey = lsRateRef.substring(lsRateRef.indexOf('(')+1,lsRateRef.indexOf(')'))
                    def lsRateRefObject = objectFacade.loadObjectBean(OPAA + lsRateRefKey)
                    lsRateRefValue = objectFacade.loadObjectAttributeBean(lsRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
                    lsRateRefValue = lsRateRefValue.substring(lsRateRefValue.indexOf('(')+1,lsRateRefValue.indexOf(')'))
                }

                if((lsAppliedToValue.toString().equals("BOTH") || lsAppliedToValue.toString().equals("SUPPLIER")) &amp;&amp; !lsDelValue.equals("true")){
                    //get "TOTAL_AMOUNT_SUPPLIER" for that component
                    def totSupplier
                    if(objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString())){
                    	totSupplier = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()
                    }
                    if(!totSupplier || totSupplier[0].getValue().toString().equals("0.0")){
                        warnings=true    
                        warningEmptyQuoteRateSupplier.add(lsRateRefValue.toString())
                        log.debug issue.key.toString() + " warningEmptyQuoteRateSupplier: " + warningEmptyQuoteRateSupplier
                    }
                }
            }    
        }

    }else{
        /*Contabilizzazione non a corpo*/
        log.debug "Contabilizzazione NON a corpo"

        //OPAA_REPLACED_MATERIALS
        if(issue.getCustomFieldValue(repMaterials)!=null &amp;&amp; (String)issue.getCustomFieldValue(repMaterials) != "" &amp;&amp; !issue.getCustomFieldValue(repMaterials).toString().equals("")){
            log.debug "Materiali: " + issue.getCustomFieldValue(repMaterials)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def repMatList = issue.getCustomFieldValue(repMaterials)

            for(mat in repMatList){
                //extract insight key ang get object
                def component=mat.toString()
                def componentKey = component.substring(component.indexOf('('+OPAA)+1,component.length()-1)
                def componentObject = objectFacade.loadObjectBean(componentKey)
                //get "DELETED" for that component
                def matDel = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : ""
                def matDelValue = matDel != "" ? matDel.substring(matDel.indexOf('(')+1,matDel.indexOf(')')) : ""

                //get "APPLIED_TO" for that component
                def appliedTo
                def appliedToValue
                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString())){
                    appliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans() as ArrayList
                    if(appliedTo.size() &gt; 0){
                        appliedTo = appliedTo.toString()
                        appliedToValue = appliedTo.substring(appliedTo.indexOf('(')+1,appliedTo.indexOf(')'))
                        log.debug "appliedToValue: " + appliedToValue
                    }
                }
                
                def matNumber
                def matNumberKey
                def matNumberValue
                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString())){
                    matNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).getObjectAttributeValueBeans() as ArrayList
                    if(matNumber.size() &gt; 0){
                        matNumber = matNumber.toString()
                        matNumberKey = matNumber.substring(matNumber.indexOf('(')+1,matNumber.indexOf(')'))
                        def matNumberObject = objectFacade.loadObjectBean(DBObjects + matNumberKey)
                        matNumberValue = objectFacade.loadObjectAttributeBean(matNumberObject.getId(), properties['iobj.material.name'].toString()).getObjectAttributeValueBeans().toString()
                        matNumberValue = matNumberValue.substring(matNumberValue.indexOf('(')+1,matNumberValue.indexOf(')'))
                    }
                }

                def serialNumber
                def serialNumberValue
                if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString())){
                    serialNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()).getObjectAttributeValueBeans() as ArrayList
                    if(serialNumber.size() &gt; 0){
                        serialNumber = serialNumber.toString()
                        serialNumberValue = serialNumber.substring(serialNumber.indexOf('(')+1,serialNumber.indexOf(')'))
                    }               
                }

                if(appliedToValue &amp;&amp; !matDelValue.equals("true") &amp;&amp; (appliedToValue.toString().equals("BOTH") || appliedToValue.toString().equals("SUPPLIER"))){
                    //get "TOTAL_AMOUNT_SUPPLIER" for that component
                    log.debug "AppliedTo verificato =&gt; " + objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString())
                    def totSupplier 
                    if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString())){
                    	totSupplier = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString()).getObjectAttributeValueBeans()
                    }
					if(!totSupplier || totSupplier[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteMatSupplier.add(matNumberValue.toString() + (!serialNumber.toString().equals("[]") ? " (" + serialNumberValue.toString() + ")" : " ()"))
                        log.debug issue.key.toString() + " warningEmptyQuoteMatSupplier: "+ warningEmptyQuoteMatSupplier
                    }
                }
            }    
        }  

        //OPAA_UNATANTUM_RATES
        if(issue.getCustomFieldValue(unaTantumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(unaTantumRates) != "" &amp;&amp; !issue.getCustomFieldValue(unaTantumRates).toString().equals("")){
            log.debug "Una tantum rates: " + issue.getCustomFieldValue(unaTantumRates)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def umRatesList = issue.getCustomFieldValue(unaTantumRates)

            for(um in umRatesList){
                //extract insight key ang get object
                def umRate=um.toString()
                def umRateKey = umRate.substring(umRate.indexOf('(')+1,umRate.indexOf(')'))
                def umRateObject = objectFacade.loadObjectBean(umRateKey)
                //get "DELETED" for that component
                def umDel = objectFacade.loadObjectAttributeBean(umRate.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(umRate.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : ""
                def umDelValue = umDel != "" ? umDel.substring(umDel.indexOf('(')+1,umDel.indexOf(')')) : ""

                //get "APPLIED_TO" for that rate
                def umAppliedTo = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                def umAppliedToValue = umAppliedTo.substring(umAppliedTo.indexOf('(')+1,umAppliedTo.indexOf(')'))

                def umRateRef
                if(objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){
                    umRateRef=objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
                }
                def techRef
                if(objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.technicianRef'].toString())){
                    techRef=objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.technicianRef'].toString()).getObjectAttributeValueBeans().toString()
                }

                def umRateRefKey
                def umRateRefValue
                if(umRateRef){
                    umRateRef = umRateRef.toString()
                    umRateRefKey = umRateRef.substring(umRateRef.indexOf('(')+1,umRateRef.indexOf(')'))
                    def umRateRefObject = objectFacade.loadObjectBean(OPAA + umRateRefKey)
                    umRateRefValue = objectFacade.loadObjectAttributeBean(umRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
                    umRateRefValue = umRateRefValue.substring(umRateRefValue.indexOf('(')+1,umRateRefValue.indexOf(')'))
                }

                def techRefKey
                def techRefValue
                if(techRef){
                    techRef = techRef.toString()
                    log.debug "techRef: " + techRef
                    techRefKey = techRef.substring(techRef.indexOf('(')+1,techRef.indexOf(')'))
                    def umRateRefObject = objectFacade.loadObjectBean(OPAA + umRateRefKey)
                    techRefValue = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()
                    techRefValue = umRateRefValue.substring(techRefValue.indexOf('(')+1,techRefValue.indexOf(')'))
                }

                if((umAppliedToValue.toString().equals("BOTH") || umAppliedToValue.toString().equals("SUPPLIER")) &amp;&amp; !umDelValue.equals("true")){
                    //get "TOTAL_AMOUNT_SUPPLIER" for that component
                    def totSupplier 
                    if(objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString())){
                        totSupplier=objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()
                    }
                    if(!totSupplier || totSupplier[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateSupplier.add(umRateRefValue.toString() + " (" + techRefValue.toString() + ")")
                        log.debug issue.key.toString() + " warningEmptyQuoteRateSupplier: " + warningEmptyQuoteRateSupplier
                    }
                }
            }    
        }

        //OPAA_LABOUR_RATES
        if(issue.getCustomFieldValue(labourRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(labourRates) != "" &amp;&amp; !issue.getCustomFieldValue(labourRates).toString().equals("")){
            log.debug "Labour rates: " + issue.getCustomFieldValue(labourRates)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def labourRatesList = issue.getCustomFieldValue(labourRates)

            for(lb in labourRatesList){
                //extract insight key ang get object
                def lbRate=lb.toString()
                def lbRateKey = lbRate.substring(lbRate.indexOf('(')+1,lbRate.indexOf(')'))
                def lbRateObject = objectFacade.loadObjectBean(lbRateKey)
                //get "DELETED" for that component
                def lbDel = objectFacade.loadObjectAttributeBean(lbRate.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(lbRate.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : ""
                def lbDelValue = lbDel != "" ? lbDel.substring(lbDel.indexOf('(')+1,lbDel.indexOf(')')) : ""

                //get "APPLIED_TO" for that rate
                def lbAppliedTo = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                def lbAppliedToValue = lbAppliedTo.substring(lbAppliedTo.indexOf('(')+1,lbAppliedTo.indexOf(')'))

                def lbRateRef = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()

                def techRef
                if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.technicianRef'].toString())){
                    techRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.technicianRef'].toString()).getObjectAttributeValueBeans().toString()
                }

                def lbRateRefKey
                def lbRateRefValue
                if(lbRateRef.size() &gt; 0){
                    lbRateRef = lbRateRef.toString()
                    lbRateRefKey = lbRateRef.substring(lbRateRef.indexOf('(')+1,lbRateRef.indexOf(')'))
                    def lbRateRefObject = objectFacade.loadObjectBean(OPAA + lbRateRefKey)
                    lbRateRefValue = objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
                    lbRateRefValue = lbRateRefValue.substring(lbRateRefValue.indexOf('(')+1,lbRateRefValue.indexOf(')'))
                }

                def techRefKey
                def techRefValue
                if(techRef){
                    techRef = techRef.toString()
                    log.debug "techRef: " + techRef
                    techRefKey = techRef.substring(techRef.indexOf('(')+1,techRef.indexOf(')'))
                    def techRefObject = objectFacade.loadObjectBean(OPAA + techRefKey)
                    techRefValue = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()
                    techRefValue = lbRateRefValue.substring(techRefValue.indexOf('(')+1,techRefValue.indexOf(')'))
                }

                if((lbAppliedToValue.toString().equals("BOTH") || lbAppliedToValue.toString().equals("SUPPLIER")) &amp;&amp; !lbDelValue.equals("true")){
                    //get "TOTAL_AMOUNT_SUPPLIER" for that component
                    def totSupplier 
                    if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString())){
                        totSupplier = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()
                    }
                    if(!totSupplier || totSupplier[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateSupplier.add(lbRateRefValue.toString())
                        log.debug issue.key.toString() + " warningEmptyQuoteRateSupplier: " + warningEmptyQuoteRateSupplier
                    }
                }
            }    
        }

        //OPAA_TRAVEL_RATES
        if(issue.getCustomFieldValue(travelRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(travelRates) != "" &amp;&amp; !issue.getCustomFieldValue(travelRates).toString().equals("")){
            log.debug "Travel rates: " + issue.getCustomFieldValue(travelRates)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def travelRatesList = issue.getCustomFieldValue(travelRates)

            for(tr in travelRatesList){
                //extract insight key ang get object
                def trRate=tr.toString()
                def trRateKey = trRate.substring(trRate.indexOf('(')+1,trRate.indexOf(')'))
                def trRateObject = objectFacade.loadObjectBean(trRateKey)
                //get "DELETED" for that component
                def trDel = objectFacade.loadObjectAttributeBean(trRate.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(trRate.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : ""
                def trDelValue = trDel != "" ? trDel.substring(trDel.indexOf('(')+1,trDel.indexOf(')')) : ""

                //get "APPLIED_TO" for that rate
                def trAppliedTo = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                def trAppliedToValue = trAppliedTo.substring(trAppliedTo.indexOf('(')+1,trAppliedTo.indexOf(')'))

                def trRateRef = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()

                def trRateRefKey
                def trRateRefValue
                if(trRateRef.size() &gt; 0){
                    trRateRef = trRateRef.toString()
                    trRateRefKey = trRateRef.substring(trRateRef.indexOf('(')+1,trRateRef.indexOf(')'))
                    def trRateRefObject = objectFacade.loadObjectBean(OPAA + trRateRefKey)
                    trRateRefValue = objectFacade.loadObjectAttributeBean(trRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
                    trRateRefValue = trRateRefValue.substring(trRateRefValue.indexOf('(')+1,trRateRefValue.indexOf(')'))
                }

                if((trAppliedToValue.toString().equals("BOTH") || trAppliedToValue.toString().equals("SUPPLIER")) &amp;&amp; !trDelValue.equals("true")){
                    //get "TOTAL_AMOUNT_SUPPLIER" for that component
                    def totSupplier
                    if(objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString())){
                        totSupplier=objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()
                    }
                    if(!totSupplier || totSupplier[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateSupplier.add(trRateRefValue.toString())
                        log.debug issue.key.toString() + " warningEmptyQuoteRateSupplier: " + warningEmptyQuoteRateSupplier
                    }
                }
            }    
        }

    }
    
    /*Verifico la presenza di errori e warning sulla issue corrente e, se presenti, li aggiungo agli array degli errori e warning delle issue linkate*/
    if(warningEmptyQuoteMatSupplier.size()&gt;0){
        def objList = new ArrayList()
        objList.add(issue)
        objList.add(warningEmptyQuoteMatSupplier)
        warningsMatLinkedIssues.add(objList)
    }
    
    if(warningEmptyQuoteRateSupplier.size()&gt;0){
        def objList = new ArrayList()
        objList.add(issue)
        objList.add(warningEmptyQuoteRateSupplier)
        warningsRateLinkedIssues.add(objList)
    }
    
    //if(errors...)
    
}

log.debug "warningsMatLinkedIssues: " + warningsMatLinkedIssues
log.debug "warningsRateLinkedIssues: " + warningsRateLinkedIssues

def output = new ArrayList()

if (!errors &amp;&amp; !warnings){
    return true
}else{
    if(!errors &amp;&amp; warnings){
        //Se ci sono solo warnings verifico se l'utente ha già dichiarato di voler proseguire comunque
        // - transition field "OPAA_CHECK_AND_CONFIRM"="Yes"
        // - in caso contrario invio i warning a FE

        //log.debug "transitionCheck: " + issue.getCustomFieldValue(transitionCheck)
        //log.debug "result: " + issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")
        if(issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")){
            //log.debug "return true - transitionCheck = Yes"
            return true
        }else{
            def wList = new ArrayList()

            if(issueWarningEmptyQuoteRateSupplier.size() &gt; 0){
            	def wListConfirmEmptyRate = new ArrayList()
                wListConfirmEmptyRate.add("W")
                wListConfirmEmptyRate.add("SUPPLIER_CONFIRM_EMPTY_RATES")
                wListConfirmEmptyRate.add(null)
                wListConfirmEmptyRate.add(issueWarningEmptyQuoteRateSupplier)
                    
                wList.add(wListConfirmEmptyRate)
            }
            
            if(issueWarningEmptyQuoteMatSupplier.size() &gt; 0){
            	def wListConfirmEmptyMatQuote = new ArrayList()
                wListConfirmEmptyMatQuote.add("W")
                wListConfirmEmptyMatQuote.add("SUPPLIER_CONFIRM_EMPTY_MAT_QUOTE")
                wListConfirmEmptyMatQuote.add(null)
                wListConfirmEmptyMatQuote.add(issueWarningEmptyQuoteMatSupplier)
                    
                wList.add(wListConfirmEmptyMatQuote)
            }

            if(warningsMatLinkedIssues.size() &gt; 0){
                for(obj in warningsMatLinkedIssues){
                    def wListConfirmEmptyMatQuote = new ArrayList()
                    wListConfirmEmptyMatQuote.add("W")
                    wListConfirmEmptyMatQuote.add("SUPPLIER_CONFIRM_EMPTY_MAT_QUOTE")
                    wListConfirmEmptyMatQuote.add(obj[0])
                    wListConfirmEmptyMatQuote.add(obj[1])

                    wList.add(wListConfirmEmptyMatQuote)
                }
            }
            
            if(warningsRateLinkedIssues.size() &gt; 0){
                for(obj in warningsRateLinkedIssues){
                    def wListConfirmEmptyRate = new ArrayList()
                    wListConfirmEmptyRate.add("W")
                    wListConfirmEmptyRate.add("SUPPLIER_CONFIRM_EMPTY_RATES")
                    wListConfirmEmptyRate.add(obj[0])
                    wListConfirmEmptyRate.add(obj[1])

                    wList.add(wListConfirmEmptyRate)
                }
            }

            output.add(wList)
            throw new InvalidInputException('{"W":"' + output.toString() + '"}')
            //throw new InvalidInputException("W", output.toString())   
        }

    }
    if(errors &amp;&amp; !warnings){
        def eList = new ArrayList()

        output.add(eList)
        throw new InvalidInputException('{"E":"' + output.toString() + '"}')
        //throw new InvalidInputException("E", output.toString())   
    }
    if(errors &amp;&amp; warnings){
        def eList = new ArrayList()
        def wList = new ArrayList()

        if(issueWarningEmptyQuoteRateSupplier.size() &gt; 0){
            def wListConfirmEmptyRate = new ArrayList()
            wListConfirmEmptyRate.add("W")
            wListConfirmEmptyRate.add("SUPPLIER_CONFIRM_EMPTY_RATES")
			wListConfirmEmptyRate.add(null)
            wListConfirmEmptyRate.add(issueWarningEmptyQuoteRateSupplier)

            wList.add(wListConfirmEmptyRate)
        }

        if(issueWarningEmptyQuoteMatSupplier.size() &gt; 0){
            def wListConfirmEmptyMatQuote = new ArrayList()
            wListConfirmEmptyMatQuote.add("W")
            wListConfirmEmptyMatQuote.add("SUPPLIER_CONFIRM_EMPTY_MAT_QUOTE")
            wListConfirmEmptyMatQuote.add(null)
            wListConfirmEmptyMatQuote.add(issueWarningEmptyQuoteMatSupplier)

            wList.add(wListConfirmEmptyMatQuote)
        }

        if(warningsMatLinkedIssues.size() &gt; 0){
            for(obj in warningsMatLinkedIssues){
                def wListConfirmEmptyMatQuote = new ArrayList()
                wListConfirmEmptyMatQuote.add("W")
                wListConfirmEmptyMatQuote.add("SUPPLIER_CONFIRM_EMPTY_MAT_QUOTE")
                wListConfirmEmptyMatQuote.add(obj[0])
                wListConfirmEmptyMatQuote.add(obj[1])

                wList.add(wListConfirmEmptyMatQuote)
            }
        }

        if(warningsRateLinkedIssues.size() &gt; 0){
            for(obj in warningsRateLinkedIssues){
                def wListConfirmEmptyRate = new ArrayList()
                wListConfirmEmptyRate.add("W")
                wListConfirmEmptyRate.add("SUPPLIER_CONFIRM_EMPTY_RATES")
                wListConfirmEmptyRate.add(obj[0])
                wListConfirmEmptyRate.add(obj[1])

                wList.add(wListConfirmEmptyRate)
            }
        }

        output.add(eList)
        output.add(wList)
        throw new InvalidInputException('{"WE":"' + output.toString() + '"}')
        //throw new InvalidInputException("WE", output.toString())  
    }
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">fe514447-9df4-4f6e-a146-4880c721f4ec</arg>
              <arg name="FIELD_NOTES">Create SN &amp; SO for old tickets</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef SN =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_NOTIFICATION\")[0]\ndef SO =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_ORDER\")[0]\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\ndef body_req = []\ndef output = new ArrayList()\ndef eList = new ArrayList()\ndef eListErrors = new ArrayList()\ndef errorMsgs = new ArrayList()\n\nif(issue.getCustomFieldValue(SN) == null &amp;&amp; issue.issueType.name != \"Planned Maintenance Ticket\"){\n    requestMethod = \"POST\";\n    body_req = [\n        \"issueKey\": issue.key,\n        \"status\": \"OPE\"\n    ] \n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n    log.debug \"baseURL SN: \" + baseURL\n    log.debug \"body_req SN: \" + body_req\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n    \n    if (!connection.getResponseCode().toString().equals(\"201\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        \n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n        log.debug \"errors: \" +  json_object.errors.toString()\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-SAP-SN-UPDATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }else{\n        /** SERVICE ORDER CREATION **/\n        body_req = [\n            \"issueKey\": issue.key\n        ] \n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\n\n        log.debug \"baseURL SO: \" + baseURL\n        log.debug \"body_req SO: \" + body_req\n        url = new URL(baseURL)\n        connection = (HttpURLConnection)url.openConnection();\n        connection.setRequestMethod(requestMethod);\n        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n        connection.setRequestProperty(\"Accept\", \"*/*\");\n        connection.setDoOutput(true);\n        connection.setDoInput(true);\n        connection.outputStream\n        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n        log.debug connection.outputStream\n        connection.connect();\n\n        output = new ArrayList()\n        eList = new ArrayList()\n        eListErrors = new ArrayList()\n        errorMsgs = new ArrayList()\n\n        if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n            log.debug \"url: \" + url\n            log.debug \"ResponseCode:\" + connection.getResponseCode()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n            \n            def outputMsg = ((HttpURLConnection)connection).errorStream.text\n    \t\tlog.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n            \n            def jsonSlurper = new JsonSlurper()\n            def json_object = jsonSlurper.parseText(outputMsg)\n            assert json_object instanceof Map  \n            log.debug \"message: \" +  json_object.message\n            log.debug \"errors: \" +  json_object.errors.toString()\n            \n            eListErrors.add(\"E\")\n            eListErrors.add(\"OP-SAP-SO-CREATE\")\n            errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n            eListErrors.add(errorMsgs)\n            eList.add(eListErrors)\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        }\n    }\n}else{\n    if(issue.getCustomFieldValue(SN) != null &amp;&amp; issue.getCustomFieldValue(SO) == null &amp;&amp; issue.issueType.name != \"Planned Maintenance Ticket\"){\n        /** SERVICE ORDER CREATION **/\n        requestMethod = \"POST\";\n        body_req = [\n            \"issueKey\": issue.key\n        ] \n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\n\n        log.debug \"baseURL SO: \" + baseURL\n        log.debug \"body_req SO: \" + body_req\n        url = new URL(baseURL)\n        connection = (HttpURLConnection)url.openConnection();\n        connection.setRequestMethod(requestMethod);\n        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n        connection.setRequestProperty(\"Accept\", \"*/*\");\n        connection.setDoOutput(true);\n        connection.setDoInput(true);\n        connection.outputStream\n        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n        log.debug connection.outputStream\n        connection.connect();\n\n        output = new ArrayList()\n        eList = new ArrayList()\n        eListErrors = new ArrayList()\n        errorMsgs = new ArrayList()\n\n        if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n            log.debug \"url: \" + url\n            log.debug \"ResponseCode:\" + connection.getResponseCode()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n            \n            def outputMsg = ((HttpURLConnection)connection).errorStream.text\n    \t\tlog.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n            \n            def jsonSlurper = new JsonSlurper()\n            def json_object = jsonSlurper.parseText(outputMsg)\n            assert json_object instanceof Map  \n            log.debug \"message: \" +  json_object.message\n            log.debug \"errors: \" +  json_object.errors.toString()\n            \n            eListErrors.add(\"E\")\n            eListErrors.add(\"OP-SAP-SO-CREATE\")\n            errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n            eListErrors.add(errorMsgs)\n            eList.add(eListErrors)\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        }\n    }\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">ß®{ë^_×´ÕöýÕ·\ov¹ßg÷ñÿ5o~yåö½</arg>
              <arg name="FIELD_NOTES">OP: generazione ODA fornitore</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport groovy.json.JsonSlurper\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\n/*Script Variables*/\n//Per Post Function\n//issue = issue\n//Per test da console\n//issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-3481\")\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\n\n/* REST API per Generazione ODA */\nrequestMethod = \"POST\";\ndef relatesInIssueLink=false\ndef relatesOutIssueLink=false\ndef linkedTickets=new ArrayList()\nList&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\nfor (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n\n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString()) &amp;&amp; issueLink.getSourceObject().status.name == \"Completed to be Closed\"){\n        relatesInIssueLink=true\n        linkedTickets.add(issueLink.getSourceObject().toString())\n        log.debug \"Issue con relatesInIssueLink\"\n    }\n}\nList&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\nfor (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n\n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString()) &amp;&amp; issueLink.getDestinationObject().status.name == \"Completed to be Closed\"){\n        relatesOutIssueLink=true\n        linkedTickets.add(issueLink.getDestinationObject().toString())\n        log.debug \"Issue con relatesOutIssueLink\"\n    }\n}\n\ndef body_req\n\nif(relatesInIssueLink || relatesOutIssueLink){\n    body_req = [\n        \"issueKey\": issue.key,\n        \"linkedTickets\": linkedTickets\n    ]\n}else{\n    body_req = [\n        \"issueKey\": issue.key\n    ]\n}\n\n\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/purchase/order/create\"\nurl = new URL(baseURL)\nconnection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.outputStream\nlog.debug \"url: \" + url\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\nlog.debug connection.outputStream\nconnection.connect();\n\ndef output = new ArrayList()\ndef eList = new ArrayList()\ndef eListErrors = new ArrayList()\ndef errorMsgs = new ArrayList()\nlog.debug \"ResponseCode:\" + connection.getResponseCode()\nlog.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n    log.debug \"Response: \" + connection\n    def outputMsg = ((HttpURLConnection)connection).errorStream.text\n    log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n    \n    def jsonSlurper = new JsonSlurper()\n    def json_object = jsonSlurper.parseText(outputMsg)\n    assert json_object instanceof Map  \n    log.debug \"message: \" +  json_object.message\n    \n    def errorType = json_object.level\n\tlog.debug \"json_object.number: \" + json_object.number\n\n    /*if json_object.number != null &amp;&amp; errorType = W --&gt; l'ODA \u00e8 stato creato ma \u00e8 necessario risolvere le seguenti anomalie direttamente su SAP*/\n    if (!json_object.number){\n        eListErrors.add(\"E\")\n\t\teListErrors.add(\"OP-SAP-ODA\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0].toString())\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n    //throw new InvalidInputException(\"E\", output.toString())\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import groovy.json.JsonSlurper
import org.apache.log4j.Category
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)
import com.atlassian.jira.issue.link.IssueLink

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def requestMethod
def baseURL

URL url
HttpURLConnection connection

/* REST API per Generazione ODA */
requestMethod = "POST";
def relatesInIssueLink=false
def relatesOutIssueLink=false
def linkedTickets=new ArrayList()
List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesInIssueLink=true
        linkedTickets.add(issueLink.getSourceObject().toString())
        log.debug "Issue con relatesInIssueLink"
    }
}
List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesOutIssueLink=true
        linkedTickets.add(issueLink.getDestinationObject().toString())
        log.debug "Issue con relatesOutIssueLink"
    }
}

def body_req

if(relatesInIssueLink || relatesOutIssueLink){
    body_req = [
        "issueKey": issue.key,
        "linkedTickets": linkedTickets
    ]
}else{
    body_req = [
        "issueKey": issue.key
    ]
}


baseURL = "http://" + properties['api.env'].toString() + "/op/rest/jira/AA/purchase/order/create"
url = new URL(baseURL)
connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.outputStream
log.debug "url: " + url
connection.outputStream.withWriter("UTF-8") { new StreamingJsonBuilder(it, body_req) }
log.debug connection.outputStream
connection.connect();

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()
    log.debug "Response: " + connection
    def outputMsg = ((HttpURLConnection)connection).errorStream.text
    log.debug "((HttpURLConnection)connection).errorStream.text: " + outputMsg
    
    def jsonSlurper = new JsonSlurper()
    def json_object = jsonSlurper.parseText(outputMsg)
    assert json_object instanceof Map  
    log.debug "message: " +  json_object.message
    
    eListErrors.add("E")
    eListErrors.add("OP-SAP-ODA")
    errorMsgs.add(connection.getResponseCode() + " " + json_object.message)
    eListErrors.add(errorMsgs)
    eList.add(eListErrors)
    
    output.add(eList)
    throw new InvalidInputException('{"E":"' + output.toString() + '"}')
    //throw new InvalidInputException("E", output.toString())
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">OP Email Notification: PURCHASE_ORDER_TO_SUPPLIER</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import org.apache.log4j.Category
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def requestMethod
def baseURL

URL url
HttpURLConnection connection

requestMethod = "POST";
def body_req = [
    "templateName": "PURCHASE_ORDER_TO_SUPPLIER",
    "pec": false,
    "issueKey": issue.key
]

baseURL = "http://" + properties['api.env'].toString() + "/op/rest/jira/AA/transaction/mail/send"
url = new URL(baseURL)
connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.outputStream
connection.outputStream.withWriter("UTF-8") { new StreamingJsonBuilder(it, body_req) }
log.debug connection.outputStream
connection.connect();

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()
    eListErrors.add("E")
    eListErrors.add("SENDMAIL")
    errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
    eListErrors.add(errorMsgs)
    eList.add(eListErrors)

    output.add(eList)
    throw new InvalidInputException("E", output.toString())
}else{
    
    //Update custom field OPAA_PURCHASE_ORDER_DATE
    
}</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_ACTION">181 Tkt Chiuso</arg>
                  <arg name="FIELD_NOTES">OP: Close tkt if ODV and ODA have been created</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.FasttrackTransition</arg>
                  <arg name="FIELD_CONDITION">cfValues['OP_SALES_ORDER'] != null &amp;&amp; cfValues['OP_SALES_ORDER_DATE'] != null &amp;&amp; cfValues['OP_SALES_ORDER_TOTAL'] != null|||</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_TRANSITION_OPTIONS" />
                  <arg name="FIELD_ADDITIONAL_SCRIPT">`!`</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="181" name="Tkt Chiuso" view="fieldscreen">
          <meta name="opsbar-sequence">70</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19925</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">e94c2b2e-e5aa-4a24-a37e-7b5d16b043f5</arg>
              <arg name="FIELD_NOTES">SAP: update SN status</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\ndef supplier =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplier'] ? properties['cf.supplier'].toString() : \"OP_SUPPLIER\")[0]\ndef sapSN =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_NOTIFICATION\")[0]\n\nURL url\nHttpURLConnection connection\n\nif(issue.issueType.name != \"Planned Maintenance Ticket\" &amp;&amp; issue.getCustomFieldValue(sapSN) != null){\n    requestMethod = \"POST\";\n\n    def body_req = []\n    body_req = [\n        \"issueKey\": issue.key,\n        \"status\": \"CLO\"\n    ] \n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n    log.debug \"body_req SN: \" + body_req\n    log.debug \"baseURL SN: \" + baseURL\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-SAP-SN-UPDATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }else{\n        /** SERVICE ORDER UPDATE **/\n        body_req = [\n            \"issueKey\": issue.key\n        ] \n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\n\n        log.debug \"baseURL SO: \" + baseURL\n        log.debug \"body_req SO: \" + body_req\n        url = new URL(baseURL)\n        connection = (HttpURLConnection)url.openConnection();\n        connection.setRequestMethod(requestMethod);\n        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n        connection.setRequestProperty(\"Accept\", \"*/*\");\n        connection.setDoOutput(true);\n        connection.setDoInput(true);\n        connection.outputStream\n        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n        log.debug connection.outputStream\n        connection.connect();\n\n        output = new ArrayList()\n        eList = new ArrayList()\n        eListErrors = new ArrayList()\n        errorMsgs = new ArrayList()\n\t\tlog.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n            log.debug \"url: \" + url\n            log.debug \"ResponseCode:\" + connection.getResponseCode()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n            \n            def outputMsg = ((HttpURLConnection)connection).errorStream.text\n    \t\tlog.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n            \n            def jsonSlurper = new JsonSlurper()\n            def json_object = jsonSlurper.parseText(outputMsg)\n            assert json_object instanceof Map  \n            log.debug \"message: \" +  json_object.message\n            log.debug \"errors: \" +  json_object.errors.toString()\n            \n            eListErrors.add(\"E\")\n            eListErrors.add(\"OP-SAP-SO-CREATE\")\n            errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n            eListErrors.add(errorMsgs)\n            eList.add(eListErrors)\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        }else{\n            /** DA FARE SC SOLO IN CASO DI TECNICI INTERNI **/\n            if(issue.getCustomFieldValue(supplier)==null){ /** se OP_SUPPLIER = NULL il ticket ha proseguito sul flusso tecnici interni **/\n\n                body_req = [\n                    \"issueKey\": issue.key,\n                ] \n\n                baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/order/confirmation\"\n                log.debug \"body_req SC: \" + body_req\n                log.debug \"baseURL SC: \" + baseURL\n                url = new URL(baseURL)\n                connection = (HttpURLConnection)url.openConnection();\n                connection.setRequestMethod(requestMethod);\n                connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n                connection.setRequestProperty(\"Accept\", \"*/*\");\n                connection.setDoOutput(true);\n                connection.setDoInput(true);\n                connection.outputStream\n                connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n                log.debug connection.outputStream\n                connection.connect();\n\n                output = new ArrayList()\n                eList = new ArrayList()\n                eListErrors = new ArrayList()\n                errorMsgs = new ArrayList()\n\n                if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n                    log.debug \"url: \" + url\n                    log.debug \"ResponseCode:\" + connection.getResponseCode()\n                    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n                    eListErrors.add(\"E\")\n                    eListErrors.add(\"OP-SAP-SC-CREATE\")\n                    errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n                    eListErrors.add(errorMsgs)\n                    eList.add(eListErrors)\n\n                    output.add(eList)\n                    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n                }\n            }\n        }\n    }\n}\n","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">f1d1522d-5b09-4510-bcb6-abc0e5c6dbc7</arg>
              <arg name="FIELD_NOTES">OP: Doc Template generation - se New Installation - Genera CE_DOCUMENTATION - per issue corrente e collegati solo se MANUFACTURER = FAAC</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.opensymphony.workflow.WorkflowException;\nimport com.opensymphony.workflow.InvalidInputException\nimport groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport groovyx.net.http.HTTPBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport com.atlassian.jira.issue.link.IssueLink\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager()\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-17634\")\n\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyCE'] ? properties['cf.automaticallyCE'].toString() : \"OP_AUTOMATICALLY_CE\")[0]\n\n//insight classes &amp; components\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\ndef requestMethod\ndef baseURL\n\ndef firstTicket =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.firstTkt'].toString())[0]\nString assetCF = properties['cf.asset'] ? properties['cf.asset'].toString() : \"OP_ASSET\"\ndef asset = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(assetCF)[0]\ndef assetValue = issue.getCustomFieldValue(asset)\n\nlog.debug \"asset: \" + asset + \", assetValue: \" + assetValue[0] + \" - from \" + assetValue[0].toString().indexOf('(')+1\n\ndef assetKey = assetValue[0].toString().substring(assetValue[0].toString().indexOf('(')+1,assetValue[0].toString().indexOf(')'))\n\ndef assetObject = objectFacade.loadObjectBean(assetKey)\n//get \"MANUFACTURER\" for asset\n\ndef obTriage\ndef manufacturer\nlog.debug objectFacade.loadObjectAttributeBean(assetObject.getId(), \"MANUFACTURER\")\nif(objectFacade.loadObjectAttributeBean(assetObject.getId(), \"MANUFACTURER\")){\n    obTriage = objectFacade.loadObjectAttributeBean(assetObject.getId(), \"MANUFACTURER\").createMutable()\n    manufacturer = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n}\n\nlog.debug issue.getIssueType().name\nlog.debug issue.getCustomFieldValue(firstTicket)\n\nif(manufacturer.toString().equals(\"FAAC\")){\n    log.debug \"manufacturer: \" + manufacturer + \" --&gt; genero documentazione CE\"\n    /* REST API per generazione documentazione CE */\n    requestMethod = \"GET\";\n\n    if(issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"Yes\")){\n        if(issue.getIssueType().name.toString().equals(properties['it.newInstallation'])){\n            baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/document/generation/check?ISSUE_KEY=\"+ assetObject.getId().toString() +\"&amp;DOC_CATEGORY=CE_DOCUMENTATION&amp;ISSUE_KEY_FOR_CE_DOC=\" + issue.key\n            log.debug baseURL\n            URL url = new URL(baseURL)\n            HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n            connection.setRequestMethod(requestMethod);\n            connection.setRequestProperty(\"Content-Type\", \"application/json\");\n            connection.setRequestProperty(\"Accept\", \"*/*\");\n            connection.setDoOutput(true);\n            connection.setDoInput(true);\n            connection.connect();\n\n            def output = new ArrayList()\n            def eList = new ArrayList()\n            def eListErrors = new ArrayList()\n            def errorMsgs = new ArrayList()\n\n            log.debug \"url: \" + url\n            log.debug \"ResponseCode:\" + connection.getResponseCode()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n            if (!connection.getResponseCode().toString().equals(\"200\")){\n                log.debug \"url: \" + url\n                log.debug \"ResponseCode:\" + connection.getResponseCode()\n                log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n                log.debug \"ErrorStream: \" + connection.getErrorStream().toString()\n                log.debug \"getHeaderFields(): \" + connection.getHeaderFields()\n                def outputMsg = ((HttpURLConnection)connection).errorStream.text\n                log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n                def jsonSlurper = new JsonSlurper()\n                def json_object = jsonSlurper.parseText(outputMsg)\n                assert json_object instanceof Map  \n                log.debug \"message: \" +  json_object.message\n\n                eListErrors.add(\"E\")\n                eListErrors.add(\"OP-DOCS\")\n                errorMsgs.add(connection.getResponseCode() + \" \" + json_object.message)\n                eListErrors.add(errorMsgs)\n                eList.add(eListErrors)\n\n                output.add(eList)\n                throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n                //throw new InvalidInputException(\"E\", output.toString())\n            }\n        }\n    }\n\n    def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n    def issueService = ComponentAccessor.getIssueService()\n\n    if(issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"No\")){\n        List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\n        for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n            IssueLink issueLink = (IssueLink) outIterator.next();\n\n            if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n                log.warn \"Issue con relatesInIssueLink\"\n                /*Eseguire transazione di stato della sourceIssue*/\n                def linkedIssue = issueLink.getSourceObject()\n\n                assetValue = linkedIssue.getCustomFieldValue(asset)\n                log.debug \"asset: \" + asset + \", assetValue: \" + assetValue[0] + \" - from \" + assetValue[0].toString().indexOf('(')+1\n                assetKey = assetValue[0].toString().substring(assetValue[0].toString().indexOf('(')+1,assetValue[0].toString().indexOf(')'))\n                assetObject = objectFacade.loadObjectBean(assetKey)\n                \n                log.debug objectFacade.loadObjectAttributeBean(assetObject.getId(), \"MANUFACTURER\")\n                if(objectFacade.loadObjectAttributeBean(assetObject.getId(), \"MANUFACTURER\")){\n                    obTriage = objectFacade.loadObjectAttributeBean(assetObject.getId(), \"MANUFACTURER\").createMutable()\n                    manufacturer = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n                }\n\n                if(linkedIssue.getIssueType().name.toString().equals(properties['it.newInstallation']) &amp;&amp; manufacturer.toString().equals(\"FAAC\")){\n                    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/document/generation/check?ISSUE_KEY=\"+ assetObject.getId().toString() +\"&amp;DOC_CATEGORY=CE_DOCUMENTATION&amp;ISSUE_KEY_FOR_CE_DOC=\" + linkedIssue.key\n                    log.debug baseURL\n                    URL url = new URL(baseURL)\n                    HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n                    connection.setRequestMethod(requestMethod);\n                    connection.setRequestProperty(\"Content-Type\", \"application/json\");\n                    connection.setRequestProperty(\"Accept\", \"*/*\");\n                    connection.setDoOutput(true);\n                    connection.setDoInput(true);\n                    connection.connect();\n\n                    def output = new ArrayList()\n                    def eList = new ArrayList()\n                    def eListErrors = new ArrayList()\n                    def errorMsgs = new ArrayList()\n\n                    log.debug \"url: \" + url\n                    log.debug \"ResponseCode:\" + connection.getResponseCode()\n                    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n                    if (!connection.getResponseCode().toString().equals(\"200\")){\n                        log.debug \"url: \" + url\n                        log.debug \"ResponseCode:\" + connection.getResponseCode()\n                        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n                        log.debug \"ErrorStream: \" + connection.getErrorStream().toString()\n                        log.debug \"getHeaderFields(): \" + connection.getHeaderFields()\n                        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n                        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n                        def jsonSlurper = new JsonSlurper()\n                        def json_object = jsonSlurper.parseText(outputMsg)\n                        assert json_object instanceof Map  \n                        log.debug \"message: \" +  json_object.message\n\n                        eListErrors.add(\"E\")\n                        eListErrors.add(\"OP-DOCS\")\n                        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.message)\n                        eListErrors.add(errorMsgs)\n                        eList.add(eListErrors)\n\n                        output.add(eList)\n                        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n                        //throw new InvalidInputException(\"E\", output.toString())\n                    }\n                }\n\n            }\n        }\n\n        List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\n        for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n            IssueLink issueLink = (IssueLink) outIterator.next();\n\n            if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n                log.warn \"Issue con relatesOutIssueLink\"\n                /*Eseguire transazione di stato della destinationIssue*/\n                def linkedIssue = issueLink.getDestinationObject()\n\n                assetValue = linkedIssue.getCustomFieldValue(asset)\n                log.debug \"asset: \" + asset + \", assetValue: \" + assetValue[0] + \" - from \" + assetValue[0].toString().indexOf('(')+1\n                assetKey = assetValue[0].toString().substring(assetValue[0].toString().indexOf('(')+1,assetValue[0].toString().indexOf(')'))\n                assetObject = objectFacade.loadObjectBean(assetKey)\n\n                log.debug objectFacade.loadObjectAttributeBean(assetObject.getId(), \"MANUFACTURER\")\n                if(objectFacade.loadObjectAttributeBean(assetObject.getId(), \"MANUFACTURER\")){\n                    obTriage = objectFacade.loadObjectAttributeBean(assetObject.getId(), \"MANUFACTURER\").createMutable()\n                    manufacturer = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n                }\n\n                if(linkedIssue.getIssueType().name.toString().equals(properties['it.newInstallation']) &amp;&amp; manufacturer.toString().equals(\"FAAC\")){\n                    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/document/generation/check?ISSUE_KEY=\"+ assetObject.getId().toString() +\"&amp;DOC_CATEGORY=CE_DOCUMENTATION&amp;ISSUE_KEY_FOR_CE_DOC=\" + linkedIssue.key\n                    log.debug baseURL\n                    URL url = new URL(baseURL)\n                    HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n                    connection.setRequestMethod(requestMethod);\n                    connection.setRequestProperty(\"Content-Type\", \"application/json\");\n                    connection.setRequestProperty(\"Accept\", \"*/*\");\n                    connection.setDoOutput(true);\n                    connection.setDoInput(true);\n                    connection.connect();\n\n                    def output = new ArrayList()\n                    def eList = new ArrayList()\n                    def eListErrors = new ArrayList()\n                    def errorMsgs = new ArrayList()\n\n                    log.debug \"url: \" + url\n                    log.debug \"ResponseCode:\" + connection.getResponseCode()\n                    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n                    if (!connection.getResponseCode().toString().equals(\"200\")){\n                        log.debug \"url: \" + url\n                        log.debug \"ResponseCode:\" + connection.getResponseCode()\n                        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n                        log.debug \"ErrorStream: \" + connection.getErrorStream().toString()\n                        log.debug \"getHeaderFields(): \" + connection.getHeaderFields()\n                        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n                        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n                        def jsonSlurper = new JsonSlurper()\n                        def json_object = jsonSlurper.parseText(outputMsg)\n                        assert json_object instanceof Map  \n                        log.debug \"message: \" +  json_object.message\n\n                        eListErrors.add(\"E\")\n                        eListErrors.add(\"OP-DOCS\")\n                        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.message)\n                        eListErrors.add(errorMsgs)\n                        eList.add(eListErrors)\n\n                        output.add(eList)\n                        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n                        //throw new InvalidInputException(\"E\", output.toString())\n                    }\n                }\n            }\n        }\n    }\n}else{\n    log.debug \"manufacturer: \" + manufacturer + \" --&gt; NON genero documentazione CE\"\n}\n","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="7">
              <post-functions>
                <function type="class">
                  <arg name="field.copyFieldSource1" />
                  <arg name="textValue">-1</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="workflowName-textValue">OPAA: PM Task Workflow</arg>
                  <arg name="performTransitionAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="scopeType">PARENT</arg>
                  <arg name="destination-scopeTarget">SUB_TASK</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitieslinkedtransition-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="{^êÕj[">51</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.linkedtransition.LinkedTransitionFunction</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="status" />
                </function>
                <function type="class">
                  <arg name="field.name">resolution</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
                  <arg name="field.value">6</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">q½_ó~tñÞ{ó~¼mÍ÷ëÏ\}î5çN{}¾{u®8</arg>
                  <arg name="FIELD_NOTES">OP: Doc Template generation - se New Installation - Genera CE_DOCUMENTATION - per issue corrente e collegati</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.opensymphony.workflow.WorkflowException;\nimport com.opensymphony.workflow.InvalidInputException\nimport groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport groovyx.net.http.HTTPBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport com.atlassian.jira.issue.link.IssueLink\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyCE'] ? properties['cf.automaticallyCE'].toString() : \"OP_AUTOMATICALLY_CE\")[0]\n\n//insight classes &amp; components\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\ndef requestMethod\ndef baseURL\n\ndef firstTicket =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.firstTkt'].toString())[0]\nString assetCF = properties['cf.asset'] ? properties['cf.asset'].toString() : \"OP_ASSET\"\ndef asset = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(assetCF)[0]\ndef assetValue = issue.getCustomFieldValue(asset)\n\nlog.debug \"asset: \" + asset + \", assetValue: \" + assetValue[0] + \" - from \" + assetValue[0].toString().indexOf('(')+1\n\ndef assetKey = assetValue[0].toString().substring(assetValue[0].toString().indexOf('(')+1,assetValue[0].toString().indexOf(')'))\n\ndef assetObject = objectFacade.loadObjectBean(assetKey)\n\nlog.debug issue.getIssueType().name\nlog.debug issue.getCustomFieldValue(firstTicket)\n\n\n/* REST API per Invio Notifica Email ONSITE_REPORT */\nrequestMethod = \"GET\";\n\nif(issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"No\")){\n    if(issue.getIssueType().name.toString().equals(properties['it.newInstallation'])){\n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/document/generation/check?ISSUE_KEY=\"+ assetObject.getId().toString() +\"&amp;DOC_CATEGORY=CE_DOCUMENTATION&amp;ISSUE_KEY_FOR_CE_DOC=\" + issue.key\n        log.debug baseURL\n        URL url = new URL(baseURL)\n        HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n        connection.setRequestMethod(requestMethod);\n        connection.setRequestProperty(\"Content-Type\", \"application/json\");\n        connection.setRequestProperty(\"Accept\", \"*/*\");\n        connection.setDoOutput(true);\n        connection.setDoInput(true);\n        connection.connect();\n\n        def output = new ArrayList()\n        def eList = new ArrayList()\n        def eListErrors = new ArrayList()\n        def errorMsgs = new ArrayList()\n\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n        if (!connection.getResponseCode().toString().equals(\"200\")){\n            log.debug \"url: \" + url\n            log.debug \"ResponseCode:\" + connection.getResponseCode()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n            log.debug \"ErrorStream: \" + connection.getErrorStream().toString()\n            log.debug \"getHeaderFields(): \" + connection.getHeaderFields()\n            def outputMsg = ((HttpURLConnection)connection).errorStream.text\n            log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n            def jsonSlurper = new JsonSlurper()\n            def json_object = jsonSlurper.parseText(outputMsg)\n            assert json_object instanceof Map  \n            log.debug \"message: \" +  json_object.message\n\n            eListErrors.add(\"E\")\n            eListErrors.add(\"OP-DOCS\")\n            errorMsgs.add(connection.getResponseCode() + \" \" + json_object.message)\n            eListErrors.add(errorMsgs)\n            eList.add(eListErrors)\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n            //throw new InvalidInputException(\"E\", output.toString())\n        }\n    }\n}\n\ndef user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\ndef issueService = ComponentAccessor.getIssueService()\n\nif(issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"No\")){\n    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            log.warn \"Issue con relatesInIssueLink\"\n            /*Eseguire transazione di stato della sourceIssue*/\n            def linkedIssue = issueLink.getSourceObject()\n            \n            assetValue = linkedIssue.getCustomFieldValue(asset)\n\t\t\tlog.debug \"asset: \" + asset + \", assetValue: \" + assetValue[0] + \" - from \" + assetValue[0].toString().indexOf('(')+1\n            assetKey = assetValue[0].toString().substring(assetValue[0].toString().indexOf('(')+1,assetValue[0].toString().indexOf(')'))\n            assetObject = objectFacade.loadObjectBean(assetKey)\n            \n            if(linkedIssue.getIssueType().name.toString().equals(properties['it.newInstallation'])){\n                baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/document/generation/check?ISSUE_KEY=\"+ assetObject.getId().toString() +\"&amp;DOC_CATEGORY=CE_DOCUMENTATION&amp;ISSUE_KEY_FOR_CE_DOC=\" + linkedIssue.key\n                log.debug baseURL\n                URL url = new URL(baseURL)\n                HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n                connection.setRequestMethod(requestMethod);\n                connection.setRequestProperty(\"Content-Type\", \"application/json\");\n                connection.setRequestProperty(\"Accept\", \"*/*\");\n                connection.setDoOutput(true);\n                connection.setDoInput(true);\n                connection.connect();\n\n                def output = new ArrayList()\n                def eList = new ArrayList()\n                def eListErrors = new ArrayList()\n                def errorMsgs = new ArrayList()\n\n                log.debug \"url: \" + url\n                log.debug \"ResponseCode:\" + connection.getResponseCode()\n                log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n                if (!connection.getResponseCode().toString().equals(\"200\")){\n                    log.debug \"url: \" + url\n                    log.debug \"ResponseCode:\" + connection.getResponseCode()\n                    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n                    log.debug \"ErrorStream: \" + connection.getErrorStream().toString()\n                    log.debug \"getHeaderFields(): \" + connection.getHeaderFields()\n                    def outputMsg = ((HttpURLConnection)connection).errorStream.text\n                    log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n                    def jsonSlurper = new JsonSlurper()\n                    def json_object = jsonSlurper.parseText(outputMsg)\n                    assert json_object instanceof Map  \n                    log.debug \"message: \" +  json_object.message\n\n                    eListErrors.add(\"E\")\n                    eListErrors.add(\"OP-DOCS\")\n                    errorMsgs.add(connection.getResponseCode() + \" \" + json_object.message)\n                    eListErrors.add(errorMsgs)\n                    eList.add(eListErrors)\n\n                    output.add(eList)\n                    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n                    //throw new InvalidInputException(\"E\", output.toString())\n                }\n            }\n\n        }\n    }\n    \n    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            log.warn \"Issue con relatesOutIssueLink\"\n            /*Eseguire transazione di stato della destinationIssue*/\n            def linkedIssue = issueLink.getDestinationObject()\n            \n            assetValue = linkedIssue.getCustomFieldValue(asset)\n\t\t\tlog.debug \"asset: \" + asset + \", assetValue: \" + assetValue[0] + \" - from \" + assetValue[0].toString().indexOf('(')+1\n            assetKey = assetValue[0].toString().substring(assetValue[0].toString().indexOf('(')+1,assetValue[0].toString().indexOf(')'))\n            assetObject = objectFacade.loadObjectBean(assetKey)\n            \n            if(linkedIssue.getIssueType().name.toString().equals(properties['it.newInstallation'])){\n                baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/document/generation/check?ISSUE_KEY=\"+ assetObject.getId().toString() +\"&amp;DOC_CATEGORY=CE_DOCUMENTATION&amp;ISSUE_KEY_FOR_CE_DOC=\" + linkedIssue.key\n                log.debug baseURL\n                URL url = new URL(baseURL)\n                HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n                connection.setRequestMethod(requestMethod);\n                connection.setRequestProperty(\"Content-Type\", \"application/json\");\n                connection.setRequestProperty(\"Accept\", \"*/*\");\n                connection.setDoOutput(true);\n                connection.setDoInput(true);\n                connection.connect();\n\n                def output = new ArrayList()\n                def eList = new ArrayList()\n                def eListErrors = new ArrayList()\n                def errorMsgs = new ArrayList()\n\n                log.debug \"url: \" + url\n                log.debug \"ResponseCode:\" + connection.getResponseCode()\n                log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n                if (!connection.getResponseCode().toString().equals(\"200\")){\n                    log.debug \"url: \" + url\n                    log.debug \"ResponseCode:\" + connection.getResponseCode()\n                    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n                    log.debug \"ErrorStream: \" + connection.getErrorStream().toString()\n                    log.debug \"getHeaderFields(): \" + connection.getHeaderFields()\n                    def outputMsg = ((HttpURLConnection)connection).errorStream.text\n                    log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n                    def jsonSlurper = new JsonSlurper()\n                    def json_object = jsonSlurper.parseText(outputMsg)\n                    assert json_object instanceof Map  \n                    log.debug \"message: \" +  json_object.message\n\n                    eListErrors.add(\"E\")\n                    eListErrors.add(\"OP-DOCS\")\n                    errorMsgs.add(connection.getResponseCode() + \" \" + json_object.message)\n                    eListErrors.add(errorMsgs)\n                    eList.add(eListErrors)\n\n                    output.add(eList)\n                    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n                    //throw new InvalidInputException(\"E\", output.toString())\n                }\n            }\n        }\n    }\n}","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import com.opensymphony.workflow.WorkflowException;
import com.opensymphony.workflow.InvalidInputException
import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import org.apache.log4j.Category
import groovyx.net.http.HTTPBuilder
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
//insight classes &amp; components
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

def requestMethod
def baseURL

def firstTicket =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.firstTkt'].toString())[0]
String assetCF = properties['cf.asset'] ? properties['cf.asset'].toString() : "OP_ASSET"
def asset = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(assetCF)[0]
def assetValue = issue.getCustomFieldValue(asset)

log.debug "asset: " + asset + ", assetValue: " + assetValue[0] + " - from " + assetValue[0].toString().indexOf('(')+1

def assetKey = assetValue[0].toString().substring(assetValue[0].toString().indexOf('(')+1,assetValue[0].toString().indexOf(')'))

def assetObject = objectFacade.loadObjectBean(assetKey)

log.debug issue.getIssueType().name
log.debug issue.getCustomFieldValue(firstTicket)


/* REST API per Invio Notifica Email ONSITE_REPORT */
requestMethod = "GET";

if(issue.getIssueType().name.toString().equals(properties['it.newInstallation'])){
    baseURL = "http://" + properties['api.env'].toString() + "/op/rest/automation/document/generation/check?ISSUE_KEY="+ assetObject.getId().toString() +"&amp;DOC_CATEGORY=CE_DOCUMENTATION"
    log.debug baseURL
    URL url = new URL(baseURL)
    HttpURLConnection connection = (HttpURLConnection)url.openConnection();
    connection.setRequestMethod(requestMethod);
    connection.setRequestProperty("Content-Type", "application/json");
    connection.setRequestProperty("Accept", "*/*");
    connection.setDoOutput(true);
    connection.setDoInput(true);
    connection.connect();

    def output = new ArrayList()
    def eList = new ArrayList()
    def eListErrors = new ArrayList()
    def errorMsgs = new ArrayList()

    if (!connection.getResponseCode().toString().equals("200")){
        log.debug "url: " + url
        log.debug "ResponseCode:" + connection.getResponseCode()
        log.debug "ResponseMessage:" + connection.getResponseMessage()
        log.debug "ErrorStream: " + connection.getErrorStream().toString()
        log.debug "getHeaderFields(): " + connection.getHeaderFields()
        def outputMsg = ((HttpURLConnection)connection).errorStream.text
        log.debug "((HttpURLConnection)connection).errorStream.text: " + outputMsg

        def jsonSlurper = new JsonSlurper()
        def json_object = jsonSlurper.parseText(outputMsg)
        assert json_object instanceof Map  
        log.debug "message: " +  json_object.message

        eListErrors.add("E")
        eListErrors.add("OP-DOCS")
        errorMsgs.add(connection.getResponseCode() + " " + json_object.message)
        eListErrors.add(errorMsgs)
        eList.add(eListErrors)

        output.add(eList)
        throw new InvalidInputException("E", output.toString())
    }
}
</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="v+nWù">¶»ž</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">d218642b-8282-4ed9-bfa6-22fd4f196c49</arg>
                  <arg name="FIELD_NOTES">OP: New Installation - Check linkedTickets &amp; Fast-Transact them</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.link.IssueLink\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nCategory log = Category.getInstance(\"com.onresolve.jira.groovy.PostFunction\")\nlog.setLevel(org.apache.log4j.Level.WARN)\n\nlog.warn \"${issue.key} Transazione TKT CHIUSO - Post Function check linkedIssues\"\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'] ? properties['cf.automaticallyClosed'].toString() : \"OP_AUTOMATICALLY_CLOSED\")[0]\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\n\nIssue issue = issue\n//Per test da console\n//issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-276\")\n\n/*DEV*/\nCLOSE_TKT = properties['wf.tr.close'] ? properties['wf.tr.close'] : 181\n\n/*PROD*/\n//CONFIRM_TO_CUSTOMER\n\ndef user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\ndef issueService = ComponentAccessor.getIssueService()\n\n/*Se eseguo la confirm to customer su un ticket con 1 o + ticket collegati, verifico e sposto in automatico gli eventuali ticket collegati*/\nlog.warn \"verifico e sposto in automatico gli eventuali ticket collegati\"\n\nif(issue.getIssueType().getName() == properties['it.newInstallation'].toString() &amp;&amp; issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"No\")){\n    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            log.warn \"Issue con relatesInIssueLink\"\n            /*Eseguire transazione di stato della sourceIssue*/\n            def linkedIssue = issueLink.getSourceObject()\n            def linkedIssueStatus = linkedIssue.getStatus()\n            def transitionId\n            if(linkedIssueStatus.name == (properties['wf.completedToBeClosed'] ? properties['wf.completedToBeClosed'].toString() : \"Completed to be Closed\") ){\n                transitionId=CLOSE_TKT\n            }\n            if(transitionId==CLOSE_TKT){\n                // Prepare our input for the transition\n                def issueInputParameters = issueService.newIssueInputParameters()\n                issueInputParameters.with {\n                    setSkipScreenCheck(true)\n                }\n                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)\n                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), \"Yes\") \n                //log.warn \"issueInputParameters: \" + issueInputParameters\n                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n                def mi = (MutableIssue) linkedIssue\n\n                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)\n                log.warn \"fieldConfig: \" + fieldConfig\n                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())\n\n                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n                issueIndexingService.reIndex(linkedIssue)\n                log.warn \"Updated customfield - issue linkata\"\n\n                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)\n                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {\n                    // Perform the transition\n                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))\n                    if (! issueResult.isValid()) {\n                        log.warn(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n                    }else{\n                        log.warn(\"Transazione fatta 79 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}\")\n                    }\n                } else {\n                    log.warn(\"Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}\")\n                }\n            }\n        }\n    }\n\n    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            log.warn \"Issue con relatesOutIssueLink\"\n            /*Eseguire transazione di stato della destinationIssue*/\n            def linkedIssue = issueLink.getDestinationObject()\n            def linkedIssueStatus = linkedIssue.getStatus()\n            def transitionId\n            log.warn \"linkedIssue: \" + linkedIssue\n            log.warn \"linkedIssueStatus.name: \" + linkedIssueStatus.name\n            if(linkedIssueStatus.name == (properties['wf.completedToBeClosed'] ? properties['wf.completedToBeClosed'].toString() : \"Completed to be Closed\")){\n                transitionId=CLOSE_TKT\n            }\n\n            if(transitionId==CLOSE_TKT){\n                // Prepare our input for the transition\n                def issueInputParameters = issueService.newIssueInputParameters()\n                issueInputParameters.with {\n                    setSkipScreenCheck(true)\n                }\n                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)\n                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), \"Yes\") \n\n                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n                def mi = (MutableIssue) linkedIssue\n\n                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)\n                log.warn \"fieldConfig: \" + fieldConfig\n                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())\n\n                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n                issueIndexingService.reIndex(linkedIssue)\n                log.warn \"Updated customfield - issue linkata\"\n\n                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {\n                    // Perform the transition\n                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))\n                    if (! issueResult.isValid()) {\n                        log.warn(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n                    }else{\n                        log.warn(\"Transazione fatta 122 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}\")\n                    }\n                } else {\n                    log.warn(\"Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}\")\n                }\n            }\n\n        }\n    }\n}","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService
import org.apache.log4j.Category
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.link.IssueLink
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.WARN)

log.warn "${issue.key} Transazione TKT CHIUSO - Post Function check linkedIssues"

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyDone'] ? properties['cf.automaticallyDone'].toString() : "OP_AUTOMATICALLY_DONE")[0]
IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)

Issue issue = issue
//Per test da console
//issue = issueManager.getIssueByKeyIgnoreCase("OPUT-276")

/*DEV*/
CLOSE_TKT = properties['wf.tr.close'] ? properties['wf.tr.close'] : 181

/*PROD*/
//CONFIRM_TO_CUSTOMER

def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
def issueService = ComponentAccessor.getIssueService()

/*Se eseguo la confirm to customer su un ticket con 1 o + ticket collegati, verifico e sposto in automatico gli eventuali ticket collegati*/
log.warn "verifico e sposto in automatico gli eventuali ticket collegati"

if(issue.getIssueType().getName() == properties['it.newInstallation'].toString() &amp;&amp; issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals("No")){
    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            log.warn "Issue con relatesInIssueLink"
            /*Eseguire transazione di stato della sourceIssue*/
            def linkedIssue = issueLink.getSourceObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            def transitionId
            if(linkedIssueStatus.name == (properties['wf.completedToBeClosed'] ? properties['wf.completedToBeClosed'].toString() : "Completed to be Closed") ){
                transitionId=CLOSE_TKT
            }
            if(transitionId==CLOSE_TKT){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(true)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                //log.warn "issueInputParameters: " + issueInputParameters
                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"

                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 79 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }
        }
    }

    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            log.warn "Issue con relatesOutIssueLink"
            /*Eseguire transazione di stato della destinationIssue*/
            def linkedIssue = issueLink.getDestinationObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            def transitionId
            log.warn "linkedIssue: " + linkedIssue
            log.warn "linkedIssueStatus.name: " + linkedIssueStatus.name
            if(linkedIssueStatus.name == (properties['wf.completedToBeClosed'] ? properties['wf.completedToBeClosed'].toString() : "Completed to be Closed")){
                transitionId=CLOSE_TKT
            }

            if(transitionId==CLOSE_TKT){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(true)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 

                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"

                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 122 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }

        }
    }
}</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="191" name="Invia Consuntivo al Cliente" view="fieldscreen">
          <meta name="opsbar-sequence">30</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19911</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">a0f5c2ba-110e-404e-99b7-f01f177a8cfe</arg>
                <arg name="FIELD_NOTES">Enabled only for Repair Ticket &amp; PM Ticket</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"issue.issueType.name == 'Maintenance Ticket' || issue.issueType.name == 'Planned Maintenance Ticket'","scriptPath":null,"parameters":{}}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">fada32c2-b768-4770-816d-beeac0f8e084</arg>
                <arg name="FIELD_NOTES">OP: Check FINANCIAL_STATEMENT_TO_CUSTOMER - If it's null the email has not been sent yet</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"import com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\ncfValues[properties['cf.wfFinancialStatmToC']] == null","scriptPath":null}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">e70180eb-0cf2-468c-b6c4-1eeded83980b</arg>
                <arg name="FIELD_NOTES">OP: Check OP_AUTOMATICALLY_CLOSED - if Yes don't allow transition</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"import com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\ncfValues[properties['cf.automaticallyClosed']] == null || cfValues[properties['cf.automaticallyClosed'].toString()]?.value == 'No'","scriptPath":null,"parameters":{}}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">éÎüéÇ_Ñ®Ñ§xo¦õw~Õ§uçß=ÛMöí§v</arg>
              <arg name="FIELD_NOTES">OP: Check Required Fields - solo errors, no warnings</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.atlassian.jira.issue.IssueManager\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n \n//IssueManager issueManager = ComponentAccessor.getIssueManager();\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-3981\")\n\ndef errors = false\ndef warnings = false\n\ndef lumpSumPrice =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumPrice'].toString())[0]\n\n/*Campi con dati obbligatori per ticket non a corpo*/\ndef repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.replacedMaterials'].toString())[0]\ndef unaTantumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.unatantumRates'].toString())[0]\ndef labourRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.labourRates'].toString())[0]\ndef travelRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.travelRates'].toString())[0]\n\n/*Campi con dati obbligatori per ticket a corpo*/\ndef lumpSumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumRates'].toString())[0]\n\n/*Conferma utente su warnings*/\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]\n\n/*Insight Schema IDs*/\ndef DBObjects = properties['ischema.dbo'].toString() + \"-\"\ndef OPAA = properties['ischema.aa'].toString() + \"-\"\n\ndef errorMandatoryFields = new ArrayList()\ndef errorJobStartedCompletedFields = new ArrayList()\ndef warningEmptyFields = new ArrayList()\ndef warningEmptyQuoteMatCustomer = new ArrayList()\ndef warningEmptyQuoteRateCustomer = new ArrayList()\n\n//try{\n    if(issue.getCustomFieldValue(lumpSumPrice)!=null &amp;&amp; issue.getCustomFieldValue(lumpSumPrice).toString().equals(\"Yes\")){\n        /*Contabilizzazione a corpo*/\n        log.debug \"Contabilizzazione a corpo\"\n        //OPAA_LUMP_SUM_RATES\n        if(issue.getCustomFieldValue(lumpSumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(lumpSumRates) != \"\" &amp;&amp; !issue.getCustomFieldValue(lumpSumRates).toString().equals(\"\")){\n            /*Ciclare tutti gli oggetti associati al campo*/\n            //insight classes &amp; components\n            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n            def lsRatesList = issue.getCustomFieldValue(lumpSumRates)\n\t\t\tlog.debug lsRatesList\n            for(ls in lsRatesList){\n                //extract insight key ang get object\n                def lsRate=ls.toString()\n                log.debug \"lsRate: \" + lsRate\n                def lsRateKey = lsRate.substring(lsRate.indexOf('(')+1,lsRate.indexOf(')'))\n                log.debug \"lsRateKey: \" + lsRateKey\n                def lsRateObject = objectFacade.loadObjectBean(lsRateKey)\n                log.debug \"lsRateObject: \" + lsRateObject\n                //get \"APPLIED_TO\" for that rate\n                def lsAppliedTo = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()\n                log.debug \"lsAppliedTo: \" + lsAppliedTo\n                def lsAppliedToValue\n                if (lsAppliedTo){\n                    lsAppliedToValue = lsAppliedTo.substring(lsAppliedTo.indexOf('(')+1,lsAppliedTo.indexOf(')'))\n                }\n                log.debug \"objectFacade.loadObjectAttributeBean(lsRateObject.getId(), RATE_REF): \" + objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())\n                def lsRateRef = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()\n                log.debug \"lsRateRef: \" + lsRateRef\n                def lsRateRefKey\n                def lsRateRefValue\n                if(lsRateRef.size() &gt; 0){\n                    lsRateRef = lsRateRef.toString()\n                    lsRateRefKey = lsRateRef.substring(lsRateRef.indexOf('(')+1,lsRateRef.indexOf(')'))\n                    def lsRateRefObject = objectFacade.loadObjectBean(DBObjects + lsRateRefKey)\n                    log.debug lsRateRefObject\n                    lsRateRefValue = objectFacade.loadObjectAttributeBean(lsRateRefObject.getId(), properties['iobj.rate.name'].toString()).getObjectAttributeValueBeans().toString()\n                    lsRateRefValue = lsRateRefValue.substring(lsRateRefValue.indexOf('(')+1,lsRateRefValue.indexOf(')'))\n                }\n\n                if(lsAppliedToValue.toString().equals(\"BOTH\") || lsAppliedToValue.toString().equals(\"CUSTOMER\")){\n                    //get \"TOTAL_AMOUNT_CUSTOMER\" for that component\n                    def totCustomer = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()\n                    if(!totCustomer || totCustomer[0].getValue().toString().equals(\"0.0\")){\n                        warnings=true\n                        warningEmptyQuoteRateCustomer.add(lsRateRefValue.toString())\n                    }\n                }\n             }    \n        }\n\n    }else{\n        /*Contabilizzazione non a corpo*/\n        log.debug \"Contabilizzazione NON a corpo\"\n\n        //OPAA_REPLACED_MATERIALS\n        if(issue.getCustomFieldValue(repMaterials)!=null &amp;&amp; (String)issue.getCustomFieldValue(repMaterials) != \"\" &amp;&amp; !issue.getCustomFieldValue(repMaterials).toString().equals(\"\")){\n            //log.debug \"Materiali: \" + issue.getCustomFieldValue(repMaterials)\n            /*Ciclare tutti gli oggetti associati al campo*/\n            //insight classes &amp; components\n            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n            def repMatList = issue.getCustomFieldValue(repMaterials)\n\n            for(mat in repMatList){\n                //extract insight key ang get object\n                def component=mat.toString()\n                def componentKey = component.substring(component.indexOf('('+OPAA)+1,component.length()-1)\n                def componentObject = objectFacade.loadObjectBean(componentKey)\n                //get \"APPLIED_TO\" for that component\n                def appliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans() as ArrayList\n                def appliedToValue\n                if(appliedTo.size() &gt; 0){\n                    appliedTo = appliedTo.toString()\n                    appliedToValue = appliedTo.substring(appliedTo.indexOf('(')+1,appliedTo.indexOf(')'))\n                    //log.debug \"appliedToValue: \" + appliedToValue\n                }\n                \n                def matNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).getObjectAttributeValueBeans() as ArrayList\n                def matNumberKey\n                def matNumberValue\n                if(matNumber.size() &gt; 0){\n                    matNumber = matNumber.toString()\n                    matNumberKey = matNumber.substring(matNumber.indexOf('(')+1,matNumber.indexOf(')'))\n                    def matNumberObject = objectFacade.loadObjectBean(DBObjects + matNumberKey)\n                    matNumberValue = objectFacade.loadObjectAttributeBean(matNumberObject.getId(), properties['iobj.material.name'].toString()).getObjectAttributeValueBeans().toString()\n                    matNumberValue = matNumberValue.substring(matNumberValue.indexOf('(')+1,matNumberValue.indexOf(')'))\n                }\n                \n                def serialNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()) ? objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()).getObjectAttributeValueBeans() as ArrayList : null\n                def serialNumberValue\n                if(serialNumber){\n                    serialNumber = serialNumber.toString()\n                    serialNumberValue = serialNumber.substring(serialNumber.indexOf('(')+1,serialNumber.indexOf(')'))\n                }               \n\n                if(appliedToValue.toString().equals(\"BOTH\") || appliedToValue.toString().equals(\"CUSTOMER\")){\n                    //get \"TOTAL_AMOUNT_CUSTOMER\" for that component\n                    def totCustomer = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()).getObjectAttributeValueBeans()\n                    if(!totCustomer || totCustomer[0].getValue().toString().equals(\"0.0\")){\n                        warnings=true\n                        warningEmptyQuoteMatCustomer.add(matNumberValue.toString() + (!serialNumber.toString().equals(\"[]\") ? \" (\" + serialNumberValue.toString() + \")\" : \" ()\"))   \n                    }\n                }\n             }    \n        }  \n\n        //OPAA_UNATANTUM_RATES\n        if(issue.getCustomFieldValue(unaTantumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(unaTantumRates) != \"\" &amp;&amp; !issue.getCustomFieldValue(unaTantumRates).toString().equals(\"\")){\n            log.debug \"Una tantum rates: \" + issue.getCustomFieldValue(unaTantumRates)\n            /*Ciclare tutti gli oggetti associati al campo*/\n            //insight classes &amp; components\n            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n            def umRatesList = issue.getCustomFieldValue(unaTantumRates)\n\n            for(um in umRatesList){\n                //extract insight key ang get object\n                def umRate=um.toString()\n                def umRateKey = umRate.substring(umRate.indexOf('(')+1,umRate.indexOf(')'))\n                def umRateObject = objectFacade.loadObjectBean(umRateKey)\n                //get \"APPLIED_TO\" for that rate\n                def umAppliedTo = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()\n                def umAppliedToValue = umAppliedTo.substring(umAppliedTo.indexOf('(')+1,umAppliedTo.indexOf(')'))\n\n                def umRateRef = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()\n\n                def umRateRefKey\n                def umRateRefValue\n                if(umRateRef.size() &gt; 0){\n                    umRateRef = umRateRef.toString()\n                    umRateRefKey = umRateRef.substring(umRateRef.indexOf('(')+1,umRateRef.indexOf(')'))\n                    def umRateRefObject = objectFacade.loadObjectBean(DBObjects + umRateRefKey)\n                    umRateRefValue = objectFacade.loadObjectAttributeBean(umRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()\n                    umRateRefValue = umRateRefValue.substring(umRateRefValue.indexOf('(')+1,umRateRefValue.indexOf(')'))\n                }\n                \n                if(umAppliedToValue.toString().equals(\"BOTH\") || umAppliedToValue.toString().equals(\"CUSTOMER\")){\n                    //get \"TOTAL_AMOUNT_CUSTOMER\" for that component\n                    def totCustomer = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()\n                    if(!totCustomer || totCustomer[0].getValue().toString().equals(\"0.0\")){\n                        warnings=true\n                        warningEmptyQuoteRateCustomer.add(umRateRefValue.toString())\n                    }\n                }\n             }    \n        }\n\n        //OPAA_LABOUR_RATES\n        if(issue.getCustomFieldValue(labourRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(labourRates) != \"\" &amp;&amp; !issue.getCustomFieldValue(labourRates).toString().equals(\"\")){\n            log.debug \"Labour rates: \" + issue.getCustomFieldValue(labourRates)\n            /*Ciclare tutti gli oggetti associati al campo*/\n            //insight classes &amp; components\n            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n            def labourRatesList = issue.getCustomFieldValue(labourRates)\n\n            for(lb in labourRatesList){\n                //extract insight key ang get object\n                def lbRate=lb.toString()\n                def lbRateKey = lbRate.substring(lbRate.indexOf('(')+1,lbRate.indexOf(')'))\n                def lbRateObject = objectFacade.loadObjectBean(lbRateKey)\n                //get \"APPLIED_TO\" for that rate\n                def lbAppliedTo = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()\n                def lbAppliedToValue = lbAppliedTo.substring(lbAppliedTo.indexOf('(')+1,lbAppliedTo.indexOf(')'))\n\n                def lbRateRef = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()\n                \n                def lbRateRefKey\n                def lbRateRefValue\n                if(lbRateRef.size() &gt; 0){\n                    lbRateRef = lbRateRef.toString()\n                    lbRateRefKey = lbRateRef.substring(lbRateRef.indexOf('(')+1,lbRateRef.indexOf(')'))\n                    def lbRateRefObject = objectFacade.loadObjectBean(DBObjects + lbRateRefKey)\n                    lbRateRefValue = objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()\n                    lbRateRefValue = lbRateRefValue.substring(lbRateRefValue.indexOf('(')+1,lbRateRefValue.indexOf(')'))\n                }\n\n                if(lbAppliedToValue.toString().equals(\"BOTH\") || lbAppliedToValue.toString().equals(\"CUSTOMER\")){\n                    //get \"TOTAL_AMOUNT_CUSTOMER\" for that component\n                    def totCustomer = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()\n                    if(!totCustomer || totCustomer[0].getValue().toString().equals(\"0.0\")){\n                        warnings=true\n                        warningEmptyQuoteRateCustomer.add(lbRateRefValue.toString())\n                    }\n                }\n             }    \n        }\n\n        //OPAA_TRAVEL_RATES\n        if(issue.getCustomFieldValue(travelRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(travelRates) != \"\" &amp;&amp; !issue.getCustomFieldValue(travelRates).toString().equals(\"\")){\n            log.debug \"Travel rates: \" + issue.getCustomFieldValue(travelRates)\n            /*Ciclare tutti gli oggetti associati al campo*/\n            //insight classes &amp; components\n            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n            def travelRatesList = issue.getCustomFieldValue(travelRates)\n\n            for(tr in travelRatesList){\n                //extract insight key ang get object\n                def trRate=tr.toString()\n                def trRateKey = trRate.substring(trRate.indexOf('(')+1,trRate.indexOf(')'))\n                def trRateObject = objectFacade.loadObjectBean(trRateKey)\n                //get \"APPLIED_TO\" for that rate\n                def trAppliedTo = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()\n                def trAppliedToValue = trAppliedTo.substring(trAppliedTo.indexOf('(')+1,trAppliedTo.indexOf(')'))\n\n                def trRateRef = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()\n                \n                def trRateRefKey\n                def trRateRefValue\n                if(trRateRef.size() &gt; 0){\n                    trRateRef = trRateRef.toString()\n                    trRateRefKey = trRateRef.substring(trRateRef.indexOf('(')+1,trRateRef.indexOf(')'))\n                    def trRateRefObject = objectFacade.loadObjectBean(DBObjects + trRateRefKey)\n                    trRateRefValue = objectFacade.loadObjectAttributeBean(trRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()\n                    trRateRefValue = trRateRefValue.substring(trRateRefValue.indexOf('(')+1,trRateRefValue.indexOf(')'))\n                }\n\n                if(trAppliedToValue.toString().equals(\"BOTH\") || trAppliedToValue.toString().equals(\"CUSTOMER\")){\n                    //get \"TOTAL_AMOUNT_CUSTOMER\" for that component\n                    def totCustomer = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()\n                    if(!totCustomer || totCustomer[0].getValue().toString().equals(\"0.0\")){\n                        warnings=true\n                        warningEmptyQuoteRateCustomer.add(trRateRefValue.toString())\n                    }\n                }\n             }    \n        }\n\n    }\n\n\n    def output = new ArrayList()\n\n    if (!errors &amp;&amp; !warnings){\n        return true\n    }else{\n        if(!errors &amp;&amp; warnings){\n            //Se ci sono solo warnings verifico se l'utente ha gi\u00e0 dichiarato di voler proseguire comunque\n            // - transition field \"OPAA_CHECK_AND_CONFIRM\"=\"Yes\"\n            // - in caso contrario invio i warning a FE\n\n            //log.debug \"transitionCheck: \" + issue.getCustomFieldValue(transitionCheck)\n            //log.debug \"result: \" + issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")\n            if(issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")){\n                //log.debug \"return true - transitionCheck = Yes\"\n                return true\n            }else{\n                def wList = new ArrayList()\n\n                if(warningEmptyQuoteRateCustomer.size() &gt; 0){\n                    def wListConfirmEmptyRate = new ArrayList()\n                    wListConfirmEmptyRate.add(\"W\")\n                    wListConfirmEmptyRate.add(\"CUSTOMER_CONFIRM_EMPTY_RATES\")\n                    wListConfirmEmptyRate.add(null)\n                    wListConfirmEmptyRate.add(warningEmptyQuoteRateCustomer)\n\n                    wList.add(wListConfirmEmptyRate)\n                }\n\n                if(warningEmptyQuoteMatCustomer.size() &gt; 0){\n                    def wListConfirmEmptyMatQuote = new ArrayList()\n                    wListConfirmEmptyMatQuote.add(\"W\")\n                    wListConfirmEmptyMatQuote.add(\"CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE\")\n                    wListConfirmEmptyMatQuote.add(null)\n                    wListConfirmEmptyMatQuote.add(warningEmptyQuoteMatCustomer)\n\n                    wList.add(wListConfirmEmptyMatQuote)\n                }\n\n                output.add(wList)\n                throw new InvalidInputException('{\"W\":\"' + output.toString() + '\"}')\n                //throw new InvalidInputException(\"W\", output.toString())   \n            }\n\n        }\n        if(errors &amp;&amp; !warnings){\n            def eList = new ArrayList()\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n            //throw new InvalidInputException(\"E\", output.toString())   \n        }\n        if(errors &amp;&amp; warnings){\n            def eList = new ArrayList()\n            def wList = new ArrayList()\n\n            if(warningEmptyQuoteRateCustomer.size() &gt; 0){\n                    def wListConfirmEmptyRate = new ArrayList()\n                    wListConfirmEmptyRate.add(\"W\")\n                    wListConfirmEmptyRate.add(\"CUSTOMER_CONFIRM_EMPTY_RATES\")\n                \twListConfirmEmptyRate.add(null)\n                    wListConfirmEmptyRate.add(warningEmptyQuoteRateCustomer)\n\n                    wList.add(wListConfirmEmptyRate)\n                }\n\n                if(warningEmptyQuoteMatCustomer.size() &gt; 0){\n                    def wListConfirmEmptyMatQuote = new ArrayList()\n                    wListConfirmEmptyMatQuote.add(\"W\")\n                    wListConfirmEmptyMatQuote.add(\"CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE\")\n                    wListConfirmEmptyMatQuote.add(null)\n                    wListConfirmEmptyMatQuote.add(warningEmptyQuoteMatCustomer)\n\n                    wList.add(wListConfirmEmptyMatQuote)\n                }\n\n            output.add(eList)\n            output.add(wList)\n            throw new InvalidInputException('{\"WE\":\"' + output.toString() + '\"}')\n            //throw new InvalidInputException(\"WE\", output.toString())  \n        }\n    }\n//}catch(Exception e){\n//    log.debug \"Exception: \" + e\n//    throw new InvalidInputException(\"Exception\", e.toString())  \n//}\n","scriptPath":null,"parameters":{}}</arg>
              <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import com.atlassian.jira.issue.IssueManager
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
 
Issue issue = issue
//IssueManager issueManager = ComponentAccessor.getIssueManager();
//Issue issue = issueManager.getIssueByKeyIgnoreCase("OPUT-396")

def errors = false
def warnings = false

def lumpSumPrice =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumPrice'].toString())[0]

/*Campi con dati obbligatori per ticket non a corpo*/
def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.replacedMaterials'].toString())[0]
def unaTantumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.unatantumRates'].toString())[0]
def labourRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.labourRates'].toString())[0]
def travelRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.travelRates'].toString())[0]

/*Campi con dati obbligatori per ticket a corpo*/
def lumpSumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumRates'].toString())[0]

/*Conferma utente su warnings*/
def transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]

/*Insight Schema IDs*/
def DBObjects = properties['ischema.dbo'].toString() + "-"
def OPAA = properties['ischema.aa'].toString() + "-"

def errorMandatoryFields = new ArrayList()
def errorJobStartedCompletedFields = new ArrayList()
def warningEmptyFields = new ArrayList()
def warningEmptyQuoteMatCustomer = new ArrayList()
def warningEmptyQuoteRateCustomer = new ArrayList()

//try{
    if(issue.getCustomFieldValue(lumpSumPrice)!=null &amp;&amp; issue.getCustomFieldValue(lumpSumPrice).toString().equals("Yes")){
        /*Contabilizzazione a corpo*/
        log.debug "Contabilizzazione a corpo"
        //OPAA_LUMP_SUM_RATES
        if(issue.getCustomFieldValue(lumpSumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(lumpSumRates) != "" &amp;&amp; !issue.getCustomFieldValue(lumpSumRates).toString().equals("")){
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def lsRatesList = issue.getCustomFieldValue(lumpSumRates)
			log.debug lsRatesList
            for(ls in lsRatesList){
                //extract insight key ang get object
                def lsRate=ls.toString()
                log.debug "lsRate: " + lsRate
                def lsRateKey = lsRate.substring(lsRate.indexOf('(')+1,lsRate.indexOf(')'))
                log.debug "lsRateKey: " + lsRateKey
                def lsRateObject = objectFacade.loadObjectBean(lsRateKey)
                log.debug "lsRateObject: " + lsRateObject
                //get "APPLIED_TO" for that rate
                def lsAppliedTo = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                log.debug "lsAppliedTo: " + lsAppliedTo
                def lsAppliedToValue
                if (lsAppliedTo){
                    lsAppliedToValue = lsAppliedTo.substring(lsAppliedTo.indexOf('(')+1,lsAppliedTo.indexOf(')'))
                }
                log.debug "objectFacade.loadObjectAttributeBean(lsRateObject.getId(), RATE_REF): " + objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())
                def lsRateRef = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
                log.debug "lsRateRef: " + lsRateRef
                def lsRateRefKey
                def lsRateRefValue
                if(lsRateRef.size() &gt; 0){
                    lsRateRef = lsRateRef.toString()
                    lsRateRefKey = lsRateRef.substring(lsRateRef.indexOf('(')+1,lsRateRef.indexOf(')'))
                    def lsRateRefObject = objectFacade.loadObjectBean(OPAA + lsRateRefKey)
                    log.debug lsRateRefObject
                    lsRateRefValue = objectFacade.loadObjectAttributeBean(lsRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
                    lsRateRefValue = lsRateRefValue.substring(lsRateRefValue.indexOf('(')+1,lsRateRefValue.indexOf(')'))
                }

                if(lsAppliedToValue.toString().equals("BOTH") || lsAppliedToValue.toString().equals("CUSTOMER")){
                    //get "TOTAL_AMOUNT_CUSTOMER" for that component
                    def totCustomer = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateCustomer.add(lsRateRefValue.toString())
                    }
                }
             }    
        }

    }else{
        /*Contabilizzazione non a corpo*/
        log.debug "Contabilizzazione NON a corpo"

        //OPAA_REPLACED_MATERIALS
        if(issue.getCustomFieldValue(repMaterials)!=null &amp;&amp; (String)issue.getCustomFieldValue(repMaterials) != "" &amp;&amp; !issue.getCustomFieldValue(repMaterials).toString().equals("")){
            //log.debug "Materiali: " + issue.getCustomFieldValue(repMaterials)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def repMatList = issue.getCustomFieldValue(repMaterials)

            for(mat in repMatList){
                //extract insight key ang get object
                def component=mat.toString()
                def componentKey = component.substring(component.indexOf('('+OPAA)+1,component.length()-1)
                def componentObject = objectFacade.loadObjectBean(componentKey)
                //get "APPLIED_TO" for that component
                def appliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans() as ArrayList
                def appliedToValue
                if(appliedTo.size() &gt; 0){
                    appliedTo = appliedTo.toString()
                    appliedToValue = appliedTo.substring(appliedTo.indexOf('(')+1,appliedTo.indexOf(')'))
                    //log.debug "appliedToValue: " + appliedToValue
                }
                
                def matNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).getObjectAttributeValueBeans() as ArrayList
                def matNumberKey
                def matNumberValue
                if(matNumber.size() &gt; 0){
                    matNumber = matNumber.toString()
                    matNumberKey = matNumber.substring(matNumber.indexOf('(')+1,matNumber.indexOf(')'))
                    def matNumberObject = objectFacade.loadObjectBean(DBObjects + matNumberKey)
                    matNumberValue = objectFacade.loadObjectAttributeBean(matNumberObject.getId(), properties['iobj.material.name'].toString()).getObjectAttributeValueBeans().toString()
                    matNumberValue = matNumberValue.substring(matNumberValue.indexOf('(')+1,matNumberValue.indexOf(')'))
                }
                
                def serialNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()) ? objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()).getObjectAttributeValueBeans() as ArrayList : null
                def serialNumberValue
                if(serialNumber &amp;&amp; serialNumber.size() &gt; 0){
                    serialNumber = serialNumber.toString()
                    serialNumberValue = serialNumber.substring(serialNumber.indexOf('(')+1,serialNumber.indexOf(')'))
                }               

                if(appliedToValue.toString().equals("BOTH") || appliedToValue.toString().equals("CUSTOMER")){
                    //get "TOTAL_AMOUNT_CUSTOMER" for that component
                    def totCustomer = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()) ? objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()).getObjectAttributeValueBeans() : null
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteMatCustomer.add(matNumberValue.toString() + ((serialNumber &amp;&amp; serialNumber.size() &gt; 0) ? " (" + serialNumberValue.toString() + ")" : " ()"))   
                    }
                }
             }    
        }  

        //OPAA_UNATANTUM_RATES
        if(issue.getCustomFieldValue(unaTantumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(unaTantumRates) != "" &amp;&amp; !issue.getCustomFieldValue(unaTantumRates).toString().equals("")){
            log.debug "Una tantum rates: " + issue.getCustomFieldValue(unaTantumRates)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def umRatesList = issue.getCustomFieldValue(unaTantumRates)

            for(um in umRatesList){
                //extract insight key ang get object
                def umRate=um.toString()
                def umRateKey = umRate.substring(umRate.indexOf('(')+1,umRate.indexOf(')'))
                def umRateObject = objectFacade.loadObjectBean(umRateKey)
                //get "APPLIED_TO" for that rate
                def umAppliedTo = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                def umAppliedToValue = umAppliedTo.substring(umAppliedTo.indexOf('(')+1,umAppliedTo.indexOf(')'))

                def umRateRef = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()

                def umRateRefKey
                def umRateRefValue
                if(umRateRef.size() &gt; 0){
                    umRateRef = umRateRef.toString()
                    umRateRefKey = umRateRef.substring(umRateRef.indexOf('(')+1,umRateRef.indexOf(')'))
                    def umRateRefObject = objectFacade.loadObjectBean(OPAA + umRateRefKey)
                    umRateRefValue = objectFacade.loadObjectAttributeBean(umRateRefObject.getId(), properties['iobj.rate.Name'].toString()) ? objectFacade.loadObjectAttributeBean(umRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString() : null
                    umRateRefValue = umRateRefValue ? umRateRefValue.substring(umRateRefValue.indexOf('(')+1,umRateRefValue.indexOf(')')) : null
                }
                
                if(umAppliedToValue.toString().equals("BOTH") || umAppliedToValue.toString().equals("CUSTOMER")){
                    //get "TOTAL_AMOUNT_CUSTOMER" for that component
                    def totCustomer = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()) ? objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans() : null
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateCustomer.add(umRateRefValue.toString())
                    }
                }
             }    
        }

        //OPAA_LABOUR_RATES
        if(issue.getCustomFieldValue(labourRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(labourRates) != "" &amp;&amp; !issue.getCustomFieldValue(labourRates).toString().equals("")){
            log.debug "Labour rates: " + issue.getCustomFieldValue(labourRates)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def labourRatesList = issue.getCustomFieldValue(labourRates)

            for(lb in labourRatesList){
                //extract insight key ang get object
                def lbRate=lb.toString()
                def lbRateKey = lbRate.substring(lbRate.indexOf('(')+1,lbRate.indexOf(')'))
                def lbRateObject = objectFacade.loadObjectBean(lbRateKey)
                //get "APPLIED_TO" for that rate
                def lbAppliedTo = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                def lbAppliedToValue = lbAppliedTo.substring(lbAppliedTo.indexOf('(')+1,lbAppliedTo.indexOf(')'))

                def lbRateRef = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
                
                def lbRateRefKey
                def lbRateRefValue
                if(lbRateRef.size() &gt; 0){
                    lbRateRef = lbRateRef.toString()
                    lbRateRefKey = lbRateRef.substring(lbRateRef.indexOf('(')+1,lbRateRef.indexOf(')'))
                    def lbRateRefObject = objectFacade.loadObjectBean(OPAA + lbRateRefKey)
                    lbRateRefValue = objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.Name'].toString()) ? objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString() : null
                    lbRateRefValue = lbRateRefValue ? lbRateRefValue.substring(lbRateRefValue.indexOf('(')+1,lbRateRefValue.indexOf(')')) : null
                }

                if(lbAppliedToValue.toString().equals("BOTH") || lbAppliedToValue.toString().equals("CUSTOMER")){
                    //get "TOTAL_AMOUNT_CUSTOMER" for that component
                    def totCustomer = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()) ? objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans() : null
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateCustomer.add(lbRateRefValue.toString())
                    }
                }
             }    
        }

        //OPAA_TRAVEL_RATES
        if(issue.getCustomFieldValue(travelRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(travelRates) != "" &amp;&amp; !issue.getCustomFieldValue(travelRates).toString().equals("")){
            log.debug "Travel rates: " + issue.getCustomFieldValue(travelRates)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def travelRatesList = issue.getCustomFieldValue(travelRates)

            for(tr in travelRatesList){
                //extract insight key ang get object
                def trRate=tr.toString()
                def trRateKey = trRate.substring(trRate.indexOf('(')+1,trRate.indexOf(')'))
                def trRateObject = objectFacade.loadObjectBean(trRateKey)
                //get "APPLIED_TO" for that rate
                def trAppliedTo = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()) ? objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString() : null
                def trAppliedToValue = trAppliedTo ? trAppliedTo.substring(trAppliedTo.indexOf('(')+1,trAppliedTo.indexOf(')')) : null

                def trRateRef = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()) ? objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString() : null
                
                def trRateRefKey
                def trRateRefValue
                if(trRateRef.size() &gt; 0){
                    trRateRef = trRateRef.toString()
                    trRateRefKey = trRateRef.substring(trRateRef.indexOf('(')+1,trRateRef.indexOf(')'))
                    def trRateRefObject = objectFacade.loadObjectBean(OPAA + trRateRefKey)
                    trRateRefValue = objectFacade.loadObjectAttributeBean(trRateRefObject.getId(), properties['iobj.rate.Name'].toString()) ? objectFacade.loadObjectAttributeBean(trRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString() : null
                    trRateRefValue = trRateRefValue ? trRateRefValue.substring(trRateRefValue.indexOf('(')+1,trRateRefValue.indexOf(')')) : null
                }

                if(trAppliedToValue.toString().equals("BOTH") || trAppliedToValue.toString().equals("CUSTOMER")){
                    //get "TOTAL_AMOUNT_CUSTOMER" for that component
                    def totCustomer = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()) ? objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans() : null
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateCustomer.add(trRateRefValue.toString())
                    }
                }
             }    
        }

    }


    def output = new ArrayList()

    if (!errors &amp;&amp; !warnings){
        return true
    }else{
        if(!errors &amp;&amp; warnings){
            //Se ci sono solo warnings verifico se l'utente ha già dichiarato di voler proseguire comunque
            // - transition field "OPAA_CHECK_AND_CONFIRM"="Yes"
            // - in caso contrario invio i warning a FE

            //log.debug "transitionCheck: " + issue.getCustomFieldValue(transitionCheck)
            //log.debug "result: " + issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")
            if(issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")){
                //log.debug "return true - transitionCheck = Yes"
                return true
            }else{
                def wList = new ArrayList()

                if(warningEmptyQuoteRateCustomer.size() &gt; 0){
                    def wListConfirmEmptyRate = new ArrayList()
                    wListConfirmEmptyRate.add("W")
                    wListConfirmEmptyRate.add("CUSTOMER_CONFIRM_EMPTY_RATES")
                    wListConfirmEmptyRate.add(null)
                    wListConfirmEmptyRate.add(warningEmptyQuoteRateCustomer)

                    wList.add(wListConfirmEmptyRate)
                }

                if(warningEmptyQuoteMatCustomer.size() &gt; 0){
                    def wListConfirmEmptyMatQuote = new ArrayList()
                    wListConfirmEmptyMatQuote.add("W")
                    wListConfirmEmptyMatQuote.add("CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE")
                    wListConfirmEmptyMatQuote.add(null)
                    wListConfirmEmptyMatQuote.add(warningEmptyQuoteMatCustomer)

                    wList.add(wListConfirmEmptyMatQuote)
                }

                output.add(wList)
                throw new InvalidInputException('{"W":"' + output.toString() + '"}')
                //throw new InvalidInputException("W", output.toString())   
            }

        }
        if(errors &amp;&amp; !warnings){
            def eList = new ArrayList()

            output.add(eList)
            throw new InvalidInputException('{"E":"' + output.toString() + '"}')
            //throw new InvalidInputException("E", output.toString())   
        }
        if(errors &amp;&amp; warnings){
            def eList = new ArrayList()
            def wList = new ArrayList()

            if(warningEmptyQuoteRateCustomer.size() &gt; 0){
                    def wListConfirmEmptyRate = new ArrayList()
                    wListConfirmEmptyRate.add("W")
                    wListConfirmEmptyRate.add("CUSTOMER_CONFIRM_EMPTY_RATES")
                	wListConfirmEmptyRate.add(null)
                    wListConfirmEmptyRate.add(warningEmptyQuoteRateCustomer)

                    wList.add(wListConfirmEmptyRate)
                }

                if(warningEmptyQuoteMatCustomer.size() &gt; 0){
                    def wListConfirmEmptyMatQuote = new ArrayList()
                    wListConfirmEmptyMatQuote.add("W")
                    wListConfirmEmptyMatQuote.add("CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE")
                    wListConfirmEmptyMatQuote.add(null)
                    wListConfirmEmptyMatQuote.add(warningEmptyQuoteMatCustomer)

                    wList.add(wListConfirmEmptyMatQuote)
                }

            output.add(eList)
            output.add(wList)
            throw new InvalidInputException('{"WE":"' + output.toString() + '"}')
            //throw new InvalidInputException("WE", output.toString())  
        }
    }
//}catch(Exception e){
//    log.debug "Exception: " + e
//    throw new InvalidInputException("Exception", e.toString())  
//}
</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">ρ­έi¶¶q·4}―{ιζφρώ}ρή9ε―8i·τΩ§|</arg>
              <arg name="FIELD_NOTES">OP: REST API: OP generazione Consuntivo</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.link.IssueLink\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nCategory log = Category.getInstance(\"com.onresolve.jira.groovy.PostFunction\")\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\n\n/* REST API per Generazione Allegato Consuntivo */\nrequestMethod = \"PUT\";\n\ndef relatesInIssueLink=false\ndef relatesOutIssueLink=false\ndef linkedTickets=new ArrayList()\nList&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\nfor (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n\n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString()) &amp;&amp; issueLink.getSourceObject().status.name == \"Completed to be Closed\"){\n        relatesInIssueLink=true\n        linkedTickets.add(issueLink.getSourceObject().toString())\n        log.debug \"Issue con relatesInIssueLink\"\n    }\n}\nList&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\nfor (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n\n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString()) &amp;&amp; issueLink.getDestinationObject().status.name == \"Completed to be Closed\"){\n        relatesOutIssueLink=true\n        linkedTickets.add(issueLink.getDestinationObject().toString())\n        log.debug \"Issue con relatesOutIssueLink\"\n    }\n}\n\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/AA/ticket/\" + issue.key.toString() + \"/attachment/balance\"\n\nif(relatesInIssueLink || relatesOutIssueLink){\n    baseURL = baseURL + \"?linkedTickets=\" + linkedTickets.toString().replaceAll(\"\\\\[\",\"\").replaceAll(\"\\\\]\",\"\").replaceAll(\" \",\"\")\n}\n\nlog.debug \"baseUrl: \" + baseURL\n\nURL url\nurl = new URL(baseURL)\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.connect();\n\ndef output = new ArrayList()\ndef eList = new ArrayList()\ndef eListErrors = new ArrayList()\ndef errorMsgs = new ArrayList()\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n    eListErrors.add(\"E\")\n    eListErrors.add(\"GENERATE-ACCOUNTINGREPORT\")\n    errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n    eListErrors.add(errorMsgs)\n    eList.add(eListErrors)\n\n    output.add(eList)\n    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    //throw new InvalidInputException(\"E\", output.toString())\n}\n","scriptPath":null,"parameters":{}}</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import org.apache.log4j.Category
import com.atlassian.jira.issue.link.IssueLink
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def requestMethod
def baseURL

/* REST API per Generazione Allegato Consuntivo */
requestMethod = "PUT";

def relatesInIssueLink=false
def relatesOutIssueLink=false
def linkedTickets=new ArrayList()
List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesInIssueLink=true
        linkedTickets.add(issueLink.getSourceObject().toString())
        log.debug "Issue con relatesInIssueLink"
    }
}
List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesOutIssueLink=true
        linkedTickets.add(issueLink.getDestinationObject().toString())
        log.debug "Issue con relatesOutIssueLink"
    }
}

baseURL = "http://" + properties['api.env'].toString() + "/op/rest/automation/AA/ticket/" + issue.key.toString() + "/attachment/balance"

if(relatesInIssueLink || relatesOutIssueLink){
    baseURL = baseURL + "?linkedTickets=" + linkedTickets.toString().replaceAll("\\[","").replaceAll("\\]","").replaceAll(" ","")
}

log.debug "baseUrl: " + baseURL

URL url
url = new URL(baseURL)
HttpURLConnection connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.connect();

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()
    eListErrors.add("E")
    eListErrors.add("GENERATE-ACCOUNTINGREPORT")
    errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
    eListErrors.add(errorMsgs)
    eList.add(eListErrors)

    output.add(eList)
    throw new InvalidInputException('{"E":"' + output.toString() + '"}')
    //throw new InvalidInputException("E", output.toString())
}
</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">ня4хюћуѕ8нн}yЮЬчЭµmОЭй­јiз{mэЯ</arg>
              <arg name="FIELD_NOTES">OP Email Notification: FINANCIAL_STATEMENT_TO_CUSTOMER</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.link.IssueLink\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nCategory log = Category.getInstance(\"com.onresolve.jira.groovy.PostFunction\")\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\n\ndef DBO=properties['ischema.dbo.id'].toString().toInteger()\n/* REST API per Invio Notifica Email ONSITE_REPORT */\nrequestMethod = \"POST\";\n\ndef relatesInIssueLink=false\ndef relatesOutIssueLink=false\ndef linkedTickets=new ArrayList()\nList&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\nfor (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n\n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString()) &amp;&amp; issueLink.getSourceObject().status.name == \"Completed to be Closed\"){\n        relatesInIssueLink=true\n        linkedTickets.add(issueLink.getSourceObject().toString())\n        log.debug \"Issue con relatesInIssueLink\"\n    }\n}\nList&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\nfor (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n\n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString()) &amp;&amp; issueLink.getDestinationObject().status.name == \"Completed to be Closed\"){\n        relatesOutIssueLink=true\n        linkedTickets.add(issueLink.getDestinationObject().toString())\n        log.debug \"Issue con relatesOutIssueLink\"\n    }\n}\n\ndef body_req\nif(relatesInIssueLink || relatesOutIssueLink){\n    body_req = [\n        \"templateName\": properties['tt.financialStatementToC'].toString(),\n        \"pec\": false,\n        \"issueKey\": issue.key,\n        \"linkedTickets\": linkedTickets\n    ]\n}else{\n    body_req = [\n        \"templateName\": properties['tt.financialStatementToC'].toString(),\n        \"pec\": false,\n        \"issueKey\": issue.key\n    ]\n}\n\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/transaction/mail/send\"\nURL url\nurl = new URL(baseURL)\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.outputStream\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\nlog.debug connection.outputStream\nconnection.connect();\n\ndef output = new ArrayList()\ndef eList = new ArrayList()\ndef eListErrors = new ArrayList()\ndef errorMsgs = new ArrayList()\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n    log.debug \"Response: \" + connection\n    \n    /*ROLLBACK*/\n    /*Rimozione allegato consuntivo appena creato*/\n    /* Get Insight IQL Facade from plugin accessor */\n    Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \n    def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\n\n    /* Get Insight Object Facade from plugin accessor */\n    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");\n    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n    /* Get Insight Object Type Facade from plugin accessor */\n    Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\");\n    def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\n\n    /* Get Insight Object Attribute Facade from plugin accessor */\n    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n\n    Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\");\n    def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\n\n    /* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include \" around value */\n    def objects = iqlFacade.findObjectsByIQLAndSchema(DBO, \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".\\\"\" + properties['iobj.attachmentCategory.name'].toString() + \"\\\" = \\\"\" + properties['iobj.attachmentCategory.objs.consuntivo'].toString() + \"\\\" AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"); // See the complete list of possible IQL on the Insight Query Language documentation page\n    /* If this is a mandatory field you should be able to do this: */\n    log.info(\"Insight object: \" + objects[0]);\n    \n    if(objects[0]){\n        /* UPDATE OJBECT DELETED VALUE */\n        def obTriage = objectFacade.loadObjectAttributeBean(objects[0].getId(), properties['iobj.attachmentCategory.deleted'].toString()).createMutable()  \n        def value = obTriage.getObjectAttributeValueBeans()\n\n        def valueBean = obTriage.createObjectAttributeValueBean()\n        valueBean.setValue(objectTypeAttributeFacade.loadObjectTypeAttributeBean(obTriage.getObjectTypeAttributeId()), true)\n        /*Clean actual value*/\n        value.clear()\n        value.add(valueBean);\n        obTriage.setObjectAttributeValueBeans(value)\n\n        //Update OJBECT attribute value\n        try {\n            obTriage = objectFacade.storeObjectAttributeBean(obTriage);\n        } catch (Exception vie) {\n            log.warn(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\n        }\n    }\n    \n    def outputMsg = ((HttpURLConnection)connection).errorStream.text\n    log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n    def jsonSlurper = new JsonSlurper()\n    def json_object = jsonSlurper.parseText(outputMsg)\n    assert json_object instanceof Map  \n    log.debug \"message: \" +  json_object.message\n\n    eListErrors.add(\"E\")\n    eListErrors.add(\"SENDMAIL\")\n    errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n    eListErrors.add(json_object.message)\n    eList.add(eListErrors)\n    \n    output.add(eList)\n    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    //throw new InvalidInputException(\"E\", output.toString())\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import org.apache.log4j.Category
import com.atlassian.jira.issue.link.IssueLink
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def requestMethod
def baseURL

def DBO=properties['ischema.dbo.id'].toString().toInteger()
/* REST API per Invio Notifica Email ONSITE_REPORT */
requestMethod = "POST";

def relatesInIssueLink=false
def relatesOutIssueLink=false
def linkedTickets=new ArrayList()
List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesInIssueLink=true
        linkedTickets.add(issueLink.getSourceObject().toString())
        log.debug "Issue con relatesInIssueLink"
    }
}
List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesOutIssueLink=true
        linkedTickets.add(issueLink.getDestinationObject().toString())
        log.debug "Issue con relatesOutIssueLink"
    }
}

def body_req
if(relatesInIssueLink || relatesOutIssueLink){
    body_req = [
        "templateName": properties['tt.financialStatementToC'].toString(),
        "pec": false,
        "issueKey": issue.key,
        "linkedTickets": linkedTickets
    ]
}else{
    body_req = [
        "templateName": properties['tt.financialStatementToC'].toString(),
        "pec": false,
        "issueKey": issue.key
    ]
}

baseURL = "http://" + properties['api.env'].toString() + "/op/rest/jira/AA/transaction/mail/send"
URL url
url = new URL(baseURL)
HttpURLConnection connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.outputStream
connection.outputStream.withWriter("UTF-8") { new StreamingJsonBuilder(it, body_req) }
log.debug connection.outputStream
connection.connect();

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()
    log.debug "Response: " + connection
    
    /*ROLLBACK*/
    /*Rimozione allegato consuntivo appena creato*/
    /* Get Insight IQL Facade from plugin accessor */
    Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade"); 
    def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);

    /* Get Insight Object Facade from plugin accessor */
    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");
    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

    /* Get Insight Object Type Facade from plugin accessor */
    Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade");
    def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);

    /* Get Insight Object Attribute Facade from plugin accessor */
    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);

    Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory");
    def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);

    /* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include " around value */
    def objects = iqlFacade.findObjectsByIQLAndSchema(DBO, "\"" + properties['iobj.attachmentCategory.categoryRef'].toString() + "\".\"" + properties['iobj.attachmentCategory.name'].toString() + "\" = \"" + properties['iobj.attachmentCategory.objs.consuntivo'].toString() + "\" AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND object HAVING connectedTickets(key = " + issue.key.toString() + ")"); // See the complete list of possible IQL on the Insight Query Language documentation page
    /* If this is a mandatory field you should be able to do this: */
    log.info("Insight object: " + objects[0]);
    
    if(objects[0]){
        /* UPDATE OJBECT DELETED VALUE */
        def obTriage = objectFacade.loadObjectAttributeBean(objects[0].getId(), properties['iobj.attachmentCategory.deleted'].toString()).createMutable()  
        def value = obTriage.getObjectAttributeValueBeans()

        def valueBean = obTriage.createObjectAttributeValueBean()
        valueBean.setValue(objectTypeAttributeFacade.loadObjectTypeAttributeBean(obTriage.getObjectTypeAttributeId()), true)
        /*Clean actual value*/
        value.clear()
        value.add(valueBean);
        obTriage.setObjectAttributeValueBeans(value)

        //Update OJBECT attribute value
        try {
            obTriage = objectFacade.storeObjectAttributeBean(obTriage);
        } catch (Exception vie) {
            log.warn("Could not update object attribute due to validation exception:" + vie.getMessage());
        }
    }
    
    def outputMsg = ((HttpURLConnection)connection).errorStream.text
    log.debug "((HttpURLConnection)connection).errorStream.text: " + outputMsg

    def jsonSlurper = new JsonSlurper()
    def json_object = jsonSlurper.parseText(outputMsg)
    assert json_object instanceof Map  
    log.debug "message: " +  json_object.message

    eListErrors.add("E")
    eListErrors.add("SENDMAIL")
    errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
    eListErrors.add(json_object.message)
    eList.add(eListErrors)
    
    output.add(eList)
    throw new InvalidInputException('{"E":"' + output.toString() + '"}')
    //throw new InvalidInputException("E", output.toString())
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="6">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="field.name">customfield_22644</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="201" name="Riapri Rapporto di Intervento">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_NOTES">OPAA_SALES_ORDER_DATE and OPAA_PURCHASE_ORDER_DATE should be null in order to reopen the ticket - otherwise the ticket has already been accounted so it cannot be reopened</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">cfValues['OP_SALES_ORDER_DATE'] == null &amp;&amp; cfValues['OP_PURCHASE_ORDER_DATE'] == null|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">e855fbdb-cb53-4bf8-922b-167760b6e692</arg>
                <arg name="FIELD_NOTES">Maintenance Ticket</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"issue.issueType.name == 'Maintenance Ticket' || issue.issueType.name == 'Planned Maintenance Ticket'","scriptPath":null,"parameters":{}}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="5">
              <post-functions>
                <function type="class">
                  <arg name="field">customfield_22693</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22660</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22644</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22641</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22666</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">эwъэ^6ыи╝вgчзЄv}ДkОZтихП■иk«Џ</arg>
                  <arg name="FIELD_NOTES">OP: Remove OnSite Report Attachments</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nCategory log = Category.getInstance(\"com.onresolve.jira.groovy.PostFunction\")\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\ndef automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]\n\ndef requestMethod\ndef baseURL\n\n/*Script Variables*/\n//Per Post Function\nIssue issue = issue\n//Per test da console\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-14062\")\n\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\n\n/*Rimozione allegato rapporto di intervento appena creato*/\n/* Get Insight IQL Facade from plugin accessor */\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\n\n/* Get Insight Object Facade from plugin accessor */\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n/* Get Insight Object Type Facade from plugin accessor */\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\");\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\n\n/* Get Insight Object Attribute Facade from plugin accessor */\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\");\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\n\n/* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include \" around value */\ndef objects = iqlFacade.findObjectsByIQLAndSchema(DBO, \"objectType=Attachment AND \\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".\\\"\" + properties['iobj.attachmentCategory.name'].toString() + \"\\\" IN (\\\"\" + properties['iobj.attachmentCategory.objs.rappIntFAAC'].toString() + \"\\\",\\\"\" + properties['iobj.attachmentCategory.objs.consuntivo'].toString() + \"\\\") AND AUTO_GENERATED = true AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"); // See the complete list of possible IQL on the Insight Query Language documentation page\n/* If this is a mandatory field you should be able to do this: */\nlog.debug \"IQL: \" + \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".\\\"\" + properties['iobj.attachmentCategory.name'].toString() + \"\\\" IN (\\\"\" + properties['iobj.attachmentCategory.objs.rappIntFAAC'].toString() + \"\\\",\\\"\" + properties['iobj.attachmentCategory.objs.consuntivo'].toString() + \"\\\") AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"\n\nfor(iobj in objects){\n    /* UPDATE OJBECT DELETED VALUE */\n    def obj = objectFacade.loadObjectBean(iobj.getId());\n        \n    int attachmentDeleted = properties['iobj.attachment.deleted.id'] ? properties['iobj.attachment.deleted.id'].toString().toInteger() : 3265\n    \n    attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(attachmentDeleted); \n\n    newAttrib = obj.createObjectAttributeBean(attribType);\n    def newAttribValue = newAttrib.createObjectAttributeValueBean();\n\n    try {\n    \tnewAttribValue.setValue(attribType, true);\n    } catch (Exception vie) {\n     \tlog.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType + \" to \" + totalAmountSupp + \". Exiting.\");\n     \tlog.warn(SETINSIGHTVALUE: vie.getMessage());\n     \treturn false;\n    }\n    \n    def attribValues = newAttrib.getObjectAttributeValueBeans();\n    attribValues.add(newAttribValue);\n    newAttrib.setObjectAttributeValueBeans(attribValues);\n     \n    try {\n    \tnewAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\n    } catch (Exception vie) {\n    \tlog.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\n     \tlog.warn(SETINSIGHTVALUE: vie.getMessage());\n    return false;\n    }\n    log.info(\"SETINSIGHTVALUE: Successfully saved value\");\n}","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService
import org.apache.log4j.Category
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();

IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)
def automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]

def requestMethod
def baseURL

/*Script Variables*/
//Per Post Function
Issue issue = issue
//Per test da console
//Issue issue = issueManager.getIssueByKeyIgnoreCase("OPUT-14062")

int OPAA = properties['ischema.aa.id'].toString().toInteger()
int DBO = properties['ischema.dbo.id'].toString().toInteger()

/*Rimozione allegato rapporto di intervento appena creato*/
/* Get Insight IQL Facade from plugin accessor */
Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade"); 
def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);

/* Get Insight Object Facade from plugin accessor */
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");
def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

/* Get Insight Object Type Facade from plugin accessor */
Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade");
def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);

/* Get Insight Object Attribute Facade from plugin accessor */
Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);

Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory");
def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);

/* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include " around value */
def objects = iqlFacade.findObjectsByIQLAndSchema(DBO, "\"" + properties['iobj.attachmentCategory.categoryRef'].toString() + "\".\"" + properties['iobj.attachmentCategory.name'].toString() + "\" IN (\"" + properties['iobj.attachmentCategory.objs.rappIntFAAC'].toString() + "\",\"" + properties['iobj.attachmentCategory.objs.consuntivo'].toString() + "\") AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND object HAVING connectedTickets(key = " + issue.key.toString() + ")"); // See the complete list of possible IQL on the Insight Query Language documentation page
/* If this is a mandatory field you should be able to do this: */
log.debug "IQL: " + "\"" + properties['iobj.attachmentCategory.categoryRef'].toString() + "\".\"" + properties['iobj.attachmentCategory.name'].toString() + "\" IN (\"" + properties['iobj.attachmentCategory.objs.rappIntFAAC'].toString() + "\",\"" + properties['iobj.attachmentCategory.objs.consuntivo'].toString() + "\") AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND object HAVING connectedTickets(key = " + issue.key.toString() + ")"

for(iobj in objects){
    /* UPDATE OJBECT DELETED VALUE */
    def obj = objectFacade.loadObjectBean(iobj.getId());
        
    int attachmentDeleted = properties['iobj.attachment.deleted.id'] ? properties['iobj.attachment.deleted.id'].toString().toInteger() : 3265
    
    attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(attachmentDeleted); 

    newAttrib = obj.createObjectAttributeBean(attribType);
    def newAttribValue = newAttrib.createObjectAttributeValueBean();

    try {
    	newAttribValue.setValue(attribType, true);
    } catch (Exception vie) {
     	log.warn("SETINSIGHTVALUE: Unable to set attribute " + attribType + " to " + totalAmountSupp + ". Exiting.");
     	log.warn(SETINSIGHTVALUE: vie.getMessage());
     	return false;
    }
    
    def attribValues = newAttrib.getObjectAttributeValueBeans();
    attribValues.add(newAttribValue);
    newAttrib.setObjectAttributeValueBeans(attribValues);
     
    try {
    	newAttrib = objectFacade.storeObjectAttributeBean(newAttrib);
    } catch (Exception vie) {
    	log.warn("SETINSIGHTVALUE: Unable to save changes. Exiting.");
     	log.warn(SETINSIGHTVALUE: vie.getMessage());
    return false;
    }
    log.info("SETINSIGHTVALUE: Successfully saved value");
}</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">9750ea32-a13d-4474-8c20-074bb1967d78</arg>
                  <arg name="FIELD_NOTES">Clear cache</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\n\n/* REST API per Generazione Allegato Rapporto di Intervento */\nrequestMethod = \"POST\";\n/*Script Variables*/\n//Per test da console\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-14062\")\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/clearCache/dataObject\"\ndef body_req = []\nURL url = new URL(baseURL)\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.outputStream\nlog.debug \"body_req: \" + body_req\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\nlog.debug connection.outputStream\nconnection.connect();\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n}","scriptPath":null}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="v+nWù">false</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="211" name="Invia notifica ODA al Fornitore">
          <meta name="opsbar-sequence">60</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_NOTES">Check OP_PURCHASE_ORDER_DATE &amp;&amp; OP_PURCHASE_ORDER - If the first one is not null &amp;&amp; the second one is null - ODA has been created but mail not sent</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
cfValues[properties['cf.purchaseOrderDate']] != null &amp;&amp; cfValues[properties['cf.purchaseOrder']] == null|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">412f2a16-10d6-4b8f-83c9-4f9d4ed9b555</arg>
                <arg name="FIELD_NOTES">Maintenance Ticket</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"issue.issueType.name == 'Maintenance Ticket'","scriptPath":null,"parameters":{}}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">бн]ЫЌ»гNZг·_}ї7УMwЫ­цqю|ея:п·ё</arg>
              <arg name="FIELD_NOTES">OP: Check Required Fields - solo errors, no warnings</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\ndef Category log = Category.getInstance(\"com.onresolve.jira.groovy.PostFunction\")\n \nIssue issue = issue\n\ndef errors = false\ndef warnings = false\n\ndef lumpSumPrice =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumPrice'].toString())[0]\n\n/*Campi con dati obbligatori per ticket non a corpo*/\ndef repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.replacedMaterials'].toString())[0]\ndef unaTantumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.unatantumRates'].toString())[0]\ndef labourRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.labourRates'].toString())[0]\ndef travelRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.travelRates'].toString())[0]\n\n/*Campi con dati obbligatori per ticket a corpo*/\ndef lumpSumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumRates'].toString())[0]\n\n/*Conferma utente su warnings*/\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]\n\n/*Insight Schema IDs*/\ndef DBObjects = properties['ischema.dbo'].toString() + \"-\"\ndef OPAA = properties['ischema.aa'].toString() + \"-\"\n\ndef errorMandatoryFields = new ArrayList()\ndef errorJobStartedCompletedFields = new ArrayList()\ndef warningEmptyFields = new ArrayList()\ndef warningEmptyQuoteMatCustomer = new ArrayList()\ndef warningEmptyQuoteRateCustomer = new ArrayList()\n\n//try{\n    if(issue.getCustomFieldValue(lumpSumPrice)!=null &amp;&amp; issue.getCustomFieldValue(lumpSumPrice).toString().equals(\"Yes\")){\n        /*Contabilizzazione a corpo*/\n        log.debug \"Contabilizzazione a corpo\"\n        //OPAA_LUMP_SUM_RATES\n        if(issue.getCustomFieldValue(lumpSumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(lumpSumRates) != \"\" &amp;&amp; !issue.getCustomFieldValue(lumpSumRates).toString().equals(\"\")){\n            /*Ciclare tutti gli oggetti associati al campo*/\n            //insight classes &amp; components\n            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n            def lsRatesList = issue.getCustomFieldValue(lumpSumRates)\n\n            for(ls in lsRatesList){\n                //extract insight key ang get object\n                def lsRate=ls.toString()\n                def lsRateKey = lsRate.substring(lsRate.indexOf('(')+1,lsRate.indexOf(')'))\n                def lsRateObject = objectFacade.loadObjectBean(lsRateKey)\n                //get \"APPLIED_TO\" for that rate\n                def lsAppliedTo = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()\n                def lsAppliedToValue\n                if (lsAppliedTo){\n                    lsAppliedToValue = lsAppliedTo.substring(lsAppliedTo.indexOf('(')+1,lsAppliedTo.indexOf(')'))\n                }\n                \n                def lsRateRef = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()\n                \n                def lsRateRefKey\n                def lsRateRefValue\n                if(lsRateRef.size() &gt; 0){\n                    lsRateRef = lsRateRef.toString()\n                    lsRateRefKey = lsRateRef.substring(lsRateRef.indexOf('(')+1,lsRateRef.indexOf(')'))\n                    def lsRateRefObject = objectFacade.loadObjectBean(OPAA + lsRateRefKey)\n                    lsRateRefValue = objectFacade.loadObjectAttributeBean(lsRateRefObject.getId(), properties['iobj.rate.name'].toString()).getObjectAttributeValueBeans().toString()\n                    lsRateRefValue = lsRateRefValue.substring(lsRateRefValue.indexOf('(')+1,lsRateRefValue.indexOf(')'))\n                }\n\n                if(lsAppliedToValue.toString().equals(\"BOTH\") || lsAppliedToValue.toString().equals(\"SUPPLIER\")){\n                    //get \"TOTAL_AMOUNT_SUPPLIER\" for that component\n                    def totCustomer = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()\n                    if(!totCustomer || totCustomer[0].getValue().toString().equals(\"0.0\")){\n                        warnings=true\n                        warningEmptyQuoteRateCustomer.add(lsRateRefValue.toString())\n                    }\n                }\n             }    \n        }\n\n    }else{\n        /*Contabilizzazione non a corpo*/\n        log.debug \"Contabilizzazione NON a corpo\"\n\n        //OPAA_REPLACED_MATERIALS\n        if(issue.getCustomFieldValue(repMaterials)!=null &amp;&amp; (String)issue.getCustomFieldValue(repMaterials) != \"\" &amp;&amp; !issue.getCustomFieldValue(repMaterials).toString().equals(\"\")){\n            //log.debug \"Materiali: \" + issue.getCustomFieldValue(repMaterials)\n            /*Ciclare tutti gli oggetti associati al campo*/\n            //insight classes &amp; components\n            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n            def repMatList = issue.getCustomFieldValue(repMaterials)\n\n            for(mat in repMatList){\n                //extract insight key ang get object\n                def component=mat.toString()\n                def componentKey = component.substring(component.indexOf('('+OPAA)+1,component.length()-1)\n                def componentObject = objectFacade.loadObjectBean(componentKey)\n                //get \"APPLIED_TO\" for that component\n                def appliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString()).getObjectAttributeValueBeans() as ArrayList\n                def appliedToValue\n                if(appliedTo.size() &gt; 0){\n                    appliedTo = appliedTo.toString()\n                    appliedToValue = appliedTo.substring(appliedTo.indexOf('(')+1,appliedTo.indexOf(')'))\n                    //log.debug \"appliedToValue: \" + appliedToValue\n                }\n                \n                def matNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).getObjectAttributeValueBeans() as ArrayList\n                def matNumberKey\n                def matNumberValue\n                if(matNumber.size() &gt; 0){\n                    matNumber = matNumber.toString()\n                    matNumberKey = matNumber.substring(matNumber.indexOf('(')+1,matNumber.indexOf(')'))\n                    def matNumberObject = objectFacade.loadObjectBean(DBObjects + matNumberKey)\n                    matNumberValue = objectFacade.loadObjectAttributeBean(matNumberObject.getId(), properties['iobj.material.name'].toString()).getObjectAttributeValueBeans().toString()\n                    matNumberValue = matNumberValue.substring(matNumberValue.indexOf('(')+1,matNumberValue.indexOf(')'))\n                }\n                \n                def serialNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()).getObjectAttributeValueBeans() as ArrayList\n                def serialNumberValue\n                if(serialNumber.size() &gt; 0){\n                    serialNumber = serialNumber.toString()\n                    serialNumberValue = serialNumber.substring(serialNumber.indexOf('(')+1,serialNumber.indexOf(')'))\n                }               \n\n                if(appliedToValue.toString().equals(\"BOTH\") || appliedToValue.toString().equals(\"SUPPLIER\")){\n                    //get \"TOTAL_AMOUNT_SUPPLIER\" for that component\n                    def totCustomer = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans()\n                    if(!totCustomer || totCustomer[0].getValue().toString().equals(\"0.0\")){\n                        warnings=true\n                        warningEmptyQuoteMatCustomer.add(matNumberValue.toString() + (!serialNumber.toString().equals(\"[]\") ? \" (\" + serialNumberValue.toString() + \")\" : \" ()\"))   \n                    }\n                }\n             }    \n        }  \n\n        //OPAA_UNATANTUM_RATES\n        if(issue.getCustomFieldValue(unaTantumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(unaTantumRates) != \"\" &amp;&amp; !issue.getCustomFieldValue(unaTantumRates).toString().equals(\"\")){\n            log.debug \"Una tantum rates: \" + issue.getCustomFieldValue(unaTantumRates)\n            /*Ciclare tutti gli oggetti associati al campo*/\n            //insight classes &amp; components\n            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n            def umRatesList = issue.getCustomFieldValue(unaTantumRates)\n\n            for(um in umRatesList){\n                //extract insight key ang get object\n                def umRate=um.toString()\n                def umRateKey = umRate.substring(umRate.indexOf('(')+1,umRate.indexOf(')'))\n                def umRateObject = objectFacade.loadObjectBean(umRateKey)\n                //get \"APPLIED_TO\" for that rate\n                def umAppliedTo = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()\n                def umAppliedToValue = umAppliedTo.substring(umAppliedTo.indexOf('(')+1,umAppliedTo.indexOf(')'))\n\n                def umRateRef = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()\n                \n\n                def umRateRefKey\n                def umRateRefValue\n                if(umRateRef.size() &gt; 0){\n                    umRateRef = umRateRef.toString()\n                    umRateRefKey = umRateRef.substring(umRateRef.indexOf('(')+1,umRateRef.indexOf(')'))\n                    def umRateRefObject = objectFacade.loadObjectBean(OPAA + umRateRefKey)\n                    umRateRefValue = objectFacade.loadObjectAttributeBean(umRateRefObject.getId(), properties['iobj.rate.name'].toString()).getObjectAttributeValueBeans().toString()\n                    umRateRefValue = umRateRefValue.substring(umRateRefValue.indexOf('(')+1,umRateRefValue.indexOf(')'))\n                }\n                \n                if(umAppliedToValue.toString().equals(\"BOTH\") || umAppliedToValue.toString().equals(\"SUPPLIER\")){\n                    //get \"TOTAL_AMOUNT_SUPPLIER\" for that component\n                    def totCustomer = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()\n                    if(!totCustomer || totCustomer[0].getValue().toString().equals(\"0.0\")){\n                        warnings=true\n                        warningEmptyQuoteRateCustomer.add(umRateRefValue.toString())\n                    }\n                }\n             }    \n        }\n\n        //OPAA_LABOUR_RATES\n        if(issue.getCustomFieldValue(labourRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(labourRates) != \"\" &amp;&amp; !issue.getCustomFieldValue(labourRates).toString().equals(\"\")){\n            log.debug \"Labour rates: \" + issue.getCustomFieldValue(labourRates)\n            /*Ciclare tutti gli oggetti associati al campo*/\n            //insight classes &amp; components\n            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n            def labourRatesList = issue.getCustomFieldValue(labourRates)\n\n            for(lb in labourRatesList){\n                //extract insight key ang get object\n                def lbRate=lb.toString()\n                def lbRateKey = lbRate.substring(lbRate.indexOf('(')+1,lbRate.indexOf(')'))\n                def lbRateObject = objectFacade.loadObjectBean(lbRateKey)\n                //get \"APPLIED_TO\" for that rate\n                def lbAppliedTo = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()\n                def lbAppliedToValue = lbAppliedTo.substring(lbAppliedTo.indexOf('(')+1,lbAppliedTo.indexOf(')'))\n\n                def lbRateRef = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()\n                \n                def lbRateRefKey\n                def lbRateRefValue\n                if(lbRateRef.size() &gt; 0){\n                    lbRateRef = lbRateRef.toString()\n                    lbRateRefKey = lbRateRef.substring(lbRateRef.indexOf('(')+1,lbRateRef.indexOf(')'))\n                    def lbRateRefObject = objectFacade.loadObjectBean(OPAA + lbRateRefKey)\n                    lbRateRefValue = objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.name'].toString()).getObjectAttributeValueBeans().toString()\n                    lbRateRefValue = lbRateRefValue.substring(lbRateRefValue.indexOf('(')+1,lbRateRefValue.indexOf(')'))\n                }\n                \n                /*\n                def techRef = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), \"TECHNICIAN_REF\").getObjectAttributeValueBeans()\n                def techRefKey\n                def techRefValue\n                if(techRef.size() &gt; 0){\n                    techRef = techRef.toString()\n                    techRefKey = techRef.substring(techRef.indexOf('(')+1,techRef.indexOf(')'))\n                    def umRateRefObject = objectFacade.loadObjectBean(OPAA + umRateRefKey)\n                    techRefValue = objectFacade.loadObjectAttributeBean(techRefObject.getId(), \"Name\").getObjectAttributeValueBeans().toString()\n                    techRefValue = umRateRefValue.substring(techRefValue.indexOf('(')+1,techRefValue.indexOf(')'))\n                }\n                */\n\n                if(lbAppliedToValue.toString().equals(\"BOTH\") || lbAppliedToValue.toString().equals(\"SUPPLIER\")){\n                    //get \"TOTAL_AMOUNT_SUPPLIER\" for that component\n                    def totCustomer = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()\n                    if(!totCustomer || totCustomer[0].getValue().toString().equals(\"0.0\")){\n                        warnings=true\n                        warningEmptyQuoteRateCustomer.add(lbRateRefValue.toString()/* + \" (\" + techRefValue.toString() + \")\"*/)\n                    }\n                }\n             }    \n        }\n\n        //OPAA_TRAVEL_RATES\n        if(issue.getCustomFieldValue(travelRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(travelRates) != \"\" &amp;&amp; !issue.getCustomFieldValue(travelRates).toString().equals(\"\")){\n            log.debug \"Travel rates: \" + issue.getCustomFieldValue(travelRates)\n            /*Ciclare tutti gli oggetti associati al campo*/\n            //insight classes &amp; components\n            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n            def travelRatesList = issue.getCustomFieldValue(travelRates)\n\n            for(tr in travelRatesList){\n                //extract insight key ang get object\n                def trRate=tr.toString()\n                def trRateKey = trRate.substring(trRate.indexOf('(')+1,trRate.indexOf(')'))\n                def trRateObject = objectFacade.loadObjectBean(trRateKey)\n                //get \"APPLIED_TO\" for that rate\n                def trAppliedTo = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()\n                def trAppliedToValue = trAppliedTo.substring(trAppliedTo.indexOf('(')+1,trAppliedTo.indexOf(')'))\n\n                def trRateRef = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()\n                \n                def trRateRefKey\n                def trRateRefValue\n                if(trRateRef.size() &gt; 0){\n                    trRateRef = trRateRef.toString()\n                    trRateRefKey = trRateRef.substring(trRateRef.indexOf('(')+1,trRateRef.indexOf(')'))\n                    def trRateRefObject = objectFacade.loadObjectBean(OPAA + trRateRefKey)\n                    trRateRefValue = objectFacade.loadObjectAttributeBean(trRateRefObject.getId(), properties['iobj.rate.name'].toString()).getObjectAttributeValueBeans().toString()\n                    trRateRefValue = trRateRefValue.substring(trRateRefValue.indexOf('(')+1,trRateRefValue.indexOf(')'))\n                }\n\n                if(trAppliedToValue.toString().equals(\"BOTH\") || trAppliedToValue.toString().equals(\"SUPPLIER\")){\n                    //get \"TOTAL_AMOUNT_SUPPLIER\" for that component\n                    def totCustomer = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()\n                    if(!totCustomer || totCustomer[0].getValue().toString().equals(\"0.0\")){\n                        warnings=true\n                        warningEmptyQuoteRateCustomer.add(trRateRefValue.toString())\n                    }\n                }\n             }    \n        }\n\n    }\n\n\n    def output = new ArrayList()\n\n    if (!errors &amp;&amp; !warnings){\n        return true\n    }else{\n        if(!errors &amp;&amp; warnings){\n            //Se ci sono solo warnings verifico se l'utente ha gi\u00e0 dichiarato di voler proseguire comunque\n            // - transition field \"OPAA_CHECK_AND_CONFIRM\"=\"Yes\"\n            // - in caso contrario invio i warning a FE\n\n            //log.debug \"transitionCheck: \" + issue.getCustomFieldValue(transitionCheck)\n            //log.debug \"result: \" + issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")\n            if(issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")){\n                //log.debug \"return true - transitionCheck = Yes\"\n                return true\n            }else{\n                def wList = new ArrayList()\n\n                if(warningEmptyQuoteRateCustomer.size() &gt; 0){\n                    def wListConfirmEmptyRate = new ArrayList()\n                    wListConfirmEmptyRate.add(\"W\")\n                    wListConfirmEmptyRate.add(\"SUPPLIER_CONFIRM_EMPTY_RATES\")\n                    wListConfirmEmptyRate.add(null)\n                    wListConfirmEmptyRate.add(warningEmptyQuoteRateCustomer)\n\n                    wList.add(wListConfirmEmptyRate)\n                }\n\n                if(warningEmptyQuoteMatCustomer.size() &gt; 0){\n                    def wListConfirmEmptyMatQuote = new ArrayList()\n                    wListConfirmEmptyMatQuote.add(\"W\")\n                    wListConfirmEmptyMatQuote.add(\"SUPPLIER_CONFIRM_EMPTY_MAT_QUOTE\")\n                    wListConfirmEmptyMatQuote.add(null)\n                    wListConfirmEmptyMatQuote.add(warningEmptyQuoteMatCustomer)\n\n                    wList.add(wListConfirmEmptyMatQuote)\n                }\n\n                output.add(wList)\n                throw new InvalidInputException(\"W\", output.toString())   \n            }\n\n        }\n        if(errors &amp;&amp; !warnings){\n            def eList = new ArrayList()\n\n            output.add(eList)\n            throw new InvalidInputException(\"E\", output.toString())   \n        }\n        if(errors &amp;&amp; warnings){\n            def eList = new ArrayList()\n            def wList = new ArrayList()\n\n            if(warningEmptyQuoteRateCustomer.size() &gt; 0){\n                def wListConfirmEmptyRate = new ArrayList()\n                wListConfirmEmptyRate.add(\"W\")\n                wListConfirmEmptyRate.add(\"SUPPLIER_CONFIRM_EMPTY_RATES\")\n                wListConfirmEmptyRate.add(null)\n                wListConfirmEmptyRate.add(warningEmptyQuoteRateCustomer)\n\n                wList.add(wListConfirmEmptyRate)\n            }\n\n            if(warningEmptyQuoteMatCustomer.size() &gt; 0){\n                def wListConfirmEmptyMatQuote = new ArrayList()\n                wListConfirmEmptyMatQuote.add(\"W\")\n                wListConfirmEmptyMatQuote.add(\"SUPPLIER_CONFIRM_EMPTY_MAT_QUOTE\")\n                wListConfirmEmptyMatQuote.add(null)\n                wListConfirmEmptyMatQuote.add(warningEmptyQuoteMatCustomer)\n\n                wList.add(wListConfirmEmptyMatQuote)\n            }\n\n            output.add(eList)\n            output.add(wList)\n            throw new InvalidInputException(\"WE\", output.toString())  \n        }\n    }\n//}catch(Exception e){\n//    log.debug \"Exception: \" + e\n//    throw new InvalidInputException(\"Exception\", e.toString())  \n//}\n","scriptPath":null,"parameters":{}}</arg>
              <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
 
Issue issue = issue

def errors = false
def warnings = false

def lumpSumPrice =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumPrice'].toString())[0]

/*Campi con dati obbligatori per ticket non a corpo*/
def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.replacedMaterials'].toString())[0]
def unaTantumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.unatantumRates'].toString())[0]
def labourRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.labourRates'].toString())[0]
def travelRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.travelRates'].toString())[0]

/*Campi con dati obbligatori per ticket a corpo*/
def lumpSumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumRates'].toString())[0]

/*Conferma utente su warnings*/
def transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]

/*Insight Schema IDs*/
def DBObjects = properties['ischema.dbo'].toString() + "-"
def OPAA = properties['ischema.aa'].toString() + "-"

def errorMandatoryFields = new ArrayList()
def errorJobStartedCompletedFields = new ArrayList()
def warningEmptyFields = new ArrayList()
def warningEmptyQuoteMatCustomer = new ArrayList()
def warningEmptyQuoteRateCustomer = new ArrayList()

//try{
    if(issue.getCustomFieldValue(lumpSumPrice)!=null &amp;&amp; issue.getCustomFieldValue(lumpSumPrice).toString().equals("Yes")){
        /*Contabilizzazione a corpo*/
        log.debug "Contabilizzazione a corpo"
        //OPAA_LUMP_SUM_RATES
        if(issue.getCustomFieldValue(lumpSumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(lumpSumRates) != "" &amp;&amp; !issue.getCustomFieldValue(lumpSumRates).toString().equals("")){
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def lsRatesList = issue.getCustomFieldValue(lumpSumRates)

            for(ls in lsRatesList){
                //extract insight key ang get object
                def lsRate=ls.toString()
                def lsRateKey = lsRate.substring(lsRate.indexOf('(')+1,lsRate.indexOf(')'))
                def lsRateObject = objectFacade.loadObjectBean(lsRateKey)
                //get "APPLIED_TO" for that rate
                def lsAppliedTo = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                def lsAppliedToValue
                if (lsAppliedTo){
                    lsAppliedToValue = lsAppliedTo.substring(lsAppliedTo.indexOf('(')+1,lsAppliedTo.indexOf(')'))
                }
                
                def lsRateRef = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
                
                def lsRateRefKey
                def lsRateRefValue
                if(lsRateRef.size() &gt; 0){
                    lsRateRef = lsRateRef.toString()
                    lsRateRefKey = lsRateRef.substring(lsRateRef.indexOf('(')+1,lsRateRef.indexOf(')'))
                    def lsRateRefObject = objectFacade.loadObjectBean(OPAA + lsRateRefKey)
                    lsRateRefValue = objectFacade.loadObjectAttributeBean(lsRateRefObject.getId(), properties['iobj.rate.name'].toString()).getObjectAttributeValueBeans().toString()
                    lsRateRefValue = lsRateRefValue.substring(lsRateRefValue.indexOf('(')+1,lsRateRefValue.indexOf(')'))
                }

                if(lsAppliedToValue.toString().equals("BOTH") || lsAppliedToValue.toString().equals("SUPPLIER")){
                    //get "TOTAL_AMOUNT_SUPPLIER" for that component
                    def totCustomer = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateCustomer.add(lsRateRefValue.toString())
                    }
                }
             }    
        }

    }else{
        /*Contabilizzazione non a corpo*/
        log.debug "Contabilizzazione NON a corpo"

        //OPAA_REPLACED_MATERIALS
        if(issue.getCustomFieldValue(repMaterials)!=null &amp;&amp; (String)issue.getCustomFieldValue(repMaterials) != "" &amp;&amp; !issue.getCustomFieldValue(repMaterials).toString().equals("")){
            //log.debug "Materiali: " + issue.getCustomFieldValue(repMaterials)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def repMatList = issue.getCustomFieldValue(repMaterials)

            for(mat in repMatList){
                //extract insight key ang get object
                def component=mat.toString()
                def componentKey = component.substring(component.indexOf('('+OPAA)+1,component.length()-1)
                def componentObject = objectFacade.loadObjectBean(componentKey)
                //get "APPLIED_TO" for that component
                def appliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString()).getObjectAttributeValueBeans() as ArrayList
                def appliedToValue
                if(appliedTo.size() &gt; 0){
                    appliedTo = appliedTo.toString()
                    appliedToValue = appliedTo.substring(appliedTo.indexOf('(')+1,appliedTo.indexOf(')'))
                    //log.debug "appliedToValue: " + appliedToValue
                }
                
                def matNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).getObjectAttributeValueBeans() as ArrayList
                def matNumberKey
                def matNumberValue
                if(matNumber.size() &gt; 0){
                    matNumber = matNumber.toString()
                    matNumberKey = matNumber.substring(matNumber.indexOf('(')+1,matNumber.indexOf(')'))
                    def matNumberObject = objectFacade.loadObjectBean(DBObjects + matNumberKey)
                    matNumberValue = objectFacade.loadObjectAttributeBean(matNumberObject.getId(), properties['iobj.material.name'].toString()).getObjectAttributeValueBeans().toString()
                    matNumberValue = matNumberValue.substring(matNumberValue.indexOf('(')+1,matNumberValue.indexOf(')'))
                }
                
                def serialNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()).getObjectAttributeValueBeans() as ArrayList
                def serialNumberValue
                if(serialNumber.size() &gt; 0){
                    serialNumber = serialNumber.toString()
                    serialNumberValue = serialNumber.substring(serialNumber.indexOf('(')+1,serialNumber.indexOf(')'))
                }               

                if(appliedToValue.toString().equals("BOTH") || appliedToValue.toString().equals("SUPPLIER")){
                    //get "TOTAL_AMOUNT_SUPPLIER" for that component
                    def totCustomer = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans()
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteMatCustomer.add(matNumberValue.toString() + (!serialNumber.toString().equals("[]") ? " (" + serialNumberValue.toString() + ")" : " ()"))   
                    }
                }
             }    
        }  

        //OPAA_UNATANTUM_RATES
        if(issue.getCustomFieldValue(unaTantumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(unaTantumRates) != "" &amp;&amp; !issue.getCustomFieldValue(unaTantumRates).toString().equals("")){
            log.debug "Una tantum rates: " + issue.getCustomFieldValue(unaTantumRates)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def umRatesList = issue.getCustomFieldValue(unaTantumRates)

            for(um in umRatesList){
                //extract insight key ang get object
                def umRate=um.toString()
                def umRateKey = umRate.substring(umRate.indexOf('(')+1,umRate.indexOf(')'))
                def umRateObject = objectFacade.loadObjectBean(umRateKey)
                //get "APPLIED_TO" for that rate
                def umAppliedTo = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                def umAppliedToValue = umAppliedTo.substring(umAppliedTo.indexOf('(')+1,umAppliedTo.indexOf(')'))

                def umRateRef = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
                

                def umRateRefKey
                def umRateRefValue
                if(umRateRef.size() &gt; 0){
                    umRateRef = umRateRef.toString()
                    umRateRefKey = umRateRef.substring(umRateRef.indexOf('(')+1,umRateRef.indexOf(')'))
                    def umRateRefObject = objectFacade.loadObjectBean(OPAA + umRateRefKey)
                    umRateRefValue = objectFacade.loadObjectAttributeBean(umRateRefObject.getId(), properties['iobj.rate.name'].toString()).getObjectAttributeValueBeans().toString()
                    umRateRefValue = umRateRefValue.substring(umRateRefValue.indexOf('(')+1,umRateRefValue.indexOf(')'))
                }
                
                if(umAppliedToValue.toString().equals("BOTH") || umAppliedToValue.toString().equals("SUPPLIER")){
                    //get "TOTAL_AMOUNT_SUPPLIER" for that component
                    def totCustomer = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateCustomer.add(umRateRefValue.toString())
                    }
                }
             }    
        }

        //OPAA_LABOUR_RATES
        if(issue.getCustomFieldValue(labourRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(labourRates) != "" &amp;&amp; !issue.getCustomFieldValue(labourRates).toString().equals("")){
            log.debug "Labour rates: " + issue.getCustomFieldValue(labourRates)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def labourRatesList = issue.getCustomFieldValue(labourRates)

            for(lb in labourRatesList){
                //extract insight key ang get object
                def lbRate=lb.toString()
                def lbRateKey = lbRate.substring(lbRate.indexOf('(')+1,lbRate.indexOf(')'))
                def lbRateObject = objectFacade.loadObjectBean(lbRateKey)
                //get "APPLIED_TO" for that rate
                def lbAppliedTo = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                def lbAppliedToValue = lbAppliedTo.substring(lbAppliedTo.indexOf('(')+1,lbAppliedTo.indexOf(')'))

                def lbRateRef = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
                
                def lbRateRefKey
                def lbRateRefValue
                if(lbRateRef.size() &gt; 0){
                    lbRateRef = lbRateRef.toString()
                    lbRateRefKey = lbRateRef.substring(lbRateRef.indexOf('(')+1,lbRateRef.indexOf(')'))
                    def lbRateRefObject = objectFacade.loadObjectBean(OPAA + lbRateRefKey)
                    lbRateRefValue = objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.name'].toString()).getObjectAttributeValueBeans().toString()
                    lbRateRefValue = lbRateRefValue.substring(lbRateRefValue.indexOf('(')+1,lbRateRefValue.indexOf(')'))
                }
                
                /*
                def techRef = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), "TECHNICIAN_REF").getObjectAttributeValueBeans()
                def techRefKey
                def techRefValue
                if(techRef.size() &gt; 0){
                    techRef = techRef.toString()
                    techRefKey = techRef.substring(techRef.indexOf('(')+1,techRef.indexOf(')'))
                    def umRateRefObject = objectFacade.loadObjectBean(OPAA + umRateRefKey)
                    techRefValue = objectFacade.loadObjectAttributeBean(techRefObject.getId(), "Name").getObjectAttributeValueBeans().toString()
                    techRefValue = umRateRefValue.substring(techRefValue.indexOf('(')+1,techRefValue.indexOf(')'))
                }
                */

                if(lbAppliedToValue.toString().equals("BOTH") || lbAppliedToValue.toString().equals("SUPPLIER")){
                    //get "TOTAL_AMOUNT_SUPPLIER" for that component
                    def totCustomer = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateCustomer.add(lbRateRefValue.toString()/* + " (" + techRefValue.toString() + ")"*/)
                    }
                }
             }    
        }

        //OPAA_TRAVEL_RATES
        if(issue.getCustomFieldValue(travelRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(travelRates) != "" &amp;&amp; !issue.getCustomFieldValue(travelRates).toString().equals("")){
            log.debug "Travel rates: " + issue.getCustomFieldValue(travelRates)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def travelRatesList = issue.getCustomFieldValue(travelRates)

            for(tr in travelRatesList){
                //extract insight key ang get object
                def trRate=tr.toString()
                def trRateKey = trRate.substring(trRate.indexOf('(')+1,trRate.indexOf(')'))
                def trRateObject = objectFacade.loadObjectBean(trRateKey)
                //get "APPLIED_TO" for that rate
                def trAppliedTo = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                def trAppliedToValue = trAppliedTo.substring(trAppliedTo.indexOf('(')+1,trAppliedTo.indexOf(')'))

                def trRateRef = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
                
                def trRateRefKey
                def trRateRefValue
                if(trRateRef.size() &gt; 0){
                    trRateRef = trRateRef.toString()
                    trRateRefKey = trRateRef.substring(trRateRef.indexOf('(')+1,trRateRef.indexOf(')'))
                    def trRateRefObject = objectFacade.loadObjectBean(OPAA + trRateRefKey)
                    trRateRefValue = objectFacade.loadObjectAttributeBean(trRateRefObject.getId(), properties['iobj.rate.name'].toString()).getObjectAttributeValueBeans().toString()
                    trRateRefValue = trRateRefValue.substring(trRateRefValue.indexOf('(')+1,trRateRefValue.indexOf(')'))
                }

                if(trAppliedToValue.toString().equals("BOTH") || trAppliedToValue.toString().equals("SUPPLIER")){
                    //get "TOTAL_AMOUNT_SUPPLIER" for that component
                    def totCustomer = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateCustomer.add(trRateRefValue.toString())
                    }
                }
             }    
        }

    }


    def output = new ArrayList()

    if (!errors &amp;&amp; !warnings){
        return true
    }else{
        if(!errors &amp;&amp; warnings){
            //Se ci sono solo warnings verifico se l'utente ha già dichiarato di voler proseguire comunque
            // - transition field "OPAA_CHECK_AND_CONFIRM"="Yes"
            // - in caso contrario invio i warning a FE

            //log.debug "transitionCheck: " + issue.getCustomFieldValue(transitionCheck)
            //log.debug "result: " + issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")
            if(issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")){
                //log.debug "return true - transitionCheck = Yes"
                return true
            }else{
                def wList = new ArrayList()

                if(warningEmptyQuoteRateCustomer.size() &gt; 0){
                    def wListConfirmEmptyRate = new ArrayList()
                    wListConfirmEmptyRate.add("W")
                    wListConfirmEmptyRate.add("SUPPLIER_CONFIRM_EMPTY_RATES")
                    wListConfirmEmptyRate.add(null)
                    wListConfirmEmptyRate.add(warningEmptyQuoteRateCustomer)

                    wList.add(wListConfirmEmptyRate)
                }

                if(warningEmptyQuoteMatCustomer.size() &gt; 0){
                    def wListConfirmEmptyMatQuote = new ArrayList()
                    wListConfirmEmptyMatQuote.add("W")
                    wListConfirmEmptyMatQuote.add("SUPPLIER_CONFIRM_EMPTY_MAT_QUOTE")
                    wListConfirmEmptyMatQuote.add(null)
                    wListConfirmEmptyMatQuote.add(warningEmptyQuoteMatCustomer)

                    wList.add(wListConfirmEmptyMatQuote)
                }

                output.add(wList)
                throw new InvalidInputException('{"W":"' + output.toString() + '"}')
                //throw new InvalidInputException("W", output.toString())   
            }

        }
        if(errors &amp;&amp; !warnings){
            def eList = new ArrayList()

            output.add(eList)
            throw new InvalidInputException('{"E":"' + output.toString() + '"}')
            //throw new InvalidInputException("E", output.toString())   
        }
        if(errors &amp;&amp; warnings){
            def eList = new ArrayList()
            def wList = new ArrayList()

            if(warningEmptyQuoteRateCustomer.size() &gt; 0){
                def wListConfirmEmptyRate = new ArrayList()
                wListConfirmEmptyRate.add("W")
                wListConfirmEmptyRate.add("SUPPLIER_CONFIRM_EMPTY_RATES")
                wListConfirmEmptyRate.add(null)
                wListConfirmEmptyRate.add(warningEmptyQuoteRateCustomer)

                wList.add(wListConfirmEmptyRate)
            }

            if(warningEmptyQuoteMatCustomer.size() &gt; 0){
                def wListConfirmEmptyMatQuote = new ArrayList()
                wListConfirmEmptyMatQuote.add("W")
                wListConfirmEmptyMatQuote.add("SUPPLIER_CONFIRM_EMPTY_MAT_QUOTE")
                wListConfirmEmptyMatQuote.add(null)
                wListConfirmEmptyMatQuote.add(warningEmptyQuoteMatCustomer)

                wList.add(wListConfirmEmptyMatQuote)
            }

            output.add(eList)
            output.add(wList)
            throw new InvalidInputException('{"WE":"' + output.toString() + '"}')
            //throw new InvalidInputException("WE", output.toString())  
        }
    }
//}catch(Exception e){
//    log.debug "Exception: " + e
//    throw new InvalidInputException("Exception", e.toString())  
//}
</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">Ко{К█ЖяЪ6o╬·щ╖╨sW^ЦM}ъ~÷s÷&lt;К╖</arg>
              <arg name="FIELD_NOTES">OP Email Notification: PURCHASE_ORDER_TO_SUPPLIER</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nCategory log = Category.getInstance(\"com.onresolve.jira.groovy.PostFunction\")\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\n\nrequestMethod = \"POST\";\n\ndef relatesInIssueLink=false\ndef relatesOutIssueLink=false\ndef linkedTickets=new ArrayList()\n\nList&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\nfor (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n\n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n        relatesInIssueLink=true\n        linkedTickets.add(issueLink.getSourceObject())\n        log.debug \"Issue con relatesInIssueLink\"\n    }\n}\nList&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\nfor (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n\n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n        relatesOutIssueLink=true\n        linkedTickets.add(issueLink.getDestinationObject())\n        log.debug \"Issue con relatesOutIssueLink\"\n    }\n}\n\ndef body_req = []\n\nif(relatesInIssueLink || relatesOutIssueLink){\n    body_req = [\n        \"templateName\": properties['tt.purchaseOrderToS'].toString(),\n        \"pec\": false,\n        \"issueKey\": issue.key,\n        \"linkedTickets\": linkedTickets\n    ]    \n}else{\n    body_req = [\n        \"templateName\": properties['tt.purchaseOrderToS'].toString(),\n        \"pec\": false,\n        \"issueKey\": issue.key\n    ] \n}\n\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/transaction/mail/send\"\nurl = new URL(baseURL)\nconnection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.outputStream\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\nlog.debug connection.outputStream\nconnection.connect();\n\ndef output = new ArrayList()\ndef eList = new ArrayList()\ndef eListErrors = new ArrayList()\ndef errorMsgs = new ArrayList()\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n    eListErrors.add(\"E\")\n    eListErrors.add(\"SENDMAIL\")\n    errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n    eListErrors.add(errorMsgs)\n    eList.add(eListErrors)\n\n    output.add(eList)\n    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    //throw new InvalidInputException(\"E\", output.toString())\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import org.apache.log4j.Category
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)
import com.atlassian.jira.issue.link.IssueLink

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def requestMethod
def baseURL

URL url
HttpURLConnection connection

requestMethod = "POST";

def relatesInIssueLink=false
def relatesOutIssueLink=false
def linkedTickets=new ArrayList()

List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesInIssueLink=true
        linkedTickets.add(issueLink.getSourceObject())
        log.debug "Issue con relatesInIssueLink"
    }
}
List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesOutIssueLink=true
        linkedTickets.add(issueLink.getDestinationObject())
        log.debug "Issue con relatesOutIssueLink"
    }
}

def body_req = []

if(relatesInIssueLink || relatesOutIssueLink){
    body_req = [
        "templateName": properties['tt.purchaseOrderToS'].toString(),
        "pec": false,
        "issueKey": issue.key,
        "linkedTickets": linkedTickets
    ]    
}else{
    body_req = [
        "templateName": properties['tt.purchaseOrderToS'].toString(),
        "pec": false,
        "issueKey": issue.key
    ] 
}

baseURL = "http://" + properties['api.env'].toString() + "/op/rest/jira/AA/transaction/mail/send"
url = new URL(baseURL)
connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.outputStream
connection.outputStream.withWriter("UTF-8") { new StreamingJsonBuilder(it, body_req) }
log.debug connection.outputStream
connection.connect();

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()
    eListErrors.add("E")
    eListErrors.add("SENDMAIL")
    errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
    eListErrors.add(errorMsgs)
    eList.add(eListErrors)

    output.add(eList)
    throw new InvalidInputException('{"E":"' + output.toString() + '"}')
    //throw new InvalidInputException("E", output.toString())
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="221" name="Invia Mail Rapporto di Intervento" view="fieldscreen">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19912</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_NOTES">OP: If status=COMPLETED TO BE CLOSED &amp;&amp; ONSITE_REPORT = null - Notification has not been sent</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
cfValues[properties['cf.wfOnsiteReport']] == null|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">b4a54bb6-c08d-4e16-b3cf-1348807eb21a</arg>
                <arg name="FIELD_NOTES">Maintenance Ticket</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"issue.issueType.name == 'Maintenance Ticket'","scriptPath":null,"parameters":{}}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">e824724d-1f75-44f4-8569-241bdc9705cd</arg>
                <arg name="FIELD_NOTES">Available only if there is at least one ON SITE REPORT attached to the ticket</arg>
                <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\nlog.debug \"OnSite Report per issue: \" + issue.key\n/* REST API per Generazione Allegato Rapporto di Intervento */\nrequestMethod = \"PUT\";\n/*Script Variables*/\n//Per test da console\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-14062\")\n\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\n\n/*Rimozione allegato rapporto di intervento appena creato*/\n/* Get Insight IQL Facade from plugin accessor */\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\n\n/* Get Insight Object Facade from plugin accessor */\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n/* Get Insight Object Type Facade from plugin accessor */\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\");\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\n\n/* Get Insight Object Attribute Facade from plugin accessor */\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\");\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\n\n/* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include \" around value */\ndef objects = iqlFacade.findObjectsByIQLAndSchema(DBO, \"objectType=Attachment AND \\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".Name LIKE \\\"Rapporto di intervento\\\" AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"); // See the complete list of possible IQL on the Insight Query Language documentation page\n/* If this is a mandatory field you should be able to do this: */\nlog.debug \"IQL: \" + \"objectType=Attachment AND \\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".Name LIKE \\\"Rapporto di intervento\\\" AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"\nlog.debug \"objects: \" + objects\nlog.debug \"risultato: \" + (objects != null &amp;&amp; objects.size&gt;0 &amp;&amp; !issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance']))\n/*!!Da rimuovere appena risolti i bug!!*/\n//return (objects != null &amp;&amp; objects.size!=0) &amp;&amp; !issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance'])\npassesCondition = (objects != null &amp;&amp; objects.size&gt;0 &amp;&amp; !issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance']))\n","scriptPath":null}</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.CustomScriptCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">uЗњгЧ{kgцн§»—µsЯ;б§vся}yѕ_uнч</arg>
              <arg name="FIELD_NOTES">OP: linkedTickets!=null =&gt; Check with user the required Email Recipients</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.atlassian.jira.issue.link.IssueLink\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\n\ndef fieldsRequired = false\ndef automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]\ndef sendMailTo =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.sendMailToLinked'].toString())[0]\ndef requiredFields = new ArrayList()\ndef relatesInIssueLink=false\ndef relatesOutIssueLink=false\n\n/*OP-1038: Chiedo all'utente se e a chi vuole inviare la notifica del rapporto di intervento che verr\u00e0 generato.\nLo chiedo solo se il ticket su cui sto eseguendo la transazione non \u00e8 stato chiuso in automatico dal sistema e solo se non gli era gi\u00e0 stato chiesto prima*/\nlog.debug \"issue.getCustomFieldValue(automaticallyClosed): \" + issue.getCustomFieldValue(automaticallyClosed)\nlog.debug \"issue.getCustomFieldValue(sendMailTo): \" + issue.getCustomFieldValue(sendMailTo)\nlog.debug \"transientVars: \" + transientVars\nlog.debug \"issue.getCustomFieldValue(sendMailTo).toString(): \" + issue.getCustomFieldValue(sendMailTo).toString()\n\nList&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\nfor (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n    \n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n\t\trelatesInIssueLink=true\n        log.debug \"Issue con relatesInIssueLink\"\n        break\n    }\n}\nList&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\nfor (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n    \n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n\t\trelatesOutIssueLink=true\n        log.debug \"Issue con relatesOutIssueLink\"\n        break\n    }\n}\n\nlog.debug issue.key + \" (relatesInIssueLink || relatesOutIssueLink): \" + (relatesInIssueLink || relatesOutIssueLink)\nlog.debug issue.key + \" (issue.getCustomFieldValue(automaticallyClosed) \" + issue.getCustomFieldValue(automaticallyClosed)\nlog.debug issue.key + \" issue.getCustomFieldValue(sendMailTo)==null \" + (issue.getCustomFieldValue(sendMailTo)==null)\n\nif((relatesInIssueLink || relatesOutIssueLink) /*&amp;&amp; (issue.getCustomFieldValue(automaticallyClosed)==null || !issue.getCustomFieldValue(automaticallyClosed).toString().equals(\"Yes\"))*/ &amp;&amp; (issue.getCustomFieldValue(sendMailTo)==null || issue.getCustomFieldValue(sendMailTo).toString().equals(\"None\"))){\n\tfieldsRequired = true\n\trequiredFields.add(properties['cf.sendMailToLinked'].toString())\n}\n\nlog.debug \"FieldsRequired: \" + fieldsRequired\ndef output = new ArrayList()\n\nif(fieldsRequired){\n\tdef fList = new ArrayList()\n\n        if(requiredFields.size() &gt; 0){\n        \tdef fListDetail = new ArrayList()\n                fListDetail.add(\"F\")\n                fListDetail.add(\"USER_INPUT\")\n            \tfListDetail.add(null)\n                fListDetail.add(requiredFields)\n                fList.add(fListDetail)\n        }\n\n        output.add(fList)\n    \tthrow new InvalidInputException('{\"F\":\"' + output.toString() + '\"}')\n        //throw new InvalidInputException(\"F\", output.toString())   \n}else{\n    return true\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import com.atlassian.jira.issue.link.IssueLink
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

Issue issue = issue

def fieldsRequired = false
def automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]
def sendMailTo =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.sendMailToLinked'].toString())[0]
def requiredFields = new ArrayList()
def relatesInIssueLink=false
def relatesOutIssueLink=false

/*OP-1038: Chiedo all'utente se e a chi vuole inviare la notifica del rapporto di intervento che verrà generato.
Lo chiedo solo se il ticket su cui sto eseguendo la transazione non è stato chiuso in automatico dal sistema e solo se non gli era già stato chiesto prima*/
log.debug "issue.getCustomFieldValue(automaticallyClosed): " + issue.getCustomFieldValue(automaticallyClosed)
log.debug "issue.getCustomFieldValue(sendMailTo): " + issue.getCustomFieldValue(sendMailTo)
log.debug "transientVars: " + transientVars
log.debug "issue.getCustomFieldValue(sendMailTo).toString(): " + issue.getCustomFieldValue(sendMailTo).toString()

List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();
    
    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
		relatesInIssueLink=true
        log.debug "Issue con relatesInIssueLink"
        break
    }
}
List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();
    
    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
		relatesOutIssueLink=true
        log.debug "Issue con relatesOutIssueLink"
        break
    }
}

log.debug issue.key + " (relatesInIssueLink || relatesOutIssueLink): " + (relatesInIssueLink || relatesOutIssueLink)
log.debug issue.key + " (issue.getCustomFieldValue(automaticallyClosed) " + issue.getCustomFieldValue(automaticallyClosed)
log.debug issue.key + " issue.getCustomFieldValue(sendMailTo)==null " + (issue.getCustomFieldValue(sendMailTo)==null)

if((relatesInIssueLink || relatesOutIssueLink) /*&amp;&amp; (issue.getCustomFieldValue(automaticallyClosed)==null || !issue.getCustomFieldValue(automaticallyClosed).toString().equals("Yes"))*/ &amp;&amp; issue.getCustomFieldValue(sendMailTo)==null){
	fieldsRequired = true
	requiredFields.add(properties['cf.sendMailToLinked'].toString())
}

log.debug "FieldsRequired: " + fieldsRequired
def output = new ArrayList()

if(fieldsRequired){
	def fList = new ArrayList()

        if(requiredFields.size() &gt; 0){
        	def fListDetail = new ArrayList()
                fListDetail.add("F")
                fListDetail.add("USER_INPUT")
            	fListDetail.add(null)
                fListDetail.add(requiredFields)
                fList.add(fListDetail)
        }

        output.add(fList)
    	throw new InvalidInputException('{"F":"' + output.toString() + '"}')
        //throw new InvalidInputException("F", output.toString())   
}else{
    return true
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">ï}ó{Ítw^4}Íö{·Ñ¾ÚÝ·óW</arg>
              <arg name="FIELD_NOTES">OP: REST API: OP Email Notification: ONSITE_REPORT</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.link.IssueLink\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nCategory log = Category.getInstance(\"com.onresolve.jira.groovy.PostFunction\")\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\ndef sendMailTo =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.sendMailToLinked'].toString())[0]\ndef onsiteReportDate = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.wfOnsiteReport'].toString())[0]\ndef sendMailToRec =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.sendMailToRecipients'].toString())[0]\n\ndef relatesInIssueLink=false\ndef relatesOutIssueLink=false\ndef linkedTickets=new ArrayList()\nlog.debug issue.getCustomFieldValue(sendMailTo).toString()\n\nList&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\nfor (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n\n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString()) &amp;&amp; issueLink.getSourceObject().status.name == \"Completed to be Closed\"){\n        relatesInIssueLink=true\n        linkedTickets.add(issueLink.getSourceObject().toString())\n        log.debug \"Issue con relatesInIssueLink\"\n    }\n}\nList&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\nfor (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n\n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString()) &amp;&amp; issueLink.getDestinationObject().status.name == \"Completed to be Closed\"){\n        relatesOutIssueLink=true\n        linkedTickets.add(issueLink.getDestinationObject().toString())\n        log.debug \"Issue con relatesOutIssueLink\"\n    }\n}\n\ndef body_req = []\n\nif((relatesInIssueLink || relatesOutIssueLink) &amp;&amp; !issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.noEmail'].toString()) &amp;&amp; issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.currentReport'].toString())){\n    //OP-1038: inviare solo la mail con il rapporto di intervento del ticket corrente\n    body_req = [\n        \"templateName\": properties['tt.onSiteReport'].toString(),\n        \"pec\": false,\n        \"issueKey\": issue.key,\n        \"additionalRecipients\": issue.getCustomFieldValue(sendMailToRec).toString()\n    ]\n    log.debug \"in1: body_req: \" + body_req\n}else if((relatesInIssueLink || relatesOutIssueLink) &amp;&amp; !issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.noEmail'].toString()) &amp;&amp; issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.allLinked'].toString())){\n    //OP-1038: inviare la mail con tutti i rapporti di intervento dei ticket collegati\n    body_req = [\n        \"templateName\": properties['tt.onSiteReport'].toString(),\n        \"pec\": false,\n        \"issueKey\": issue.key,\n        \"linkedTickets\": linkedTickets,\n        \"additionalRecipients\": issue.getCustomFieldValue(sendMailToRec).toString()\n    ]\n    log.debug \"in2: body_req: \" + body_req\n}else if(!relatesInIssueLink &amp;&amp; !relatesOutIssueLink){\n    body_req = [\n        \"templateName\": properties['tt.onSiteReport'].toString(),\n        \"pec\": false,\n        \"issueKey\": issue.key,\n        \"additionalRecipients\": issue.getCustomFieldValue(sendMailToRec).toString()\n    ]\n    log.debug \"in3: body_req: \" + body_req\n}\n\n/* REST API per Invio Notifica Email ONSITE_REPORT */\nrequestMethod = \"POST\";\nlog.debug \"preparo la chiamata\"\nbaseURL = \"http://\" + properties[\"api.env\"].toString() + \"/op/rest/jira/AA/transaction/mail/send\"\nURL url = new URL(baseURL)\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.outputStream\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\nlog.debug \"connection.outputStream: \" + connection.outputStream\nconnection.connect();\n//log.debug \"url: \" + url\nlog.debug \"ResponseCode:\" + connection.getResponseCode()\nlog.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\ndef output = new ArrayList()\ndef eList = new ArrayList()\ndef eListErrors = new ArrayList()\ndef errorMsgs = new ArrayList()\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"url: \" + url\n    log.debug \"body_req: \" + body_req\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n    def outputMsg = ((HttpURLConnection)connection).errorStream.text\n    log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n    def jsonSlurper = new JsonSlurper()\n    def json_object = jsonSlurper.parseText(outputMsg)\n    assert json_object instanceof Map  \n    log.debug \"message: \" +  json_object.message\n\n    eListErrors.add(\"E\")\n    eListErrors.add(\"SENDMAIL\")\n    errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n    eListErrors.add(json_object.message)\n    eList.add(eListErrors)\n\n    output.add(eList)\n    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    //throw new InvalidInputException(\"E\", output.toString())\n    \n}else{\n    /*L'email \u00e8 stata inviata correttamente, aggiorno il campo ONSITE_REPORT con la data corrente*/\n\n    // log.warn \"issue \"+issue.getKey()\n    def cfv = issue.getCustomFieldValue(onsiteReportDate)\n    if (!cfv) {\n        def t0  = new java.sql.Timestamp(System.currentTimeMillis())\n        log.warn \"StartTime =&gt; '\"+t0.toString()+\"'\"\n        def mv = new ModifiedValue(onsiteReportDate, t0)\n        def ch = new DefaultIssueChangeHolder()\n        onsiteReportDate.updateValue(null, issue, mv, ch) \n    } else {\n        log.warn \"StartTime == '\"+cfv.toString()+\"'\"\n    }\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.event.type.EventDispatchOption
import org.apache.log4j.Category
import com.atlassian.jira.issue.link.IssueLink
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def requestMethod
def baseURL
def sendMailTo =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.sendMailToLinked'].toString())[0]
def onsiteReportDate = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.wfOnsiteReport'].toString())[0]
def sendMailToRec =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.sendMailToRecipients'].toString())[0]

def relatesInIssueLink=false
def relatesOutIssueLink=false
def linkedTickets=new ArrayList()
log.debug issue.getCustomFieldValue(sendMailTo).toString()

List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesInIssueLink=true
        linkedTickets.add(issueLink.getSourceObject().toString())
        log.debug "Issue con relatesInIssueLink"
    }
}
List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesOutIssueLink=true
        linkedTickets.add(issueLink.getDestinationObject().toString())
        log.debug "Issue con relatesOutIssueLink"
    }
}

def body_req = []

if((relatesInIssueLink || relatesOutIssueLink) &amp;&amp; !issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.noEmail'].toString()) &amp;&amp; issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.currentReport'].toString())){
    //OP-1038: inviare solo la mail con il rapporto di intervento del ticket corrente
    body_req = [
        "templateName": properties['tt.onSiteReport'].toString(),
        "pec": false,
        "issueKey": issue.key,
        "additionalRecipients": issue.getCustomFieldValue(sendMailToRec).toString()
    ]
    log.debug "in1: body_req: " + body_req
}else if((relatesInIssueLink || relatesOutIssueLink) &amp;&amp; !issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.noEmail'].toString()) &amp;&amp; issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.allLinked'].toString())){
    //OP-1038: inviare la mail con tutti i rapporti di intervento dei ticket collegati
    body_req = [
        "templateName": properties['tt.onSiteReport'].toString(),
        "pec": false,
        "issueKey": issue.key,
        "linkedTickets": linkedTickets,
        "additionalRecipients": issue.getCustomFieldValue(sendMailToRec).toString()
    ]
    log.debug "in2: body_req: " + body_req
}else if(!relatesInIssueLink &amp;&amp; !relatesOutIssueLink){
    body_req = [
        "templateName": properties['tt.onSiteReport'].toString(),
        "pec": false,
        "issueKey": issue.key,
        "additionalRecipients": issue.getCustomFieldValue(sendMailToRec).toString()
    ]
    log.debug "in3: body_req: " + body_req
}

/* REST API per Invio Notifica Email ONSITE_REPORT */
requestMethod = "POST";
log.debug "preparo la chiamata"
baseURL = "http://" + properties["api.env"].toString() + "/op/rest/jira/AA/transaction/mail/send"
URL url = new URL(baseURL)
HttpURLConnection connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.outputStream
connection.outputStream.withWriter("UTF-8") { new StreamingJsonBuilder(it, body_req) }
log.debug "connection.outputStream: " + connection.outputStream
connection.connect();
//log.debug "url: " + url
log.debug "ResponseCode:" + connection.getResponseCode()
log.debug "ResponseMessage:" + connection.getResponseMessage()

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "body_req: " + body_req
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()

    def outputMsg = ((HttpURLConnection)connection).errorStream.text
    log.debug "((HttpURLConnection)connection).errorStream.text: " + outputMsg

    def jsonSlurper = new JsonSlurper()
    def json_object = jsonSlurper.parseText(outputMsg)
    assert json_object instanceof Map  
    log.debug "message: " +  json_object.message

    eListErrors.add("E")
    eListErrors.add("SENDMAIL")
    errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
    eListErrors.add(json_object.message)
    eList.add(eListErrors)

    output.add(eList)
    throw new InvalidInputException('{"E":"' + output.toString() + '"}')
    //throw new InvalidInputException("E", output.toString())
    
}else{
    /*L'email è stata inviata correttamente, aggiorno il campo ONSITE_REPORT con la data corrente*/

    // log.warn "issue "+issue.getKey()
    def cfv = issue.getCustomFieldValue(onsiteReportDate)
    if (!cfv) {
        def t0  = new java.sql.Timestamp(System.currentTimeMillis())
        log.warn "StartTime =&gt; '"+t0.toString()+"'"
        def mv = new ModifiedValue(onsiteReportDate, t0)
        def ch = new DefaultIssueChangeHolder()
        onsiteReportDate.updateValue(null, issue, mv, ch) 
    } else {
        log.warn "StartTime == '"+cfv.toString()+"'"
    }
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="6">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="field.name">customfield_22641</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22666</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="511" name="Clona Tkt" view="fieldscreen">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20401</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">c659704c-9678-4844-9a05-6f3497e391e7</arg>
                <arg name="FIELD_NOTES">Enabled only for Repair and New Installation</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"issue.issueType.name == 'Maintenance Ticket' || (issue.issueType.name == 'New Installation' &amp;&amp; cfValues['OP_ASSET'] != null)","scriptPath":null}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="6">
              <post-functions>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="диюбwbХ*'">¶»ž</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue" />
                  <arg name="fieldValue">New Installation</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="targetIssueTypeDefinedByCfSelection" />
                  <arg name="issueTypeId">12301</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">H</arg>
                  <arg name="maxAllowed-integerValue" />
                  <arg name="transitionAttachmentsOperation">rr</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="╡крz╙ыв7Ь╡'еy╦^t+м╢ЙЕЙщ]" />
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId" />
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="²æÅºw-ì">[{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_21909","destinationFieldId":"customfield_21909"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22600","destinationFieldId":"customfield_22600"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22822","destinationFieldId":"customfield_22822"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22601","destinationFieldId":"customfield_22601"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22603","destinationFieldId":"customfield_22603"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22663","destinationFieldId":"customfield_22663"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22634","destinationFieldId":"customfield_22634"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22651","destinationFieldId":"customfield_22651"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22700","destinationFieldId":"customfield_22700"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22606","destinationFieldId":"customfield_22606"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22607","destinationFieldId":"customfield_22607"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22629","destinationFieldId":"customfield_22629"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22652","destinationFieldId":"customfield_22652"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"description","destinationFieldId":"description"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22627","destinationFieldId":"customfield_22627"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22620","destinationFieldId":"customfield_22620"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22668","destinationFieldId":"customfield_22668"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23602","destinationFieldId":"customfield_23203"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22814","destinationFieldId":"customfield_22814"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23237","destinationFieldId":"customfield_23237"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"issuekey","destinationFieldId":"customfield_23243"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"YES","destinationFieldId":"customfield_23238"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22702","destinationFieldId":"customfield_22702"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22703","destinationFieldId":"customfield_22703"}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="диюбwbХ*'">¶»ž</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue" />
                  <arg name="fieldValue">Maintenance Ticket</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="targetIssueTypeDefinedByCfSelection" />
                  <arg name="issueTypeId">13001</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">H</arg>
                  <arg name="maxAllowed-integerValue" />
                  <arg name="transitionAttachmentsOperation">rr</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="╡крz╙ыв7Ь╡'еy╦^t+м╢ЙЕЙщ]" />
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId" />
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="²æÅºw-ì">[{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_21909","destinationFieldId":"customfield_21909"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22600","destinationFieldId":"customfield_22600"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22822","destinationFieldId":"customfield_22822"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22601","destinationFieldId":"customfield_22601"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22603","destinationFieldId":"customfield_22603"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22663","destinationFieldId":"customfield_22663"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22634","destinationFieldId":"customfield_22634"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22651","destinationFieldId":"customfield_22651"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22700","destinationFieldId":"customfield_22700"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22606","destinationFieldId":"customfield_22606"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22607","destinationFieldId":"customfield_22607"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22629","destinationFieldId":"customfield_22629"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22652","destinationFieldId":"customfield_22652"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"description","destinationFieldId":"description"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22627","destinationFieldId":"customfield_22627"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22620","destinationFieldId":"customfield_22620"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22668","destinationFieldId":"customfield_22668"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23602","destinationFieldId":"customfield_23203"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22814","destinationFieldId":"customfield_22814"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23237","destinationFieldId":"customfield_23237"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"issuekey","destinationFieldId":"customfield_23243"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"YES","destinationFieldId":"customfield_23238"}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23602</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="611" name="Re-Invia Mail Rapporto di Intervento" view="fieldscreen">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19912</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">a427f3dd-5525-41b0-a491-11f378238361</arg>
                <arg name="FIELD_NOTES">OP: If status=COMPLETED TO BE CLOSED &amp;&amp; ONSITE_REPORT = null - Notification has not been sent</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"import com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\ncfValues[properties['cf.wfOnsiteReport']] != null","scriptPath":null,"parameters":{}}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE">AAS-15446</arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">22690743-3ae3-441a-b99c-dca209b6a789</arg>
                <arg name="FIELD_NOTES">Maintenance Ticket OR PM Ticket</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"issue.issueType.name == 'Maintenance Ticket' || issue.issueType.name == 'Planned Maintenance Ticket'","scriptPath":null,"parameters":{}}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">uЗњгЧ{kgцн§»—µsЯ;б§vся}yѕ_uнч</arg>
              <arg name="FIELD_NOTES">OP: linkedTickets!=null =&gt; Check with user the required Email Recipients</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.atlassian.jira.issue.link.IssueLink\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\ndef fieldsRequired = false\ndef automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]\ndef sendMailTo =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.sendMailToLinked'].toString())[0]\ndef requiredFields = new ArrayList()\ndef relatesInIssueLink=false\ndef relatesOutIssueLink=false\n\n/*OP-1038: Chiedo all'utente se e a chi vuole inviare la notifica del rapporto di intervento che verr\u00e0 generato.\nLo chiedo solo se il ticket su cui sto eseguendo la transazione non \u00e8 stato chiuso in automatico dal sistema e solo se non gli era gi\u00e0 stato chiesto prima*/\nlog.debug \"issue.getCustomFieldValue(automaticallyClosed): \" + issue.getCustomFieldValue(automaticallyClosed)\nlog.debug \"issue.getCustomFieldValue(sendMailTo): \" + issue.getCustomFieldValue(sendMailTo)\nlog.debug \"transientVars: \" + transientVars\nlog.debug \"issue.getCustomFieldValue(sendMailTo).toString(): \" + issue.getCustomFieldValue(sendMailTo).toString()\n\nList&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\nfor (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n    \n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n\t\trelatesInIssueLink=true\n        log.debug \"Issue con relatesInIssueLink\"\n        break\n    }\n}\nList&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\nfor (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n    \n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n\t\trelatesOutIssueLink=true\n        log.debug \"Issue con relatesOutIssueLink\"\n        break\n    }\n}\n\nlog.debug issue.key + \" (relatesInIssueLink || relatesOutIssueLink): \" + (relatesInIssueLink || relatesOutIssueLink)\nlog.debug issue.key + \" (issue.getCustomFieldValue(automaticallyClosed) \" + issue.getCustomFieldValue(automaticallyClosed)\nlog.debug issue.key + \" issue.getCustomFieldValue(sendMailTo)==null \" + (issue.getCustomFieldValue(sendMailTo)==null)\n\nif((relatesInIssueLink || relatesOutIssueLink) /*&amp;&amp; (issue.getCustomFieldValue(automaticallyClosed)==null || !issue.getCustomFieldValue(automaticallyClosed).toString().equals(\"Yes\"))*/ &amp;&amp; (issue.getCustomFieldValue(sendMailTo)==null || issue.getCustomFieldValue(sendMailTo).toString().equals(\"None\"))){\n\tfieldsRequired = true\n\trequiredFields.add(properties['cf.sendMailToLinked'].toString())\n}\n\nlog.debug \"FieldsRequired: \" + fieldsRequired\ndef output = new ArrayList()\n\nif(fieldsRequired){\n\tdef fList = new ArrayList()\n\n        if(requiredFields.size() &gt; 0){\n        \tdef fListDetail = new ArrayList()\n                fListDetail.add(\"F\")\n                fListDetail.add(\"USER_INPUT\")\n            \tfListDetail.add(null)\n                fListDetail.add(requiredFields)\n                fList.add(fListDetail)\n        }\n\n        output.add(fList)\n    \tthrow new InvalidInputException('{\"F\":\"' + output.toString() + '\"}')\n        //throw new InvalidInputException(\"F\", output.toString())   \n}else{\n    return true\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import com.atlassian.jira.issue.link.IssueLink
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

Issue issue = issue

def fieldsRequired = false
def automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]
def sendMailTo =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.sendMailToLinked'].toString())[0]
def requiredFields = new ArrayList()
def relatesInIssueLink=false
def relatesOutIssueLink=false

/*OP-1038: Chiedo all'utente se e a chi vuole inviare la notifica del rapporto di intervento che verrà generato.
Lo chiedo solo se il ticket su cui sto eseguendo la transazione non è stato chiuso in automatico dal sistema e solo se non gli era già stato chiesto prima*/
log.debug "issue.getCustomFieldValue(automaticallyClosed): " + issue.getCustomFieldValue(automaticallyClosed)
log.debug "issue.getCustomFieldValue(sendMailTo): " + issue.getCustomFieldValue(sendMailTo)
log.debug "transientVars: " + transientVars
log.debug "issue.getCustomFieldValue(sendMailTo).toString(): " + issue.getCustomFieldValue(sendMailTo).toString()

List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();
    
    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
		relatesInIssueLink=true
        log.debug "Issue con relatesInIssueLink"
        break
    }
}
List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();
    
    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
		relatesOutIssueLink=true
        log.debug "Issue con relatesOutIssueLink"
        break
    }
}

log.debug issue.key + " (relatesInIssueLink || relatesOutIssueLink): " + (relatesInIssueLink || relatesOutIssueLink)
log.debug issue.key + " (issue.getCustomFieldValue(automaticallyClosed) " + issue.getCustomFieldValue(automaticallyClosed)
log.debug issue.key + " issue.getCustomFieldValue(sendMailTo)==null " + (issue.getCustomFieldValue(sendMailTo)==null)

if((relatesInIssueLink || relatesOutIssueLink) /*&amp;&amp; (issue.getCustomFieldValue(automaticallyClosed)==null || !issue.getCustomFieldValue(automaticallyClosed).toString().equals("Yes"))*/ &amp;&amp; issue.getCustomFieldValue(sendMailTo)==null){
	fieldsRequired = true
	requiredFields.add(properties['cf.sendMailToLinked'].toString())
}

log.debug "FieldsRequired: " + fieldsRequired
def output = new ArrayList()

if(fieldsRequired){
	def fList = new ArrayList()

        if(requiredFields.size() &gt; 0){
        	def fListDetail = new ArrayList()
                fListDetail.add("F")
                fListDetail.add("USER_INPUT")
            	fListDetail.add(null)
                fListDetail.add(requiredFields)
                fList.add(fListDetail)
        }

        output.add(fList)
    	throw new InvalidInputException('{"F":"' + output.toString() + '"}')
        //throw new InvalidInputException("F", output.toString())   
}else{
    return true
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">ï}ó{Ítw^4}Íö{·Ñ¾ÚÝ·óW</arg>
              <arg name="FIELD_NOTES">OP: REST API: OP Email Notification: ONSITE_REPORT</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.link.IssueLink\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nCategory log = Category.getInstance(\"com.onresolve.jira.groovy.PostFunction\")\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\ndef sendMailTo =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.sendMailToLinked'].toString())[0]\ndef onsiteReportDate = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.wfOnsiteReport'].toString())[0]\ndef sendMailToRec =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.sendMailToRecipients'].toString())[0]\n\ndef relatesInIssueLink=false\ndef relatesOutIssueLink=false\ndef linkedTickets=new ArrayList()\nlog.debug issue.getCustomFieldValue(sendMailTo).toString()\n\nList&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\nfor (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n\n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString()) &amp;&amp; issueLink.getSourceObject().status.name == \"Completed to be Closed\"){\n        relatesInIssueLink=true\n        linkedTickets.add(issueLink.getSourceObject().toString())\n        log.debug \"Issue con relatesInIssueLink\"\n    }\n}\nList&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\nfor (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n\n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString()) &amp;&amp; issueLink.getDestinationObject().status.name == \"Completed to be Closed\"){\n        relatesOutIssueLink=true\n        linkedTickets.add(issueLink.getDestinationObject().toString())\n        log.debug \"Issue con relatesOutIssueLink\"\n    }\n}\n\ndef body_req = []\n\nif((relatesInIssueLink || relatesOutIssueLink) &amp;&amp; !issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.noEmail'].toString()) &amp;&amp; issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.currentReport'].toString())){\n    //OP-1038: inviare solo la mail con il rapporto di intervento del ticket corrente\n    body_req = [\n        \"templateName\": properties['tt.onSiteReport'].toString(),\n        \"pec\": false,\n        \"issueKey\": issue.key,\n        \"additionalRecipients\": issue.getCustomFieldValue(sendMailToRec).toString()\n    ]\n    log.debug \"in1: body_req: \" + body_req\n}else if((relatesInIssueLink || relatesOutIssueLink) &amp;&amp; !issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.noEmail'].toString()) &amp;&amp; issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.allLinked'].toString())){\n    //OP-1038: inviare la mail con tutti i rapporti di intervento dei ticket collegati\n    body_req = [\n        \"templateName\": properties['tt.onSiteReport'].toString(),\n        \"pec\": false,\n        \"issueKey\": issue.key,\n        \"linkedTickets\": linkedTickets,\n        \"additionalRecipients\": issue.getCustomFieldValue(sendMailToRec).toString()\n    ]\n    log.debug \"in2: body_req: \" + body_req\n}else if(!relatesInIssueLink &amp;&amp; !relatesOutIssueLink){\n    body_req = [\n        \"templateName\": properties['tt.onSiteReport'].toString(),\n        \"pec\": false,\n        \"issueKey\": issue.key,\n        \"additionalRecipients\": issue.getCustomFieldValue(sendMailToRec).toString()\n    ]\n    log.debug \"in3: body_req: \" + body_req\n}\n\n/* REST API per Invio Notifica Email ONSITE_REPORT */\nrequestMethod = \"POST\";\nlog.debug \"preparo la chiamata\"\nbaseURL = \"http://\" + properties[\"api.env\"].toString() + \"/op/rest/jira/AA/transaction/mail/send\"\nURL url = new URL(baseURL)\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.outputStream\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\nlog.debug \"connection.outputStream: \" + connection.outputStream\nconnection.connect();\n//log.debug \"url: \" + url\nlog.debug \"ResponseCode:\" + connection.getResponseCode()\nlog.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\ndef output = new ArrayList()\ndef eList = new ArrayList()\ndef eListErrors = new ArrayList()\ndef errorMsgs = new ArrayList()\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"url: \" + url\n    log.debug \"body_req: \" + body_req\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n    def outputMsg = ((HttpURLConnection)connection).errorStream.text\n    log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n    def jsonSlurper = new JsonSlurper()\n    def json_object = jsonSlurper.parseText(outputMsg)\n    assert json_object instanceof Map  \n    log.debug \"message: \" +  json_object.message\n\n    eListErrors.add(\"E\")\n    eListErrors.add(\"SENDMAIL\")\n    errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n    eListErrors.add(json_object.message)\n    eList.add(eListErrors)\n\n    output.add(eList)\n    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    //throw new InvalidInputException(\"E\", output.toString())\n    \n}else{\n    /*L'email \u00e8 stata inviata correttamente, aggiorno il campo ONSITE_REPORT con la data corrente*/\n\n    // log.warn \"issue \"+issue.getKey()\n    def cfv = issue.getCustomFieldValue(onsiteReportDate)\n    if (!cfv) {\n        def t0  = new java.sql.Timestamp(System.currentTimeMillis())\n        log.warn \"StartTime =&gt; '\"+t0.toString()+\"'\"\n        def mv = new ModifiedValue(onsiteReportDate, t0)\n        def ch = new DefaultIssueChangeHolder()\n        onsiteReportDate.updateValue(null, issue, mv, ch) \n    } else {\n        log.warn \"StartTime == '\"+cfv.toString()+\"'\"\n    }\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.event.type.EventDispatchOption
import org.apache.log4j.Category
import com.atlassian.jira.issue.link.IssueLink
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def requestMethod
def baseURL
def sendMailTo =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.sendMailToLinked'].toString())[0]
def onsiteReportDate = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.wfOnsiteReport'].toString())[0]
def sendMailToRec =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.sendMailToRecipients'].toString())[0]

def relatesInIssueLink=false
def relatesOutIssueLink=false
def linkedTickets=new ArrayList()
log.debug issue.getCustomFieldValue(sendMailTo).toString()

List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesInIssueLink=true
        linkedTickets.add(issueLink.getSourceObject().toString())
        log.debug "Issue con relatesInIssueLink"
    }
}
List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesOutIssueLink=true
        linkedTickets.add(issueLink.getDestinationObject().toString())
        log.debug "Issue con relatesOutIssueLink"
    }
}

def body_req = []

if((relatesInIssueLink || relatesOutIssueLink) &amp;&amp; !issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.noEmail'].toString()) &amp;&amp; issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.currentReport'].toString())){
    //OP-1038: inviare solo la mail con il rapporto di intervento del ticket corrente
    body_req = [
        "templateName": properties['tt.onSiteReport'].toString(),
        "pec": false,
        "issueKey": issue.key,
        "additionalRecipients": issue.getCustomFieldValue(sendMailToRec).toString()
    ]
    log.debug "in1: body_req: " + body_req
}else if((relatesInIssueLink || relatesOutIssueLink) &amp;&amp; !issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.noEmail'].toString()) &amp;&amp; issue.getCustomFieldValue(sendMailTo).toString().equals(properties['cf.option.sendMailTo.allLinked'].toString())){
    //OP-1038: inviare la mail con tutti i rapporti di intervento dei ticket collegati
    body_req = [
        "templateName": properties['tt.onSiteReport'].toString(),
        "pec": false,
        "issueKey": issue.key,
        "linkedTickets": linkedTickets,
        "additionalRecipients": issue.getCustomFieldValue(sendMailToRec).toString()
    ]
    log.debug "in2: body_req: " + body_req
}else if(!relatesInIssueLink &amp;&amp; !relatesOutIssueLink){
    body_req = [
        "templateName": properties['tt.onSiteReport'].toString(),
        "pec": false,
        "issueKey": issue.key,
        "additionalRecipients": issue.getCustomFieldValue(sendMailToRec).toString()
    ]
    log.debug "in3: body_req: " + body_req
}

/* REST API per Invio Notifica Email ONSITE_REPORT */
requestMethod = "POST";
log.debug "preparo la chiamata"
baseURL = "http://" + properties["api.env"].toString() + "/op/rest/jira/AA/transaction/mail/send"
URL url = new URL(baseURL)
HttpURLConnection connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.outputStream
connection.outputStream.withWriter("UTF-8") { new StreamingJsonBuilder(it, body_req) }
log.debug "connection.outputStream: " + connection.outputStream
connection.connect();
//log.debug "url: " + url
log.debug "ResponseCode:" + connection.getResponseCode()
log.debug "ResponseMessage:" + connection.getResponseMessage()

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "body_req: " + body_req
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()

    def outputMsg = ((HttpURLConnection)connection).errorStream.text
    log.debug "((HttpURLConnection)connection).errorStream.text: " + outputMsg

    def jsonSlurper = new JsonSlurper()
    def json_object = jsonSlurper.parseText(outputMsg)
    assert json_object instanceof Map  
    log.debug "message: " +  json_object.message

    eListErrors.add("E")
    eListErrors.add("SENDMAIL")
    errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
    eListErrors.add(json_object.message)
    eList.add(eListErrors)

    output.add(eList)
    throw new InvalidInputException('{"E":"' + output.toString() + '"}')
    //throw new InvalidInputException("E", output.toString())
    
}else{
    /*L'email è stata inviata correttamente, aggiorno il campo ONSITE_REPORT con la data corrente*/

    // log.warn "issue "+issue.getKey()
    def cfv = issue.getCustomFieldValue(onsiteReportDate)
    if (!cfv) {
        def t0  = new java.sql.Timestamp(System.currentTimeMillis())
        log.warn "StartTime =&gt; '"+t0.toString()+"'"
        def mv = new ModifiedValue(onsiteReportDate, t0)
        def ch = new DefaultIssueChangeHolder()
        onsiteReportDate.updateValue(null, issue, mv, ch) 
    } else {
        log.warn "StartTime == '"+cfv.toString()+"'"
    }
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="6">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="field.name">customfield_22641</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22666</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="621" name="Re-Invia Consuntivo al Cliente" view="fieldscreen">
          <meta name="opsbar-sequence">30</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19911</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">dacad0dc-0b69-4718-870b-22e11398542c</arg>
                <arg name="FIELD_NOTES">Maintenance Ticket OR PM Ticket</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"issue.issueType.name == 'Maintenance Ticket' || issue.issueType.name == 'Planned Maintenance Ticket'","scriptPath":null,"parameters":{}}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">fada32c2-b768-4770-816d-beeac0f8e084</arg>
                <arg name="FIELD_NOTES">OP: Check FINANCIAL_STATEMENT_TO_CUSTOMER - If it's null the email has not been sent yet</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"import com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\ncfValues[properties['cf.wfFinancialStatmToC']] != null","scriptPath":null,"parameters":{}}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">e70180eb-0cf2-468c-b6c4-1eeded83980b</arg>
                <arg name="FIELD_NOTES">OP: Check OP_AUTOMATICALLY_CLOSED - if Yes don't allow transition</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"import com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\ncfValues[properties['cf.automaticallyClosed']] == null || cfValues[properties['cf.automaticallyClosed']]?.value == 'No'","scriptPath":null}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">éÎüéÇ_Ñ®Ñ§xo¦õw~Õ§uçß=ÛMöí§v</arg>
              <arg name="FIELD_NOTES">OP: Check Required Fields - solo errors, no warnings</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.atlassian.jira.issue.IssueManager\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n \n//IssueManager issueManager = ComponentAccessor.getIssueManager();\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-3981\")\n\ndef errors = false\ndef warnings = false\n\ndef lumpSumPrice =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumPrice'].toString())[0]\n\n/*Campi con dati obbligatori per ticket non a corpo*/\ndef repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.replacedMaterials'].toString())[0]\ndef unaTantumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.unatantumRates'].toString())[0]\ndef labourRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.labourRates'].toString())[0]\ndef travelRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.travelRates'].toString())[0]\n\n/*Campi con dati obbligatori per ticket a corpo*/\ndef lumpSumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumRates'].toString())[0]\n\n/*Conferma utente su warnings*/\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]\n\n/*Insight Schema IDs*/\ndef DBObjects = properties['ischema.dbo'].toString() + \"-\"\ndef OPAA = properties['ischema.aa'].toString() + \"-\"\n\ndef errorMandatoryFields = new ArrayList()\ndef errorJobStartedCompletedFields = new ArrayList()\ndef warningEmptyFields = new ArrayList()\ndef warningEmptyQuoteMatCustomer = new ArrayList()\ndef warningEmptyQuoteRateCustomer = new ArrayList()\n\n//try{\n    if(issue.getCustomFieldValue(lumpSumPrice)!=null &amp;&amp; issue.getCustomFieldValue(lumpSumPrice).toString().equals(\"Yes\")){\n        /*Contabilizzazione a corpo*/\n        log.debug \"Contabilizzazione a corpo\"\n        //OPAA_LUMP_SUM_RATES\n        if(issue.getCustomFieldValue(lumpSumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(lumpSumRates) != \"\" &amp;&amp; !issue.getCustomFieldValue(lumpSumRates).toString().equals(\"\")){\n            /*Ciclare tutti gli oggetti associati al campo*/\n            //insight classes &amp; components\n            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n            def lsRatesList = issue.getCustomFieldValue(lumpSumRates)\n\t\t\tlog.debug lsRatesList\n            for(ls in lsRatesList){\n                //extract insight key ang get object\n                def lsRate=ls.toString()\n                log.debug \"lsRate: \" + lsRate\n                def lsRateKey = lsRate.substring(lsRate.indexOf('(')+1,lsRate.indexOf(')'))\n                log.debug \"lsRateKey: \" + lsRateKey\n                def lsRateObject = objectFacade.loadObjectBean(lsRateKey)\n                log.debug \"lsRateObject: \" + lsRateObject\n                //get \"APPLIED_TO\" for that rate\n                def lsAppliedTo = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()\n                log.debug \"lsAppliedTo: \" + lsAppliedTo\n                def lsAppliedToValue\n                if (lsAppliedTo){\n                    lsAppliedToValue = lsAppliedTo.substring(lsAppliedTo.indexOf('(')+1,lsAppliedTo.indexOf(')'))\n                }\n                log.debug \"objectFacade.loadObjectAttributeBean(lsRateObject.getId(), RATE_REF): \" + objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())\n                def lsRateRef = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()\n                log.debug \"lsRateRef: \" + lsRateRef\n                def lsRateRefKey\n                def lsRateRefValue\n                if(lsRateRef.size() &gt; 0){\n                    lsRateRef = lsRateRef.toString()\n                    lsRateRefKey = lsRateRef.substring(lsRateRef.indexOf('(')+1,lsRateRef.indexOf(')'))\n                    def lsRateRefObject = objectFacade.loadObjectBean(DBObjects + lsRateRefKey)\n                    log.debug lsRateRefObject\n                    lsRateRefValue = objectFacade.loadObjectAttributeBean(lsRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()\n                    lsRateRefValue = lsRateRefValue.substring(lsRateRefValue.indexOf('(')+1,lsRateRefValue.indexOf(')'))\n                }\n\n                if(lsAppliedToValue.toString().equals(\"BOTH\") || lsAppliedToValue.toString().equals(\"CUSTOMER\")){\n                    //get \"TOTAL_AMOUNT_CUSTOMER\" for that component\n                    def totCustomer = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()\n                    if(!totCustomer || totCustomer[0].getValue().toString().equals(\"0.0\")){\n                        warnings=true\n                        warningEmptyQuoteRateCustomer.add(lsRateRefValue.toString())\n                    }\n                }\n             }    \n        }\n\n    }else{\n        /*Contabilizzazione non a corpo*/\n        log.debug \"Contabilizzazione NON a corpo\"\n\n        //OPAA_REPLACED_MATERIALS\n        if(issue.getCustomFieldValue(repMaterials)!=null &amp;&amp; (String)issue.getCustomFieldValue(repMaterials) != \"\" &amp;&amp; !issue.getCustomFieldValue(repMaterials).toString().equals(\"\")){\n            //log.debug \"Materiali: \" + issue.getCustomFieldValue(repMaterials)\n            /*Ciclare tutti gli oggetti associati al campo*/\n            //insight classes &amp; components\n            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n            def repMatList = issue.getCustomFieldValue(repMaterials)\n\n            for(mat in repMatList){\n                //extract insight key ang get object\n                def component=mat.toString()\n                def componentKey = component.substring(component.indexOf('('+OPAA)+1,component.length()-1)\n                def componentObject = objectFacade.loadObjectBean(componentKey)\n                //get \"APPLIED_TO\" for that component\n                def appliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans() as ArrayList\n                def appliedToValue\n                if(appliedTo.size() &gt; 0){\n                    appliedTo = appliedTo.toString()\n                    appliedToValue = appliedTo.substring(appliedTo.indexOf('(')+1,appliedTo.indexOf(')'))\n                    //log.debug \"appliedToValue: \" + appliedToValue\n                }\n                \n                def matNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).getObjectAttributeValueBeans() as ArrayList\n                def matNumberKey\n                def matNumberValue\n                if(matNumber.size() &gt; 0){\n                    matNumber = matNumber.toString()\n                    matNumberKey = matNumber.substring(matNumber.indexOf('(')+1,matNumber.indexOf(')'))\n                    def matNumberObject = objectFacade.loadObjectBean(DBObjects + matNumberKey)\n                    matNumberValue = objectFacade.loadObjectAttributeBean(matNumberObject.getId(), properties['iobj.material.name'].toString()).getObjectAttributeValueBeans().toString()\n                    matNumberValue = matNumberValue.substring(matNumberValue.indexOf('(')+1,matNumberValue.indexOf(')'))\n                }\n                \n                def serialNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()) ? objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()).getObjectAttributeValueBeans() as ArrayList : null\n                def serialNumberValue\n                if(serialNumber){\n                    serialNumber = serialNumber.toString()\n                    serialNumberValue = serialNumber.substring(serialNumber.indexOf('(')+1,serialNumber.indexOf(')'))\n                }               \n\n                if(appliedToValue.toString().equals(\"BOTH\") || appliedToValue.toString().equals(\"CUSTOMER\")){\n                    //get \"TOTAL_AMOUNT_CUSTOMER\" for that component\n                    def totCustomer = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()).getObjectAttributeValueBeans()\n                    if(!totCustomer || totCustomer[0].getValue().toString().equals(\"0.0\")){\n                        warnings=true\n                        warningEmptyQuoteMatCustomer.add(matNumberValue.toString() + (!serialNumber.toString().equals(\"[]\") ? \" (\" + serialNumberValue.toString() + \")\" : \" ()\"))   \n                    }\n                }\n             }    \n        }  \n\n        //OPAA_UNATANTUM_RATES\n        if(issue.getCustomFieldValue(unaTantumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(unaTantumRates) != \"\" &amp;&amp; !issue.getCustomFieldValue(unaTantumRates).toString().equals(\"\")){\n            log.debug \"Una tantum rates: \" + issue.getCustomFieldValue(unaTantumRates)\n            /*Ciclare tutti gli oggetti associati al campo*/\n            //insight classes &amp; components\n            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n            def umRatesList = issue.getCustomFieldValue(unaTantumRates)\n\n            for(um in umRatesList){\n                //extract insight key ang get object\n                def umRate=um.toString()\n                def umRateKey = umRate.substring(umRate.indexOf('(')+1,umRate.indexOf(')'))\n                def umRateObject = objectFacade.loadObjectBean(umRateKey)\n                //get \"APPLIED_TO\" for that rate\n                def umAppliedTo = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()\n                def umAppliedToValue = umAppliedTo.substring(umAppliedTo.indexOf('(')+1,umAppliedTo.indexOf(')'))\n\n                def umRateRef = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()\n\n                def umRateRefKey\n                def umRateRefValue\n                if(umRateRef.size() &gt; 0){\n                    umRateRef = umRateRef.toString()\n                    umRateRefKey = umRateRef.substring(umRateRef.indexOf('(')+1,umRateRef.indexOf(')'))\n                    def umRateRefObject = objectFacade.loadObjectBean(DBObjects + umRateRefKey)\n                    umRateRefValue = objectFacade.loadObjectAttributeBean(umRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()\n                    umRateRefValue = umRateRefValue.substring(umRateRefValue.indexOf('(')+1,umRateRefValue.indexOf(')'))\n                }\n                \n                if(umAppliedToValue.toString().equals(\"BOTH\") || umAppliedToValue.toString().equals(\"CUSTOMER\")){\n                    //get \"TOTAL_AMOUNT_CUSTOMER\" for that component\n                    def totCustomer = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()\n                    if(!totCustomer || totCustomer[0].getValue().toString().equals(\"0.0\")){\n                        warnings=true\n                        warningEmptyQuoteRateCustomer.add(umRateRefValue.toString())\n                    }\n                }\n             }    \n        }\n\n        //OPAA_LABOUR_RATES\n        if(issue.getCustomFieldValue(labourRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(labourRates) != \"\" &amp;&amp; !issue.getCustomFieldValue(labourRates).toString().equals(\"\")){\n            log.debug \"Labour rates: \" + issue.getCustomFieldValue(labourRates)\n            /*Ciclare tutti gli oggetti associati al campo*/\n            //insight classes &amp; components\n            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n            def labourRatesList = issue.getCustomFieldValue(labourRates)\n\n            for(lb in labourRatesList){\n                //extract insight key ang get object\n                def lbRate=lb.toString()\n                def lbRateKey = lbRate.substring(lbRate.indexOf('(')+1,lbRate.indexOf(')'))\n                def lbRateObject = objectFacade.loadObjectBean(lbRateKey)\n                //get \"APPLIED_TO\" for that rate\n                def lbAppliedTo = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()\n                def lbAppliedToValue = lbAppliedTo.substring(lbAppliedTo.indexOf('(')+1,lbAppliedTo.indexOf(')'))\n\n                def lbRateRef = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()\n                \n                def lbRateRefKey\n                def lbRateRefValue\n                if(lbRateRef.size() &gt; 0){\n                    lbRateRef = lbRateRef.toString()\n                    lbRateRefKey = lbRateRef.substring(lbRateRef.indexOf('(')+1,lbRateRef.indexOf(')'))\n                    def lbRateRefObject = objectFacade.loadObjectBean(DBObjects + lbRateRefKey)\n                    lbRateRefValue = objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()\n                    lbRateRefValue = lbRateRefValue.substring(lbRateRefValue.indexOf('(')+1,lbRateRefValue.indexOf(')'))\n                }\n\n                if(lbAppliedToValue.toString().equals(\"BOTH\") || lbAppliedToValue.toString().equals(\"CUSTOMER\")){\n                    //get \"TOTAL_AMOUNT_CUSTOMER\" for that component\n                    def totCustomer = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()\n                    if(!totCustomer || totCustomer[0].getValue().toString().equals(\"0.0\")){\n                        warnings=true\n                        warningEmptyQuoteRateCustomer.add(lbRateRefValue.toString())\n                    }\n                }\n             }    \n        }\n\n        //OPAA_TRAVEL_RATES\n        if(issue.getCustomFieldValue(travelRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(travelRates) != \"\" &amp;&amp; !issue.getCustomFieldValue(travelRates).toString().equals(\"\")){\n            log.debug \"Travel rates: \" + issue.getCustomFieldValue(travelRates)\n            /*Ciclare tutti gli oggetti associati al campo*/\n            //insight classes &amp; components\n            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n            def travelRatesList = issue.getCustomFieldValue(travelRates)\n\n            for(tr in travelRatesList){\n                //extract insight key ang get object\n                def trRate=tr.toString()\n                def trRateKey = trRate.substring(trRate.indexOf('(')+1,trRate.indexOf(')'))\n                def trRateObject = objectFacade.loadObjectBean(trRateKey)\n                //get \"APPLIED_TO\" for that rate\n                def trAppliedTo = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()\n                def trAppliedToValue = trAppliedTo.substring(trAppliedTo.indexOf('(')+1,trAppliedTo.indexOf(')'))\n\n                def trRateRef = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()\n                \n                def trRateRefKey\n                def trRateRefValue\n                if(trRateRef.size() &gt; 0){\n                    trRateRef = trRateRef.toString()\n                    trRateRefKey = trRateRef.substring(trRateRef.indexOf('(')+1,trRateRef.indexOf(')'))\n                    def trRateRefObject = objectFacade.loadObjectBean(DBObjects + trRateRefKey)\n                    trRateRefValue = objectFacade.loadObjectAttributeBean(trRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()\n                    trRateRefValue = trRateRefValue.substring(trRateRefValue.indexOf('(')+1,trRateRefValue.indexOf(')'))\n                }\n\n                if(trAppliedToValue.toString().equals(\"BOTH\") || trAppliedToValue.toString().equals(\"CUSTOMER\")){\n                    //get \"TOTAL_AMOUNT_CUSTOMER\" for that component\n                    def totCustomer = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()\n                    if(!totCustomer || totCustomer[0].getValue().toString().equals(\"0.0\")){\n                        warnings=true\n                        warningEmptyQuoteRateCustomer.add(trRateRefValue.toString())\n                    }\n                }\n             }    \n        }\n\n    }\n\n\n    def output = new ArrayList()\n\n    if (!errors &amp;&amp; !warnings){\n        return true\n    }else{\n        if(!errors &amp;&amp; warnings){\n            //Se ci sono solo warnings verifico se l'utente ha gi\u00e0 dichiarato di voler proseguire comunque\n            // - transition field \"OPAA_CHECK_AND_CONFIRM\"=\"Yes\"\n            // - in caso contrario invio i warning a FE\n\n            //log.debug \"transitionCheck: \" + issue.getCustomFieldValue(transitionCheck)\n            //log.debug \"result: \" + issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")\n            if(issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")){\n                //log.debug \"return true - transitionCheck = Yes\"\n                return true\n            }else{\n                def wList = new ArrayList()\n\n                if(warningEmptyQuoteRateCustomer.size() &gt; 0){\n                    def wListConfirmEmptyRate = new ArrayList()\n                    wListConfirmEmptyRate.add(\"W\")\n                    wListConfirmEmptyRate.add(\"CUSTOMER_CONFIRM_EMPTY_RATES\")\n                    wListConfirmEmptyRate.add(null)\n                    wListConfirmEmptyRate.add(warningEmptyQuoteRateCustomer)\n\n                    wList.add(wListConfirmEmptyRate)\n                }\n\n                if(warningEmptyQuoteMatCustomer.size() &gt; 0){\n                    def wListConfirmEmptyMatQuote = new ArrayList()\n                    wListConfirmEmptyMatQuote.add(\"W\")\n                    wListConfirmEmptyMatQuote.add(\"CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE\")\n                    wListConfirmEmptyMatQuote.add(null)\n                    wListConfirmEmptyMatQuote.add(warningEmptyQuoteMatCustomer)\n\n                    wList.add(wListConfirmEmptyMatQuote)\n                }\n\n                output.add(wList)\n                throw new InvalidInputException('{\"W\":\"' + output.toString() + '\"}')\n                //throw new InvalidInputException(\"W\", output.toString())   \n            }\n\n        }\n        if(errors &amp;&amp; !warnings){\n            def eList = new ArrayList()\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n            //throw new InvalidInputException(\"E\", output.toString())   \n        }\n        if(errors &amp;&amp; warnings){\n            def eList = new ArrayList()\n            def wList = new ArrayList()\n\n            if(warningEmptyQuoteRateCustomer.size() &gt; 0){\n                    def wListConfirmEmptyRate = new ArrayList()\n                    wListConfirmEmptyRate.add(\"W\")\n                    wListConfirmEmptyRate.add(\"CUSTOMER_CONFIRM_EMPTY_RATES\")\n                \twListConfirmEmptyRate.add(null)\n                    wListConfirmEmptyRate.add(warningEmptyQuoteRateCustomer)\n\n                    wList.add(wListConfirmEmptyRate)\n                }\n\n                if(warningEmptyQuoteMatCustomer.size() &gt; 0){\n                    def wListConfirmEmptyMatQuote = new ArrayList()\n                    wListConfirmEmptyMatQuote.add(\"W\")\n                    wListConfirmEmptyMatQuote.add(\"CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE\")\n                    wListConfirmEmptyMatQuote.add(null)\n                    wListConfirmEmptyMatQuote.add(warningEmptyQuoteMatCustomer)\n\n                    wList.add(wListConfirmEmptyMatQuote)\n                }\n\n            output.add(eList)\n            output.add(wList)\n            throw new InvalidInputException('{\"WE\":\"' + output.toString() + '\"}')\n            //throw new InvalidInputException(\"WE\", output.toString())  \n        }\n    }\n//}catch(Exception e){\n//    log.debug \"Exception: \" + e\n//    throw new InvalidInputException(\"Exception\", e.toString())  \n//}\n","scriptPath":null,"parameters":{}}</arg>
              <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import com.atlassian.jira.issue.IssueManager
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
 
Issue issue = issue
//IssueManager issueManager = ComponentAccessor.getIssueManager();
//Issue issue = issueManager.getIssueByKeyIgnoreCase("OPUT-396")

def errors = false
def warnings = false

def lumpSumPrice =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumPrice'].toString())[0]

/*Campi con dati obbligatori per ticket non a corpo*/
def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.replacedMaterials'].toString())[0]
def unaTantumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.unatantumRates'].toString())[0]
def labourRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.labourRates'].toString())[0]
def travelRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.travelRates'].toString())[0]

/*Campi con dati obbligatori per ticket a corpo*/
def lumpSumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumRates'].toString())[0]

/*Conferma utente su warnings*/
def transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]

/*Insight Schema IDs*/
def DBObjects = properties['ischema.dbo'].toString() + "-"
def OPAA = properties['ischema.aa'].toString() + "-"

def errorMandatoryFields = new ArrayList()
def errorJobStartedCompletedFields = new ArrayList()
def warningEmptyFields = new ArrayList()
def warningEmptyQuoteMatCustomer = new ArrayList()
def warningEmptyQuoteRateCustomer = new ArrayList()

//try{
    if(issue.getCustomFieldValue(lumpSumPrice)!=null &amp;&amp; issue.getCustomFieldValue(lumpSumPrice).toString().equals("Yes")){
        /*Contabilizzazione a corpo*/
        log.debug "Contabilizzazione a corpo"
        //OPAA_LUMP_SUM_RATES
        if(issue.getCustomFieldValue(lumpSumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(lumpSumRates) != "" &amp;&amp; !issue.getCustomFieldValue(lumpSumRates).toString().equals("")){
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def lsRatesList = issue.getCustomFieldValue(lumpSumRates)
			log.debug lsRatesList
            for(ls in lsRatesList){
                //extract insight key ang get object
                def lsRate=ls.toString()
                log.debug "lsRate: " + lsRate
                def lsRateKey = lsRate.substring(lsRate.indexOf('(')+1,lsRate.indexOf(')'))
                log.debug "lsRateKey: " + lsRateKey
                def lsRateObject = objectFacade.loadObjectBean(lsRateKey)
                log.debug "lsRateObject: " + lsRateObject
                //get "APPLIED_TO" for that rate
                def lsAppliedTo = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                log.debug "lsAppliedTo: " + lsAppliedTo
                def lsAppliedToValue
                if (lsAppliedTo){
                    lsAppliedToValue = lsAppliedTo.substring(lsAppliedTo.indexOf('(')+1,lsAppliedTo.indexOf(')'))
                }
                log.debug "objectFacade.loadObjectAttributeBean(lsRateObject.getId(), RATE_REF): " + objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())
                def lsRateRef = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
                log.debug "lsRateRef: " + lsRateRef
                def lsRateRefKey
                def lsRateRefValue
                if(lsRateRef.size() &gt; 0){
                    lsRateRef = lsRateRef.toString()
                    lsRateRefKey = lsRateRef.substring(lsRateRef.indexOf('(')+1,lsRateRef.indexOf(')'))
                    def lsRateRefObject = objectFacade.loadObjectBean(OPAA + lsRateRefKey)
                    log.debug lsRateRefObject
                    lsRateRefValue = objectFacade.loadObjectAttributeBean(lsRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
                    lsRateRefValue = lsRateRefValue.substring(lsRateRefValue.indexOf('(')+1,lsRateRefValue.indexOf(')'))
                }

                if(lsAppliedToValue.toString().equals("BOTH") || lsAppliedToValue.toString().equals("CUSTOMER")){
                    //get "TOTAL_AMOUNT_CUSTOMER" for that component
                    def totCustomer = objectFacade.loadObjectAttributeBean(lsRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateCustomer.add(lsRateRefValue.toString())
                    }
                }
             }    
        }

    }else{
        /*Contabilizzazione non a corpo*/
        log.debug "Contabilizzazione NON a corpo"

        //OPAA_REPLACED_MATERIALS
        if(issue.getCustomFieldValue(repMaterials)!=null &amp;&amp; (String)issue.getCustomFieldValue(repMaterials) != "" &amp;&amp; !issue.getCustomFieldValue(repMaterials).toString().equals("")){
            //log.debug "Materiali: " + issue.getCustomFieldValue(repMaterials)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def repMatList = issue.getCustomFieldValue(repMaterials)

            for(mat in repMatList){
                //extract insight key ang get object
                def component=mat.toString()
                def componentKey = component.substring(component.indexOf('('+OPAA)+1,component.length()-1)
                def componentObject = objectFacade.loadObjectBean(componentKey)
                //get "APPLIED_TO" for that component
                def appliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans() as ArrayList
                def appliedToValue
                if(appliedTo.size() &gt; 0){
                    appliedTo = appliedTo.toString()
                    appliedToValue = appliedTo.substring(appliedTo.indexOf('(')+1,appliedTo.indexOf(')'))
                    //log.debug "appliedToValue: " + appliedToValue
                }
                
                def matNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).getObjectAttributeValueBeans() as ArrayList
                def matNumberKey
                def matNumberValue
                if(matNumber.size() &gt; 0){
                    matNumber = matNumber.toString()
                    matNumberKey = matNumber.substring(matNumber.indexOf('(')+1,matNumber.indexOf(')'))
                    def matNumberObject = objectFacade.loadObjectBean(DBObjects + matNumberKey)
                    matNumberValue = objectFacade.loadObjectAttributeBean(matNumberObject.getId(), properties['iobj.material.name'].toString()).getObjectAttributeValueBeans().toString()
                    matNumberValue = matNumberValue.substring(matNumberValue.indexOf('(')+1,matNumberValue.indexOf(')'))
                }
                
                def serialNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()) ? objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()).getObjectAttributeValueBeans() as ArrayList : null
                def serialNumberValue
                if(serialNumber &amp;&amp; serialNumber.size() &gt; 0){
                    serialNumber = serialNumber.toString()
                    serialNumberValue = serialNumber.substring(serialNumber.indexOf('(')+1,serialNumber.indexOf(')'))
                }               

                if(appliedToValue.toString().equals("BOTH") || appliedToValue.toString().equals("CUSTOMER")){
                    //get "TOTAL_AMOUNT_CUSTOMER" for that component
                    def totCustomer = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()) ? objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()).getObjectAttributeValueBeans() : null
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteMatCustomer.add(matNumberValue.toString() + ((serialNumber &amp;&amp; serialNumber.size() &gt; 0) ? " (" + serialNumberValue.toString() + ")" : " ()"))   
                    }
                }
             }    
        }  

        //OPAA_UNATANTUM_RATES
        if(issue.getCustomFieldValue(unaTantumRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(unaTantumRates) != "" &amp;&amp; !issue.getCustomFieldValue(unaTantumRates).toString().equals("")){
            log.debug "Una tantum rates: " + issue.getCustomFieldValue(unaTantumRates)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def umRatesList = issue.getCustomFieldValue(unaTantumRates)

            for(um in umRatesList){
                //extract insight key ang get object
                def umRate=um.toString()
                def umRateKey = umRate.substring(umRate.indexOf('(')+1,umRate.indexOf(')'))
                def umRateObject = objectFacade.loadObjectBean(umRateKey)
                //get "APPLIED_TO" for that rate
                def umAppliedTo = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                def umAppliedToValue = umAppliedTo.substring(umAppliedTo.indexOf('(')+1,umAppliedTo.indexOf(')'))

                def umRateRef = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()

                def umRateRefKey
                def umRateRefValue
                if(umRateRef.size() &gt; 0){
                    umRateRef = umRateRef.toString()
                    umRateRefKey = umRateRef.substring(umRateRef.indexOf('(')+1,umRateRef.indexOf(')'))
                    def umRateRefObject = objectFacade.loadObjectBean(OPAA + umRateRefKey)
                    umRateRefValue = objectFacade.loadObjectAttributeBean(umRateRefObject.getId(), properties['iobj.rate.Name'].toString()) ? objectFacade.loadObjectAttributeBean(umRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString() : null
                    umRateRefValue = umRateRefValue ? umRateRefValue.substring(umRateRefValue.indexOf('(')+1,umRateRefValue.indexOf(')')) : null
                }
                
                if(umAppliedToValue.toString().equals("BOTH") || umAppliedToValue.toString().equals("CUSTOMER")){
                    //get "TOTAL_AMOUNT_CUSTOMER" for that component
                    def totCustomer = objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()) ? objectFacade.loadObjectAttributeBean(umRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans() : null
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateCustomer.add(umRateRefValue.toString())
                    }
                }
             }    
        }

        //OPAA_LABOUR_RATES
        if(issue.getCustomFieldValue(labourRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(labourRates) != "" &amp;&amp; !issue.getCustomFieldValue(labourRates).toString().equals("")){
            log.debug "Labour rates: " + issue.getCustomFieldValue(labourRates)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def labourRatesList = issue.getCustomFieldValue(labourRates)

            for(lb in labourRatesList){
                //extract insight key ang get object
                def lbRate=lb.toString()
                def lbRateKey = lbRate.substring(lbRate.indexOf('(')+1,lbRate.indexOf(')'))
                def lbRateObject = objectFacade.loadObjectBean(lbRateKey)
                //get "APPLIED_TO" for that rate
                def lbAppliedTo = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
                def lbAppliedToValue = lbAppliedTo.substring(lbAppliedTo.indexOf('(')+1,lbAppliedTo.indexOf(')'))

                def lbRateRef = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
                
                def lbRateRefKey
                def lbRateRefValue
                if(lbRateRef.size() &gt; 0){
                    lbRateRef = lbRateRef.toString()
                    lbRateRefKey = lbRateRef.substring(lbRateRef.indexOf('(')+1,lbRateRef.indexOf(')'))
                    def lbRateRefObject = objectFacade.loadObjectBean(OPAA + lbRateRefKey)
                    lbRateRefValue = objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.Name'].toString()) ? objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString() : null
                    lbRateRefValue = lbRateRefValue ? lbRateRefValue.substring(lbRateRefValue.indexOf('(')+1,lbRateRefValue.indexOf(')')) : null
                }

                if(lbAppliedToValue.toString().equals("BOTH") || lbAppliedToValue.toString().equals("CUSTOMER")){
                    //get "TOTAL_AMOUNT_CUSTOMER" for that component
                    def totCustomer = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()) ? objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans() : null
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateCustomer.add(lbRateRefValue.toString())
                    }
                }
             }    
        }

        //OPAA_TRAVEL_RATES
        if(issue.getCustomFieldValue(travelRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(travelRates) != "" &amp;&amp; !issue.getCustomFieldValue(travelRates).toString().equals("")){
            log.debug "Travel rates: " + issue.getCustomFieldValue(travelRates)
            /*Ciclare tutti gli oggetti associati al campo*/
            //insight classes &amp; components
            Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
            Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
            def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
            def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

            def travelRatesList = issue.getCustomFieldValue(travelRates)

            for(tr in travelRatesList){
                //extract insight key ang get object
                def trRate=tr.toString()
                def trRateKey = trRate.substring(trRate.indexOf('(')+1,trRate.indexOf(')'))
                def trRateObject = objectFacade.loadObjectBean(trRateKey)
                //get "APPLIED_TO" for that rate
                def trAppliedTo = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()) ? objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString() : null
                def trAppliedToValue = trAppliedTo ? trAppliedTo.substring(trAppliedTo.indexOf('(')+1,trAppliedTo.indexOf(')')) : null

                def trRateRef = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()) ? objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString() : null
                
                def trRateRefKey
                def trRateRefValue
                if(trRateRef.size() &gt; 0){
                    trRateRef = trRateRef.toString()
                    trRateRefKey = trRateRef.substring(trRateRef.indexOf('(')+1,trRateRef.indexOf(')'))
                    def trRateRefObject = objectFacade.loadObjectBean(OPAA + trRateRefKey)
                    trRateRefValue = objectFacade.loadObjectAttributeBean(trRateRefObject.getId(), properties['iobj.rate.Name'].toString()) ? objectFacade.loadObjectAttributeBean(trRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString() : null
                    trRateRefValue = trRateRefValue ? trRateRefValue.substring(trRateRefValue.indexOf('(')+1,trRateRefValue.indexOf(')')) : null
                }

                if(trAppliedToValue.toString().equals("BOTH") || trAppliedToValue.toString().equals("CUSTOMER")){
                    //get "TOTAL_AMOUNT_CUSTOMER" for that component
                    def totCustomer = objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()) ? objectFacade.loadObjectAttributeBean(trRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans() : null
                    if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                        warnings=true
                        warningEmptyQuoteRateCustomer.add(trRateRefValue.toString())
                    }
                }
             }    
        }

    }


    def output = new ArrayList()

    if (!errors &amp;&amp; !warnings){
        return true
    }else{
        if(!errors &amp;&amp; warnings){
            //Se ci sono solo warnings verifico se l'utente ha già dichiarato di voler proseguire comunque
            // - transition field "OPAA_CHECK_AND_CONFIRM"="Yes"
            // - in caso contrario invio i warning a FE

            //log.debug "transitionCheck: " + issue.getCustomFieldValue(transitionCheck)
            //log.debug "result: " + issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")
            if(issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")){
                //log.debug "return true - transitionCheck = Yes"
                return true
            }else{
                def wList = new ArrayList()

                if(warningEmptyQuoteRateCustomer.size() &gt; 0){
                    def wListConfirmEmptyRate = new ArrayList()
                    wListConfirmEmptyRate.add("W")
                    wListConfirmEmptyRate.add("CUSTOMER_CONFIRM_EMPTY_RATES")
                    wListConfirmEmptyRate.add(null)
                    wListConfirmEmptyRate.add(warningEmptyQuoteRateCustomer)

                    wList.add(wListConfirmEmptyRate)
                }

                if(warningEmptyQuoteMatCustomer.size() &gt; 0){
                    def wListConfirmEmptyMatQuote = new ArrayList()
                    wListConfirmEmptyMatQuote.add("W")
                    wListConfirmEmptyMatQuote.add("CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE")
                    wListConfirmEmptyMatQuote.add(null)
                    wListConfirmEmptyMatQuote.add(warningEmptyQuoteMatCustomer)

                    wList.add(wListConfirmEmptyMatQuote)
                }

                output.add(wList)
                throw new InvalidInputException('{"W":"' + output.toString() + '"}')
                //throw new InvalidInputException("W", output.toString())   
            }

        }
        if(errors &amp;&amp; !warnings){
            def eList = new ArrayList()

            output.add(eList)
            throw new InvalidInputException('{"E":"' + output.toString() + '"}')
            //throw new InvalidInputException("E", output.toString())   
        }
        if(errors &amp;&amp; warnings){
            def eList = new ArrayList()
            def wList = new ArrayList()

            if(warningEmptyQuoteRateCustomer.size() &gt; 0){
                    def wListConfirmEmptyRate = new ArrayList()
                    wListConfirmEmptyRate.add("W")
                    wListConfirmEmptyRate.add("CUSTOMER_CONFIRM_EMPTY_RATES")
                	wListConfirmEmptyRate.add(null)
                    wListConfirmEmptyRate.add(warningEmptyQuoteRateCustomer)

                    wList.add(wListConfirmEmptyRate)
                }

                if(warningEmptyQuoteMatCustomer.size() &gt; 0){
                    def wListConfirmEmptyMatQuote = new ArrayList()
                    wListConfirmEmptyMatQuote.add("W")
                    wListConfirmEmptyMatQuote.add("CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE")
                    wListConfirmEmptyMatQuote.add(null)
                    wListConfirmEmptyMatQuote.add(warningEmptyQuoteMatCustomer)

                    wList.add(wListConfirmEmptyMatQuote)
                }

            output.add(eList)
            output.add(wList)
            throw new InvalidInputException('{"WE":"' + output.toString() + '"}')
            //throw new InvalidInputException("WE", output.toString())  
        }
    }
//}catch(Exception e){
//    log.debug "Exception: " + e
//    throw new InvalidInputException("Exception", e.toString())  
//}
</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">ня4хюћуѕ8нн}yЮЬчЭµmОЭй­јiз{mэЯ</arg>
              <arg name="FIELD_NOTES">OP Email Notification: FINANCIAL_STATEMENT_TO_CUSTOMER</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.link.IssueLink\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nCategory log = Category.getInstance(\"com.onresolve.jira.groovy.PostFunction\")\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\n\ndef DBO=properties['ischema.dbo.id'].toString().toInteger()\n/* REST API per Invio Notifica Email ONSITE_REPORT */\nrequestMethod = \"POST\";\n\ndef relatesInIssueLink=false\ndef relatesOutIssueLink=false\ndef linkedTickets=new ArrayList()\nList&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\nfor (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n\n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString()) &amp;&amp; issueLink.getSourceObject().status.name == \"Completed to be Closed\"){\n        relatesInIssueLink=true\n        linkedTickets.add(issueLink.getSourceObject().toString())\n        log.debug \"Issue con relatesInIssueLink\"\n    }\n}\nList&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\nfor (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n\n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString()) &amp;&amp; issueLink.getDestinationObject().status.name == \"Completed to be Closed\"){\n        relatesOutIssueLink=true\n        linkedTickets.add(issueLink.getDestinationObject().toString())\n        log.debug \"Issue con relatesOutIssueLink\"\n    }\n}\n\ndef body_req\nif(relatesInIssueLink || relatesOutIssueLink){\n    body_req = [\n        \"templateName\": properties['tt.financialStatementToC'].toString(),\n        \"pec\": false,\n        \"issueKey\": issue.key,\n        \"linkedTickets\": linkedTickets\n    ]\n}else{\n    body_req = [\n        \"templateName\": properties['tt.financialStatementToC'].toString(),\n        \"pec\": false,\n        \"issueKey\": issue.key\n    ]\n}\n\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/transaction/mail/send\"\nURL url\nurl = new URL(baseURL)\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.outputStream\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\nlog.debug connection.outputStream\nconnection.connect();\n\ndef output = new ArrayList()\ndef eList = new ArrayList()\ndef eListErrors = new ArrayList()\ndef errorMsgs = new ArrayList()\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n    log.debug \"Response: \" + connection\n    \n    /*ROLLBACK*/\n    /*Rimozione allegato consuntivo appena creato*/\n    /* Get Insight IQL Facade from plugin accessor */\n    Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \n    def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\n\n    /* Get Insight Object Facade from plugin accessor */\n    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");\n    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n    /* Get Insight Object Type Facade from plugin accessor */\n    Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\");\n    def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\n\n    /* Get Insight Object Attribute Facade from plugin accessor */\n    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n\n    Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\");\n    def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\n\n    /* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include \" around value */\n    def objects = iqlFacade.findObjectsByIQLAndSchema(DBO, \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".\\\"\" + properties['iobj.attachmentCategory.name'].toString() + \"\\\" = \\\"\" + properties['iobj.attachmentCategory.objs.consuntivo'].toString() + \"\\\" AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"); // See the complete list of possible IQL on the Insight Query Language documentation page\n    /* If this is a mandatory field you should be able to do this: */\n    log.info(\"Insight object: \" + objects[0]);\n    \n    if(objects[0]){\n        /* UPDATE OJBECT DELETED VALUE */\n        def obTriage = objectFacade.loadObjectAttributeBean(objects[0].getId(), properties['iobj.attachmentCategory.deleted'].toString()).createMutable()  \n        def value = obTriage.getObjectAttributeValueBeans()\n\n        def valueBean = obTriage.createObjectAttributeValueBean()\n        valueBean.setValue(objectTypeAttributeFacade.loadObjectTypeAttributeBean(obTriage.getObjectTypeAttributeId()), true)\n        /*Clean actual value*/\n        value.clear()\n        value.add(valueBean);\n        obTriage.setObjectAttributeValueBeans(value)\n\n        //Update OJBECT attribute value\n        try {\n            obTriage = objectFacade.storeObjectAttributeBean(obTriage);\n        } catch (Exception vie) {\n            log.warn(\"Could not update object attribute due to validation exception:\" + vie.getMessage());\n        }\n    }\n    \n    def outputMsg = ((HttpURLConnection)connection).errorStream.text\n    log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n    def jsonSlurper = new JsonSlurper()\n    def json_object = jsonSlurper.parseText(outputMsg)\n    assert json_object instanceof Map  \n    log.debug \"message: \" +  json_object.message\n\n    eListErrors.add(\"E\")\n    eListErrors.add(\"SENDMAIL\")\n    errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n    eListErrors.add(json_object.message)\n    eList.add(eListErrors)\n    \n    output.add(eList)\n    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    //throw new InvalidInputException(\"E\", output.toString())\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import org.apache.log4j.Category
import com.atlassian.jira.issue.link.IssueLink
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def requestMethod
def baseURL

def DBO=properties['ischema.dbo.id'].toString().toInteger()
/* REST API per Invio Notifica Email ONSITE_REPORT */
requestMethod = "POST";

def relatesInIssueLink=false
def relatesOutIssueLink=false
def linkedTickets=new ArrayList()
List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesInIssueLink=true
        linkedTickets.add(issueLink.getSourceObject().toString())
        log.debug "Issue con relatesInIssueLink"
    }
}
List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();

    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
        relatesOutIssueLink=true
        linkedTickets.add(issueLink.getDestinationObject().toString())
        log.debug "Issue con relatesOutIssueLink"
    }
}

def body_req
if(relatesInIssueLink || relatesOutIssueLink){
    body_req = [
        "templateName": properties['tt.financialStatementToC'].toString(),
        "pec": false,
        "issueKey": issue.key,
        "linkedTickets": linkedTickets
    ]
}else{
    body_req = [
        "templateName": properties['tt.financialStatementToC'].toString(),
        "pec": false,
        "issueKey": issue.key
    ]
}

baseURL = "http://" + properties['api.env'].toString() + "/op/rest/jira/AA/transaction/mail/send"
URL url
url = new URL(baseURL)
HttpURLConnection connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.outputStream
connection.outputStream.withWriter("UTF-8") { new StreamingJsonBuilder(it, body_req) }
log.debug connection.outputStream
connection.connect();

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()
    log.debug "Response: " + connection
    
    /*ROLLBACK*/
    /*Rimozione allegato consuntivo appena creato*/
    /* Get Insight IQL Facade from plugin accessor */
    Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade"); 
    def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);

    /* Get Insight Object Facade from plugin accessor */
    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");
    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

    /* Get Insight Object Type Facade from plugin accessor */
    Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade");
    def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);

    /* Get Insight Object Attribute Facade from plugin accessor */
    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);

    Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory");
    def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);

    /* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include " around value */
    def objects = iqlFacade.findObjectsByIQLAndSchema(DBO, "\"" + properties['iobj.attachmentCategory.categoryRef'].toString() + "\".\"" + properties['iobj.attachmentCategory.name'].toString() + "\" = \"" + properties['iobj.attachmentCategory.objs.consuntivo'].toString() + "\" AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND object HAVING connectedTickets(key = " + issue.key.toString() + ")"); // See the complete list of possible IQL on the Insight Query Language documentation page
    /* If this is a mandatory field you should be able to do this: */
    log.info("Insight object: " + objects[0]);
    
    if(objects[0]){
        /* UPDATE OJBECT DELETED VALUE */
        def obTriage = objectFacade.loadObjectAttributeBean(objects[0].getId(), properties['iobj.attachmentCategory.deleted'].toString()).createMutable()  
        def value = obTriage.getObjectAttributeValueBeans()

        def valueBean = obTriage.createObjectAttributeValueBean()
        valueBean.setValue(objectTypeAttributeFacade.loadObjectTypeAttributeBean(obTriage.getObjectTypeAttributeId()), true)
        /*Clean actual value*/
        value.clear()
        value.add(valueBean);
        obTriage.setObjectAttributeValueBeans(value)

        //Update OJBECT attribute value
        try {
            obTriage = objectFacade.storeObjectAttributeBean(obTriage);
        } catch (Exception vie) {
            log.warn("Could not update object attribute due to validation exception:" + vie.getMessage());
        }
    }
    
    def outputMsg = ((HttpURLConnection)connection).errorStream.text
    log.debug "((HttpURLConnection)connection).errorStream.text: " + outputMsg

    def jsonSlurper = new JsonSlurper()
    def json_object = jsonSlurper.parseText(outputMsg)
    assert json_object instanceof Map  
    log.debug "message: " +  json_object.message

    eListErrors.add("E")
    eListErrors.add("SENDMAIL")
    errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
    eListErrors.add(json_object.message)
    eList.add(eListErrors)
    
    output.add(eList)
    throw new InvalidInputException('{"E":"' + output.toString() + '"}')
    //throw new InvalidInputException("E", output.toString())
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="6">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="field.name">customfield_22644</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="671" name="Genera Offerta per Materiali da Preventivare" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20119</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_NOTES">OP: Generazione ticket di preventivazione - solo se ci sono OP_REQUIRED_MATERIALS e se OPAA_QUOTE_TICKET = null</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
cfValues[properties['cf.requiredMaterials']] != null &amp;&amp; cfValues[properties['cf.offerLinkedIssue']] == null|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="6">
              <post-functions>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="targetIssueTypeDefinedByCfSelection" />
                  <arg name="issueTypeId">13001</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">H</arg>
                  <arg name="maxAllowed-integerValue" />
                  <arg name="transitionAttachmentsOperation">rr</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="╡крz╙ыв7Ь╡'еy╦^t+м╢ЙЕЙщ]" />
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10500:INWARD</arg>
                  <arg name="field.enablingCustomFieldId">customfield_22609</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="²æÅºw-ì">[{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22609","destinationFieldId":"customfield_22658"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22600","destinationFieldId":"customfield_22600"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22822","destinationFieldId":"customfield_22822"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22601","destinationFieldId":"customfield_22601"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22602","destinationFieldId":"customfield_22602"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22813","destinationFieldId":"customfield_22813"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23235","destinationFieldId":"customfield_23235"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22651","destinationFieldId":"customfield_22651"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22700","destinationFieldId":"customfield_22700"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22607","destinationFieldId":"customfield_22607"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"priority","destinationFieldId":"priority"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22814","destinationFieldId":"customfield_22814"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23203","destinationFieldId":"customfield_23203"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23237","destinationFieldId":"customfield_23237"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_21909","destinationFieldId":"customfield_21909"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22629","destinationFieldId":"customfield_22629"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"Yes","destinationFieldId":"customfield_22681"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23401","destinationFieldId":"customfield_21908"}}]</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">á÷{wnöq÷Ú×5o¾4oÝ|ñÇZy¦ç_9s}·</arg>
                  <arg name="FIELD_NOTES">OP: Set OP_OFFER_TKT=Yes on just created linkedIssue</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport com.atlassian.jira.issue.IssueManager\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport groovy.json.JsonSlurper\nimport groovy.json.StreamingJsonBuilder\nimport com.atlassian.jira.config.util.JiraHome\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport java.text.SimpleDateFormat\nimport java.text.ParseException\nimport com.atlassian.jira.config.properties.APKeys\nimport com.atlassian.jira.issue.link.LinkCollectionImpl;\nimport com.atlassian.jira.issue.link.IssueLink;\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nlog.debug \"Percorso properties: \" + ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\n\n/*Script Variables*/\n//Per Post Function\nissue = issue\n//Per test da console\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\n//issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-257\")\nlog.debug \"Issue: \" + issue\ndef found=false\ndef linkedIssue\ndef issueService = ComponentAccessor.getIssueService()\n\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]\ndef offerFromRepair =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_GENERATED_FROM_REPAIR\")[0]\n\ndef groupManager = ComponentAccessor.getGroupManager()\ndef userManager = ComponentAccessor.getUserManager()\ndef currentUserTransition =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENT_USER_GENERATE_REPAIR_QUOTE\")[0]\nString supplierAdm = \"OPROLE_AA_SUPPLIER_ADM\"\nString supplierTech = \"OPROLE_AA_SUPPLIER_TECH\"\n\nList&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId());\nlog.debug \"allInIssueLink: \" + allInIssueLink\nfor (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n    def linkedIssueTemp = issueLink.getSourceObject()\n    String type = linkedIssueTemp.getIssueType().getName();\n\n    log.debug(issueLink.issueLinkType.getName()) \n    \n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsTrigger'].toString())){\n        linkedIssue=linkedIssueTemp\n        log.debug \"linked issue: \" + linkedIssue\n        //log.debug \"linked issue status: \" + linkedIssue.getStatusObject().name\n        if(linkedIssue.getStatusObject().name == properties['wf.open'].toString()){\n            found=true\n        }\n    }\n}\n//log.debug \"found: \" + found\n\nif(found){\n\tdef destStatusObject = linkedIssue.getStatusObject()\n    //log.debug \"destStatusObject: \" + destStatusObject\n    //log.debug \"linkedIssue: \" + linkedIssue\n    def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n\t// Is the status of the linked issue \"Installing\" ?\n    \n    def customFieldManager = ComponentAccessor.customFieldManager\n    def offerIssueField = customFieldManager.getCustomFieldObjectsByName(properties['cf.offerLinkedIssue'].toString()).first()\n    def maintenanceIssueField = customFieldManager.getCustomFieldObjectsByName(properties['cf.maintenanceLinkedIssue'] ? properties['cf.maintenanceLinkedIssue'].toString() : \"OP_MAINTENANCE_LINKED_ISSUE\").first()\n    def offerIssueBoolField = customFieldManager.getCustomFieldObjectsByName(properties['cf.offerTkt'].toString()).first()\n    \n    //Set OPAA_OFFER_TKT=Yes on just created linkedIssue\n    def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n    def mi = (MutableIssue) linkedIssue\n\n    def fieldConfig = offerIssueBoolField.getRelevantConfig(linkedIssue)\n    //log.warn \"fieldConfig: \" + fieldConfig\n    def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n    log.debug \"transition field value: \" + issue.getCustomFieldValue(currentUserTransition)\n    //log.debug \"currentUserTransition: \" + currentUserTransition\n    def userTransition = userManager.getUserByName(issue.getCustomFieldValue(currentUserTransition).toString())\n\tlog.debug \"userTransition: \" + userTransition\n    if (userTransition != null &amp;&amp; (groupManager.getUsersInGroup(supplierAdm).contains(userTransition) || groupManager.getUsersInGroup(supplierTech).contains(userTransition))) {\n        // Transition executed by external user --&gt; to be added also internal techs role groups\n        // Email has not to be sent\n        // SN will be created as soon as the quotation has been confirmed - to be checked when to create SN if no quotation from supplier is needed - when the quotation has been sent to the customer?\n        log.debug \"in utente supplier\"\n        transitionCheck.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(transitionCheck), cfNewValue), new DefaultIssueChangeHolder())\n        offerFromRepair.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(offerFromRepair), cfNewValue), new DefaultIssueChangeHolder())\n\t}\n    offerIssueBoolField.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(offerIssueBoolField), cfNewValue), new DefaultIssueChangeHolder())\n\tmaintenanceIssueField.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(maintenanceIssueField), issue.key.toString()), new DefaultIssueChangeHolder())\n    \n    ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n    issueIndexingService.reIndex(linkedIssue)    \n    \n    //log.debug \"offerIssueField: \" + offerIssueField\n    //log.debug \"linkedIssue: \" + linkedIssue\n    offerIssueField.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(offerIssueField), linkedIssue.key.toString()), new DefaultIssueChangeHolder())\n    //log.debug \"updated: \" + issue.getCustomFieldValue(offerIssueField)\n    \n    if (destStatusObject.name == properties['wf.open'].toString()) {\n        // Prepare our input for the transition\n        def issueInputParameters = issueService.newIssueInputParameters()\n        issueInputParameters.with {\n            setSkipScreenCheck(true)\n        }\n        // Validate transitioning the linked issue to \"Signs Needed\"\n        def validationResult = issueService.validateTransition(user, linkedIssue.id, (properties['wf.tr.askQuote'] ? properties['wf.tr.askQuote'].toInteger() : 11), issueInputParameters)\n        if (validationResult.isValid()) {\n            // Perform the transition\n            def issueResult = issueService.transition(user, validationResult)\n            if (! issueResult.isValid()) {\n                log.debug(\"Failed to transition task ${destIssue.key}, errors: ${issueResult.errorCollection}\")\n            }else{\n                log.debug(\"Transazione fatta\")\n            }\n        } else {\n            log.debug(\"Could not transition task ${destIssue.key}, errors: ${validationResult.errorCollection}\")\n        }\n    }\n    \n}","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.IssueManager
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import groovy.json.JsonSlurper
import groovy.json.StreamingJsonBuilder
import com.atlassian.jira.config.util.JiraHome
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import java.text.SimpleDateFormat
import java.text.ParseException
import com.atlassian.jira.config.properties.APKeys
import com.atlassian.jira.issue.link.LinkCollectionImpl;
import com.atlassian.jira.issue.link.IssueLink;
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)
IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)

/*Script Variables*/
//Per Post Function
issue = issue
//Per test da console
//IssueManager issueManager = ComponentAccessor.getIssueManager()
//issue = issueManager.getIssueByKeyIgnoreCase("OPUT-257")
log.debug "Issue: " + issue
def found=false
def linkedIssue
def issueService = ComponentAccessor.getIssueService()

List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId());
log.debug "allInIssueLink: " + allInIssueLink
for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();
    def linkedIssueTemp = issueLink.getSourceObject()
    String type = linkedIssueTemp.getIssueType().getName();

    log.debug(issueLink.issueLinkType.getName()) 
    
    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsTrigger'].toString())){
        found=true
        linkedIssue=linkedIssueTemp
    }
}
log.debug "found: " + found

if(found){
	def destStatusObject = linkedIssue.getStatusObject()
    log.debug "destStatusObject: " + destStatusObject
    log.debug "linkedIssue: " + linkedIssue
    def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
	// Is the status of the linked issue "Installing" ?
    
    def customFieldManager = ComponentAccessor.customFieldManager
    def offerIssueField = customFieldManager.getCustomFieldObjectsByName(properties['cf.offerLinkedIssue'].toString()).first()
    def maintenanceIssueField = customFieldManager.getCustomFieldObjectsByName(properties['cf.maintenanceLinkedIssue'] ? properties['cf.maintenanceLinkedIssue'].toString() : "OP_MAINTENANCE_LINKED_ISSUE").first()
    def offerIssueBoolField = customFieldManager.getCustomFieldObjectsByName(properties['cf.offerTkt'].toString()).first()
    
    //Set OPAA_OFFER_TKT=Yes on just created linkedIssue
    def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
    def mi = (MutableIssue) linkedIssue

    def fieldConfig = offerIssueBoolField.getRelevantConfig(linkedIssue)
    log.warn "fieldConfig: " + fieldConfig
    def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
    offerIssueBoolField.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(offerIssueBoolField), cfNewValue), new DefaultIssueChangeHolder())
	maintenanceIssueField.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(maintenanceIssueField), issue.key.toString()), new DefaultIssueChangeHolder())
    
    ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
    issueIndexingService.reIndex(linkedIssue)    
    
    log.debug "offerIssueField: " + offerIssueField
    log.debug "linkedIssue: " + linkedIssue
    offerIssueField.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(offerIssueField), linkedIssue.key.toString()), new DefaultIssueChangeHolder())
    log.debug "updated: " + issue.getCustomFieldValue(offerIssueField)
    
    if (destStatusObject.name == properties['wf.open'].toString()) {
        // Prepare our input for the transition
        def issueInputParameters = issueService.newIssueInputParameters()
        issueInputParameters.with {
            setSkipScreenCheck(true)
        }
        // Validate transitioning the linked issue to "Signs Needed"
        def validationResult = issueService.validateTransition(user, linkedIssue.id, (properties['wf.tr.askQuote'] ? properties['wf.tr.askQuote'].toInteger() : 11), issueInputParameters)
        if (validationResult.isValid()) {
            // Perform the transition
            def issueResult = issueService.transition(user, validationResult)
            if (! issueResult.isValid()) {
                log.debug("Failed to transition task ${destIssue.key}, errors: ${issueResult.errorCollection}")
            }else{
                log.debug("Transazione fatta")
            }
        } else {
            log.debug("Could not transition task ${destIssue.key}, errors: ${validationResult.errorCollection}")
        }
    }
    
}</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23401</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="791" name="Genera Rapporto di Intervento FAAC" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19910</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">da6b0975-6a4b-46f7-a46f-15e624ccc794</arg>
                <arg name="FIELD_NOTES">Available only if no ONSITE REPORT automatically generated exists on the ticket</arg>
                <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\nlog.debug \"OnSite Report per issue: \" + issue.key\n/* REST API per Generazione Allegato Rapporto di Intervento */\nrequestMethod = \"PUT\";\n/*Script Variables*/\n//Per test da console\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-14062\")\n\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\n\n/*Rimozione allegato rapporto di intervento appena creato*/\n/* Get Insight IQL Facade from plugin accessor */\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\n\n/* Get Insight Object Facade from plugin accessor */\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n/* Get Insight Object Type Facade from plugin accessor */\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\");\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\n\n/* Get Insight Object Attribute Facade from plugin accessor */\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\");\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\n\n/* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include \" around value */\ndef objects = iqlFacade.findObjectsByIQLAndSchema(DBO, \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".Name LIKE \\\"Rapporto di intervento\\\" AND AUTO_GENERATED=true AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"); // See the complete list of possible IQL on the Insight Query Language documentation page\n/* If this is a mandatory field you should be able to do this: */\nlog.debug \"IQL: \" + \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".Name LIKE \\\"Rapporto di intervento\\\" AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"\n\n/*!!Da rimuovere appena risolti i bug!!*/\nif((objects == null || objects.size==0) /*&amp;&amp; !issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance'])*/){\n    passesCondition = true\n}else{\n    passesCondition = false\n}\n","scriptPath":null,"parameters":{}}</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.CustomScriptCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">c83eed7c-052e-4c06-ac5e-c2925515cc02</arg>
                <arg name="FIELD_NOTES">Maintenance Ticket OR PM Ticket</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"issue.issueType.name == 'Maintenance Ticket' || issue.issueType.name == 'Planned Maintenance Ticket'","scriptPath":null,"parameters":{}}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">υχ΄}®uχWxo¦½Υ¶»γΞwσGίρέυχZρχ»</arg>
              <arg name="FIELD_NOTES">OP: REST API: OP generazione Rapporto di intervento</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\nlog.debug \"OnSite Report per issue: \" + issue.key\n/* REST API per Generazione Allegato Rapporto di Intervento */\nrequestMethod = \"PUT\";\n/*Script Variables*/\n//Per test da console\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-14062\")\n\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\n\n/*Rimozione allegato rapporto di intervento appena creato*/\n/* Get Insight IQL Facade from plugin accessor */\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\n\n/* Get Insight Object Facade from plugin accessor */\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n/* Get Insight Object Type Facade from plugin accessor */\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\");\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\n\n/* Get Insight Object Attribute Facade from plugin accessor */\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\");\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\n\n/* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include \" around value */\ndef objects = iqlFacade.findObjectsByIQLAndSchema(DBO, \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".Name LIKE \\\"Rapporto di intervento\\\" AND AUTO_GENERATED = true AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"); // See the complete list of possible IQL on the Insight Query Language documentation page\n/* If this is a mandatory field you should be able to do this: */\nlog.debug \"IQL: \" + \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".Name LIKE \\\"Rapporto di intervento\\\" AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"\n\n/*!!Da rimuovere appena risolti i bug!!*/\nif((objects == null || objects.size==0) /*&amp;&amp; !issue.getIssueType().name.toString().equals(properties['it.plannedMaintenance'])*/){\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/AA/ticket/\" + issue.key.toString() + \"/attachment/onsite\"\n    log.debug \"baseUrl: \" + baseURL\n\n    URL url\n    url = new URL(baseURL)\n    HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.connect();\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        eListErrors.add(\"E\")\n        eListErrors.add(\"GENERATE-ONSITEREPORT\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n\n}\n","scriptPath":null,"parameters":{}}</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import org.apache.log4j.Category
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def requestMethod
def baseURL
log.debug "OnSite Report per issue: " + issue.key
/* REST API per Generazione Allegato Rapporto di Intervento */
requestMethod = "PUT";

baseURL = "http://" + properties['api.env'].toString() + "/op/rest/automation/AA/ticket/" + issue.key.toString() + "/attachment/onsite"
log.debug "baseUrl: " + baseURL

URL url
url = new URL(baseURL)
HttpURLConnection connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.connect();
log.debug "ResponseCode:" + connection.getResponseCode()
log.debug "ResponseMessage:" + connection.getResponseMessage()

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()
    eListErrors.add("E")
    eListErrors.add("GENERATE-ONSITEREPORT")
    errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
    eListErrors.add(errorMsgs)
    eList.add(eListErrors)

    output.add(eList)
    throw new InvalidInputException('{"E":"' + output.toString() + '"}')
    //throw new InvalidInputException("E", output.toString())
}
</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">442a396a-d2f9-4282-99b9-1de0b8f0afd4</arg>
                  <arg name="FIELD_NOTES">OP: Check linkedTickets &amp; Fast-Transact them</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.link.IssueLink\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nCategory log = Category.getInstance(\"com.onresolve.jira.groovy.PostFunction\")\nlog.setLevel(org.apache.log4j.Level.WARN)\n\nlog.warn \"${issue.key} Transazione Complete - Post Function check linkedIssues\"\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\n\nIssue issue = issue\n//Per test da console\n//issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-276\")\n\nCREATE_ONSITEREPORT=properties['wf.tr.createOnsiteReport'] ? properties['wf.tr.createOnsiteReport'] : 791\n\ndef user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\ndef issueService = ComponentAccessor.getIssueService()\n\nlog.warn \"issue.getCustomFieldValue(automaticallyClosed): \" + issue.getCustomFieldValue(automaticallyClosed)\n\nif(issue.getCustomFieldValue(automaticallyClosed)==null || issue.getCustomFieldValue(automaticallyClosed).toString().equals(\"No\")){\n    /*OP-1038: se ho eseguito la Complete sul ticket \"padre\" verifico e sposto in automatico gli eventuali ticket collegati*/\n    \n    log.warn \"verifico e sposto in automatico gli eventuali ticket collegati\"\n    \n    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            /*Eseguire transazione di stato con OPAA_AUTOMATICALLY_CLOSED=Yes della sourceIssue*/\n            def linkedIssue = issueLink.getSourceObject()\n            def linkedIssueStatus = linkedIssue.getStatus()\n            log.warn \"Issue con relatesInIssueLink ${linkedIssue} con stato ${linkedIssueStatus}\"\n            def transitionId\n            if(linkedIssueStatus.name == (properties['wf.completedToBeClosed'] ? properties['wf.completedToBeClosed'].toString() : \"Completed To Be Closed\")){\n                transitionId=CREATE_ONSITEREPORT\n            }\n            if (transitionId==CREATE_ONSITEREPORT){\n                def issueInputParameters = issueService.newIssueInputParameters()\n                issueInputParameters.with {\n                    setSkipScreenCheck(false)\n                }\n                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)\n                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), \"Yes\") \n                \n                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n                def mi = (MutableIssue) linkedIssue\n\n                def fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)\n                log.warn \"fieldConfig: \" + fieldConfig\n                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())\n\n                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n                issueIndexingService.reIndex(linkedIssue)\n                log.warn \"Updated customfield - issue linkata\"\n                \n                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)\n                if (issueService.validateTransition(user, linkedIssue.id, transitionId.toInteger(), issueInputParameters).isValid()) {\n                    // Perform the transition\n                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId.toInteger(), issueInputParameters))\n                    if (! issueResult.isValid()) {\n                        log.warn(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n                    }else{\n                        log.warn(\"Transazione fatta 161 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}\")\n                    }\n                } else {\n                    log.warn(\"Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}\")\n                }\n            }\n        }\n    }\n    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\n    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            log.warn \"Issue con relatesOutIssueLink\"\n            /*Eseguire transazione di stato con OPAA_AUTOMATICALLY_CLOSED=Yes della destinationIssue*/\n            def linkedIssue = issueLink.getDestinationObject()\n            def linkedIssueStatus = linkedIssue.getStatus()\n            def transitionId\n            log.warn \"linkedIssue: \" + linkedIssue\n            log.warn \"linkedIssueStatus.name: \" + linkedIssueStatus.name\n            if(linkedIssueStatus.name == (properties['wf.completedToBeClosed'] ? properties['wf.completedToBeClosed'].toString() : \"Completed To Be Closed\")){\n                transitionId=CREATE_ONSITEREPORT\n            }\n            if (transitionId==CREATE_ONSITEREPORT){\n                def issueInputParameters = issueService.newIssueInputParameters()\n                issueInputParameters.with {\n                    setSkipScreenCheck(false)\n                }\n                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)\n                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), \"Yes\") \n                //log.warn \"validateResult\"\n                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n                def mi = (MutableIssue) linkedIssue\n\n                def fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)\n                log.warn \"fieldConfig: \" + fieldConfig\n                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())\n\n                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n                issueIndexingService.reIndex(linkedIssue)\n                log.warn \"Updated customfield - issue linkata\"\n                \n                if (issueService.validateTransition(user, linkedIssue.id, transitionId.toInteger(), issueInputParameters).isValid()) {\n                    // Perform the transition\n                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId.toInteger(), issueInputParameters))\n                    if (! issueResult.isValid()) {\n                        log.warn(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n                    }else{\n                        log.warn(\"Transazione fatta 285 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}\")\n                    }\n                } else {\n                    log.warn(\"Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}\")\n                }\n            }\n        }\n    }\n\n}","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService
import org.apache.log4j.Category
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.link.IssueLink
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.WARN)

log.warn "${issue.key} Transazione Complete - Post Function check linkedIssues"

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]
IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)

Issue issue = issue
//Per test da console
//issue = issueManager.getIssueByKeyIgnoreCase("OPUT-276")

START_PROGRESS=properties['wf.tr.startProgress']
COMPLETE=properties['wf.tr.complete']

def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
def issueService = ComponentAccessor.getIssueService()

log.warn "issue.getCustomFieldValue(automaticallyClosed): " + issue.getCustomFieldValue(automaticallyClosed)

if(issue.getCustomFieldValue(automaticallyClosed)==null || issue.getCustomFieldValue(automaticallyClosed).toString().equals("No")){
    /*OP-1038: se ho eseguito la Complete sul ticket "padre" verifico e sposto in automatico gli eventuali ticket collegati*/
    
    log.warn "verifico e sposto in automatico gli eventuali ticket collegati"
    
    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            /*Eseguire transazione di stato con OPAA_AUTOMATICALLY_CLOSED=Yes della sourceIssue*/
            def linkedIssue = issueLink.getSourceObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            log.warn "Issue con relatesInIssueLink ${linkedIssue} con stato ${linkedIssueStatus}"
            def transitionId
            if(linkedIssueStatus.name == properties['wf.confirmedAndPlanned'].toString()){
                transitionId=START_PROGRESS
            }
            if(linkedIssueStatus.name == properties['wf.inProgress'].toString()){
                transitionId=COMPLETE
            }
            if(transitionId==START_PROGRESS){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(false)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                //log.warn "issueInputParameters: " + issueInputParameters
                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"
                
                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 96 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                        transitionId=COMPLETE
                        // Prepare our input for the transition
                        issueInputParameters = issueService.newIssueInputParameters()
                        issueInputParameters.with {
                            setSkipScreenCheck(false)
                        }
                        //fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                        //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                        //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                        //validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                        currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                        mi = (MutableIssue) linkedIssue

                        //fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)
                        //log.warn "fieldConfig: " + fieldConfig
                        //cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                        //automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())

                        //ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                        //issueIndexingService.reIndex(linkedIssue)
                        //log.warn "Updated customfield - issue linkata"
                        if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                            // Perform the transition
                            issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                            if (! issueResult.isValid()) {
                                log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                            }else{
                                log.warn("Transazione fatta 124 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                            }
                        } else {
                            log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                        }
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }else if (transitionId==COMPLETE){
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(false)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                
                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"
                
                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 161 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }
        }
    }
    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())
    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {
        IssueLink issueLink = (IssueLink) outIterator.next();

        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){
            log.warn "Issue con relatesOutIssueLink"
            /*Eseguire transazione di stato con OPAA_AUTOMATICALLY_CLOSED=Yes della destinationIssue*/
            def linkedIssue = issueLink.getDestinationObject()
            def linkedIssueStatus = linkedIssue.getStatus()
            def transitionId
            log.warn "linkedIssue: " + linkedIssue
            log.warn "linkedIssueStatus.name: " + linkedIssueStatus.name
            if(linkedIssueStatus.name == "Confirmed and Planned"){
                transitionId=START_PROGRESS
            }
            if(linkedIssueStatus.name == properties['wf.inProgress'].toString()){
                transitionId=COMPLETE
            }
            log.warn "transitionId: " + transitionId
            if(transitionId==START_PROGRESS){
                // Prepare our input for the transition
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(false)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                
                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"
                
                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                log.warn "issueInputParameters: " + issueInputParameters
                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 218 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                        transitionId=COMPLETE
                        // Prepare our input for the transition
                        issueInputParameters = issueService.newIssueInputParameters()
                        issueInputParameters.with {
                            setSkipScreenCheck(false)
                        }
                        //fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                        //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                        //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                        
                        currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                        mi = (MutableIssue) linkedIssue

                        fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)
                        log.warn "fieldConfig: " + fieldConfig
                        cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                        automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())

                        ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                        issueIndexingService.reIndex(linkedIssue)
                        log.warn "Updated customfield - issue linkata"
                        
                        //validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)
                        if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                            // Perform the transition
                            issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                            if (! issueResult.isValid()) {
                                log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                            }else{
                                log.warn("Transazione fatta 248 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                            }
                        } else {
                            log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                        }
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }else{
                log.warn "issue da completare"
                def issueInputParameters = issueService.newIssueInputParameters()
                issueInputParameters.with {
                    setSkipScreenCheck(false)
                }
                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)
                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), "Yes") 
                //log.warn "validateResult"
                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
                def mi = (MutableIssue) linkedIssue

                def fieldConfig = automaticallyClosed.getRelevantConfig(linkedIssue)
                log.warn "fieldConfig: " + fieldConfig
                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
                automaticallyClosed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyClosed), cfNewValue), new DefaultIssueChangeHolder())

                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
                issueIndexingService.reIndex(linkedIssue)
                log.warn "Updated customfield - issue linkata"
                
                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {
                    // Perform the transition
                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))
                    if (! issueResult.isValid()) {
                        log.warn("Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}")
                    }else{
                        log.warn("Transazione fatta 285 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}")
                    }
                } else {
                    log.warn("Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}")
                }
            }
        }
    }

}</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22693</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="801" name="Genera Offerta per Sostituzione Impianto" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20119</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">342d56e7-53b3-4e78-aaa8-c68422a9773f</arg>
                <arg name="FIELD_NOTES">NOT PM Ticket</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"issue.issueType.name != 'Planned Maintenance Ticket'","scriptPath":null}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="6">
              <post-functions>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="targetIssueTypeDefinedByCfSelection" />
                  <arg name="issueTypeId">12301</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">H</arg>
                  <arg name="maxAllowed-integerValue" />
                  <arg name="transitionAttachmentsOperation">rr</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="╡крz╙ыв7Ь╡'еy╦^t+м╢ЙЕЙщ]" />
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10500:INWARD</arg>
                  <arg name="field.enablingCustomFieldId" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="²æÅºw-ì">[{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22609","destinationFieldId":"customfield_22609"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22600","destinationFieldId":"customfield_22600"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22822","destinationFieldId":"customfield_22822"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22601","destinationFieldId":"customfield_22601"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22602","destinationFieldId":"customfield_22602"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22813","destinationFieldId":"customfield_22813"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23235","destinationFieldId":"customfield_23235"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22651","destinationFieldId":"customfield_22651"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22700","destinationFieldId":"customfield_22700"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22607","destinationFieldId":"customfield_22607"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"priority","destinationFieldId":"priority"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22814","destinationFieldId":"customfield_22814"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23203","destinationFieldId":"customfield_23203"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23400","destinationFieldId":"customfield_23400"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_21909","destinationFieldId":"customfield_21909"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22629","destinationFieldId":"customfield_22629"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"Yes","destinationFieldId":"customfield_22681"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"Nuova Installazione","destinationFieldId":"summary"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23400","destinationFieldId":"customfield_21908"}}]</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">á÷{wnöq÷Ú×5o¾4oÝ|ñÇZy¦ç_9s}·</arg>
                  <arg name="FIELD_NOTES">OP: Set OP_OFFER_TKT=Yes on just created linkedIssue</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport com.atlassian.jira.issue.IssueManager\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport groovy.json.JsonSlurper\nimport groovy.json.StreamingJsonBuilder\nimport com.atlassian.jira.config.util.JiraHome\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport java.text.SimpleDateFormat\nimport java.text.ParseException\nimport com.atlassian.jira.config.properties.APKeys\nimport com.atlassian.jira.issue.link.LinkCollectionImpl;\nimport com.atlassian.jira.issue.link.IssueLink;\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nlog.debug \"Percorso properties: \" + ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\n\n/*Script Variables*/\n//Per Post Function\nissue = issue\n//Per test da console\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\n//issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-257\")\nlog.debug \"Issue: \" + issue\ndef found=false\ndef linkedIssue\ndef issueService = ComponentAccessor.getIssueService()\n\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]\ndef offerFromRepair =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_GENERATED_FROM_REPAIR\")[0]\n\ndef groupManager = ComponentAccessor.getGroupManager()\ndef userManager = ComponentAccessor.getUserManager()\ndef currentUserTransition =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENT_USER_GENERATE_NEWINST_QUOTE\")[0]\nString supplierAdm = \"OPROLE_AA_SUPPLIER_ADM\"\nString supplierTech = \"OPROLE_AA_SUPPLIER_TECH\"\n\nList&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId());\nlog.debug \"allInIssueLink: \" + allInIssueLink\nfor (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n    def linkedIssueTemp = issueLink.getSourceObject()\n    String type = linkedIssueTemp.getIssueType().getName();\n\n    log.debug(issueLink.issueLinkType.getName()) \n    \n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsTrigger'].toString())){\n        linkedIssue=linkedIssueTemp\n        log.debug \"linked issue: \" + linkedIssue\n        //log.debug \"linked issue status: \" + linkedIssue.getStatusObject().name\n        if(linkedIssue.getStatusObject().name == properties['wf.open'].toString()){\n            found=true\n        }\n    }\n}\n//log.debug \"found: \" + found\n\nif(found){\n\tdef destStatusObject = linkedIssue.getStatusObject()\n    //log.debug \"destStatusObject: \" + destStatusObject\n    //log.debug \"linkedIssue: \" + linkedIssue\n    def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n\t// Is the status of the linked issue \"Installing\" ?\n    \n    def customFieldManager = ComponentAccessor.customFieldManager\n    def offerIssueField = customFieldManager.getCustomFieldObjectsByName(properties['cf.offerLinkedIssue'].toString()).first()\n    def maintenanceIssueField = customFieldManager.getCustomFieldObjectsByName(properties['cf.maintenanceLinkedIssue'] ? properties['cf.maintenanceLinkedIssue'].toString() : \"OP_MAINTENANCE_LINKED_ISSUE\").first()\n    def offerIssueBoolField = customFieldManager.getCustomFieldObjectsByName(properties['cf.offerTkt'].toString()).first()\n    \n    //Set OPAA_OFFER_TKT=Yes on just created linkedIssue\n    def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n    def mi = (MutableIssue) linkedIssue\n\n    def fieldConfig = offerIssueBoolField.getRelevantConfig(linkedIssue)\n    //log.warn \"fieldConfig: \" + fieldConfig\n    def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n    log.debug \"transition field value: \" + issue.getCustomFieldValue(currentUserTransition)\n    def userTransition = userManager.getUserByName(issue.getCustomFieldValue(currentUserTransition).toString())\n\tlog.debug \"userTransition: \" + issue.getCustomFieldValue(currentUserTransition) + \" - \" + userTransition\n    if (userTransition != null &amp;&amp; (groupManager.getUsersInGroup(supplierAdm).contains(userTransition) || groupManager.getUsersInGroup(supplierTech).contains(userTransition))) {\n        // Transition executed by external user --&gt; to be added also internal techs role groups\n        // Email has not to be sent\n        // SN will be created as soon as the quotation has been confirmed - to be checked when to create SN if no quotation from supplier is needed - when the quotation has been sent to the customer?\n        log.debug \"in utente supplier\"\n        transitionCheck.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(transitionCheck), cfNewValue), new DefaultIssueChangeHolder())\n        offerFromRepair.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(offerFromRepair), cfNewValue), new DefaultIssueChangeHolder())\n\t}\n    offerIssueBoolField.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(offerIssueBoolField), cfNewValue), new DefaultIssueChangeHolder())\n\tmaintenanceIssueField.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(maintenanceIssueField), issue.key.toString()), new DefaultIssueChangeHolder())\n    \n    ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n    issueIndexingService.reIndex(linkedIssue)    \n    \n    //log.debug \"offerIssueField: \" + offerIssueField\n    //log.debug \"linkedIssue: \" + linkedIssue\n    //offerIssueField.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(offerIssueField), linkedIssue.key.toString()), new DefaultIssueChangeHolder())\n    //log.debug \"updated: \" + issue.getCustomFieldValue(offerIssueField)\n    \n    if (destStatusObject.name == properties['wf.open'].toString()) {\n        // Prepare our input for the transition\n        def issueInputParameters = issueService.newIssueInputParameters()\n        issueInputParameters.with {\n            setSkipScreenCheck(true)\n        }\n        // Validate transitioning the linked issue to \"Signs Needed\"\n        def validationResult = issueService.validateTransition(user, linkedIssue.id, (properties['wf.tr.askQuote'] ? properties['wf.tr.askQuote'].toInteger() : 11), issueInputParameters)\n        if (validationResult.isValid()) {\n            // Perform the transition\n            def issueResult = issueService.transition(user, validationResult)\n            if (! issueResult.isValid()) {\n                log.debug(\"Failed to transition task ${destIssue.key}, errors: ${issueResult.errorCollection}\")\n            }else{\n                log.debug(\"Transazione fatta\")\n            }\n        } else {\n            log.debug(\"Could not transition task ${destIssue.key}, errors: ${validationResult.errorCollection}\")\n        }\n    }\n    \n}","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.IssueManager
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import groovy.json.JsonSlurper
import groovy.json.StreamingJsonBuilder
import com.atlassian.jira.config.util.JiraHome
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import java.text.SimpleDateFormat
import java.text.ParseException
import com.atlassian.jira.config.properties.APKeys
import com.atlassian.jira.issue.link.LinkCollectionImpl;
import com.atlassian.jira.issue.link.IssueLink;
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)
IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)

/*Script Variables*/
//Per Post Function
issue = issue
//Per test da console
//IssueManager issueManager = ComponentAccessor.getIssueManager()
//issue = issueManager.getIssueByKeyIgnoreCase("OPUT-257")
log.debug "Issue: " + issue
def found=false
def linkedIssue
def issueService = ComponentAccessor.getIssueService()

List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId());
log.debug "allInIssueLink: " + allInIssueLink
for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();
    def linkedIssueTemp = issueLink.getSourceObject()
    String type = linkedIssueTemp.getIssueType().getName();

    log.debug(issueLink.issueLinkType.getName()) 
    
    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsTrigger'].toString())){
        found=true
        linkedIssue=linkedIssueTemp
    }
}
log.debug "found: " + found

if(found){
	def destStatusObject = linkedIssue.getStatusObject()
    log.debug "destStatusObject: " + destStatusObject
    log.debug "linkedIssue: " + linkedIssue
    def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
	// Is the status of the linked issue "Installing" ?
    
    def customFieldManager = ComponentAccessor.customFieldManager
    def offerIssueField = customFieldManager.getCustomFieldObjectsByName(properties['cf.offerLinkedIssue'].toString()).first()
    def maintenanceIssueField = customFieldManager.getCustomFieldObjectsByName(properties['cf.maintenanceLinkedIssue'] ? properties['cf.maintenanceLinkedIssue'].toString() : "OP_MAINTENANCE_LINKED_ISSUE").first()
    def offerIssueBoolField = customFieldManager.getCustomFieldObjectsByName(properties['cf.offerTkt'].toString()).first()
    
    //Set OPAA_OFFER_TKT=Yes on just created linkedIssue
    def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
    def mi = (MutableIssue) linkedIssue

    def fieldConfig = offerIssueBoolField.getRelevantConfig(linkedIssue)
    log.warn "fieldConfig: " + fieldConfig
    def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
    offerIssueBoolField.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(offerIssueBoolField), cfNewValue), new DefaultIssueChangeHolder())
	maintenanceIssueField.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(maintenanceIssueField), issue.key.toString()), new DefaultIssueChangeHolder())
    
    ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
    issueIndexingService.reIndex(linkedIssue)    
    
    log.debug "offerIssueField: " + offerIssueField
    log.debug "linkedIssue: " + linkedIssue
    offerIssueField.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(offerIssueField), linkedIssue.key.toString()), new DefaultIssueChangeHolder())
    log.debug "updated: " + issue.getCustomFieldValue(offerIssueField)
    
    if (destStatusObject.name == properties['wf.open'].toString()) {
        // Prepare our input for the transition
        def issueInputParameters = issueService.newIssueInputParameters()
        issueInputParameters.with {
            setSkipScreenCheck(true)
        }
        // Validate transitioning the linked issue to "Signs Needed"
        def validationResult = issueService.validateTransition(user, linkedIssue.id, (properties['wf.tr.askQuote'] ? properties['wf.tr.askQuote'].toInteger() : 11), issueInputParameters)
        if (validationResult.isValid()) {
            // Perform the transition
            def issueResult = issueService.transition(user, validationResult)
            if (! issueResult.isValid()) {
                log.debug("Failed to transition task ${destIssue.key}, errors: ${issueResult.errorCollection}")
            }else{
                log.debug("Transazione fatta")
            }
        } else {
            log.debug("Could not transition task ${destIssue.key}, errors: ${validationResult.errorCollection}")
        }
    }
    
}</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23400</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="811" name="Riapri Intervento">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">f02b01a1-c02e-4cd0-af93-8f4c019ac5b9</arg>
                <arg name="FIELD_NOTES">New Installation</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"issue.issueType.name == 'New Installation'","scriptPath":null}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="4">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22762</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="821" name="Contabilizza a Forfait" view="fieldscreen">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20201</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">97daf48a-885e-4fc2-bb34-0610c30a7145</arg>
                <arg name="FIELD_NOTES">PM Ticket</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"issue.issueType.name == 'Planned Maintenance Ticket'","scriptPath":null}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="Not Done" status="‰Þ" step="6">
              <post-functions>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="7" name="Closed">
      <meta name="jira.status.id">6</meta>
      <actions>
        <action id="231" name="Genera Offerta per Materiali da Preventivare" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20119</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_NOTES">OP: Generazione ticket di preventivazione - solo se ci sono OP_REQUIRED_MATERIALS e se OPAA_QUOTE_TICKET = null</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
cfValues[properties['cf.requiredMaterials']] != null &amp;&amp; cfValues[properties['cf.offerLinkedIssue']] == null|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="7">
              <post-functions>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="targetIssueTypeDefinedByCfSelection" />
                  <arg name="issueTypeId">13001</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">H</arg>
                  <arg name="maxAllowed-integerValue" />
                  <arg name="transitionAttachmentsOperation">rr</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_ASSIGNEE</arg>
                  <arg name="╡крz╙ыв7Ь╡'еy╦^t+м╢ЙЕЙщ]" />
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10500:INWARD</arg>
                  <arg name="field.enablingCustomFieldId">customfield_22609</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="²æÅºw-ì">[{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22609","destinationFieldId":"customfield_22609"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22600","destinationFieldId":"customfield_22600"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22822","destinationFieldId":"customfield_22822"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22601","destinationFieldId":"customfield_22601"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22602","destinationFieldId":"customfield_22602"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22813","destinationFieldId":"customfield_22813"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23235","destinationFieldId":"customfield_23235"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22651","destinationFieldId":"customfield_22651"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22700","destinationFieldId":"customfield_22700"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22607","destinationFieldId":"customfield_22607"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"priority","destinationFieldId":"priority"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22814","destinationFieldId":"customfield_22814"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23203","destinationFieldId":"customfield_23203"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23237","destinationFieldId":"customfield_23237"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_21909","destinationFieldId":"customfield_21909"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22629","destinationFieldId":"customfield_22629"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"Yes","destinationFieldId":"customfield_22681"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23401","destinationFieldId":"customfield_21908"}}]</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">á÷{wnöq÷Ú×5o¾4oÝ|ñÇZy¦ç_9s}·</arg>
                  <arg name="FIELD_NOTES">OP: Set OP_OFFER_TKT=Yes on just created linkedIssue</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport com.atlassian.jira.issue.IssueManager\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport groovy.json.JsonSlurper\nimport groovy.json.StreamingJsonBuilder\nimport com.atlassian.jira.config.util.JiraHome\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport java.text.SimpleDateFormat\nimport java.text.ParseException\nimport com.atlassian.jira.config.properties.APKeys\nimport com.atlassian.jira.issue.link.LinkCollectionImpl;\nimport com.atlassian.jira.issue.link.IssueLink;\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nlog.debug \"Percorso properties: \" + ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\n\n/*Script Variables*/\n//Per Post Function\nissue = issue\n//Per test da console\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\n//issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-257\")\nlog.debug \"Issue: \" + issue\ndef found=false\ndef linkedIssue\ndef issueService = ComponentAccessor.getIssueService()\n\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]\ndef offerFromRepair =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_GENERATED_FROM_REPAIR\")[0]\n\ndef groupManager = ComponentAccessor.getGroupManager()\ndef userManager = ComponentAccessor.getUserManager()\ndef currentUserTransition =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_CURRENT_USER_GENERATE_REPAIR_QUOTE\")[0]\nString supplierAdm = \"OPROLE_AA_SUPPLIER_ADM\"\nString supplierTech = \"OPROLE_AA_SUPPLIER_TECH\"\n\nList&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId());\nlog.debug \"allInIssueLink: \" + allInIssueLink\nfor (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n    def linkedIssueTemp = issueLink.getSourceObject()\n    String type = linkedIssueTemp.getIssueType().getName();\n\n    log.debug(issueLink.issueLinkType.getName()) \n    \n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsTrigger'].toString())){\n        linkedIssue=linkedIssueTemp\n        log.debug \"linked issue: \" + linkedIssue\n        //log.debug \"linked issue status: \" + linkedIssue.getStatusObject().name\n        if(linkedIssue.getStatusObject().name == properties['wf.open'].toString()){\n            found=true\n        }\n    }\n}\n//log.debug \"found: \" + found\n\nif(found){\n\tdef destStatusObject = linkedIssue.getStatusObject()\n    //log.debug \"destStatusObject: \" + destStatusObject\n    //log.debug \"linkedIssue: \" + linkedIssue\n    def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n\t// Is the status of the linked issue \"Installing\" ?\n    \n    def customFieldManager = ComponentAccessor.customFieldManager\n    def offerIssueField = customFieldManager.getCustomFieldObjectsByName(properties['cf.offerLinkedIssue'].toString()).first()\n    def maintenanceIssueField = customFieldManager.getCustomFieldObjectsByName(properties['cf.maintenanceLinkedIssue'] ? properties['cf.maintenanceLinkedIssue'].toString() : \"OP_MAINTENANCE_LINKED_ISSUE\").first()\n    def offerIssueBoolField = customFieldManager.getCustomFieldObjectsByName(properties['cf.offerTkt'].toString()).first()\n    \n    //Set OPAA_OFFER_TKT=Yes on just created linkedIssue\n    def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n    def mi = (MutableIssue) linkedIssue\n\n    def fieldConfig = offerIssueBoolField.getRelevantConfig(linkedIssue)\n    //log.warn \"fieldConfig: \" + fieldConfig\n    def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n    log.debug \"transition field value: \" + issue.getCustomFieldValue(currentUserTransition)\n    //log.debug \"currentUserTransition: \" + currentUserTransition\n    def userTransition = userManager.getUserByName(issue.getCustomFieldValue(currentUserTransition).toString())\n\tlog.debug \"userTransition: \" + userTransition\n    if (userTransition != null &amp;&amp; (groupManager.getUsersInGroup(supplierAdm).contains(userTransition) || groupManager.getUsersInGroup(supplierTech).contains(userTransition))) {\n        // Transition executed by external user --&gt; to be added also internal techs role groups\n        // Email has not to be sent\n        // SN will be created as soon as the quotation has been confirmed - to be checked when to create SN if no quotation from supplier is needed - when the quotation has been sent to the customer?\n        log.debug \"in utente supplier\"\n        transitionCheck.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(transitionCheck), cfNewValue), new DefaultIssueChangeHolder())\n        offerFromRepair.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(offerFromRepair), cfNewValue), new DefaultIssueChangeHolder())\n\t}\n    offerIssueBoolField.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(offerIssueBoolField), cfNewValue), new DefaultIssueChangeHolder())\n\tmaintenanceIssueField.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(maintenanceIssueField), issue.key.toString()), new DefaultIssueChangeHolder())\n    \n    ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n    issueIndexingService.reIndex(linkedIssue)    \n    \n    //log.debug \"offerIssueField: \" + offerIssueField\n    //log.debug \"linkedIssue: \" + linkedIssue\n    offerIssueField.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(offerIssueField), linkedIssue.key.toString()), new DefaultIssueChangeHolder())\n    //log.debug \"updated: \" + issue.getCustomFieldValue(offerIssueField)\n    \n    if (destStatusObject.name == properties['wf.open'].toString()) {\n        // Prepare our input for the transition\n        def issueInputParameters = issueService.newIssueInputParameters()\n        issueInputParameters.with {\n            setSkipScreenCheck(true)\n        }\n        // Validate transitioning the linked issue to \"Signs Needed\"\n        def validationResult = issueService.validateTransition(user, linkedIssue.id, (properties['wf.tr.askQuote'] ? properties['wf.tr.askQuote'].toInteger() : 11), issueInputParameters)\n        if (validationResult.isValid()) {\n            // Perform the transition\n            def issueResult = issueService.transition(user, validationResult)\n            if (! issueResult.isValid()) {\n                log.debug(\"Failed to transition task ${destIssue.key}, errors: ${issueResult.errorCollection}\")\n            }else{\n                log.debug(\"Transazione fatta\")\n            }\n        } else {\n            log.debug(\"Could not transition task ${destIssue.key}, errors: ${validationResult.errorCollection}\")\n        }\n    }\n    \n}","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.IssueManager
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import groovy.json.JsonSlurper
import groovy.json.StreamingJsonBuilder
import com.atlassian.jira.config.util.JiraHome
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import java.text.SimpleDateFormat
import java.text.ParseException
import com.atlassian.jira.config.properties.APKeys
import com.atlassian.jira.issue.link.LinkCollectionImpl;
import com.atlassian.jira.issue.link.IssueLink;
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)
IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)

/*Script Variables*/
//Per Post Function
issue = issue
//Per test da console
//IssueManager issueManager = ComponentAccessor.getIssueManager()
//issue = issueManager.getIssueByKeyIgnoreCase("OPUT-257")
log.debug "Issue: " + issue
def found=false
def linkedIssue
def issueService = ComponentAccessor.getIssueService()

List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId());
log.debug "allInIssueLink: " + allInIssueLink
for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {
    IssueLink issueLink = (IssueLink) outIterator.next();
    def linkedIssueTemp = issueLink.getSourceObject()
    String type = linkedIssueTemp.getIssueType().getName();

    log.debug(issueLink.issueLinkType.getName()) 
    
    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsTrigger'].toString())){
        found=true
        linkedIssue=linkedIssueTemp
    }
}
log.debug "found: " + found

if(found){
	def destStatusObject = linkedIssue.getStatusObject()
    log.debug "destStatusObject: " + destStatusObject
    log.debug "linkedIssue: " + linkedIssue
    def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
	// Is the status of the linked issue "Installing" ?
    
    def customFieldManager = ComponentAccessor.customFieldManager
    def offerIssueField = customFieldManager.getCustomFieldObjectsByName(properties['cf.offerLinkedIssue'].toString()).first()
    def maintenanceIssueField = customFieldManager.getCustomFieldObjectsByName(properties['cf.maintenanceLinkedIssue'] ? properties['cf.maintenanceLinkedIssue'].toString() : "OP_MAINTENANCE_LINKED_ISSUE").first()
    def offerIssueBoolField = customFieldManager.getCustomFieldObjectsByName(properties['cf.offerTkt'].toString()).first()
    
    //Set OPAA_OFFER_TKT=Yes on just created linkedIssue
    def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
    def mi = (MutableIssue) linkedIssue

    def fieldConfig = offerIssueBoolField.getRelevantConfig(linkedIssue)
    log.warn "fieldConfig: " + fieldConfig
    def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == "Yes" }
    offerIssueBoolField.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(offerIssueBoolField), cfNewValue), new DefaultIssueChangeHolder())
	maintenanceIssueField.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(maintenanceIssueField), issue.key.toString()), new DefaultIssueChangeHolder())
    
    ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
    issueIndexingService.reIndex(linkedIssue)    
    
    log.debug "offerIssueField: " + offerIssueField
    log.debug "linkedIssue: " + linkedIssue
    offerIssueField.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(offerIssueField), linkedIssue.key.toString()), new DefaultIssueChangeHolder())
    log.debug "updated: " + issue.getCustomFieldValue(offerIssueField)
    
    if (destStatusObject.name == properties['wf.open'].toString()) {
        // Prepare our input for the transition
        def issueInputParameters = issueService.newIssueInputParameters()
        issueInputParameters.with {
            setSkipScreenCheck(true)
        }
        // Validate transitioning the linked issue to "Signs Needed"
        def validationResult = issueService.validateTransition(user, linkedIssue.id, (properties['wf.tr.askQuote'] ? properties['wf.tr.askQuote'].toInteger() : 11), issueInputParameters)
        if (validationResult.isValid()) {
            // Perform the transition
            def issueResult = issueService.transition(user, validationResult)
            if (! issueResult.isValid()) {
                log.debug("Failed to transition task ${destIssue.key}, errors: ${issueResult.errorCollection}")
            }else{
                log.debug("Transazione fatta")
            }
        } else {
            log.debug("Could not transition task ${destIssue.key}, errors: ${validationResult.errorCollection}")
        }
    }
    
}</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23401</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="241" name="Riapri Tkt">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_NOTES">OP: OPAA_SALES_ORDER_DATE and OPAA_PURCHASE_ORDER_DATE should be null in order to reopen the ticket - otherwise the ticket has already been accounted so it cannot be reopened</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">cfValues['OP_SALES_ORDER_DATE'] == null &amp;&amp; cfValues['OP_PURCHASE_ORDER_DATE'] == null|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="6">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22659</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="field.copyFieldSource1" />
                  <arg name="textValue">-1</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="workflowName-textValue">OPAA: PM Task Workflow</arg>
                  <arg name="performTransitionAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="scopeType">PARENT</arg>
                  <arg name="destination-scopeTarget">SUB_TASK</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitieslinkedtransition-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="{^êÕj[">21</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.linkedtransition.LinkedTransitionFunction</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="status" />
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22693</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="field">resolution</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="8" name="To be Quoted">
      <meta name="jira.status.id">14331</meta>
      <actions>
<common-action id="741" />
        <action id="251" name="Richiedi Preventivo a Fornitore" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19913</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">ßÇ9y÷Ý÷ÓÇ&lt;÷¶ñ®ý÷÷{ñ­ÞuÎ{</arg>
              <arg name="FIELD_NOTES">OP: Check Required Fields</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport com.atlassian.jira.issue.IssueManager\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\ndef Category log = Category.getInstance(\"com.onresolve.jira.groovy.PostFunction\")\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssue issue = issue\n//IssueManager issueManager = ComponentAccessor.getIssueManager();\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-2761\")\n\ndef errors = false\ndef warnings = false\n\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]\ndef repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteMaterials'].toString())[0]\ndef genFromRepair = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_GENERATED_FROM_REPAIR\")[0]\n\ndef errorMandatoryFields = new ArrayList()\ndef errorJobStartedCompletedFields = new ArrayList()\ndef warningEmptyFields = new ArrayList()\n\n//OPAA_REPLACED_MATERIALS\nif(issue.getCustomFieldValue(repMaterials)==null || (String)issue.getCustomFieldValue(repMaterials) == \"\" || issue.getCustomFieldValue(repMaterials).toString().equals(\"\")){\n    log.debug \"warnings true\"\n    warnings = true\n    warningEmptyFields.add(properties['cf.quoteMaterials'].toString())\n}else{\n    //insight classes &amp; components\n    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n    //Verifico che ci sia almeno un elemento, di quelli legati nel customfield, con DELETED!=true\n    def allDeleted=true\n    for(obj in issue.getCustomFieldValue(repMaterials)){\n        \n        obj=obj.toString()\n        def objKey = obj.substring(obj.indexOf('(')+1,obj.indexOf(')'))\n        def objObject = objectFacade.loadObjectBean(objKey)\n        if(objectFacade.loadObjectAttributeBean(objObject.getId(), properties['iobj.component.deleted'].toString())){\n            obTriage = objectFacade.loadObjectAttributeBean(objObject.getId(), properties['iobj.component.deleted'].toString()).createMutable()\n            deleted = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()\n            if(!deleted){\n                allDeleted=false\n            }\n        }else{\n            allDeleted=false\n        }      \n        //log.debug \"obj: \" + obj\n        //log.debug \"allDeleted: \" + allDeleted\n    }\n    if(allDeleted){\n        warnings = true\n        warningEmptyFields.add(properties['cf.quoteMaterials'].toString())\n    }\n}\n\ndef output = new ArrayList()\nlog.debug \"issue: \" + issue\nlog.debug \"issue.getCustomFieldValue(genFromRepair): \" + issue.getCustomFieldValue(genFromRepair)\nif(issue.getCustomFieldValue(genFromRepair)==null || !issue.getCustomFieldValue(genFromRepair).toString().equals(\"Yes\")){\n    if (!errors &amp;&amp; !warnings){\n        return true\n    }else{\n        if(!errors &amp;&amp; warnings){\n            //Se ci sono solo warnings verifico se l'utente ha gi\u00e0 dichiarato di voler proseguire comunque\n            // - transition field \"OPAA_CHECK_AND_CONFIRM\"=\"Yes\"\n            // - in caso contrario invio i warning a FE\n\n            //log.debug \"transitionCheck: \" + issue.getCustomFieldValue(transitionCheck)\n            //log.debug \"result: \" + issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")\n            if(issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")){\n                return true\n            }else{\n                def wList = new ArrayList()\n\n                if(warningEmptyFields.size() &gt; 0){\n                    def wListConfirmEmpty = new ArrayList()\n                    wListConfirmEmpty.add(\"W\")\n                    wListConfirmEmpty.add(\"CONFIRM_EMPTY_FIELDS\")\n                    wListConfirmEmpty.add(null)\n                    wListConfirmEmpty.add(warningEmptyFields)\n\n                    wList.add(wListConfirmEmpty)\n                }\n\n                output.add(wList)\n                log.debug \"throw exception: \" + output.toString()\n                throw new InvalidInputException('{\"W\":\"' + output.toString() + '\"}')\n                //throw new InvalidInputException(\"W\", output.toString())   \n            }\n\n        }\n        if(errors &amp;&amp; !warnings){\n            def eList = new ArrayList()\n\n            if(errorMandatoryFields.size() &gt; 0){\n                def eListMandatory = new ArrayList()\n                eListMandatory.add(\"E\")\n                eListMandatory.add(\"MANDATORY_FIELDS\")\n                eListMandatory.add(null)\n                eListMandatory.add(errorMandatoryFields)\n                eList.add(eListMandatory)\n            }\n\n            output.add(eList)\n            log.debug \"throw exception: \" + output.toString()\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n            //throw new InvalidInputException(\"E\", output.toString())   \n        }\n        if(errors &amp;&amp; warnings){\n            def eList = new ArrayList()\n            def wList = new ArrayList()\n            if(errorMandatoryFields.size() &gt; 0){\n                def eListMandatory = new ArrayList()\n                eListMandatory.add(\"E\")\n                eListMandatory.add(\"MANDATORY_FIELDS\")\n                eListMandatory.add(null)\n                eListMandatory.add(errorMandatoryFields)\n                eList.add(eListMandatory)\n            }\n\n            if(warningEmptyFields.size() &gt; 0){\n                def wListConfirmEmpty = new ArrayList()\n                wListConfirmEmpty.add(\"W\")\n                wListConfirmEmpty.add(\"CONFIRM_EMPTY_FIELDS\")\n                wListConfirmEmpty.add(null)\n                wListConfirmEmpty.add(warningEmptyFields)\n\n                wList.add(wListConfirmEmpty)\n            }\n\n            output.add(eList)\n            output.add(wList)\n            log.debug \"throw exception: \" + output.toString()\n            throw new InvalidInputException('{\"WE\":\"' + output.toString() + '\"}')\n            //throw new InvalidInputException(\"WE\", output.toString())  \n        }\n    }\n}else{\n    return true\n}\n","scriptPath":null,"parameters":{}}</arg>
              <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl
import com.atlassian.jira.issue.IssueManager

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

Issue issue = issue
//IssueManager issueManager = ComponentAccessor.getIssueManager();
//Issue issue = issueManager.getIssueByKeyIgnoreCase("AAS-2761")

def errors = false
def warnings = false

def transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]
def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteMaterials'].toString())[0]

def errorMandatoryFields = new ArrayList()
def errorJobStartedCompletedFields = new ArrayList()
def warningEmptyFields = new ArrayList()

//OPAA_REPLACED_MATERIALS
if(issue.getCustomFieldValue(repMaterials)==null || (String)issue.getCustomFieldValue(repMaterials) == "" || issue.getCustomFieldValue(repMaterials).toString().equals("")){
    log.debug "warnings true"
    warnings = true
    warningEmptyFields.add(properties['cf.quoteMaterials'].toString())
}else{
    //insight classes &amp; components
    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

    //Verifico che ci sia almeno un elemento, di quelli legati nel customfield, con DELETED!=true
    def allDeleted=true
    for(obj in issue.getCustomFieldValue(repMaterials)){
        
        obj=obj.toString()
        def objKey = obj.substring(obj.indexOf('(')+1,obj.indexOf(')'))
        def objObject = objectFacade.loadObjectBean(objKey)
        if(objectFacade.loadObjectAttributeBean(objObject.getId(), properties['iobj.component.deleted'].toString())){
            obTriage = objectFacade.loadObjectAttributeBean(objObject.getId(), properties['iobj.component.deleted'].toString()).createMutable()
            deleted = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()
            if(!deleted){
                allDeleted=false
            }
        }else{
            allDeleted=false
        }      
        //log.debug "obj: " + obj
        //log.debug "allDeleted: " + allDeleted
    }
    if(allDeleted){
        warnings = true
        warningEmptyFields.add(properties['cf.quoteMaterials'].toString())
    }
}

def output = new ArrayList()

if (!errors &amp;&amp; !warnings){
    return true
}else{
    if(!errors &amp;&amp; warnings){
        //Se ci sono solo warnings verifico se l'utente ha già dichiarato di voler proseguire comunque
        // - transition field "OPAA_CHECK_AND_CONFIRM"="Yes"
        // - in caso contrario invio i warning a FE

        //log.debug "transitionCheck: " + issue.getCustomFieldValue(transitionCheck)
        //log.debug "result: " + issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")
        if(issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")){
            return true
        }else{
            def wList = new ArrayList()

            if(warningEmptyFields.size() &gt; 0){
                def wListConfirmEmpty = new ArrayList()
                wListConfirmEmpty.add("W")
                wListConfirmEmpty.add("CONFIRM_EMPTY_FIELDS")
                wListConfirmEmpty.add(null)
                wListConfirmEmpty.add(warningEmptyFields)

                wList.add(wListConfirmEmpty)
            }

            output.add(wList)
            log.debug "throw exception: " + output.toString()
            throw new InvalidInputException('{"W":"' + output.toString() + '"}')
            //throw new InvalidInputException("W", output.toString())   
        }

    }
    if(errors &amp;&amp; !warnings){
        def eList = new ArrayList()

        if(errorMandatoryFields.size() &gt; 0){
            def eListMandatory = new ArrayList()
            eListMandatory.add("E")
            eListMandatory.add("MANDATORY_FIELDS")
            eListMandatory.add(null)
            eListMandatory.add(errorMandatoryFields)
            eList.add(eListMandatory)
        }

        output.add(eList)
        log.debug "throw exception: " + output.toString()
        throw new InvalidInputException('{"E":"' + output.toString() + '"}')
        //throw new InvalidInputException("E", output.toString())   
    }
    if(errors &amp;&amp; warnings){
        def eList = new ArrayList()
        def wList = new ArrayList()
        if(errorMandatoryFields.size() &gt; 0){
            def eListMandatory = new ArrayList()
            eListMandatory.add("E")
            eListMandatory.add("MANDATORY_FIELDS")
            eListMandatory.add(null)
            eListMandatory.add(errorMandatoryFields)
            eList.add(eListMandatory)
        }

        if(warningEmptyFields.size() &gt; 0){
            def wListConfirmEmpty = new ArrayList()
            wListConfirmEmpty.add("W")
            wListConfirmEmpty.add("CONFIRM_EMPTY_FIELDS")
            wListConfirmEmpty.add(null)
            wListConfirmEmpty.add(warningEmptyFields)

            wList.add(wListConfirmEmpty)
        }

        output.add(eList)
        output.add(wList)
        log.debug "throw exception: " + output.toString()
        throw new InvalidInputException('{"WE":"' + output.toString() + '"}')
        //throw new InvalidInputException("WE", output.toString())  
    }
}
</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">c716134f-f724-43dd-894c-5175df3d3ed7</arg>
              <arg name="FIELD_NOTES">Generate SN for offer tkts</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef SN =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_NOTIFICATION\")[0]\ndef offer =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_OFFER_TKT\")[0]\ndef generatedFromRepair =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_GENERATED_FROM_REPAIR\")[0]\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\n\nlog.debug issue.getCustomFieldValue(offer)\nlog.debug issue.getCustomFieldValue(offer).toString().equals(\"Yes\")\nif((issue.getCustomFieldValue(generatedFromRepair) == null || issue.getCustomFieldValue(generatedFromRepair).toString().equals(\"No\")) &amp;&amp; issue.getCustomFieldValue(offer).toString().equals(\"Yes\") &amp;&amp; issue.getCustomFieldValue(SN) == null &amp;&amp; issue.issueType.name != \"Planned Maintenance Ticket\"){\n    requestMethod = \"POST\";\n\n    def body_req = []\n    body_req = [\n        \"issueKey\": issue.key,\n        \"status\": \"OPE\"\n    ] \n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n    log.debug \"baseURL SN: \" + baseURL\n    log.debug \"body_req SN: \" + body_req\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"201\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        \n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n        log.debug \"errors: \" +  json_object.errors.toString()\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-SAP-SN-UPDATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n}\n ","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">76c083d4-473d-4d2f-bb62-2d05ebae2bc9</arg>
              <arg name="FIELD_NOTES">OP Email Notification: REMINDER_FOR_SUPPLIER_QUOTE</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.link.IssueLink \nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport java.sql.Timestamp\nimport java.text.SimpleDateFormat\nimport java.text.DateFormat\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.IssueChangeHolder\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\ndef mi = (MutableIssue) issue\ndef currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n\ndef reminderDate = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.wfReminderForSQuote'].toString())[0]\ndef generatedFromRepair =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_GENERATED_FROM_REPAIR\")[0]\n\nif(issue.getCustomFieldValue(generatedFromRepair) == null || issue.getCustomFieldValue(generatedFromRepair).toString().equals(\"No\")){\n    requestMethod = \"POST\";\n    def body_req = []\n\n    body_req = [\n            \"templateName\": properties['tt.reminderToS'].toString(),\n            \"pec\": false,\n            \"issueKey\": issue.key\n    ] \n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/transaction/mail/send\"\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        eListErrors.add(\"E\")\n        eListErrors.add(\"SENDMAIL\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="9">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">OP: Valorizzazione listini fornitore</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService
import org.apache.log4j.Category
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();

IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)

def requestMethod
def baseURL

log.debug "Valorizzazione listini"

/* REST API per Contabilizzazione Intervento */
requestMethod = "GET";

baseURL = "http://" + properties['api.env'].toString() + "/op/rest/AA/ticket/issueKey/" + issue.key.toString() + "/close?populateRates=false&amp;materialAttribute=" + properties['cf.quoteMaterials'].toString()
log.debug "baseUrl: " + baseURL

/*Definire parametro di input unatantum=true|false in base al valore della variabile booleana unatantum*/
URL url = new URL(baseURL)
HttpURLConnection connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.connect();
log.debug "ResponseCode:" + connection.getResponseCode()
log.debug "ResponseMessage:" + connection.getResponseMessage()

//IssueIndexingService issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)
//issueIndexingService.reIndex(issueManager.getIssueObject(issue.key.toString()))

//def unaTantumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName("OPAA_UNATANTUM_RATES")[0]
//log.warn "unaTantumRates: " + issue.getCustomFieldValue(unaTantumRates)

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()
    log.debug "Response: " + connection

    eListErrors.add("E")
    eListErrors.add("OP-TKT-ACCOUNTING")
    errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
    eListErrors.add(errorMsgs)
    eList.add(eListErrors)

    output.add(eList)
    throw new InvalidInputException("E", output.toString())
}</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22693</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="581" name="Converti in Manutenzione Riparativa">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_NOTES">Change to Maintenance if issue type = New Installation</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">issue.issueType.name == 'New Installation'|||</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="8">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">mç¶õ®}ß^ç–ºnüiý´åþø×¿}}Î·m·Ÿ</arg>
                  <arg name="FIELD_NOTES">OP: Change issue type from New Installation to Maintenance</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import org.apache.log4j.Category\nimport com.atlassian.jira.component.ComponentAccessor\nimport com.atlassian.jira.issue.Issue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.issuetype.IssueType\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\n/* Define a Logger */\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\ndef constantsManager = ComponentAccessor.getConstantsManager()\n\nIssueType targetIssueType = null\ndef issueType\n\nlog.debug \"IssueType old = \" + issue.issueType.name\nlog.debug properties['it.maintenance'].toString()\ndef collection = constantsManager.getAllIssueTypeObjects()\ndef iterator = collection.iterator()\nwhile(iterator.hasNext()){\n\tissueType = iterator.next()\n\tif(issueType.name == (properties['it.maintenance'] ? properties['it.maintenance'].toString() : \"Maintenance Ticket\")){\n\t\ttargetIssueType = issueType\n\t}\n}\n\nlog.debug targetIssueType.name\nissue.setIssueTypeObject(targetIssueType)\nlog.debug \"IssueType new = \" + issue.issueType.name","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import org.apache.log4j.Category
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.issuetype.IssueType
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}

/* Define a Logger */
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

def constantsManager = ComponentAccessor.getConstantsManager()

Issue issue = issue  // This what I was looking for :-). As simple as it is, but I didn't know that.

IssueType targetIssueType = null
def issueType

log.debug "IssueType old = " + issue.issueType.name
log.debug properties['it.maintenance'].toString()
def collection = constantsManager.getAllIssueTypeObjects()
def iterator = collection.iterator()
while(iterator.hasNext()){
	issueType = iterator.next()
	if(issueType.name == (properties['it.maintenance'] ? properties['it.maintenance'].toString() : "Maintenance Ticket")){
		targetIssueType = issueType
	}
}

log.debug targetIssueType.name
issue.setIssueTypeObject(targetIssueType)
log.debug "IssueType new = " + issue.issueType.name</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="диюбwbХ*'">¶»ž</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue" />
                  <arg name="fieldValue">Maintenance Ticket</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">Maintenance Ticket</arg>
                  <arg name="field.name">customfield_22716</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">Maintenance Ticket</arg>
                  <arg name="field.name">summary</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="591" name="Converti in Nuova Installazione">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">58d7281a-ca18-4098-990f-76fde0470684</arg>
                <arg name="FIELD_NOTES">Change to New Installation if issue type = Maintenance</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"issue.issueType.name == 'Maintenance Ticket'","scriptPath":null,"parameters":{}}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE" />
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="8">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">7918c0e3-5dc6-49c1-b2dc-dac5aa760ae0</arg>
                  <arg name="FIELD_NOTES">OP: Change issue type from Maintenance to New Installation</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import org.apache.log4j.Category\nimport com.atlassian.jira.component.ComponentAccessor\nimport com.atlassian.jira.issue.Issue\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.issuetype.IssueType\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\n/* Define a Logger */\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\ndef constantsManager = ComponentAccessor.getConstantsManager()\n\nIssueType targetIssueType = null\ndef issueType\n\nlog.debug \"IssueType old = \" + issue.issueType.name\n\ndef collection = constantsManager.getAllIssueTypeObjects()\ndef iterator = collection.iterator()\nwhile(iterator.hasNext()){\n\tissueType = iterator.next()\n\tif(issueType.name == properties['it.newInstallation'].toString()){\n\t\ttargetIssueType = issueType\n\t}\n}\n\nlog.debug targetIssueType.name\nissue.setIssueTypeObject(targetIssueType)\nlog.debug \"IssueType new = \" + issue.issueType.name","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import org.apache.log4j.Category
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.issuetype.IssueType
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}

/* Define a Logger */
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

def constantsManager = ComponentAccessor.getConstantsManager()

Issue issue = issue  // This what I was looking for :-). As simple as it is, but I didn't know that.

IssueType targetIssueType = null
def issueType

log.debug "IssueType old = " + issue.issueType.name

def collection = constantsManager.getAllIssueTypeObjects()
def iterator = collection.iterator()
while(iterator.hasNext()){
	issueType = iterator.next()
	if(issueType.name == properties['it.newInstallation'].toString()){
		targetIssueType = issueType
	}
}

log.debug targetIssueType.name
issue.setIssueTypeObject(targetIssueType)
log.debug "IssueType new = " + issue.issueType.name</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="диюбwbХ*'">¶»ž</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue" />
                  <arg name="fieldValue">New Installation</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">New Installation Ticket</arg>
                  <arg name="field.name">summary</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">New Installation Ticket</arg>
                  <arg name="field.name">customfield_22716</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="601" name="Clona Tkt" view="fieldscreen">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20401</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">c659704c-9678-4844-9a05-6f3497e391e7</arg>
                <arg name="FIELD_NOTES">Enabled only for Repair and New Installation</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"issue.issueType.name == 'Maintenance Ticket' || (issue.issueType.name == 'New Installation' &amp;&amp; cfValues['OP_ASSET'] != null)","scriptPath":null}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="žée" status="žée" step="8">
              <post-functions>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="диюбwbХ*'">¶»ž</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue" />
                  <arg name="fieldValue">New Installation</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="targetIssueTypeDefinedByCfSelection" />
                  <arg name="issueTypeId">12301</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">H</arg>
                  <arg name="maxAllowed-integerValue" />
                  <arg name="transitionAttachmentsOperation">rr</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="╡крz╙ыв7Ь╡'еy╦^t+м╢ЙЕЙщ]" />
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId" />
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="²æÅºw-ì">[{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_21909","destinationFieldId":"customfield_21909"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22600","destinationFieldId":"customfield_22600"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22822","destinationFieldId":"customfield_22822"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22601","destinationFieldId":"customfield_22601"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22603","destinationFieldId":"customfield_22603"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22663","destinationFieldId":"customfield_22663"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22634","destinationFieldId":"customfield_22634"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22651","destinationFieldId":"customfield_22651"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22700","destinationFieldId":"customfield_22700"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22606","destinationFieldId":"customfield_22606"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22607","destinationFieldId":"customfield_22607"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22629","destinationFieldId":"customfield_22629"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22652","destinationFieldId":"customfield_22652"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"description","destinationFieldId":"description"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22627","destinationFieldId":"customfield_22627"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22620","destinationFieldId":"customfield_22620"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22668","destinationFieldId":"customfield_22668"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23602","destinationFieldId":"customfield_23203"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22814","destinationFieldId":"customfield_22814"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23237","destinationFieldId":"customfield_23237"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"issuekey","destinationFieldId":"customfield_23243"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"YES","destinationFieldId":"customfield_23238"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22702","destinationFieldId":"customfield_22702"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22703","destinationFieldId":"customfield_22703"}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="диюбwbХ*'">¶»ž</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue" />
                  <arg name="fieldValue">Maintenance Ticket</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="targetIssueTypeDefinedByCfSelection" />
                  <arg name="issueTypeId">13001</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql" />
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">H</arg>
                  <arg name="maxAllowed-integerValue" />
                  <arg name="transitionAttachmentsOperation">rr</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="╡крz╙ыв7Ь╡'еy╦^t+м╢ЙЕЙщ]" />
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId" />
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="²æÅºw-ì">[{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_21909","destinationFieldId":"customfield_21909"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22600","destinationFieldId":"customfield_22600"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22822","destinationFieldId":"customfield_22822"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22601","destinationFieldId":"customfield_22601"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22603","destinationFieldId":"customfield_22603"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22663","destinationFieldId":"customfield_22663"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22634","destinationFieldId":"customfield_22634"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22651","destinationFieldId":"customfield_22651"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22700","destinationFieldId":"customfield_22700"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22606","destinationFieldId":"customfield_22606"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22607","destinationFieldId":"customfield_22607"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22629","destinationFieldId":"customfield_22629"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22652","destinationFieldId":"customfield_22652"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"description","destinationFieldId":"description"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22627","destinationFieldId":"customfield_22627"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22620","destinationFieldId":"customfield_22620"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22668","destinationFieldId":"customfield_22668"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23602","destinationFieldId":"customfield_23203"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_22814","destinationFieldId":"customfield_22814"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"customfield_23237","destinationFieldId":"customfield_23237"}},{"type":"CopyFieldFromOriginToNew","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceFieldId":"issuekey","destinationFieldId":"customfield_23243"}},{"type":"SetField","enabled":true,"config":{"concatenationMode":"OVERWRITE","sourceValue":"YES","destinationFieldId":"customfield_23238"}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23602</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="761" name="In Preventivazione - senza notifiche" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19913</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">ßÇ9y÷Ý÷ÓÇ&lt;÷¶ñ®ý÷÷{ñ­ÞuÎ{</arg>
              <arg name="FIELD_NOTES">OP: Check Required Fields</arg>
              <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl
import com.atlassian.jira.issue.IssueManager

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

Issue issue = issue
//IssueManager issueManager = ComponentAccessor.getIssueManager();
//Issue issue = issueManager.getIssueByKeyIgnoreCase("AAS-2761")

def errors = false
def warnings = false

def transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]
def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteMaterials'].toString())[0]

def errorMandatoryFields = new ArrayList()
def errorJobStartedCompletedFields = new ArrayList()
def warningEmptyFields = new ArrayList()

//OPAA_REPLACED_MATERIALS
if(issue.getCustomFieldValue(repMaterials)==null || (String)issue.getCustomFieldValue(repMaterials) == "" || issue.getCustomFieldValue(repMaterials).toString().equals("")){
    log.debug "warnings true"
    warnings = true
    warningEmptyFields.add(properties['cf.quoteMaterials'].toString())
}else{
    //insight classes &amp; components
    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

    //Verifico che ci sia almeno un elemento, di quelli legati nel customfield, con DELETED!=true
    def allDeleted=true
    for(obj in issue.getCustomFieldValue(repMaterials)){
        
        obj=obj.toString()
        def objKey = obj.substring(obj.indexOf('(')+1,obj.indexOf(')'))
        def objObject = objectFacade.loadObjectBean(objKey)
        if(objectFacade.loadObjectAttributeBean(objObject.getId(), properties['iobj.component.deleted'].toString())){
            obTriage = objectFacade.loadObjectAttributeBean(objObject.getId(), properties['iobj.component.deleted'].toString()).createMutable()
            deleted = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()
            if(!deleted){
                allDeleted=false
            }
        }else{
            allDeleted=false
        }      
        //log.debug "obj: " + obj
        //log.debug "allDeleted: " + allDeleted
    }
    if(allDeleted){
        warnings = true
        warningEmptyFields.add(properties['cf.quoteMaterials'].toString())
    }
}

def output = new ArrayList()

if (!errors &amp;&amp; !warnings){
    return true
}else{
    if(!errors &amp;&amp; warnings){
        //Se ci sono solo warnings verifico se l'utente ha già dichiarato di voler proseguire comunque
        // - transition field "OPAA_CHECK_AND_CONFIRM"="Yes"
        // - in caso contrario invio i warning a FE

        //log.debug "transitionCheck: " + issue.getCustomFieldValue(transitionCheck)
        //log.debug "result: " + issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")
        if(issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")){
            return true
        }else{
            def wList = new ArrayList()

            if(warningEmptyFields.size() &gt; 0){
                def wListConfirmEmpty = new ArrayList()
                wListConfirmEmpty.add("W")
                wListConfirmEmpty.add("CONFIRM_EMPTY_FIELDS")
                wListConfirmEmpty.add(null)
                wListConfirmEmpty.add(warningEmptyFields)

                wList.add(wListConfirmEmpty)
            }

            output.add(wList)
            log.debug "throw exception: " + output.toString()
            throw new InvalidInputException('{"W":"' + output.toString() + '"}')
            //throw new InvalidInputException("W", output.toString())   
        }

    }
    if(errors &amp;&amp; !warnings){
        def eList = new ArrayList()

        if(errorMandatoryFields.size() &gt; 0){
            def eListMandatory = new ArrayList()
            eListMandatory.add("E")
            eListMandatory.add("MANDATORY_FIELDS")
            eListMandatory.add(null)
            eListMandatory.add(errorMandatoryFields)
            eList.add(eListMandatory)
        }

        output.add(eList)
        log.debug "throw exception: " + output.toString()
        throw new InvalidInputException('{"E":"' + output.toString() + '"}')
        //throw new InvalidInputException("E", output.toString())   
    }
    if(errors &amp;&amp; warnings){
        def eList = new ArrayList()
        def wList = new ArrayList()
        if(errorMandatoryFields.size() &gt; 0){
            def eListMandatory = new ArrayList()
            eListMandatory.add("E")
            eListMandatory.add("MANDATORY_FIELDS")
            eListMandatory.add(null)
            eListMandatory.add(errorMandatoryFields)
            eList.add(eListMandatory)
        }

        if(warningEmptyFields.size() &gt; 0){
            def wListConfirmEmpty = new ArrayList()
            wListConfirmEmpty.add("W")
            wListConfirmEmpty.add("CONFIRM_EMPTY_FIELDS")
            wListConfirmEmpty.add(null)
            wListConfirmEmpty.add(warningEmptyFields)

            wList.add(wListConfirmEmpty)
        }

        output.add(eList)
        output.add(wList)
        log.debug "throw exception: " + output.toString()
        throw new InvalidInputException('{"WE":"' + output.toString() + '"}')
        //throw new InvalidInputException("WE", output.toString())  
    }
}
</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">c716134f-f724-43dd-894c-5175df3d3ed7</arg>
              <arg name="FIELD_NOTES">Generate SN for offer tkts</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef SN =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_NOTIFICATION\")[0]\ndef offer =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_OFFER_TKT\")[0]\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\n\nlog.debug issue.getCustomFieldValue(offer)\nlog.debug issue.getCustomFieldValue(offer).toString().equals(\"Yes\")\nif(issue.getCustomFieldValue(offer).toString().equals(\"Yes\") &amp;&amp; issue.getCustomFieldValue(SN) == null &amp;&amp; issue.issueType.name != \"Planned Maintenance Ticket\"){\n    requestMethod = \"POST\";\n\n    def body_req = []\n    body_req = [\n        \"issueKey\": issue.key,\n        \"status\": \"OPE\"\n    ] \n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n    log.debug \"baseURL SN: \" + baseURL\n    log.debug \"body_req SN: \" + body_req\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"201\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        \n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n        log.debug \"errors: \" +  json_object.errors.toString()\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-SAP-SN-UPDATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n}\n ","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="9">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">OP: Valorizzazione listini fornitore</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService
import org.apache.log4j.Category
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();

IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)

def requestMethod
def baseURL

log.debug "Valorizzazione listini"

/* REST API per Contabilizzazione Intervento */
requestMethod = "GET";

baseURL = "http://" + properties['api.env'].toString() + "/op/rest/AA/ticket/issueKey/" + issue.key.toString() + "/close?populateRates=false&amp;materialAttribute=" + properties['cf.quoteMaterials'].toString()
log.debug "baseUrl: " + baseURL

/*Definire parametro di input unatantum=true|false in base al valore della variabile booleana unatantum*/
URL url = new URL(baseURL)
HttpURLConnection connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.connect();
log.debug "ResponseCode:" + connection.getResponseCode()
log.debug "ResponseMessage:" + connection.getResponseMessage()

//IssueIndexingService issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)
//issueIndexingService.reIndex(issueManager.getIssueObject(issue.key.toString()))

//def unaTantumRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName("OPAA_UNATANTUM_RATES")[0]
//log.warn "unaTantumRates: " + issue.getCustomFieldValue(unaTantumRates)

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()
    log.debug "Response: " + connection

    eListErrors.add("E")
    eListErrors.add("OP-TKT-ACCOUNTING")
    errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
    eListErrors.add(errorMsgs)
    eList.add(eListErrors)

    output.add(eList)
    throw new InvalidInputException("E", output.toString())
}</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22693</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="9" name="Waiting for Supplier Quote">
      <meta name="jira.status.id">14332</meta>
      <actions>
<common-action id="741" />
        <action id="261" name="Preventivo Fornitore Inserito" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19914</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">Ûw»ë_yáÞôw½uwWçyi§üåþûßÎúñ×|</arg>
              <arg name="FIELD_NOTES">OP: Check mandatory attachments: Preventivo Fornitore</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService
import org.apache.log4j.Category
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.index.IssueIndexingService
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();

IssueIndexingService 	issueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)
def automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]

def requestMethod
def baseURL

int OPAA = properties['ischema.aa.id'].toString().toInteger()
int DBO = properties['ischema.dbo.id'].toString().toInteger()
 
Issue issue = issue

def errors = false
def warnings = false

def errorMandatoryFields = new ArrayList()

/*Rimozione allegato rapporto di intervento appena creato*/
/* Get Insight IQL Facade from plugin accessor */
Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade"); 
def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);

/* Get Insight Object Facade from plugin accessor */
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");
def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

/* Get Insight Object Type Facade from plugin accessor */
Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade");
def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);

/* Get Insight Object Attribute Facade from plugin accessor */
Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);

Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory");
def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);

/* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include " around value */
def objects = iqlFacade.findObjectsByIQLAndSchema(DBO, "\"" + properties['iobj.attachmentCategory.categoryRef'].toString() + "\".\"" + properties['iobj.attachmentCategory.name'].toString() + "\" = \"" + properties['iobj.attachmentCategory.objs.prevFornitore'].toString() + "\" AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND object HAVING connectedTickets(key = " + issue.key.toString() + ")"); // See the complete list of possible IQL on the Insight Query Language documentation page
/* If this is a mandatory field you should be able to do this: */
log.info("Insight object: " + objects[0]);
log.debug "\"" + properties['iobj.attachmentCategory.categoryRef'].toString() + "\".\"" + properties['iobj.attachmentCategory.name'].toString() + "\" = \"" + properties['iobj.attachmentCategory.objs.prevFornitore'].toString() + "\" AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND object HAVING connectedTickets(key = " + issue.key.toString() + ")"

if(!objects[0]){
    /*Nessun preventivo allegato*/
    errors = true
    errorMandatoryFields.add(properties['iobj.attachmentCategory.objs.prevFornitore'] ? properties['iobj.attachmentCategory.objs.prevFornitore'].toString() : "Preventivo Fornitore")
}

def output = new ArrayList()

if (!errors &amp;&amp; !warnings){
    return true
}else{
    if(!errors &amp;&amp; warnings){
        if(issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")){
            //log.debug "return true"
            return true
        }else{
            def wList = new ArrayList()

            if(warningEmptyFields.size() &gt; 0){
                def wListConfirmEmpty = new ArrayList()
                wListConfirmEmpty.add("W")
                wListConfirmEmpty.add("CONFIRM_EMPTY_FIELDS")
                wListConfirmEmpty.add(null)
                wListConfirmEmpty.add(warningEmptyFields)

                wList.add(wListConfirmEmpty)
            }

            output.add(wList)
            throw new InvalidInputException('{"W":"' + output.toString() + '"}')
            //throw new InvalidInputException("W", output.toString())   
        }
    }
    if(errors &amp;&amp; !warnings){
        def eList = new ArrayList()
        
        if(errorMandatoryFields.size() &gt; 0){
            def eListMandatory = new ArrayList()
            eListMandatory.add("E")
            eListMandatory.add("MANDATORY_ATTACHMENTS")
            eListMandatory.add(null)
            eListMandatory.add(errorMandatoryFields)
            eList.add(eListMandatory)
        }
        
		output.add(eList)
        throw new InvalidInputException('{"E":"' + output.toString() + '"}')
        //throw new InvalidInputException("E", output.toString())   
    }
    if(errors &amp;&amp; warnings){
        def eList = new ArrayList()
        def wList = new ArrayList()
        
        if(errorMandatoryFields.size() &gt; 0){
            def eListMandatory = new ArrayList()
            eListMandatory.add("E")
            eListMandatory.add("MANDATORY_ATTACHMENTS")
            eListMandatory.add(null)
            eListMandatory.add(errorMandatoryFields)
            eList.add(eListMandatory)
        }
        
        if(warningEmptyFields.size() &gt; 0){
            def wListConfirmEmpty = new ArrayList()
            wListConfirmEmpty.add("W")
            wListConfirmEmpty.add("CONFIRM_EMPTY_FIELDS")
            wListConfirmEmpty.add(null)
            wListConfirmEmpty.add(warningEmptyFields)

            wList.add(wListConfirmEmpty)
        }
        
        output.add(eList)
        output.add(wList)
        throw new InvalidInputException('{"WE":"' + output.toString() + '"}')
        //throw new InvalidInputException("WE", output.toString())  
    }
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">ç~&lt;Ñ®¶í§øoMm§ù}Ý6åçzsMuu¦û{m^</arg>
              <arg name="FIELD_NOTES">OP: Check Required Fields </arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper\nimport groovy.json.JsonBuilder\nimport groovy.json.StreamingJsonBuilder\n\nimport com.atlassian.jira.issue.CustomFieldManager\nimport com.atlassian.jira.issue.fields.CustomField\nimport com.atlassian.jira.issue.IssueManager\nimport com.atlassian.jira.component.ComponentAccessor\nimport com.atlassian.jira.issue.Issue\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.issue.link.IssueLink\n\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\n\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\ndef Category log = Category.getInstance(\"com.onresolve.jira.groovy.PostFunction\")\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssue issue = issue\n//Per test da console\n//IssueManager issueManager = ComponentAccessor.getIssueManager();\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-2761\")\n\ndef errors = false\ndef warnings = false\ndef relatesInIssueLink=false\ndef relatesOutIssueLink=false\ndef wListConfirmEmptyMatQuoteLinked = new ArrayList()\ndef wListConfirmEmptyRateQuoteLinked = new ArrayList()\n\ndef repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteMaterials'].toString())[0]\ndef labourRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteLabourRates'].toString())[0]\ndef lumpSumOffer =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumOffer'].toString())[0]\n\n/*Conferma utente su warnings*/\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]\n\n/*Insight Schema IDs*/\ndef DBObjects = properties['ischema.dbo'].toString() + \"-\"\ndef OPAA = properties['ischema.aa'].toString() + \"-\"\n\n/*Array warnings ed errors per la issue principale, uno per ogni tipologia di errore o warning*/\ndef issueWarningEmptyQuoteMatSupplier = new ArrayList()\ndef issueWarningEmptyQuoteRateSupplier = new ArrayList()\n//def issueError...\n\n/*Verifica campi su ticket oggetto della transazione*/\n//OP_QUOTE_MATERIALS\nif(issue.getCustomFieldValue(repMaterials)!=null &amp;&amp; (String)issue.getCustomFieldValue(repMaterials) != \"\" &amp;&amp; !issue.getCustomFieldValue(repMaterials).toString().equals(\"\")){\n    log.debug \"Materiali: \" + issue.getCustomFieldValue(repMaterials)\n    /*Ciclare tutti gli oggetti associati al campo*/\n    //insight classes &amp; components\n    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n    def repMatList = issue.getCustomFieldValue(repMaterials)\n\n    for(mat in repMatList){\n        //extract insight key ang get object\n        def component=mat.toString()\n        def componentKey = component.substring(component.indexOf('('+OPAA)+1,component.length()-1)\n        def componentObject = objectFacade.loadObjectBean(componentKey)\n        //get \"DELETED\" for that component\n\t\tdef matDel = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : \"\"\n        def matDelValue = matDel != \"\" ? matDel.substring(matDel.indexOf('(')+1,matDel.indexOf(')')) : \"\"\n\t\tlog.debug \"matObj: \" + componentObject\n        log.debug \"del: \" + matDel\n        //get \"APPLIED_TO\" for that component\n        def appliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans() as ArrayList\n        def appliedToValue\n        if(appliedTo.size() &gt; 0){\n            appliedTo = appliedTo.toString()\n            appliedToValue = appliedTo.substring(appliedTo.indexOf('(')+1,appliedTo.indexOf(')'))\n            //log.debug \"appliedToValue: \" + appliedToValue\n        }\n\n        def matNumber\n        def matNumberKey\n        def matNumberValue\n        if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString())){\n            matNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).getObjectAttributeValueBeans() as ArrayList\n            if(matNumber.size() &gt; 0){\n                matNumber = matNumber.toString()\n                matNumberKey = matNumber.substring(matNumber.indexOf('(')+1,matNumber.indexOf(')'))\n                def matNumberObject = objectFacade.loadObjectBean(DBObjects + matNumberKey)\n                matNumberValue = objectFacade.loadObjectAttributeBean(matNumberObject.getId(), properties['iobj.material.name'].toString()).getObjectAttributeValueBeans().toString()\n                matNumberValue = matNumberValue.substring(matNumberValue.indexOf('(')+1,matNumberValue.indexOf(')'))\n            }\n        }\n\n        def serialNumber\n        def serialNumberValue\n        if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString())){\n            serialNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()).getObjectAttributeValueBeans() as ArrayList\n            if(serialNumber.size() &gt; 0){\n                serialNumber = serialNumber.toString()\n                serialNumberValue = serialNumber.substring(serialNumber.indexOf('(')+1,serialNumber.indexOf(')'))\n            }               \n        }\n\n        if((appliedToValue.toString().equals(\"BOTH\") || appliedToValue.toString().equals(\"SUPPLIER\")) &amp;&amp; !matDelValue.equals(\"true\")){\n            //get \"TOTAL_AMOUNT_SUPPLIER\" for that component\n            def totSupplier\n            if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString())){\n                totSupplier = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString()).getObjectAttributeValueBeans()\n            }\n            if(!totSupplier || totSupplier[0].getValue().toString().equals(\"0.0\")){\n                warnings=true\n                issueWarningEmptyQuoteMatSupplier.add(matNumberValue.toString() + ((!serialNumber.toString().equals(\"null\") &amp;&amp; !serialNumber.toString().equals(\"[]\")) ? \" (\" + serialNumberValue.toString() + \")\" : \"\"))\n                log.debug issue.key.toString() + \" issueWarningEmptyQuoteMatSupplier: \" + issueWarningEmptyQuoteMatSupplier\n            }\n        }   \n    }    \n}  \n\n//OPAA_LABOUR_RATES\nif(issue.getCustomFieldValue(labourRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(labourRates) != \"\" &amp;&amp; !issue.getCustomFieldValue(labourRates).toString().equals(\"\")){\n    log.debug \"Labour rates: \" + issue.getCustomFieldValue(labourRates)\n    /*Ciclare tutti gli oggetti associati al campo*/\n    //insight classes &amp; components\n    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n    def labourRatesList = issue.getCustomFieldValue(labourRates)\n\n    for(lb in labourRatesList){\n        //extract insight key ang get object\n        def lbRate=lb.toString()\n        def lbRateKey = lbRate.substring(lbRate.indexOf('(')+1,lbRate.indexOf(')'))\n        def lbRateObject = objectFacade.loadObjectBean(lbRateKey)\n        //get \"DELETED\" for that rate\n        def lbDel = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : \"\"\n        def lbDelValue = lbDel != \"\" ? lbDel.substring(lbDel.indexOf('(')+1,lbDel.indexOf(')')) : \"\"\n\n        //get \"APPLIED_TO\" for that rate\n        def lbAppliedTo = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()\n        def lbAppliedToValue = lbAppliedTo.substring(lbAppliedTo.indexOf('(')+1,lbAppliedTo.indexOf(')'))\n\n        def lbRateRef\n        if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){\n            lbRateRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()\n        }\n\n        def techRef\n        if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.technicianRef'].toString())){\n            techRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.technicianRef'].toString()).getObjectAttributeValueBeans().toString()\n        }\n\n        def lbRateRefKey\n        def lbRateRefValue\n        if(lbRateRef.size() &gt; 0){\n            lbRateRef = lbRateRef.toString()\n            lbRateRefKey = lbRateRef.substring(lbRateRef.lastIndexOf('(')+1,lastIndexOf.indexOf(')'))\n            def lbRateRefObject = objectFacade.loadObjectBean(DBObjects + lbRateRefKey)\n            lbRateRefValue = objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()\n            lbRateRefValue = lbRateRefValue.substring(lbRateRefValue.lastIndexOf('(')+1,lbRateRefValue.lastIndexOf(')'))\n        }\n\n        def techRefKey\n        def techRefValue\n        if(techRef){\n            techRef = techRef.toString()\n            log.debug \"techRef: \" + techRef\n            techRefKey = techRef.substring(techRef.lastIndexOf('(')+1,techRef.lastIndexOf(')'))\n            def techRefObject = objectFacade.loadObjectBean(OPAA + techRefKey)\n            techRefValue = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()\n            techRefValue = lbRateRefValue.substring(techRefValue.lastIndexOf('(')+1,techRefValue.lastIndexOf(')'))\n        }\n\n        if((lbAppliedToValue.toString().equals(\"BOTH\") || lbAppliedToValue.toString().equals(\"SUPPLIER\")) &amp;&amp; !lbDelValue.equals(\"true\")){\n            //get \"TOTAL_AMOUNT_SUPPLIER\" for that component\n            def totSupplier\n            if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString())){\n                totSupplier = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()\n            }\n            if(!totSupplier || totSupplier[0].getValue().toString().equals(\"0.0\")){\n                warnings=true\n                issueWarningEmptyQuoteRateSupplier.add(lbRateRefValue.toString() + \" (\" + techRefValue.toString() + \")\")\n                log.debug issue.key.toString() + \" issueWarningEmptyQuoteRateSupplier: \" + issueWarningEmptyQuoteRateSupplier\n            }\n        }\n    }    \n}\ndef output = new ArrayList()\n\nif (!errors &amp;&amp; !warnings){\n    return true\n}else{\n    if(!errors &amp;&amp; warnings){\n        //Se ci sono solo warnings verifico se l'utente ha gi\u00e0 dichiarato di voler proseguire comunque\n        // - transition field \"OPAA_CHECK_AND_CONFIRM\"=\"Yes\"\n        // - in caso contrario invio i warning a FE\n\n        //log.debug \"transitionCheck: \" + issue.getCustomFieldValue(transitionCheck)\n        //log.debug \"result: \" + issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")\n        if(issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")){\n            //log.debug \"return true - transitionCheck = Yes\"\n            return true\n        }else{\n            def wList = new ArrayList()\n\n            if(issueWarningEmptyQuoteRateSupplier.size() &gt; 0){\n            \tdef wListConfirmEmptyRate = new ArrayList()\n                wListConfirmEmptyRate.add(\"W\")\n                wListConfirmEmptyRate.add(\"SUPPLIER_CONFIRM_EMPTY_RATES\")\n                wListConfirmEmptyRate.add(null)\n                wListConfirmEmptyRate.add(issueWarningEmptyQuoteRateSupplier)\n                    \n                wList.add(wListConfirmEmptyRate)\n            }\n            \n            if(issueWarningEmptyQuoteMatSupplier.size() &gt; 0 &amp;&amp; !issue.getCustomFieldValue(lumpSumOffer).equals(\"Yes\")){\n            \tdef wListConfirmEmptyMatQuote = new ArrayList()\n                wListConfirmEmptyMatQuote.add(\"W\")\n                wListConfirmEmptyMatQuote.add(\"SUPPLIER_CONFIRM_EMPTY_MAT_QUOTE\")\n                wListConfirmEmptyMatQuote.add(null)\n                wListConfirmEmptyMatQuote.add(issueWarningEmptyQuoteMatSupplier)\n                    \n                wList.add(wListConfirmEmptyMatQuote)\n            }\n\n            output.add(wList)\n            throw new InvalidInputException('{\"W\":\"' + output.toString() + '\"}')\n            //throw new InvalidInputException(\"W\", output.toString())   \n        }\n\n    }\n    if(errors &amp;&amp; !warnings){\n        def eList = new ArrayList()\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        //throw new InvalidInputException(\"E\", output.toString())   \n    }\n    if(errors &amp;&amp; warnings){\n        def eList = new ArrayList()\n        def wList = new ArrayList()\n\n        if(issueWarningEmptyQuoteRateSupplier.size() &gt; 0){\n            def wListConfirmEmptyRate = new ArrayList()\n            wListConfirmEmptyRate.add(\"W\")\n            wListConfirmEmptyRate.add(\"SUPPLIER_CONFIRM_EMPTY_RATES\")\n\t\t\twListConfirmEmptyRate.add(null)\n            wListConfirmEmptyRate.add(issueWarningEmptyQuoteRateSupplier)\n\n            wList.add(wListConfirmEmptyRate)\n        }\n\n        if(issueWarningEmptyQuoteMatSupplier.size() &gt; 0 &amp;&amp; !issue.getCustomFieldValue(lumpSumOffer).equals(\"Yes\")){\n            def wListConfirmEmptyMatQuote = new ArrayList()\n            wListConfirmEmptyMatQuote.add(\"W\")\n            wListConfirmEmptyMatQuote.add(\"SUPPLIER_CONFIRM_EMPTY_MAT_QUOTE\")\n            wListConfirmEmptyMatQuote.add(null)\n            wListConfirmEmptyMatQuote.add(issueWarningEmptyQuoteMatSupplier)\n\n            wList.add(wListConfirmEmptyMatQuote)\n        }\n\n        output.add(eList)\n        output.add(wList)\n        throw new InvalidInputException('{\"WE\":\"' + output.toString() + '\"}')\n        //throw new InvalidInputException(\"WE\", output.toString())  \n    }\n}","scriptPath":null,"parameters":{}}</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper
import groovy.json.JsonBuilder
import groovy.json.StreamingJsonBuilder

import com.atlassian.jira.issue.CustomFieldManager
import com.atlassian.jira.issue.fields.CustomField
import com.atlassian.jira.issue.IssueManager
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.issue.link.IssueLink

import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService

import org.apache.log4j.Category
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

Issue issue = issue
//Per test da console
//IssueManager issueManager = ComponentAccessor.getIssueManager();
//Issue issue = issueManager.getIssueByKeyIgnoreCase("AAS-2761")

def errors = false
def warnings = false
def relatesInIssueLink=false
def relatesOutIssueLink=false
def wListConfirmEmptyMatQuoteLinked = new ArrayList()
def wListConfirmEmptyRateQuoteLinked = new ArrayList()

def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteMaterials'].toString())[0]
def labourRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteLabourRates'].toString())[0]

/*Conferma utente su warnings*/
def transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]

/*Insight Schema IDs*/
def DBObjects = properties['ischema.dbo'].toString() + "-"
def OPAA = properties['ischema.aa'].toString() + "-"

/*Array warnings ed errors per la issue principale, uno per ogni tipologia di errore o warning*/
def issueWarningEmptyQuoteMatSupplier = new ArrayList()
def issueWarningEmptyQuoteRateSupplier = new ArrayList()
//def issueError...

/*Verifica campi su ticket oggetto della transazione*/
//OP_QUOTE_MATERIALS
if(issue.getCustomFieldValue(repMaterials)!=null &amp;&amp; (String)issue.getCustomFieldValue(repMaterials) != "" &amp;&amp; !issue.getCustomFieldValue(repMaterials).toString().equals("")){
    log.debug "Materiali: " + issue.getCustomFieldValue(repMaterials)
    /*Ciclare tutti gli oggetti associati al campo*/
    //insight classes &amp; components
    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

    def repMatList = issue.getCustomFieldValue(repMaterials)

    for(mat in repMatList){
        //extract insight key ang get object
        def component=mat.toString()
        def componentKey = component.substring(component.indexOf('('+OPAA)+1,component.length()-1)
        def componentObject = objectFacade.loadObjectBean(componentKey)
        //get "DELETED" for that component
		def matDel = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : ""
        def matDelValue = matDel != "" ? matDel.substring(matDel.indexOf('(')+1,matDel.indexOf(')')) : ""
		log.debug "matObj: " + componentObject
        log.debug "del: " + matDel
        //get "APPLIED_TO" for that component
        def appliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans() as ArrayList
        def appliedToValue
        if(appliedTo.size() &gt; 0){
            appliedTo = appliedTo.toString()
            appliedToValue = appliedTo.substring(appliedTo.indexOf('(')+1,appliedTo.indexOf(')'))
            //log.debug "appliedToValue: " + appliedToValue
        }

        def matNumber
        def matNumberKey
        def matNumberValue
        if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString())){
            matNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).getObjectAttributeValueBeans() as ArrayList
            if(matNumber.size() &gt; 0){
                matNumber = matNumber.toString()
                matNumberKey = matNumber.substring(matNumber.indexOf('(')+1,matNumber.indexOf(')'))
                def matNumberObject = objectFacade.loadObjectBean(DBObjects + matNumberKey)
                matNumberValue = objectFacade.loadObjectAttributeBean(matNumberObject.getId(), properties['iobj.material.name'].toString()).getObjectAttributeValueBeans().toString()
                matNumberValue = matNumberValue.substring(matNumberValue.indexOf('(')+1,matNumberValue.indexOf(')'))
            }
        }

        def serialNumber
        def serialNumberValue
        if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString())){
            serialNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()).getObjectAttributeValueBeans() as ArrayList
            if(serialNumber.size() &gt; 0){
                serialNumber = serialNumber.toString()
                serialNumberValue = serialNumber.substring(serialNumber.indexOf('(')+1,serialNumber.indexOf(')'))
            }               
        }

        if((appliedToValue.toString().equals("BOTH") || appliedToValue.toString().equals("SUPPLIER")) &amp;&amp; !matDelValue.equals("true")){
            //get "TOTAL_AMOUNT_SUPPLIER" for that component
            def totSupplier
            if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString())){
                totSupplier = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString()).getObjectAttributeValueBeans()
            }
            if(!totSupplier || totSupplier[0].getValue().toString().equals("0.0")){
                warnings=true
                issueWarningEmptyQuoteMatSupplier.add(matNumberValue.toString() + ((!serialNumber.toString().equals("null") &amp;&amp; !serialNumber.toString().equals("[]")) ? " (" + serialNumberValue.toString() + ")" : ""))
                log.debug issue.key.toString() + " issueWarningEmptyQuoteMatSupplier: " + issueWarningEmptyQuoteMatSupplier
            }
        }   
    }    
}  

//OPAA_LABOUR_RATES
if(issue.getCustomFieldValue(labourRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(labourRates) != "" &amp;&amp; !issue.getCustomFieldValue(labourRates).toString().equals("")){
    log.debug "Labour rates: " + issue.getCustomFieldValue(labourRates)
    /*Ciclare tutti gli oggetti associati al campo*/
    //insight classes &amp; components
    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

    def labourRatesList = issue.getCustomFieldValue(labourRates)

    for(lb in labourRatesList){
        //extract insight key ang get object
        def lbRate=lb.toString()
        def lbRateKey = lbRate.substring(lbRate.indexOf('(')+1,lbRate.indexOf(')'))
        def lbRateObject = objectFacade.loadObjectBean(lbRateKey)
        //get "DELETED" for that rate
        def lbDel = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).getObjectAttributeValueBeans().toString() : ""
        def lbDelValue = lbDel != "" ? lbDel.substring(lbDel.indexOf('(')+1,lbDel.indexOf(')')) : ""

        //get "APPLIED_TO" for that rate
        def lbAppliedTo = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
        def lbAppliedToValue = lbAppliedTo.substring(lbAppliedTo.indexOf('(')+1,lbAppliedTo.indexOf(')'))

        def lbRateRef
        if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){
            lbRateRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
        }

        def techRef
        if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.technicianRef'].toString())){
            techRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.technicianRef'].toString()).getObjectAttributeValueBeans().toString()
        }

        def lbRateRefKey
        def lbRateRefValue
        if(lbRateRef.size() &gt; 0){
            lbRateRef = lbRateRef.toString()
            lbRateRefKey = lbRateRef.substring(lbRateRef.indexOf('(')+1,lbRateRef.indexOf(')'))
            def lbRateRefObject = objectFacade.loadObjectBean(OPAA + lbRateRefKey)
            lbRateRefValue = objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
            lbRateRefValue = lbRateRefValue.substring(lbRateRefValue.indexOf('(')+1,lbRateRefValue.indexOf(')'))
        }

        def techRefKey
        def techRefValue
        if(techRef){
            techRef = techRef.toString()
            log.debug "techRef: " + techRef
            techRefKey = techRef.substring(techRef.indexOf('(')+1,techRef.indexOf(')'))
            def techRefObject = objectFacade.loadObjectBean(OPAA + techRefKey)
            techRefValue = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()
            techRefValue = lbRateRefValue.substring(techRefValue.indexOf('(')+1,techRefValue.indexOf(')'))
        }

        if((lbAppliedToValue.toString().equals("BOTH") || lbAppliedToValue.toString().equals("SUPPLIER")) &amp;&amp; !lbDelValue.equals("true")){
            //get "TOTAL_AMOUNT_SUPPLIER" for that component
            def totSupplier
            if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString())){
                totSupplier = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString()).getObjectAttributeValueBeans()
            }
            if(!totSupplier || totSupplier[0].getValue().toString().equals("0.0")){
                warnings=true
                issueWarningEmptyQuoteRateSupplier.add(lbRateRefValue.toString() + " (" + techRefValue.toString() + ")")
                log.debug issue.key.toString() + " issueWarningEmptyQuoteRateSupplier: " + issueWarningEmptyQuoteRateSupplier
            }
        }
    }    
}
def output = new ArrayList()

if (!errors &amp;&amp; !warnings){
    return true
}else{
    if(!errors &amp;&amp; warnings){
        //Se ci sono solo warnings verifico se l'utente ha già dichiarato di voler proseguire comunque
        // - transition field "OPAA_CHECK_AND_CONFIRM"="Yes"
        // - in caso contrario invio i warning a FE

        //log.debug "transitionCheck: " + issue.getCustomFieldValue(transitionCheck)
        //log.debug "result: " + issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")
        if(issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")){
            //log.debug "return true - transitionCheck = Yes"
            return true
        }else{
            def wList = new ArrayList()

            if(issueWarningEmptyQuoteRateSupplier.size() &gt; 0){
            	def wListConfirmEmptyRate = new ArrayList()
                wListConfirmEmptyRate.add("W")
                wListConfirmEmptyRate.add("SUPPLIER_CONFIRM_EMPTY_RATES")
                wListConfirmEmptyRate.add(null)
                wListConfirmEmptyRate.add(issueWarningEmptyQuoteRateSupplier)
                    
                wList.add(wListConfirmEmptyRate)
            }
            
            if(issueWarningEmptyQuoteMatSupplier.size() &gt; 0){
            	def wListConfirmEmptyMatQuote = new ArrayList()
                wListConfirmEmptyMatQuote.add("W")
                wListConfirmEmptyMatQuote.add("SUPPLIER_CONFIRM_EMPTY_MAT_QUOTE")
                wListConfirmEmptyMatQuote.add(null)
                wListConfirmEmptyMatQuote.add(issueWarningEmptyQuoteMatSupplier)
                    
                wList.add(wListConfirmEmptyMatQuote)
            }

            output.add(wList)
            throw new InvalidInputException('{"W":"' + output.toString() + '"}')
            //throw new InvalidInputException("W", output.toString())   
        }

    }
    if(errors &amp;&amp; !warnings){
        def eList = new ArrayList()

        output.add(eList)
        throw new InvalidInputException('{"E":"' + output.toString() + '"}')
        //throw new InvalidInputException("E", output.toString())   
    }
    if(errors &amp;&amp; warnings){
        def eList = new ArrayList()
        def wList = new ArrayList()

        if(issueWarningEmptyQuoteRateSupplier.size() &gt; 0){
            def wListConfirmEmptyRate = new ArrayList()
            wListConfirmEmptyRate.add("W")
            wListConfirmEmptyRate.add("SUPPLIER_CONFIRM_EMPTY_RATES")
			wListConfirmEmptyRate.add(null)
            wListConfirmEmptyRate.add(issueWarningEmptyQuoteRateSupplier)

            wList.add(wListConfirmEmptyRate)
        }

        if(issueWarningEmptyQuoteMatSupplier.size() &gt; 0){
            def wListConfirmEmptyMatQuote = new ArrayList()
            wListConfirmEmptyMatQuote.add("W")
            wListConfirmEmptyMatQuote.add("SUPPLIER_CONFIRM_EMPTY_MAT_QUOTE")
            wListConfirmEmptyMatQuote.add(null)
            wListConfirmEmptyMatQuote.add(issueWarningEmptyQuoteMatSupplier)

            wList.add(wListConfirmEmptyMatQuote)
        }

        output.add(eList)
        output.add(wList)
        throw new InvalidInputException('{"WE":"' + output.toString() + '"}')
        //throw new InvalidInputException("WE", output.toString())  
    }
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">ac4c9242-8ad3-4e5a-bddb-3e8e9e75fe1a</arg>
              <arg name="FIELD_NOTES">Generate SN for offer tkts - OP_TKT_GENERATED_FROM_REPAIR = Yes</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef SN =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_NOTIFICATION\")[0]\ndef offer =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_OFFER_TKT\")[0]\ndef generatedFromRepair =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_TKT_GENERATED_FROM_REPAIR\")[0]\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\n\nlog.debug issue.getCustomFieldValue(offer)\nlog.debug issue.getCustomFieldValue(offer).toString().equals(\"Yes\")\nif((issue.getCustomFieldValue(generatedFromRepair) != null &amp;&amp; issue.getCustomFieldValue(generatedFromRepair).toString().equals(\"Yes\")) &amp;&amp; issue.getCustomFieldValue(offer).toString().equals(\"Yes\") &amp;&amp; issue.getCustomFieldValue(SN) == null &amp;&amp; issue.issueType.name != \"Planned Maintenance Ticket\"){\n    requestMethod = \"POST\";\n\n    def body_req = []\n    body_req = [\n        \"issueKey\": issue.key,\n        \"status\": \"OPE\"\n    ] \n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n    log.debug \"baseURL SN: \" + baseURL\n    log.debug \"body_req SN: \" + body_req\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"201\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        \n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n        log.debug \"errors: \" +  json_object.errors.toString()\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-SAP-SN-UPDATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n}\n ","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="v+nWù">¶»ž</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="10">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="field.type">8</arg>
                  <arg name="full.module.key">com.riadalabs.jira.plugins.insightinsight-post-function</arg>
                  <arg name="field.groovyScript">  import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.MutableIssue;
import com.atlassian.jira.event.type.EventDispatchOption;
import org.apache.log4j.Level

Properties relativePath = new Properties()
File relativePathFile = new File('/var/atlassian/application-data/jira/insightPathToScript.properties')
relativePathFile.withInputStream {
	relativePath.load(it)
}

Properties properties = new Properties()
File propertiesFile = new File('/var/atlassian/application-data/jira/jira-software/scripts/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
/* Get Insight Object Facade from plugin accessor */
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade"); 
def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);
  
/* Get Insight Object Type Facade from plugin accessor */
Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade"); 
def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);
  
/* Get Insight Object Attribute Facade from plugin accessor */
Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade"); 
def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
  
Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory"); 
def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);

Issue issue = issue

def laborRates = issue.getCustomFieldValue(ComponentAccessor.getCustomFieldManager().getCustomFieldObjectByName(properties['cf.quoteLabourRates'].toString()))

def SUPPLIER_QTY=properties['iobj.onSiteRateReport.suppQty'].toString()
def SUPPLIER_QTY_ID=properties['iobj.onSiteRateReport.suppQty.id'].toString().toInteger()
def CUSTOMER_QTY=properties['iobj.onSiteRateReport.custQty'].toString()
def CUSTOMER_QTY_ID=properties['iobj.onSiteRateReport.custQty.id'].toString().toInteger()
def TECH_NUMBER=properties['iobj.onSiteRateReport.techNum'].toString()
def TECH_NUMBER_ID=properties['iobj.onSiteRateReport.techNum.id'].toString().toInteger()

if(laborRates){
    
    for(rate in laborRates){
        log.info rate.toString()
        def obTriage, quantity, techs
        if(objectFacade.loadObjectAttributeBean(rate.getId(), SUPPLIER_QTY)){
			obTriage = objectFacade.loadObjectAttributeBean(rate.getId(), SUPPLIER_QTY).createMutable()
			quantity = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()
		}
        log.info "quantity: " + quantity
        
        if(objectFacade.loadObjectAttributeBean(rate.getId(), TECH_NUMBER)){
			obTriage = objectFacade.loadObjectAttributeBean(rate.getId(), TECH_NUMBER).createMutable()
			techs = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()
		}
        log.info "techs: " + techs
        
        if(techs != null &amp;&amp; techs &gt; 0){        	
            
            def objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(CUSTOMER_QTY_ID).createMutable() //The id of the attribute

            /* Create the new attribute bean based on the value */
            def newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(rate, objectTypeAttributeBean, quantity);
            /* Load the attribute bean */
            def objectAttributeBean = objectFacade.loadObjectAttributeBean(rate.getId(), quantity);
            if (objectAttributeBean != null) {
                /* If attribute exist reuse the old id for the new attribute */
                newObjectAttributeBean.setId(objectAttributeBean.getId());
            }
            /* Store the object attribute into Insight. */
            try {
                objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);
            } catch (Exception vie) {
                log.warn("Could not update object attribute due to validation exception:" + vie.getMessage());
            }  
            
        }   
        
    }
}
 </arg>
                  <arg name="field.filepath" />
                  <arg name="class.name">com.riadalabs.jira.plugins.insight.services.jira.postfunction.InsightPostFunction</arg>
                  <arg name="field.description">Copy QUANTITY_SUPPLIER to QUANTITY_CUSTOMER for Labour Rates (TECH_NUMBER != 0)</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">e77878de-a7ba-4bff-b4dd-17dc2ad17bbb</arg>
                  <arg name="FIELD_NOTES">Clear cache</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef requestMethod\ndef baseURL\n\n/* REST API per Generazione Allegato Rapporto di Intervento */\nrequestMethod = \"POST\";\n/*Script Variables*/\n//Per test da console\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-14062\")\nbaseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/clearCache/dataObject\"\ndef body_req = []\nURL url = new URL(baseURL)\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.outputStream\nlog.debug \"body_req: \" + body_req\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\nlog.debug connection.outputStream\nconnection.connect();\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n}","scriptPath":null}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">a6604d0a-af28-40f6-84ec-7a2dc32df2b0</arg>
                  <arg name="FIELD_NOTES">OP Email Notification: QUOTE_FROM_SUPPLIER - mantenuta come post function per evitare di generare blocchi al fornitore legati all'invio di notifiche interne</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\ndef requestMethod = \"POST\";\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef body_req = [\n\t\"templateName\": properties['tt.quoteFromSupplier'].toString(),\n\t\"pec\": false,\n    \"issueKey\": issue.key\n]\n\ndef baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/transaction/mail/send\"\nURL url\nurl = new URL(baseURL)\n\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.outputStream\nconnection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\nlog.debug connection.outputStream\nconnection.connect();\n\nlog.debug \"url: \" + url\nlog.debug \"ResponseCode:\" + connection.getResponseCode()\nlog.debug \"ResponseMessage:\" + connection.getResponseMessage()\nlog.debug \"getResponseMessage:\" + connection.getResponseMessage()\n\n","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import org.apache.log4j.Category
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def requestMethod = "POST";

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();

def body_req = [
	"templateName": properties['tt.acceptedBySupplier'].toString(),
	"pec": false,
    "issueKey": issue.key
]

def baseURL = "http://" + properties['api.env'].toString() + "/op/rest/jira/AA/transaction/mail/send"
URL url
url = new URL(baseURL)

HttpURLConnection connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.outputStream
connection.outputStream.withWriter("UTF-8") { new StreamingJsonBuilder(it, body_req) }
log.debug connection.outputStream
connection.connect();

log.debug "url: " + url
log.debug "ResponseCode:" + connection.getResponseCode()
log.debug "ResponseMessage:" + connection.getResponseMessage()
log.debug "getResponseMessage:" + connection.getResponseMessage()

</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22693</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="271" name="Quote Reminder">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <results>
            <unconditional-result old-status="žée" status="žée" step="9">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">OP Email Notification: REMINDER_FOR_SUPPLIER_QUOTE + Update field REMINDER_FOR_SUPPLIER_QUOTE with new due date</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import org.apache.log4j.Category
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)
import com.atlassian.jira.issue.link.IssueLink 
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import java.sql.Timestamp
import java.text.SimpleDateFormat
import java.text.DateFormat
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.util.IssueChangeHolder
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.event.type.EventDispatchOption
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def requestMethod
def baseURL

URL url
HttpURLConnection connection
def mi = (MutableIssue) issue
def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()

def reminderDate = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.wfReminderForSQuote'].toString())[0]

requestMethod = "POST";
def body_req = []

body_req = [
        "templateName": properties['tt.reminderToS'].toString(),
        "pec": false,
        "issueKey": issue.key
] 

baseURL = "http://" + properties['api.env'].toString() + "/op/rest/jira/AA/transaction/mail/send"
url = new URL(baseURL)
connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.outputStream
connection.outputStream.withWriter("UTF-8") { new StreamingJsonBuilder(it, body_req) }
log.debug connection.outputStream
connection.connect();

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()
    eListErrors.add("E")
    eListErrors.add("SENDMAIL")
    errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
    eListErrors.add(errorMsgs)
    eList.add(eListErrors)

    output.add(eList)
    throw new InvalidInputException("E", output.toString())
}else{

    def date = issue.getCustomFieldValue(reminderDate)
    Date newTDV = new Date()
    
    def newDateformat = newTDV.format('MM/dd/yyyy')
    SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
	def cal = Calendar.getInstance()
    cal.setTime(sdf.parse(newDateformat));
    cal.add(Calendar.DATE, +2); 

    Timestamp DefTDD = new Timestamp(cal.getTimeInMillis())
 
    mi.setCustomFieldValue(reminderDate, DefTDD);
	ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false); 
}</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="10" name="Supplier Quote Received">
      <meta name="jira.status.id">14333</meta>
      <actions>
        <action id="281" name="Invia Offerta al Cliente" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19926</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">ó·=Ûw¹m¾[áî·Ów}oÇóÞ¸÷9Ýÿ[ïÞ{</arg>
              <arg name="FIELD_NOTES">OP: Check Required Fields</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper
import groovy.json.JsonBuilder
import groovy.json.StreamingJsonBuilder

import com.atlassian.jira.issue.CustomFieldManager
import com.atlassian.jira.issue.fields.CustomField
import com.atlassian.jira.issue.IssueManager
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.issue.link.IssueLink

import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService

import org.apache.log4j.Category
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)
 
Issue issue = issue
//Per test da console
//IssueManager issueManager = ComponentAccessor.getIssueManager();
//issue = issueManager.getIssueByKeyIgnoreCase("AAS-2761")

def errors = false
def warnings = false
def relatesInIssueLink=false
def relatesOutIssueLink=false
def wListConfirmEmptyMatQuoteLinked = new ArrayList()
def wListConfirmEmptyRateQuoteLinked = new ArrayList()

/*Campi con dati obbligatori per ticket non a corpo*/
def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteMaterials'].toString())[0]
def labourRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteLabourRates'].toString())[0]

/*Conferma utente su warnings*/
def transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]
def transitionCheckValue = issue.getCustomFieldValue(transitionCheck)

/*Insight Schema IDs*/
def DBObjects = properties['ischema.dbo'].toString() + "-"
def OPAA = properties['ischema.aa'].toString() + "-"

/*Array warnings ed errors per la issue principale, uno per ogni tipologia di errore o warning*/
def issueWarningEmptyQuoteMatCustomer = new ArrayList()
def issueWarningEmptyQuoteRateCustomer = new ArrayList()

/*Verifica campi su ticket oggetto della transazione*/
//OP_QUOTE_MATERIALS
if(issue.getCustomFieldValue(repMaterials)!=null &amp;&amp; (String)issue.getCustomFieldValue(repMaterials) != "" &amp;&amp; !issue.getCustomFieldValue(repMaterials).toString().equals("")){
    //log.debug "Materiali: " + issue.getCustomFieldValue(repMaterials)
    /*Ciclare tutti gli oggetti associati al campo*/
    //insight classes &amp; components
    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

    def repMatList = issue.getCustomFieldValue(repMaterials)

    for(mat in repMatList){
        //extract insight key ang get object
        def component=mat.toString()
        //def componentKey = component.substring(component.indexOf('(')+1,component.indexOf(')'))
        def componentKey = component.substring(component.indexOf('('+OPAA)+1,component.length()-1)
        def componentObject = objectFacade.loadObjectBean(componentKey)

        //get "APPLIED_TO" for that component
        def appliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString()).getObjectAttributeValueBeans() as ArrayList
        def appliedToValue
        if(appliedTo.size() &gt; 0){
            appliedTo = appliedTo.toString()
            appliedToValue = appliedTo.substring(appliedTo.indexOf('(')+1,appliedTo.indexOf(')'))
            //log.debug "appliedToValue: " + appliedToValue
        }
        //get "DELETED" for that rate
        def deleted
        def deletedValue
        if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString())){
            deleted = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString()).getObjectAttributeValueBeans().toString()
            log.debug "deleted: " + deleted
            if (deleted){
                deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
            }
        }

        def matNumber
        def matNumberKey
        def matNumberValue
        if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString())){
            matNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).getObjectAttributeValueBeans() as ArrayList
            if(matNumber.size() &gt; 0){
                matNumber = matNumber.toString()
                matNumberKey = matNumber.substring(matNumber.indexOf('(')+1,matNumber.indexOf(')'))
                def matNumberObject = objectFacade.loadObjectBean(DBObjects + matNumberKey)
                matNumberValue = objectFacade.loadObjectAttributeBean(matNumberObject.getId(), properties['iobj.material.name'].toString()).getObjectAttributeValueBeans().toString()
                matNumberValue = matNumberValue.substring(matNumberValue.indexOf('(')+1,matNumberValue.indexOf(')'))
            }
        }

        def serialNumber
        def serialNumberValue
        if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString())){
            serialNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()).getObjectAttributeValueBeans() as ArrayList
            if(serialNumber.size() &gt; 0){
                serialNumber = serialNumber.toString()
                serialNumberValue = serialNumber.substring(serialNumber.indexOf('(')+1,serialNumber.indexOf(')'))
            }  
        }				

        if((appliedToValue.toString().equals("BOTH") || appliedToValue.toString().equals("CUSTOMER")) &amp;&amp; !deletedValue.toString().equals("true")){
            //get "TOTAL_AMOUNT_CUSTOMER" for that component
            def totCustomer 
            if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString())){
                totCustomer = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()).getObjectAttributeValueBeans()
            }
            if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                warnings=true
                issueWarningEmptyQuoteMatCustomer.add(matNumberValue.toString() + ((!serialNumber.toString().equals("null") &amp;&amp; !serialNumber.toString().equals("[]")) ? " (" + serialNumberValue.toString() + ")" : ""))   
                log.debug issue.key.toString() + " issueWarningEmptyQuoteMatCustomer: " + issueWarningEmptyQuoteMatCustomer
            }
        }
    }    
}  

//OP_QUOTE_LABOUR_RATES
if(issue.getCustomFieldValue(labourRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(labourRates) != "" &amp;&amp; !issue.getCustomFieldValue(labourRates).toString().equals("")){
    log.debug "Labour rates: " + issue.getCustomFieldValue(labourRates)
    /*Ciclare tutti gli oggetti associati al campo*/
    //insight classes &amp; components
    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

    def labourRatesList = issue.getCustomFieldValue(labourRates)

    for(lb in labourRatesList){
        //extract insight key ang get object
        def lbRate=lb.toString()
        def lbRateKey = lbRate.substring(lbRate.indexOf('(')+1,lbRate.indexOf(')'))
        def lbRateObject = objectFacade.loadObjectBean(lbRateKey)
        //get "APPLIED_TO" for that rate
        def lbAppliedTo = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.component.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
        def lbAppliedToValue = lbAppliedTo.substring(lbAppliedTo.indexOf('(')+1,lbAppliedTo.indexOf(')'))
        //get "DELETED" for that rate
        def deleted
        def deletedValue
        if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.component.deleted'].toString())){
            deleted = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.component.deleted'].toString()).getObjectAttributeValueBeans().toString()
            log.debug "deleted: " + deleted
            if (deleted){
                deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
            }
        }

        def lbRateRef
        if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){
            lbRateRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
        }
        log.debug "lbRateRef: " + lbRateRef

        def techRef
        if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.technicianRef'].toString())){
            techRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.technicianRef'].toString()).getObjectAttributeValueBeans().toString()
        }

        def lbRateRefKey
        def lbRateRefValue
        if(lbRateRef &amp;&amp; lbRateRef.size() &gt; 0){
            lbRateRef = lbRateRef.toString()
            lbRateRefKey = lbRateRef.substring(lbRateRef.indexOf('(')+1,lbRateRef.indexOf(')'))
            def lbRateRefObject = objectFacade.loadObjectBean(OPAA + lbRateRefKey)
            lbRateRefValue = objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
            lbRateRefValue = lbRateRefValue.substring(lbRateRefValue.indexOf('(')+1,lbRateRefValue.indexOf(')'))
        }

        def techRefKey
        def techRefValue
        if(techRef){
            techRef = techRef.toString()
            log.debug "techRef: " + techRef
            techRefKey = techRef.substring(techRef.indexOf('(')+1,techRef.indexOf(')'))
            def techRefObject = objectFacade.loadObjectBean(OPAA + techRefKey)
            techRefValue = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()
            if(techRefValue){
                techRefValue = techRefValue.substring(techRefValue.indexOf('(')+1,techRefValue.indexOf(')'))
            }
        }

        if((lbAppliedToValue.toString().equals("BOTH") || lbAppliedToValue.toString().equals("CUSTOMER")) &amp;&amp; !deletedValue.toString().equals("true")){
            //get "TOTAL_AMOUNT_CUSTOMER" for that component
            def totCustomer
            if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString())){
                totCustomer=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()
            }
            if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                warnings=true
                issueWarningEmptyQuoteRateCustomer.add(lbRateRefValue.toString())
                log.debug issue.key.toString() + " issueWarningEmptyQuoteRateCustomer: " + issueWarningEmptyQuoteRateCustomer
            }
        }
    }    
}

def output = new ArrayList()

if (!errors &amp;&amp; !warnings){
	return true
}else{
	if(!errors &amp;&amp; warnings){
		//Se ci sono solo warnings verifico se l'utente ha già dichiarato di voler proseguire comunque
		// - transition field "OPAA_CHECK_AND_CONFIRM"="Yes"
		// - in caso contrario invio i warning a FE

		log.debug "transitionCheck: " + issue.getCustomFieldValue(transitionCheck)
		//log.debug "result: " + issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")
		if(transitionCheckValue.toString().equals("Yes")){
			log.debug "return true - transitionCheck = Yes"
			return true
		}else{
			def wList = new ArrayList()

			if(issueWarningEmptyQuoteRateCustomer.size() &gt; 0){
				def wListConfirmEmptyRate = new ArrayList()
				wListConfirmEmptyRate.add("W")
				wListConfirmEmptyRate.add("CUSTOMER_CONFIRM_EMPTY_RATES")
				wListConfirmEmptyRate.add(null)
				wListConfirmEmptyRate.add(issueWarningEmptyQuoteRateCustomer)

				wList.add(wListConfirmEmptyRate)
			}

			if(issueWarningEmptyQuoteMatCustomer.size() &gt; 0){
				def wListConfirmEmptyMatQuote = new ArrayList()
				wListConfirmEmptyMatQuote.add("W")
				wListConfirmEmptyMatQuote.add("CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE")
				wListConfirmEmptyMatQuote.add(null)
				wListConfirmEmptyMatQuote.add(issueWarningEmptyQuoteMatCustomer)

				wList.add(wListConfirmEmptyMatQuote)
			}

			output.add(wList)
            throw new InvalidInputException('{"W":"' + output.toString() + '"}')
			//throw new InvalidInputException("W", output.toString())   
		}

	}
	if(errors &amp;&amp; !warnings){
		def eList = new ArrayList()

		output.add(eList)
        throw new InvalidInputException('{"E":"' + output.toString() + '"}')
		//throw new InvalidInputException("E", output.toString())   
	}
	if(errors &amp;&amp; warnings){
		def eList = new ArrayList()
		def wList = new ArrayList()

		if(issueWarningEmptyQuoteRateCustomer.size() &gt; 0){
			def wListConfirmEmptyRate = new ArrayList()
			wListConfirmEmptyRate.add("W")
			wListConfirmEmptyRate.add("CUSTOMER_CONFIRM_EMPTY_RATES")
			wListConfirmEmptyRate.add(null)
			wListConfirmEmptyRate.add(issueWarningEmptyQuoteRateCustomer)

			wList.add(wListConfirmEmptyRate)
		}

		if(issueWarningEmptyQuoteMatCustomer.size() &gt; 0){
			def wListConfirmEmptyMatQuote = new ArrayList()
			wListConfirmEmptyMatQuote.add("W")
			wListConfirmEmptyMatQuote.add("CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE")
			wListConfirmEmptyMatQuote.add(null)
			wListConfirmEmptyMatQuote.add(issueWarningEmptyQuoteMatCustomer)

			wList.add(wListConfirmEmptyMatQuote)
		}
		
		output.add(eList)
		output.add(wList)
        throw new InvalidInputException('{"WE":"' + output.toString() + '"}')
		//throw new InvalidInputException("WE", output.toString())  
	}
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="11">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22693</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="291" name="Genera Offerta - PDF" view="fieldscreen">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19926</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">ó·=Ûw¹m¾[áî·Ów}oÇóÞ¸÷9Ýÿ[ïÞ{</arg>
              <arg name="FIELD_NOTES">OP: Check Required Fields</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper
import groovy.json.JsonBuilder
import groovy.json.StreamingJsonBuilder

import com.atlassian.jira.issue.CustomFieldManager
import com.atlassian.jira.issue.fields.CustomField
import com.atlassian.jira.issue.IssueManager
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.issue.link.IssueLink

import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService

import org.apache.log4j.Category
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)
 
Issue issue = issue
//Per test da console
//IssueManager issueManager = ComponentAccessor.getIssueManager();
//issue = issueManager.getIssueByKeyIgnoreCase("AAS-2761")

def errors = false
def warnings = false
def relatesInIssueLink=false
def relatesOutIssueLink=false
def wListConfirmEmptyMatQuoteLinked = new ArrayList()
def wListConfirmEmptyRateQuoteLinked = new ArrayList()

/*Campi con dati obbligatori per ticket non a corpo*/
def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteMaterials'].toString())[0]
def labourRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteLabourRates'].toString())[0]

/*Conferma utente su warnings*/
def transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]
def transitionCheckValue = issue.getCustomFieldValue(transitionCheck)

/*Insight Schema IDs*/
def DBObjects = properties['ischema.dbo'].toString() + "-"
def OPAA = properties['ischema.aa'].toString() + "-"

/*Array warnings ed errors per la issue principale, uno per ogni tipologia di errore o warning*/
def issueWarningEmptyQuoteMatCustomer = new ArrayList()
def issueWarningEmptyQuoteRateCustomer = new ArrayList()

/*Verifica campi su ticket oggetto della transazione*/
//OP_QUOTE_MATERIALS
if(issue.getCustomFieldValue(repMaterials)!=null &amp;&amp; (String)issue.getCustomFieldValue(repMaterials) != "" &amp;&amp; !issue.getCustomFieldValue(repMaterials).toString().equals("")){
    //log.debug "Materiali: " + issue.getCustomFieldValue(repMaterials)
    /*Ciclare tutti gli oggetti associati al campo*/
    //insight classes &amp; components
    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

    def repMatList = issue.getCustomFieldValue(repMaterials)

    for(mat in repMatList){
        //extract insight key ang get object
        def component=mat.toString()
        //def componentKey = component.substring(component.indexOf('(')+1,component.indexOf(')'))
        def componentKey = component.substring(component.indexOf('('+OPAA)+1,component.length()-1)
        def componentObject = objectFacade.loadObjectBean(componentKey)

        //get "APPLIED_TO" for that component
        def appliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString()).getObjectAttributeValueBeans() as ArrayList
        def appliedToValue
        if(appliedTo.size() &gt; 0){
            appliedTo = appliedTo.toString()
            appliedToValue = appliedTo.substring(appliedTo.indexOf('(')+1,appliedTo.indexOf(')'))
            //log.debug "appliedToValue: " + appliedToValue
        }
        //get "DELETED" for that rate
        def deleted
        def deletedValue
        if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString())){
            deleted = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString()).getObjectAttributeValueBeans().toString()
            log.debug "deleted: " + deleted
            if (deleted){
                deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
            }
        }

        def matNumber
        def matNumberKey
        def matNumberValue
        if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString())){
            matNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).getObjectAttributeValueBeans() as ArrayList
            if(matNumber.size() &gt; 0){
                matNumber = matNumber.toString()
                matNumberKey = matNumber.substring(matNumber.indexOf('(')+1,matNumber.indexOf(')'))
                def matNumberObject = objectFacade.loadObjectBean(DBObjects + matNumberKey)
                matNumberValue = objectFacade.loadObjectAttributeBean(matNumberObject.getId(), properties['iobj.material.name'].toString()).getObjectAttributeValueBeans().toString()
                matNumberValue = matNumberValue.substring(matNumberValue.indexOf('(')+1,matNumberValue.indexOf(')'))
            }
        }

        def serialNumber
        def serialNumberValue
        if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString())){
            serialNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()).getObjectAttributeValueBeans() as ArrayList
            if(serialNumber.size() &gt; 0){
                serialNumber = serialNumber.toString()
                serialNumberValue = serialNumber.substring(serialNumber.indexOf('(')+1,serialNumber.indexOf(')'))
            }  
        }				

        if((appliedToValue.toString().equals("BOTH") || appliedToValue.toString().equals("CUSTOMER")) &amp;&amp; !deletedValue.toString().equals("true")){
            //get "TOTAL_AMOUNT_CUSTOMER" for that component
            def totCustomer 
            if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString())){
                totCustomer = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()).getObjectAttributeValueBeans()
            }
            if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                warnings=true
                issueWarningEmptyQuoteMatCustomer.add(matNumberValue.toString() + ((!serialNumber.toString().equals("null") &amp;&amp; !serialNumber.toString().equals("[]")) ? " (" + serialNumberValue.toString() + ")" : ""))   
                log.debug issue.key.toString() + " issueWarningEmptyQuoteMatCustomer: " + issueWarningEmptyQuoteMatCustomer
            }
        }
    }    
}  

//OP_QUOTE_LABOUR_RATES
if(issue.getCustomFieldValue(labourRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(labourRates) != "" &amp;&amp; !issue.getCustomFieldValue(labourRates).toString().equals("")){
    log.debug "Labour rates: " + issue.getCustomFieldValue(labourRates)
    /*Ciclare tutti gli oggetti associati al campo*/
    //insight classes &amp; components
    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

    def labourRatesList = issue.getCustomFieldValue(labourRates)

    for(lb in labourRatesList){
        //extract insight key ang get object
        def lbRate=lb.toString()
        def lbRateKey = lbRate.substring(lbRate.indexOf('(')+1,lbRate.indexOf(')'))
        def lbRateObject = objectFacade.loadObjectBean(lbRateKey)
        //get "APPLIED_TO" for that rate
        def lbAppliedTo = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.component.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
        def lbAppliedToValue = lbAppliedTo.substring(lbAppliedTo.indexOf('(')+1,lbAppliedTo.indexOf(')'))
        //get "DELETED" for that rate
        def deleted
        def deletedValue
        if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.component.deleted'].toString())){
            deleted = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.component.deleted'].toString()).getObjectAttributeValueBeans().toString()
            log.debug "deleted: " + deleted
            if (deleted){
                deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
            }
        }

        def lbRateRef
        if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){
            lbRateRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
        }
        log.debug "lbRateRef: " + lbRateRef

        def techRef
        if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.technicianRef'].toString())){
            techRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.technicianRef'].toString()).getObjectAttributeValueBeans().toString()
        }

        def lbRateRefKey
        def lbRateRefValue
        if(lbRateRef &amp;&amp; lbRateRef.size() &gt; 0){
            lbRateRef = lbRateRef.toString()
            lbRateRefKey = lbRateRef.substring(lbRateRef.indexOf('(')+1,lbRateRef.indexOf(')'))
            def lbRateRefObject = objectFacade.loadObjectBean(OPAA + lbRateRefKey)
            lbRateRefValue = objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
            lbRateRefValue = lbRateRefValue.substring(lbRateRefValue.indexOf('(')+1,lbRateRefValue.indexOf(')'))
        }

        def techRefKey
        def techRefValue
        if(techRef){
            techRef = techRef.toString()
            log.debug "techRef: " + techRef
            techRefKey = techRef.substring(techRef.indexOf('(')+1,techRef.indexOf(')'))
            def techRefObject = objectFacade.loadObjectBean(OPAA + techRefKey)
            techRefValue = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()
            if(techRefValue){
                techRefValue = techRefValue.substring(techRefValue.indexOf('(')+1,techRefValue.indexOf(')'))
            }
        }

        if((lbAppliedToValue.toString().equals("BOTH") || lbAppliedToValue.toString().equals("CUSTOMER")) &amp;&amp; !deletedValue.toString().equals("true")){
            //get "TOTAL_AMOUNT_CUSTOMER" for that component
            def totCustomer
            if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString())){
                totCustomer=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()
            }
            if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                warnings=true
                issueWarningEmptyQuoteRateCustomer.add(lbRateRefValue.toString())
                log.debug issue.key.toString() + " issueWarningEmptyQuoteRateCustomer: " + issueWarningEmptyQuoteRateCustomer
            }
        }
    }    
}

def output = new ArrayList()

if (!errors &amp;&amp; !warnings){
	return true
}else{
	if(!errors &amp;&amp; warnings){
		//Se ci sono solo warnings verifico se l'utente ha già dichiarato di voler proseguire comunque
		// - transition field "OPAA_CHECK_AND_CONFIRM"="Yes"
		// - in caso contrario invio i warning a FE

		log.debug "transitionCheck: " + issue.getCustomFieldValue(transitionCheck)
		//log.debug "result: " + issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")
		if(transitionCheckValue.toString().equals("Yes")){
			log.debug "return true - transitionCheck = Yes"
			return true
		}else{
			def wList = new ArrayList()

			if(issueWarningEmptyQuoteRateCustomer.size() &gt; 0){
				def wListConfirmEmptyRate = new ArrayList()
				wListConfirmEmptyRate.add("W")
				wListConfirmEmptyRate.add("CUSTOMER_CONFIRM_EMPTY_RATES")
				wListConfirmEmptyRate.add(null)
				wListConfirmEmptyRate.add(issueWarningEmptyQuoteRateCustomer)

				wList.add(wListConfirmEmptyRate)
			}

			if(issueWarningEmptyQuoteMatCustomer.size() &gt; 0){
				def wListConfirmEmptyMatQuote = new ArrayList()
				wListConfirmEmptyMatQuote.add("W")
				wListConfirmEmptyMatQuote.add("CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE")
				wListConfirmEmptyMatQuote.add(null)
				wListConfirmEmptyMatQuote.add(issueWarningEmptyQuoteMatCustomer)

				wList.add(wListConfirmEmptyMatQuote)
			}

			output.add(wList)
            throw new InvalidInputException('{"W":"' + output.toString() + '"}')
			//throw new InvalidInputException("W", output.toString())   
		}

	}
	if(errors &amp;&amp; !warnings){
		def eList = new ArrayList()

		output.add(eList)
        throw new InvalidInputException('{"E":"' + output.toString() + '"}')
		//throw new InvalidInputException("E", output.toString())   
	}
	if(errors &amp;&amp; warnings){
		def eList = new ArrayList()
		def wList = new ArrayList()

		if(issueWarningEmptyQuoteRateCustomer.size() &gt; 0){
			def wListConfirmEmptyRate = new ArrayList()
			wListConfirmEmptyRate.add("W")
			wListConfirmEmptyRate.add("CUSTOMER_CONFIRM_EMPTY_RATES")
			wListConfirmEmptyRate.add(null)
			wListConfirmEmptyRate.add(issueWarningEmptyQuoteRateCustomer)

			wList.add(wListConfirmEmptyRate)
		}

		if(issueWarningEmptyQuoteMatCustomer.size() &gt; 0){
			def wListConfirmEmptyMatQuote = new ArrayList()
			wListConfirmEmptyMatQuote.add("W")
			wListConfirmEmptyMatQuote.add("CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE")
			wListConfirmEmptyMatQuote.add(null)
			wListConfirmEmptyMatQuote.add(issueWarningEmptyQuoteMatCustomer)

			wList.add(wListConfirmEmptyMatQuote)
		}
		
		output.add(eList)
		output.add(wList)
        throw new InvalidInputException('{"WE":"' + output.toString() + '"}')
		//throw new InvalidInputException("WE", output.toString())  
	}
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">G╝здЩkр═чуMиsЪ5вй№Й╣эnя{N┌</arg>
              <arg name="FIELD_NOTES">OP: REST API: generate Offer attachment</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import org.apache.log4j.Category
import com.atlassian.jira.issue.link.IssueLink
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def requestMethod
def baseURL

def customer =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.customer'].toString())[0]
def templateId
int DBO = properties['ischema.dbo.id'].toString().toInteger()

/* Individuazione Template offerta da applicare */
/* Caso 1) esiste uno specifico template per il cliente selezionato --&gt; uso questo */
/* else --&gt; uso il template di default: AttachmentCategory = "Offerta Cliente" AND CUSTOMER_REF IS EMPTY AND DEFAULT=true
/*Rimozione allegato rapporto di intervento appena creato*/
/* Get Insight IQL Facade from plugin accessor */
Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade"); 
def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);

/* Get Insight Object Facade from plugin accessor */
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");
def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

/* Get Insight Object Type Facade from plugin accessor */
Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade");
def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);

/* Get Insight Object Attribute Facade from plugin accessor */
Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);

Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory");
def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);

def customerValue = issue.getCustomFieldValue(customer)[0].toString()
def customerKey = customerValue.substring(customerValue.indexOf('(')+1,customerValue.indexOf(')'))

def DOcustomerObjectRef = objectFacade.loadObjectAttributeBean(issue.getCustomFieldValue(customer)[0].getId(), properties['iobj.customer.customerRef'].toString()).getObjectAttributeValueBeans();
log.debug "DOcustomerObjectRef: " + DOcustomerObjectRef

def obTriage = objectFacade.loadObjectAttributeBean(DOcustomerObjectRef[0].getValue(), properties['iobj.contact.dbo.name'].toString()).createMutable()  
def customerName = obTriage.getObjectAttributeValueBeans()

/* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include " around value */
def objects = iqlFacade.findObjectsByIQLAndSchema(DBO, "\"" + (properties['iobj.attachmentCategory.attachmentCategory'] ? properties['iobj.attachmentCategory.attachmentCategory'].toString() : "ATTACHMENT_CATEGORY") + "\".\"" + properties['iobj.attachmentCategory.name'].toString() + "\" = \"" + (properties['iobj.attachmentCategory.objs.offCliente'] ? properties['iobj.attachmentCategory.objs.offCliente'].toString() : "Offerta Cliente") + "\" AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND CUSTOMER_REF IS NOT EMPTY AND CUSTOMER_REF.Name = \"" + customerName[0].getValue() + "\""); // See the complete list of possible IQL on the Insight Query Language documentation page
/* If this is a mandatory field you should be able to do this: */
log.info("Insight object: " + objects[0]);
log.debug "\"" + (properties['iobj.attachmentCategory.attachmentCategory'] ? properties['iobj.attachmentCategory.attachmentCategory'].toString() : "ATTACHMENT_CATEGORY") + "\".\"" + properties['iobj.attachmentCategory.name'].toString() + "\" = \"" + (properties['iobj.attachmentCategory.objs.offCliente'] ? properties['iobj.attachmentCategory.objs.offCliente'].toString() : "Offerta Cliente") + "\" AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND CUSTOMER_REF IS NOT EMPTY AND CUSTOMER_REF.Name = \"" + customerName[0].getValue() + "\""

if(!objects[0]){
    /*Nessun file individuato per il cliente - cerco template generico */
    objects = iqlFacade.findObjectsByIQLAndSchema(DBO, "\"" + (properties['iobj.attachmentCategory.attachmentCategory'] ? properties['iobj.attachmentCategory.attachmentCategory'].toString() : "ATTACHMENT_CATEGORY") + "\".\"" + properties['iobj.attachmentCategory.name'].toString() + "\" = \"" + (properties['iobj.attachmentCategory.objs.offCliente'] ? properties['iobj.attachmentCategory.objs.offCliente'].toString() : "Offerta Cliente") + "\" AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND CUSTOMER_REF IS EMPTY AND DEFAULT=true"); // See the complete list of possible IQL on the Insight Query Language documentation page
    /* If this is a mandatory field you should be able to do this: */
    log.info("Insight object: " + objects[0]);
    log.debug "\"" + (properties['iobj.attachmentCategory.attachmentCategory'] ? properties['iobj.attachmentCategory.attachmentCategory'].toString() : "ATTACHMENT_CATEGORY") + "\".\"" + properties['iobj.attachmentCategory.name'].toString() + "\" = \"" + (properties['iobj.attachmentCategory.objs.offCliente'] ? properties['iobj.attachmentCategory.objs.offCliente'].toString() : "Offerta Cliente") + "\" AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND CUSTOMER_REF IS EMPTY AND DEFAULT=true"
}

if(objects[0]){
    log.debug "template da usare: " + objects[0].getId()
    templateId=objects[0].getId()
}

/* REST API per Generazione Allegato Consuntivo */
requestMethod = "PUT";

baseURL = "http://" + properties['api.env'].toString() + "/op/rest/automation/ticket/" + issue.key.toString() + "/attachment/generic?templateId=" + templateId + "&amp;type=PDF&amp;attachmentCustomField=" + properties['cf.offerAttachmentRef'].toString()

log.debug "baseUrl: " + baseURL

URL url
url = new URL(baseURL)
HttpURLConnection connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.connect();

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()
    eListErrors.add("E")
    eListErrors.add("GENERATE-ACCOUNTINGREPORT")
    errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
    eListErrors.add(errorMsgs)
    eList.add(eListErrors)

    output.add(eList)
    throw new InvalidInputException('{"E":"' + output.toString() + '"}')
    //throw new InvalidInputException("E", output.toString())
}
</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="10">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22693</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="301" name="Genera Offerta - Word" view="fieldscreen">
          <meta name="opsbar-sequence">30</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">19926</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">ó·=Ûw¹m¾[áî·Ów}oÇóÞ¸÷9Ýÿ[ïÞ{</arg>
              <arg name="FIELD_NOTES">OP: Check Required Fields</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper
import groovy.json.JsonBuilder
import groovy.json.StreamingJsonBuilder

import com.atlassian.jira.issue.CustomFieldManager
import com.atlassian.jira.issue.fields.CustomField
import com.atlassian.jira.issue.IssueManager
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.issue.link.IssueLink

import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.issue.index.IssueIndexingService

import org.apache.log4j.Category
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)
 
Issue issue = issue
//Per test da console
//IssueManager issueManager = ComponentAccessor.getIssueManager();
//issue = issueManager.getIssueByKeyIgnoreCase("AAS-2761")

def errors = false
def warnings = false
def relatesInIssueLink=false
def relatesOutIssueLink=false
def wListConfirmEmptyMatQuoteLinked = new ArrayList()
def wListConfirmEmptyRateQuoteLinked = new ArrayList()

/*Campi con dati obbligatori per ticket non a corpo*/
def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteMaterials'].toString())[0]
def labourRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteLabourRates'].toString())[0]

/*Conferma utente su warnings*/
def transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]
def transitionCheckValue = issue.getCustomFieldValue(transitionCheck)

/*Insight Schema IDs*/
def DBObjects = properties['ischema.dbo'].toString() + "-"
def OPAA = properties['ischema.aa'].toString() + "-"

/*Array warnings ed errors per la issue principale, uno per ogni tipologia di errore o warning*/
def issueWarningEmptyQuoteMatCustomer = new ArrayList()
def issueWarningEmptyQuoteRateCustomer = new ArrayList()

/*Verifica campi su ticket oggetto della transazione*/
//OP_QUOTE_MATERIALS
if(issue.getCustomFieldValue(repMaterials)!=null &amp;&amp; (String)issue.getCustomFieldValue(repMaterials) != "" &amp;&amp; !issue.getCustomFieldValue(repMaterials).toString().equals("")){
    //log.debug "Materiali: " + issue.getCustomFieldValue(repMaterials)
    /*Ciclare tutti gli oggetti associati al campo*/
    //insight classes &amp; components
    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

    def repMatList = issue.getCustomFieldValue(repMaterials)

    for(mat in repMatList){
        //extract insight key ang get object
        def component=mat.toString()
        //def componentKey = component.substring(component.indexOf('(')+1,component.indexOf(')'))
        def componentKey = component.substring(component.indexOf('('+OPAA)+1,component.length()-1)
        def componentObject = objectFacade.loadObjectBean(componentKey)

        //get "APPLIED_TO" for that component
        def appliedTo = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString()).getObjectAttributeValueBeans() as ArrayList
        def appliedToValue
        if(appliedTo.size() &gt; 0){
            appliedTo = appliedTo.toString()
            appliedToValue = appliedTo.substring(appliedTo.indexOf('(')+1,appliedTo.indexOf(')'))
            //log.debug "appliedToValue: " + appliedToValue
        }
        //get "DELETED" for that rate
        def deleted
        def deletedValue
        if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString())){
            deleted = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString()).getObjectAttributeValueBeans().toString()
            log.debug "deleted: " + deleted
            if (deleted){
                deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
            }
        }

        def matNumber
        def matNumberKey
        def matNumberValue
        if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString())){
            matNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).getObjectAttributeValueBeans() as ArrayList
            if(matNumber.size() &gt; 0){
                matNumber = matNumber.toString()
                matNumberKey = matNumber.substring(matNumber.indexOf('(')+1,matNumber.indexOf(')'))
                def matNumberObject = objectFacade.loadObjectBean(DBObjects + matNumberKey)
                matNumberValue = objectFacade.loadObjectAttributeBean(matNumberObject.getId(), properties['iobj.material.name'].toString()).getObjectAttributeValueBeans().toString()
                matNumberValue = matNumberValue.substring(matNumberValue.indexOf('(')+1,matNumberValue.indexOf(')'))
            }
        }

        def serialNumber
        def serialNumberValue
        if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString())){
            serialNumber = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.serialNumber'].toString()).getObjectAttributeValueBeans() as ArrayList
            if(serialNumber.size() &gt; 0){
                serialNumber = serialNumber.toString()
                serialNumberValue = serialNumber.substring(serialNumber.indexOf('(')+1,serialNumber.indexOf(')'))
            }  
        }				

        if((appliedToValue.toString().equals("BOTH") || appliedToValue.toString().equals("CUSTOMER")) &amp;&amp; !deletedValue.toString().equals("true")){
            //get "TOTAL_AMOUNT_CUSTOMER" for that component
            def totCustomer 
            if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString())){
                totCustomer = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()).getObjectAttributeValueBeans()
            }
            if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                warnings=true
                issueWarningEmptyQuoteMatCustomer.add(matNumberValue.toString() + ((!serialNumber.toString().equals("null") &amp;&amp; !serialNumber.toString().equals("[]")) ? " (" + serialNumberValue.toString() + ")" : ""))   
                log.debug issue.key.toString() + " issueWarningEmptyQuoteMatCustomer: " + issueWarningEmptyQuoteMatCustomer
            }
        }
    }    
}  

//OP_QUOTE_LABOUR_RATES
if(issue.getCustomFieldValue(labourRates)!=null &amp;&amp; (String)issue.getCustomFieldValue(labourRates) != "" &amp;&amp; !issue.getCustomFieldValue(labourRates).toString().equals("")){
    log.debug "Labour rates: " + issue.getCustomFieldValue(labourRates)
    /*Ciclare tutti gli oggetti associati al campo*/
    //insight classes &amp; components
    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

    def labourRatesList = issue.getCustomFieldValue(labourRates)

    for(lb in labourRatesList){
        //extract insight key ang get object
        def lbRate=lb.toString()
        def lbRateKey = lbRate.substring(lbRate.indexOf('(')+1,lbRate.indexOf(')'))
        def lbRateObject = objectFacade.loadObjectBean(lbRateKey)
        //get "APPLIED_TO" for that rate
        def lbAppliedTo = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.component.appliedTo'].toString()).getObjectAttributeValueBeans().toString()
        def lbAppliedToValue = lbAppliedTo.substring(lbAppliedTo.indexOf('(')+1,lbAppliedTo.indexOf(')'))
        //get "DELETED" for that rate
        def deleted
        def deletedValue
        if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.component.deleted'].toString())){
            deleted = objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.component.deleted'].toString()).getObjectAttributeValueBeans().toString()
            log.debug "deleted: " + deleted
            if (deleted){
                deletedValue = deleted.substring(deleted.indexOf('(')+1,deleted.indexOf(')'))
            }
        }

        def lbRateRef
        if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString())){
            lbRateRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).getObjectAttributeValueBeans().toString()
        }
        log.debug "lbRateRef: " + lbRateRef

        def techRef
        if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.technicianRef'].toString())){
            techRef=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.technicianRef'].toString()).getObjectAttributeValueBeans().toString()
        }

        def lbRateRefKey
        def lbRateRefValue
        if(lbRateRef &amp;&amp; lbRateRef.size() &gt; 0){
            lbRateRef = lbRateRef.toString()
            lbRateRefKey = lbRateRef.substring(lbRateRef.indexOf('(')+1,lbRateRef.indexOf(')'))
            def lbRateRefObject = objectFacade.loadObjectBean(OPAA + lbRateRefKey)
            lbRateRefValue = objectFacade.loadObjectAttributeBean(lbRateRefObject.getId(), properties['iobj.rate.Name'].toString()).getObjectAttributeValueBeans().toString()
            lbRateRefValue = lbRateRefValue.substring(lbRateRefValue.indexOf('(')+1,lbRateRefValue.indexOf(')'))
        }

        def techRefKey
        def techRefValue
        if(techRef){
            techRef = techRef.toString()
            log.debug "techRef: " + techRef
            techRefKey = techRef.substring(techRef.indexOf('(')+1,techRef.indexOf(')'))
            def techRefObject = objectFacade.loadObjectBean(OPAA + techRefKey)
            techRefValue = objectFacade.loadObjectAttributeBean(techRefObject.getId(), properties['iobj.technician.name'].toString()).getObjectAttributeValueBeans().toString()
            if(techRefValue){
                techRefValue = techRefValue.substring(techRefValue.indexOf('(')+1,techRefValue.indexOf(')'))
            }
        }

        if((lbAppliedToValue.toString().equals("BOTH") || lbAppliedToValue.toString().equals("CUSTOMER")) &amp;&amp; !deletedValue.toString().equals("true")){
            //get "TOTAL_AMOUNT_CUSTOMER" for that component
            def totCustomer
            if(objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString())){
                totCustomer=objectFacade.loadObjectAttributeBean(lbRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString()).getObjectAttributeValueBeans()
            }
            if(!totCustomer || totCustomer[0].getValue().toString().equals("0.0")){
                warnings=true
                issueWarningEmptyQuoteRateCustomer.add(lbRateRefValue.toString())
                log.debug issue.key.toString() + " issueWarningEmptyQuoteRateCustomer: " + issueWarningEmptyQuoteRateCustomer
            }
        }
    }    
}

def output = new ArrayList()

if (!errors &amp;&amp; !warnings){
	return true
}else{
	if(!errors &amp;&amp; warnings){
		//Se ci sono solo warnings verifico se l'utente ha già dichiarato di voler proseguire comunque
		// - transition field "OPAA_CHECK_AND_CONFIRM"="Yes"
		// - in caso contrario invio i warning a FE

		log.debug "transitionCheck: " + issue.getCustomFieldValue(transitionCheck)
		//log.debug "result: " + issue.getCustomFieldValue(transitionCheck).toString().equals("Yes")
		if(transitionCheckValue.toString().equals("Yes")){
			log.debug "return true - transitionCheck = Yes"
			return true
		}else{
			def wList = new ArrayList()

			if(issueWarningEmptyQuoteRateCustomer.size() &gt; 0){
				def wListConfirmEmptyRate = new ArrayList()
				wListConfirmEmptyRate.add("W")
				wListConfirmEmptyRate.add("CUSTOMER_CONFIRM_EMPTY_RATES")
				wListConfirmEmptyRate.add(null)
				wListConfirmEmptyRate.add(issueWarningEmptyQuoteRateCustomer)

				wList.add(wListConfirmEmptyRate)
			}

			if(issueWarningEmptyQuoteMatCustomer.size() &gt; 0){
				def wListConfirmEmptyMatQuote = new ArrayList()
				wListConfirmEmptyMatQuote.add("W")
				wListConfirmEmptyMatQuote.add("CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE")
				wListConfirmEmptyMatQuote.add(null)
				wListConfirmEmptyMatQuote.add(issueWarningEmptyQuoteMatCustomer)

				wList.add(wListConfirmEmptyMatQuote)
			}

			output.add(wList)
            throw new InvalidInputException('{"W":"' + output.toString() + '"}')
			//throw new InvalidInputException("W", output.toString())   
		}

	}
	if(errors &amp;&amp; !warnings){
		def eList = new ArrayList()

		output.add(eList)
        throw new InvalidInputException('{"E":"' + output.toString() + '"}')
		//throw new InvalidInputException("E", output.toString())   
	}
	if(errors &amp;&amp; warnings){
		def eList = new ArrayList()
		def wList = new ArrayList()

		if(issueWarningEmptyQuoteRateCustomer.size() &gt; 0){
			def wListConfirmEmptyRate = new ArrayList()
			wListConfirmEmptyRate.add("W")
			wListConfirmEmptyRate.add("CUSTOMER_CONFIRM_EMPTY_RATES")
			wListConfirmEmptyRate.add(null)
			wListConfirmEmptyRate.add(issueWarningEmptyQuoteRateCustomer)

			wList.add(wListConfirmEmptyRate)
		}

		if(issueWarningEmptyQuoteMatCustomer.size() &gt; 0){
			def wListConfirmEmptyMatQuote = new ArrayList()
			wListConfirmEmptyMatQuote.add("W")
			wListConfirmEmptyMatQuote.add("CUSTOMER_CONFIRM_EMPTY_MAT_QUOTE")
			wListConfirmEmptyMatQuote.add(null)
			wListConfirmEmptyMatQuote.add(issueWarningEmptyQuoteMatCustomer)

			wList.add(wListConfirmEmptyMatQuote)
		}
		
		output.add(eList)
		output.add(wList)
        throw new InvalidInputException('{"WE":"' + output.toString() + '"}')
		//throw new InvalidInputException("WE", output.toString())  
	}
}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">—зyгЊїйёьVынЊy}ЊєбЁZџЯ”я{п}</arg>
              <arg name="FIELD_NOTES">OP: REST API: generate Offer attachment - Word</arg>
              <arg name="FIELD_INLINE_SCRIPT">import groovy.json.JsonSlurper;
import groovy.json.StreamingJsonBuilder;
import com.atlassian.jira.issue.CustomFieldManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.IssueManager;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.MutableIssue
import org.apache.commons.codec.binary.Base64;
import com.opensymphony.workflow.InvalidInputException
import org.apache.log4j.Category
import com.atlassian.jira.issue.link.IssueLink
import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

IssueManager issueManager = ComponentAccessor.getIssueManager();
//Issue issue = issueManager.getIssueByKeyIgnoreCase("AAS-2762")

CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();
def requestMethod
def baseURL

def customer =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.customer'].toString())[0]
def templateId
int DBO = properties['ischema.dbo.id'].toString().toInteger()

/* Individuazione Template offerta da applicare */
/* Caso 1) esiste uno specifico template per il cliente selezionato --&gt; uso questo */
/* else --&gt; uso il template di default: AttachmentCategory = "Offerta Cliente" AND CUSTOMER_REF IS EMPTY AND DEFAULT=true
/*Rimozione allegato rapporto di intervento appena creato*/
/* Get Insight IQL Facade from plugin accessor */
Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade"); 
def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);

/* Get Insight Object Facade from plugin accessor */
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");
def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

/* Get Insight Object Type Facade from plugin accessor */
Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade");
def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);

/* Get Insight Object Attribute Facade from plugin accessor */
Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);

Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory");
def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);

def customerValue = issue.getCustomFieldValue(customer)[0].toString()
def customerKey = customerValue.substring(customerValue.indexOf('(')+1,customerValue.indexOf(')'))

def DOcustomerObjectRef = objectFacade.loadObjectAttributeBean(issue.getCustomFieldValue(customer)[0].getId(), properties['iobj.customer.customerRef'].toString()).getObjectAttributeValueBeans();
log.debug "DOcustomerObjectRef: " + DOcustomerObjectRef

def obTriage = objectFacade.loadObjectAttributeBean(DOcustomerObjectRef[0].getValue(), properties['iobj.contact.dbo.name'].toString()).createMutable()  
def customerName = obTriage.getObjectAttributeValueBeans()

/* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include " around value */
def objects = iqlFacade.findObjectsByIQLAndSchema(DBO, "\"" + (properties['iobj.attachmentCategory.attachmentCategory'] ? properties['iobj.attachmentCategory.attachmentCategory'].toString() : "ATTACHMENT_CATEGORY") + "\".\"" + properties['iobj.attachmentCategory.name'].toString() + "\" = \"" + (properties['iobj.attachmentCategory.objs.offCliente'] ? properties['iobj.attachmentCategory.objs.offCliente'].toString() : "Offerta Cliente") + "\" AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND CUSTOMER_REF IS NOT EMPTY AND CUSTOMER_REF.Name = \"" + customerName[0].getValue() + "\""); // See the complete list of possible IQL on the Insight Query Language documentation page
/* If this is a mandatory field you should be able to do this: */
log.info("Insight object: " + objects[0]);
log.debug "\"" + (properties['iobj.attachmentCategory.attachmentCategory'] ? properties['iobj.attachmentCategory.attachmentCategory'].toString() : "ATTACHMENT_CATEGORY") + "\".\"" + properties['iobj.attachmentCategory.name'].toString() + "\" = \"" + (properties['iobj.attachmentCategory.objs.offCliente'] ? properties['iobj.attachmentCategory.objs.offCliente'].toString() : "Offerta Cliente") + "\" AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND CUSTOMER_REF IS NOT EMPTY AND CUSTOMER_REF.Name = \"" + customerName[0].getValue() + "\""

if(!objects[0]){
    /*Nessun file individuato per il cliente - cerco template generico */
    objects = iqlFacade.findObjectsByIQLAndSchema(DBO, "\"" + (properties['iobj.attachmentCategory.attachmentCategory'] ? properties['iobj.attachmentCategory.attachmentCategory'].toString() : "ATTACHMENT_CATEGORY") + "\".\"" + properties['iobj.attachmentCategory.name'].toString() + "\" = \"" + (properties['iobj.attachmentCategory.objs.offCliente'] ? properties['iobj.attachmentCategory.objs.offCliente'].toString() : "Offerta Cliente") + "\" AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND CUSTOMER_REF IS EMPTY AND DEFAULT=true"); // See the complete list of possible IQL on the Insight Query Language documentation page
    /* If this is a mandatory field you should be able to do this: */
    log.info("Insight object: " + objects[0]);
    log.debug "\"" + (properties['iobj.attachmentCategory.attachmentCategory'] ? properties['iobj.attachmentCategory.attachmentCategory'].toString() : "ATTACHMENT_CATEGORY") + "\".\"" + properties['iobj.attachmentCategory.name'].toString() + "\" = \"" + (properties['iobj.attachmentCategory.objs.offCliente'] ? properties['iobj.attachmentCategory.objs.offCliente'].toString() : "Offerta Cliente") + "\" AND " + properties['iobj.attachmentCategory.deleted'].toString() + "!=true AND CUSTOMER_REF IS EMPTY AND DEFAULT=true"
}

if(objects[0]){
    log.debug "template da usare: " + objects[0].getId()
    templateId=objects[0].getId()
}


/* REST API per Generazione Allegato Consuntivo */
requestMethod = "PUT";

baseURL = "http://" + properties['api.env'].toString() + "/op/rest/automation/ticket/" + issue.key.toString() + "/attachment/generic?templateId=" + templateId + "&amp;type=Word&amp;attachmentCustomField=" + properties['cf.offerAttachmentRef'].toString()

log.debug "baseUrl: " + baseURL

URL url
url = new URL(baseURL)
HttpURLConnection connection = (HttpURLConnection)url.openConnection();
connection.setRequestMethod(requestMethod);
connection.setRequestProperty("Content-Type", "application/json");
connection.setRequestProperty("Accept", "*/*");
connection.setDoOutput(true);
connection.setDoInput(true);
connection.connect();

def output = new ArrayList()
def eList = new ArrayList()
def eListErrors = new ArrayList()
def errorMsgs = new ArrayList()

if (!connection.getResponseCode().toString().equals("200")){
    log.debug "url: " + url
    log.debug "ResponseCode:" + connection.getResponseCode()
    log.debug "ResponseMessage:" + connection.getResponseMessage()
    eListErrors.add("E")
    eListErrors.add("GENERATE-ACCOUNTINGREPORT")
    errorMsgs.add(connection.getResponseCode() + " " + connection.getResponseMessage())
    eListErrors.add(errorMsgs)
    eList.add(eListErrors)

    output.add(eList)
    throw new InvalidInputException('{"E":"' + output.toString() + '"}')
    //throw new InvalidInputException("E", output.toString())
}
</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE" />
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="10">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22693</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="721" name="Riapri Preventivo Fornitore">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <results>
            <unconditional-result old-status="žée" status="žée" step="9">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="11" name="Waiting for Customer Feedback">
      <meta name="jira.status.id">14334</meta>
      <actions>
        <action id="311" name="Offerta Accettata da Cliente">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <results>
            <unconditional-result old-status="žée" status="žée" step="12">
              <post-functions>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="диюбwbХ*'">¶»ž</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue" />
                  <arg name="fieldValue">Yes</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">customfield_22681</arg>
                </function>
                <function type="class">
                  <arg name="field.copyFieldSource2" />
                  <arg name="field.copyFieldSource1">customfield_22683</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="field.createTargetValue1" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyFieldMode1">OVERWRITE</arg>
                  <arg name="field.copyFieldDestination1">customfield_22635</arg>
                  <arg name="field.copyFieldSeparator1" />
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescopyValueFromOtherField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">M</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.CopyValueFromOtherFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">38100fbf-8abd-4951-82c2-3defd3481f99</arg>
                  <arg name="FIELD_NOTES">OP: Calculate OFFER_CUSTOMER_TOTAL_AMOUNT, OFFER_SUPPLIER_TOTAL_AMOUNT + _MATERIAL e _LABOUR</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport com.atlassian.jira.issue.IssueManager\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport groovy.json.JsonSlurper\nimport groovy.json.StreamingJsonBuilder\nimport com.atlassian.jira.config.util.JiraHome\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport java.text.SimpleDateFormat\nimport java.text.ParseException\nimport java.text.DecimalFormat\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.IssueChangeHolder\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\n\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\ndef Category log = Category.getInstance(\"com.onresolve.jira.groovy.PostFunction\")\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\n/*Script Variables*/\n//Per Post Function\nissue = issue\n//Per test da console\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\n//issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-3382\")\n\n/*Insight classes &amp; components*/\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\nobjectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\nobjectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n/* Get Insight IQL Facade from plugin accessor */\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \niqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\");\nobjectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\n/* Get Insight Object Type Facade from plugin accessor */\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \nobjectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\n\n/*COSTANTI*/\nOPAA=properties['ischema.aa.id']\n//Attribute IDs\nRATE_TOTAL_AMOUNT_SUPPLIER=properties['iobj.onSiteRateReport.totSupp.id']\nRATE_TOTAL_AMOUNT_CUSTOMER=properties['iobj.onSiteRateReport.totCust.id']\nCOMPONENT_TOTAL_AMOUNT_SUPPLIER=properties['iobj.component.totSupp.id']\nCOMPONENT_TOTAL_AMOUNT_CUSTOMER=properties['iobj.component.totCust.id']\n//ObjType IDs\nONSITE_RATE_REPORT=properties['iobj.onSiteRateReport']\nCOMPONENT=properties['iobj.component']\n\n/*Customfields*/\ndef CustOfferTot =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.customerOfferTotAmount'].toString())[0]\ndef SuppOfferTot =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplierOfferTotAmount'].toString())[0]\n\ndef CustOfferMatTot =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.customerOfferMaterials'].toString())[0]\ndef SuppOfferMatTot =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplierOfferMaterials'].toString())[0]\ndef CustOfferLabTot =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.customerOfferLabour'].toString())[0]\ndef SuppOfferLabTot =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplierOfferLabour'].toString())[0]\n\ndef repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteMaterials'].toString())[0]\ndef labourRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteLabourRates'].toString())[0]\n\ndef mi = (MutableIssue) issue\ndef currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n\n/*Variables*/\ndef customerOfferTot, supplierOfferTot\ndouble totAmountSupplier = 0\ndouble totAmountCustomer = 0\ndef repMatList = issue.getCustomFieldValue(repMaterials)\ndef labourRatesList = issue.getCustomFieldValue(labourRates)\n\ndef totCustMat = 0\ndef totCustLab = 0\ndef totSuppMat = 0\ndef totSuppLab= 0\n\nfor(mat in repMatList){\n    //extract insight key and get object\n    def component=mat.toString()\n    def componentKey = component.substring(component.indexOf('(')+1,component.indexOf(')'))\n    def componentObject = objectFacade.loadObjectBean(componentKey)\n\n    //MATERIAL_REF\n    obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).createMutable()\n    def material = obTriage.getObjectAttributeValueBeans()\n    \n    //DELETED\n    def deleted\n    if (objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString())){\n        obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString()).createMutable()\n    \tdeleted = obTriage.getObjectAttributeValueBeans()\n        deleted = deleted[0].getValue()\n    }\n    \n    //TOTAL_AMOUNT_SUPPLIER\n    if((deleted==null || deleted!=true) &amp;&amp; objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString())){\n        obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString()).createMutable()\n        def totSupplier = obTriage.getObjectAttributeValueBeans()\n        totAmountSupplier = totAmountSupplier + totSupplier[0].getValue().toDouble()\n        totSuppMat = totSuppMat + totSupplier[0].getValue().toDouble()\n    }\n    \n    //TOTAL_AMOUNT_CUSTOMER\n    if(deleted==null || deleted!=true){\n        obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()).createMutable()\n        def totCustomer = obTriage.getObjectAttributeValueBeans()\n        totAmountCustomer = totAmountCustomer + totCustomer[0].getValue().toDouble()\n        totCustMat = totCustMat + totCustomer[0].getValue().toDouble()\n    }\n        \n    if (material!=null &amp;&amp; (deleted==null || deleted!=true)){ \n        /*Verifico se si tratta di un materiale SAP o NO SAP*/\n        material = material.toString()\n        materialKey = material.substring(material.indexOf('(')+1,material.indexOf(')'))\n\n        /*MATERIAL - SAP*/\n        obTriage = objectFacade.loadObjectAttributeBean(materialKey.toInteger(), properties['iobj.material.sap'].toString()).createMutable()\n        sap = obTriage.getObjectAttributeValueBeans()\n\n        /*MATERIAL - MATNR*/\n        obTriage = objectFacade.loadObjectAttributeBean(materialKey.toInteger(), properties['iobj.material.matnr'].toString()).createMutable()\n        matnr = obTriage.getObjectAttributeValueBeans()\n\n        if(sap!=null &amp;&amp; matnr!=null){\n            matnr=matnr.toString()\n            matnr = matnr.substring(matnr.indexOf('(')+1,matnr.indexOf(')'))\n            sap=sap.toString()\n            sap = sap.substring(sap.indexOf('(')+1,sap.indexOf(')'))\n\n            if(sap.equalsIgnoreCase(\"true\")){\n                log.debug \"Materiale sap: \" + sap\n            }else{\n                log.debug \"Materiale NON sap: \" + sap\n            }\n        }\n\n    }\n}\n\nfor(rate in labourRatesList){\n    //extract insight key and get object\n    def labRate=rate.toString()\n    def labRateKey = labRate.substring(labRate.indexOf('(')+1,labRate.indexOf(')'))\n    def labRateObject = objectFacade.loadObjectBean(labRateKey)\n\n    //MATERIAL_REF\n    obTriage = objectFacade.loadObjectAttributeBean(labRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).createMutable()\n    def rateDesc = obTriage.getObjectAttributeValueBeans()\n    \n    //DELETED\n    def deleted\n    if (objectFacade.loadObjectAttributeBean(labRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString())){\n        obTriage = objectFacade.loadObjectAttributeBean(labRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).createMutable()\n    \tdeleted = obTriage.getObjectAttributeValueBeans()\n        deleted = deleted[0].getValue()\n    }\n    \n    //TOTAL_AMOUNT_SUPPLIER\n    if(deleted==null || deleted!=true){\n        obTriage = objectFacade.loadObjectAttributeBean(labRateObject.getId(), properties['iboj.onSiteRateReport.totSupplier'].toString()).createMutable()\n        def totSupplier = obTriage.getObjectAttributeValueBeans()\n        totAmountSupplier = totAmountSupplier + totSupplier[0].getValue().toDouble()\n        totSuppLab = totSuppLab + totSupplier[0].getValue().toDouble()\n    }\n    \n    //TOTAL_AMOUNT_CUSTOMER\n    if(deleted==null || deleted!=true){\n        obTriage = objectFacade.loadObjectAttributeBean(labRateObject.getId(), properties['iboj.onSiteRateReport.totCustomer'].toString()).createMutable()\n        def totCustomer = obTriage.getObjectAttributeValueBeans()\n        totAmountCustomer = totAmountCustomer + totCustomer[0].getValue().toDouble()\n        totCustLab = totCustLab + totCustomer[0].getValue().toDouble()\n    }\n}\n\n\n\nlog.debug \"TOTALE OFFERTA FORNITORE: \" + new DecimalFormat(\"#.##\").format(totAmountSupplier)\nlog.debug \"TOTALE OFFERTA CLIENTE: \" + new DecimalFormat(\"#.##\").format(totAmountCustomer)\n\nIssueChangeHolder changeHolder = new DefaultIssueChangeHolder()\nCustOfferTot.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(CustOfferTot),totAmountCustomer),changeHolder)\nSuppOfferTot.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(SuppOfferTot),totAmountSupplier),changeHolder)\n\nCustOfferMatTot.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(CustOfferMatTot),totCustMat),changeHolder)\nSuppOfferMatTot.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(SuppOfferMatTot),totSuppMat),changeHolder)\nCustOfferLabTot.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(CustOfferLabTot),totCustLab),changeHolder)\nSuppOfferLabTot.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(SuppOfferLabTot),totSuppLab),changeHolder)\n\n            \n","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.IssueManager
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import groovy.json.JsonSlurper
import groovy.json.StreamingJsonBuilder
import com.atlassian.jira.config.util.JiraHome
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import java.text.SimpleDateFormat
import java.text.ParseException
import java.text.DecimalFormat
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.util.IssueChangeHolder
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder

import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

/*Script Variables*/
//Per Post Function
issue = issue
//Per test da console
//IssueManager issueManager = ComponentAccessor.getIssueManager()
//issue = issueManager.getIssueByKeyIgnoreCase("OPUT-3382")

/*Insight classes &amp; components*/
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);
/* Get Insight IQL Facade from plugin accessor */
Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade"); 
iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);
Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory");
objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);
/* Get Insight Object Type Facade from plugin accessor */
Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade"); 
objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);

/*COSTANTI*/
OPAA=properties['ischema.aa.id']
//Attribute IDs
RATE_TOTAL_AMOUNT_SUPPLIER=properties['iobj.onSiteRateReport.totSupp.id']
RATE_TOTAL_AMOUNT_CUSTOMER=properties['iobj.onSiteRateReport.totCust.id']
COMPONENT_TOTAL_AMOUNT_SUPPLIER=properties['iobj.component.totSupp.id']
COMPONENT_TOTAL_AMOUNT_CUSTOMER=properties['iobj.component.totCust.id']
//ObjType IDs
ONSITE_RATE_REPORT=properties['iobj.onSiteRateReport']
COMPONENT=properties['iobj.component']

/*Customfields*/
def CustOfferTot =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.customerOfferTotAmount'].toString())[0]
def SuppOfferTot =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplierOfferTotAmount'].toString())[0]

def CustOfferMatTot =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.customerOfferMaterials'].toString())[0]
def SuppOfferMatTot =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplierOfferMaterials'].toString())[0]
def CustOfferLabTot =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.customerOfferLabour'].toString())[0]
def SuppOfferLabTot =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplierOfferLabour'].toString())[0]

def repMaterials =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteMaterials'].toString())[0]
def labourRates =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteLabourRates'].toString())[0]

def mi = (MutableIssue) issue
def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()

/*Variables*/
def customerOfferTot, supplierOfferTot
double totAmountSupplier = 0
double totAmountCustomer = 0
def repMatList = issue.getCustomFieldValue(repMaterials)
def labourRatesList = issue.getCustomFieldValue(labourRates)

def totCustMat = 0
def totCustLab = 0
def totSuppMat = 0
def totSuppLab= 0

for(mat in repMatList){
    //extract insight key and get object
    def component=mat.toString()
    def componentKey = component.substring(component.indexOf('(')+1,component.indexOf(')'))
    def componentObject = objectFacade.loadObjectBean(componentKey)

    //MATERIAL_REF
    obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).createMutable()
    def material = obTriage.getObjectAttributeValueBeans()
    
    //DELETED
    def deleted
    if (objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString())){
        obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString()).createMutable()
    	deleted = obTriage.getObjectAttributeValueBeans()
        deleted = deleted[0].getValue()
    }
    
    //TOTAL_AMOUNT_SUPPLIER
    if(deleted==null || deleted!=true){
        obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString()).createMutable()
        def totSupplier = obTriage.getObjectAttributeValueBeans()
        totAmountSupplier = totAmountSupplier + totSupplier[0].getValue().toDouble()
        totSuppMat = totSuppMat + totSupplier[0].getValue().toDouble()
    }
    
    //TOTAL_AMOUNT_CUSTOMER
    if(deleted==null || deleted!=true){
        obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()).createMutable()
        def totCustomer = obTriage.getObjectAttributeValueBeans()
        totAmountCustomer = totAmountCustomer + totCustomer[0].getValue().toDouble()
        totCustMat = totCustMat + totCustomer[0].getValue().toDouble()
    }
        
    if (material!=null &amp;&amp; (deleted==null || deleted!=true)){ 
        /*Verifico se si tratta di un materiale SAP o NO SAP*/
        material = material.toString()
        materialKey = material.substring(material.indexOf('(')+1,material.indexOf(')'))

        /*MATERIAL - SAP*/
        obTriage = objectFacade.loadObjectAttributeBean(materialKey.toInteger(), properties['iobj.material.sap'].toString()).createMutable()
        sap = obTriage.getObjectAttributeValueBeans()

        /*MATERIAL - MATNR*/
        obTriage = objectFacade.loadObjectAttributeBean(materialKey.toInteger(), properties['iobj.material.matnr'].toString()).createMutable()
        matnr = obTriage.getObjectAttributeValueBeans()

        if(sap!=null &amp;&amp; matnr!=null){
            matnr=matnr.toString()
            matnr = matnr.substring(matnr.indexOf('(')+1,matnr.indexOf(')'))
            sap=sap.toString()
            sap = sap.substring(sap.indexOf('(')+1,sap.indexOf(')'))

            if(sap.equalsIgnoreCase("true")){
                log.debug "Materiale sap: " + sap
            }else{
                log.debug "Materiale NON sap: " + sap
            }
        }

    }
}

for(rate in labourRatesList){
    //extract insight key and get object
    def labRate=rate.toString()
    def labRateKey = labRate.substring(labRate.indexOf('(')+1,labRate.indexOf(')'))
    def labRateObject = objectFacade.loadObjectBean(labRateKey)

    //MATERIAL_REF
    obTriage = objectFacade.loadObjectAttributeBean(labRateObject.getId(), properties['iobj.onSiteRateReport.rateRef'].toString()).createMutable()
    def rateDesc = obTriage.getObjectAttributeValueBeans()
    
    //DELETED
    def deleted
    if (objectFacade.loadObjectAttributeBean(labRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString())){
        obTriage = objectFacade.loadObjectAttributeBean(labRateObject.getId(), properties['iobj.onSiteRateReport.deleted'].toString()).createMutable()
    	deleted = obTriage.getObjectAttributeValueBeans()
        deleted = deleted[0].getValue()
    }
    
    //TOTAL_AMOUNT_SUPPLIER
    if(deleted==null || deleted!=true){
        obTriage = objectFacade.loadObjectAttributeBean(labRateObject.getId(), properties['iobj.onSiteRateReport.totSupplier'].toString()).createMutable()
        def totSupplier = obTriage.getObjectAttributeValueBeans()
        totAmountSupplier = totAmountSupplier + totSupplier[0].getValue().toDouble()
        totSuppLab = totSuppLab + totSupplier[0].getValue().toDouble()
    }
    
    //TOTAL_AMOUNT_CUSTOMER
    if(deleted==null || deleted!=true){
        obTriage = objectFacade.loadObjectAttributeBean(labRateObject.getId(), properties['iobj.onSiteRateReport.totCustomer'].toString()).createMutable()
        def totCustomer = obTriage.getObjectAttributeValueBeans()
        totAmountCustomer = totAmountCustomer + totCustomer[0].getValue().toDouble()
        totCustLab = totCustLab + totCustomer[0].getValue().toDouble()
    }
}



log.debug "TOTALE OFFERTA FORNITORE: " + new DecimalFormat("#.##").format(totAmountSupplier)
log.debug "TOTALE OFFERTA CLIENTE: " + new DecimalFormat("#.##").format(totAmountCustomer)

IssueChangeHolder changeHolder = new DefaultIssueChangeHolder()
CustOfferTot.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(CustOfferTot),totAmountCustomer),changeHolder)
SuppOfferTot.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(SuppOfferTot),totAmountSupplier),changeHolder)

CustOfferMatTot.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(CustOfferMatTot),totCustMat),changeHolder)
SuppOfferMatTot.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(SuppOfferMatTot),totSuppMat),changeHolder)
CustOfferLabTot.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(CustOfferLabTot),totCustLab),changeHolder)
SuppOfferLabTot.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(SuppOfferLabTot),totSuppLab),changeHolder)

            
</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">f66a5f06-1465-410f-b85d-1622703520c0</arg>
                  <arg name="FIELD_NOTES">OP: Generate Components &amp; populate OPAA_REPLACED_MATERIALS</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport com.atlassian.jira.issue.IssueManager\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport groovy.json.JsonSlurper\nimport groovy.json.StreamingJsonBuilder\nimport com.atlassian.jira.config.util.JiraHome\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport java.text.SimpleDateFormat\nimport java.text.ParseException\nimport java.text.DecimalFormat\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.util.IssueChangeHolder\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\n\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\n/*Script Variables*/\n//Per Post Function\nissue = issue\n//Per test da console\n//IssueManager issueManager = ComponentAccessor.getIssueManager()\n//issue = issueManager.getIssueByKeyIgnoreCase(\"AAS-4064\")\n\n/*Insight classes &amp; components*/\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\nobjectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\nobjectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n/* Get Insight IQL Facade from plugin accessor */\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \niqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\");\nobjectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\n/* Get Insight Object Type Facade from plugin accessor */\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\"); \nobjectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\n\ndef DBO=properties['ischema.dbo.id'].toString().toInteger()\ndef OPAA=properties['ischema.aa.id'].toString().toInteger()\n//Attribute IDs\ndef RATE_TOTAL_AMOUNT_SUPPLIER=properties['iboj.onSiteRateReport.totSupplier.id'].toString().toInteger()\ndef RATE_TOTAL_AMOUNT_CUSTOMER=properties['iboj.onSiteRateReport.totCustomer.id'].toString().toInteger()\ndef COMPONENT_TOTAL_AMOUNT_SUPPLIER=properties['iobj.component.totSupp.id'].toString().toInteger()\ndef COMPONENT_TOTAL_AMOUNT_CUSTOMER=properties['iobj.component.totCust.id'].toString().toInteger()\n\ndef COMPONENT_NAME=properties['iobj.component.name.id'].toString().toInteger()\ndef COMPONENT_HARDWARE_REF=properties['iobj.component.hardwareRef.id'].toString().toInteger()\ndef COMPONENT_SAP=properties['iobj.component.sap.id'].toString().toInteger()\ndef COMPONENT_SUPPLIED_BY_FAAC=properties['iobj.component.suppliedByFaac.id'].toString().toInteger()\ndef COMPONENT_QUANTITY=properties['iobj.component.quantity.id'].toString().toInteger()\ndef COMPONENT_QUOTE_REQUIRED=properties['iobj.component.quoteRequired.id'].toString().toInteger()\ndef COMPONENT_SUPPLIER_QUOTE_TO_FAAC=properties['iobj.component.supplierQuote.id'].toString().toInteger()\ndef COMPONENT_FAAC_QUOTE_TO_CUSTOMER=properties['iobj.component.customerQuote.id'].toString().toInteger()\ndef COMPONENT_APPLIED_TO=properties['iobj.component.appliedTo.id'].toString().toInteger()\ndef COMPONENT_MATERIAL_REF=properties['iobj.component.materialRef.id'].toString().toInteger()\ndef COMPONENT_ACCOUNTING_SUPPLIER_MATERIAL_REF=properties['iobj.component.accountingSuppMatRef.id'].toString().toInteger()\ndef COMPONENT_ACCOUNTING_CUSTOMER_MATERIAL_REF=properties['iobj.component.accountingCustMatRef.id'].toString().toInteger()\ndef COMPONENT_FROM_QUOTE_TKT=properties['iobj.component.fromQuoteTkt.id'].toString().toInteger()\ndef COMPONENT_DELETED=properties['iobj.component.deleted.id'].toString().toInteger()\n    \n//ObjType IDs\ndef COMPONENT=properties['iobj.component'].toString().toInteger()\n\n\n/*Customfields*/\ndef quoteRepMaterials = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteMaterials'].toString())[0]\ndef repMaterials = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.replacedMaterials'].toString())[0]\n\ndef mi = (MutableIssue) issue\ndef currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n\n/*Variables*/\ndef repMatList = issue.getCustomFieldValue(quoteRepMaterials)\ndef objList = new ArrayList()\n\nfor(mat in repMatList){\n\t//extract insight key and get object\n    def component=mat.toString()\n    def componentKey = component.substring(component.indexOf('(')+1,component.indexOf(')'))\n    def componentObject = objectFacade.loadObjectBean(componentKey)\n    \n    log.debug \"componentObject: \" + componentObject\n    obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString()) ? objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString()).createMutable() : null\n\tdef del = obTriage ? obTriage.getObjectAttributeValueBeans() : null\n\tdel= del ? del[0].getValue() : false\n    log.debug \"deleted: \" + del\n    \n    if(!del){\n        def newObjAttributesList = new ArrayList()\n        def i = 0\n\n        def objectTypeComponent = objectTypeFacade.loadObjectTypeBean(COMPONENT);\n        /* Create a new unsaved object bean */\n        def newObjectBean = objectTypeComponent.createObjectBean();\n\n        /* Set up the attribute list */\n        def objectAttributeBeans = new ArrayList();\n\n        /* Set the name of the Component */\n        /*Nome Component*/\n        obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.name'].toString()).createMutable()\n        def compName = obTriage.getObjectAttributeValueBeans()\n        compName=compName[0].getValue()\n        log.debug \"object name: \" + compName\n        def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_NAME); // The ID of the object type attribute \"Name\"\n        def nameObjectAttributeBean = newObjectBean.createObjectAttributeBean(nameObjectTypeAttributeBean); // This is the name object attribute for the new object\n        def nameObjectAttributeValueBean = nameObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute\n        nameObjectAttributeValueBean.setTextValueShort(compName); // Set the name\n\n        def values = nameObjectAttributeBean.getObjectAttributeValueBeans(); \n        values.add(nameObjectAttributeValueBean); // Add the value to the object attribute\n        log.debug values\n        nameObjectAttributeBean.setObjectAttributeValueBeans(values); \n        objectAttributeBeans.add(nameObjectAttributeBean);\n\n        /* Set the HARDWARE_REF of the new obj */\n        obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.hardwareRef'].toString()).createMutable()\n        def hw = obTriage.getObjectAttributeValueBeans()\n        hwKey=hw[0].getValue()    \n        def HwRefObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_HARDWARE_REF); // The ID for the referenced object type\n        HwRefObjectAttributeBean = newObjectBean.createObjectAttributeBean(HwRefObjectTypeAttributeBean); \n        HwRefObjectAttributeValueBean = HwRefObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute\n        HwRefObjectAttributeValueBean.setReferencedObjectBeanId(hwKey); // Set the ID\n\n        values = HwRefObjectAttributeBean.getObjectAttributeValueBeans(); \n        values.add(HwRefObjectAttributeValueBean); // Add the value to the object attribute\n        log.debug values\n        HwRefObjectAttributeBean.setObjectAttributeValueBeans(values); \n\n        objectAttributeBeans.add(HwRefObjectAttributeBean); // Add to the list of object attributes\n\n        /* Set the COMPONENT_SAP flag of the Hardware */\n        obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.sap'].toString()).createMutable()\n        def sap = obTriage.getObjectAttributeValueBeans()\n        sap=sap[0].getValue()\n        def compSapObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_SAP); // The ID of the object type attribute \"DISABLED\"\n        def compSapObjectAttributeBean = newObjectBean.createObjectAttributeBean(compSapObjectTypeAttributeBean); // This is the name object attribute for the new object\n        def compSapObjectAttributeValueBean = compSapObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute\n        compSapObjectAttributeValueBean.setBooleanValue(sap); // Set the name\n\n        values = compSapObjectAttributeBean.getObjectAttributeValueBeans(); \n        values.add(compSapObjectAttributeValueBean); // Add the value to the object attribute\n        log.debug values\n        compSapObjectAttributeBean.setObjectAttributeValueBeans(values); \n        objectAttributeBeans.add(compSapObjectAttributeBean);\n\n        /* Set the DELETED flag of the Hardware */\n        def deleted \n        if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString())){\n            obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString()).createMutable()\n            deleted = obTriage.getObjectAttributeValueBeans()\n            deleted=deleted[0].getValue()\n        }\n        if(deleted!=null){\n            def deletedObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_DELETED); // The ID of the object type attribute \"DISABLED\"\n            def deletedObjectAttributeBean = newObjectBean.createObjectAttributeBean(deletedObjectTypeAttributeBean); // This is the name object attribute for the new object\n            def deletedObjectAttributeValueBean = deletedObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute\n            deletedObjectAttributeValueBean.setBooleanValue(deleted); // Set the name\n\n            values = deletedObjectAttributeBean.getObjectAttributeValueBeans(); \n            values.add(deletedObjectAttributeValueBean); // Add the value to the object attribute\n            log.debug values\n            deletedObjectAttributeBean.setObjectAttributeValueBeans(values); \n            objectAttributeBeans.add(deletedObjectAttributeBean);\n        }\n\n        /*Nome COMPONENT_QUANTITY*/\n        obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.quantity'].toString()).createMutable()\n        def qta = obTriage.getObjectAttributeValueBeans()\n        qta=qta[0].getValue()\n        def qtaObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_QUANTITY); // The ID of the object type attribute \"DISABLED\"\n        def qtaObjectAttributeBean = newObjectBean.createObjectAttributeBean(qtaObjectTypeAttributeBean); // This is the name object attribute for the new object\n        def qtaObjectAttributeValueBean = qtaObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute\n        qtaObjectAttributeValueBean.setDoubleValue(qta); // Set the name\n\n        values = qtaObjectAttributeBean.getObjectAttributeValueBeans(); \n        values.add(qtaObjectAttributeValueBean); // Add the value to the object attribute\n        log.debug values\n        qtaObjectAttributeBean.setObjectAttributeValueBeans(values); \n        objectAttributeBeans.add(qtaObjectAttributeBean);\n\n        /*Nome COMPONENT_QUOTE_REQUIRED*/\n        obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.quoteRequired'].toString()).createMutable()\n        def quoteReq = obTriage.getObjectAttributeValueBeans()\n        quoteReq=quoteReq[0].getValue()\n        def quoteReqObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_QUOTE_REQUIRED); // The ID of the object type attribute \"DISABLED\"\n        def quoteReqObjectAttributeBean = newObjectBean.createObjectAttributeBean(quoteReqObjectTypeAttributeBean); // This is the name object attribute for the new object\n        def quoteReqObjectAttributeValueBean = quoteReqObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute\n        quoteReqObjectAttributeValueBean.setBooleanValue(quoteReq); // Set the name\n\n        values = quoteReqObjectAttributeBean.getObjectAttributeValueBeans(); \n        values.add(quoteReqObjectAttributeValueBean); // Add the value to the object attribute\n        log.debug values\n        quoteReqObjectAttributeBean.setObjectAttributeValueBeans(values); \n        objectAttributeBeans.add(quoteReqObjectAttributeBean);\n\n        /*Nome COMPONENT_SUPPLIER_QUOTE_TO_FAAC*/\n        if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.suppQuote'].toString())){\n            obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.suppQuote'].toString()).createMutable()\n            def suppQuote = obTriage.getObjectAttributeValueBeans()\n            suppQuote=suppQuote[0].getValue()\n            def suppQuoteObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_SUPPLIER_QUOTE_TO_FAAC); // The ID of the object type attribute \"DISABLED\"\n            def suppQuoteObjectAttributeBean = newObjectBean.createObjectAttributeBean(suppQuoteObjectTypeAttributeBean); // This is the name object attribute for the new object\n            def suppQuoteObjectAttributeValueBean = suppQuoteObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute\n            suppQuoteObjectAttributeValueBean.setDoubleValue(suppQuote); // Set the name\n\n            values = suppQuoteObjectAttributeBean.getObjectAttributeValueBeans(); \n            values.add(suppQuoteObjectAttributeValueBean); // Add the value to the object attribute\n            log.debug values\n            suppQuoteObjectAttributeBean.setObjectAttributeValueBeans(values); \n            objectAttributeBeans.add(suppQuoteObjectAttributeBean);\n        }\n       \n        /*Nome COMPONENT_FAAC_QUOTE_TO_CUSTOMER*/\n        if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.custQuote'].toString())){\n            obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.custQuote'].toString()).createMutable()\n            def custQuote = obTriage.getObjectAttributeValueBeans()\n            custQuote=custQuote[0].getValue()\n            def custQuoteObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_FAAC_QUOTE_TO_CUSTOMER); // The ID of the object type attribute \"DISABLED\"\n            def custQuoteObjectAttributeBean = newObjectBean.createObjectAttributeBean(custQuoteObjectTypeAttributeBean); // This is the name object attribute for the new object\n            def custQuoteObjectAttributeValueBean = custQuoteObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute\n            custQuoteObjectAttributeValueBean.setDoubleValue(custQuote); // Set the name\n\n            values = custQuoteObjectAttributeBean.getObjectAttributeValueBeans(); \n            values.add(custQuoteObjectAttributeValueBean); // Add the value to the object attribute\n            log.debug values\n            custQuoteObjectAttributeBean.setObjectAttributeValueBeans(values); \n            objectAttributeBeans.add(custQuoteObjectAttributeBean);\n        }\n        \n        /*Nome COMPONENT_APPLIED_TO*/\n        obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString()).createMutable()\n        def appliedTo = obTriage.getObjectAttributeValueBeans()\n        appliedTo=appliedTo[0].getValue()\n        def appliedToObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_APPLIED_TO); // The ID of the object type attribute \"DISABLED\"\n        def appliedToObjectAttributeBean = newObjectBean.createObjectAttributeBean(appliedToObjectTypeAttributeBean); // This is the name object attribute for the new object\n        def appliedToObjectAttributeValueBean = appliedToObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute\n        appliedToObjectAttributeValueBean.setTextValue(appliedTo); // Set the name\n\n        values = appliedToObjectAttributeBean.getObjectAttributeValueBeans(); \n        values.add(appliedToObjectAttributeValueBean); // Add the value to the object attribute\n        log.debug values\n        appliedToObjectAttributeBean.setObjectAttributeValueBeans(values); \n        objectAttributeBeans.add(appliedToObjectAttributeBean);\n\n\n        /*Nome COMPONENT_TOTAL_AMOUNT_SUPPLIER*/\n        if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString())){\n            obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString()).createMutable()\n            def totSupp = obTriage.getObjectAttributeValueBeans()\n            totSupp=totSupp[0].getValue()\n            def totSuppObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_TOTAL_AMOUNT_SUPPLIER); // The ID of the object type attribute \"DISABLED\"\n            def totSuppObjectAttributeBean = newObjectBean.createObjectAttributeBean(totSuppObjectTypeAttributeBean); // This is the name object attribute for the new object\n            def totSuppObjectAttributeValueBean = totSuppObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute\n            totSuppObjectAttributeValueBean.setDoubleValue(totSupp); // Set the name\n\n            values = totSuppObjectAttributeBean.getObjectAttributeValueBeans(); \n            values.add(totSuppObjectAttributeValueBean); // Add the value to the object attribute\n            log.debug values\n            totSuppObjectAttributeBean.setObjectAttributeValueBeans(values); \n            objectAttributeBeans.add(totSuppObjectAttributeBean);\n        }\n        \n        /*Nome COMPONENT_TOTAL_AMOUNT_CUSTOMER*/\n        obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()).createMutable()\n        def totCust = obTriage.getObjectAttributeValueBeans()\n        totCust=totCust[0].getValue()\n        def totCustObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_TOTAL_AMOUNT_CUSTOMER); // The ID of the object type attribute \"DISABLED\"\n        def totCustObjectAttributeBean = newObjectBean.createObjectAttributeBean(totCustObjectTypeAttributeBean); // This is the name object attribute for the new object\n        def totCustObjectAttributeValueBean = totCustObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute\n        totCustObjectAttributeValueBean.setDoubleValue(totCust); // Set the name\n\n        values = totCustObjectAttributeBean.getObjectAttributeValueBeans(); \n        values.add(totCustObjectAttributeValueBean); // Add the value to the object attribute\n        log.debug values\n        totCustObjectAttributeBean.setObjectAttributeValueBeans(values); \n        objectAttributeBeans.add(totCustObjectAttributeBean);\n\n        /*Nome COMPONENT_MATERIAL_REF*/\n        obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).createMutable()\n        def material = obTriage.getObjectAttributeValueBeans()\n        material=material[0].getValue()\n        def matRefObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_MATERIAL_REF); // The ID for the referenced object type\n        matRefObjectAttributeBean = newObjectBean.createObjectAttributeBean(matRefObjectTypeAttributeBean); \n        matRefObjectAttributeValueBean = matRefObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute\n        matRefObjectAttributeValueBean.setReferencedObjectBeanId(material); // Set the ID\n\n        values = matRefObjectAttributeBean.getObjectAttributeValueBeans(); \n        values.add(matRefObjectAttributeValueBean); // Add the value to the object attribute\n        log.debug values\n        matRefObjectAttributeBean.setObjectAttributeValueBeans(values); \n\n        objectAttributeBeans.add(matRefObjectAttributeBean); // Add to the list of object attributes\n\n\n        def materialSAP       \n        if (material!=null){\n            /*MATERIAL - SAP*/\n            obTriage = objectFacade.loadObjectAttributeBean(material.toInteger(), properties['iobj.material.sap'].toString()).createMutable()\n            materialSAP = obTriage.getObjectAttributeValueBeans()\n            materialSAP = materialSAP[0].getValue()\n            log.debug \"materialSAP: \" + materialSAP\n        }\n\n        /*Nome COMPONENT_SUPPLIED_BY_FAAC*/\n        def suppliedObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_SUPPLIED_BY_FAAC); // The ID of the object type attribute \"DISABLED\"\n        def suppliedObjectAttributeBean = newObjectBean.createObjectAttributeBean(suppliedObjectTypeAttributeBean); // This is the name object attribute for the new object\n        def suppliedObjectAttributeValueBean = suppliedObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute\n        if(materialSAP==true){\n            suppliedObjectAttributeValueBean.setTextValue(\"Yes\"); // Set the name\n        }else{\n            suppliedObjectAttributeValueBean.setTextValue(\"No\"); // Set the name\n        }\n\n        values = suppliedObjectAttributeBean.getObjectAttributeValueBeans(); \n        values.add(suppliedObjectAttributeValueBean); // Add the value to the object attribute\n        log.debug values\n        suppliedObjectAttributeBean.setObjectAttributeValueBeans(values); \n        objectAttributeBeans.add(suppliedObjectAttributeBean);\n\n        /*Nome ACCOUNTING_SUPPLIER_MATERIAL_REF*/\n        if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingSuppMaterial'].toString())){\n            obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingSuppMaterial'].toString()).createMutable()\n            def accMatSupp = obTriage.getObjectAttributeValueBeans()\n            accMatSupp=accMatSupp[0].getValue()\n            def accountingCustRefObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_ACCOUNTING_SUPPLIER_MATERIAL_REF); // The ID for the referenced object type\n            accountingCustRefObjectAttributeBean = newObjectBean.createObjectAttributeBean(accountingCustRefObjectTypeAttributeBean); \n            accountingCustRefObjectAttributeValueBean = accountingCustRefObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute\n            accountingCustRefObjectAttributeValueBean.setReferencedObjectBeanId(accMatSupp); // Set the ID\n\n            values = accountingCustRefObjectAttributeBean.getObjectAttributeValueBeans(); \n            values.add(accountingCustRefObjectAttributeValueBean); // Add the value to the object attribute\n            log.debug values\n            accountingCustRefObjectAttributeBean.setObjectAttributeValueBeans(values); \n\n            objectAttributeBeans.add(accountingCustRefObjectAttributeBean); // Add to the list of object attributes\n\n        }\n        \n        /*Nome COMPONENT_ACCOUNTING_CUSTOMER_MATERIAL_REF*/\n        if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingCustMaterial'].toString())){\n            obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingCustMaterial'].toString()).createMutable()\n            def accMatCust = obTriage.getObjectAttributeValueBeans()\n            accMatCust=accMatCust[0].getValue()\n            def accMatCustObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_ACCOUNTING_CUSTOMER_MATERIAL_REF); // The ID for the referenced object type\n            accMatCustObjectAttributeBean = newObjectBean.createObjectAttributeBean(accMatCustObjectTypeAttributeBean); \n            accMatCustObjectAttributeValueBean = accMatCustObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute\n            accMatCustObjectAttributeValueBean.setReferencedObjectBeanId(accMatCust); // Set the ID\n\n            values = accMatCustObjectAttributeBean.getObjectAttributeValueBeans(); \n            values.add(accMatCustObjectAttributeValueBean); // Add the value to the object attribute\n            log.debug values\n            accMatCustObjectAttributeBean.setObjectAttributeValueBeans(values); \n\n            objectAttributeBeans.add(accMatCustObjectAttributeBean); // Add to the list of object attributes\n\n        }\n        \n        /*Nome COMPONENT_FROM_QUOTE_TKT*/\n        def fromQuoteObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_FROM_QUOTE_TKT); // The ID of the object type attribute \"DISABLED\"\n        def fromQuoteObjectAttributeBean = newObjectBean.createObjectAttributeBean(fromQuoteObjectTypeAttributeBean); // This is the name object attribute for the new object\n        def fromQuoteObjectAttributeValueBean = fromQuoteObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute\n        if(materialSAP==true){\n            fromQuoteObjectAttributeValueBean.setBooleanValue(true); // Set the name\n        }else{\n            fromQuoteObjectAttributeValueBean.setBooleanValue(false); // Set the name\n        }\n\n        values = fromQuoteObjectAttributeBean.getObjectAttributeValueBeans(); \n        values.add(fromQuoteObjectAttributeValueBean); // Add the value to the object attribute\n        log.debug values\n        fromQuoteObjectAttributeBean.setObjectAttributeValueBeans(values); \n        objectAttributeBeans.add(fromQuoteObjectAttributeBean);\n\n        log.debug \"objectAttributeBeans: \" + objectAttributeBeans\n        /* Set all object attributes to the object */\n        newObjectBean.setObjectAttributeBeans(objectAttributeBeans);\n\n        try {\n            newObjectBean = objectFacade.storeObjectBean(newObjectBean);\n            objList.add(newObjectBean)\n            log.debug(\"newObjectBean: \" + newObjectBean);\n        } catch (Exception vie) {\n            log.warn(\"Could not create issue due to validation exception:\" + vie.getMessage());\n        }\n    }\n    \n    \n    \n    \n}\n\nmi.setCustomFieldValue(repMaterials, objList);\nComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n          ","scriptPath":null,"parameters":{}}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">import com.atlassian.jira.issue.Issue
import com.opensymphony.workflow.InvalidInputException
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.IssueManager
import org.apache.log4j.Category
import groovy.json.JsonBuilder
import groovy.json.JsonSlurper
import groovy.json.StreamingJsonBuilder
import com.atlassian.jira.config.util.JiraHome
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.event.type.EventDispatchOption
import java.text.SimpleDateFormat
import java.text.ParseException
import java.text.DecimalFormat
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.util.IssueChangeHolder
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder

import com.onresolve.scriptrunner.runner.ScriptRunner
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl

Properties properties = new Properties()
File propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
def Category log = Category.getInstance("com.onresolve.jira.groovy.PostFunction")
log.setLevel(org.apache.log4j.Level.DEBUG)

/*Script Variables*/
//Per Post Function
issue = issue
//Per test da console
//IssueManager issueManager = ComponentAccessor.getIssueManager()
//issue = issueManager.getIssueByKeyIgnoreCase("OPUT-3382")

/*Insight classes &amp; components*/
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade");  
Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade");
objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);
/* Get Insight IQL Facade from plugin accessor */
Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade"); 
iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);
Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory");
objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);
/* Get Insight Object Type Facade from plugin accessor */
Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass("com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade"); 
objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);

def DBO=properties['ischema.dbo.id'].toString().toInteger()
def OPAA=properties['ischema.aa.id'].toString().toInteger()
//Attribute IDs
def RATE_TOTAL_AMOUNT_SUPPLIER=properties['iboj.onSiteRateReport.totSupplier.id'].toString().toInteger()
def RATE_TOTAL_AMOUNT_CUSTOMER=properties['iboj.onSiteRateReport.totCustomer.id'].toString().toInteger()
def COMPONENT_TOTAL_AMOUNT_SUPPLIER=properties['iobj.component.totSupp.id'].toString().toInteger()
def COMPONENT_TOTAL_AMOUNT_CUSTOMER=properties['iobj.component.totCust.id'].toString().toInteger()

def COMPONENT_NAME=properties['iobj.component.name.id'].toString().toInteger()
def COMPONENT_HARDWARE_REF=properties['iobj.component.hardwareRef.id'].toString().toInteger()
def COMPONENT_SAP=properties['iobj.component.sap.id'].toString().toInteger()
def COMPONENT_SUPPLIED_BY_FAAC=properties['iobj.component.suppliedByFaac.id'].toString().toInteger()
def COMPONENT_QUANTITY=properties['iobj.component.quantity.id'].toString().toInteger()
def COMPONENT_QUOTE_REQUIRED=properties['iobj.component.quoteRequired.id'].toString().toInteger()
def COMPONENT_SUPPLIER_QUOTE_TO_FAAC=properties['iobj.component.supplierQuote.id'].toString().toInteger()
def COMPONENT_FAAC_QUOTE_TO_CUSTOMER=properties['iobj.component.customerQuote'].toString().toInteger()
def COMPONENT_APPLIED_TO=properties['iobj.component.appliedTo'].toString().toInteger()
def COMPONENT_MATERIAL_REF=properties['iobj.component.materialRef.id'].toString().toInteger()
def COMPONENT_ACCOUNTING_SUPPLIER_MATERIAL_REF=properties['iobj.component.accountingSuppMatRef.id'].toString().toInteger()
def COMPONENT_ACCOUNTING_CUSTOMER_MATERIAL_REF=properties['iobj.component.accountingCustMatRef.id'].toString().toInteger()
def COMPONENT_FROM_QUOTE_TKT=properties['iobj.component.fromQuoteTkt.id'].toString().toInteger()
def COMPONENT_DELETED=properties['iobj.component.deleted.id'].toString().toInteger()
    
//ObjType IDs
def COMPONENT=properties['iobj.component'].toString().toInteger()


/*Customfields*/
def quoteRepMaterials = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteMaterials'].toString())[0]
def repMaterials = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.replacedMaterials'].toString())[0]

def mi = (MutableIssue) issue
def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()

/*Variables*/
def repMatList = issue.getCustomFieldValue(quoteRepMaterials)
def objList = new ArrayList()

for(mat in repMatList){
	//extract insight key and get object
    def component=mat.toString()
    def componentKey = component.substring(component.indexOf('(')+1,component.indexOf(')'))
    def componentObject = objectFacade.loadObjectBean(componentKey)
    
    def newObjAttributesList = new ArrayList()
    def i = 0
    
    def objectTypeComponent = objectTypeFacade.loadObjectTypeBean(COMPONENT);
    /* Create a new unsaved object bean */
    def newObjectBean = objectTypeComponent.createObjectBean();

    /* Set up the attribute list */
    def objectAttributeBeans = new ArrayList();

    /* Set the name of the Component */
    /*Nome Component*/
    obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.name'].toString()).createMutable()
	def compName = obTriage.getObjectAttributeValueBeans()
	compName=compName[0].getValue()
    log.debug "object name: " + compName
    def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_NAME); // The ID of the object type attribute "Name"
    def nameObjectAttributeBean = newObjectBean.createObjectAttributeBean(nameObjectTypeAttributeBean); // This is the name object attribute for the new object
    def nameObjectAttributeValueBean = nameObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
    nameObjectAttributeValueBean.setTextValueShort(compName); // Set the name

    def values = nameObjectAttributeBean.getObjectAttributeValueBeans(); 
    values.add(nameObjectAttributeValueBean); // Add the value to the object attribute
	log.debug values
    nameObjectAttributeBean.setObjectAttributeValueBeans(values); 
	objectAttributeBeans.add(nameObjectAttributeBean);
    
    /* Set the HARDWARE_REF of the new obj */
    obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.hardwareRef'].toString()).createMutable()
	def hw = obTriage.getObjectAttributeValueBeans()
	hwKey=hw[0].getValue()    
    def HwRefObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_HARDWARE_REF); // The ID for the referenced object type
    HwRefObjectAttributeBean = newObjectBean.createObjectAttributeBean(HwRefObjectTypeAttributeBean); 
    HwRefObjectAttributeValueBean = HwRefObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
    HwRefObjectAttributeValueBean.setReferencedObjectBeanId(hwKey); // Set the ID

    values = HwRefObjectAttributeBean.getObjectAttributeValueBeans(); 
    values.add(HwRefObjectAttributeValueBean); // Add the value to the object attribute
	log.debug values
    HwRefObjectAttributeBean.setObjectAttributeValueBeans(values); 

    objectAttributeBeans.add(HwRefObjectAttributeBean); // Add to the list of object attributes

    /* Set the COMPONENT_SAP flag of the Hardware */
    obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.sap'].toString()).createMutable()
	def sap = obTriage.getObjectAttributeValueBeans()
	sap=sap[0].getValue()
    def compSapObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_SAP); // The ID of the object type attribute "DISABLED"
    def compSapObjectAttributeBean = newObjectBean.createObjectAttributeBean(compSapObjectTypeAttributeBean); // This is the name object attribute for the new object
    def compSapObjectAttributeValueBean = compSapObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
    compSapObjectAttributeValueBean.setBooleanValue(sap); // Set the name

    values = compSapObjectAttributeBean.getObjectAttributeValueBeans(); 
    values.add(compSapObjectAttributeValueBean); // Add the value to the object attribute
	log.debug values
    compSapObjectAttributeBean.setObjectAttributeValueBeans(values); 
	objectAttributeBeans.add(compSapObjectAttributeBean);
    
    /* Set the DELETED flag of the Hardware */
    def deleted 
    if(objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString())){
        obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.deleted'].toString()).createMutable()
		deleted = obTriage.getObjectAttributeValueBeans()
        deleted=deleted[0].getValue()
    }
    if(deleted!=null){
        def deletedObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_DELETED); // The ID of the object type attribute "DISABLED"
        def deletedObjectAttributeBean = newObjectBean.createObjectAttributeBean(deletedObjectTypeAttributeBean); // This is the name object attribute for the new object
        def deletedObjectAttributeValueBean = deletedObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
        deletedObjectAttributeValueBean.setBooleanValue(deleted); // Set the name

        values = deletedObjectAttributeBean.getObjectAttributeValueBeans(); 
        values.add(deletedObjectAttributeValueBean); // Add the value to the object attribute
		log.debug values
        deletedObjectAttributeBean.setObjectAttributeValueBeans(values); 
        objectAttributeBeans.add(deletedObjectAttributeBean);
    }
         
    /*Nome COMPONENT_QUANTITY*/
    obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.quantity'].toString()).createMutable()
	def qta = obTriage.getObjectAttributeValueBeans()
	qta=qta[0].getValue()
    def qtaObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_QUANTITY); // The ID of the object type attribute "DISABLED"
    def qtaObjectAttributeBean = newObjectBean.createObjectAttributeBean(qtaObjectTypeAttributeBean); // This is the name object attribute for the new object
    def qtaObjectAttributeValueBean = qtaObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
    qtaObjectAttributeValueBean.setDoubleValue(qta); // Set the name

    values = qtaObjectAttributeBean.getObjectAttributeValueBeans(); 
    values.add(qtaObjectAttributeValueBean); // Add the value to the object attribute
	log.debug values
    qtaObjectAttributeBean.setObjectAttributeValueBeans(values); 
    objectAttributeBeans.add(qtaObjectAttributeBean);
    
	/*Nome COMPONENT_QUOTE_REQUIRED*/
    obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.quoteRequired'].toString()).createMutable()
	def quoteReq = obTriage.getObjectAttributeValueBeans()
	quoteReq=quoteReq[0].getValue()
    def quoteReqObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_QUOTE_REQUIRED); // The ID of the object type attribute "DISABLED"
    def quoteReqObjectAttributeBean = newObjectBean.createObjectAttributeBean(quoteReqObjectTypeAttributeBean); // This is the name object attribute for the new object
    def quoteReqObjectAttributeValueBean = quoteReqObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
    quoteReqObjectAttributeValueBean.setBooleanValue(quoteReq); // Set the name

    values = quoteReqObjectAttributeBean.getObjectAttributeValueBeans(); 
    values.add(quoteReqObjectAttributeValueBean); // Add the value to the object attribute
	log.debug values
    quoteReqObjectAttributeBean.setObjectAttributeValueBeans(values); 
    objectAttributeBeans.add(quoteReqObjectAttributeBean);
    
    /*Nome COMPONENT_SUPPLIER_QUOTE_TO_FAAC*/
    obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.suppQuote'].toString()).createMutable()
	def suppQuote = obTriage.getObjectAttributeValueBeans()
	suppQuote=suppQuote[0].getValue()
    def suppQuoteObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_SUPPLIER_QUOTE_TO_FAAC); // The ID of the object type attribute "DISABLED"
    def suppQuoteObjectAttributeBean = newObjectBean.createObjectAttributeBean(suppQuoteObjectTypeAttributeBean); // This is the name object attribute for the new object
    def suppQuoteObjectAttributeValueBean = suppQuoteObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
    suppQuoteObjectAttributeValueBean.setDoubleValue(suppQuote); // Set the name

    values = suppQuoteObjectAttributeBean.getObjectAttributeValueBeans(); 
    values.add(suppQuoteObjectAttributeValueBean); // Add the value to the object attribute
	log.debug values
    suppQuoteObjectAttributeBean.setObjectAttributeValueBeans(values); 
    objectAttributeBeans.add(suppQuoteObjectAttributeBean);
   	
	/*Nome COMPONENT_FAAC_QUOTE_TO_CUSTOMER*/
    obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.custQuote'].toString()).createMutable()
	def custQuote = obTriage.getObjectAttributeValueBeans()
	custQuote=custQuote[0].getValue()
    def custQuoteObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_FAAC_QUOTE_TO_CUSTOMER); // The ID of the object type attribute "DISABLED"
    def custQuoteObjectAttributeBean = newObjectBean.createObjectAttributeBean(custQuoteObjectTypeAttributeBean); // This is the name object attribute for the new object
    def custQuoteObjectAttributeValueBean = custQuoteObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
    custQuoteObjectAttributeValueBean.setDoubleValue(custQuote); // Set the name

    values = custQuoteObjectAttributeBean.getObjectAttributeValueBeans(); 
    values.add(custQuoteObjectAttributeValueBean); // Add the value to the object attribute
	log.debug values
    custQuoteObjectAttributeBean.setObjectAttributeValueBeans(values); 
   	objectAttributeBeans.add(custQuoteObjectAttributeBean);

	/*Nome COMPONENT_APPLIED_TO*/
    obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.appliedTo'].toString()).createMutable()
	def appliedTo = obTriage.getObjectAttributeValueBeans()
	appliedTo=appliedTo[0].getValue()
    def appliedToObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_APPLIED_TO); // The ID of the object type attribute "DISABLED"
    def appliedToObjectAttributeBean = newObjectBean.createObjectAttributeBean(appliedToObjectTypeAttributeBean); // This is the name object attribute for the new object
    def appliedToObjectAttributeValueBean = appliedToObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
    appliedToObjectAttributeValueBean.setTextValue(appliedTo); // Set the name

    values = appliedToObjectAttributeBean.getObjectAttributeValueBeans(); 
    values.add(appliedToObjectAttributeValueBean); // Add the value to the object attribute
	log.debug values
    appliedToObjectAttributeBean.setObjectAttributeValueBeans(values); 
    objectAttributeBeans.add(appliedToObjectAttributeBean);
	
    
	/*Nome COMPONENT_TOTAL_AMOUNT_SUPPLIER*/
    obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totSupp'].toString()).createMutable()
	def totSupp = obTriage.getObjectAttributeValueBeans()
	totSupp=totSupp[0].getValue()
    def totSuppObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_TOTAL_AMOUNT_SUPPLIER); // The ID of the object type attribute "DISABLED"
    def totSuppObjectAttributeBean = newObjectBean.createObjectAttributeBean(totSuppObjectTypeAttributeBean); // This is the name object attribute for the new object
    def totSuppObjectAttributeValueBean = totSuppObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
    totSuppObjectAttributeValueBean.setDoubleValue(totSupp); // Set the name

    values = totSuppObjectAttributeBean.getObjectAttributeValueBeans(); 
    values.add(totSuppObjectAttributeValueBean); // Add the value to the object attribute
	log.debug values
    totSuppObjectAttributeBean.setObjectAttributeValueBeans(values); 
    objectAttributeBeans.add(totSuppObjectAttributeBean);
	
	/*Nome COMPONENT_TOTAL_AMOUNT_CUSTOMER*/
    obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.totCust'].toString()).createMutable()
	def totCust = obTriage.getObjectAttributeValueBeans()
	totCust=totCust[0].getValue()
    def totCustObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_TOTAL_AMOUNT_CUSTOMER); // The ID of the object type attribute "DISABLED"
    def totCustObjectAttributeBean = newObjectBean.createObjectAttributeBean(totCustObjectTypeAttributeBean); // This is the name object attribute for the new object
    def totCustObjectAttributeValueBean = totCustObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
    totCustObjectAttributeValueBean.setDoubleValue(totCust); // Set the name

    values = totCustObjectAttributeBean.getObjectAttributeValueBeans(); 
    values.add(totCustObjectAttributeValueBean); // Add the value to the object attribute
	log.debug values
    totCustObjectAttributeBean.setObjectAttributeValueBeans(values); 
    objectAttributeBeans.add(totCustObjectAttributeBean);
 
	/*Nome COMPONENT_MATERIAL_REF*/
    obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.materialRef'].toString()).createMutable()
	def material = obTriage.getObjectAttributeValueBeans()
	material=material[0].getValue()
    def matRefObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_MATERIAL_REF); // The ID for the referenced object type
    matRefObjectAttributeBean = newObjectBean.createObjectAttributeBean(matRefObjectTypeAttributeBean); 
    matRefObjectAttributeValueBean = matRefObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
    matRefObjectAttributeValueBean.setReferencedObjectBeanId(material); // Set the ID

    values = matRefObjectAttributeBean.getObjectAttributeValueBeans(); 
    values.add(matRefObjectAttributeValueBean); // Add the value to the object attribute
	log.debug values
    matRefObjectAttributeBean.setObjectAttributeValueBeans(values); 

    objectAttributeBeans.add(matRefObjectAttributeBean); // Add to the list of object attributes
        
    
    def materialSAP       
	if (material!=null){
        /*MATERIAL - SAP*/
        obTriage = objectFacade.loadObjectAttributeBean(material.toInteger(), properties['iobj.material.sap'].toString()).createMutable()
        materialSAP = obTriage.getObjectAttributeValueBeans()
        materialSAP = materialSAP[0].getValue()
        log.debug "materialSAP: " + materialSAP
    }
            
	/*Nome COMPONENT_SUPPLIED_BY_FAAC*/
    def suppliedObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_SUPPLIED_BY_FAAC); // The ID of the object type attribute "DISABLED"
    def suppliedObjectAttributeBean = newObjectBean.createObjectAttributeBean(suppliedObjectTypeAttributeBean); // This is the name object attribute for the new object
    def suppliedObjectAttributeValueBean = suppliedObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
	if(materialSAP==true){
    	suppliedObjectAttributeValueBean.setTextValue("Yes"); // Set the name
    }else{
        suppliedObjectAttributeValueBean.setTextValue("No"); // Set the name
    }

    values = suppliedObjectAttributeBean.getObjectAttributeValueBeans(); 
    values.add(suppliedObjectAttributeValueBean); // Add the value to the object attribute
	log.debug values
    suppliedObjectAttributeBean.setObjectAttributeValueBeans(values); 
    objectAttributeBeans.add(suppliedObjectAttributeBean);
    
    /*Nome ACCOUNTING_SUPPLIER_MATERIAL_REF*/
    obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingSuppMaterial'].toString()).createMutable()
	def accMatSupp = obTriage.getObjectAttributeValueBeans()
	accMatSupp=accMatSupp[0].getValue()
    def accountingCustRefObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_ACCOUNTING_SUPPLIER_MATERIAL_REF); // The ID for the referenced object type
    accountingCustRefObjectAttributeBean = newObjectBean.createObjectAttributeBean(accountingCustRefObjectTypeAttributeBean); 
    accountingCustRefObjectAttributeValueBean = accountingCustRefObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
    accountingCustRefObjectAttributeValueBean.setReferencedObjectBeanId(accMatSupp); // Set the ID

    values = accountingCustRefObjectAttributeBean.getObjectAttributeValueBeans(); 
    values.add(accountingCustRefObjectAttributeValueBean); // Add the value to the object attribute
	log.debug values
    accountingCustRefObjectAttributeBean.setObjectAttributeValueBeans(values); 

    objectAttributeBeans.add(accountingCustRefObjectAttributeBean); // Add to the list of object attributes
    
	/*Nome COMPONENT_ACCOUNTING_CUSTOMER_MATERIAL_REF*/
    obTriage = objectFacade.loadObjectAttributeBean(componentObject.getId(), properties['iobj.component.accountingCustMaterial'].toString()).createMutable()
	def accMatCust = obTriage.getObjectAttributeValueBeans()
	accMatCust=accMatCust[0].getValue()
    def accMatCustObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_ACCOUNTING_CUSTOMER_MATERIAL_REF); // The ID for the referenced object type
    accMatCustObjectAttributeBean = newObjectBean.createObjectAttributeBean(accMatCustObjectTypeAttributeBean); 
    accMatCustObjectAttributeValueBean = accMatCustObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
    accMatCustObjectAttributeValueBean.setReferencedObjectBeanId(accMatCust); // Set the ID

    values = accMatCustObjectAttributeBean.getObjectAttributeValueBeans(); 
    values.add(accMatCustObjectAttributeValueBean); // Add the value to the object attribute
	log.debug values
    accMatCustObjectAttributeBean.setObjectAttributeValueBeans(values); 

    objectAttributeBeans.add(accMatCustObjectAttributeBean); // Add to the list of object attributes
        
	/*Nome COMPONENT_FROM_QUOTE_TKT*/
	def fromQuoteObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(COMPONENT_FROM_QUOTE_TKT); // The ID of the object type attribute "DISABLED"
    def fromQuoteObjectAttributeBean = newObjectBean.createObjectAttributeBean(fromQuoteObjectTypeAttributeBean); // This is the name object attribute for the new object
    def fromQuoteObjectAttributeValueBean = fromQuoteObjectAttributeBean.createObjectAttributeValueBean(); // This is the actual value of the attribute
    if(materialSAP==true){
        fromQuoteObjectAttributeValueBean.setBooleanValue(true); // Set the name
    }else{
        fromQuoteObjectAttributeValueBean.setBooleanValue(false); // Set the name
    }

    values = fromQuoteObjectAttributeBean.getObjectAttributeValueBeans(); 
    values.add(fromQuoteObjectAttributeValueBean); // Add the value to the object attribute
	log.debug values
    fromQuoteObjectAttributeBean.setObjectAttributeValueBeans(values); 
    objectAttributeBeans.add(fromQuoteObjectAttributeBean);
    
    log.debug "objectAttributeBeans: " + objectAttributeBeans
    /* Set all object attributes to the object */
    newObjectBean.setObjectAttributeBeans(objectAttributeBeans);

    try {
     	newObjectBean = objectFacade.storeObjectBean(newObjectBean);
        objList.add(newObjectBean)
     	log.debug("newObjectBean: " + newObjectBean);
    } catch (Exception vie) {
     	log.warn("Could not create issue due to validation exception:" + vie.getMessage());
    }
    
}

mi.setCustomFieldValue(repMaterials, objList);
ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
          </arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="321" name="Offerta Rifiutata da Cliente">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <results>
            <unconditional-result old-status="žée" status="žée" step="13">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="331" name="Richiesta Preventivo Scaduta">
          <meta name="opsbar-sequence">30</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <results>
            <unconditional-result old-status="žée" status="žée" step="14">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="781" name="Riapri Offerta">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <results>
            <unconditional-result old-status="žée" status="žée" step="10">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="12" name="Eê®·">
      <meta name="jira.status.id">14335</meta>
      <actions>
<common-action id="51" />
        <action id="641" name="Assegna a tecnici interni" view="fieldscreen">
          <meta name="opsbar-sequence">50</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20117</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">67d21477-5b8c-45a3-88f8-a691f3cb035f</arg>
                <arg name="FIELD_NOTES">OP_ASSET should be evaluated</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"cfValues['OP_ASSET'] != null","scriptPath":null}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">10786a5c-e2b3-4bea-a0d1-46f9012a73e2</arg>
              <arg name="FIELD_NOTES">OP: Check Customer Contract</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.sql.Timestamp\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\ndef warnings = false\ndef missingContract = false\ndef expiredContract = false\ndef errors = false\n\ndef installation =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.asset'].toString())[0]\ndef automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyAssigned'] ? properties['cf.automaticallyAssigned'].toString() : \"OP_AUTOMATICALLY_ASSIGNED\")[0]\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]\n\ndef warningEmptyFields = new ArrayList()\ndef errorMandatoryFields = new ArrayList()\n \n//OP_ASSET\nif(issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"No\")){\n    //Check CUSTOMER_CONTRACT_REF on OP_ASSET\n    \n    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n    def asset = issue.getCustomFieldValue(installation)\n    log.debug \"asset: \" + asset\n    asset=asset.toString()\n    def assetKey = asset.substring(asset.lastIndexOf('(')+1,asset.lastIndexOf(')'))\n    def assetObject = objectFacade.loadObjectBean(assetKey)\n\tlog.debug \"assetObject.getId(): \" + assetObject.getId()\n    def obTriage\n    def customerContract, customerContractAttr\n    customerContractAttr = properties['iobj.hardware.contract'] ? properties['iobj.hardware.contract'].toString() : \"CUSTOMER_CONTRACT_REF\"\n    if(objectFacade.loadObjectAttributeBean(assetObject.getId(), customerContractAttr)){\n        obTriage = objectFacade.loadObjectAttributeBean(assetObject.getId(), customerContractAttr).createMutable()\n        customerContract = obTriage.getObjectAttributeValueBeans().toString()\n    }\n\n    log.debug \"customerContract: \" + customerContract\n    \n    if(customerContract == null){\n        warnings = true\n        missingContract = true\n    }else{\n        //get \"QT_VALID_T\" for that Technician\n        def contract=customerContract.toString()\n        log.debug \"contract:\" + contract\n        def contractId = contract.substring(contract.lastIndexOf('(')+1,contract.lastIndexOf(')'))\n        log.debug \"contractId:\" + contractId\n        log.debug \"properties['iobj.contract.validTo']: \" + properties['iobj.contract.validTo']\n        def expiringDate, expiringDateAttr\n        expiringDateAttr = properties['iobj.contract.validTo'] ? properties['iobj.contract.validTo'].toString() : \"QT_VALID_T\"\n        \n        if(objectFacade.loadObjectAttributeBean(contractId.toInteger(), customerContractAttr)){\n                obTriage = objectFacade.loadObjectAttributeBean(contractId.toInteger(), customerContractAttr).createMutable()\n                contractRef = obTriage.getObjectAttributeValueBeans().toString()\n                contractDO = contractRef.toString()\n                log.debug \"contractDO: \" + contractDO\n                contractDOKey = contractDO.substring(contractDO.lastIndexOf('(')+1,contractDO.lastIndexOf(')'))\n                log.debug \"contractDOKey: \" + contractDOKey\n                contractDOObject = objectFacade.loadObjectBean(properties['ischema.dbo'].toString() + \"-\" + contractDOKey)\n            log.debug \"expiringDateAttr: \" + expiringDateAttr\n                expiringDate = objectFacade.loadObjectAttributeBean(contractDOKey.toInteger(), expiringDateAttr) ? objectFacade.loadObjectAttributeBean(contractDOKey.toInteger(), expiringDateAttr).getObjectAttributeValueBeans().value[0] as Date : null\n        }\n\n        def todaysDateTime = (new Date())\n        log.debug \"expiringDate: \" + expiringDate\n        log.debug \"todaysDateTime: \" + todaysDateTime\n        if(expiringDate &lt; todaysDateTime){\n            warnings = true\n            expiredContract = true\n        }\n        \n    }\n \n}\n\ndef output = new ArrayList()\n\nif (!warnings){\n    return true\n}else{\n    if(warnings){\n        if(issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")){\n            //log.debug \"return true\"\n            return true\n        }else{\n            def wList = new ArrayList()\n\t\t\tdef wListConfirmEmptyContract = new ArrayList()\n            \n            if(missingContract){\n                wListConfirmEmptyContract.add(\"W\")\n                wListConfirmEmptyContract.add(\"CUSTOMER_CONTRACT_MISSING\")\n                wListConfirmEmptyContract.add(null)\n\n                wList.add(wListConfirmEmptyContract)\n            }\n            \n            if(expiredContract){\n                wListConfirmEmptyContract.add(\"W\")\n                wListConfirmEmptyContract.add(\"CUSTOMER_CONTRACT_EXPIRED\")\n                wListConfirmEmptyContract.add(null)\n\n                wList.add(wListConfirmEmptyContract)\n            }\n            output.add(wList)\n            throw new InvalidInputException('{\"W\":\"' + output.toString() + '\"}') \n        }\n    }\n}","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">7a272e30-dcd2-4e28-bf3b-a91abc51c017</arg>
              <arg name="FIELD_NOTES">SAP: update SN status (or create for offer tkts) &amp; Create SO</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef sapSN =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_NOTIFICATION\")[0]\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\n\nif(issue.issueType.name != \"Planned Maintenance Ticket\" &amp;&amp; issue.getCustomFieldValue(sapSN) != null){\n    requestMethod = \"POST\";\n\n    def body_req = []\n    body_req = [\n        \"issueKey\": issue.key,\n        \"status\": \"PLA\"\n    ] \n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n    log.debug \"baseURL SN: \" + baseURL\n    log.debug \"body_req SN: \" + body_req\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        \n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n        log.debug \"errors: \" +  json_object.errors.toString()\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-SAP-SN-UPDATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0].toString())\n        \n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }else{\n        /** SERVICE ORDER CREATION **/\n        body_req = [\n            \"issueKey\": issue.key\n        ] \n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\n\n        log.debug \"baseURL SO: \" + baseURL\n        log.debug \"body_req SO: \" + body_req\n        url = new URL(baseURL)\n        connection = (HttpURLConnection)url.openConnection();\n        connection.setRequestMethod(requestMethod);\n        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n        connection.setRequestProperty(\"Accept\", \"*/*\");\n        connection.setDoOutput(true);\n        connection.setDoInput(true);\n        connection.outputStream\n        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n        log.debug connection.outputStream\n        connection.connect();\n\n        output = new ArrayList()\n        eList = new ArrayList()\n        eListErrors = new ArrayList()\n        errorMsgs = new ArrayList()\n\n        if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n            log.debug \"url: \" + url\n            log.debug \"ResponseCode:\" + connection.getResponseCode()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n            \n            def outputMsg = ((HttpURLConnection)connection).errorStream.text\n    \t\tlog.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n            \n            def jsonSlurper = new JsonSlurper()\n            def json_object = jsonSlurper.parseText(outputMsg)\n            assert json_object instanceof Map  \n            log.debug \"message: \" +  json_object.message\n            log.debug \"errors: \" +  json_object.errors.toString()\n            \n            eListErrors.add(\"E\")\n            eListErrors.add(\"OP-SAP-SO-CREATE\")\n            errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n            eListErrors.add(errorMsgs)\n            eList.add(eListErrors)\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        }\n    }\n}\n\nif(issue.getCustomFieldValue(sapSN) == null &amp;&amp; issue.issueType.name != \"Planned Maintenance Ticket\"){\n    requestMethod = \"POST\";\n\n    def body_req = []\n    body_req = [\n        \"issueKey\": issue.key,\n        \"status\": \"PLA\"\n    ] \n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n    log.debug \"baseURL SN: \" + baseURL\n    log.debug \"body_req SN: \" + body_req\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"201\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        \n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n        log.debug \"errors: \" +  json_object.errors.toString()\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-SAP-SN-UPDATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }else{\n        /** SERVICE ORDER CREATION **/\n        body_req = [\n            \"issueKey\": issue.key\n        ] \n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\n\n        log.debug \"baseURL SO: \" + baseURL\n        log.debug \"body_req SO: \" + body_req\n        url = new URL(baseURL)\n        connection = (HttpURLConnection)url.openConnection();\n        connection.setRequestMethod(requestMethod);\n        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n        connection.setRequestProperty(\"Accept\", \"*/*\");\n        connection.setDoOutput(true);\n        connection.setDoInput(true);\n        connection.outputStream\n        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n        log.debug connection.outputStream\n        connection.connect();\n\n        output = new ArrayList()\n        eList = new ArrayList()\n        eListErrors = new ArrayList()\n        errorMsgs = new ArrayList()\n\n        if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n            log.debug \"url: \" + url\n            log.debug \"ResponseCode:\" + connection.getResponseCode()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n            \n            def outputMsg = ((HttpURLConnection)connection).errorStream.text\n    \t\tlog.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n            \n            def jsonSlurper = new JsonSlurper()\n            def json_object = jsonSlurper.parseText(outputMsg)\n            assert json_object instanceof Map  \n            log.debug \"message: \" +  json_object.message\n            log.debug \"errors: \" +  json_object.errors.toString()\n            \n            eListErrors.add(\"E\")\n            eListErrors.add(\"OP-SAP-SO-CREATE\")\n            errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n            eListErrors.add(errorMsgs)\n            eList.add(eListErrors)\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        }\n    }\n}\n ","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">583df9c7-fce8-41ca-ad87-8f516b4ff5c5</arg>
              <arg name="FIELD_NOTES">Delete previous attachments related to NEW Installation TKT Generation</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\ndef automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]\n\ndef requestMethod\ndef baseURL\n\n/*Script Variables*/\n//Per test da console\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-14062\")\n\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\n\n/*Rimozione allegato rapporto di intervento appena creato*/\n/* Get Insight IQL Facade from plugin accessor */\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\n\n/* Get Insight Object Facade from plugin accessor */\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n/* Get Insight Object Type Facade from plugin accessor */\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\");\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\n\n/* Get Insight Object Attribute Facade from plugin accessor */\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\");\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\n\n/* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include \" around value */\ndef objects = iqlFacade.findObjectsByIQLAndSchema(DBO, \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".\\\"\" + properties['iobj.attachmentCategory.newInstTkt'].toString() + \"\\\" = true AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"); // See the complete list of possible IQL on the Insight Query Language documentation page\n/* If this is a mandatory field you should be able to do this: */\nlog.debug \"IQL: \" + \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".\\\"\" + properties['iobj.attachmentCategory.newInstTkt'].toString() + \"\\\" = true AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"\n\nfor(iobj in objects){\n    /* UPDATE OJBECT DELETED VALUE */\n    def obj = objectFacade.loadObjectBean(iobj.getId());\n        \n    int attachmentDeleted = properties['iobj.attachment.deleted.id'] ? properties['iobj.attachment.deleted.id'].toString().toInteger() : 3265\n    \n    attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(attachmentDeleted); \n\n    newAttrib = obj.createObjectAttributeBean(attribType);\n    def newAttribValue = newAttrib.createObjectAttributeValueBean();\n\n    try {\n    \tnewAttribValue.setValue(attribType, true);\n    } catch (Exception vie) {\n     \tlog.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType + \" to \" + totalAmountSupp + \". Exiting.\");\n     \tlog.warn(SETINSIGHTVALUE: vie.getMessage());\n     \treturn false;\n    }\n    \n    def attribValues = newAttrib.getObjectAttributeValueBeans();\n    attribValues.add(newAttribValue);\n    newAttrib.setObjectAttributeValueBeans(attribValues);\n     \n    try {\n    \tnewAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\n    } catch (Exception vie) {\n    \tlog.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\n     \tlog.warn(SETINSIGHTVALUE: vie.getMessage());\n    return false;\n    }\n    log.info(\"SETINSIGHTVALUE: Successfully saved value\");\n}","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">ae3f3563-1b6f-4e50-a442-a0926310744c</arg>
              <arg name="FIELD_NOTES">OP: Doc Template generation - se New Installation OR First Ticket = true</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.opensymphony.workflow.WorkflowException;\nimport com.opensymphony.workflow.InvalidInputException\nimport groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport groovyx.net.http.HTTPBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef requestMethod\ndef baseURL\n\ndef firstTicket =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.firstTkt'].toString())[0]\n\nlog.debug issue.getIssueType().name\nlog.debug issue.getCustomFieldValue(firstTicket)\n\n\n/* REST API per Invio Notifica Email ONSITE_REPORT */\nrequestMethod = \"GET\";\ndef rescheduling =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.rescheduling'] ? properties['cf.rescheduling'].toString() : \"OP_CHANGE_SCHEDULING\")[0]\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm2'].toString())[0]\n\n\ndef first_ticket=false\ndef template=\"\"\nif(issue.getCustomFieldValue(firstTicket)!=null){\n    first_ticket=true\n    template=\"FIRST_TICKET%7CMANUFACTURER\"\n}else{\n    template=\"NEW_INSTALLATION_CREATE_TKT%7CMANUFACTURER\"\n}\n\nif(issue.getIssueType().name.toString().equals(properties['it.newInstallation'])){\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/document/generation/check?ISSUE_KEY=\"+ issue.key +\"&amp;DOC_CATEGORY=\" + template + \"&amp;ENABLED_FOR_FIRST_TICKET=\"+first_ticket+\"&amp;IMPORT_FROM=\"\n}else{\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/document/generation/check?ISSUE_KEY=\"+ issue.key +\"&amp;DOC_CATEGORY=\" + template + \"&amp;ENABLED_FOR_FIRST_TICKET=\"+first_ticket+\"&amp;IMPORT_FROM=OP_ASSET\"\n}\n\nlog.debug baseURL\nURL url = new URL(baseURL)\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.setRequestMethod(requestMethod);\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\nconnection.setRequestProperty(\"Accept\", \"*/*\");\nconnection.setDoOutput(true);\nconnection.setDoInput(true);\nconnection.connect();\n\ndef output = new ArrayList()\ndef eList = new ArrayList()\ndef eListErrors = new ArrayList()\ndef errorMsgs = new ArrayList()\nlog.debug \"url: \" + url\n\nif (!connection.getResponseCode().toString().equals(\"200\")){\n    log.debug \"url: \" + url\n    log.debug \"ResponseCode:\" + connection.getResponseCode()\n    log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n    log.debug \"ErrorStream: \" + connection.getErrorStream().toString()\n    log.debug \"getHeaderFields(): \" + connection.getHeaderFields()\n    def outputMsg = ((HttpURLConnection)connection).errorStream.text\n    log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n    def jsonSlurper = new JsonSlurper()\n    def json_object = jsonSlurper.parseText(outputMsg)\n    assert json_object instanceof Map  \n    log.debug \"message: \" +  json_object.message\n\n    eListErrors.add(\"E\")\n    eListErrors.add(\"OP-DOCS\")\n    errorMsgs.add(connection.getResponseCode() + \" \" + json_object.message)\n    eListErrors.add(errorMsgs)\n    eList.add(eListErrors)\n\n    output.add(eList)\n    throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n}\n","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">dd185790-4471-4435-99ff-f3aca12a451c</arg>
              <arg name="FIELD_NOTES">OP Email Notification: ASSIGN_TO_SUPPLIER</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.atlassian.jira.issue.link.IssueLink\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nCategory log = Category.getInstance(\"com.onresolve.jira.groovy.PostFunction\")\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\ndef requestMethod = \"POST\";\ndef relatesInIssueLink=false\ndef relatesOutIssueLink=false\ndef linkedTickets=new ArrayList()\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyAssigned'] ? properties['cf.automaticallyAssigned'].toString() : \"OP_AUTOMATICALLY_ASSIGNED\")[0]\n\n/*OP-1038: verifica ticket collegati*/\nList&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\nfor (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n\n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n        relatesInIssueLink=true\n        linkedTickets.add(issueLink.getSourceObject().toString())\n        log.debug \"Issue con relatesInIssueLink\"\n    }\n}\nList&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\nfor (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n\n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n        relatesOutIssueLink=true\n        linkedTickets.add(issueLink.getDestinationObject().toString())\n        log.debug \"Issue con relatesOutIssueLink\"\n    }\n}\n\ndef body_req\nif(relatesInIssueLink || relatesOutIssueLink){\n    body_req = [\n        \"templateName\": properties['tt.assignToSupplier'].toString(),\n        \"pec\": false,\n        \"issueKey\": issue.key,\n        \"linkedTickets\": linkedTickets\n    ]\n}else{\n    body_req = [\n        \"templateName\": properties['tt.assignToSupplier'].toString(),\n        \"pec\": false,\n        \"issueKey\": issue.key\n    ]\n}\n\nif(issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"No\")){\n    def baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/transaction/mail/send\"\n    URL url\n    url = new URL(baseURL)\n\n    log.debug \"baseURL: \" + baseURL\n    HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\tlog.debug \"ResponseCode:\" + connection.getResponseCode()\n    \n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        eListErrors.add(\"E\")\n        eListErrors.add(\"SENDMAIL\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n}\n","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="4">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">¶»ž</arg>
                  <arg name="field.name">customfield_23245</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="field.copyFieldSource2" />
                  <arg name="field.copyFieldSource1">customfield_23236</arg>
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="field.createTargetValue1" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyFieldMode1">OVERWRITE</arg>
                  <arg name="field.copyFieldDestination1">customfield_22653</arg>
                  <arg name="field.copyFieldSeparator1" />
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescopyValueFromOtherField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.CopyValueFromOtherFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22813</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="field.name">customfield_22639</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="661" name="Assegna a Fornitore e Pianifica" view="fieldscreen">
          <meta name="opsbar-sequence">50</meta>
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20112</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">a9655845-bd3d-4171-ab08-fdb0c420b5d2</arg>
                <arg name="FIELD_NOTES">OP_ASSET should be evaluated &amp;&amp; Issue type should be New Installation</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"cfValues['OP_ASSET'] != null &amp;&amp; issue.issueType.name == 'New Installation'","scriptPath":null,"parameters":{}}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">e335982b-f860-4bed-a8cc-028022cff1ce</arg>
                <arg name="FIELD_NOTES">OP_SUPPLIER should be not null</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"import com.atlassian.jira.component.ComponentAccessor\n\ndef trovato=false\nfor (s in ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.supplier'].toString())){\n    if (issue.getCustomFieldValue(s) != null){\n        trovato=true\n    }\n}\nreturn trovato","scriptPath":null}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">de52ae8f-3a4f-4dd8-93de-2d990003847d</arg>
              <arg name="FIELD_NOTES">OP: Check Customer Contract</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.atlassian.jira.issue.Issue\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.component.ComponentAccessor\nimport org.apache.log4j.Category\nimport groovy.json.JsonBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.sql.Timestamp\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\n\ndef warnings = false\ndef missingContract = false\ndef expiredContract = false\ndef errors = false\n\ndef installation =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.asset'].toString())[0]\ndef automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyAssigned'] ? properties['cf.automaticallyAssigned'].toString() : \"OP_AUTOMATICALLY_ASSIGNED\")[0]\ndef transitionCheck =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.checkAndConfirm'].toString())[0]\n\ndef warningEmptyFields = new ArrayList()\ndef errorMandatoryFields = new ArrayList()\n\n//OP_ASSET\nif(issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"No\")){\n    //Check CUSTOMER_CONTRACT_REF on OP_ASSET\n    \n    Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");  \n    Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\n    def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n    def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n    def asset = issue.getCustomFieldValue(installation)\n    log.debug \"asset: \" + asset\n    asset=asset.toString()\n    def assetKey = asset.substring(asset.lastIndexOf('(')+1,asset.lastIndexOf(')'))\n    def assetObject = objectFacade.loadObjectBean(assetKey)\n\tlog.debug \"assetObject.getId(): \" + assetObject.getId()\n    def obTriage\n    def customerContract, customerContractAttr\n    customerContractAttr = properties['iobj.hardware.contract'] ? properties['iobj.hardware.contract'].toString() : \"CUSTOMER_CONTRACT_REF\"\n    if(objectFacade.loadObjectAttributeBean(assetObject.getId(), customerContractAttr)){\n        obTriage = objectFacade.loadObjectAttributeBean(assetObject.getId(), customerContractAttr).createMutable()\n        customerContract = obTriage.getObjectAttributeValueBeans().toString()\n    }\n\n    log.debug \"customerContract: \" + customerContract\n    \n    if(customerContract == null){\n        warnings = true\n        missingContract = true\n    }else{\n        //get \"QT_VALID_T\" for that Technician\n        def contract=customerContract.toString()\n        log.debug \"contract:\" + contract\n        def contractId = contract.substring(contract.lastIndexOf('(')+1,contract.lastIndexOf(')'))\n        log.debug \"contractId:\" + contractId\n        log.debug \"properties['iobj.contract.validTo']: \" + properties['iobj.contract.validTo']\n        def expiringDate, expiringDateAttr\n        expiringDateAttr = properties['iobj.contract.validTo'] ? properties['iobj.contract.validTo'].toString() : \"QT_VALID_T\"\n        \n        if(objectFacade.loadObjectAttributeBean(contractId.toInteger(), customerContractAttr)){\n                obTriage = objectFacade.loadObjectAttributeBean(contractId.toInteger(), customerContractAttr).createMutable()\n                contractRef = obTriage.getObjectAttributeValueBeans().toString()\n                contractDO = contractRef.toString()\n                log.debug \"contractDO: \" + contractDO\n                contractDOKey = contractDO.substring(contractDO.lastIndexOf('(')+1,contractDO.lastIndexOf(')'))\n                log.debug \"contractDOKey: \" + contractDOKey\n                contractDOObject = objectFacade.loadObjectBean(properties['ischema.dbo'].toString() + \"-\" + contractDOKey)\n            log.debug \"expiringDateAttr: \" + expiringDateAttr\n                expiringDate = objectFacade.loadObjectAttributeBean(contractDOKey.toInteger(), expiringDateAttr) ? objectFacade.loadObjectAttributeBean(contractDOKey.toInteger(), expiringDateAttr).getObjectAttributeValueBeans().value[0] as Date : null\n        }\n\n        def todaysDateTime = (new Date())\n        log.debug \"expiringDate: \" + expiringDate\n        log.debug \"todaysDateTime: \" + todaysDateTime\n        if(expiringDate &lt; todaysDateTime){\n            warnings = true\n            expiredContract = true\n        }\n        \n    }\n \n}\n\ndef output = new ArrayList()\n\nif (!warnings){\n    return true\n}else{\n    if(warnings){\n        if(issue.getCustomFieldValue(transitionCheck).toString().equals(\"Yes\")){\n            //log.debug \"return true\"\n            return true\n        }else{\n            def wList = new ArrayList()\n\t\t\tdef wListConfirmEmptyContract = new ArrayList()\n            \n            if(missingContract){\n                wListConfirmEmptyContract.add(\"W\")\n                wListConfirmEmptyContract.add(\"CUSTOMER_CONTRACT_MISSING\")\n                wListConfirmEmptyContract.add(null)\n\n                wList.add(wListConfirmEmptyContract)\n            }\n            \n            if(expiredContract){\n                wListConfirmEmptyContract.add(\"W\")\n                wListConfirmEmptyContract.add(\"CUSTOMER_CONTRACT_EXPIRED\")\n                wListConfirmEmptyContract.add(null)\n\n                wList.add(wListConfirmEmptyContract)\n            }\n            output.add(wList)\n            throw new InvalidInputException('{\"W\":\"' + output.toString() + '\"}') \n        }\n    }\n}","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">a80e150a-63e9-41ea-964a-c564139e7864</arg>
              <arg name="FIELD_NOTES">SAP: update SN status (or create for offer tkts) &amp; Create SO</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\nimport com.atlassian.jira.issue.link.IssueLink\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef sapSN =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(\"OP_SAP_SERVICE_NOTIFICATION\")[0]\ndef requestMethod\ndef baseURL\n\nURL url\nHttpURLConnection connection\n\nif(issue.issueType.name != \"Planned Maintenance Ticket\" &amp;&amp; issue.getCustomFieldValue(sapSN) != null){\n    requestMethod = \"POST\";\n\n    def body_req = []\n    body_req = [\n        \"issueKey\": issue.key,\n        \"status\": \"PLA\"\n    ] \n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n    log.debug \"baseURL SN: \" + baseURL\n    log.debug \"body_req SN: \" + body_req\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        \n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n        log.debug \"errors: \" +  json_object.errors.toString()\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-SAP-SN-UPDATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0].toString())\n        \n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }else{\n        /** SERVICE ORDER CREATION **/\n        body_req = [\n            \"issueKey\": issue.key\n        ] \n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\n\n        log.debug \"baseURL SO: \" + baseURL\n        log.debug \"body_req SO: \" + body_req\n        url = new URL(baseURL)\n        connection = (HttpURLConnection)url.openConnection();\n        connection.setRequestMethod(requestMethod);\n        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n        connection.setRequestProperty(\"Accept\", \"*/*\");\n        connection.setDoOutput(true);\n        connection.setDoInput(true);\n        connection.outputStream\n        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n        log.debug connection.outputStream\n        connection.connect();\n\n        output = new ArrayList()\n        eList = new ArrayList()\n        eListErrors = new ArrayList()\n        errorMsgs = new ArrayList()\n\n        if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n            log.debug \"url: \" + url\n            log.debug \"ResponseCode:\" + connection.getResponseCode()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n            \n            def outputMsg = ((HttpURLConnection)connection).errorStream.text\n    \t\tlog.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n            \n            def jsonSlurper = new JsonSlurper()\n            def json_object = jsonSlurper.parseText(outputMsg)\n            assert json_object instanceof Map  \n            log.debug \"message: \" +  json_object.message\n            log.debug \"errors: \" +  json_object.errors.toString()\n            \n            eListErrors.add(\"E\")\n            eListErrors.add(\"OP-SAP-SO-CREATE\")\n            errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n            eListErrors.add(errorMsgs)\n            eList.add(eListErrors)\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        }\n    }\n}\n\nif(issue.getCustomFieldValue(sapSN) == null &amp;&amp; issue.issueType.name != \"Planned Maintenance Ticket\"){\n    requestMethod = \"POST\";\n\n    def body_req = []\n    body_req = [\n        \"issueKey\": issue.key,\n        \"status\": \"PLA\"\n    ] \n\n    baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/service/notification\"\n\n    log.debug \"baseURL SN: \" + baseURL\n    log.debug \"body_req SN: \" + body_req\n    url = new URL(baseURL)\n    connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\n    if (!connection.getResponseCode().toString().equals(\"201\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        \n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n        log.debug \"errors: \" +  json_object.errors.toString()\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-SAP-SN-UPDATE\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }else{\n        /** SERVICE ORDER CREATION **/\n        body_req = [\n            \"issueKey\": issue.key\n        ] \n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/after/sales/create/or/update/service/order\"\n\n        log.debug \"baseURL SO: \" + baseURL\n        log.debug \"body_req SO: \" + body_req\n        url = new URL(baseURL)\n        connection = (HttpURLConnection)url.openConnection();\n        connection.setRequestMethod(requestMethod);\n        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n        connection.setRequestProperty(\"Accept\", \"*/*\");\n        connection.setDoOutput(true);\n        connection.setDoInput(true);\n        connection.outputStream\n        connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n        log.debug connection.outputStream\n        connection.connect();\n\n        output = new ArrayList()\n        eList = new ArrayList()\n        eListErrors = new ArrayList()\n        errorMsgs = new ArrayList()\n\n        if (!connection.getResponseCode().toString().equals(\"201\") &amp;&amp; !connection.getResponseCode().toString().equals(\"200\")){\n            log.debug \"url: \" + url\n            log.debug \"ResponseCode:\" + connection.getResponseCode()\n            log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n            \n            def outputMsg = ((HttpURLConnection)connection).errorStream.text\n    \t\tlog.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n            \n            def jsonSlurper = new JsonSlurper()\n            def json_object = jsonSlurper.parseText(outputMsg)\n            assert json_object instanceof Map  \n            log.debug \"message: \" +  json_object.message\n            log.debug \"errors: \" +  json_object.errors.toString()\n            \n            eListErrors.add(\"E\")\n            eListErrors.add(\"OP-SAP-SO-CREATE\")\n            errorMsgs.add(connection.getResponseCode() + \" \" + json_object.errors[0])\n            eListErrors.add(errorMsgs)\n            eList.add(eListErrors)\n\n            output.add(eList)\n            throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n        }\n    }\n}\n ","scriptPath":null,"parameters":{}}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">5e9c9e99-6d82-4e7b-bcbd-a39b8cf84bb5</arg>
              <arg name="FIELD_NOTES">OP Email Notification: ASSIGN_TO_SUPPLIER</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.atlassian.jira.issue.link.IssueLink\nimport org.apache.log4j.Category\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nCategory log = Category.getInstance(\"com.onresolve.jira.groovy.PostFunction\")\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\ndef requestMethod = \"POST\";\ndef relatesInIssueLink=false\ndef relatesOutIssueLink=false\ndef linkedTickets=new ArrayList()\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyAssigned'] ? properties['cf.automaticallyAssigned'].toString() : \"OP_AUTOMATICALLY_ASSIGNED\")[0]\n\n/*OP-1038: verifica ticket collegati*/\nList&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\nfor (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n\n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n        relatesInIssueLink=true\n        linkedTickets.add(issueLink.getSourceObject().toString())\n        log.debug \"Issue con relatesInIssueLink\"\n    }\n}\nList&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\nfor (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n    IssueLink issueLink = (IssueLink) outIterator.next();\n\n    if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n        relatesOutIssueLink=true\n        linkedTickets.add(issueLink.getDestinationObject().toString())\n        log.debug \"Issue con relatesOutIssueLink\"\n    }\n}\n\ndef body_req\nif(relatesInIssueLink || relatesOutIssueLink){\n    body_req = [\n        \"templateName\": properties['tt.assignToSupplier'].toString(),\n        \"pec\": false,\n        \"issueKey\": issue.key,\n        \"linkedTickets\": linkedTickets\n    ]\n}else{\n    body_req = [\n        \"templateName\": properties['tt.assignToSupplier'].toString(),\n        \"pec\": false,\n        \"issueKey\": issue.key\n    ]\n}\n\nif(issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"No\")){\n    def baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/jira/AA/transaction/mail/send\"\n    URL url\n    url = new URL(baseURL)\n\n    log.debug \"baseURL: \" + baseURL\n    HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.outputStream\n    connection.outputStream.withWriter(\"UTF-8\") { new StreamingJsonBuilder(it, body_req) }\n    log.debug connection.outputStream\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\tlog.debug \"ResponseCode:\" + connection.getResponseCode()\n    \n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        eListErrors.add(\"E\")\n        eListErrors.add(\"SENDMAIL\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + connection.getResponseMessage())\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n}\n","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="4">
              <post-functions>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="append.value" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="field.name">customfield_22639</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">0db4b388-06a4-49d8-ace8-c098c9d1a5c2</arg>
                  <arg name="FIELD_NOTES">OP: New Installation - Check linkedTickets &amp; Fast-Transact them</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.link.IssueLink\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nlog.warn \"${issue.key} Transazione ASSIGN TO SUPPLIER - Post Function check linkedIssues\"\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\ndef automaticallyConfirmed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyAssigned'] ? properties['cf.automaticallyAssigned'].toString() : \"OP_AUTOMATICALLY_ASSIGNED\")[0]\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\n\n//Per test da console\n//issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-276\")\n\n/*PROD*/\nASSIGN_TO_SUPPLIER = properties['wf.tr.assignToSupplierAndSchedule'] ? properties['wf.tr.assignToSupplierAndSchedule'].toInteger() : 431\n\ndef user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\ndef issueService = ComponentAccessor.getIssueService()\n\n/*Se eseguo la confirm to customer su un ticket con 1 o + ticket collegati, verifico e sposto in automatico gli eventuali ticket collegati*/\nlog.warn \"verifico e sposto in automatico gli eventuali ticket collegati\"\nlog.debug issue.getIssueType().getName()\nlog.debug issue.getCustomFieldValue(automaticallyConfirmed)\nif(issue.getIssueType().getName() == properties['it.newInstallation'].toString() &amp;&amp; (issue.getCustomFieldValue(automaticallyConfirmed)==null || issue.getCustomFieldValue(automaticallyConfirmed).toString().equals(\"No\"))){\n    List&lt;IssueLink&gt; allInIssueLink = ComponentAccessor.getIssueLinkManager().getInwardLinks(issue.getId())\n    log.debug \"allInIssueLink: \" + allInIssueLink\n    for (Iterator&lt;IssueLink&gt; outIterator = allInIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            log.warn \"Issue con relatesInIssueLink\"\n            /*Eseguire transazione di stato della sourceIssue*/\n            def linkedIssue = issueLink.getSourceObject()\n            def linkedIssueStatus = linkedIssue.getStatus()\n            def transitionId\n            if(linkedIssueStatus.name == properties['wf.open'].toString()){\n                transitionId=ASSIGN_TO_SUPPLIER\n            }\n            if(transitionId==ASSIGN_TO_SUPPLIER){\n                // Prepare our input for the transition\n                def issueInputParameters = issueService.newIssueInputParameters()\n                issueInputParameters.with {\n                    setSkipScreenCheck(true)\n                }\n                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)\n                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), \"Yes\") \n                //log.warn \"issueInputParameters: \" + issueInputParameters\n                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n                def mi = (MutableIssue) linkedIssue\n\n                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)\n                log.warn \"fieldConfig: \" + fieldConfig\n                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())\n\n                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n                issueIndexingService.reIndex(linkedIssue)\n                log.warn \"Updated customfield - issue linkata\"\n\n                //def validationResult = issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters)\n                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {\n                    // Perform the transition\n                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))\n                    if (! issueResult.isValid()) {\n                        log.warn(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n                    }else{\n                        log.warn(\"Transazione fatta 79 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}\")\n                    }\n                } else {\n                    log.warn(\"Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}\")\n                }\n            }\n        }\n    }\n\n    List&lt;IssueLink&gt; allOutIssueLink = ComponentAccessor.getIssueLinkManager().getOutwardLinks(issue.getId())\n    log.debug \"allOutIssueLink: \" + allOutIssueLink\n    for (Iterator&lt;IssueLink&gt; outIterator = allOutIssueLink.iterator(); outIterator.hasNext();) {\n        IssueLink issueLink = (IssueLink) outIterator.next();\n\n        if(issueLink.issueLinkType.getName().toString().equals(properties['il.linkedTktsRelates'].toString())){\n            log.warn \"Issue con relatesOutIssueLink\"\n            /*Eseguire transazione di stato della destinationIssue*/\n            def linkedIssue = issueLink.getDestinationObject()\n            def linkedIssueStatus = linkedIssue.getStatus()\n            def transitionId\n            log.warn \"linkedIssue: \" + linkedIssue\n            log.warn \"linkedIssueStatus.name: \" + linkedIssueStatus.name\n            if(linkedIssueStatus.name == properties['wf.open'].toString()){\n                transitionId=ASSIGN_TO_SUPPLIER\n            }\n\n            if(transitionId==ASSIGN_TO_SUPPLIER){\n                // Prepare our input for the transition\n                def issueInputParameters = issueService.newIssueInputParameters()\n                issueInputParameters.with {\n                    setSkipScreenCheck(true)\n                }\n                //def fieldConfig = automaticallyClosed.getRelevantConfig(issue)\n                //ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                //issueInputParameters.addCustomFieldValue(fieldConfig.getId(), \"Yes\") \n\n                def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()\n                def mi = (MutableIssue) linkedIssue\n\n                def fieldConfig = automaticallyConfirmed.getRelevantConfig(linkedIssue)\n                log.warn \"fieldConfig: \" + fieldConfig\n                def cfNewValue = ComponentAccessor.optionsManager.getOptions(fieldConfig)?.find { it.toString() == \"Yes\" }\n                automaticallyConfirmed.updateValue(null, linkedIssue, new ModifiedValue(linkedIssue.getCustomFieldValue(automaticallyConfirmed), cfNewValue), new DefaultIssueChangeHolder())\n\n                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);\n                issueIndexingService.reIndex(linkedIssue)\n                log.warn \"Updated customfield - issue linkata\"\n\n                if (issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).isValid()) {\n                    // Perform the transition\n                    def issueResult = issueService.transition(user, issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters))\n                    if (! issueResult.isValid()) {\n                        log.warn(\"Failed to transition task ${linkedIssue.key}, errors: ${issueResult.errorCollection}\")\n                    }else{\n                        log.warn(\"Transazione fatta 122 ${linkedIssue.key}, errors: ${issueResult.errorCollection}, ${linkedIssue.status}\")\n                    }\n                } else {\n                    log.warn(\"Could not transition task ${linkedIssue.key}, errors: ${issueService.validateTransition(user, linkedIssue.id, transitionId, issueInputParameters).errorCollection}\")\n                }\n            }\n\n        }\n    }\n}","scriptPath":null}</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="711" name="Riapri Offerta">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <results>
            <unconditional-result old-status="žée" status="žée" step="11">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd" />
                  <arg name="maxAllowed-integerValue" />
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22635</arg>
                  <arg name="scopeType">H</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd" />
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql" />
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql" />
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="731" name="Modifica Impianto" view="fieldscreen">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id">20116</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">1675639b-1b66-4d8e-ba9b-3d496754f415</arg>
                <arg name="FIELD_NOTES">Enabled only for new inst tickets in order to assign ASSET and generate (or re-generate) Docs</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">{"script":"(issue.issueType.name == 'New Installation' || (issue.issueType.name == 'Maintenance Ticket' &amp;&amp; cfValues['OP_FIRST_TICKET'] == \"First Ticket\")) &amp;&amp; cfValues['OP_ASSET'] != null","scriptPath":null}</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">3039511e-90dd-490d-99ef-f8487b209eba</arg>
              <arg name="FIELD_NOTES">Delete previous attachments related to NEW Installation TKT Generation</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport com.opensymphony.workflow.InvalidInputException\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport org.apache.log4j.Category\nimport com.atlassian.jira.issue.MutableIssue\nimport com.atlassian.jira.event.type.EventDispatchOption\nimport com.atlassian.jira.issue.util.DefaultIssueChangeHolder\nimport com.atlassian.jira.issue.ModifiedValue\nimport com.atlassian.jira.issue.index.IssueIndexingService\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\nIssueIndexingService \tissueIndexingService = ComponentAccessor.getComponent(IssueIndexingService)\ndef automaticallyClosed =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString())[0]\n\ndef requestMethod\ndef baseURL\n\n/*Script Variables*/\n//Per test da console\n//Issue issue = issueManager.getIssueByKeyIgnoreCase(\"OPUT-14062\")\n\nint OPAA = properties['ischema.aa.id'].toString().toInteger()\nint DBO = properties['ischema.dbo.id'].toString().toInteger()\n\n/*Rimozione allegato rapporto di intervento appena creato*/\n/* Get Insight IQL Facade from plugin accessor */\nClass iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade\"); \ndef iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);\n\n/* Get Insight Object Facade from plugin accessor */\nClass objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade\");\ndef objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);\n\n/* Get Insight Object Type Facade from plugin accessor */\nClass objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade\");\ndef objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);\n\n/* Get Insight Object Attribute Facade from plugin accessor */\nClass objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade\");\ndef objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);\n\nClass objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(\"com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory\");\ndef objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);\n\n/* Specify the schema id as well as the IQL that will fetch objects. In this case all objects with Name matching the valueCF, be sure to include \" around value */\ndef objects = iqlFacade.findObjectsByIQLAndSchema(DBO, \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".\\\"\" + properties['iobj.attachmentCategory.newInstTkt'].toString() + \"\\\" = true AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"); // See the complete list of possible IQL on the Insight Query Language documentation page\n/* If this is a mandatory field you should be able to do this: */\nlog.debug \"IQL: \" + \"\\\"\" + properties['iobj.attachmentCategory.categoryRef'].toString() + \"\\\".\\\"\" + properties['iobj.attachmentCategory.newInstTkt'].toString() + \"\\\" = true AND \" + properties['iobj.attachmentCategory.deleted'].toString() + \"!=true AND object HAVING connectedTickets(key = \" + issue.key.toString() + \")\"\n\nfor(iobj in objects){\n    /* UPDATE OJBECT DELETED VALUE */\n    def obj = objectFacade.loadObjectBean(iobj.getId());\n        \n    int attachmentDeleted = properties['iobj.attachment.deleted.id'] ? properties['iobj.attachment.deleted.id'].toString().toInteger() : 3265\n    \n    attribType = objectTypeAttributeFacade.loadObjectTypeAttributeBean(attachmentDeleted); \n\n    newAttrib = obj.createObjectAttributeBean(attribType);\n    def newAttribValue = newAttrib.createObjectAttributeValueBean();\n\n    try {\n    \tnewAttribValue.setValue(attribType, true);\n    } catch (Exception vie) {\n     \tlog.warn(\"SETINSIGHTVALUE: Unable to set attribute \" + attribType + \" to \" + totalAmountSupp + \". Exiting.\");\n     \tlog.warn(SETINSIGHTVALUE: vie.getMessage());\n     \treturn false;\n    }\n    \n    def attribValues = newAttrib.getObjectAttributeValueBeans();\n    attribValues.add(newAttribValue);\n    newAttrib.setObjectAttributeValueBeans(attribValues);\n     \n    try {\n    \tnewAttrib = objectFacade.storeObjectAttributeBean(newAttrib);\n    } catch (Exception vie) {\n    \tlog.warn(\"SETINSIGHTVALUE: Unable to save changes. Exiting.\");\n     \tlog.warn(SETINSIGHTVALUE: vie.getMessage());\n    return false;\n    }\n    log.info(\"SETINSIGHTVALUE: Successfully saved value\");\n}","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">8d35339f-f6d9-4134-9c7e-8df9cec0081e</arg>
              <arg name="FIELD_NOTES">OP: Doc Template generation - se New Installation OR First Ticket = true</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">{"script":"import com.opensymphony.workflow.WorkflowException;\nimport com.opensymphony.workflow.InvalidInputException\nimport groovy.json.JsonSlurper;\nimport groovy.json.StreamingJsonBuilder;\nimport com.atlassian.jira.issue.CustomFieldManager;\nimport com.atlassian.jira.issue.fields.CustomField;\nimport com.atlassian.jira.issue.IssueManager;\nimport com.atlassian.jira.component.ComponentAccessor;\nimport com.atlassian.jira.issue.Issue;\nimport com.atlassian.jira.issue.MutableIssue\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Category\nimport groovyx.net.http.HTTPBuilder\nimport com.onresolve.scriptrunner.runner.ScriptRunner\nimport com.onresolve.scriptrunner.runner.ScriptRunnerImpl\n\nProperties properties = new Properties()\nFile propertiesFile = new File(ScriptRunnerImpl.getPluginComponent(ScriptRunner).getRootsForDisplay() + '/opproject.properties')\npropertiesFile.withInputStream {\n\tproperties.load(it)\n}\nlog.setLevel(org.apache.log4j.Level.DEBUG)\n\nIssueManager issueManager = ComponentAccessor.getIssueManager();\nCustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager();\n\ndef requestMethod\ndef baseURL\n\ndef firstTicket =  ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.firstTkt'].toString())[0]\n\nlog.debug issue.getIssueType().name\nlog.debug issue.getCustomFieldValue(firstTicket)\n\n\n/* REST API per Invio Notifica Email ONSITE_REPORT */\nrequestMethod = \"GET\";\n\nif(issue.getIssueType().name.toString().equals(properties['it.newInstallation']) || issue.getCustomFieldValue(firstTicket)!=null){\n    def first_ticket=false\n    def template=\"\"\n    if(issue.getCustomFieldValue(firstTicket)!=null){\n        first_ticket=true\n        template=\"FIRST_TICKET%7CMANUFACTURER\"\n    }else{\n        template=\"NEW_INSTALLATION_CREATE_TKT%7CMANUFACTURER\"\n    }\n    \n    if(issue.getIssueType().name.toString().equals(properties['it.newInstallation'])){\n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/document/generation/check?ISSUE_KEY=\"+ issue.key +\"&amp;DOC_CATEGORY=\" + template + \"&amp;ENABLED_FOR_FIRST_TICKET=\"+first_ticket+\"&amp;IMPORT_FROM=\"\n    }else{\n        baseURL = \"http://\" + properties['api.env'].toString() + \"/op/rest/automation/document/generation/check?ISSUE_KEY=\"+ issue.key +\"&amp;DOC_CATEGORY=\" + template + \"&amp;ENABLED_FOR_FIRST_TICKET=\"+first_ticket+\"&amp;IMPORT_FROM=OP_ASSET\"\n    }\n    \n    log.debug baseURL\n    URL url = new URL(baseURL)\n    HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n    connection.setRequestMethod(requestMethod);\n    connection.setRequestProperty(\"Content-Type\", \"application/json\");\n    connection.setRequestProperty(\"Accept\", \"*/*\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.connect();\n\n    def output = new ArrayList()\n    def eList = new ArrayList()\n    def eListErrors = new ArrayList()\n    def errorMsgs = new ArrayList()\n\tlog.debug \"url: \" + url\n    \n    if (!connection.getResponseCode().toString().equals(\"200\")){\n        log.debug \"url: \" + url\n        log.debug \"ResponseCode:\" + connection.getResponseCode()\n        log.debug \"ResponseMessage:\" + connection.getResponseMessage()\n        log.debug \"ErrorStream: \" + connection.getErrorStream().toString()\n        log.debug \"getHeaderFields(): \" + connection.getHeaderFields()\n        def outputMsg = ((HttpURLConnection)connection).errorStream.text\n        log.debug \"((HttpURLConnection)connection).errorStream.text: \" + outputMsg\n\n        def jsonSlurper = new JsonSlurper()\n        def json_object = jsonSlurper.parseText(outputMsg)\n        assert json_object instanceof Map  \n        log.debug \"message: \" +  json_object.message\n\n        eListErrors.add(\"E\")\n        eListErrors.add(\"OP-DOCS\")\n        errorMsgs.add(connection.getResponseCode() + \" \" + json_object.message)\n        eListErrors.add(errorMsgs)\n        eList.add(eListErrors)\n\n        output.add(eList)\n        throw new InvalidInputException('{\"E\":\"' + output.toString() + '\"}')\n    }\n}\n","scriptPath":null}</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="žée" status="žée" step="12">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="13" name="EèÞr×">
      <meta name="jira.status.id">11436</meta>
      <actions>
        <action id="771" name="wbzÚè">
          <meta name="jira.description" />
          <meta name="jira.fieldscreen.id" />
          <results>
            <unconditional-result old-status="žée" status="žée" step="10">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="14" name="Quote Expired">
      <meta name="jira.status.id">14336</meta>
    </step>
    <step id="16" name="Suspended">
      <meta name="jira.status.id">14337</meta>
      <actions>
<common-action id="371" />
      </actions>
    </step>
    <step id="17" name="&#09;©‹zWù">
      <meta name="jira.status.id">11728</meta>
      <actions>
<common-action id="371" />
      </actions>
    </step>
    <step id="18" name="Completed during Maintenance">
      <meta name="jira.status.id">14827</meta>
      <actions>
<common-action id="141" />
      </actions>
    </step>
  </steps>
</workflow>