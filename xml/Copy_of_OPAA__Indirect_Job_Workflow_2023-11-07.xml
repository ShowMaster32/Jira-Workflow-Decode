<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE workflow PUBLIC "-//OpenSymphony Group//DTD OSWorkflow 2.8//EN" "http://www.opensymphony.com/osworkflow/workflow_2_8.dtd">
<workflow>
  <meta name="jira.description"></meta>
  <meta name="jira.update.author.key">JIRAUSER64223</meta>
  <meta name="jira.updated.date">1699345252197</meta>
  <initial-actions>
    <action id="1" name="Create">
      <validators>
        <validator name="" type="class">
          <arg name="permission">Create Issue</arg>
          <arg name="class.name">com.atlassian.jira.workflow.validator.PermissionValidator</arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="null" status="open" step="1">
          <post-functions>
            <function type="class">
              <arg name="field.name">summary</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
              <arg name="field.value">Indirect Job</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
            </function>
            <function type="class">
              <arg name="FIELD_SECURITY_LEVEL_ID">11600</arg>
              <arg name="FIELD_FUNCTION_ID">6af852cf-8696-4225-82fb-53efd0188c8c</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
              <arg name="FIELD_CONDITION"></arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueCreateFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">1</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">075180fb-a378-467a-85fa-b8c888915a10</arg>
              <arg name="FIELD_NOTES">YCFgQ29tcGxldGUgT1BfSU5ESVJFQ1RfSk9CIGZvciBUUkFWRUwgSE9NRSBsb2dzIGFycml2aW5nIGZyb20gbW9iaWxl</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvclxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlO1xyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmV2ZW50LnR5cGUuRXZlbnREaXNwYXRjaE9wdGlvbjtcclxuaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouTGV2ZWxcclxuaW1wb3J0IGphdmEuc3FsLlRpbWVzdGFtcFxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlclxyXG5cclxuUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKVxyXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoJy92YXIvYXRsYXNzaWFuL2FwcGxpY2F0aW9uLWRhdGEvc2hhcmVkL3NjcmlwdHMvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxyXG5wcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0ge1xyXG5cdHByb3BlcnRpZXMubG9hZChpdClcclxufVxyXG4vKiBHZXQgSW5zaWdodCBPYmplY3QgRmFjYWRlIGZyb20gcGx1Z2luIGFjY2Vzc29yICovXHJcbkNsYXNzIG9iamVjdEZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdEZhY2FkZVwiKTsgXHJcbmRlZiBvYmplY3RGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0RmFjYWRlQ2xhc3MpO1xyXG4gIFxyXG4vKiBHZXQgSW5zaWdodCBPYmplY3QgVHlwZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cclxuQ2xhc3Mgb2JqZWN0VHlwZUZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdFR5cGVGYWNhZGVcIik7IFxyXG5kZWYgb2JqZWN0VHlwZUZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShvYmplY3RUeXBlRmFjYWRlQ2xhc3MpO1xyXG4gIFxyXG4vKiBHZXQgSW5zaWdodCBPYmplY3QgQXR0cmlidXRlIEZhY2FkZSBmcm9tIHBsdWdpbiBhY2Nlc3NvciAqL1xyXG5DbGFzcyBvYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKFwiY29tLnJpYWRhbGFicy5qaXJhLnBsdWdpbnMuaW5zaWdodC5jaGFubmVsLmV4dGVybmFsLmFwaS5mYWNhZGUuT2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZVwiKTsgXHJcbmRlZiBvYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyk7XHJcbiAgXHJcbkNsYXNzIG9iamVjdEF0dHJpYnV0ZUJlYW5GYWN0b3J5Q2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKFwiY29tLnJpYWRhbGFicy5qaXJhLnBsdWdpbnMuaW5zaWdodC5zZXJ2aWNlcy5tb2RlbC5mYWN0b3J5Lk9iamVjdEF0dHJpYnV0ZUJlYW5GYWN0b3J5XCIpOyBcclxuZGVmIG9iamVjdEF0dHJpYnV0ZUJlYW5GYWN0b3J5ID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKG9iamVjdEF0dHJpYnV0ZUJlYW5GYWN0b3J5Q2xhc3MpO1xyXG5DbGFzcyBpcWxGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5JUUxGYWNhZGVcIik7IFxyXG5kZWYgaXFsRmFjYWRlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKGlxbEZhY2FkZUNsYXNzKTtcclxuXHJcbmRlZiBjdXJyZW50VXNlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShcIk9QX0NVUlJFTlRfVVNFUlwiKVswXVxyXG5kZWYgdGt0RnJvbU1vYmlsZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShcIk9QX1RLVF9GUk9NX01PQklMRVwiKVswXTtcclxuZGVmIHRrdFZpc0tleSA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShcIk9QX1RLVF9WSVNJQklMSVRZX0tFWVwiKVswXTtcclxuXHJcbmRlZiBpbmRpcmVjdFRhc2sgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUoXCJPUF9JTkRJUkVDVF9KT0JcIilbMF07XHJcbmludCBPUEFBID0gcHJvcGVydGllc1snaXNjaGVtYS5hYS5pZCddLnRvU3RyaW5nKCkudG9JbnRlZ2VyKClcclxuaW50IERCTyA9IHByb3BlcnRpZXNbJ2lzY2hlbWEuZGJvLmlkJ10udG9TdHJpbmcoKS50b0ludGVnZXIoKVxyXG5cclxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpXHJcbi8vSXNzdWUgaXNzdWUgPSBpc3N1ZU1hbmFnZXIuZ2V0SXNzdWVCeUtleUlnbm9yZUNhc2UoXCJBQVMtNDE5MThcIilcclxuXHJcbmRlZiB1c2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SmlyYUF1dGhlbnRpY2F0aW9uQ29udGV4dCgpLmdldExvZ2dlZEluVXNlcigpXHJcbmRlZiBvYmplY3RzID0gaXFsRmFjYWRlLmZpbmRPYmplY3RzQnlJUUxBbmRTY2hlbWEoREJPLCBcIm9iamVjdFR5cGUgPSBDb21wYW55IEFORCBvYmplY3QgSEFWSU5HIG91dGJvdW5kUmVmZXJlbmNlcyhvYmplY3RUeXBlID0gU3VwcGxpZXIgQU5EIG9iamVjdCBIQVZJTkcgaW5ib3VuZFJlZmVyZW5jZXMob2JqZWN0VHlwZSA9IFN1cHBsaWVyX1RlY2huaWNpYW4gQU5EIFRFQ0hfQUNDT1VOVCA9IFxcXCJcIiArIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoY3VycmVudFVzZXIpLnRvU3RyaW5nKCkgKyBcIlxcXCIpKVwiKVxyXG5sb2cuZGVidWcgXCJpcWw6IFwiICsgXCJvYmplY3RUeXBlPUNvbXBhbnkgQU5EIG9iamVjdCBIQVZJTkcgb3V0Ym91bmRSZWZlcmVuY2VzKG9iamVjdFR5cGUgPSBTdXBwbGllciBBTkQgb2JqZWN0IEhBVklORyBpbmJvdW5kUmVmZXJlbmNlcyhvYmplY3RUeXBlID0gU3VwcGxpZXJfVGVjaG5pY2lhbiBBTkQgVEVDSF9BQ0NPVU5UID0gXFxcIlwiICsgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShjdXJyZW50VXNlcikudG9TdHJpbmcoKSArIFwiXFxcIikpXCJcclxuXHJcbmlmKG9iamVjdHMgJiYgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZSh0a3RGcm9tTW9iaWxlKS50b1N0cmluZygpLmVxdWFscyhcIlRSQVZFTF9IT01FXCIpKXtcclxuICAgIGxvZy5kZWJ1ZyBvYmplY3RzWzBdXHJcbiAgICBcclxuICAgIGRlZiBjb21wYW55PW9iamVjdHNbMF0udG9TdHJpbmcoKVxyXG4gICAgZGVmIGNvbXBhbnlLZXkgPSBjb21wYW55LnN1YnN0cmluZyhjb21wYW55Lmxhc3RJbmRleE9mKCcoJykrMSxjb21wYW55Lmxhc3RJbmRleE9mKCcpJykpXHJcbiAgICBkZWYgY29tcGFueU5hbWUgPSBjb21wYW55LnN1YnN0cmluZygwLGNvbXBhbnkubGFzdEluZGV4T2YoJygnKS0xKVxyXG4gICAgZGVmIGNvbXBhbnlPYmplY3QgPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEJlYW4oY29tcGFueUtleSlcclxuICAgIGxvZy5pbmZvIFwidGVjaEtleTogXCIgKyBjb21wYW55S2V5XHJcbiAgICBsb2cuaW5mbyAoXCJ0ZWNoTmFtZTogXCIgKyBjb21wYW55TmFtZSlcclxuICAgIGxvZy5pbmZvIChcInRlY2hPYmplY3Q6IFwiICsgY29tcGFueU9iamVjdClcclxuICAgIFxyXG4gICAgb2JqZWN0cyA9IGlxbEZhY2FkZS5maW5kT2JqZWN0c0J5SVFMQW5kU2NoZW1hKERCTywgXCJvYmplY3RUeXBlID0gXFxcIkluZGlyZWN0IFRhc2tcXFwiIEFORCBDT01QQU5ZX1JFRi5LZXkgPSBcIiArIGNvbXBhbnlLZXkudG9TdHJpbmcoKSArIFwiIEFORCBUUkFWRUxfSE9NRSA9IHRydWVcIilcclxuICAgIGxvZy5kZWJ1ZyBcImlxbDogXCIgKyBcIm9iamVjdFR5cGUgPSBcXFwiSW5kaXJlY3QgVGFza1xcXCIgQU5EIENPTVBBTllfUkVGLktleSA9IFwiICsgY29tcGFueUtleS50b1N0cmluZygpICsgXCIgQU5EIFRSQVZFTF9IT01FID0gdHJ1ZVwiXHJcblxyXG4gICAgaWYob2JqZWN0cyl7XHJcbiAgICAgICAgbG9nLmRlYnVnIG9iamVjdHNbMF1cclxuICAgICAgICBkZWYgaW5kVGFza0xpc3QgPSBuZXcgQXJyYXlMaXN0KClcclxuICAgIFx0aW5kVGFza0xpc3QuYWRkKG9iamVjdHNbMF0pXHJcbiAgICAgICAgXHJcbiAgICAgICAgTXV0YWJsZUlzc3VlIG1pID0gKE11dGFibGVJc3N1ZSkgaXNzdWU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbWkuc2V0Q3VzdG9tRmllbGRWYWx1ZShpbmRpcmVjdFRhc2ssIGluZFRhc2tMaXN0KTtcclxuICAgIFx0Q29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKCkudXBkYXRlSXNzdWUodXNlciwgbWksIEV2ZW50RGlzcGF0Y2hPcHRpb24uRE9fTk9UX0RJU1BBVENILCBmYWxzZSk7XHJcbiAgICB9XHJcbn0iLCJzY3JpcHRQYXRoIjpudWxsfQ==</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">5c3ef646-602e-4205-a405-e79da25fde50</arg>
              <arg name="FIELD_NOTES">YCFgSW5oZXJpdCBTQVBfU0VSVklDRV9PUkRFUiBmcm9tIHNlbGVjdGVkICJJbmRpcmVjdCBUYXNrIiArIGNvbXBsZXRlIE9QX1RFQ0hOSUNJQU5TX09OU0lURSArIGNvbXBsZXRlIE9QX0lOVEVSTkFMX1NVUFBMSUVS</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">23ba69ed-2399-4e0c-8fe4-a9c26c55b908</arg>
              <arg name="FIELD_NOTES">YCFgUG9wb2xhdGUgT1BfSU5URVJOQUxfVEVDSE5JQ0lBTlMgZnJvbSBpc3N1ZSdzIE9QX0NVUlJFTlRfVVNFUg==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTtcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5NdXRhYmxlSXNzdWU7XHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuZXZlbnQudHlwZS5FdmVudERpc3BhdGNoT3B0aW9uO1xyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcclxuaW1wb3J0IGNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuc2VydmljZXMubW9kZWwuT2JqZWN0QmVhbjtcclxuaW1wb3J0IGNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdEZhY2FkZTtcclxuaW1wb3J0IGNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLklRTEZhY2FkZTtcclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXHJcblxyXG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcclxuUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKVxyXG5TdHJpbmcgcGF0aERpclByb3BlcnRpZXMgPSBTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpXHJcbmxvZy5kZWJ1ZyBcIlBlcmNvcnNvIHByb3BlcnRpZXM6ICR7cGF0aERpclByb3BlcnRpZXN9XCJcclxuRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFwiJHtwYXRoRGlyUHJvcGVydGllc30vb3Bwcm9qZWN0LnByb3BlcnRpZXNcIilcclxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcclxuXHRwcm9wZXJ0aWVzLmxvYWQoaXQpXHJcbn1cclxuLyogR2V0IEluc2lnaHQgT2JqZWN0IEZhY2FkZSBmcm9tIHBsdWdpbiBhY2Nlc3NvciAqL1xyXG5DbGFzczxPYmplY3RGYWNhZGU+IG9iamVjdEZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdEZhY2FkZVwiKVxyXG5kZWYgb2JqZWN0RmFjYWRlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKG9iamVjdEZhY2FkZUNsYXNzKTtcclxuXHJcbi8qIEdldCBJUUwgRmFjYWRlIGZyb20gcGx1Z2luIGFjY2Vzc29yICovXHJcbkNsYXNzPElRTEZhY2FkZT4gaXFsRmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKFwiY29tLnJpYWRhbGFicy5qaXJhLnBsdWdpbnMuaW5zaWdodC5jaGFubmVsLmV4dGVybmFsLmFwaS5mYWNhZGUuSVFMRmFjYWRlXCIpO1xyXG5kZWYgaXFsRmFjYWRlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKGlxbEZhY2FkZUNsYXNzKTtcclxuXHJcbi8vIGRlYnVnZ2luZ1xyXG4vL0lzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKVxyXG4vL0lzc3VlIGlzc3VlID0gaXNzdWVNYW5hZ2VyLmdldElzc3VlQnlLZXlJZ25vcmVDYXNlKFwiQUFTLTIyNjE2M1wiKVxyXG5cclxuaW50IE9QQUEgPSBwcm9wZXJ0aWVzWydpc2NoZW1hLmFhLmlkJ10udG9TdHJpbmcoKS50b0ludGVnZXIoKVxyXG5sb2cuZGVidWcgXCJTY2hlbWFzIGZvdW5kOiBPUEFBPSR7T1BBQX0vXCJcclxuXHJcbmRlZiBjdXJyZW50T1BVc2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfQ1VSUkVOVF9VU0VSXCIpWzBdXHJcbmRlZiBpbnRlcm5hbFRlY2ggPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUoXCJPUF9JTlRFUk5BTF9URUNITklDSUFOU1wiKVswXVxyXG5cclxubG9nLmRlYnVnIFwiY3VycmVudE9QVXNlcjogJHtjdXJyZW50T1BVc2VyfVwiXHJcbmxvZy5kZWJ1ZyBcImludGVybmFsVGVjaDogJHtpbnRlcm5hbFRlY2h9XCJcclxuXHJcblN0cmluZyBjdXJyZW50T1BVc2VyVmFsdWUgPSBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGN1cnJlbnRPUFVzZXIpXHJcbmxvZy5kZWJ1ZyBcImN1cnJlbnRPUFVzZXJWYWx1ZTogJHtjdXJyZW50T1BVc2VyVmFsdWV9XCJcclxuaWYgKGN1cnJlbnRPUFVzZXJWYWx1ZSA9PSBudWxsKSB7XHJcbiAgICBsb2cuZXJyb3IgXCI9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVwiXHJcbiAgICBsb2cuZXJyb3IgXCJObyBkYXRhIGZvdW5kIGZvciAnJHtjdXJyZW50T1BVc2VyfScgb24gaXNzdWUgJyR7aXNzdWV9J1wiXHJcbiAgICBsb2cuZXJyb3IgXCI9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVwiXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbi8vIC0tLSBHZXN0aW9uZSBPUF9JTlRFUk5BTF9URUNITklDSUFOUyA6IHJlY3VwZXJvIGwnb2dnZXR0byBkZWwgdGVjaG5pY2lhbiBhIHBhcnRpcmUgZGEgT1BfQ1VSUkVOVF9VU0VSIHBlciBwb3BvbGFyZSBpbCBjYW1wb1xyXG5sb2cuaW5mbyBcIk1hbmFnaW5nICR7aW50ZXJuYWxUZWNofSA6IHVwZGF0aW5nIGl0IGZyb20gJHtjdXJyZW50T1BVc2VyfSwgcmV0cmlldmluZyBpdCB3aXRoIGZvbGxvd2luZyBJUUwuLi5cIlxyXG5maW5hbCBTdHJpbmcgSVFMX0ZJTkRfT0JKID0gXCJvYmplY3RUeXBlID0gVGVjaG5pY2lhbiBBTkQgVEVDSE5JQ0lBTl9SRUYuVEVDSF9BQ0NPVU5UID0gXFxcIiR7Y3VycmVudE9QVXNlclZhbHVlfVxcXCJcIlxyXG5sb2cuaW5mbyBcIklRTDogJHtJUUxfRklORF9PQkp9XCJcclxuTGlzdDxPYmplY3RCZWFuPiBvYmplY3RzID0gaXFsRmFjYWRlLmZpbmRPYmplY3RzQnlJUUxBbmRTY2hlbWEoT1BBQSwgSVFMX0ZJTkRfT0JKKVxyXG5sb2cuaW5mbyBcIkZvdW5kIGFycmF5IG9mIHRlY2huaWNpYW5zOiAke29iamVjdHN9XCJcclxuaWYgKG9iamVjdHMgIT0gbnVsbCAmJiAhb2JqZWN0cy5pc0VtcHR5KCkpe1xyXG4gICAgZGVmIG9iakFycmF5ID0gbmV3IEFycmF5TGlzdCgpXHJcblxyXG4gICAgT2JqZWN0QmVhbiBmaXJzdE9iaiA9IG9iamVjdHNbMF07XHJcbiAgICBsb2cuZGVidWcgXCJHZXR0aW5nIGZpcnN0IHRlY2huaWNpYW4gZm91bmQ6ICR7Zmlyc3RPYmp9IChpZDogJHtmaXJzdE9iai5pZH0pXCJcclxuICAgIGRlZiBvYmogPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEJlYW4oZmlyc3RPYmouaWQpXHJcbiAgICBvYmpBcnJheS5hZGQob2JqKVxyXG5cclxuICAgIE11dGFibGVJc3N1ZSBtaSA9IChNdXRhYmxlSXNzdWUpIGlzc3VlO1xyXG4gICAgZGVmIHVzZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRKaXJhQXV0aGVudGljYXRpb25Db250ZXh0KCkuZ2V0TG9nZ2VkSW5Vc2VyKClcclxuICAgIG1pLnNldEN1c3RvbUZpZWxkVmFsdWUoaW50ZXJuYWxUZWNoLCBvYmpBcnJheSk7XHJcbiAgICBsb2cuZGVidWcgXCJVcGRhdGluZyBpc3N1ZSAke2lzc3VlfSB3aXRoICR7aW50ZXJuYWxUZWNofSA9ICR7b2JqfVwiXHJcbiAgICBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKS51cGRhdGVJc3N1ZSh1c2VyLCBtaSwgRXZlbnREaXNwYXRjaE9wdGlvbi5ET19OT1RfRElTUEFUQ0gsIGZhbHNlKTtcclxufSBlbHNlIHtcclxuICAgIGxvZy5lcnJvciBcIj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XCJcclxuICAgIGxvZy5lcnJvciBcIk5vIHRlY2huaWNpYW5zIGZvdW5kIGZvciAnJHtjdXJyZW50T1BVc2VyVmFsdWV9JywgdGhlIGN1c3RvbWZpZWxkICR7aW50ZXJuYWxUZWNofSB3b250IGJlIHVwZGF0ZWRcIlxyXG4gICAgbG9nLmVycm9yIFwiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cIlxyXG59Iiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">c6841979-f503-445c-a9d1-cfe22f4fcced</arg>
              <arg name="FIELD_ACTION">31 Assign to Technician</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.FasttrackTransition</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.FasttrackTransition</arg>
              <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLnVzZXIuQXBwbGljYXRpb25Vc2VyXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3JcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXJcclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXHJcblxyXG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcclxuUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKVxyXG5TdHJpbmcgcGF0aERpclByb3BlcnRpZXMgPSBTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpXHJcbmxvZy5kZWJ1ZyBcIlBlcmNvcnNvIHByb3BlcnRpZXM6ICR7cGF0aERpclByb3BlcnRpZXN9XCJcclxuRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFwiJHtwYXRoRGlyUHJvcGVydGllc30vb3Bwcm9qZWN0LnByb3BlcnRpZXNcIilcclxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcclxuXHRwcm9wZXJ0aWVzLmxvYWQoaXQpXHJcbn1cclxuXHJcbi8vIERlYnVnZ2luZyBwdXJwb3Nlc1xyXG4vL0lzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKVxyXG4vL0lzc3VlIGlzc3VlID0gaXNzdWVNYW5hZ2VyLmdldElzc3VlQnlLZXlJZ25vcmVDYXNlKFwiQUFTLTIyNjE2M1wiKVxyXG5cclxuLy8gLS0tIFJldHJpZXZlIEN1c3RvbWZpZWxkcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuZGVmIGdyb3VwTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEdyb3VwTWFuYWdlcigpXHJcbmRlZiB1c2VyTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldFVzZXJNYW5hZ2VyKClcclxuZGVmIGN1cnJlbnRPUFVzZXJDUyA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUoXCJPUF9DVVJSRU5UX1VTRVJcIilbMF1cclxuZGVmIHRrdEZyb21Nb2JpbGUgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfVEtUX0ZST01fTU9CSUxFXCIpWzBdXHJcblxyXG4vLyAtLS0gUmV0cmlldmUgdmFsdWVzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5maW5hbCBTdHJpbmcgY3VycmVudE9QVXNyVmFsdWUgPSBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGN1cnJlbnRPUFVzZXJDUylcclxuZmluYWwgU3RyaW5nIHRrdEZyb21Nb2JpbGVWYWx1ZSA9IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUodGt0RnJvbU1vYmlsZSlcclxubG9nLmRlYnVnIFwiY3VycmVudFVzclZhbHVlIDogJHtjdXJyZW50T1BVc3JWYWx1ZX1cIlxyXG5sb2cuZGVidWcgXCJ0a3RGcm9tTW9iaWxlVmFsdWUgOiAke3RrdEZyb21Nb2JpbGVWYWx1ZX1cIlxyXG5cclxuZmluYWwgU3RyaW5nIHNlcnZpY2VUZWNoID0gXCJPUFJPTEVfQUFfU0VSVklDRVRFQ0hcIlxyXG5BcHBsaWNhdGlvblVzZXIgY3VycmVudE9QVXNlciA9IHVzZXJNYW5hZ2VyLmdldFVzZXJCeU5hbWUoY3VycmVudE9QVXNyVmFsdWUpXHJcblxyXG5maW5hbCBib29sZWFuIGlzTm90VHJhdmVsSG9tZSA9ICFcIlRSQVZFTF9IT01FXCIuZXF1YWxzKHRrdEZyb21Nb2JpbGVWYWx1ZSlcclxuZmluYWwgYm9vbGVhbiBpc0N1cnJlbnRPUFVzZXJJblNlcnZpY2V0ZWNoR3JvdXAgPSBjdXJyZW50T1BVc2VyICE9IG51bGwgJiYgZ3JvdXBNYW5hZ2VyLmdldFVzZXJzSW5Hcm91cChzZXJ2aWNlVGVjaCkuY29udGFpbnMoY3VycmVudE9QVXNlcilcclxuZmluYWwgYm9vbGVhbiBwcm9jZWVkVG9OZXh0ID0gaXNOb3RUcmF2ZWxIb21lICYmIGlzQ3VycmVudE9QVXNlckluU2VydmljZXRlY2hHcm91cFxyXG5sb2cuZGVidWcgXCJDb25kaXRpb24gcmVzb2x2ZWQgYXMgJHtwcm9jZWVkVG9OZXh0fTogKGlzTm90VHJhdmVsSG9tZTogJHtpc05vdFRyYXZlbEhvbWV9ICYmIGlzQ3VycmVudE9QVXNlckluU2VydmljZXRlY2hHcm91cDogJHtpc0N1cnJlbnRPUFVzZXJJblNlcnZpY2V0ZWNoR3JvdXB9KVwiXHJcbnJldHVybiBwcm9jZWVkVG9OZXh0Iiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_TRANSITION_OPTIONS">FIELD_SKIP_CONDITIONS|||FIELD_SKIP_PERMISSIONS|||FIELD_SKIP_VALIDATORS</arg>
              <arg name="FIELD_ADDITIONAL_SCRIPT"></arg>
              <arg name="events"></arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">39101844-24ad-46de-9116-8f7bd9de5e9f</arg>
              <arg name="FIELD_ACTION">11 Stop Working</arg>
              <arg name="FIELD_NOTES">YCFg</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.FasttrackTransition</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.FasttrackTransition</arg>
              <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJkZWYgb3BUa3RGcm9tTW9iaWxlVmFsdWUgPSBjZlZhbHVlc1snT1BfVEtUX0ZST01fTU9CSUxFJ10/LnZhbHVlXHJcbmxvZy5kZWJ1ZyBcIk9QX1RLVF9GUk9NX01PQklMRSA9ICR7b3BUa3RGcm9tTW9iaWxlVmFsdWV9XCJcclxuXHJcbnJldHVybiBvcFRrdEZyb21Nb2JpbGVWYWx1ZSA9PSAnVFJBVkVMX0hPTUUnIiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_TRANSITION_OPTIONS">FIELD_SKIP_CONDITIONS|||FIELD_SKIP_PERMISSIONS</arg>
              <arg name="events"></arg>
              <arg name="FIELD_ADDITIONAL_SCRIPT"></arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="maxAllowed-integerValue"></arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="uuid">63e942dd-71be-4dae-9846-2b4863cbd27e</arg>
              <arg name="field">customfield_23237</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
            <function type="class">
              <arg name="conditionList">3</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
              <arg name="comparisonType">1</arg>
              <arg name="precondition">true</arg>
              <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
              <arg name="preconditionNegateResult-booleanValue"></arg>
              <arg name="uuid">f2e432c3-7408-4cdb-8165-35b70273e3a2</arg>
              <arg name="fieldValue">TRAVEL_HOME</arg>
              <arg name="preconditionMode-textValue">DISCARD</arg>
              <arg name="fieldsList">customfield_23933</arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="append.value"></arg>
              <arg name="maxAllowed-integerValue"></arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field.value">%%CURRENT_DATETIME%%</arg>
              <arg name="uuid">fdd23588-3270-4566-a5a5-053895638c08</arg>
              <arg name="field.name">customfield_22628</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
              <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </initial-actions>
  <global-actions>
    <action id="51" name="Rejected">
      <meta name="jira.description"></meta>
      <meta name="jira.fieldscreen.id"></meta>
      <results>
        <unconditional-result old-status="null" status="null" step="5">
          <post-functions>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">6f1f7ccc-7fa5-4172-a401-dfe2a3b8f28a</arg>
              <arg name="FIELD_NOTES">YCFgIFVwZGF0ZSBKT0JfQ09NUExFVEVEIG9uIElORElSRUNUIFRBU0sgJiYgVXBkYXRlIFNPIA==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </global-actions>
  <common-actions>
    <action id="11" name="Stop Working" view="fieldscreen">
      <meta name="jira.description"></meta>
      <meta name="jira.fieldscreen.id">19908</meta>
      <validators>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">50ecadd2-211d-42c2-a150-5098f76a0bd8</arg>
          <arg name="FIELD_NOTES">YCFgVXBkYXRlIEpPQl9DT01QTEVURUQgb24gSU5ESVJFQ1QgVEFTSyAmJiBVcGRhdGUgU08=</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="null" status="null" step="2">
          <post-functions>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
            <function type="class">
              <arg name="conditionList">3</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
              <arg name="comparisonType">1</arg>
              <arg name="precondition">true</arg>
              <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
              <arg name="preconditionNegateResult-booleanValue"></arg>
              <arg name="uuid">b7234fb1-a9c4-4ec7-b27d-5bc729e9802d</arg>
              <arg name="fieldValue"></arg>
              <arg name="preconditionMode-textValue">DISCARD</arg>
              <arg name="fieldsList">customfield_22628</arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="append.value"></arg>
              <arg name="maxAllowed-integerValue"></arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field.value">%%CURRENT_DATETIME%%</arg>
              <arg name="uuid">24e9ce6f-bfb6-4e89-be35-2a93b5e7d6bb</arg>
              <arg name="field.name">customfield_22628</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
              <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </common-actions>
  <steps>
    <step id="1" name="Open">
      <meta name="jira.status.id">1</meta>
      <actions>
<common-action id="11" />
        <action id="31" name="Assign to Technician" view="fieldscreen">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">20117</meta>
          <results>
            <unconditional-result old-status="null" status="null" step="3">
              <post-functions>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="uuid">ae5404dc-89b8-47ff-a3fd-c6eeec5ad699</arg>
                  <arg name="fieldValue"></arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">customfield_23619</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="append.value"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="uuid">04b8cc45-0422-40c5-8f5e-eb1363f9cc5d</arg>
                  <arg name="field.name">customfield_23619</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="uuid">7ed8f248-f9bd-40b5-b04c-c229aaec7f7e</arg>
                  <arg name="field">customfield_23237</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="field.copyFieldSource2"></arg>
                  <arg name="field.copyFieldSource1">customfield_23236</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="field.createTargetValue1"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyFieldMode1">OVERWRITE</arg>
                  <arg name="uuid">028c2ca2-35a9-495f-b998-a6bf92dc0722</arg>
                  <arg name="field.copyFieldDestination1">customfield_22653</arg>
                  <arg name="field.copyFieldSeparator1"></arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescopyValueFromOtherField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.CopyValueFromOtherFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="61" name="Stop Working - UK" view="fieldscreen">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19908</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">67f024c1-3d38-44a7-9231-ba2cd143ae5b</arg>
                <arg name="FIELD_INVERT_CONDITION"></arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_USER_IDS">arianna.fabbri|||JIRAUSER58800</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">fbd4cd66-b9a4-46a6-a0df-35f427804e1c</arg>
              <arg name="FIELD_NOTES">YCFgVXBkYXRlIFNP</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="2">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="71" name="Refresh - UK" view="fieldscreen">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19908</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">67f024c1-3d38-44a7-9231-ba2cd143ae5b</arg>
                <arg name="FIELD_INVERT_CONDITION"></arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_USER_IDS">arianna.fabbri|||JIRAUSER58800</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">074c68c1-59e7-47b4-bd13-f756a462af64</arg>
              <arg name="FIELD_NOTES">YCFgQ29tcGxldGUgT1BfSU5ESVJFQ1RfSk9CIGZvciBUUkFWRUwgSE9NRSBsb2dzIGFycml2aW5nIGZyb20gbW9iaWxl</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvclxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlO1xyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmV2ZW50LnR5cGUuRXZlbnREaXNwYXRjaE9wdGlvbjtcclxuaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouTGV2ZWxcclxuaW1wb3J0IGphdmEuc3FsLlRpbWVzdGFtcFxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlclxyXG5cclxuUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKVxyXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoJy92YXIvYXRsYXNzaWFuL2FwcGxpY2F0aW9uLWRhdGEvc2hhcmVkL3NjcmlwdHMvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxyXG5wcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0ge1xyXG5cdHByb3BlcnRpZXMubG9hZChpdClcclxufVxyXG4vKiBHZXQgSW5zaWdodCBPYmplY3QgRmFjYWRlIGZyb20gcGx1Z2luIGFjY2Vzc29yICovXHJcbkNsYXNzIG9iamVjdEZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdEZhY2FkZVwiKTsgXHJcbmRlZiBvYmplY3RGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0RmFjYWRlQ2xhc3MpO1xyXG4gIFxyXG4vKiBHZXQgSW5zaWdodCBPYmplY3QgVHlwZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cclxuQ2xhc3Mgb2JqZWN0VHlwZUZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdFR5cGVGYWNhZGVcIik7IFxyXG5kZWYgb2JqZWN0VHlwZUZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShvYmplY3RUeXBlRmFjYWRlQ2xhc3MpO1xyXG4gIFxyXG4vKiBHZXQgSW5zaWdodCBPYmplY3QgQXR0cmlidXRlIEZhY2FkZSBmcm9tIHBsdWdpbiBhY2Nlc3NvciAqL1xyXG5DbGFzcyBvYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKFwiY29tLnJpYWRhbGFicy5qaXJhLnBsdWdpbnMuaW5zaWdodC5jaGFubmVsLmV4dGVybmFsLmFwaS5mYWNhZGUuT2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZVwiKTsgXHJcbmRlZiBvYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyk7XHJcbiAgXHJcbkNsYXNzIG9iamVjdEF0dHJpYnV0ZUJlYW5GYWN0b3J5Q2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKFwiY29tLnJpYWRhbGFicy5qaXJhLnBsdWdpbnMuaW5zaWdodC5zZXJ2aWNlcy5tb2RlbC5mYWN0b3J5Lk9iamVjdEF0dHJpYnV0ZUJlYW5GYWN0b3J5XCIpOyBcclxuZGVmIG9iamVjdEF0dHJpYnV0ZUJlYW5GYWN0b3J5ID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKG9iamVjdEF0dHJpYnV0ZUJlYW5GYWN0b3J5Q2xhc3MpO1xyXG5DbGFzcyBpcWxGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5JUUxGYWNhZGVcIik7IFxyXG5kZWYgaXFsRmFjYWRlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKGlxbEZhY2FkZUNsYXNzKTtcclxuXHJcbmRlZiBjdXJyZW50VXNlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShcIk9QX0NVUlJFTlRfVVNFUlwiKVswXVxyXG5kZWYgdGt0RnJvbU1vYmlsZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShcIk9QX1RLVF9GUk9NX01PQklMRVwiKVswXTtcclxuZGVmIHRrdFZpc0tleSA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShcIk9QX1RLVF9WSVNJQklMSVRZX0tFWVwiKVswXTtcclxuXHJcbmRlZiBpbmRpcmVjdFRhc2sgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUoXCJPUF9JTkRJUkVDVF9KT0JcIilbMF07XHJcbmludCBPUEFBID0gcHJvcGVydGllc1snaXNjaGVtYS5hYS5pZCddLnRvU3RyaW5nKCkudG9JbnRlZ2VyKClcclxuaW50IERCTyA9IHByb3BlcnRpZXNbJ2lzY2hlbWEuZGJvLmlkJ10udG9TdHJpbmcoKS50b0ludGVnZXIoKVxyXG5cclxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpXHJcbi8vSXNzdWUgaXNzdWUgPSBpc3N1ZU1hbmFnZXIuZ2V0SXNzdWVCeUtleUlnbm9yZUNhc2UoXCJBQVMtNDE5MThcIilcclxuXHJcbmRlZiB1c2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SmlyYUF1dGhlbnRpY2F0aW9uQ29udGV4dCgpLmdldExvZ2dlZEluVXNlcigpXHJcbmRlZiBvYmplY3RzID0gaXFsRmFjYWRlLmZpbmRPYmplY3RzQnlJUUxBbmRTY2hlbWEoREJPLCBcIm9iamVjdFR5cGUgPSBDb21wYW55IEFORCBvYmplY3QgSEFWSU5HIG91dGJvdW5kUmVmZXJlbmNlcyhvYmplY3RUeXBlID0gU3VwcGxpZXIgQU5EIG9iamVjdCBIQVZJTkcgaW5ib3VuZFJlZmVyZW5jZXMob2JqZWN0VHlwZSA9IFN1cHBsaWVyX1RlY2huaWNpYW4gQU5EIFRFQ0hfQUNDT1VOVCA9IFxcXCJcIiArIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoY3VycmVudFVzZXIpLnRvU3RyaW5nKCkgKyBcIlxcXCIpKVwiKVxyXG5sb2cuZGVidWcgXCJpcWw6IFwiICsgXCJvYmplY3RUeXBlPUNvbXBhbnkgQU5EIG9iamVjdCBIQVZJTkcgb3V0Ym91bmRSZWZlcmVuY2VzKG9iamVjdFR5cGUgPSBTdXBwbGllciBBTkQgb2JqZWN0IEhBVklORyBpbmJvdW5kUmVmZXJlbmNlcyhvYmplY3RUeXBlID0gU3VwcGxpZXJfVGVjaG5pY2lhbiBBTkQgVEVDSF9BQ0NPVU5UID0gXFxcIlwiICsgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShjdXJyZW50VXNlcikudG9TdHJpbmcoKSArIFwiXFxcIikpXCJcclxuXHJcbmlmKG9iamVjdHMgJiYgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZSh0a3RGcm9tTW9iaWxlKS50b1N0cmluZygpLmVxdWFscyhcIlRSQVZFTF9IT01FXCIpKXtcclxuICAgIGxvZy5kZWJ1ZyBvYmplY3RzWzBdXHJcbiAgICBcclxuICAgIGRlZiBjb21wYW55PW9iamVjdHNbMF0udG9TdHJpbmcoKVxyXG4gICAgZGVmIGNvbXBhbnlLZXkgPSBjb21wYW55LnN1YnN0cmluZyhjb21wYW55Lmxhc3RJbmRleE9mKCcoJykrMSxjb21wYW55Lmxhc3RJbmRleE9mKCcpJykpXHJcbiAgICBkZWYgY29tcGFueU5hbWUgPSBjb21wYW55LnN1YnN0cmluZygwLGNvbXBhbnkubGFzdEluZGV4T2YoJygnKS0xKVxyXG4gICAgZGVmIGNvbXBhbnlPYmplY3QgPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEJlYW4oY29tcGFueUtleSlcclxuICAgIGxvZy5pbmZvIFwidGVjaEtleTogXCIgKyBjb21wYW55S2V5XHJcbiAgICBsb2cuaW5mbyAoXCJ0ZWNoTmFtZTogXCIgKyBjb21wYW55TmFtZSlcclxuICAgIGxvZy5pbmZvIChcInRlY2hPYmplY3Q6IFwiICsgY29tcGFueU9iamVjdClcclxuICAgIFxyXG4gICAgb2JqZWN0cyA9IGlxbEZhY2FkZS5maW5kT2JqZWN0c0J5SVFMQW5kU2NoZW1hKERCTywgXCJvYmplY3RUeXBlID0gXFxcIkluZGlyZWN0IFRhc2tcXFwiIEFORCBDT01QQU5ZX1JFRi5LZXkgPSBcIiArIGNvbXBhbnlLZXkudG9TdHJpbmcoKSArIFwiIEFORCBUUkFWRUxfSE9NRSA9IHRydWVcIilcclxuICAgIGxvZy5kZWJ1ZyBcImlxbDogXCIgKyBcIm9iamVjdFR5cGUgPSBcXFwiSW5kaXJlY3QgVGFza1xcXCIgQU5EIENPTVBBTllfUkVGLktleSA9IFwiICsgY29tcGFueUtleS50b1N0cmluZygpICsgXCIgQU5EIFRSQVZFTF9IT01FID0gdHJ1ZVwiXHJcblxyXG4gICAgaWYob2JqZWN0cyl7XHJcbiAgICAgICAgbG9nLmRlYnVnIG9iamVjdHNbMF1cclxuICAgICAgICBkZWYgaW5kVGFza0xpc3QgPSBuZXcgQXJyYXlMaXN0KClcclxuICAgIFx0aW5kVGFza0xpc3QuYWRkKG9iamVjdHNbMF0pXHJcbiAgICAgICAgXHJcbiAgICAgICAgTXV0YWJsZUlzc3VlIG1pID0gKE11dGFibGVJc3N1ZSkgaXNzdWU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbWkuc2V0Q3VzdG9tRmllbGRWYWx1ZShpbmRpcmVjdFRhc2ssIGluZFRhc2tMaXN0KTtcclxuICAgIFx0Q29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKCkudXBkYXRlSXNzdWUodXNlciwgbWksIEV2ZW50RGlzcGF0Y2hPcHRpb24uRE9fTk9UX0RJU1BBVENILCBmYWxzZSk7XHJcbiAgICB9XHJcbn0iLCJzY3JpcHRQYXRoIjpudWxsfQ==</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">1ee27d9e-192f-4cff-8640-7f7f8e369077</arg>
              <arg name="FIELD_NOTES">YCFgSW5oZXJpdCBTQVBfU0VSVklDRV9PUkRFUiBmcm9tIHNlbGVjdGVkICJJbmRpcmVjdCBUYXNrIiArIGNvbXBsZXRlIE9QX1RFQ0hOSUNJQU5TX09OU0lURSArIGNvbXBsZXRlIE9QX0lOVEVSTkFMX1NVUFBMSUVS</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">50ecadd2-211d-42c2-a150-5098f76a0bd8</arg>
              <arg name="FIELD_NOTES">YCFgVXBkYXRlIEpPQl9DT01QTEVURUQgb24gSU5ESVJFQ1QgVEFTSyAmJiBVcGRhdGUgU08=</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="1">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="2" name="Closed">
      <meta name="jira.status.id">6</meta>
      <actions>
        <action id="21" name="riapri">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <results>
            <unconditional-result old-status="null" status="null" step="1">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="3" name="Assigned to Technician">
      <meta name="jira.status.id">14927</meta>
      <actions>
        <action id="41" name="Start Working" view="fieldscreen">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19908</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">bd6bec59-bbf2-4faa-9167-ef85631b1c07</arg>
              <arg name="FIELD_NOTES">YCFgQ2hlY2sgYWN0aXZpdGllcyBpbiBwcm9ncmVzcyB0byBhbGxvdyBzdGFydCB3b3JraW5nIG9uIGluZGlyZWN0IHRhc2s=</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlXHJcbmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvblxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvclxyXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxyXG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvbkJ1aWxkZXJcclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVNYW5hZ2VyXHJcbmltcG9ydCBqYXZhLnRleHQuU2ltcGxlRGF0ZUZvcm1hdCBcclxuaW1wb3J0IGphdmEudXRpbC5EYXRlXHJcblxyXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXHJcbkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpXHJcbnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7XHJcblx0cHJvcGVydGllcy5sb2FkKGl0KVxyXG59XHJcblxyXG5Jc3N1ZU1hbmFnZXIgaXNzdWVNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKCk7XHJcbi8vSXNzdWUgaXNzdWUgPSBpc3N1ZU1hbmFnZXIuZ2V0SXNzdWVCeUtleUlnbm9yZUNhc2UoXCJBQVMtNDE5MTBcIilcclxuXHJcbmRlZiBlcnJvcnMgPSBmYWxzZVxyXG5kZWYgd2FybmluZ3MgPSBmYWxzZVxyXG5cclxuLyogR2V0IEluc2lnaHQgT2JqZWN0IEZhY2FkZSBmcm9tIHBsdWdpbiBhY2Nlc3NvciAqL1xyXG5DbGFzcyBvYmplY3RGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RGYWNhZGVcIik7IFxyXG5kZWYgb2JqZWN0RmFjYWRlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKG9iamVjdEZhY2FkZUNsYXNzKTtcclxuICBcclxuLyogR2V0IEluc2lnaHQgT2JqZWN0IFR5cGUgRmFjYWRlIGZyb20gcGx1Z2luIGFjY2Vzc29yICovXHJcbkNsYXNzIG9iamVjdFR5cGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlRmFjYWRlXCIpOyBcclxuZGVmIG9iamVjdFR5cGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUZhY2FkZUNsYXNzKTtcclxuICBcclxuLyogR2V0IEluc2lnaHQgT2JqZWN0IEF0dHJpYnV0ZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cclxuQ2xhc3Mgb2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVcIik7IFxyXG5kZWYgb2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShvYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlQ2xhc3MpO1xyXG4gIFxyXG5DbGFzcyBvYmplY3RBdHRyaWJ1dGVCZWFuRmFjdG9yeUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuc2VydmljZXMubW9kZWwuZmFjdG9yeS5PYmplY3RBdHRyaWJ1dGVCZWFuRmFjdG9yeVwiKTsgXHJcbmRlZiBvYmplY3RBdHRyaWJ1dGVCZWFuRmFjdG9yeSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShvYmplY3RBdHRyaWJ1dGVCZWFuRmFjdG9yeUNsYXNzKTtcclxuQ2xhc3MgaXFsRmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKFwiY29tLnJpYWRhbGFicy5qaXJhLnBsdWdpbnMuaW5zaWdodC5jaGFubmVsLmV4dGVybmFsLmFwaS5mYWNhZGUuSVFMRmFjYWRlXCIpOyBcclxuZGVmIGlxbEZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShpcWxGYWNhZGVDbGFzcyk7XHJcblxyXG5cclxuZGVmIGN1cnJlbnRVc2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfQ1VSUkVOVF9VU0VSXCIpWzBdXHJcbmRlZiBvblNpdGVUZWNoc1RyYWNlRmllbGQgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUoXCJPUF9URUNITklDSUFOX0FDVElWSVRJRVNfVFJBQ0VcIilbMF07XHJcbmRlZiBvblNpdGVUZWNoc1RyYXZlbEZpZWxkID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfVEVDSE5JQ0lBTl9UUkFWRUxcIilbMF07XHJcbmRlZiBPblNpdGVUZWNoT2JqZWN0cyA9IG5ldyBBcnJheUxpc3QoKTtcclxuaW50IE9QQUEgPSBwcm9wZXJ0aWVzWydpc2NoZW1hLmFhLmlkJ10udG9TdHJpbmcoKS50b0ludGVnZXIoKVxyXG5pbnQgREJPID0gcHJvcGVydGllc1snaXNjaGVtYS5kYm8uaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXHJcblxyXG4vKiAtLS0tLS0tLS0tLS0gREVGSU5FIEFDVElPTiBUTyBCRSBUUkFDRUQgQU5EIFNFVCBUTyBCRSBET05FIC0tLS0tLS0tLS0tLS0gKi9cclxuZGVmIEFDVElPTiA9IHByb3BlcnRpZXNbJ3dmLnRyLmluZGlyZWN0VGFzay5hY3Rpb24nXS50b1N0cmluZygpXHJcbmRlZiBTRVQgPSBwcm9wZXJ0aWVzWyd3Zi50ci5zdGFydEluZGlyZWN0VGFzay5zZXQnXS50b1N0cmluZygpXHJcblxyXG5kZWYgT05TSVRFX1RFQ0hfUkVQT1JUX09CSl9UWVBFPXByb3BlcnRpZXNbJ2lvYmoub25TaXRlVGVjaFJlcG9ydCddLnRvU3RyaW5nKCkudG9JbnRlZ2VyKClcclxuZGVmIE9OU0lURV9URUNIX1JFUE9SVF9BVFRSX05BTUU9cHJvcGVydGllc1snaW9iai5vblNpdGVUZWNoUmVwb3J0Lm5hbWUuaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXHJcbmRlZiBPTlNJVEVfVEVDSF9SRVBPUlRfQVRUUl9URUNITklDSUFOX1JFRj1wcm9wZXJ0aWVzWydpb2JqLm9uU2l0ZVRlY2hSZXBvcnQudGVjaG5pY2lhblJlZi5pZCddLnRvU3RyaW5nKCkudG9JbnRlZ2VyKClcclxuZGVmIE9OU0lURV9URUNIX1JFUE9SVF9BVFRSX0pPQl9DT01QTEVURUQ9cHJvcGVydGllc1snaW9iai5vblNpdGVUZWNoUmVwb3J0LmpvYkNvbXBsZXRlZC5pZCddLnRvU3RyaW5nKCkudG9JbnRlZ2VyKClcclxuZGVmIE9OU0lURV9URUNIX1JFUE9SVF9BVFRSX0pPQl9TVEFSVEVEPXByb3BlcnRpZXNbJ2lvYmoub25TaXRlVGVjaFJlcG9ydC5qb2JTdGFydGVkLmlkJ10udG9TdHJpbmcoKS50b0ludGVnZXIoKVxyXG5kZWYgT05TSVRFX1RFQ0hfUkVQT1JUX0FUVFJfVFJBQ0VfQUNUSU9OPXByb3BlcnRpZXNbJ2lvYmoub25TaXRlVGVjaFJlcG9ydC50cmFjZUFjdGlvbi5pZCddLnRvU3RyaW5nKCkudG9JbnRlZ2VyKClcclxuXHJcbmRlZiBkYXRlVG9kYXkgPSBuZXcgU2ltcGxlRGF0ZUZvcm1hdChcIk0vZGQveXl5eVwiKS5mb3JtYXQobmV3IERhdGUoKSkgXHJcbmRlZiBvYmplY3RzID0gaXFsRmFjYWRlLmZpbmRPYmplY3RzQnlJUUxBbmRTY2hlbWEoT1BBQSwgXCJvYmplY3RUeXBlID0gVGVjaG5pY2lhbiBBTkQgVEVDSE5JQ0lBTl9SRUYuVEVDSF9BQ0NPVU5UID1cXFwiXCIgKyBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGN1cnJlbnRVc2VyKS50b1N0cmluZygpICsgXCJcXFwiXCIpXHJcbmxvZy53YXJuIFwiaXFsOiBcIiArIFwib2JqZWN0VHlwZSA9IFRlY2huaWNpYW4gQU5EIFRFQ0hOSUNJQU5fUkVGLlRFQ0hfQUNDT1VOVCA9XFxcIlwiICsgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShjdXJyZW50VXNlcikudG9TdHJpbmcoKSArIFwiXFxcIlwiXHJcblxyXG5mb3IodGVjaG5pY2lhbiBpbiBvYmplY3RzKXtcclxuICAgIGRlZiB0ZWNoPXRlY2huaWNpYW4udG9TdHJpbmcoKVxyXG4gICAgZGVmIHRlY2hLZXkgPSB0ZWNoLnN1YnN0cmluZyh0ZWNoLmxhc3RJbmRleE9mKCcoJykrMSx0ZWNoLmxhc3RJbmRleE9mKCcpJykpXHJcbiAgICBkZWYgdGVjaE5hbWUgPSB0ZWNoLnN1YnN0cmluZygwLHRlY2gubGFzdEluZGV4T2YoJygnKS0xKVxyXG4gICAgZGVmIHRlY2hPYmplY3QgPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEJlYW4odGVjaEtleSlcclxuICAgIGxvZy5pbmZvIFwidGVjaEtleTogXCIgKyB0ZWNoS2V5XHJcbiAgICBsb2cuaW5mbyAoXCJ0ZWNoTmFtZTogXCIgKyB0ZWNoTmFtZSlcclxuICAgIGxvZy5pbmZvIChcInRlY2hPYmplY3Q6IFwiICsgdGVjaE9iamVjdClcclxuXHJcbiAgICBvYmplY3RzID0gaXFsRmFjYWRlLmZpbmRPYmplY3RzQnlJUUxBbmRTY2hlbWEoT1BBQSwgXCJvYmplY3RUeXBlID0gT25TaXRlX1RlY2hfUmVwb3J0IEFORCBURUNITklDSUFOX1JFRi5URUNITklDSUFOX1JFRi5URUNIX0FDQ09VTlQgPVxcXCJcIiArIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoY3VycmVudFVzZXIpLnRvU3RyaW5nKCkgKyBcIlxcXCIgQU5EIEpPQl9TVEFSVEVEID49IFwiICsgZGF0ZVRvZGF5LnRvU3RyaW5nKCkgKyBcIiBPUkRFUiBCWSBKT0JfU1RBUlRFRCBERVNDXCIpXHJcbiAgICBsb2cud2FybiBcImlxbDogXCIgKyBcIm9iamVjdFR5cGUgPSBPblNpdGVfVGVjaF9SZXBvcnQgQU5EIFRFQ0hOSUNJQU5fUkVGLlRFQ0hOSUNJQU5fUkVGLlRFQ0hfQUNDT1VOVCA9XFxcIlwiICsgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShjdXJyZW50VXNlcikudG9TdHJpbmcoKSArIFwiXFxcIiBBTkQgSk9CX1NUQVJURUQgPj0gXCIgKyBkYXRlVG9kYXkudG9TdHJpbmcoKSArIFwiIE9SREVSIEJZIEpPQl9TVEFSVEVEIERFU0NcIlxyXG5cclxuICAgIGxvZy5kZWJ1ZyBvYmplY3RzXHJcbiAgICBpZihvYmplY3RzLnNpemU9PTApe1xyXG4gICAgICAgIC8qUHJpbWEgYXR0aXZpdFx1MDBlMCBkZWxsYSBnaW9ybmF0YSAtLT4gSk9CX1NUQVJURUQgPSB0aW1lIHN0YW1wIHJlYWxlKi9cclxuICAgIH1lbHNle1xyXG4gICAgICAgIC8qUmVjdXBlcm8gSk9CX0NPTVBMRVRFRCBkZWxsJ3VsdGltYSBhdHRpdml0XHUwMGUwIGZhdHRhKi9cclxuICAgICAgICBsYXN0QWN0aXZpdHkgPSBvYmplY3RzWzBdXHJcbiAgICAgICAgbG9nLndhcm4gbGFzdEFjdGl2aXR5LmdldElkKClcclxuICAgICAgICBsb2cud2FybiBsYXN0QWN0aXZpdHlcclxuICAgICAgICAvKlNlIGwndWx0aW1hIGF0dGl2aXRcdTAwZTAgbm9uIFx1MDBlOCBhbmNvcmEgdGVybWluYXRhLCBub24gcG9zc28gaW5pemlhcmUgdW4gbnVvdm8gaW5kaXJlY3QgdGFzayovXHJcbiAgICAgICAgaWYob2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKGxhc3RBY3Rpdml0eS5nZXRJZCgpLCBcIkpPQl9DT01QTEVURURcIikgPT0gbnVsbCl7XHJcbiAgICAgICAgICAgIGlmKCFvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4obGFzdEFjdGl2aXR5LmdldElkKCksIFwiVFJBQ0VfQUNUSU9OX1NUQVRVU1wiKS5jcmVhdGVNdXRhYmxlKCkuZ2V0T2JqZWN0QXR0cmlidXRlVmFsdWVCZWFucygpWzBdLmdldFZhbHVlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCJCUkVBS1wiKSl7XHJcbiAgICAgICAgICAgICAgICBsb2cuZGVidWcgXCJhdHRpdml0XHUwMGUwIFwiICsgb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKGxhc3RBY3Rpdml0eS5nZXRJZCgpLCBcIkpPQl9TVEFSVEVEXCIpLmNyZWF0ZU11dGFibGUoKS5nZXRPYmplY3RBdHRyaWJ1dGVWYWx1ZUJlYW5zKClbMF0uZ2V0VmFsdWUoKS50b1N0cmluZygpICsgXCIgbm9uIGFuY29yYSB0ZXJtaW5hdGFcIlxyXG4gICAgICAgICAgICAgICAgZXJyb3JzPXRydWVcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBsb2cuZGVidWcgb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKGxhc3RBY3Rpdml0eS5nZXRJZCgpLCBcIlRSQUNFX0FDVElPTl9TVEFUVVNcIikuY3JlYXRlTXV0YWJsZSgpLmdldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnMoKVswXS5nZXRWYWx1ZSgpLnRvU3RyaW5nKCkgKyBcIiBpbiBjb3Jzb1wiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG59XHJcblxyXG5kZWYgb3V0cHV0ID0gbmV3IEFycmF5TGlzdCgpXHJcblxyXG5pZiAoIWVycm9ycyl7XHJcbiAgICAgICAgcmV0dXJuIHRydWVcclxufWVsc2V7XHJcbiAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcclxuXHJcbiAgICBkZWYgZUxpc3RNYW5kYXRvcnkgPSBuZXcgQXJyYXlMaXN0KClcclxuICAgIGVMaXN0TWFuZGF0b3J5LmFkZChcIkVcIilcclxuICAgIGVMaXN0TWFuZGF0b3J5LmFkZChcIkFDVElWSVRZX0lOX1BST0dSRVNTXCIpXHJcbiAgICBlTGlzdE1hbmRhdG9yeS5hZGQobnVsbClcclxuICAgIGVMaXN0LmFkZChlTGlzdE1hbmRhdG9yeSlcclxuXHJcbiAgICBvdXRwdXQuYWRkKGVMaXN0KVxyXG4gICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXHJcbiAgICAvL3Rocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oXCJFXCIsIG91dHB1dC50b1N0cmluZygpKSAgIFxyXG59Iiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="4">
              <post-functions>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">dd470d58-6b3b-4190-b94b-441a560839dc</arg>
                  <arg name="FIELD_NOTES">YCFgU2V0IEpPQl9TVEFSVEVEIGZvciBJTkRJUkVDVF9UQVNL</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="uuid">7ed8f248-f9bd-40b5-b04c-c229aaec7f7e</arg>
                  <arg name="field">customfield_23237</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="field.copyFieldSource2"></arg>
                  <arg name="field.copyFieldSource1">customfield_23236</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="field.createTargetValue1"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyFieldMode1">OVERWRITE</arg>
                  <arg name="uuid">e300c52f-15ba-4b63-ad28-3dab156ecfdd</arg>
                  <arg name="field.copyFieldDestination1">customfield_22653</arg>
                  <arg name="field.copyFieldSeparator1"></arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescopyValueFromOtherField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.CopyValueFromOtherFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="4" name="In Progress">
      <meta name="jira.status.id">3</meta>
      <actions>
<common-action id="11" />
      </actions>
    </step>
    <step id="5" name="Rejected">
      <meta name="jira.status.id">11436</meta>
    </step>
  </steps>
</workflow>
