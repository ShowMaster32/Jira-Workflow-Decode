<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE workflow PUBLIC "-//OpenSymphony Group//DTD OSWorkflow 2.8//EN" "http://www.opensymphony.com/osworkflow/workflow_2_8.dtd">
<workflow>
  <meta name="jira.description"></meta>
  <meta name="jira.update.author.key">katia.chinaglia</meta>
  <meta name="jira.updated.date">1678358901273</meta>
  <initial-actions>
    <action id="1" name="Create">
      <validators>
        <validator name="" type="class">
          <arg name="permission">Create Issue</arg>
          <arg name="class.name">com.atlassian.jira.workflow.validator.PermissionValidator</arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="null" status="open" step="7">
          <post-functions>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueCreateFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">1</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
            <function type="class">
              <arg name="field.copyFieldSource2"></arg>
              <arg name="field.copyFieldSource1">customfield_22740</arg>
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="maxAllowed-integerValue"></arg>
              <arg name="field.createTargetValue1"></arg>
              <arg name="runAsUser-user"></arg>
              <arg name="field.copyFieldMode1">OVERWRITE</arg>
              <arg name="uuid">a12d2a14-f644-4f9a-afad-d71b733436e9</arg>
              <arg name="field.copyFieldDestination1">customfield_22740</arg>
              <arg name="field.copyFieldSeparator1"></arg>
              <arg name="scopeType">PARENT</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiescopyValueFromOtherField-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="source-scopeTarget">PARENT</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.CopyValueFromOtherFieldPostFunction</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
            <function type="class">
              <arg name="FIELD_NOTES">YCFgc2VuZCBlbWFpbCBhZCBhcHByb3ZhdG9yZQ==</arg>
              <arg name="FIELD_DISABLE_VALIDATION"></arg>
              <arg name="FIELD_FROM">noreply-rda@faacgroup.com</arg>
              <arg name="FIELD_INCLUDE_ATTACHMENTS">FIELD_INCLUDE_ATTACHMENTS_NONE</arg>
              <arg name="FIELD_TO_ADDRESSES"></arg>
              <arg name="FIELD_CC_ADDRESSES"></arg>
              <arg name="FIELD_CC_USER_FIELDS"></arg>
              <arg name="FIELD_TO_USER_FIELDS">customfield_22723</arg>
              <arg name="FIELD_FUNCTION_ID">4f866b16578e568e9b643b51dbb5574d7dfad80e</arg>
              <arg name="FIELD_INCLUDE_ATTACHMENTS_CALLBACK">YCFg</arg>
              <arg name="FIELD_EMAIL_TEMPLATE"></arg>
              <arg name="FIELD_EMAIL_SUBJECT_TEMPLATE">YCFgUFJFUSBOdW1iZXI6IDwlIG91dCA8PCBpc3N1ZS5wYXJlbnRPYmplY3QuZ2V0Q3VzdG9tRmllbGRWYWx1ZShjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0KCJjdXN0b21maWVsZF8yMjcyNSIpKSU+IC0gV2FpdGluZyBmb3IgYXBwcm92YWw=</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SendCustomEmail</arg>
              <arg name="disabled">false</arg>
              <arg name="FIELD_CONDITION">YCFgbWFpbC5zZXRGcm9tKCJub3JlcGx5LXJkYUBmYWFjZ3JvdXAuY29tIikKCgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcgoKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQKCi8vSW52b2ljZSBOdW1iZXIgdGVzdCAyMzUwOCAtIHByb2QgMjI3NTEKZGVmIHZhbHVlID0gaXNzdWUucGFyZW50T2JqZWN0LmdldEN1c3RvbUZpZWxkVmFsdWUoQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3QoMjI3NTEpKQppZiAodmFsdWU9PW51bGwpCglyZXR1cm4gdHJ1ZQplbHNlCiAgICByZXR1cm4gZmFsc2V8fHw=</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_PREVIEW_ISSUE">RDA-310</arg>
              <arg name="FIELD_EMAIL_FORMAT">HTML</arg>
              <arg name="events"></arg>
            </function>
            <function type="class">
              <arg name="FIELD_NOTES">YCFgU2VuZCBtYWlsIGZhdHR1cmEgYWQgYXBwcm92YXRvcmU=</arg>
              <arg name="FIELD_DISABLE_VALIDATION"></arg>
              <arg name="FIELD_FROM">noreply-rda@faacgroup.com</arg>
              <arg name="FIELD_INCLUDE_ATTACHMENTS">FIELD_INCLUDE_ATTACHMENTS_NONE</arg>
              <arg name="FIELD_TO_ADDRESSES"></arg>
              <arg name="FIELD_CC_ADDRESSES"></arg>
              <arg name="FIELD_CC_USER_FIELDS"></arg>
              <arg name="FIELD_TO_USER_FIELDS">customfield_22723</arg>
              <arg name="FIELD_FUNCTION_ID">b68e3b6d14da015876c3f316212005098cb11a8d</arg>
              <arg name="FIELD_INCLUDE_ATTACHMENTS_CALLBACK">YCFg</arg>
              <arg name="FIELD_EMAIL_TEMPLATE"></arg>
              <arg name="FIELD_EMAIL_SUBJECT_TEMPLATE">YCFgSW52b2ljZSBOdW1iZXI6IDwlIG91dCA8PCBpc3N1ZS5wYXJlbnRPYmplY3QuZ2V0Q3VzdG9tRmllbGRWYWx1ZShjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0KCJjdXN0b21maWVsZF8yMjc1MSIpKSU+IC0gV2FpdGluZyBmb3IgYXBwcm92YWw=</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SendCustomEmail</arg>
              <arg name="disabled">false</arg>
              <arg name="FIELD_CONDITION">YCFgbWFpbC5zZXRGcm9tKCJub3JlcGx5LXJkYUBmYWFjZ3JvdXAuY29tIikKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3IKCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkCi8vSW52b2ljZSBOdW1iZXIgdGVzdCAyMzUwOCAtIHByb2QgMjI3NTEKZGVmIHZhbHVlID0gaXNzdWUucGFyZW50T2JqZWN0LmdldEN1c3RvbUZpZWxkVmFsdWUoQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3QoMjI3NTEpKQppZiAodmFsdWUhPW51bGwpCglyZXR1cm4gdHJ1ZQplbHNlCiAgICByZXR1cm4gZmFsc2V8fHw=</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_PREVIEW_ISSUE">RDA-310</arg>
              <arg name="FIELD_EMAIL_FORMAT">HTML</arg>
              <arg name="events"></arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </initial-actions>
  <global-actions>
    <action id="11" name="Deleted">
      <meta name="jira.description"></meta>
      <meta name="jira.fieldscreen.id"></meta>
      <results>
        <unconditional-result old-status="null" status="null" step="2">
          <post-functions>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </global-actions>
  <common-actions>
    <action id="41" name="Old Flow">
      <meta name="jira.description"></meta>
      <meta name="jira.fieldscreen.id"></meta>
      <results>
        <unconditional-result old-status="null" status="null" step="4">
          <post-functions>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </common-actions>
  <steps>
    <step id="2" name="Deleted">
      <meta name="jira.status.id">10335</meta>
    </step>
    <step id="3" name="Rejected">
      <meta name="jira.status.id">11436</meta>
      <actions>
<common-action id="41" />
        <action id="71" name="To Waitinig for Approval">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <results>
            <unconditional-result old-status="null" status="null" step="7">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="4" name="Old Flow">
      <meta name="jira.status.id">14437</meta>
    </step>
    <step id="5" name="Approved RDA">
      <meta name="jira.status.id">14436</meta>
      <actions>
<common-action id="41" />
      </actions>
    </step>
    <step id="7" name="Waiting for Approval">
      <meta name="jira.status.id">13527</meta>
      <actions>
<common-action id="41" />
        <action id="51" name="Approve">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <results>
            <unconditional-result old-status="null" status="null" step="5">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">b9c595389a43e7a2891d4a818e10723c4ddfbbb0</arg>
                  <arg name="FIELD_NOTES">YCFgQ3JlbyBGbHVzc28gYXBwcm92YXRpdm8gUkRB</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT"></arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="21" name="Reject">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <results>
            <unconditional-result old-status="null" status="null" step="3">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">cc3b764d-4f09-43d6-a12d-4b87670c081d</arg>
                  <arg name="FIELD_NOTES">YCFgU2UgcmlnZXR0byBpbCBzdWJ0YXNrIHJpZ2V0dG8gYW5jaGUgaWwgcGFkcmU=</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5NdXRhYmxlSXNzdWVcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVNYW5hZ2VyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmJjLnVzZXIuc2VhcmNoLlVzZXJTZWFyY2hTZXJ2aWNlXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLnVzZXIuQXBwbGljYXRpb25Vc2VyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmV2ZW50LnR5cGUuRXZlbnREaXNwYXRjaE9wdGlvblxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5pbmRleC5Jc3N1ZUluZGV4aW5nU2VydmljZVxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGRcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLndvcmtmbG93LldvcmtmbG93VHJhbnNpdGlvblV0aWw7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLndvcmtmbG93LldvcmtmbG93VHJhbnNpdGlvblV0aWxJbXBsO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS51dGlsLkppcmFVdGlscztcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS51c2VyLnV0aWwuVXNlck1hbmFnZXJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEud29ya2Zsb3cuV29ya2Zsb3dUcmFuc2l0aW9uVXRpbDtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEud29ya2Zsb3cuV29ya2Zsb3dUcmFuc2l0aW9uVXRpbEltcGw7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLndvcmtmbG93LlRyYW5zaXRpb25PcHRpb25zXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmJjLmlzc3VlLklzc3VlU2VydmljZVxuXG5kZWYgaXNzdWVGYWN0b3J5ID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVGYWN0b3J5KClcbmRlZiBjb25zdGFudE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDb25zdGFudHNNYW5hZ2VyKClcbkNvbXBvbmVudEFjY2Vzc29yLmppcmFBdXRoZW50aWNhdGlvbkNvbnRleHQuc2V0TG9nZ2VkSW5Vc2VyKENvbXBvbmVudEFjY2Vzc29yLmdldFVzZXJNYW5hZ2VyKCkuZ2V0VXNlckJ5S2V5KFwiYXRsYXNzaWFuX2ZhYWNfc2VydmljZV9kZXNrXCIpKVxuZGVmIExvZ2dlZEluVXNlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEppcmFBdXRoZW50aWNhdGlvbkNvbnRleHQoKS5nZXRMb2dnZWRJblVzZXIoKVxuXG5DdXN0b21GaWVsZE1hbmFnZXIgXHRjdXN0b21GaWVsZE1hbmFnZXIgXHQ9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpXG5cbklzc3VlSW5kZXhpbmdTZXJ2aWNlIGlzc3VlSW5kZXhpbmdTZXJ2aWNlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q29tcG9uZW50KElzc3VlSW5kZXhpbmdTZXJ2aWNlKVxuSXNzdWVTZXJ2aWNlIGlzc3VlU2VydmljZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlU2VydmljZSgpXG5UcmFuc2l0aW9uT3B0aW9ucyB0cmFuc2l0aW9uT3B0aW9ucyA9IG5ldyBUcmFuc2l0aW9uT3B0aW9ucy5CdWlsZGVyKCkuc2tpcENvbmRpdGlvbnMoKS5za2lwUGVybWlzc2lvbnMoKS5za2lwVmFsaWRhdG9ycygpLmJ1aWxkKClcblxuLyogR2V0IGlzc3VlIFwiR3JvdXAgQXNzaWduZWVcIiBjdXN0b20gZmllbGQgdmFsdWUgKi9cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKVxuXG5NdXRhYmxlSXNzdWUgcGFyZW50SXNzdWUgPSBpc3N1ZS5wYXJlbnRPYmplY3Q7XG5cbkNvbXBvbmVudEFjY2Vzc29yLmppcmFBdXRoZW50aWNhdGlvbkNvbnRleHQuc2V0TG9nZ2VkSW5Vc2VyKENvbXBvbmVudEFjY2Vzc29yLmdldFVzZXJNYW5hZ2VyKCkuZ2V0VXNlckJ5S2V5KFwiYXRsYXNzaWFuX2ZhYWNfc2VydmljZV9kZXNrXCIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5kZWYgY3VycmVudFVzZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5qaXJhQXV0aGVudGljYXRpb25Db250ZXh0LmdldExvZ2dlZEluVXNlcigpO1xuXG5Jc3N1ZVNlcnZpY2UuVHJhbnNpdGlvblZhbGlkYXRpb25SZXN1bHQgcmVzdWx0ID0gaXNzdWVTZXJ2aWNlLnZhbGlkYXRlVHJhbnNpdGlvbihjdXJyZW50VXNlciwgcGFyZW50SXNzdWUuZ2V0SWQoKSwzMSwgaXNzdWVTZXJ2aWNlLm5ld0lzc3VlSW5wdXRQYXJhbWV0ZXJzKCksIHRyYW5zaXRpb25PcHRpb25zKVxuaWYgKHJlc3VsdC5pc1ZhbGlkKCkpIHtcbiAgICBpc3N1ZVNlcnZpY2UudHJhbnNpdGlvbihjdXJyZW50VXNlciwgcmVzdWx0KVxufVxuXG5cbi8qXG5Xb3JrZmxvd1RyYW5zaXRpb25VdGlsIHdvcmtmbG93VHJhbnNpdGlvblV0aWwgPSAoV29ya2Zsb3dUcmFuc2l0aW9uVXRpbCkgSmlyYVV0aWxzLmxvYWRDb21wb25lbnQoV29ya2Zsb3dUcmFuc2l0aW9uVXRpbEltcGwuY2xhc3MpO1xud29ya2Zsb3dUcmFuc2l0aW9uVXRpbC5zZXRJc3N1ZShwYXJlbnRJc3N1ZSk7XG4vL1JlamVjdGVkIFJEQSB0ZXN0IDUxIC0gcHJvZCAzMVxud29ya2Zsb3dUcmFuc2l0aW9uVXRpbC5zZXRBY3Rpb24oMzEpO1xud29ya2Zsb3dUcmFuc2l0aW9uVXRpbC52YWxpZGF0ZSgpO1xud29ya2Zsb3dUcmFuc2l0aW9uVXRpbC5wcm9ncmVzcygpO1xuKi8iLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3IKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5NdXRhYmxlSXNzdWUKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXIKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5iYy51c2VyLnNlYXJjaC5Vc2VyU2VhcmNoU2VydmljZQppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLnVzZXIuQXBwbGljYXRpb25Vc2VyCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuZXZlbnQudHlwZS5FdmVudERpc3BhdGNoT3B0aW9uCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuaW5kZXguSXNzdWVJbmRleGluZ1NlcnZpY2UKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5DdXN0b21GaWVsZE1hbmFnZXIKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS53b3JrZmxvdy5Xb3JrZmxvd1RyYW5zaXRpb25VdGlsOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLndvcmtmbG93LldvcmtmbG93VHJhbnNpdGlvblV0aWxJbXBsOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLnV0aWwuSmlyYVV0aWxzOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlOwppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7CmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEudXNlci51dGlsLlVzZXJNYW5hZ2VyCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEud29ya2Zsb3cuV29ya2Zsb3dUcmFuc2l0aW9uVXRpbDsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS53b3JrZmxvdy5Xb3JrZmxvd1RyYW5zaXRpb25VdGlsSW1wbDsKCmRlZiBpc3N1ZUZhY3RvcnkgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZUZhY3RvcnkoKQpkZWYgY29uc3RhbnRNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q29uc3RhbnRzTWFuYWdlcigpCkNvbXBvbmVudEFjY2Vzc29yLmppcmFBdXRoZW50aWNhdGlvbkNvbnRleHQuc2V0TG9nZ2VkSW5Vc2VyKENvbXBvbmVudEFjY2Vzc29yLmdldFVzZXJNYW5hZ2VyKCkuZ2V0VXNlckJ5S2V5KCJhdGxhc3NpYW5fZmFhY19zZXJ2aWNlX2Rlc2siKSkKZGVmIExvZ2dlZEluVXNlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEppcmFBdXRoZW50aWNhdGlvbkNvbnRleHQoKS5nZXRMb2dnZWRJblVzZXIoKQoKQ3VzdG9tRmllbGRNYW5hZ2VyIAljdXN0b21GaWVsZE1hbmFnZXIgCT0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkKCklzc3VlSW5kZXhpbmdTZXJ2aWNlIGlzc3VlSW5kZXhpbmdTZXJ2aWNlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q29tcG9uZW50KElzc3VlSW5kZXhpbmdTZXJ2aWNlKQoKLyogR2V0IGlzc3VlICJHcm91cCBBc3NpZ25lZSIgY3VzdG9tIGZpZWxkIHZhbHVlICovCklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKQoKTXV0YWJsZUlzc3VlIHBhcmVudElzc3VlID0gaXNzdWUucGFyZW50T2JqZWN0OwoKQ29tcG9uZW50QWNjZXNzb3IuamlyYUF1dGhlbnRpY2F0aW9uQ29udGV4dC5zZXRMb2dnZWRJblVzZXIoQ29tcG9uZW50QWNjZXNzb3IuZ2V0VXNlck1hbmFnZXIoKS5nZXRVc2VyQnlLZXkoImF0bGFzc2lhbl9mYWFjX3NlcnZpY2VfZGVzayIpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKZGVmIGN1cnJlbnRVc2VyID0gQ29tcG9uZW50QWNjZXNzb3IuamlyYUF1dGhlbnRpY2F0aW9uQ29udGV4dC5nZXRMb2dnZWRJblVzZXIoKTsKCldvcmtmbG93VHJhbnNpdGlvblV0aWwgd29ya2Zsb3dUcmFuc2l0aW9uVXRpbCA9IChXb3JrZmxvd1RyYW5zaXRpb25VdGlsKSBKaXJhVXRpbHMubG9hZENvbXBvbmVudChXb3JrZmxvd1RyYW5zaXRpb25VdGlsSW1wbC5jbGFzcyk7CndvcmtmbG93VHJhbnNpdGlvblV0aWwuc2V0SXNzdWUocGFyZW50SXNzdWUpOwovL1JlamVjdGVkIFJEQSB0ZXN0IDUxIC0gcHJvZCAzMQp3b3JrZmxvd1RyYW5zaXRpb25VdGlsLnNldEFjdGlvbigzMSk7CndvcmtmbG93VHJhbnNpdGlvblV0aWwudmFsaWRhdGUoKTsKd29ya2Zsb3dUcmFuc2l0aW9uVXRpbC5wcm9ncmVzcygpOwo=</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="61" name="ToApproved ">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <results>
            <unconditional-result old-status="null" status="null" step="5">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">YCFgU2V0IFJlc29sdXRpb24=</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3IKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZQppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLnV0aWwuSmlyYVV0aWxzOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnN0YXR1cy5TdGF0dXMKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3IKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZQppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLnVzZXIuQXBwbGljYXRpb25Vc2VyCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuYmMuaXNzdWUuc2VhcmNoLlNlYXJjaFNlcnZpY2UKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXIKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5DdXN0b21GaWVsZE1hbmFnZXIKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS51c2VyLnV0aWwuVXNlclV0aWwKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb25maWcuUmVzb2x1dGlvbk1hbmFnZXIKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5ldmVudC50eXBlLkV2ZW50RGlzcGF0Y2hPcHRpb24KaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5pbmRleC5Jc3N1ZUluZGV4aW5nU2VydmljZQppbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeQoKU2VhcmNoU2VydmljZSAJCXNlYXJjaFNlcnZpY2UgCQk9IENvbXBvbmVudEFjY2Vzc29yLmdldENvbXBvbmVudChTZWFyY2hTZXJ2aWNlLmNsYXNzKQpVc2VyVXRpbCAJCQl1c2VyVXRpbCAJCQk9IENvbXBvbmVudEFjY2Vzc29yLmdldFVzZXJVdGlsKCkKSXNzdWVNYW5hZ2VyIAkJaXNzdWVNYW5hZ2VyIAkJPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKQpJc3N1ZUluZGV4aW5nU2VydmljZSBpc3N1ZUluZGV4aW5nU2VydmljZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldENvbXBvbmVudChJc3N1ZUluZGV4aW5nU2VydmljZSkKCkN1c3RvbUZpZWxkTWFuYWdlciAJY3VzdG9tRmllbGRNYW5hZ2VyIAk9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpCmRlZiBpc3N1ZUZhY3RvcnkgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZUZhY3RvcnkoKQpkZWYgY29uc3RhbnRNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q29uc3RhbnRzTWFuYWdlcigpCgovL011dGFibGVJc3N1ZSBpc3N1ZSA9IGlzc3VlTWFuYWdlci5nZXRJc3N1ZUJ5S2V5SWdub3JlQ2FzZSgiUkRBLTEyMzIiKQoKQ2F0ZWdvcnkgbG9nID0gQ2F0ZWdvcnkuZ2V0SW5zdGFuY2UoImNvbS5vbnJlc29sdmUuamlyYS5ncm9vdnkuUG9zdEZ1bmN0aW9uIikKbG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpCgpBcHBsaWNhdGlvblVzZXIgb2xkVXNlciA9IENvbXBvbmVudEFjY2Vzc29yLmppcmFBdXRoZW50aWNhdGlvbkNvbnRleHQubG9nZ2VkSW5Vc2VyCkNvbXBvbmVudEFjY2Vzc29yLmppcmFBdXRoZW50aWNhdGlvbkNvbnRleHQuc2V0TG9nZ2VkSW5Vc2VyKENvbXBvbmVudEFjY2Vzc29yLmdldFVzZXJNYW5hZ2VyKCkuZ2V0VXNlckJ5S2V5KCJhdGxhc3NpYW5fZmFhY19zZXJ2aWNlX2Rlc2siKSkKQXBwbGljYXRpb25Vc2VyIHVzZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5qaXJhQXV0aGVudGljYXRpb25Db250ZXh0LmxvZ2dlZEluVXNlcgovL0Zsb3cgVHlwZSB0ZXN0IDIyODAxIC0gcHJvZCAgMjI3MTkKZGVmIGZsb3dUeXBlID0gaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdCgyMjcxOSkpCgpkZWYgcmVzb2x1dGlvbk1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDb21wb25lbnQoUmVzb2x1dGlvbk1hbmFnZXIpCgppZiAoZmxvd1R5cGUudG9TdHJpbmcoKSA9PSAiQ29udHJvbGxpbmcgZnVuY3Rpb24iKQoJaXNzdWUuc2V0UmVzb2x1dGlvbihyZXNvbHV0aW9uTWFuYWdlci5nZXRSZXNvbHV0aW9uQnlOYW1lKCJDb250cm9sbGluZyBmdW5jdGlvbiIpKQppZiAoZmxvd1R5cGUudG9TdHJpbmcoKSA9PSAiVGVjaG5pY2FsIEFwcHJvdmFsIikKCWlzc3VlLnNldFJlc29sdXRpb24ocmVzb2x1dGlvbk1hbmFnZXIuZ2V0UmVzb2x1dGlvbkJ5TmFtZSgiVGVjaG5pY2FsIEFwcHJvdmFsIikpCmlmIChmbG93VHlwZS50b1N0cmluZygpID09ICJQdXJjaGFzZSBieSBjcmVkaXQgY2FyZCIpCglpc3N1ZS5zZXRSZXNvbHV0aW9uKHJlc29sdXRpb25NYW5hZ2VyLmdldFJlc29sdXRpb25CeU5hbWUoIlB1cmNoYXNlIGJ5IGNyZWRpdCBjYXJkIikpCmlmIChmbG93VHlwZS50b1N0cmluZygpID09ICJGaXJzdCBMZXZlbCBBcHByb3ZhbCIpCglpc3N1ZS5zZXRSZXNvbHV0aW9uKHJlc29sdXRpb25NYW5hZ2VyLmdldFJlc29sdXRpb25CeU5hbWUoIkZpcnN0IExldmVsIEFwcHJvdmFsIikpCmlmIChmbG93VHlwZS50b1N0cmluZygpID09ICJTZWNvbmQgTGV2ZWwgQXBwcm92YWwiKQoJaXNzdWUuc2V0UmVzb2x1dGlvbihyZXNvbHV0aW9uTWFuYWdlci5nZXRSZXNvbHV0aW9uQnlOYW1lKCJTZWNvbmQgTGV2ZWwgQXBwcm92YWwiKSkKaWYgKGZsb3dUeXBlLnRvU3RyaW5nKCkgPT0gIlRoaXJkIExldmVsIEFwcHJvdmFsIikKCWlzc3VlLnNldFJlc29sdXRpb24ocmVzb2x1dGlvbk1hbmFnZXIuZ2V0UmVzb2x1dGlvbkJ5TmFtZSgiVGhpcmQgTGV2ZWwgQXBwcm92YWwiKSkKaWYgKGZsb3dUeXBlLnRvU3RyaW5nKCkgPT0gIkdyb3VwIExldmVsIEFwcHJvdmFsIikKCWlzc3VlLnNldFJlc29sdXRpb24ocmVzb2x1dGlvbk1hbmFnZXIuZ2V0UmVzb2x1dGlvbkJ5TmFtZSgiR3JvdXAgTGV2ZWwgQXBwcm92YWwiKSkKaWYgKGZsb3dUeXBlLnRvU3RyaW5nKCkgPT0gIkNFTytDRk8iKQoJaXNzdWUuc2V0UmVzb2x1dGlvbihyZXNvbHV0aW9uTWFuYWdlci5nZXRSZXNvbHV0aW9uQnlOYW1lKCJDRU8rQ0ZPIikpCmlmIChmbG93VHlwZS50b1N0cmluZygpID09ICJHZW5lcmFsIE1hbmFnZXIiKQoJaXNzdWUuc2V0UmVzb2x1dGlvbihyZXNvbHV0aW9uTWFuYWdlci5nZXRSZXNvbHV0aW9uQnlOYW1lKCJHZW5lcmFsIE1hbmFnZXIiKSkKCmlzc3VlTWFuYWdlci51cGRhdGVJc3N1ZSh1c2VyLCBpc3N1ZSwgRXZlbnREaXNwYXRjaE9wdGlvbi5ET19OT1RfRElTUEFUQ0gsIGZhbHNlKQogICAg</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
  </steps>
</workflow>
