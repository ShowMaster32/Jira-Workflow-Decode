<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE workflow PUBLIC "-//OpenSymphony Group//DTD OSWorkflow 2.8//EN" "http://www.opensymphony.com/osworkflow/workflow_2_8.dtd">
<workflow>
  <meta name="jira.description"></meta>
  <meta name="jira.update.author.key">arianna.fabbri</meta>
  <meta name="jira.updated.date">1631176659553</meta>
  <initial-actions>
    <action id="1" name="Create">
      <validators>
        <validator name="" type="class">
          <arg name="permission">Create Issue</arg>
          <arg name="class.name">com.atlassian.jira.workflow.validator.PermissionValidator</arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="null" status="open" step="1">
          <post-functions>
            <function type="class">
              <arg name="FIELD_SECURITY_LEVEL_ID">11600</arg>
              <arg name="FIELD_NOTES">YCFgU2V0ICJPcGVyYXRpb24gUG9ydGFsIC0gRkFBQyBTZXJ2aWNlIiBJc3N1ZSBTZWN1cml0eSBMZXZlbA==</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
              <arg name="FIELD_CONDITION"></arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="append.value"></arg>
              <arg name="field.value">%%CURRENT_DATETIME%%</arg>
              <arg name="field.name">customfield_22715</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
            <function type="class">
              <arg name="conditionList">3</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
              <arg name="comparisonType">1</arg>
              <arg name="precondition">true</arg>
              <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
              <arg name="preconditionNegateResult-booleanValue"></arg>
              <arg name="fieldValue">Maintenance Ticket</arg>
              <arg name="preconditionMode-textValue">DISCARD</arg>
              <arg name="fieldsList">issuetype</arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="append.value"></arg>
              <arg name="field.value">Yes</arg>
              <arg name="field.name">customfield_22620</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="preconditionAwareFunctionMode-textValue">FALSE</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="append.value"></arg>
              <arg name="field.value">New Installation Ticket</arg>
              <arg name="field.name">customfield_22716</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="preconditionAwareFunctionMode-textValue">FALSE</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="append.value"></arg>
              <arg name="field.value">Maintenance Ticket</arg>
              <arg name="field.name">customfield_22716</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueCreateFunction</arg>
            </function>
            <function type="class">
              <arg name="FIELD_NOTES">YCFgTGluayBOZXcgSW5zdGFsbGF0aW9uIFRpY2tldHM=</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZQppbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb24KaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3IKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXIKaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGdyb292eS5qc29uLkpzb25CdWlsZGVyCmltcG9ydCBncm9vdnkuanNvbi5Kc29uU2x1cnBlcgppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXIKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb25maWcudXRpbC5KaXJhSG9tZQppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmV2ZW50LnR5cGUuRXZlbnREaXNwYXRjaE9wdGlvbgppbXBvcnQgamF2YS50ZXh0LlNpbXBsZURhdGVGb3JtYXQKaW1wb3J0IGphdmEudGV4dC5QYXJzZUV4Y2VwdGlvbgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLnNlY3VyaXR5LkppcmFBdXRoZW50aWNhdGlvbkNvbnRleHQKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5iYy5pc3N1ZS5Jc3N1ZVNlcnZpY2UuSXNzdWVSZXN1bHQKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5qcWwucGFyc2VyLkpxbFF1ZXJ5UGFyc2VyCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuYmMuaXNzdWUuc2VhcmNoLlNlYXJjaFNlcnZpY2UKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS51c2VyLnV0aWwuVXNlclV0aWwKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS53ZWIuYmVhbi5QYWdlckZpbHRlcgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuTGlua0NvbGxlY3Rpb25JbXBsOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuSXNzdWVMaW5rOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk1vZGlmaWVkVmFsdWUKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS51dGlsLkRlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlcgoKaW1wb3J0IGdyb292eS51dGlsLmxvZ2dpbmcuU2xmNGoKaW1wb3J0IGphdmEudXRpbC5jb25jdXJyZW50LkNvbmN1cnJlbnRIYXNoTWFwCmltcG9ydCBqYXZheC5hbm5vdGF0aW9uLlBvc3RDb25zdHJ1Y3QKaW1wb3J0IG9yZy5zcHJpbmdmcmFtZXdvcmsuY2FjaGUuYW5ub3RhdGlvbi5DYWNoZWFibGUKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KZGVmIENhdGVnb3J5IGxvZyA9IENhdGVnb3J5LmdldEluc3RhbmNlKCJjb20ub25yZXNvbHZlLmppcmEuZ3Jvb3Z5LlBvc3RGdW5jdGlvbiIpCmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKQoKLypTY3JpcHQgVmFyaWFibGVzKi8KLy9QZXIgUG9zdCBGdW5jdGlvbgppc3N1ZSA9IGlzc3VlCi8vUGVyIHRlc3QgZGEgY29uc29sZQovL0lzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKQovL2lzc3VlID0gaXNzdWVNYW5hZ2VyLmdldElzc3VlQnlLZXlJZ25vcmVDYXNlKCJPUFVULTI0MSIpCgovKkluc2lnaHQgY2xhc3NlcyAmIGNvbXBvbmVudHMqLwpDbGFzcyBvYmplY3RGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdEZhY2FkZSIpOyAgCkNsYXNzIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGUiKTsKb2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShvYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlQ2xhc3MpOwpvYmplY3RGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0RmFjYWRlQ2xhc3MpOwovKiBHZXQgSW5zaWdodCBJUUwgRmFjYWRlIGZyb20gcGx1Z2luIGFjY2Vzc29yICovCkNsYXNzIGlxbEZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcygiY29tLnJpYWRhbGFicy5qaXJhLnBsdWdpbnMuaW5zaWdodC5jaGFubmVsLmV4dGVybmFsLmFwaS5mYWNhZGUuSVFMRmFjYWRlIik7IAppcWxGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUoaXFsRmFjYWRlQ2xhc3MpOwpDbGFzcyBvYmplY3RBdHRyaWJ1dGVCZWFuRmFjdG9yeUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcygiY29tLnJpYWRhbGFicy5qaXJhLnBsdWdpbnMuaW5zaWdodC5zZXJ2aWNlcy5tb2RlbC5mYWN0b3J5Lk9iamVjdEF0dHJpYnV0ZUJlYW5GYWN0b3J5Iik7Cm9iamVjdEF0dHJpYnV0ZUJlYW5GYWN0b3J5ID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKG9iamVjdEF0dHJpYnV0ZUJlYW5GYWN0b3J5Q2xhc3MpOwovKiBHZXQgSW5zaWdodCBPYmplY3QgVHlwZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi8KQ2xhc3Mgb2JqZWN0VHlwZUZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcygiY29tLnJpYWRhbGFicy5qaXJhLnBsdWdpbnMuaW5zaWdodC5jaGFubmVsLmV4dGVybmFsLmFwaS5mYWNhZGUuT2JqZWN0VHlwZUZhY2FkZSIpOyAKb2JqZWN0VHlwZUZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShvYmplY3RUeXBlRmFjYWRlQ2xhc3MpOwoKLypDdXN0b21maWVsZHMqLwpkZWYgc3VwcGxpZXJJbnN0YWxsYXRpb24gPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLnN1cHBsaWVyTmV3SW5zdGFsbGF0aW9uJ10udG9TdHJpbmcoKSlbMF0KZGVmIHdic1ByaiA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2Yud2JzUHJqJ10gPyBwcm9wZXJ0aWVzWydjZi53YnNQcmonXS50b1N0cmluZygpIDogIk9QX1dCU19QUkoiKVswXQpkZWYgc2l0ZSA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2Yuc2l0ZSddLnRvU3RyaW5nKCkpWzBdCmxvZy5kZWJ1ZyBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHN1cHBsaWVySW5zdGFsbGF0aW9uKQoKSmlyYUF1dGhlbnRpY2F0aW9uQ29udGV4dCBhdXRoQ29udGV4dCA9IENvbXBvbmVudEFjY2Vzc29yLmdldEppcmFBdXRoZW50aWNhdGlvbkNvbnRleHQoKQpkZWYganFsUXVlcnlQYXJzZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDb21wb25lbnQoSnFsUXVlcnlQYXJzZXIpCmRlZiBzZWFyY2hTZXJ2aWNlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q29tcG9uZW50KFNlYXJjaFNlcnZpY2UpClVzZXJVdGlsIHVzZXJVdGlsID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0VXNlclV0aWwoKQpkZWYgdXNlciA9IENvbXBvbmVudEFjY2Vzc29yLmppcmFBdXRoZW50aWNhdGlvbkNvbnRleHQubG9nZ2VkSW5Vc2VyCgpkZWYgc3VwcGxpZXIgPSBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHN1cHBsaWVySW5zdGFsbGF0aW9uKS5maXJzdCgpLnRvU3RyaW5nKCkKbG9nLmRlYnVnICJzdXBwbGllcjogIiArIHN1cHBsaWVyCnN1cHBsaWVyID0gc3VwcGxpZXIuc3Vic3RyaW5nKDEsc3VwcGxpZXIuaW5kZXhPZignKCcpLTEpCgpkZWYganFsU2VhcmNoID0gInByb2plY3QgPSAnIiArIGlzc3VlLmdldFByb2plY3RPYmplY3QoKS5uYW1lICsgIicgQU5EIGlzc3VldHlwZSA9ICciICsgaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZSArICInIEFORCBrZXkgIT0gJyIgKyBpc3N1ZS5rZXkudG9TdHJpbmcoKSArICInIEFORCAnIiArIHByb3BlcnRpZXNbJ2NmLnN1cHBsaWVyTmV3SW5zdGFsbGF0aW9uJ10udG9TdHJpbmcoKSArICInIGluIGlxbEZ1bmN0aW9uKCciICsgcHJvcGVydGllc1snaW9iai5zdXBwaW5zdC5zdXBwbGllclJlZiddLnRvU3RyaW5nKCkgKyAiIExJS0UgXCIiICsgc3VwcGxpZXIucmVwbGFjZUFsbCgiJyIsIlwnIikgKyAiXCInKSIgKyAiIEFORCAnIiArIHByb3BlcnRpZXNbJ2NmLnNpdGUnXS50b1N0cmluZygpICsgIicgPSAnIiArIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc2l0ZSkuZmlyc3QoKS50b1N0cmluZygpLnJlcGxhY2VBbGwoIiciLCJcJyIpICsgIicgQU5EIHN0YXR1cyBJTiAoJyIgKyBwcm9wZXJ0aWVzWyd3Zi5vcGVuJ10udG9TdHJpbmcoKSArICInKSBBTkQgIiArIChwcm9wZXJ0aWVzWydjZi53YnNQcmonXSA/IHByb3BlcnRpZXNbJ2NmLndic1ByaiddLnRvU3RyaW5nKCkgOiAiT1BfV0JTX1BSSiIpICsgIiA9ICciICsgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZSh3YnNQcmopICsgIiciCmxvZy5kZWJ1ZyAicmljZXJjYTogIiArIGpxbFNlYXJjaApkZWYgcXVlcnkgPSBqcWxRdWVyeVBhcnNlci5wYXJzZVF1ZXJ5KGpxbFNlYXJjaCkKbG9nLmRlYnVnICJxdWVyeTogIiArIHF1ZXJ5CmRlZiBzZWFyY2ggPSBzZWFyY2hTZXJ2aWNlLnNlYXJjaCh1c2VyLCBxdWVyeSwgUGFnZXJGaWx0ZXIuZ2V0VW5saW1pdGVkRmlsdGVyKCkpCmRlZiBmb3VuZD1mYWxzZQpkZWYgZm91bmRPdXR3YXJkPWZhbHNlCmRlZiBsaW5rZWRJc3N1ZQppZiAoc2VhcmNoLnJlc3VsdHMpIHsJCiAgICBmb3IgKGkgaW4gc2VhcmNoLnJlc3VsdHMuZmlyc3QoKSl7CiAgICAgICAgLypQZXIgb2duaSBpc3N1ZSByZXN0aXR1aXRhIGRhbGxhIHF1ZXJ5IEpRTCB2ZXJpZmljbyBzZSBoYSBnacOgIGRlaSBsaW5rIFJlbGF0ZXMgVG8qLwogICAgICAgIGxvZy5kZWJ1ZyBpLmtleQoKICAgICAgICBkZWYgaXNzdWVTZXJ2aWNlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVTZXJ2aWNlKCkKCiAgICAgICAgTGlzdDxJc3N1ZUxpbms+IGFsbEluSXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldElud2FyZExpbmtzKGkuZ2V0SWQoKSk7CiAgICAgICAgbG9nLmRlYnVnICJhbGxJbklzc3VlTGluazogIiArIGFsbEluSXNzdWVMaW5rCiAgICAgICAgZm9yIChJdGVyYXRvcjxJc3N1ZUxpbms+IG91dEl0ZXJhdG9yID0gYWxsSW5Jc3N1ZUxpbmsuaXRlcmF0b3IoKTsgb3V0SXRlcmF0b3IuaGFzTmV4dCgpOykgewogICAgICAgICAgICBJc3N1ZUxpbmsgaXNzdWVMaW5rID0gKElzc3VlTGluaykgb3V0SXRlcmF0b3IubmV4dCgpOwogICAgICAgICAgICBkZWYgbGlua2VkSXNzdWVUZW1wID0gaXNzdWVMaW5rLmdldFNvdXJjZU9iamVjdCgpCiAgICAgICAgICAgIFN0cmluZyB0eXBlID0gbGlua2VkSXNzdWVUZW1wLmdldElzc3VlVHlwZSgpLmdldE5hbWUoKTsKCiAgICAgICAgICAgIGxvZy5kZWJ1ZyAiaXNzdWVsaW5rIFR5cGU6ICIgKyBpc3N1ZUxpbmsuaXNzdWVMaW5rVHlwZS5nZXROYW1lKCkKCQkJbG9nLmRlYnVnICJzb3VyY2VJc3N1ZTogIiArIGlzc3VlTGluay5nZXRTb3VyY2VPYmplY3QoKQogICAgICAgICAgICBsb2cuZGVidWcgImRlc3RpbmF0aW9uSXNzdWU6ICIgKyBpc3N1ZUxpbmsuZ2V0RGVzdGluYXRpb25PYmplY3QoKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYoaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNSZWxhdGVzJ10udG9TdHJpbmcoKSkgJiYgaXNzdWVMaW5rLmdldFNvdXJjZU9iamVjdCgpLmtleSE9aXNzdWUua2V5KXsKICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyAidHJvdmF0byBpbldhcmRMaW5rIC0gcHJlbmRvIGxhIHNvdXJjZSBpc3N1ZSAiICsgbGlua2VkSXNzdWVUZW1wICsgIiBlIGxhIGxlZ28gYWxsYSBpc3N1ZSBjb3JyZW50ZSIKICAgICAgICAgICAgICAgIGZvdW5kPXRydWUKICAgICAgICAgICAgICAgIENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTGlua01hbmFnZXIoKS5jcmVhdGVJc3N1ZUxpbmsobGlua2VkSXNzdWVUZW1wLmdldElkKCksIGlzc3VlLmdldElkKCksIExvbmcucGFyc2VMb25nKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNSZWxhdGVzSWQnXS50b1N0cmluZygpKSwgMSwgdXNlcik7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgCiAgICAgICAgTGlzdDxJc3N1ZUxpbms+IGFsbE91dElzc3VlTGluayA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTGlua01hbmFnZXIoKS5nZXRPdXR3YXJkTGlua3MoaS5nZXRJZCgpKTsKICAgICAgICBsb2cuZGVidWcgImFsbE91dElzc3VlTGluazogIiArIGFsbE91dElzc3VlTGluawogICAgICAgIGZvciAoSXRlcmF0b3I8SXNzdWVMaW5rPiBvdXRJdGVyYXRvciA9IGFsbE91dElzc3VlTGluay5pdGVyYXRvcigpOyBvdXRJdGVyYXRvci5oYXNOZXh0KCk7KSB7CiAgICAgICAgICAgIElzc3VlTGluayBpc3N1ZUxpbmsgPSAoSXNzdWVMaW5rKSBvdXRJdGVyYXRvci5uZXh0KCk7CiAgICAgICAgICAgIGRlZiBsaW5rZWRJc3N1ZVRlbXAgPSBpc3N1ZUxpbmsuZ2V0RGVzdGluYXRpb25PYmplY3QoKQogICAgICAgICAgICBTdHJpbmcgdHlwZSA9IGxpbmtlZElzc3VlVGVtcC5nZXRJc3N1ZVR5cGUoKS5nZXROYW1lKCk7CgogICAgICAgICAgICBsb2cuZGVidWcgImlzc3VlbGluayBUeXBlOiAiICsgaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpCgkJCWxvZy5kZWJ1ZyAic291cmNlSXNzdWU6ICIgKyBpc3N1ZUxpbmsuZ2V0U291cmNlT2JqZWN0KCkKICAgICAgICAgICAgbG9nLmRlYnVnICJkZXN0aW5hdGlvbklzc3VlOiAiICsgaXNzdWVMaW5rLmdldERlc3RpbmF0aW9uT2JqZWN0KCkKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmKGlzc3VlTGluay5pc3N1ZUxpbmtUeXBlLmdldE5hbWUoKS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpbC5saW5rZWRUa3RzUmVsYXRlcyddLnRvU3RyaW5nKCkpICYmIGlzc3VlTGluay5nZXREZXN0aW5hdGlvbk9iamVjdCgpLmtleSE9aXNzdWUua2V5KXsKICAgICAgICAgICAgICAgIGZvdW5kPXRydWUKICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyAidHJvdmF0byBvdXRXYXJkTGluayAtIHByZW5kbyBsYSBkZXN0aW5hdGlvbiBpc3N1ZSAiICsgbGlua2VkSXNzdWVUZW1wICsgIiBlIGxhIGxlZ28gYWxsYSBpc3N1ZSBjb3JyZW50ZSIKICAgICAgICAgICAgICAgIENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTGlua01hbmFnZXIoKS5jcmVhdGVJc3N1ZUxpbmsoaXNzdWUuZ2V0SWQoKSwgbGlua2VkSXNzdWVUZW1wLmdldElkKCksIExvbmcucGFyc2VMb25nKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNSZWxhdGVzSWQnXS50b1N0cmluZygpKSwgMSwgdXNlcik7CiAgICAgICAgICAgIH1lbHNlIGlmKGlzc3VlTGluay5pc3N1ZUxpbmtUeXBlLmdldE5hbWUoKS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpbC5saW5rZWRUa3RzUmVsYXRlcyddLnRvU3RyaW5nKCkpICYmIGlzc3VlTGluay5nZXREZXN0aW5hdGlvbk9iamVjdCgpLmtleT09aXNzdWUua2V5KXsKICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyAiaXNzdWUgZ2nDoCBsaW5rYXRhIgogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgbG9nLmRlYnVnICJDcmVvIGxpbmsgdHJhIGxhIGlzc3VlIG9nZ2V0dG8gZGkgdHJhbnNpdGlvbiBlIGxhIGlzc3VlIHJpc3VsdGFudGUgZGFsIGZpbHRybyIKICAgICAgICBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZUxpbmtNYW5hZ2VyKCkuY3JlYXRlSXNzdWVMaW5rKGkuZ2V0SWQoKSwgaXNzdWUuZ2V0SWQoKSwgTG9uZy5wYXJzZUxvbmcocHJvcGVydGllc1snaWwubGlua2VkVGt0c1JlbGF0ZXNJZCddLnRvU3RyaW5nKCkpLCAxLCB1c2VyKTsKICAgICAgICAgICAgICAKICAgIH0KICAgIAp9IGVsc2UgewogICAgbG9nLmVycm9yKCJJbnZhbGlkIEpRTDogIiArIGpxbFNlYXJjaCk7Cn0g</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="FIELD_NOTES">YCFgT1A6IERvYyBUZW1wbGF0ZSBnZW5lcmF0aW9uIC0gc2UgTmV3IEluc3RhbGxhdGlvbiBPUiBGaXJzdCBUaWNrZXQgPSB0cnVl</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuV29ya2Zsb3dFeGNlcHRpb247CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7CmltcG9ydCBncm9vdnkuanNvbi5TdHJlYW1pbmdKc29uQnVpbGRlcjsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5DdXN0b21GaWVsZE1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3I7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlCmltcG9ydCBvcmcuYXBhY2hlLmNvbW1vbnMuY29kZWMuYmluYXJ5LkJhc2U2NDsKaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGdyb292eXgubmV0Lmh0dHAuSFRUUEJ1aWxkZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KQ2F0ZWdvcnkgbG9nID0gQ2F0ZWdvcnkuZ2V0SW5zdGFuY2UoImNvbS5vbnJlc29sdmUuamlyYS5ncm9vdnkuUG9zdEZ1bmN0aW9uIikKbG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpCgpJc3N1ZU1hbmFnZXIgaXNzdWVNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKCk7CkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTsKCmRlZiByZXF1ZXN0TWV0aG9kCmRlZiBiYXNlVVJMCgpkZWYgZmlyc3RUaWNrZXQgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLmZpcnN0VGt0J10udG9TdHJpbmcoKSlbMF0KCmxvZy5kZWJ1ZyBpc3N1ZS5nZXRJc3N1ZVR5cGUoKS5uYW1lCmxvZy5kZWJ1ZyBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGZpcnN0VGlja2V0KQoKCi8qIFJFU1QgQVBJIHBlciBJbnZpbyBOb3RpZmljYSBFbWFpbCBPTlNJVEVfUkVQT1JUICovCnJlcXVlc3RNZXRob2QgPSAiR0VUIjsKCmlmKGlzc3VlLmdldElzc3VlVHlwZSgpLm5hbWUudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snaXQubmV3SW5zdGFsbGF0aW9uJ10pIHx8IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoZmlyc3RUaWNrZXQpIT1udWxsKXsKICAgIGRlZiBmaXJzdF90aWNrZXQ9ZmFsc2UKICAgIGRlZiB0ZW1wbGF0ZT0iIgogICAgaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShmaXJzdFRpY2tldCkhPW51bGwpewogICAgICAgIGZpcnN0X3RpY2tldD10cnVlCiAgICAgICAgdGVtcGxhdGU9IkZJUlNUX1RJQ0tFVCU3Q01BTlVGQUNUVVJFUiIKICAgIH1lbHNlewogICAgICAgIHRlbXBsYXRlPSJORVdfSU5TVEFMTEFUSU9OX0NSRUFURV9US1QlN0NNQU5VRkFDVFVSRVIiCiAgICB9CiAgICBiYXNlVVJMID0gImh0dHA6Ly8iICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyAiL29wL3Jlc3QvYXV0b21hdGlvbi9kb2N1bWVudC9nZW5lcmF0aW9uL2NoZWNrP0lTU1VFX0tFWT0iKyBpc3N1ZS5rZXkgKyImRE9DX0NBVEVHT1JZPSIgKyB0ZW1wbGF0ZSArICImRU5BQkxFRF9GT1JfRklSU1RfVElDS0VUPSIrZmlyc3RfdGlja2V0KyImSU1QT1JUX0ZST009T1BfQVNTRVQiCiAgICBsb2cuZGVidWcgYmFzZVVSTAogICAgVVJMIHVybCA9IG5ldyBVUkwoYmFzZVVSTCkKICAgIEh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7CiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7CiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eSgiQ29udGVudC1UeXBlIiwgImFwcGxpY2F0aW9uL2pzb24iKTsKICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KCJBY2NlcHQiLCAiKi8qIik7CiAgICBjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpOwogICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpOwogICAgY29ubmVjdGlvbi5jb25uZWN0KCk7CgogICAgZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKQogICAgZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpCiAgICBkZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KCkKICAgIGRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KCkKCiAgICBpZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoIjIwMCIpKXsKICAgICAgICBsb2cuZGVidWcgInVybDogIiArIHVybAogICAgICAgIGxvZy5kZWJ1ZyAiUmVzcG9uc2VDb2RlOiIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpCiAgICAgICAgbG9nLmRlYnVnICJSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKICAgICAgICBsb2cuZGVidWcgIkVycm9yU3RyZWFtOiAiICsgY29ubmVjdGlvbi5nZXRFcnJvclN0cmVhbSgpLnRvU3RyaW5nKCkKICAgICAgICBsb2cuZGVidWcgImdldEhlYWRlckZpZWxkcygpOiAiICsgY29ubmVjdGlvbi5nZXRIZWFkZXJGaWVsZHMoKQogICAgICAgIGRlZiBvdXRwdXRNc2cgPSAoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHQKICAgICAgICBsb2cuZGVidWcgIigoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dDogIiArIG91dHB1dE1zZwoKICAgICAgICBkZWYganNvblNsdXJwZXIgPSBuZXcgSnNvblNsdXJwZXIoKQogICAgICAgIGRlZiBqc29uX29iamVjdCA9IGpzb25TbHVycGVyLnBhcnNlVGV4dChvdXRwdXRNc2cpCiAgICAgICAgYXNzZXJ0IGpzb25fb2JqZWN0IGluc3RhbmNlb2YgTWFwICAKICAgICAgICBsb2cuZGVidWcgIm1lc3NhZ2U6ICIgKyAganNvbl9vYmplY3QubWVzc2FnZQoKICAgICAgICBlTGlzdEVycm9ycy5hZGQoIkUiKQogICAgICAgIGVMaXN0RXJyb3JzLmFkZCgiT1AtRE9DUyIpCiAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgIiAiICsganNvbl9vYmplY3QubWVzc2FnZSkKICAgICAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKQogICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycykKCiAgICAgICAgb3V0cHV0LmFkZChlTGlzdCkKICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCJFIiwgb3V0cHV0LnRvU3RyaW5nKCkpCiAgICB9Cn0K</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">1</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </initial-actions>
  <global-actions>
    <action id="341" name="Cancella Ticket">
      <meta name="opsbar-sequence">100</meta>
      <meta name="jira.description"></meta>
      <meta name="jira.fieldscreen.id"></meta>
      <restrict-to>
        <conditions>
          <condition type="class">
            <arg name="FIELD_FUNCTION_ID">00311669deae227a71a37a43c67ff8b63b3ce7b2</arg>
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
            <arg name="FIELD_CONDITION">YCFgIWlzc3VlLmdldFN0YXR1cygpLmdldE5hbWUoKS50b1N0cmluZygpLmVxdWFscygiQ2xvc2VkIil8fHw=</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
            <arg name="FIELD_PREVIEW_ISSUE">AAS-2694</arg>
          </condition>
        </conditions>
      </restrict-to>
      <results>
        <unconditional-result old-status="null" status="null" step="15">
          <post-functions>
            <function type="class">
              <arg name="field.name">resolution</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
              <arg name="field.value">10103</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="351" name="Sospendi Ticket">
      <meta name="opsbar-sequence">110</meta>
      <meta name="jira.description"></meta>
      <meta name="jira.fieldscreen.id"></meta>
      <restrict-to>
        <conditions>
          <condition type="class">
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
            <arg name="FIELD_CONDITION">YCFgIWlzc3VlLmdldFN0YXR1cygpLmdldE5hbWUoKS50b1N0cmluZygpLmVxdWFscygiQ2xvc2VkIil8fHw=</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
            <arg name="FIELD_PREVIEW_ISSUE"></arg>
          </condition>
        </conditions>
      </restrict-to>
      <results>
        <unconditional-result old-status="null" status="null" step="16">
          <post-functions>
            <function type="class">
              <arg name="field.name">resolution</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
              <arg name="field.value">10401</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="361" name="Annulla Ticket">
      <meta name="opsbar-sequence">120</meta>
      <meta name="jira.description"></meta>
      <meta name="jira.fieldscreen.id"></meta>
      <restrict-to>
        <conditions>
          <condition type="class">
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
            <arg name="FIELD_CONDITION">YCFgIWlzc3VlLmdldFN0YXR1cygpLmdldE5hbWUoKS50b1N0cmluZygpLmVxdWFscygiQ2xvc2VkIil8fHw=</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
            <arg name="FIELD_PREVIEW_ISSUE"></arg>
          </condition>
        </conditions>
      </restrict-to>
      <results>
        <unconditional-result old-status="null" status="null" step="17">
          <post-functions>
            <function type="class">
              <arg name="field.name">resolution</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
              <arg name="field.value">10104</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </global-actions>
  <common-actions>
    <action id="51" name="Assegna a Fornitore" view="fieldscreen">
      <meta name="opsbar-sequence">50</meta>
      <meta name="jira.description"></meta>
      <meta name="jira.fieldscreen.id">19904</meta>
      <validators>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">0edcbf2c1701d9f3a9ad279bea831e613d3338a7</arg>
          <arg name="FIELD_NOTES">YCFgT1AgRW1haWwgTm90aWZpY2F0aW9uOiBBU1NJR05fVE9fU1VQUExJRVI=</arg>
          <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmluZGV4Lklzc3VlSW5kZXhpbmdTZXJ2aWNlCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUubGluay5Jc3N1ZUxpbmsKaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KQ2F0ZWdvcnkgbG9nID0gQ2F0ZWdvcnkuZ2V0SW5zdGFuY2UoImNvbS5vbnJlc29sdmUuamlyYS5ncm9vdnkuUG9zdEZ1bmN0aW9uIikKbG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpCgpkZWYgcmVxdWVzdE1ldGhvZCA9ICJQT1NUIjsKZGVmIHJlbGF0ZXNJbklzc3VlTGluaz1mYWxzZQpkZWYgcmVsYXRlc091dElzc3VlTGluaz1mYWxzZQpkZWYgbGlua2VkVGlja2V0cz1uZXcgQXJyYXlMaXN0KCkKCklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTsKQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpOwpkZWYgYXV0b21hdGljYWxseUNvbmZpcm1lZCA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YuYXV0b21hdGljYWxseUFzc2lnbmVkJ10gPyBwcm9wZXJ0aWVzWydjZi5hdXRvbWF0aWNhbGx5QXNzaWduZWQnXS50b1N0cmluZygpIDogIk9QX0FVVE9NQVRJQ0FMTFlfQVNTSUdORUQiKVswXQoKLypPUC0xMDM4OiB2ZXJpZmljYSB0aWNrZXQgY29sbGVnYXRpKi8KTGlzdDxJc3N1ZUxpbms+IGFsbEluSXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldElud2FyZExpbmtzKGlzc3VlLmdldElkKCkpCmZvciAoSXRlcmF0b3I8SXNzdWVMaW5rPiBvdXRJdGVyYXRvciA9IGFsbEluSXNzdWVMaW5rLml0ZXJhdG9yKCk7IG91dEl0ZXJhdG9yLmhhc05leHQoKTspIHsKICAgIElzc3VlTGluayBpc3N1ZUxpbmsgPSAoSXNzdWVMaW5rKSBvdXRJdGVyYXRvci5uZXh0KCk7CgogICAgaWYoaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNSZWxhdGVzJ10udG9TdHJpbmcoKSkpewogICAgICAgIHJlbGF0ZXNJbklzc3VlTGluaz10cnVlCiAgICAgICAgbGlua2VkVGlja2V0cy5hZGQoaXNzdWVMaW5rLmdldFNvdXJjZU9iamVjdCgpLnRvU3RyaW5nKCkpCiAgICAgICAgbG9nLmRlYnVnICJJc3N1ZSBjb24gcmVsYXRlc0luSXNzdWVMaW5rIgogICAgfQp9Ckxpc3Q8SXNzdWVMaW5rPiBhbGxPdXRJc3N1ZUxpbmsgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZUxpbmtNYW5hZ2VyKCkuZ2V0T3V0d2FyZExpbmtzKGlzc3VlLmdldElkKCkpCmZvciAoSXRlcmF0b3I8SXNzdWVMaW5rPiBvdXRJdGVyYXRvciA9IGFsbE91dElzc3VlTGluay5pdGVyYXRvcigpOyBvdXRJdGVyYXRvci5oYXNOZXh0KCk7KSB7CiAgICBJc3N1ZUxpbmsgaXNzdWVMaW5rID0gKElzc3VlTGluaykgb3V0SXRlcmF0b3IubmV4dCgpOwoKICAgIGlmKGlzc3VlTGluay5pc3N1ZUxpbmtUeXBlLmdldE5hbWUoKS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpbC5saW5rZWRUa3RzUmVsYXRlcyddLnRvU3RyaW5nKCkpKXsKICAgICAgICByZWxhdGVzT3V0SXNzdWVMaW5rPXRydWUKICAgICAgICBsaW5rZWRUaWNrZXRzLmFkZChpc3N1ZUxpbmsuZ2V0RGVzdGluYXRpb25PYmplY3QoKS50b1N0cmluZygpKQogICAgICAgIGxvZy5kZWJ1ZyAiSXNzdWUgY29uIHJlbGF0ZXNPdXRJc3N1ZUxpbmsiCiAgICB9Cn0KCmRlZiBib2R5X3JlcQppZihyZWxhdGVzSW5Jc3N1ZUxpbmsgfHwgcmVsYXRlc091dElzc3VlTGluayl7CiAgICBib2R5X3JlcSA9IFsKICAgICAgICAidGVtcGxhdGVOYW1lIjogcHJvcGVydGllc1sndHQuYXNzaWduVG9TdXBwbGllciddLnRvU3RyaW5nKCksCiAgICAgICAgInBlYyI6IGZhbHNlLAogICAgICAgICJpc3N1ZUtleSI6IGlzc3VlLmtleSwKICAgICAgICAibGlua2VkVGlja2V0cyI6IGxpbmtlZFRpY2tldHMKICAgIF0KfWVsc2V7CiAgICBib2R5X3JlcSA9IFsKICAgICAgICAidGVtcGxhdGVOYW1lIjogcHJvcGVydGllc1sndHQuYXNzaWduVG9TdXBwbGllciddLnRvU3RyaW5nKCksCiAgICAgICAgInBlYyI6IGZhbHNlLAogICAgICAgICJpc3N1ZUtleSI6IGlzc3VlLmtleQogICAgXQp9CgppZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGF1dG9tYXRpY2FsbHlDb25maXJtZWQpPT1udWxsIHx8IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoYXV0b21hdGljYWxseUNvbmZpcm1lZCkudG9TdHJpbmcoKS5lcXVhbHMoIk5vIikpewogICAgZGVmIGJhc2VVUkwgPSAiaHR0cDovLyIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArICIvb3AvcmVzdC9qaXJhL0FBL3RyYW5zYWN0aW9uL21haWwvc2VuZCIKICAgIFVSTCB1cmwKICAgIHVybCA9IG5ldyBVUkwoYmFzZVVSTCkKCiAgICBIdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpOwogICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpOwogICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoIkNvbnRlbnQtVHlwZSIsICJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLTgiKTsKICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KCJBY2NlcHQiLCAiKi8qIik7CiAgICBjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpOwogICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpOwogICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0KICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtLndpdGhXcml0ZXIoIlVURi04IikgeyBuZXcgU3RyZWFtaW5nSnNvbkJ1aWxkZXIoaXQsIGJvZHlfcmVxKSB9CiAgICBsb2cuZGVidWcgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0KICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpOwoKICAgIGRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KCkKICAgIGRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKQogICAgZGVmIGVMaXN0RXJyb3JzID0gbmV3IEFycmF5TGlzdCgpCiAgICBkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpCgogICAgaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKCIyMDAiKSl7CiAgICAgICAgbG9nLmRlYnVnICJ1cmw6ICIgKyB1cmwKICAgICAgICBsb2cuZGVidWcgIlJlc3BvbnNlQ29kZToiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKQogICAgICAgIGxvZy5kZWJ1ZyAiUmVzcG9uc2VNZXNzYWdlOiIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpCiAgICAgICAgCiAgICAgICAgZGVmIG91dHB1dE1zZyA9ICgoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dAogICAgCWxvZy5kZWJ1ZyAiKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0OiAiICsgb3V0cHV0TXNnCiAgICAgICAgCiAgICAgICAgZGVmIGpzb25TbHVycGVyID0gbmV3IEpzb25TbHVycGVyKCkKICAgIAlkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKQogICAgICAgIGFzc2VydCBqc29uX29iamVjdCBpbnN0YW5jZW9mIE1hcCAgCiAgICAgICAgbG9nLmRlYnVnICJtZXNzYWdlOiAiICsgIGpzb25fb2JqZWN0Lm1lc3NhZ2UKCiAgICAgICAgZUxpc3RFcnJvcnMuYWRkKCJFIikKICAgICAgICBlTGlzdEVycm9ycy5hZGQoIlNFTkRNQUlMIikKICAgICAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyAiICIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpKQogICAgICAgIC8vZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncykKICAgICAgICBlTGlzdEVycm9ycy5hZGQoanNvbl9vYmplY3QubWVzc2FnZSkKICAgICAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpCgogICAgICAgIG91dHB1dC5hZGQoZUxpc3QpCiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigneyJFIjoiJyArIG91dHB1dC50b1N0cmluZygpICsgJyJ9JykKICAgICAgICAvL3Rocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oIkUiLCBvdXRwdXQudG9TdHJpbmcoKSkKICAgIH0KfQo=</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
          <arg name="FIELD_SCRIPT_FILE"></arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="null" status="null" step="2">
          <post-functions>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="append.value"></arg>
              <arg name="field.value">%%CURRENT_DATETIME%%</arg>
              <arg name="field.name">customfield_22639</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">14b92cea1dc4f22ec42d0ad489a7359b4ad4a858</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IE5ldyBJbnN0YWxsYXRpb24gLSBDaGVjayBsaW5rZWRUaWNrZXRzICYgRmFzdC1UcmFuc2FjdCB0aGVt</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="371" name="Recupera Tkt">
      <meta name="opsbar-sequence">10</meta>
      <meta name="jira.description"></meta>
      <meta name="jira.fieldscreen.id"></meta>
      <results>
        <unconditional-result old-status="null" status="null" step="1">
          <post-functions>
            <function type="class">
              <arg name="field.name">resolution</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
              <arg name="field.value"></arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </common-actions>
  <steps>
    <step id="1" name="Open">
      <meta name="jira.status.id">1</meta>
      <actions>
<common-action id="51" />
        <action id="11" name="Richiedi Preventivo">
          <meta name="opsbar-sequence">40</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <results>
            <unconditional-result old-status="null" status="null" step="8">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="field.copyFieldSource2"></arg>
                  <arg name="field.copyFieldSource1">customfield_22603</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="field.createTargetValue1"></arg>
                  <arg name="field.copyFieldMode1">OVERWRITE</arg>
                  <arg name="field.copyFieldDestination1">customfield_22656</arg>
                  <arg name="field.copyFieldSeparator1"></arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescopyValueFromOtherField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.CopyValueFromOtherFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="field.type">8</arg>
                  <arg name="full.module.key">com.riadalabs.jira.plugins.insightinsight-post-function</arg>
                  <arg name="field.groovyScript">   import com.atlassian.jira.component.ComponentAccessor;
import java.util.ArrayList;
import com.atlassian.jira.config.util.JiraHome
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.MutableIssue;
import com.atlassian.jira.event.type.EventDispatchOption;

Properties relativePath = new Properties()
File relativePathFile = new File('/var/atlassian/application-data/jira/insightPathToScript.properties')
relativePathFile.withInputStream {
	relativePath.load(it)
}
Properties properties = new Properties()
File propertiesFile = new File('/var/atlassian/application-data/jira' + relativePath['pathToScripts'] + 'opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}

/* Get Insight Object Facade from plugin accessor */
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(&quot;com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade&quot;); 
def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);
 
/* Get Insight Object Type Facade from plugin accessor */
Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(&quot;com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade&quot;); 
def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);
 
/* Get Insight Object Attribute Facade from plugin accessor */
Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(&quot;com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade&quot;); 
def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);

/* Get Insight IQL Facade from plugin accessor */
Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(&quot;com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade&quot;); 
def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);

Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(&quot;com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory&quot;); 
def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);

def OPAA = properties['ischema.aa.id'].toString().toInteger()
def quoteLabourRatesField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteLabourRates'].toString())[0];
def OnSiteRateObjects = new ArrayList();

def ONSITE_RATE_REPORT_OBJ_TYPE = properties['iobj.onSiteRateReport'].toString().toInteger()
def ONSITE_RATE_REPORT_ATTR_NAME = properties['iobj.onSiteRateReport.name.id'] ? properties['iobj.onSiteRateReport.name.id'].toString().toInteger() : 2766
def ONSITE_RATE_REPORT_ATTR_RATE_REF = properties['iobj.onSiteRateReport.rateRef.id'] ? properties['iobj.onSiteRateReport.rateRef.id'].toString().toInteger() : 3186
def ONSITE_RATE_REPORT_ATTR_APPLIED_TO = properties['iobj.onSiteRateReport.appliedTo.id'] ? properties['iobj.onSiteRateReport.appliedTo.id'].toString().toInteger() : 3194
def ONSITE_RATE_REPORT_ATTR_SAP = properties['iobj.onSiteRateReport.sap.id'] ? properties['iobj.onSiteRateReport.sap.id'].toString().toInteger() : 3196
def ONSITE_RATE_REPORT_ATTR_QUOTE_FROM_TKT = properties['iobj.onSiteRateReport.quoteFromTkt.id'] ? properties['iobj.onSiteRateReport.quoteFromTkt.id'].toString().toInteger() : 3203
def ONSITE_RATE_REPORT_ATTR_QUANTITY_CUSTOMER = properties['iobj.onSiteRateReport.qtyCustomer.id'] ? properties['iobj.onSiteRateReport.qtyCustomer.id'].toString().toInteger() : 3189

Issue issue = issue

def objects = iqlFacade.findObjectsByIQLAndSchema(OPAA, &quot;objectType=\&quot;Rates\&quot; AND \&quot;QUOTE_ENABLED\&quot; = true&quot;); // See the complete list of possible IQL on the Insight Query Language documentation page
for (obj in objects){
	log.info obj.toString()
    obj = obj.toString()
    def rateName = obj.substring(0,obj.indexOf('(')-1)
    def rateKey = obj.substring(obj.indexOf('(')+1,obj.indexOf(')'))
    
    /*Set Name*/
    def objectTypeOnSiteRateReport = objectTypeFacade.loadObjectTypeBean(ONSITE_RATE_REPORT_OBJ_TYPE);
    def newObjectBean = objectTypeOnSiteRateReport.createMutableObjectBean();
    
    def objectAttributeBeans = new ArrayList();
    log.info ONSITE_RATE_REPORT_ATTR_NAME.toString()
    def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_RATE_REPORT_ATTR_NAME); 
    
    objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, nameObjectTypeAttributeBean, rateName));
    
    newObjectBean.setObjectAttributeBeans(objectAttributeBeans);
        
    /*Set APPLIED_TO*/
    def appliedToObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_RATE_REPORT_ATTR_APPLIED_TO); 
    
    objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, appliedToObjectTypeAttributeBean, &quot;BOTH&quot;));
    
    newObjectBean.setObjectAttributeBeans(objectAttributeBeans);
    
    /*Set SAP*/
    def sapObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_RATE_REPORT_ATTR_SAP); 
    
    objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, sapObjectTypeAttributeBean, &quot;false&quot;));
    
    newObjectBean.setObjectAttributeBeans(objectAttributeBeans);
    
    /*Set QUOTE_FROM_TKT*/
    def quoteObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_RATE_REPORT_ATTR_QUOTE_FROM_TKT); 
    
    objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, quoteObjectTypeAttributeBean, &quot;true&quot;));
    
    newObjectBean.setObjectAttributeBeans(objectAttributeBeans);
    
    /*Set QUANTITY_CUSTOMER*/
    def qtyCustomerObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_RATE_REPORT_ATTR_QUANTITY_CUSTOMER); 
    
    objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, qtyCustomerObjectTypeAttributeBean, &quot;1&quot;));
    
    newObjectBean.setObjectAttributeBeans(objectAttributeBeans);
    
    
    /* Store the object into Insight. The new ObjectBean will be updated with an unique ID */
    try {
        newObjectBean = objectFacade.storeObjectBean(newObjectBean);
        log.warn(&quot;newObjectBean: &quot; + newObjectBean);
    } catch (Exception vie) {
        log.warn(&quot;Could not create issue due to validation exception:&quot; + vie.getMessage());
    }
    
    /* Update RATE_REF on the newObject */		        
    def objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_RATE_REPORT_ATTR_RATE_REF).createMutable() //The id of the attribute
    
    /* Create the new attribute bean based on the value */
    def newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, rateKey);
    /* Load the attribute bean */
    def objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), rateKey);
    if (objectAttributeBean != null) {
        /* If attribute exist reuse the old id for the new attribute */
        newObjectAttributeBean.setId(objectAttributeBean.getId());
    }
    /* Store the object attribute into Insight. */
    try {
        objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);
    } catch (Exception vie) {
        log.warn(&quot;Could not update object attribute due to validation exception:&quot; + vie.getMessage());
    }  
    
    OnSiteRateObjects.add(newObjectBean)
}
log.info (&quot;OnSiteRateObjects: &quot; + OnSiteRateObjects)
def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()

if (!OnSiteRateObjects.isEmpty()) {
    MutableIssue mi = (MutableIssue) issue;
    mi.setCustomFieldValue(quoteLabourRatesField, OnSiteRateObjects);
    ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
}      </arg>
                  <arg name="field.filepath"></arg>
                  <arg name="class.name">com.riadalabs.jira.plugins.insight.services.jira.postfunction.InsightPostFunction</arg>
                  <arg name="field.description">OP: Automatically create Labour Rates for offer Tkt</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="21" name="Tkt Risolto Telefonicamente">
          <meta name="opsbar-sequence">30</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_NOTES">YCFgT1A6IEVuYWJsZWQgb25seSBmb3IgTWFpbnRlbmFuY2UgVGlja2V0</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ01haW50ZW5hbmNlIFRpY2tldCd8fHw=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="7">
              <post-functions>
                <function type="class">
                  <arg name="field.name">resolution</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
                  <arg name="field.value">1</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="31" name="Converti in Nuova Installazione">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_NOTES">YCFgQ2hhbmdlIHRvIE5ldyBJbnN0YWxsYXRpb24gaWYgaXNzdWUgdHlwZSA9IE1haW50ZW5hbmNl</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ01haW50ZW5hbmNlIFRpY2tldCd8fHw=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="1">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">YCFgT1A6IENoYW5nZSBpc3N1ZSB0eXBlIGZyb20gTWFpbnRlbmFuY2UgdG8gTmV3IEluc3RhbGxhdGlvbg==</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3IKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZQppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnV0aWwuRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuaXNzdWV0eXBlLklzc3VlVHlwZQppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lcgppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGwKClByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKCkKRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJykKcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHsKCXByb3BlcnRpZXMubG9hZChpdCkKfQoKLyogRGVmaW5lIGEgTG9nZ2VyICovCmRlZiBDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQpsb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRykKCmRlZiBjb25zdGFudHNNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q29uc3RhbnRzTWFuYWdlcigpCgpJc3N1ZSBpc3N1ZSA9IGlzc3VlICAvLyBUaGlzIHdoYXQgSSB3YXMgbG9va2luZyBmb3IgOi0pLiBBcyBzaW1wbGUgYXMgaXQgaXMsIGJ1dCBJIGRpZG4ndCBrbm93IHRoYXQuCgpJc3N1ZVR5cGUgdGFyZ2V0SXNzdWVUeXBlID0gbnVsbApkZWYgaXNzdWVUeXBlCgpsb2cuZGVidWcgIklzc3VlVHlwZSBvbGQgPSAiICsgaXNzdWUuaXNzdWVUeXBlLm5hbWUKCmRlZiBjb2xsZWN0aW9uID0gY29uc3RhbnRzTWFuYWdlci5nZXRBbGxJc3N1ZVR5cGVPYmplY3RzKCkKZGVmIGl0ZXJhdG9yID0gY29sbGVjdGlvbi5pdGVyYXRvcigpCndoaWxlKGl0ZXJhdG9yLmhhc05leHQoKSl7Cglpc3N1ZVR5cGUgPSBpdGVyYXRvci5uZXh0KCkKCWlmKGlzc3VlVHlwZS5uYW1lID09IHByb3BlcnRpZXNbJ2l0Lm5ld0luc3RhbGxhdGlvbiddLnRvU3RyaW5nKCkpewoJCXRhcmdldElzc3VlVHlwZSA9IGlzc3VlVHlwZQoJfQp9Cgpsb2cuZGVidWcgdGFyZ2V0SXNzdWVUeXBlLm5hbWUKaXNzdWUuc2V0SXNzdWVUeXBlT2JqZWN0KHRhcmdldElzc3VlVHlwZSkKbG9nLmRlYnVnICJJc3N1ZVR5cGUgbmV3ID0gIiArIGlzc3VlLmlzc3VlVHlwZS5uYW1l</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="fieldValue">New Installation</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="append.value"></arg>
                  <arg name="field.value">New Installation Ticket</arg>
                  <arg name="field.name">summary</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="append.value"></arg>
                  <arg name="field.value">New Installation Ticket</arg>
                  <arg name="field.name">customfield_22716</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="41" name="Converti in Manutenzione Riparativa">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_NOTES">YCFgQ2hhbmdlIHRvIE1haW50ZW5hbmNlIGlmIGlzc3VlIHR5cGUgPSBOZXcgSW5zdGFsbGF0aW9u</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ05ldyBJbnN0YWxsYXRpb24nfHx8</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="1">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">bee29a4ffd9e55a6f278af205f741799fc63bbef</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IENoYW5nZSBpc3N1ZSB0eXBlIGZyb20gTmV3IEluc3RhbGxhdGlvbiB0byBNYWludGVuYW5jZQ==</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3IKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZQppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnV0aWwuRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuaXNzdWV0eXBlLklzc3VlVHlwZQppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lcgppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGwKClByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKCkKRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJykKcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHsKCXByb3BlcnRpZXMubG9hZChpdCkKfQoKLyogRGVmaW5lIGEgTG9nZ2VyICovCmRlZiBDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQpsb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRykKCmRlZiBjb25zdGFudHNNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q29uc3RhbnRzTWFuYWdlcigpCgpJc3N1ZSBpc3N1ZSA9IGlzc3VlICAvLyBUaGlzIHdoYXQgSSB3YXMgbG9va2luZyBmb3IgOi0pLiBBcyBzaW1wbGUgYXMgaXQgaXMsIGJ1dCBJIGRpZG4ndCBrbm93IHRoYXQuCgpJc3N1ZVR5cGUgdGFyZ2V0SXNzdWVUeXBlID0gbnVsbApkZWYgaXNzdWVUeXBlCgpsb2cuZGVidWcgIklzc3VlVHlwZSBvbGQgPSAiICsgaXNzdWUuaXNzdWVUeXBlLm5hbWUKbG9nLmRlYnVnIHByb3BlcnRpZXNbJ2l0Lm1haW50ZW5hbmNlJ10udG9TdHJpbmcoKQpkZWYgY29sbGVjdGlvbiA9IGNvbnN0YW50c01hbmFnZXIuZ2V0QWxsSXNzdWVUeXBlT2JqZWN0cygpCmRlZiBpdGVyYXRvciA9IGNvbGxlY3Rpb24uaXRlcmF0b3IoKQp3aGlsZShpdGVyYXRvci5oYXNOZXh0KCkpewoJaXNzdWVUeXBlID0gaXRlcmF0b3IubmV4dCgpCglpZihpc3N1ZVR5cGUubmFtZSA9PSAocHJvcGVydGllc1snaXQubWFpbnRlbmFuY2UnXSA/IHByb3BlcnRpZXNbJ2l0Lm1haW50ZW5hbmNlJ10udG9TdHJpbmcoKSA6ICJNYWludGVuYW5jZSBUaWNrZXQiKSl7CgkJdGFyZ2V0SXNzdWVUeXBlID0gaXNzdWVUeXBlCgl9Cn0KCmxvZy5kZWJ1ZyB0YXJnZXRJc3N1ZVR5cGUubmFtZQppc3N1ZS5zZXRJc3N1ZVR5cGVPYmplY3QodGFyZ2V0SXNzdWVUeXBlKQpsb2cuZGVidWcgIklzc3VlVHlwZSBuZXcgPSAiICsgaXNzdWUuaXNzdWVUeXBlLm5hbWU=</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="fieldValue">Maintenance Ticket</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="append.value"></arg>
                  <arg name="field.value">Maintenance Ticket</arg>
                  <arg name="field.name">customfield_22716</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="append.value"></arg>
                  <arg name="field.value">Maintenance Ticket</arg>
                  <arg name="field.name">summary</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="61" name="Chiusura Massiva FAAC Service">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <results>
            <unconditional-result old-status="null" status="null" step="7">
              <post-functions>
                <function type="class">
                  <arg name="field.name">resolution</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
                  <arg name="field.value">6</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="2" name="Assigned To Supplier">
      <meta name="jira.status.id">14327</meta>
      <actions>
        <action id="71" name="Accetta Intervento" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19905</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">9ea9661d5b7954626bd1f3b6b542df62f7afc3dd</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIGVycm9ycyAmIHdhcm5pbmdz</arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZQppbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb24KaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3IKaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGdyb292eS5qc29uLkpzb25CdWlsZGVyCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbAoKUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKQpGaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKQpwcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0gewoJcHJvcGVydGllcy5sb2FkKGl0KQp9CmRlZiBDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQogCklzc3VlIGlzc3VlID0gaXNzdWUKCmRlZiBlcnJvcnMgPSBmYWxzZQpkZWYgd2FybmluZ3MgPSBmYWxzZQoKZGVmIHN1cHBsaWVyTGFiZWwgPSBwcm9wZXJ0aWVzWydjZi5zdXBwbGllciddID8gcHJvcGVydGllc1snY2Yuc3VwcGxpZXInXS50b1N0cmluZygpIDogIk9QX1NVUFBMSUVSIgpkZWYgc3VwcGxpZXIgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHN1cHBsaWVyTGFiZWwpWzBdCgpkZWYgZXJyb3JNYW5kYXRvcnlGaWVsZHMgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIHdhcm5pbmdFbXB0eUZpZWxkcyA9IG5ldyBBcnJheUxpc3QoKQogCi8vT1BfU1VQUExJRVJfUkVQQUlSIHZzIE9QX1NVUFBMSUVSX05FV0lOU1QKbG9nLmRlYnVnICJzdXBwbGllckxhYmVsOiAiICsgc3VwcGxpZXJMYWJlbAppZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHN1cHBsaWVyKT09bnVsbCB8fCAoU3RyaW5nKWlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc3VwcGxpZXIpID09ICIiIHx8IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc3VwcGxpZXIpLnRvU3RyaW5nKCkuZXF1YWxzKCIiKSl7CgllcnJvcnMgPSB0cnVlCgllcnJvck1hbmRhdG9yeUZpZWxkcy5hZGQoc3VwcGxpZXJMYWJlbCkKICAgIGxvZy5kZWJ1ZyAiZXJyb3JNYW5kYXRvcnlGaWVsZHM6ICIgKyBlcnJvck1hbmRhdG9yeUZpZWxkcwp9CgoKZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKQoKaWYgKCFlcnJvcnMgJiYgIXdhcm5pbmdzKXsKICAgIHJldHVybiB0cnVlCn1lbHNlewogICAgaWYoIWVycm9ycyAmJiB3YXJuaW5ncyl7CiAgICAgICAgZGVmIHdMaXN0ID0gbmV3IEFycmF5TGlzdCgpCiAgICAgICAgCiAgICAgICAgaWYod2FybmluZ0VtcHR5RmllbGRzLnNpemUoKSA+IDApewogICAgICAgICAgICBkZWYgd0xpc3RDb25maXJtRW1wdHkgPSBuZXcgQXJyYXlMaXN0KCkKICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHkuYWRkKCJXIikKICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHkuYWRkKCJDT05GSVJNX0VNUFRZX0ZJRUxEUyIpCiAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5LmFkZChudWxsKQogICAgICAgICAgICB3TGlzdENvbmZpcm1FbXB0eS5hZGQod2FybmluZ0VtcHR5RmllbGRzKQoKICAgICAgICAgICAgd0xpc3QuYWRkKHdMaXN0Q29uZmlybUVtcHR5KQogICAgICAgIH0KICAgICAgICAKICAgICAgICBvdXRwdXQuYWRkKHdMaXN0KQogICAgICAgIHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oJ3siVyI6IicgKyBvdXRwdXQudG9TdHJpbmcoKSArICcifScpCiAgICAgICAgLy90aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCJXIiwgb3V0cHV0LnRvU3RyaW5nKCkpICAgCiAgICB9CiAgICBpZihlcnJvcnMgJiYgIXdhcm5pbmdzKXsKICAgICAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KCkKICAgICAgICAKICAgICAgICBpZihlcnJvck1hbmRhdG9yeUZpZWxkcy5zaXplKCkgPiAwKXsKICAgICAgICAgICAgZGVmIGVMaXN0TWFuZGF0b3J5ID0gbmV3IEFycmF5TGlzdCgpCiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZCgiRSIpCiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZCgiTUFOREFUT1JZX0ZJRUxEUyIpCiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZChudWxsKQogICAgICAgICAgICBlTGlzdE1hbmRhdG9yeS5hZGQoZXJyb3JNYW5kYXRvcnlGaWVsZHMpCiAgICAgICAgICAgIGVMaXN0LmFkZChlTGlzdE1hbmRhdG9yeSkKICAgICAgICB9CiAgICAgICAgb3V0cHV0LmFkZChlTGlzdCkKICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7IkUiOiInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnIn0nKQogICAgICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigiRSIsIG91dHB1dC50b1N0cmluZygpKSAgIAogICAgfQogICAgaWYoZXJyb3JzICYmIHdhcm5pbmdzKXsKICAgICAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KCkKICAgICAgICBkZWYgd0xpc3QgPSBuZXcgQXJyYXlMaXN0KCkKICAgICAgICAKICAgICAgICBpZihlcnJvck1hbmRhdG9yeUZpZWxkcy5zaXplKCkgPiAwKXsKICAgICAgICAgICAgZGVmIGVMaXN0TWFuZGF0b3J5ID0gbmV3IEFycmF5TGlzdCgpCiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZCgiRSIpCiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZCgiTUFOREFUT1JZX0ZJRUxEUyIpCiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZChudWxsKQogICAgICAgICAgICBlTGlzdE1hbmRhdG9yeS5hZGQoZXJyb3JNYW5kYXRvcnlGaWVsZHMpCiAgICAgICAgICAgIGVMaXN0LmFkZChlTGlzdE1hbmRhdG9yeSkKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgaWYod2FybmluZ0VtcHR5RmllbGRzLnNpemUoKSA+IDApewogICAgICAgICAgICBkZWYgd0xpc3RDb25maXJtRW1wdHkgPSBuZXcgQXJyYXlMaXN0KCkKICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHkuYWRkKCJXIikKICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHkuYWRkKCJDT05GSVJNX0VNUFRZX0ZJRUxEUyIpCiAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5LmFkZChudWxsKQogICAgICAgICAgICB3TGlzdENvbmZpcm1FbXB0eS5hZGQod2FybmluZ0VtcHR5RmllbGRzKQoKICAgICAgICAgICAgd0xpc3QuYWRkKHdMaXN0Q29uZmlybUVtcHR5KQogICAgICAgIH0KICAgICAgICAKICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KQogICAgICAgIG91dHB1dC5hZGQod0xpc3QpCiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigneyJXRSI6IicgKyBvdXRwdXQudG9TdHJpbmcoKSArICcifScpCiAgICAgICAgLy90aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCJXRSIsIG91dHB1dC50b1N0cmluZygpKSAgCiAgICB9Cn0=</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="3">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">YCFgT1A6IE5ldyBJbnN0YWxsYXRpb24gLSBDaGVjayBsaW5rZWRUaWNrZXRzICYgRmFzdC1UcmFuc2FjdCB0aGVt</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmluZGV4Lklzc3VlSW5kZXhpbmdTZXJ2aWNlCmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuZXZlbnQudHlwZS5FdmVudERpc3BhdGNoT3B0aW9uCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUudXRpbC5EZWZhdWx0SXNzdWVDaGFuZ2VIb2xkZXIKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Nb2RpZmllZFZhbHVlCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUubGluay5Jc3N1ZUxpbmsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5pbmRleC5Jc3N1ZUluZGV4aW5nU2VydmljZQppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lcgppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGwKClByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKCkKRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJykKcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHsKCXByb3BlcnRpZXMubG9hZChpdCkKfQpDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQpsb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5XQVJOKQoKbG9nLndhcm4gIiR7aXNzdWUua2V5fSBUcmFuc2F6aW9uZSBBQ0NFUFRFRCBCWSBTVVBQTElFUiAtIFBvc3QgRnVuY3Rpb24gY2hlY2sgbGlua2VkSXNzdWVzIgoKSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpOwpDdXN0b21GaWVsZE1hbmFnZXIgY3VzdG9tRmllbGRNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCk7CmRlZiBhdXRvbWF0aWNhbGx5Q29uZmlybWVkID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi5hdXRvbWF0aWNhbGx5QWNjZXB0ZWQnXSA/IHByb3BlcnRpZXNbJ2NmLmF1dG9tYXRpY2FsbHlBY2NlcHRlZCddLnRvU3RyaW5nKCkgOiAiT1BfQVVUT01BVElDQUxMWV9BQ0NFUFRFRCIpWzBdCklzc3VlSW5kZXhpbmdTZXJ2aWNlIAlpc3N1ZUluZGV4aW5nU2VydmljZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldENvbXBvbmVudChJc3N1ZUluZGV4aW5nU2VydmljZSkKCklzc3VlIGlzc3VlID0gaXNzdWUKLy9QZXIgdGVzdCBkYSBjb25zb2xlCi8vaXNzdWUgPSBpc3N1ZU1hbmFnZXIuZ2V0SXNzdWVCeUtleUlnbm9yZUNhc2UoIk9QVVQtMjc2IikKCi8qREVWKi8KQUNDRVBUID0gcHJvcGVydGllc1snd2YudHIuYWNjZXB0J10gPyBwcm9wZXJ0aWVzWyd3Zi50ci5hY2NlcHQnXSA6IDcxCgovKlBST0QqLwovL0NPTkZJUk1fVE9fQ1VTVE9NRVIKCmRlZiB1c2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SmlyYUF1dGhlbnRpY2F0aW9uQ29udGV4dCgpLmdldExvZ2dlZEluVXNlcigpCmRlZiBpc3N1ZVNlcnZpY2UgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZVNlcnZpY2UoKQoKLypTZSBlc2VndW8gbGEgY29uZmlybSB0byBjdXN0b21lciBzdSB1biB0aWNrZXQgY29uIDEgbyArIHRpY2tldCBjb2xsZWdhdGksIHZlcmlmaWNvIGUgc3Bvc3RvIGluIGF1dG9tYXRpY28gZ2xpIGV2ZW50dWFsaSB0aWNrZXQgY29sbGVnYXRpKi8KbG9nLndhcm4gInZlcmlmaWNvIGUgc3Bvc3RvIGluIGF1dG9tYXRpY28gZ2xpIGV2ZW50dWFsaSB0aWNrZXQgY29sbGVnYXRpIgoKaWYoaXNzdWUuZ2V0SXNzdWVUeXBlKCkuZ2V0TmFtZSgpID09IHByb3BlcnRpZXNbJ2l0Lm5ld0luc3RhbGxhdGlvbiddLnRvU3RyaW5nKCkgJiYgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q29uZmlybWVkKT09bnVsbCB8fCBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGF1dG9tYXRpY2FsbHlDb25maXJtZWQpLnRvU3RyaW5nKCkuZXF1YWxzKCJObyIpKXsKICAgIExpc3Q8SXNzdWVMaW5rPiBhbGxJbklzc3VlTGluayA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTGlua01hbmFnZXIoKS5nZXRJbndhcmRMaW5rcyhpc3N1ZS5nZXRJZCgpKQogICAgZm9yIChJdGVyYXRvcjxJc3N1ZUxpbms+IG91dEl0ZXJhdG9yID0gYWxsSW5Jc3N1ZUxpbmsuaXRlcmF0b3IoKTsgb3V0SXRlcmF0b3IuaGFzTmV4dCgpOykgewogICAgICAgIElzc3VlTGluayBpc3N1ZUxpbmsgPSAoSXNzdWVMaW5rKSBvdXRJdGVyYXRvci5uZXh0KCk7CgogICAgICAgIGlmKGlzc3VlTGluay5pc3N1ZUxpbmtUeXBlLmdldE5hbWUoKS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpbC5saW5rZWRUa3RzUmVsYXRlcyddLnRvU3RyaW5nKCkpKXsKICAgICAgICAgICAgbG9nLndhcm4gIklzc3VlIGNvbiByZWxhdGVzSW5Jc3N1ZUxpbmsiCiAgICAgICAgICAgIC8qRXNlZ3VpcmUgdHJhbnNhemlvbmUgZGkgc3RhdG8gZGVsbGEgc291cmNlSXNzdWUqLwogICAgICAgICAgICBkZWYgbGlua2VkSXNzdWUgPSBpc3N1ZUxpbmsuZ2V0U291cmNlT2JqZWN0KCkKICAgICAgICAgICAgZGVmIGxpbmtlZElzc3VlU3RhdHVzID0gbGlua2VkSXNzdWUuZ2V0U3RhdHVzKCkKICAgICAgICAgICAgZGVmIHRyYW5zaXRpb25JZAogICAgICAgICAgICBpZihsaW5rZWRJc3N1ZVN0YXR1cy5uYW1lID09IChwcm9wZXJ0aWVzWyd3Zi5hc3NpZ25lZFRvU3VwcGxpZXInXSA/IHByb3BlcnRpZXNbJ3dmLmFzc2lnbmVkVG9TdXBwbGllciddLnRvU3RyaW5nKCkgOiAiQXNzaWduZWQgVG8gU3VwcGxpZXIiKSl7CiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uSWQ9QUNDRVBUCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYodHJhbnNpdGlvbklkPT1BQ0NFUFQpewogICAgICAgICAgICAgICAgLy8gUHJlcGFyZSBvdXIgaW5wdXQgZm9yIHRoZSB0cmFuc2l0aW9uCiAgICAgICAgICAgICAgICBkZWYgaXNzdWVJbnB1dFBhcmFtZXRlcnMgPSBpc3N1ZVNlcnZpY2UubmV3SXNzdWVJbnB1dFBhcmFtZXRlcnMoKQogICAgICAgICAgICAgICAgaXNzdWVJbnB1dFBhcmFtZXRlcnMud2l0aCB7CiAgICAgICAgICAgICAgICAgICAgc2V0U2tpcFNjcmVlbkNoZWNrKHRydWUpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvL2RlZiBmaWVsZENvbmZpZyA9IGF1dG9tYXRpY2FsbHlDbG9zZWQuZ2V0UmVsZXZhbnRDb25maWcoaXNzdWUpCiAgICAgICAgICAgICAgICAvL0NvbXBvbmVudEFjY2Vzc29yLm9wdGlvbnNNYW5hZ2VyLmdldE9wdGlvbnMoZmllbGRDb25maWcpPy5maW5kIHsgaXQudG9TdHJpbmcoKSA9PSAiWWVzIiB9CiAgICAgICAgICAgICAgICAvL2lzc3VlSW5wdXRQYXJhbWV0ZXJzLmFkZEN1c3RvbUZpZWxkVmFsdWUoZmllbGRDb25maWcuZ2V0SWQoKSwgIlllcyIpIAogICAgICAgICAgICAgICAgLy9sb2cud2FybiAiaXNzdWVJbnB1dFBhcmFtZXRlcnM6ICIgKyBpc3N1ZUlucHV0UGFyYW1ldGVycwogICAgICAgICAgICAgICAgZGVmIGN1cnJlbnRVc2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SmlyYUF1dGhlbnRpY2F0aW9uQ29udGV4dCgpLmdldExvZ2dlZEluVXNlcigpCiAgICAgICAgICAgICAgICBkZWYgbWkgPSAoTXV0YWJsZUlzc3VlKSBsaW5rZWRJc3N1ZQoKICAgICAgICAgICAgICAgIGRlZiBmaWVsZENvbmZpZyA9IGF1dG9tYXRpY2FsbHlDb25maXJtZWQuZ2V0UmVsZXZhbnRDb25maWcobGlua2VkSXNzdWUpCiAgICAgICAgICAgICAgICBsb2cud2FybiAiZmllbGRDb25maWc6ICIgKyBmaWVsZENvbmZpZwogICAgICAgICAgICAgICAgZGVmIGNmTmV3VmFsdWUgPSBDb21wb25lbnRBY2Nlc3Nvci5vcHRpb25zTWFuYWdlci5nZXRPcHRpb25zKGZpZWxkQ29uZmlnKT8uZmluZCB7IGl0LnRvU3RyaW5nKCkgPT0gIlllcyIgfQogICAgICAgICAgICAgICAgYXV0b21hdGljYWxseUNvbmZpcm1lZC51cGRhdGVWYWx1ZShudWxsLCBsaW5rZWRJc3N1ZSwgbmV3IE1vZGlmaWVkVmFsdWUobGlua2VkSXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q29uZmlybWVkKSwgY2ZOZXdWYWx1ZSksIG5ldyBEZWZhdWx0SXNzdWVDaGFuZ2VIb2xkZXIoKSkKCiAgICAgICAgICAgICAgICBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKS51cGRhdGVJc3N1ZShjdXJyZW50VXNlciwgbWksIEV2ZW50RGlzcGF0Y2hPcHRpb24uRE9fTk9UX0RJU1BBVENILCBmYWxzZSk7CiAgICAgICAgICAgICAgICBpc3N1ZUluZGV4aW5nU2VydmljZS5yZUluZGV4KGxpbmtlZElzc3VlKQogICAgICAgICAgICAgICAgbG9nLndhcm4gIlVwZGF0ZWQgY3VzdG9tZmllbGQgLSBpc3N1ZSBsaW5rYXRhIgoKICAgICAgICAgICAgICAgIC8vZGVmIHZhbGlkYXRpb25SZXN1bHQgPSBpc3N1ZVNlcnZpY2UudmFsaWRhdGVUcmFuc2l0aW9uKHVzZXIsIGxpbmtlZElzc3VlLmlkLCB0cmFuc2l0aW9uSWQsIGlzc3VlSW5wdXRQYXJhbWV0ZXJzKQogICAgICAgICAgICAgICAgaWYgKGlzc3VlU2VydmljZS52YWxpZGF0ZVRyYW5zaXRpb24odXNlciwgbGlua2VkSXNzdWUuaWQsIHRyYW5zaXRpb25JZCwgaXNzdWVJbnB1dFBhcmFtZXRlcnMpLmlzVmFsaWQoKSkgewogICAgICAgICAgICAgICAgICAgIC8vIFBlcmZvcm0gdGhlIHRyYW5zaXRpb24KICAgICAgICAgICAgICAgICAgICBkZWYgaXNzdWVSZXN1bHQgPSBpc3N1ZVNlcnZpY2UudHJhbnNpdGlvbih1c2VyLCBpc3N1ZVNlcnZpY2UudmFsaWRhdGVUcmFuc2l0aW9uKHVzZXIsIGxpbmtlZElzc3VlLmlkLCB0cmFuc2l0aW9uSWQsIGlzc3VlSW5wdXRQYXJhbWV0ZXJzKSkKICAgICAgICAgICAgICAgICAgICBpZiAoISBpc3N1ZVJlc3VsdC5pc1ZhbGlkKCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbG9nLndhcm4oIkZhaWxlZCB0byB0cmFuc2l0aW9uIHRhc2sgJHtsaW5rZWRJc3N1ZS5rZXl9LCBlcnJvcnM6ICR7aXNzdWVSZXN1bHQuZXJyb3JDb2xsZWN0aW9ufSIpCiAgICAgICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgICAgIGxvZy53YXJuKCJUcmFuc2F6aW9uZSBmYXR0YSA3OSAke2xpbmtlZElzc3VlLmtleX0sIGVycm9yczogJHtpc3N1ZVJlc3VsdC5lcnJvckNvbGxlY3Rpb259LCAke2xpbmtlZElzc3VlLnN0YXR1c30iKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgbG9nLndhcm4oIkNvdWxkIG5vdCB0cmFuc2l0aW9uIHRhc2sgJHtsaW5rZWRJc3N1ZS5rZXl9LCBlcnJvcnM6ICR7aXNzdWVTZXJ2aWNlLnZhbGlkYXRlVHJhbnNpdGlvbih1c2VyLCBsaW5rZWRJc3N1ZS5pZCwgdHJhbnNpdGlvbklkLCBpc3N1ZUlucHV0UGFyYW1ldGVycykuZXJyb3JDb2xsZWN0aW9ufSIpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgTGlzdDxJc3N1ZUxpbms+IGFsbE91dElzc3VlTGluayA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTGlua01hbmFnZXIoKS5nZXRPdXR3YXJkTGlua3MoaXNzdWUuZ2V0SWQoKSkKICAgIGZvciAoSXRlcmF0b3I8SXNzdWVMaW5rPiBvdXRJdGVyYXRvciA9IGFsbE91dElzc3VlTGluay5pdGVyYXRvcigpOyBvdXRJdGVyYXRvci5oYXNOZXh0KCk7KSB7CiAgICAgICAgSXNzdWVMaW5rIGlzc3VlTGluayA9IChJc3N1ZUxpbmspIG91dEl0ZXJhdG9yLm5leHQoKTsKCiAgICAgICAgaWYoaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNSZWxhdGVzJ10udG9TdHJpbmcoKSkpewogICAgICAgICAgICBsb2cud2FybiAiSXNzdWUgY29uIHJlbGF0ZXNPdXRJc3N1ZUxpbmsiCiAgICAgICAgICAgIC8qRXNlZ3VpcmUgdHJhbnNhemlvbmUgZGkgc3RhdG8gZGVsbGEgZGVzdGluYXRpb25Jc3N1ZSovCiAgICAgICAgICAgIGRlZiBsaW5rZWRJc3N1ZSA9IGlzc3VlTGluay5nZXREZXN0aW5hdGlvbk9iamVjdCgpCiAgICAgICAgICAgIGRlZiBsaW5rZWRJc3N1ZVN0YXR1cyA9IGxpbmtlZElzc3VlLmdldFN0YXR1cygpCiAgICAgICAgICAgIGRlZiB0cmFuc2l0aW9uSWQKICAgICAgICAgICAgbG9nLndhcm4gImxpbmtlZElzc3VlOiAiICsgbGlua2VkSXNzdWUKICAgICAgICAgICAgbG9nLndhcm4gImxpbmtlZElzc3VlU3RhdHVzLm5hbWU6ICIgKyBsaW5rZWRJc3N1ZVN0YXR1cy5uYW1lCiAgICAgICAgICAgIGlmKGxpbmtlZElzc3VlU3RhdHVzLm5hbWUgPT0gKHByb3BlcnRpZXNbJ3dmLmFzc2lnbmVkVG9TdXBwbGllciddID8gcHJvcGVydGllc1snd2YuYXNzaWduZWRUb1N1cHBsaWVyJ10udG9TdHJpbmcoKSA6ICJBc3NpZ25lZCBUbyBTdXBwbGllciIpKXsKICAgICAgICAgICAgICAgIHRyYW5zaXRpb25JZD1BQ0NFUFQKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYodHJhbnNpdGlvbklkPT1BQ0NFUFQpewogICAgICAgICAgICAgICAgLy8gUHJlcGFyZSBvdXIgaW5wdXQgZm9yIHRoZSB0cmFuc2l0aW9uCiAgICAgICAgICAgICAgICBkZWYgaXNzdWVJbnB1dFBhcmFtZXRlcnMgPSBpc3N1ZVNlcnZpY2UubmV3SXNzdWVJbnB1dFBhcmFtZXRlcnMoKQogICAgICAgICAgICAgICAgaXNzdWVJbnB1dFBhcmFtZXRlcnMud2l0aCB7CiAgICAgICAgICAgICAgICAgICAgc2V0U2tpcFNjcmVlbkNoZWNrKHRydWUpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvL2RlZiBmaWVsZENvbmZpZyA9IGF1dG9tYXRpY2FsbHlDbG9zZWQuZ2V0UmVsZXZhbnRDb25maWcoaXNzdWUpCiAgICAgICAgICAgICAgICAvL0NvbXBvbmVudEFjY2Vzc29yLm9wdGlvbnNNYW5hZ2VyLmdldE9wdGlvbnMoZmllbGRDb25maWcpPy5maW5kIHsgaXQudG9TdHJpbmcoKSA9PSAiWWVzIiB9CiAgICAgICAgICAgICAgICAvL2lzc3VlSW5wdXRQYXJhbWV0ZXJzLmFkZEN1c3RvbUZpZWxkVmFsdWUoZmllbGRDb25maWcuZ2V0SWQoKSwgIlllcyIpIAoKICAgICAgICAgICAgICAgIGRlZiBjdXJyZW50VXNlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEppcmFBdXRoZW50aWNhdGlvbkNvbnRleHQoKS5nZXRMb2dnZWRJblVzZXIoKQogICAgICAgICAgICAgICAgZGVmIG1pID0gKE11dGFibGVJc3N1ZSkgbGlua2VkSXNzdWUKCiAgICAgICAgICAgICAgICBkZWYgZmllbGRDb25maWcgPSBhdXRvbWF0aWNhbGx5Q29uZmlybWVkLmdldFJlbGV2YW50Q29uZmlnKGxpbmtlZElzc3VlKQogICAgICAgICAgICAgICAgbG9nLndhcm4gImZpZWxkQ29uZmlnOiAiICsgZmllbGRDb25maWcKICAgICAgICAgICAgICAgIGRlZiBjZk5ld1ZhbHVlID0gQ29tcG9uZW50QWNjZXNzb3Iub3B0aW9uc01hbmFnZXIuZ2V0T3B0aW9ucyhmaWVsZENvbmZpZyk/LmZpbmQgeyBpdC50b1N0cmluZygpID09ICJZZXMiIH0KICAgICAgICAgICAgICAgIGF1dG9tYXRpY2FsbHlDb25maXJtZWQudXBkYXRlVmFsdWUobnVsbCwgbGlua2VkSXNzdWUsIG5ldyBNb2RpZmllZFZhbHVlKGxpbmtlZElzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoYXV0b21hdGljYWxseUNvbmZpcm1lZCksIGNmTmV3VmFsdWUpLCBuZXcgRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyKCkpCgogICAgICAgICAgICAgICAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKCkudXBkYXRlSXNzdWUoY3VycmVudFVzZXIsIG1pLCBFdmVudERpc3BhdGNoT3B0aW9uLkRPX05PVF9ESVNQQVRDSCwgZmFsc2UpOwogICAgICAgICAgICAgICAgaXNzdWVJbmRleGluZ1NlcnZpY2UucmVJbmRleChsaW5rZWRJc3N1ZSkKICAgICAgICAgICAgICAgIGxvZy53YXJuICJVcGRhdGVkIGN1c3RvbWZpZWxkIC0gaXNzdWUgbGlua2F0YSIKCiAgICAgICAgICAgICAgICBpZiAoaXNzdWVTZXJ2aWNlLnZhbGlkYXRlVHJhbnNpdGlvbih1c2VyLCBsaW5rZWRJc3N1ZS5pZCwgdHJhbnNpdGlvbklkLCBpc3N1ZUlucHV0UGFyYW1ldGVycykuaXNWYWxpZCgpKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gUGVyZm9ybSB0aGUgdHJhbnNpdGlvbgogICAgICAgICAgICAgICAgICAgIGRlZiBpc3N1ZVJlc3VsdCA9IGlzc3VlU2VydmljZS50cmFuc2l0aW9uKHVzZXIsIGlzc3VlU2VydmljZS52YWxpZGF0ZVRyYW5zaXRpb24odXNlciwgbGlua2VkSXNzdWUuaWQsIHRyYW5zaXRpb25JZCwgaXNzdWVJbnB1dFBhcmFtZXRlcnMpKQogICAgICAgICAgICAgICAgICAgIGlmICghIGlzc3VlUmVzdWx0LmlzVmFsaWQoKSkgewogICAgICAgICAgICAgICAgICAgICAgICBsb2cud2FybigiRmFpbGVkIHRvIHRyYW5zaXRpb24gdGFzayAke2xpbmtlZElzc3VlLmtleX0sIGVycm9yczogJHtpc3N1ZVJlc3VsdC5lcnJvckNvbGxlY3Rpb259IikKICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgbG9nLndhcm4oIlRyYW5zYXppb25lIGZhdHRhIDEyMiAke2xpbmtlZElzc3VlLmtleX0sIGVycm9yczogJHtpc3N1ZVJlc3VsdC5lcnJvckNvbGxlY3Rpb259LCAke2xpbmtlZElzc3VlLnN0YXR1c30iKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgbG9nLndhcm4oIkNvdWxkIG5vdCB0cmFuc2l0aW9uIHRhc2sgJHtsaW5rZWRJc3N1ZS5rZXl9LCBlcnJvcnM6ICR7aXNzdWVTZXJ2aWNlLnZhbGlkYXRlVHJhbnNpdGlvbih1c2VyLCBsaW5rZWRJc3N1ZS5pZCwgdHJhbnNpdGlvbklkLCBpc3N1ZUlucHV0UGFyYW1ldGVycykuZXJyb3JDb2xsZWN0aW9ufSIpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgfQogICAgfQp9</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">c78e1ae3244cda5eddd8f7276fcd5db77569ce43</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IExpbmtlZCBUaWNrZXRzOiBjaGVjayBhbmQgbGluayByZWxhdGVkIGlzc3Vlcw==</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT"></arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">YCFgT1AgRW1haWwgTm90aWZpY2F0aW9uOiBBQ0NFUFRFRF9CWV9TVVBQTElFUiAtIG1hbnRlbnV0YSBjb21lIHBvc3QgZnVuY3Rpb24gcGVyIGV2aXRhcmUgZGkgZ2VuZXJhcmUgYmxvY2NoaSBhbCBmb3JuaXRvcmUgbGVnYXRpIGFsbCdpbnZpbyBkaSBub3RpZmljaGUgaW50ZXJuZQ==</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7CmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5CkNhdGVnb3J5IGxvZyA9IENhdGVnb3J5LmdldEluc3RhbmNlKCJjb20ub25yZXNvbHZlLmppcmEuZ3Jvb3Z5LlBvc3RGdW5jdGlvbiIpCmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKQppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lcgppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGwKClByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKCkKRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJykKcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHsKCXByb3BlcnRpZXMubG9hZChpdCkKfQpkZWYgcmVxdWVzdE1ldGhvZCA9ICJQT1NUIjsKCklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTsKQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpOwoKZGVmIGJvZHlfcmVxID0gWwoJInRlbXBsYXRlTmFtZSI6IHByb3BlcnRpZXNbJ3R0LmFjY2VwdGVkQnlTdXBwbGllciddLnRvU3RyaW5nKCksCgkicGVjIjogZmFsc2UsCiAgICAiaXNzdWVLZXkiOiBpc3N1ZS5rZXkKXQoKZGVmIGJhc2VVUkwgPSAiaHR0cDovLyIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArICIvb3AvcmVzdC9qaXJhL0FBL3RyYW5zYWN0aW9uL21haWwvc2VuZCIKVVJMIHVybAp1cmwgPSBuZXcgVVJMKGJhc2VVUkwpCgpIdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7CmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KCJDb250ZW50LVR5cGUiLCAiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04Iik7CmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KCJBY2NlcHQiLCAiKi8qIik7CmNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7CmNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTsKY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0KY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcigiVVRGLTgiKSB7IG5ldyBTdHJlYW1pbmdKc29uQnVpbGRlcihpdCwgYm9keV9yZXEpIH0KbG9nLmRlYnVnIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtCmNvbm5lY3Rpb24uY29ubmVjdCgpOwoKbG9nLmRlYnVnICJ1cmw6ICIgKyB1cmwKbG9nLmRlYnVnICJSZXNwb25zZUNvZGU6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkKbG9nLmRlYnVnICJSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKbG9nLmRlYnVnICJnZXRSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKCg==</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="81" name="Rifiuta Intervento" view="fieldscreen">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19906</meta>
          <results>
            <unconditional-result old-status="null" status="null" step="1">
              <post-functions>
                <function type="class">
                  <arg name="FIELD_NOTES">YCFgT1A6IE5ldyBJbnN0YWxsYXRpb24gLSBDaGVjayBsaW5rZWRUaWNrZXRzICYgRmFzdC1UcmFuc2FjdCB0aGVt</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT"></arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22756</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">YCFgT1AgRW1haWwgTm90aWZpY2F0aW9uOiBSRUpFQ1RFRF9CWV9TVVBQTElFUiAtIE1hbnRlbnV0YSBjb21lIHBvc3QgZnVuY3Rpb24gcGVyIG5vbiBnZW5lcmFyZSBibG9jY2hpIGFsIGZvcm5pdG9yZSBsZWdhdGkgYSBlcnJvcmkgZGkgaW52aW8gbWFpbCBpbnRlcm5l</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7CmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5CmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbAoKUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKQpGaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKQpwcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0gewoJcHJvcGVydGllcy5sb2FkKGl0KQp9CkNhdGVnb3J5IGxvZyA9IENhdGVnb3J5LmdldEluc3RhbmNlKCJjb20ub25yZXNvbHZlLmppcmEuZ3Jvb3Z5LlBvc3RGdW5jdGlvbiIpCmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKQoKZGVmIHJlcXVlc3RNZXRob2QgPSAiUE9TVCI7CgpJc3N1ZU1hbmFnZXIgaXNzdWVNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKCk7CkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTsKCmRlZiBib2R5X3JlcSA9IFsKCSJ0ZW1wbGF0ZU5hbWUiOiBwcm9wZXJ0aWVzWyd0dC5yZWplY3RlZEJ5U3VwcGxpZXInXS50b1N0cmluZygpLAoJInBlYyI6IGZhbHNlLAogICAgImlzc3VlS2V5IjogaXNzdWUua2V5Cl0KCmRlZiBiYXNlVVJMID0gImh0dHA6Ly8iICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyAiL29wL3Jlc3QvamlyYS9BQS90cmFuc2FjdGlvbi9tYWlsL3NlbmQiClVSTCB1cmwKdXJsID0gbmV3IFVSTChiYXNlVVJMKQoKSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eSgiQ29udGVudC1UeXBlIiwgImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOCIpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eSgiQWNjZXB0IiwgIiovKiIpOwpjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpOwpjb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7CmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtCmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtLndpdGhXcml0ZXIoIlVURi04IikgeyBuZXcgU3RyZWFtaW5nSnNvbkJ1aWxkZXIoaXQsIGJvZHlfcmVxKSB9CmxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbQpjb25uZWN0aW9uLmNvbm5lY3QoKTsKCmxvZy5kZWJ1ZyAidXJsOiAiICsgdXJsCmxvZy5kZWJ1ZyAiUmVzcG9uc2VDb2RlOiIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpCmxvZy5kZWJ1ZyAiUmVzcG9uc2VNZXNzYWdlOiIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpCmxvZy5kZWJ1ZyAiZ2V0UmVzcG9uc2VNZXNzYWdlOiIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpCgo=</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="3" name="Accepted By Supplier">
      <meta name="jira.status.id">14328</meta>
      <actions>
        <action id="91" name="Invia Conferma Intervento al Cliente" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19907</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">9c15d3e06c08c288db8be2a197da43b6cfcf9624</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlcXVpcmVkIEZpZWxkcyAtIG9ubHkgZXJyb3JzLCBubyB3YXJuaW5ncyAtIFNPTE8gU0UgT1BBQV9BVVRPTUFUSUNBTExZX0NPTkZJUk1FRD09bnVsbCBPUiAhPVllcw==</arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">bc182ea265c648453eb3ce3ec1d06e9d7cbe1ec6</arg>
              <arg name="FIELD_NOTES">YCFgT1AgRW1haWwgTm90aWZpY2F0aW9uOiBDT05GSVJNX1RPX0NVU1RPTUVSIC0gU2UgT1BBQV9BVVRPTUFUSUNBTExZX0NPTkZJUk1FRCA9IG51bGwgT1IgIT0gWWVz</arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_NOTES">YCFgT1A6IFNldCBPUEFBX0FVVE9NQVRJQ0FMTFlfQ09ORklSTUVEPU5vIGlmIE9QQUFfQVVUT01BVElDQUxMWV9DT05GSVJNRUQ9bnVsbCBPUiAhPVllcw==</arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnV0aWwuRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTW9kaWZpZWRWYWx1ZQppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmV2ZW50LnR5cGUuRXZlbnREaXNwYXRjaE9wdGlvbgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmluZGV4Lklzc3VlSW5kZXhpbmdTZXJ2aWNlCgppbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeQppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lcgppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGwKClByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKCkKRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJykKcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHsKCXByb3BlcnRpZXMubG9hZChpdCkKfQpDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQpsb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRykKCmRlZiByZXF1ZXN0TWV0aG9kID0gIlBPU1QiOwoKSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpOwpDdXN0b21GaWVsZE1hbmFnZXIgY3VzdG9tRmllbGRNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCk7Cklzc3VlSW5kZXhpbmdTZXJ2aWNlIAlpc3N1ZUluZGV4aW5nU2VydmljZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldENvbXBvbmVudChJc3N1ZUluZGV4aW5nU2VydmljZSkKCmRlZiBhdXRvbWF0aWNhbGx5Q29uZmlybWVkID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi5hdXRvbWF0aWNhbGx5Q29uZmlybWVkJ10udG9TdHJpbmcoKSlbMF0KCmxvZy5kZWJ1ZyAiaXNzdWU6ICIgKyBpc3N1ZS5rZXkgKyAiIC0gaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q29uZmlybWVkKTogIiArIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoYXV0b21hdGljYWxseUNvbmZpcm1lZCkKCmlmKGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoYXV0b21hdGljYWxseUNvbmZpcm1lZCk9PW51bGwgfHwgIWlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoYXV0b21hdGljYWxseUNvbmZpcm1lZCkudG9TdHJpbmcoKS5lcXVhbHMoIlllcyIpKXsKICAgICAgICBkZWYgY3VycmVudFVzZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRKaXJhQXV0aGVudGljYXRpb25Db250ZXh0KCkuZ2V0TG9nZ2VkSW5Vc2VyKCkKICAgICAgICBkZWYgbWkgPSAoTXV0YWJsZUlzc3VlKSBpc3N1ZQoKICAgICAgICBkZWYgZmllbGRDb25maWcgPSBhdXRvbWF0aWNhbGx5Q29uZmlybWVkLmdldFJlbGV2YW50Q29uZmlnKGlzc3VlKQogICAgICAgIGxvZy5kZWJ1ZyAiZmllbGRDb25maWc6ICIgKyBmaWVsZENvbmZpZyArICIgZGEgYWdnaW9ybmFyZSBzdSBpc3N1ZSAke2lzc3VlfSIKICAgICAgICBkZWYgY2ZOZXdWYWx1ZSA9IENvbXBvbmVudEFjY2Vzc29yLm9wdGlvbnNNYW5hZ2VyLmdldE9wdGlvbnMoZmllbGRDb25maWcpPy5maW5kIHsgaXQudG9TdHJpbmcoKSA9PSAiTm8iIH0KICAgICAgICBsb2cuZGVidWcgImNmTmV3VmFsdWU6ICIgKyBjZk5ld1ZhbHVlCiAgICAgICAgYXV0b21hdGljYWxseUNvbmZpcm1lZC51cGRhdGVWYWx1ZShudWxsLCBpc3N1ZSwgbmV3IE1vZGlmaWVkVmFsdWUoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q29uZmlybWVkKSwgY2ZOZXdWYWx1ZSksIG5ldyBEZWZhdWx0SXNzdWVDaGFuZ2VIb2xkZXIoKSkKCiAgICAgICAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKCkudXBkYXRlSXNzdWUoY3VycmVudFVzZXIsIG1pLCBFdmVudERpc3BhdGNoT3B0aW9uLkRPX05PVF9ESVNQQVRDSCwgZmFsc2UpOwogICAgICAgIGlzc3VlSW5kZXhpbmdTZXJ2aWNlLnJlSW5kZXgoaXNzdWUpCiAgICAgICAgbG9nLmRlYnVnICJVcGRhdGVkIGN1c3RvbWZpZWxkIC0gaXNzdWUgcHJpbmNpcGFsZTogJHtpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGF1dG9tYXRpY2FsbHlDb25maXJtZWQpfSIKfQ==</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="4">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="append.value"></arg>
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="field.name">customfield_22640</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">4dcfdd4f11f7d9ea3966d7c23e98027086a2ee90</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIGxpbmtlZFRpY2tldHMgJiBGYXN0LVRyYW5zYWN0IHRoZW0=</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmluZGV4Lklzc3VlSW5kZXhpbmdTZXJ2aWNlCmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuZXZlbnQudHlwZS5FdmVudERpc3BhdGNoT3B0aW9uCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUudXRpbC5EZWZhdWx0SXNzdWVDaGFuZ2VIb2xkZXIKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Nb2RpZmllZFZhbHVlCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUubGluay5Jc3N1ZUxpbmsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5pbmRleC5Jc3N1ZUluZGV4aW5nU2VydmljZQppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lcgppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGwKClByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKCkKRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJykKcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHsKCXByb3BlcnRpZXMubG9hZChpdCkKfQpDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQpsb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5XQVJOKQoKbG9nLndhcm4gIiR7aXNzdWUua2V5fSBUcmFuc2F6aW9uZSBDb21wbGV0ZSAtIFBvc3QgRnVuY3Rpb24gY2hlY2sgbGlua2VkSXNzdWVzIgoKSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpOwpDdXN0b21GaWVsZE1hbmFnZXIgY3VzdG9tRmllbGRNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCk7CmRlZiBhdXRvbWF0aWNhbGx5Q29uZmlybWVkID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi5hdXRvbWF0aWNhbGx5Q29uZmlybWVkJ10udG9TdHJpbmcoKSlbMF0KSXNzdWVJbmRleGluZ1NlcnZpY2UgCWlzc3VlSW5kZXhpbmdTZXJ2aWNlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q29tcG9uZW50KElzc3VlSW5kZXhpbmdTZXJ2aWNlKQoKSXNzdWUgaXNzdWUgPSBpc3N1ZQovL1BlciB0ZXN0IGRhIGNvbnNvbGUKLy9pc3N1ZSA9IGlzc3VlTWFuYWdlci5nZXRJc3N1ZUJ5S2V5SWdub3JlQ2FzZSgiT1BVVC0yNzYiKQoKLypERVYqLwpDT05GSVJNX1RPX0NVU1RPTUVSPXByb3BlcnRpZXNbJ3dmLnRyLmNvbmZpcm1Ub0N1c3RvbWVyJ10udG9JbnRlZ2VyKCkKCi8qUFJPRCovCi8vQ09ORklSTV9UT19DVVNUT01FUgoKZGVmIHVzZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRKaXJhQXV0aGVudGljYXRpb25Db250ZXh0KCkuZ2V0TG9nZ2VkSW5Vc2VyKCkKZGVmIGlzc3VlU2VydmljZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlU2VydmljZSgpCgovKlNlIGVzZWd1byBsYSBjb25maXJtIHRvIGN1c3RvbWVyIHN1IHVuIHRpY2tldCBjb24gMSBvICsgdGlja2V0IGNvbGxlZ2F0aSwgdmVyaWZpY28gZSBzcG9zdG8gaW4gYXV0b21hdGljbyBnbGkgZXZlbnR1YWxpIHRpY2tldCBjb2xsZWdhdGkqLwpsb2cud2FybiAidmVyaWZpY28gZSBzcG9zdG8gaW4gYXV0b21hdGljbyBnbGkgZXZlbnR1YWxpIHRpY2tldCBjb2xsZWdhdGkiCgppZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGF1dG9tYXRpY2FsbHlDb25maXJtZWQpPT1udWxsIHx8IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoYXV0b21hdGljYWxseUNvbmZpcm1lZCkudG9TdHJpbmcoKS5lcXVhbHMoIk5vIikpewogICAgTGlzdDxJc3N1ZUxpbms+IGFsbEluSXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldElud2FyZExpbmtzKGlzc3VlLmdldElkKCkpCiAgICBmb3IgKEl0ZXJhdG9yPElzc3VlTGluaz4gb3V0SXRlcmF0b3IgPSBhbGxJbklzc3VlTGluay5pdGVyYXRvcigpOyBvdXRJdGVyYXRvci5oYXNOZXh0KCk7KSB7CiAgICAgICAgSXNzdWVMaW5rIGlzc3VlTGluayA9IChJc3N1ZUxpbmspIG91dEl0ZXJhdG9yLm5leHQoKTsKCiAgICAgICAgaWYoaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNSZWxhdGVzJ10udG9TdHJpbmcoKSkpewogICAgICAgICAgICBsb2cud2FybiAiSXNzdWUgY29uIHJlbGF0ZXNJbklzc3VlTGluayIKICAgICAgICAgICAgLypFc2VndWlyZSB0cmFuc2F6aW9uZSBkaSBzdGF0byBkZWxsYSBzb3VyY2VJc3N1ZSovCiAgICAgICAgICAgIGRlZiBsaW5rZWRJc3N1ZSA9IGlzc3VlTGluay5nZXRTb3VyY2VPYmplY3QoKQogICAgICAgICAgICBkZWYgbGlua2VkSXNzdWVTdGF0dXMgPSBsaW5rZWRJc3N1ZS5nZXRTdGF0dXMoKQogICAgICAgICAgICBkZWYgdHJhbnNpdGlvbklkCiAgICAgICAgICAgIGlmKGxpbmtlZElzc3VlU3RhdHVzLm5hbWUgPT0gcHJvcGVydGllc1snd2YuYWNjZXB0ZWRCeVN1cHBsaWVyJ10udG9TdHJpbmcoKSl7CiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uSWQ9Q09ORklSTV9UT19DVVNUT01FUgogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKHRyYW5zaXRpb25JZD09Q09ORklSTV9UT19DVVNUT01FUil7CiAgICAgICAgICAgICAgICAvLyBQcmVwYXJlIG91ciBpbnB1dCBmb3IgdGhlIHRyYW5zaXRpb24KICAgICAgICAgICAgICAgIGRlZiBpc3N1ZUlucHV0UGFyYW1ldGVycyA9IGlzc3VlU2VydmljZS5uZXdJc3N1ZUlucHV0UGFyYW1ldGVycygpCiAgICAgICAgICAgICAgICBpc3N1ZUlucHV0UGFyYW1ldGVycy53aXRoIHsKICAgICAgICAgICAgICAgICAgICBzZXRTa2lwU2NyZWVuQ2hlY2sodHJ1ZSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vZGVmIGZpZWxkQ29uZmlnID0gYXV0b21hdGljYWxseUNsb3NlZC5nZXRSZWxldmFudENvbmZpZyhpc3N1ZSkKICAgICAgICAgICAgICAgIC8vQ29tcG9uZW50QWNjZXNzb3Iub3B0aW9uc01hbmFnZXIuZ2V0T3B0aW9ucyhmaWVsZENvbmZpZyk/LmZpbmQgeyBpdC50b1N0cmluZygpID09ICJZZXMiIH0KICAgICAgICAgICAgICAgIC8vaXNzdWVJbnB1dFBhcmFtZXRlcnMuYWRkQ3VzdG9tRmllbGRWYWx1ZShmaWVsZENvbmZpZy5nZXRJZCgpLCAiWWVzIikgCiAgICAgICAgICAgICAgICAvL2xvZy53YXJuICJpc3N1ZUlucHV0UGFyYW1ldGVyczogIiArIGlzc3VlSW5wdXRQYXJhbWV0ZXJzCiAgICAgICAgICAgICAgICBkZWYgY3VycmVudFVzZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRKaXJhQXV0aGVudGljYXRpb25Db250ZXh0KCkuZ2V0TG9nZ2VkSW5Vc2VyKCkKICAgICAgICAgICAgICAgIGRlZiBtaSA9IChNdXRhYmxlSXNzdWUpIGxpbmtlZElzc3VlCgogICAgICAgICAgICAgICAgZGVmIGZpZWxkQ29uZmlnID0gYXV0b21hdGljYWxseUNvbmZpcm1lZC5nZXRSZWxldmFudENvbmZpZyhsaW5rZWRJc3N1ZSkKICAgICAgICAgICAgICAgIGxvZy53YXJuICJmaWVsZENvbmZpZzogIiArIGZpZWxkQ29uZmlnCiAgICAgICAgICAgICAgICBkZWYgY2ZOZXdWYWx1ZSA9IENvbXBvbmVudEFjY2Vzc29yLm9wdGlvbnNNYW5hZ2VyLmdldE9wdGlvbnMoZmllbGRDb25maWcpPy5maW5kIHsgaXQudG9TdHJpbmcoKSA9PSAiWWVzIiB9CiAgICAgICAgICAgICAgICBhdXRvbWF0aWNhbGx5Q29uZmlybWVkLnVwZGF0ZVZhbHVlKG51bGwsIGxpbmtlZElzc3VlLCBuZXcgTW9kaWZpZWRWYWx1ZShsaW5rZWRJc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGF1dG9tYXRpY2FsbHlDb25maXJtZWQpLCBjZk5ld1ZhbHVlKSwgbmV3IERlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlcigpKQoKICAgICAgICAgICAgICAgIENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpLnVwZGF0ZUlzc3VlKGN1cnJlbnRVc2VyLCBtaSwgRXZlbnREaXNwYXRjaE9wdGlvbi5ET19OT1RfRElTUEFUQ0gsIGZhbHNlKTsKICAgICAgICAgICAgICAgIGlzc3VlSW5kZXhpbmdTZXJ2aWNlLnJlSW5kZXgobGlua2VkSXNzdWUpCiAgICAgICAgICAgICAgICBsb2cud2FybiAiVXBkYXRlZCBjdXN0b21maWVsZCAtIGlzc3VlIGxpbmthdGEiCgogICAgICAgICAgICAgICAgLy9kZWYgdmFsaWRhdGlvblJlc3VsdCA9IGlzc3VlU2VydmljZS52YWxpZGF0ZVRyYW5zaXRpb24odXNlciwgbGlua2VkSXNzdWUuaWQsIHRyYW5zaXRpb25JZCwgaXNzdWVJbnB1dFBhcmFtZXRlcnMpCiAgICAgICAgICAgICAgICBpZiAoaXNzdWVTZXJ2aWNlLnZhbGlkYXRlVHJhbnNpdGlvbih1c2VyLCBsaW5rZWRJc3N1ZS5pZCwgdHJhbnNpdGlvbklkLCBpc3N1ZUlucHV0UGFyYW1ldGVycykuaXNWYWxpZCgpKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gUGVyZm9ybSB0aGUgdHJhbnNpdGlvbgogICAgICAgICAgICAgICAgICAgIGRlZiBpc3N1ZVJlc3VsdCA9IGlzc3VlU2VydmljZS50cmFuc2l0aW9uKHVzZXIsIGlzc3VlU2VydmljZS52YWxpZGF0ZVRyYW5zaXRpb24odXNlciwgbGlua2VkSXNzdWUuaWQsIHRyYW5zaXRpb25JZCwgaXNzdWVJbnB1dFBhcmFtZXRlcnMpKQogICAgICAgICAgICAgICAgICAgIGlmICghIGlzc3VlUmVzdWx0LmlzVmFsaWQoKSkgewogICAgICAgICAgICAgICAgICAgICAgICBsb2cud2FybigiRmFpbGVkIHRvIHRyYW5zaXRpb24gdGFzayAke2xpbmtlZElzc3VlLmtleX0sIGVycm9yczogJHtpc3N1ZVJlc3VsdC5lcnJvckNvbGxlY3Rpb259IikKICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgbG9nLndhcm4oIlRyYW5zYXppb25lIGZhdHRhIDc5ICR7bGlua2VkSXNzdWUua2V5fSwgZXJyb3JzOiAke2lzc3VlUmVzdWx0LmVycm9yQ29sbGVjdGlvbn0sICR7bGlua2VkSXNzdWUuc3RhdHVzfSIpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBsb2cud2FybigiQ291bGQgbm90IHRyYW5zaXRpb24gdGFzayAke2xpbmtlZElzc3VlLmtleX0sIGVycm9yczogJHtpc3N1ZVNlcnZpY2UudmFsaWRhdGVUcmFuc2l0aW9uKHVzZXIsIGxpbmtlZElzc3VlLmlkLCB0cmFuc2l0aW9uSWQsIGlzc3VlSW5wdXRQYXJhbWV0ZXJzKS5lcnJvckNvbGxlY3Rpb259IikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBMaXN0PElzc3VlTGluaz4gYWxsT3V0SXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldE91dHdhcmRMaW5rcyhpc3N1ZS5nZXRJZCgpKQogICAgZm9yIChJdGVyYXRvcjxJc3N1ZUxpbms+IG91dEl0ZXJhdG9yID0gYWxsT3V0SXNzdWVMaW5rLml0ZXJhdG9yKCk7IG91dEl0ZXJhdG9yLmhhc05leHQoKTspIHsKICAgICAgICBJc3N1ZUxpbmsgaXNzdWVMaW5rID0gKElzc3VlTGluaykgb3V0SXRlcmF0b3IubmV4dCgpOwoKICAgICAgICBpZihpc3N1ZUxpbmsuaXNzdWVMaW5rVHlwZS5nZXROYW1lKCkudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snaWwubGlua2VkVGt0c1JlbGF0ZXMnXS50b1N0cmluZygpKSl7CiAgICAgICAgICAgIGxvZy53YXJuICJJc3N1ZSBjb24gcmVsYXRlc091dElzc3VlTGluayIKICAgICAgICAgICAgLypFc2VndWlyZSB0cmFuc2F6aW9uZSBkaSBzdGF0byBkZWxsYSBkZXN0aW5hdGlvbklzc3VlKi8KICAgICAgICAgICAgZGVmIGxpbmtlZElzc3VlID0gaXNzdWVMaW5rLmdldERlc3RpbmF0aW9uT2JqZWN0KCkKICAgICAgICAgICAgZGVmIGxpbmtlZElzc3VlU3RhdHVzID0gbGlua2VkSXNzdWUuZ2V0U3RhdHVzKCkKICAgICAgICAgICAgZGVmIHRyYW5zaXRpb25JZAogICAgICAgICAgICBsb2cud2FybiAibGlua2VkSXNzdWU6ICIgKyBsaW5rZWRJc3N1ZQogICAgICAgICAgICBsb2cud2FybiAibGlua2VkSXNzdWVTdGF0dXMubmFtZTogIiArIGxpbmtlZElzc3VlU3RhdHVzLm5hbWUKICAgICAgICAgICAgaWYobGlua2VkSXNzdWVTdGF0dXMubmFtZSA9PSBwcm9wZXJ0aWVzWyd3Zi5hY2NlcHRlZEJ5U3VwcGxpZXInXS50b1N0cmluZygpKXsKICAgICAgICAgICAgICAgIHRyYW5zaXRpb25JZD1DT05GSVJNX1RPX0NVU1RPTUVSCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKHRyYW5zaXRpb25JZD09Q09ORklSTV9UT19DVVNUT01FUil7CiAgICAgICAgICAgICAgICAvLyBQcmVwYXJlIG91ciBpbnB1dCBmb3IgdGhlIHRyYW5zaXRpb24KICAgICAgICAgICAgICAgIGRlZiBpc3N1ZUlucHV0UGFyYW1ldGVycyA9IGlzc3VlU2VydmljZS5uZXdJc3N1ZUlucHV0UGFyYW1ldGVycygpCiAgICAgICAgICAgICAgICBpc3N1ZUlucHV0UGFyYW1ldGVycy53aXRoIHsKICAgICAgICAgICAgICAgICAgICBzZXRTa2lwU2NyZWVuQ2hlY2sodHJ1ZSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vZGVmIGZpZWxkQ29uZmlnID0gYXV0b21hdGljYWxseUNsb3NlZC5nZXRSZWxldmFudENvbmZpZyhpc3N1ZSkKICAgICAgICAgICAgICAgIC8vQ29tcG9uZW50QWNjZXNzb3Iub3B0aW9uc01hbmFnZXIuZ2V0T3B0aW9ucyhmaWVsZENvbmZpZyk/LmZpbmQgeyBpdC50b1N0cmluZygpID09ICJZZXMiIH0KICAgICAgICAgICAgICAgIC8vaXNzdWVJbnB1dFBhcmFtZXRlcnMuYWRkQ3VzdG9tRmllbGRWYWx1ZShmaWVsZENvbmZpZy5nZXRJZCgpLCAiWWVzIikgCgogICAgICAgICAgICAgICAgZGVmIGN1cnJlbnRVc2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SmlyYUF1dGhlbnRpY2F0aW9uQ29udGV4dCgpLmdldExvZ2dlZEluVXNlcigpCiAgICAgICAgICAgICAgICBkZWYgbWkgPSAoTXV0YWJsZUlzc3VlKSBsaW5rZWRJc3N1ZQoKICAgICAgICAgICAgICAgIGRlZiBmaWVsZENvbmZpZyA9IGF1dG9tYXRpY2FsbHlDb25maXJtZWQuZ2V0UmVsZXZhbnRDb25maWcobGlua2VkSXNzdWUpCiAgICAgICAgICAgICAgICBsb2cud2FybiAiZmllbGRDb25maWc6ICIgKyBmaWVsZENvbmZpZwogICAgICAgICAgICAgICAgZGVmIGNmTmV3VmFsdWUgPSBDb21wb25lbnRBY2Nlc3Nvci5vcHRpb25zTWFuYWdlci5nZXRPcHRpb25zKGZpZWxkQ29uZmlnKT8uZmluZCB7IGl0LnRvU3RyaW5nKCkgPT0gIlllcyIgfQogICAgICAgICAgICAgICAgYXV0b21hdGljYWxseUNvbmZpcm1lZC51cGRhdGVWYWx1ZShudWxsLCBsaW5rZWRJc3N1ZSwgbmV3IE1vZGlmaWVkVmFsdWUobGlua2VkSXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q29uZmlybWVkKSwgY2ZOZXdWYWx1ZSksIG5ldyBEZWZhdWx0SXNzdWVDaGFuZ2VIb2xkZXIoKSkKCiAgICAgICAgICAgICAgICBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKS51cGRhdGVJc3N1ZShjdXJyZW50VXNlciwgbWksIEV2ZW50RGlzcGF0Y2hPcHRpb24uRE9fTk9UX0RJU1BBVENILCBmYWxzZSk7CiAgICAgICAgICAgICAgICBpc3N1ZUluZGV4aW5nU2VydmljZS5yZUluZGV4KGxpbmtlZElzc3VlKQogICAgICAgICAgICAgICAgbG9nLndhcm4gIlVwZGF0ZWQgY3VzdG9tZmllbGQgLSBpc3N1ZSBsaW5rYXRhIgoKICAgICAgICAgICAgICAgIGlmIChpc3N1ZVNlcnZpY2UudmFsaWRhdGVUcmFuc2l0aW9uKHVzZXIsIGxpbmtlZElzc3VlLmlkLCB0cmFuc2l0aW9uSWQsIGlzc3VlSW5wdXRQYXJhbWV0ZXJzKS5pc1ZhbGlkKCkpIHsKICAgICAgICAgICAgICAgICAgICAvLyBQZXJmb3JtIHRoZSB0cmFuc2l0aW9uCiAgICAgICAgICAgICAgICAgICAgZGVmIGlzc3VlUmVzdWx0ID0gaXNzdWVTZXJ2aWNlLnRyYW5zaXRpb24odXNlciwgaXNzdWVTZXJ2aWNlLnZhbGlkYXRlVHJhbnNpdGlvbih1c2VyLCBsaW5rZWRJc3N1ZS5pZCwgdHJhbnNpdGlvbklkLCBpc3N1ZUlucHV0UGFyYW1ldGVycykpCiAgICAgICAgICAgICAgICAgICAgaWYgKCEgaXNzdWVSZXN1bHQuaXNWYWxpZCgpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGxvZy53YXJuKCJGYWlsZWQgdG8gdHJhbnNpdGlvbiB0YXNrICR7bGlua2VkSXNzdWUua2V5fSwgZXJyb3JzOiAke2lzc3VlUmVzdWx0LmVycm9yQ29sbGVjdGlvbn0iKQogICAgICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgICAgICBsb2cud2FybigiVHJhbnNhemlvbmUgZmF0dGEgMTIyICR7bGlua2VkSXNzdWUua2V5fSwgZXJyb3JzOiAke2lzc3VlUmVzdWx0LmVycm9yQ29sbGVjdGlvbn0sICR7bGlua2VkSXNzdWUuc3RhdHVzfSIpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBsb2cud2FybigiQ291bGQgbm90IHRyYW5zaXRpb24gdGFzayAke2xpbmtlZElzc3VlLmtleX0sIGVycm9yczogJHtpc3N1ZVNlcnZpY2UudmFsaWRhdGVUcmFuc2l0aW9uKHVzZXIsIGxpbmtlZElzc3VlLmlkLCB0cmFuc2l0aW9uSWQsIGlzc3VlSW5wdXRQYXJhbWV0ZXJzKS5lcnJvckNvbGxlY3Rpb259IikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICB9CiAgICB9Cn0=</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22693</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="101" name="Conferma senza Notifica al Cliente" view="fieldscreen">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19923</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">3f2fe9ea0b98294db32d475986c17366260064ed</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="disabled">true</arg>
                <arg name="FIELD_CONDITION">YCFgaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ05ldyBJbnN0YWxsYXRpb24nfHx8</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="4">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIGxpbmtlZFRpY2tldHMgJiBGYXN0LVRyYW5zYWN0IHRoZW0=</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT"></arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="4" name="Confirmed and Planned">
      <meta name="jira.status.id">14329</meta>
      <actions>
        <action id="111" name="Compila Rapporto di Intervento" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19908</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ01haW50ZW5hbmNlIFRpY2tldCd8fHw=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">fdff8da8847f0cecf612f8079bbc8937a21ddfe5</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlcXVpcmVkIEZpZWxkcyAtIHNvbG8gZXJyb3JzLCBubyB3YXJuaW5ncw==</arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZQppbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb24KaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3IKaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGdyb292eS5qc29uLkpzb25CdWlsZGVyCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbAoKUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKQpGaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKQpwcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0gewoJcHJvcGVydGllcy5sb2FkKGl0KQp9CmRlZiBDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQogCklzc3VlIGlzc3VlID0gaXNzdWUKCmRlZiBlcnJvcnMgPSBmYWxzZQpkZWYgd2FybmluZ3MgPSBmYWxzZQoKZGVmIHBsYW5uZWRUZWNocyA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YudGVjaG5pY2lhbnMnXS50b1N0cmluZygpKVswXQpkZWYgYXV0b21hdGljYWxseUNsb3NlZCA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YuYXV0b21hdGljYWxseUNsb3NlZCddLnRvU3RyaW5nKCkpWzBdCmRlZiB0cmFuc2l0aW9uQ2hlY2sgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLmNoZWNrQW5kQ29uZmlybSddLnRvU3RyaW5nKCkpWzBdCgpkZWYgZXJyb3JNYW5kYXRvcnlGaWVsZHMgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIHdhcm5pbmdFbXB0eUZpZWxkcyA9IG5ldyBBcnJheUxpc3QoKQogCi8vT1BBQV9URUNITklDSUFOUwppZigoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q2xvc2VkKT09bnVsbCB8fCBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGF1dG9tYXRpY2FsbHlDbG9zZWQpLnRvU3RyaW5nKCkuZXF1YWxzKCJObyIpKSAmJiAoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShwbGFubmVkVGVjaHMpPT1udWxsIHx8IChTdHJpbmcpaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShwbGFubmVkVGVjaHMpID09ICIiIHx8IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUocGxhbm5lZFRlY2hzKS50b1N0cmluZygpLmVxdWFscygiIikpKXsKICAgIHdhcm5pbmdzID0gdHJ1ZQogICAgd2FybmluZ0VtcHR5RmllbGRzLmFkZChwcm9wZXJ0aWVzWydjZi50ZWNobmljaWFucyddLnRvU3RyaW5nKCkpCn0KCmRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KCkKCmlmICghZXJyb3JzICYmICF3YXJuaW5ncyl7CiAgICByZXR1cm4gdHJ1ZQp9ZWxzZXsKICAgIGlmKCFlcnJvcnMgJiYgd2FybmluZ3MpewogICAgICAgIGlmKGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUodHJhbnNpdGlvbkNoZWNrKS50b1N0cmluZygpLmVxdWFscygiWWVzIikpewogICAgICAgICAgICAvL2xvZy5kZWJ1ZyAicmV0dXJuIHRydWUiCiAgICAgICAgICAgIHJldHVybiB0cnVlCiAgICAgICAgfWVsc2V7CiAgICAgICAgICAgIGRlZiB3TGlzdCA9IG5ldyBBcnJheUxpc3QoKQoKICAgICAgICAgICAgaWYod2FybmluZ0VtcHR5RmllbGRzLnNpemUoKSA+IDApewogICAgICAgICAgICAgICAgZGVmIHdMaXN0Q29uZmlybUVtcHR5ID0gbmV3IEFycmF5TGlzdCgpCiAgICAgICAgICAgICAgICB3TGlzdENvbmZpcm1FbXB0eS5hZGQoIlciKQogICAgICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHkuYWRkKCJDT05GSVJNX0VNUFRZX0ZJRUxEUyIpCiAgICAgICAgICAgICAgICB3TGlzdENvbmZpcm1FbXB0eS5hZGQobnVsbCkKICAgICAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5LmFkZCh3YXJuaW5nRW1wdHlGaWVsZHMpCgogICAgICAgICAgICAgICAgd0xpc3QuYWRkKHdMaXN0Q29uZmlybUVtcHR5KQogICAgICAgICAgICB9CgogICAgICAgICAgICBvdXRwdXQuYWRkKHdMaXN0KQogICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7IlciOiInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnIn0nKQogICAgICAgICAgICAvL3Rocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oIlciLCBvdXRwdXQudG9TdHJpbmcoKSkgICAKICAgICAgICB9CiAgICB9CiAgICBpZihlcnJvcnMgJiYgIXdhcm5pbmdzKXsKICAgICAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KCkKICAgICAgICAKICAgICAgICBpZihlcnJvck1hbmRhdG9yeUZpZWxkcy5zaXplKCkgPiAwKXsKICAgICAgICAgICAgZGVmIGVMaXN0TWFuZGF0b3J5ID0gbmV3IEFycmF5TGlzdCgpCiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZCgiRSIpCiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZCgiTUFOREFUT1JZX0ZJRUxEUyIpCiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZChudWxsKQogICAgICAgICAgICBlTGlzdE1hbmRhdG9yeS5hZGQoZXJyb3JNYW5kYXRvcnlGaWVsZHMpCiAgICAgICAgICAgIGVMaXN0LmFkZChlTGlzdE1hbmRhdG9yeSkKICAgICAgICB9CiAgICAgICAgCgkJb3V0cHV0LmFkZChlTGlzdCkKICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7IkUiOiInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnIn0nKQogICAgICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigiRSIsIG91dHB1dC50b1N0cmluZygpKSAgIAogICAgfQogICAgaWYoZXJyb3JzICYmIHdhcm5pbmdzKXsKICAgICAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KCkKICAgICAgICBkZWYgd0xpc3QgPSBuZXcgQXJyYXlMaXN0KCkKICAgICAgICAKICAgICAgICBpZihlcnJvck1hbmRhdG9yeUZpZWxkcy5zaXplKCkgPiAwKXsKICAgICAgICAgICAgZGVmIGVMaXN0TWFuZGF0b3J5ID0gbmV3IEFycmF5TGlzdCgpCiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZCgiRSIpCiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZCgiTUFOREFUT1JZX0ZJRUxEUyIpCiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZChudWxsKQogICAgICAgICAgICBlTGlzdE1hbmRhdG9yeS5hZGQoZXJyb3JNYW5kYXRvcnlGaWVsZHMpCiAgICAgICAgICAgIGVMaXN0LmFkZChlTGlzdE1hbmRhdG9yeSkKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgaWYod2FybmluZ0VtcHR5RmllbGRzLnNpemUoKSA+IDApewogICAgICAgICAgICBkZWYgd0xpc3RDb25maXJtRW1wdHkgPSBuZXcgQXJyYXlMaXN0KCkKICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHkuYWRkKCJXIikKICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHkuYWRkKCJDT05GSVJNX0VNUFRZX0ZJRUxEUyIpCiAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5LmFkZChudWxsKQogICAgICAgICAgICB3TGlzdENvbmZpcm1FbXB0eS5hZGQod2FybmluZ0VtcHR5RmllbGRzKQoKICAgICAgICAgICAgd0xpc3QuYWRkKHdMaXN0Q29uZmlybUVtcHR5KQogICAgICAgIH0KICAgICAgICAKICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KQogICAgICAgIG91dHB1dC5hZGQod0xpc3QpCiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigneyJXRSI6IicgKyBvdXRwdXQudG9TdHJpbmcoKSArICcifScpCiAgICAgICAgLy90aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCJXRSIsIG91dHB1dC50b1N0cmluZygpKSAgCiAgICB9Cn0=</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="5">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="append.value"></arg>
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="field.name">customfield_22628</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="field.type">8</arg>
                  <arg name="full.module.key">com.riadalabs.jira.plugins.insightinsight-post-function</arg>
                  <arg name="field.groovyScript"> import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.MutableIssue;
import com.atlassian.jira.event.type.EventDispatchOption;
import org.apache.log4j.Level

Properties relativePath = new Properties()
File relativePathFile = new File('/var/atlassian/application-data/jira/insightPathToScript.properties')
relativePathFile.withInputStream {
	relativePath.load(it)
}

Properties properties = new Properties()
File propertiesFile = new File('/var/atlassian/application-data/jira' + relativePath['pathToScripts'] + 'opproject.properties')
propertiesFile.withInputStream {
	properties.load(it)
}
/* Get Insight Object Facade from plugin accessor */
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(&quot;com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade&quot;); 
def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);
  
/* Get Insight Object Type Facade from plugin accessor */
Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(&quot;com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade&quot;); 
def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);
  
/* Get Insight Object Attribute Facade from plugin accessor */
Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(&quot;com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade&quot;); 
def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
  
Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(&quot;com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory&quot;); 
def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);

Issue issue = issue

def plannedTechsField = issue.getCustomFieldValue(ComponentAccessor.getCustomFieldManager().getCustomFieldObjectByName(properties['cf.technicians'].toString()))
def onSiteTechsField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.techniciansOnsite'].toString())[0];
def OnSiteTechObjects = new ArrayList();

def automaticallyClosedField = issue.getCustomFieldValue(ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString()))

def ONSITE_TECH_REPORT_OBJ_TYPE=properties['iobj.onSiteTechReport'].toString().toInteger()
def ONSITE_TECH_REPORT_ATTR_NAME=properties['iobj.onSiteTechReport.name.id'].toString().toInteger()
def ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF=properties['iobj.onSiteTechReport.technicianRef.id'].toString().toInteger()

if(automaticallyClosedField==null || automaticallyClosedField.toString().equals(&quot;No&quot;)){
    if(plannedTechsField){
        
        for(technician in plannedTechsField){
            
            //extract insight key ang get object
            def tech=technician.toString()
            def techKey = tech.substring(tech.indexOf('(')+1,tech.indexOf(')'))
            def techName = tech.substring(0,tech.indexOf('(')-1)
            def techObject = objectFacade.loadObjectBean(techKey)
            log.info (&quot;techName: &quot; + techName)
            log.info (&quot;techObject: &quot; + techObject)
            
            def objectTypeOnSiteTechReport = objectTypeFacade.loadObjectTypeBean(ONSITE_TECH_REPORT_OBJ_TYPE);
            def newObjectBean = objectTypeOnSiteTechReport.createMutableObjectBean();
            
            def objectAttributeBeans = new ArrayList();
            def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_NAME); 
            
            objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, nameObjectTypeAttributeBean, techName));
                    
            newObjectBean.setObjectAttributeBeans(objectAttributeBeans);
            /* Store the object into Insight. The new ObjectBean will be updated with an unique ID */
            try {
                newObjectBean = objectFacade.storeObjectBean(newObjectBean);
                log.warn(&quot;newObjectBean: &quot; + newObjectBean);
            } catch (Exception vie) {
                log.warn(&quot;Could not create issue due to validation exception:&quot; + vie.getMessage());
            }
    
            /* Update TECHNICIAN_REF on the newObject */		        
            def objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF).createMutable() //The id of the attribute
            
            /* Create the new attribute bean based on the value */
            def newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, techKey);
            /* Load the attribute bean */
            def objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), techKey);
            if (objectAttributeBean != null) {
               /* If attribute exist reuse the old id for the new attribute */
               newObjectAttributeBean.setId(objectAttributeBean.getId());
            }
            /* Store the object attribute into Insight. */
            try {
                objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);
            } catch (Exception vie) {
                log.warn(&quot;Could not update object attribute due to validation exception:&quot; + vie.getMessage());
            }  
            
            OnSiteTechObjects.add(newObjectBean)
         }
    }
    log.info (&quot;OnSiteTechObjects: &quot; + OnSiteTechObjects)
    def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
    
    if (!OnSiteTechObjects.isEmpty()) {
        MutableIssue mi = (MutableIssue) issue;
        mi.setCustomFieldValue(onSiteTechsField, OnSiteTechObjects);
        ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
    }   
}       </arg>
                  <arg name="field.filepath"></arg>
                  <arg name="class.name">com.riadalabs.jira.plugins.insight.services.jira.postfunction.InsightPostFunction</arg>
                  <arg name="field.description">OP: Create OnSite_Tech_Report objects to be associated to the issue's customfield OP_TECHNICIANS_ONSITE</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22693</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="121" name="Ripianifica Tkt">
          <meta name="opsbar-sequence">30</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <results>
            <unconditional-result old-status="null" status="null" step="1">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="131" name="Intervento Eseguito" view="fieldscreen">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19909</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ05ldyBJbnN0YWxsYXRpb24nfHx8</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="5" name="In Progress">
      <meta name="jira.status.id">3</meta>
      <actions>
        <action id="141" name="Chiudi Rapporto di Intervento" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19910</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">fa37467a9382f8924cd169d5ba599dcb71925405</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlcXVpcmVkIEZpZWxkcyAtIHNvbG8gZXJyb3JzLCBubyB3YXJuaW5ncw==</arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">9fe0fa5191d4b6a91ba7485380ff8d0a9fda8fe7</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBPUCBnZW5lcmF6aW9uZSBSYXBwb3J0byBkaSBpbnRlcnZlbnRv</arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeQppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lcgppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGwKClByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKCkKRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJykKcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHsKCXByb3BlcnRpZXMubG9hZChpdCkKfQpDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQpsb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRykKCklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTsKQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpOwpkZWYgcmVxdWVzdE1ldGhvZApkZWYgYmFzZVVSTApsb2cuZGVidWcgIk9uU2l0ZSBSZXBvcnQgcGVyIGlzc3VlOiAiICsgaXNzdWUua2V5Ci8qIFJFU1QgQVBJIHBlciBHZW5lcmF6aW9uZSBBbGxlZ2F0byBSYXBwb3J0byBkaSBJbnRlcnZlbnRvICovCnJlcXVlc3RNZXRob2QgPSAiUFVUIjsKCmJhc2VVUkwgPSAiaHR0cDovLyIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArICIvb3AvcmVzdC9hdXRvbWF0aW9uL0FBL3RpY2tldC8iICsgaXNzdWUua2V5LnRvU3RyaW5nKCkgKyAiL2F0dGFjaG1lbnQvb25zaXRlIgpsb2cuZGVidWcgImJhc2VVcmw6ICIgKyBiYXNlVVJMCgpVUkwgdXJsCnVybCA9IG5ldyBVUkwoYmFzZVVSTCkKSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eSgiQ29udGVudC1UeXBlIiwgImFwcGxpY2F0aW9uL2pzb24iKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoIkFjY2VwdCIsICIqLyoiKTsKY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTsKY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpOwpjb25uZWN0aW9uLmNvbm5lY3QoKTsKbG9nLmRlYnVnICJSZXNwb25zZUNvZGU6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkKbG9nLmRlYnVnICJSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKCmRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpCmRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKQpkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpCgppZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoIjIwMCIpKXsKICAgIGxvZy5kZWJ1ZyAidXJsOiAiICsgdXJsCiAgICBsb2cuZGVidWcgIlJlc3BvbnNlQ29kZToiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKQogICAgbG9nLmRlYnVnICJSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKICAgIGVMaXN0RXJyb3JzLmFkZCgiRSIpCiAgICBlTGlzdEVycm9ycy5hZGQoIkdFTkVSQVRFLU9OU0lURVJFUE9SVCIpCiAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyAiICIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpKQogICAgZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncykKICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycykKCiAgICBvdXRwdXQuYWRkKGVMaXN0KQogICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigneyJFIjoiJyArIG91dHB1dC50b1N0cmluZygpICsgJyJ9JykKICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigiRSIsIG91dHB1dC50b1N0cmluZygpKQp9Cg==</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">df15a75e93b4c124a70f49e69dbcae9d48e2e8e4</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBPUCBwZXIgY29uc3VudGl2YXppb25lIHRpY2tldA==</arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">37c2d78492ac54794b8917d58342d465c219be98</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBPUCBFbWFpbCBOb3RpZmljYXRpb246IE9OU0lURV9SRVBPUlQgLSBvbmx5IElGIE9QQUFfQVVUT01BVElDQUxMWV9DTE9TRUQhPVllcyBBTkQgc2VuZE1haWwhPU5PIE1BSUwgQU5EIGNpIHNvbm8gdGlja2V0IGNvbGxlZ2F0aS4gLS0tLT4gRElTQUJMRUQgc3UgdHJhbnNhemlvbmUgY29tcGxldGUgLSB2aWVuZSBmYXR0byBtYW51YWxtZW50ZSBkYSBTRU5EIE9OU0lURSBSRVBPUlQ=</arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIGxpbmtlZFRpY2tldHMgJiBGYXN0LVRyYW5zYWN0IHRoZW0=</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT"></arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22693</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="151" name="Annulla Rapporto di Intervento">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <results>
            <unconditional-result old-status="null" status="null" step="4">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="6" name="Completed to be Closed">
      <meta name="jira.status.id">14330</meta>
      <actions>
        <action id="161" name="ODV" view="fieldscreen">
          <meta name="opsbar-sequence">40</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19908</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_NOTES">YCFg</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ01haW50ZW5hbmNlIFRpY2tldCd8fHw=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIE9QX1NBTEVTX09SREVSX0RBVEUgLSBJZiBub3QgbnVsbCAtIHRyYW5zaXRpb24gaGFzIGFscmVhZHkgYmVlbiBleGVjdXRlZA==</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KY2ZWYWx1ZXNbcHJvcGVydGllc1snY2Yuc2FsZXNPcmRlckRhdGUnXV0gPT0gbnVsbHx8fA==</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIE9QX0FVVE9NQVRJQ0FMTFlfQ0xPU0VEIC0gaWYgWWVzIGRvbid0IGFsbG93IHRyYW5zaXRpb24=</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KY2ZWYWx1ZXNbcHJvcGVydGllc1snY2YuYXV0b21hdGljYWxseUNsb3NlZCddXSA9PSBudWxsIHx8IGNmVmFsdWVzW3Byb3BlcnRpZXNbJ2NmLmF1dG9tYXRpY2FsbHlDbG9zZWQnXV0/LnZhbHVlID09ICdObyd8fHw=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">3d74ebaab228199aff706fc0e35573a6d6df31fb</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlcXVpcmVkIEZpZWxkcyAtIHNvbG8gZXJyb3JzLCBubyB3YXJuaW5ncw==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">f794e26f6a504d3cc776bd5c16d3ff518ff13b6f</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBPUCBnZW5lcmF6aW9uZSBPRFYgc3UgU0FQ</arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuV29ya2Zsb3dFeGNlcHRpb247CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7CmltcG9ydCBncm9vdnkuanNvbi5TdHJlYW1pbmdKc29uQnVpbGRlcjsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5DdXN0b21GaWVsZE1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3I7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlCmltcG9ydCBvcmcuYXBhY2hlLmNvbW1vbnMuY29kZWMuYmluYXJ5LkJhc2U2NDsKaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGdyb292eXgubmV0Lmh0dHAuSFRUUEJ1aWxkZXIKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5saW5rLklzc3VlTGluawppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lcgppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGwKClByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKCkKRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJykKcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHsKCXByb3BlcnRpZXMubG9hZChpdCkKfQpDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQpsb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRykKCklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTsKQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpOwoKCmRlZiByZXF1ZXN0TWV0aG9kID0gIlBPU1QiCgpkZWYgcmVsYXRlc0luSXNzdWVMaW5rPWZhbHNlCmRlZiByZWxhdGVzT3V0SXNzdWVMaW5rPWZhbHNlCmRlZiBsaW5rZWRUaWNrZXRzPW5ldyBBcnJheUxpc3QoKQoKTGlzdDxJc3N1ZUxpbms+IGFsbEluSXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldElud2FyZExpbmtzKGlzc3VlLmdldElkKCkpCiAgICBmb3IgKEl0ZXJhdG9yPElzc3VlTGluaz4gb3V0SXRlcmF0b3IgPSBhbGxJbklzc3VlTGluay5pdGVyYXRvcigpOyBvdXRJdGVyYXRvci5oYXNOZXh0KCk7KSB7CiAgICAgICAgSXNzdWVMaW5rIGlzc3VlTGluayA9IChJc3N1ZUxpbmspIG91dEl0ZXJhdG9yLm5leHQoKTsKCiAgICAgICAgaWYoaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNSZWxhdGVzJ10udG9TdHJpbmcoKSkpewogICAgICAgICAgICByZWxhdGVzSW5Jc3N1ZUxpbms9dHJ1ZQogICAgICAgICAgICBsaW5rZWRUaWNrZXRzLmFkZChpc3N1ZUxpbmsuZ2V0U291cmNlT2JqZWN0KCkudG9TdHJpbmcoKSkKICAgICAgICAgICAgbG9nLmRlYnVnICJJc3N1ZSBjb24gcmVsYXRlc0luSXNzdWVMaW5rIgogICAgICAgIH0KICAgIH0KICAgIExpc3Q8SXNzdWVMaW5rPiBhbGxPdXRJc3N1ZUxpbmsgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZUxpbmtNYW5hZ2VyKCkuZ2V0T3V0d2FyZExpbmtzKGlzc3VlLmdldElkKCkpCiAgICBmb3IgKEl0ZXJhdG9yPElzc3VlTGluaz4gb3V0SXRlcmF0b3IgPSBhbGxPdXRJc3N1ZUxpbmsuaXRlcmF0b3IoKTsgb3V0SXRlcmF0b3IuaGFzTmV4dCgpOykgewogICAgICAgIElzc3VlTGluayBpc3N1ZUxpbmsgPSAoSXNzdWVMaW5rKSBvdXRJdGVyYXRvci5uZXh0KCk7CgogICAgICAgIGlmKGlzc3VlTGluay5pc3N1ZUxpbmtUeXBlLmdldE5hbWUoKS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpbC5saW5rZWRUa3RzUmVsYXRlcyddLnRvU3RyaW5nKCkpKXsKICAgICAgICAgICAgcmVsYXRlc091dElzc3VlTGluaz10cnVlCiAgICAgICAgICAgIGxpbmtlZFRpY2tldHMuYWRkKGlzc3VlTGluay5nZXREZXN0aW5hdGlvbk9iamVjdCgpLnRvU3RyaW5nKCkpCiAgICAgICAgICAgIGxvZy5kZWJ1ZyAiSXNzdWUgY29uIHJlbGF0ZXNPdXRJc3N1ZUxpbmsiCiAgICAgICAgfQogICAgfQoKLyogUkVTVCBBUEkgcGVyIEludmlvIE5vdGlmaWNhIEVtYWlsIE9OU0lURV9SRVBPUlQgKi8KZGVmIGJvZHlfcmVxCgppZihyZWxhdGVzSW5Jc3N1ZUxpbmsgfHwgcmVsYXRlc091dElzc3VlTGluayl7CiAgICBib2R5X3JlcSA9IFsKICAgICAgICAiaXNzdWVLZXkiOiBpc3N1ZS5rZXksCiAgICAgICAgImxpbmtlZFRpY2tldHMiOiBsaW5rZWRUaWNrZXRzCiAgICBdCn1lbHNlewogICAgYm9keV9yZXEgPSBbCiAgICAgICAgImlzc3VlS2V5IjogaXNzdWUua2V5CiAgICBdCn0KCmRlZiBiYXNlVVJMID0gImh0dHA6Ly8iICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyAiL29wL3Jlc3QvamlyYS9BQS9zYWxlcy9vcmRlci9jcmVhdGUiCmxvZy5kZWJ1ZyBiYXNlVVJMClVSTCB1cmwgPSBuZXcgVVJMKGJhc2VVUkwpCkh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7CmNvbm5lY3Rpb24uc2V0UmVxdWVzdE1ldGhvZChyZXF1ZXN0TWV0aG9kKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoIkNvbnRlbnQtVHlwZSIsICJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLTgiKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoIkFjY2VwdCIsICIqLyoiKTsKY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTsKY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpOwpjb25uZWN0aW9uLm91dHB1dFN0cmVhbQpjb25uZWN0aW9uLm91dHB1dFN0cmVhbS53aXRoV3JpdGVyKCJVVEYtOCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfQpsb2cuZGVidWcgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0KY29ubmVjdGlvbi5jb25uZWN0KCk7CgpkZWYgb3V0cHV0ID0gbmV3IEFycmF5TGlzdCgpCmRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKQpkZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIGVycm9yTXNncyA9IG5ldyBBcnJheUxpc3QoKQoKaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKCIyMDAiKSl7CiAgICBsb2cuZGVidWcgInVybDogIiArIHVybAogICAgbG9nLmRlYnVnICJSZXNwb25zZUNvZGU6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkKICAgIGxvZy5kZWJ1ZyAiUmVzcG9uc2VNZXNzYWdlOiIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpCiAgICBsb2cuZGVidWcgIkVycm9yU3RyZWFtOiAiICsgY29ubmVjdGlvbi5nZXRFcnJvclN0cmVhbSgpLnRvU3RyaW5nKCkKICAgIGxvZy5kZWJ1ZyAiZ2V0SGVhZGVyRmllbGRzKCk6ICIgKyBjb25uZWN0aW9uLmdldEhlYWRlckZpZWxkcygpCiAgICBkZWYgb3V0cHV0TXNnID0gKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0CiAgICBsb2cuZGVidWcgIigoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dDogIiArIG91dHB1dE1zZwogICAgCiAgICBkZWYganNvblNsdXJwZXIgPSBuZXcgSnNvblNsdXJwZXIoKQogICAgZGVmIGpzb25fb2JqZWN0ID0ganNvblNsdXJwZXIucGFyc2VUZXh0KG91dHB1dE1zZykKICAgIGFzc2VydCBqc29uX29iamVjdCBpbnN0YW5jZW9mIE1hcCAgCiAgICBsb2cuZGVidWcgIm1lc3NhZ2U6ICIgKyAganNvbl9vYmplY3QubWVzc2FnZQogICAgCiAgICBlTGlzdEVycm9ycy5hZGQoIkUiKQogICAgZUxpc3RFcnJvcnMuYWRkKCJPUC1TQVAtT0RWIikKICAgIGVycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArICIgIiArIGpzb25fb2JqZWN0Lm1lc3NhZ2UpCiAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKQogICAgZUxpc3QuYWRkKGVMaXN0RXJyb3JzKQoKICAgIG91dHB1dC5hZGQoZUxpc3QpCiAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7IkUiOiInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnIn0nKQogICAgLy90aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCJFIiwgb3V0cHV0LnRvU3RyaW5nKCkpCn0=</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_ACTION">181 Tkt Chiuso</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IENsb3NlIHRrdCBpZiBPRFYgYW5kIE9EQSBoYXZlIGJlZW4gY3JlYXRlZA==</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.FasttrackTransition</arg>
                  <arg name="FIELD_CONDITION">YCFgY2ZWYWx1ZXNbJ09QX1BVUkNIQVNFX09SREVSJ10gIT0gbnVsbCAmJiBjZlZhbHVlc1snT1BfUFVSQ0hBU0VfT1JERVJfREFURSddICE9IG51bGwgJiYgY2ZWYWx1ZXNbJ09QX1BVUkNIQVNFX09SREVSX1RPVEFMJ10gIT0gbnVsbHx8fA==</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_TRANSITION_OPTIONS"></arg>
                  <arg name="FIELD_ADDITIONAL_SCRIPT">YCFg</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="171" name="ODA" view="fieldscreen">
          <meta name="opsbar-sequence">50</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19908</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ01haW50ZW5hbmNlIFRpY2tldCd8fHw=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIE9QX1BVUkNIQVNFX09SREVSX0RBVEUgLSBJZiBub3QgbnVsbCAtIHRyYW5zaXRpb24gaGFzIGFscmVhZHkgYmVlbiBleGVjdXRlZA==</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KY2ZWYWx1ZXNbcHJvcGVydGllc1snY2YucHVyY2hhc2VPcmRlckRhdGUnXV0gPT0gbnVsbCAmJiBjZlZhbHVlc1twcm9wZXJ0aWVzWydjZi53ZlB1cmNoYXNlT3JkZXJUb1MnXV0gPT0gbnVsbHx8fA==</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIE9QQUFfQVVUT01BVElDQUxMWV9DTE9TRUQgLSBpZiBZZXMgZG9uJ3QgYWxsb3cgdHJhbnNpdGlvbg==</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KY2ZWYWx1ZXNbcHJvcGVydGllc1snY2YuYXV0b21hdGljYWxseUNsb3NlZCddXSA9PSBudWxsIHx8IGNmVmFsdWVzW3Byb3BlcnRpZXNbJ2NmLmF1dG9tYXRpY2FsbHlDbG9zZWQnXV0/LnZhbHVlID09ICdObyd8fHw=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">3c57210d24c112bcff020e8630134c0aaf31c353</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlcXVpcmVkIEZpZWxkcyAtIHNvbG8gZXJyb3JzLCBubyB3YXJuaW5ncw==</arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">3657615f14a01fb91bdcb3a532f38f81b3555fa9</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IGdlbmVyYXppb25lIE9EQSBmb3JuaXRvcmU=</arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXIKaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KQ2F0ZWdvcnkgbG9nID0gQ2F0ZWdvcnkuZ2V0SW5zdGFuY2UoImNvbS5vbnJlc29sdmUuamlyYS5ncm9vdnkuUG9zdEZ1bmN0aW9uIikKbG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUubGluay5Jc3N1ZUxpbmsKCklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTsKQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpOwpkZWYgcmVxdWVzdE1ldGhvZApkZWYgYmFzZVVSTAoKVVJMIHVybApIdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uCgovKiBSRVNUIEFQSSBwZXIgR2VuZXJhemlvbmUgT0RBICovCnJlcXVlc3RNZXRob2QgPSAiUE9TVCI7CmRlZiByZWxhdGVzSW5Jc3N1ZUxpbms9ZmFsc2UKZGVmIHJlbGF0ZXNPdXRJc3N1ZUxpbms9ZmFsc2UKZGVmIGxpbmtlZFRpY2tldHM9bmV3IEFycmF5TGlzdCgpCkxpc3Q8SXNzdWVMaW5rPiBhbGxJbklzc3VlTGluayA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTGlua01hbmFnZXIoKS5nZXRJbndhcmRMaW5rcyhpc3N1ZS5nZXRJZCgpKQpmb3IgKEl0ZXJhdG9yPElzc3VlTGluaz4gb3V0SXRlcmF0b3IgPSBhbGxJbklzc3VlTGluay5pdGVyYXRvcigpOyBvdXRJdGVyYXRvci5oYXNOZXh0KCk7KSB7CiAgICBJc3N1ZUxpbmsgaXNzdWVMaW5rID0gKElzc3VlTGluaykgb3V0SXRlcmF0b3IubmV4dCgpOwoKICAgIGlmKGlzc3VlTGluay5pc3N1ZUxpbmtUeXBlLmdldE5hbWUoKS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpbC5saW5rZWRUa3RzUmVsYXRlcyddLnRvU3RyaW5nKCkpKXsKICAgICAgICByZWxhdGVzSW5Jc3N1ZUxpbms9dHJ1ZQogICAgICAgIGxpbmtlZFRpY2tldHMuYWRkKGlzc3VlTGluay5nZXRTb3VyY2VPYmplY3QoKS50b1N0cmluZygpKQogICAgICAgIGxvZy5kZWJ1ZyAiSXNzdWUgY29uIHJlbGF0ZXNJbklzc3VlTGluayIKICAgIH0KfQpMaXN0PElzc3VlTGluaz4gYWxsT3V0SXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldE91dHdhcmRMaW5rcyhpc3N1ZS5nZXRJZCgpKQpmb3IgKEl0ZXJhdG9yPElzc3VlTGluaz4gb3V0SXRlcmF0b3IgPSBhbGxPdXRJc3N1ZUxpbmsuaXRlcmF0b3IoKTsgb3V0SXRlcmF0b3IuaGFzTmV4dCgpOykgewogICAgSXNzdWVMaW5rIGlzc3VlTGluayA9IChJc3N1ZUxpbmspIG91dEl0ZXJhdG9yLm5leHQoKTsKCiAgICBpZihpc3N1ZUxpbmsuaXNzdWVMaW5rVHlwZS5nZXROYW1lKCkudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snaWwubGlua2VkVGt0c1JlbGF0ZXMnXS50b1N0cmluZygpKSl7CiAgICAgICAgcmVsYXRlc091dElzc3VlTGluaz10cnVlCiAgICAgICAgbGlua2VkVGlja2V0cy5hZGQoaXNzdWVMaW5rLmdldERlc3RpbmF0aW9uT2JqZWN0KCkudG9TdHJpbmcoKSkKICAgICAgICBsb2cuZGVidWcgIklzc3VlIGNvbiByZWxhdGVzT3V0SXNzdWVMaW5rIgogICAgfQp9CgpkZWYgYm9keV9yZXEKCmlmKHJlbGF0ZXNJbklzc3VlTGluayB8fCByZWxhdGVzT3V0SXNzdWVMaW5rKXsKICAgIGJvZHlfcmVxID0gWwogICAgICAgICJpc3N1ZUtleSI6IGlzc3VlLmtleSwKICAgICAgICAibGlua2VkVGlja2V0cyI6IGxpbmtlZFRpY2tldHMKICAgIF0KfWVsc2V7CiAgICBib2R5X3JlcSA9IFsKICAgICAgICAiaXNzdWVLZXkiOiBpc3N1ZS5rZXkKICAgIF0KfQoKCmJhc2VVUkwgPSAiaHR0cDovLyIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArICIvb3AvcmVzdC9qaXJhL0FBL3B1cmNoYXNlL29yZGVyL2NyZWF0ZSIKdXJsID0gbmV3IFVSTChiYXNlVVJMKQpjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7CmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KCJDb250ZW50LVR5cGUiLCAiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04Iik7CmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KCJBY2NlcHQiLCAiKi8qIik7CmNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7CmNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTsKY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0KbG9nLmRlYnVnICJ1cmw6ICIgKyB1cmwKY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcigiVVRGLTgiKSB7IG5ldyBTdHJlYW1pbmdKc29uQnVpbGRlcihpdCwgYm9keV9yZXEpIH0KbG9nLmRlYnVnIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtCmNvbm5lY3Rpb24uY29ubmVjdCgpOwoKZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKQpkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIGVMaXN0RXJyb3JzID0gbmV3IEFycmF5TGlzdCgpCmRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KCkKCmlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscygiMjAwIikpewogICAgbG9nLmRlYnVnICJ1cmw6ICIgKyB1cmwKICAgIGxvZy5kZWJ1ZyAiUmVzcG9uc2VDb2RlOiIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpCiAgICBsb2cuZGVidWcgIlJlc3BvbnNlTWVzc2FnZToiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKQogICAgbG9nLmRlYnVnICJSZXNwb25zZTogIiArIGNvbm5lY3Rpb24KICAgIGRlZiBvdXRwdXRNc2cgPSAoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHQKICAgIGxvZy5kZWJ1ZyAiKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0OiAiICsgb3V0cHV0TXNnCiAgICAKICAgIGRlZiBqc29uU2x1cnBlciA9IG5ldyBKc29uU2x1cnBlcigpCiAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKQogICAgYXNzZXJ0IGpzb25fb2JqZWN0IGluc3RhbmNlb2YgTWFwICAKICAgIGxvZy5kZWJ1ZyAibWVzc2FnZTogIiArICBqc29uX29iamVjdC5tZXNzYWdlCiAgICAKICAgIGVMaXN0RXJyb3JzLmFkZCgiRSIpCiAgICBlTGlzdEVycm9ycy5hZGQoIk9QLVNBUC1PREEiKQogICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgIiAiICsganNvbl9vYmplY3QubWVzc2FnZSkKICAgIGVMaXN0RXJyb3JzLmFkZChlcnJvck1zZ3MpCiAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpCiAgICAKICAgIG91dHB1dC5hZGQoZUxpc3QpCiAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7IkUiOiInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnIn0nKQogICAgLy90aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCJFIiwgb3V0cHV0LnRvU3RyaW5nKCkpCn0=</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">YCFgT1AgRW1haWwgTm90aWZpY2F0aW9uOiBQVVJDSEFTRV9PUkRFUl9UT19TVVBQTElFUg==</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5NdXRhYmxlSXNzdWUKaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0OwppbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeQppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lcgppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGwKClByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKCkKRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJykKcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHsKCXByb3BlcnRpZXMubG9hZChpdCkKfQpDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQpsb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRykKCklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTsKQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpOwpkZWYgcmVxdWVzdE1ldGhvZApkZWYgYmFzZVVSTAoKVVJMIHVybApIdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uCgpyZXF1ZXN0TWV0aG9kID0gIlBPU1QiOwpkZWYgYm9keV9yZXEgPSBbCiAgICAidGVtcGxhdGVOYW1lIjogIlBVUkNIQVNFX09SREVSX1RPX1NVUFBMSUVSIiwKICAgICJwZWMiOiBmYWxzZSwKICAgICJpc3N1ZUtleSI6IGlzc3VlLmtleQpdCgpiYXNlVVJMID0gImh0dHA6Ly8iICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyAiL29wL3Jlc3QvamlyYS9BQS90cmFuc2FjdGlvbi9tYWlsL3NlbmQiCnVybCA9IG5ldyBVUkwoYmFzZVVSTCkKY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eSgiQ29udGVudC1UeXBlIiwgImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOCIpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eSgiQWNjZXB0IiwgIiovKiIpOwpjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpOwpjb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7CmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtCmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtLndpdGhXcml0ZXIoIlVURi04IikgeyBuZXcgU3RyZWFtaW5nSnNvbkJ1aWxkZXIoaXQsIGJvZHlfcmVxKSB9CmxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbQpjb25uZWN0aW9uLmNvbm5lY3QoKTsKCmRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpCmRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKQpkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpCgppZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoIjIwMCIpKXsKICAgIGxvZy5kZWJ1ZyAidXJsOiAiICsgdXJsCiAgICBsb2cuZGVidWcgIlJlc3BvbnNlQ29kZToiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKQogICAgbG9nLmRlYnVnICJSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKICAgIGVMaXN0RXJyb3JzLmFkZCgiRSIpCiAgICBlTGlzdEVycm9ycy5hZGQoIlNFTkRNQUlMIikKICAgIGVycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArICIgIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkpCiAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKQogICAgZUxpc3QuYWRkKGVMaXN0RXJyb3JzKQoKICAgIG91dHB1dC5hZGQoZUxpc3QpCiAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCJFIiwgb3V0cHV0LnRvU3RyaW5nKCkpCn1lbHNlewogICAgCiAgICAvL1VwZGF0ZSBjdXN0b20gZmllbGQgT1BBQV9QVVJDSEFTRV9PUkRFUl9EQVRFCiAgICAKfQ==</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_ACTION">181 Tkt Chiuso</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IENsb3NlIHRrdCBpZiBPRFYgYW5kIE9EQSBoYXZlIGJlZW4gY3JlYXRlZA==</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.FasttrackTransition</arg>
                  <arg name="FIELD_CONDITION">YCFgY2ZWYWx1ZXNbJ09QX1NBTEVTX09SREVSJ10gIT0gbnVsbCAmJiBjZlZhbHVlc1snT1BfU0FMRVNfT1JERVJfREFURSddICE9IG51bGwgJiYgY2ZWYWx1ZXNbJ09QX1NBTEVTX09SREVSX1RPVEFMJ10gIT0gbnVsbHx8fA==</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_TRANSITION_OPTIONS"></arg>
                  <arg name="FIELD_ADDITIONAL_SCRIPT">YCFg</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="181" name="Tkt Chiuso" view="fieldscreen">
          <meta name="opsbar-sequence">70</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19925</meta>
          <results>
            <unconditional-result old-status="null" status="null" step="7">
              <post-functions>
                <function type="class">
                  <arg name="field.name">resolution</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
                  <arg name="field.value">6</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">cb1f83508d578368bc33689cfe415057fb57da44</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IERvYyBUZW1wbGF0ZSBnZW5lcmF0aW9uIC0gc2UgTmV3IEluc3RhbGxhdGlvbiAtIEdlbmVyYSBDRV9ET0NVTUVOVEFUSU9O</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuV29ya2Zsb3dFeGNlcHRpb247CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7CmltcG9ydCBncm9vdnkuanNvbi5TdHJlYW1pbmdKc29uQnVpbGRlcjsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5DdXN0b21GaWVsZE1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3I7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlCmltcG9ydCBvcmcuYXBhY2hlLmNvbW1vbnMuY29kZWMuYmluYXJ5LkJhc2U2NDsKaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGdyb292eXgubmV0Lmh0dHAuSFRUUEJ1aWxkZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KQ2F0ZWdvcnkgbG9nID0gQ2F0ZWdvcnkuZ2V0SW5zdGFuY2UoImNvbS5vbnJlc29sdmUuamlyYS5ncm9vdnkuUG9zdEZ1bmN0aW9uIikKbG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpCgpJc3N1ZU1hbmFnZXIgaXNzdWVNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKCk7CkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTsKLy9pbnNpZ2h0IGNsYXNzZXMgJiBjb21wb25lbnRzCkNsYXNzIG9iamVjdEZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcygiY29tLnJpYWRhbGFicy5qaXJhLnBsdWdpbnMuaW5zaWdodC5jaGFubmVsLmV4dGVybmFsLmFwaS5mYWNhZGUuT2JqZWN0RmFjYWRlIik7ICAKQ2xhc3Mgb2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcygiY29tLnJpYWRhbGFicy5qaXJhLnBsdWdpbnMuaW5zaWdodC5jaGFubmVsLmV4dGVybmFsLmFwaS5mYWNhZGUuT2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZSIpOwpkZWYgb2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShvYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlQ2xhc3MpOwpkZWYgb2JqZWN0RmFjYWRlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKG9iamVjdEZhY2FkZUNsYXNzKTsKCmRlZiByZXF1ZXN0TWV0aG9kCmRlZiBiYXNlVVJMCgpkZWYgZmlyc3RUaWNrZXQgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLmZpcnN0VGt0J10udG9TdHJpbmcoKSlbMF0KU3RyaW5nIGFzc2V0Q0YgPSBwcm9wZXJ0aWVzWydjZi5hc3NldCddID8gcHJvcGVydGllc1snY2YuYXNzZXQnXS50b1N0cmluZygpIDogIk9QX0FTU0VUIgpkZWYgYXNzZXQgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUoYXNzZXRDRilbMF0KZGVmIGFzc2V0VmFsdWUgPSBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGFzc2V0KQoKbG9nLmRlYnVnICJhc3NldDogIiArIGFzc2V0ICsgIiwgYXNzZXRWYWx1ZTogIiArIGFzc2V0VmFsdWVbMF0gKyAiIC0gZnJvbSAiICsgYXNzZXRWYWx1ZVswXS50b1N0cmluZygpLmluZGV4T2YoJygnKSsxCgpkZWYgYXNzZXRLZXkgPSBhc3NldFZhbHVlWzBdLnRvU3RyaW5nKCkuc3Vic3RyaW5nKGFzc2V0VmFsdWVbMF0udG9TdHJpbmcoKS5pbmRleE9mKCcoJykrMSxhc3NldFZhbHVlWzBdLnRvU3RyaW5nKCkuaW5kZXhPZignKScpKQoKZGVmIGFzc2V0T2JqZWN0ID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RCZWFuKGFzc2V0S2V5KQoKbG9nLmRlYnVnIGlzc3VlLmdldElzc3VlVHlwZSgpLm5hbWUKbG9nLmRlYnVnIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoZmlyc3RUaWNrZXQpCgoKLyogUkVTVCBBUEkgcGVyIEludmlvIE5vdGlmaWNhIEVtYWlsIE9OU0lURV9SRVBPUlQgKi8KcmVxdWVzdE1ldGhvZCA9ICJHRVQiOwoKaWYoaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpdC5uZXdJbnN0YWxsYXRpb24nXSkpewogICAgYmFzZVVSTCA9ICJodHRwOi8vIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgIi9vcC9yZXN0L2F1dG9tYXRpb24vZG9jdW1lbnQvZ2VuZXJhdGlvbi9jaGVjaz9JU1NVRV9LRVk9IisgYXNzZXRPYmplY3QuZ2V0SWQoKS50b1N0cmluZygpICsiJkRPQ19DQVRFR09SWT1DRV9ET0NVTUVOVEFUSU9OIgogICAgbG9nLmRlYnVnIGJhc2VVUkwKICAgIFVSTCB1cmwgPSBuZXcgVVJMKGJhc2VVUkwpCiAgICBIdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpOwogICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpOwogICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoIkNvbnRlbnQtVHlwZSIsICJhcHBsaWNhdGlvbi9qc29uIik7CiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eSgiQWNjZXB0IiwgIiovKiIpOwogICAgY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTsKICAgIGNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTsKICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpOwoKICAgIGRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KCkKICAgIGRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKQogICAgZGVmIGVMaXN0RXJyb3JzID0gbmV3IEFycmF5TGlzdCgpCiAgICBkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpCgogICAgaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKCIyMDAiKSl7CiAgICAgICAgbG9nLmRlYnVnICJ1cmw6ICIgKyB1cmwKICAgICAgICBsb2cuZGVidWcgIlJlc3BvbnNlQ29kZToiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKQogICAgICAgIGxvZy5kZWJ1ZyAiUmVzcG9uc2VNZXNzYWdlOiIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpCiAgICAgICAgbG9nLmRlYnVnICJFcnJvclN0cmVhbTogIiArIGNvbm5lY3Rpb24uZ2V0RXJyb3JTdHJlYW0oKS50b1N0cmluZygpCiAgICAgICAgbG9nLmRlYnVnICJnZXRIZWFkZXJGaWVsZHMoKTogIiArIGNvbm5lY3Rpb24uZ2V0SGVhZGVyRmllbGRzKCkKICAgICAgICBkZWYgb3V0cHV0TXNnID0gKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0CiAgICAgICAgbG9nLmRlYnVnICIoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHQ6ICIgKyBvdXRwdXRNc2cKCiAgICAgICAgZGVmIGpzb25TbHVycGVyID0gbmV3IEpzb25TbHVycGVyKCkKICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKQogICAgICAgIGFzc2VydCBqc29uX29iamVjdCBpbnN0YW5jZW9mIE1hcCAgCiAgICAgICAgbG9nLmRlYnVnICJtZXNzYWdlOiAiICsgIGpzb25fb2JqZWN0Lm1lc3NhZ2UKCiAgICAgICAgZUxpc3RFcnJvcnMuYWRkKCJFIikKICAgICAgICBlTGlzdEVycm9ycy5hZGQoIk9QLURPQ1MiKQogICAgICAgIGVycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArICIgIiArIGpzb25fb2JqZWN0Lm1lc3NhZ2UpCiAgICAgICAgZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncykKICAgICAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpCgogICAgICAgIG91dHB1dC5hZGQoZUxpc3QpCiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigiRSIsIG91dHB1dC50b1N0cmluZygpKQogICAgfQp9Cg==</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">YCFgT1A6IE5ldyBJbnN0YWxsYXRpb24gLSBDaGVjayBsaW5rZWRUaWNrZXRzICYgRmFzdC1UcmFuc2FjdCB0aGVt</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT"></arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="191" name="Invia Consuntivo al Cliente" view="fieldscreen">
          <meta name="opsbar-sequence">30</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19911</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_NOTES">YCFg</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ01haW50ZW5hbmNlIFRpY2tldCd8fHw=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">fada32c2-b768-4770-816d-beeac0f8e084</arg>
                <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIEZJTkFOQ0lBTF9TVEFURU1FTlRfVE9fQ1VTVE9NRVIgLSBJZiBpdCdzIG51bGwgdGhlIGVtYWlsIGhhcyBub3QgYmVlbiBzZW50IHlldA==</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXG5cblByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKClcbkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpXG5wcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0ge1xuXHRwcm9wZXJ0aWVzLmxvYWQoaXQpXG59XG5jZlZhbHVlc1twcm9wZXJ0aWVzWydjZi53ZkZpbmFuY2lhbFN0YXRtVG9DJ11dID09IG51bGwiLCJzY3JpcHRQYXRoIjpudWxsfQ==</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">e70180eb-0cf2-468c-b6c4-1eeded83980b</arg>
                <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIE9QX0FVVE9NQVRJQ0FMTFlfQ0xPU0VEIC0gaWYgWWVzIGRvbid0IGFsbG93IHRyYW5zaXRpb24=</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXG5cblByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKClcbkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpXG5wcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0ge1xuXHRwcm9wZXJ0aWVzLmxvYWQoaXQpXG59XG5jZlZhbHVlc1twcm9wZXJ0aWVzWydjZi5hdXRvbWF0aWNhbGx5Q2xvc2VkJ11dID09IG51bGwgfHwgY2ZWYWx1ZXNbcHJvcGVydGllc1snY2YuYXV0b21hdGljYWxseUNsb3NlZCddXT8udmFsdWUgPT0gJ05vJyIsInNjcmlwdFBhdGgiOm51bGx9</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">6c786cdf0a6d0ad4b6b1d34c1ad1598920327ad2</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlcXVpcmVkIEZpZWxkcyAtIHNvbG8gZXJyb3JzLCBubyB3YXJuaW5ncw==</arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">8a3daba2cbc0fa976eb28f598d455a84abf02ad8</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBPUCBnZW5lcmF6aW9uZSBDb25zdW50aXZv</arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeQppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuSXNzdWVMaW5rCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbAoKUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKQpGaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKQpwcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0gewoJcHJvcGVydGllcy5sb2FkKGl0KQp9CkNhdGVnb3J5IGxvZyA9IENhdGVnb3J5LmdldEluc3RhbmNlKCJjb20ub25yZXNvbHZlLmppcmEuZ3Jvb3Z5LlBvc3RGdW5jdGlvbiIpCmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKQoKSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpOwpDdXN0b21GaWVsZE1hbmFnZXIgY3VzdG9tRmllbGRNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCk7CmRlZiByZXF1ZXN0TWV0aG9kCmRlZiBiYXNlVVJMCgovKiBSRVNUIEFQSSBwZXIgR2VuZXJhemlvbmUgQWxsZWdhdG8gQ29uc3VudGl2byAqLwpyZXF1ZXN0TWV0aG9kID0gIlBVVCI7CgpkZWYgcmVsYXRlc0luSXNzdWVMaW5rPWZhbHNlCmRlZiByZWxhdGVzT3V0SXNzdWVMaW5rPWZhbHNlCmRlZiBsaW5rZWRUaWNrZXRzPW5ldyBBcnJheUxpc3QoKQpMaXN0PElzc3VlTGluaz4gYWxsSW5Jc3N1ZUxpbmsgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZUxpbmtNYW5hZ2VyKCkuZ2V0SW53YXJkTGlua3MoaXNzdWUuZ2V0SWQoKSkKZm9yIChJdGVyYXRvcjxJc3N1ZUxpbms+IG91dEl0ZXJhdG9yID0gYWxsSW5Jc3N1ZUxpbmsuaXRlcmF0b3IoKTsgb3V0SXRlcmF0b3IuaGFzTmV4dCgpOykgewogICAgSXNzdWVMaW5rIGlzc3VlTGluayA9IChJc3N1ZUxpbmspIG91dEl0ZXJhdG9yLm5leHQoKTsKCiAgICBpZihpc3N1ZUxpbmsuaXNzdWVMaW5rVHlwZS5nZXROYW1lKCkudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snaWwubGlua2VkVGt0c1JlbGF0ZXMnXS50b1N0cmluZygpKSl7CiAgICAgICAgcmVsYXRlc0luSXNzdWVMaW5rPXRydWUKICAgICAgICBsaW5rZWRUaWNrZXRzLmFkZChpc3N1ZUxpbmsuZ2V0U291cmNlT2JqZWN0KCkudG9TdHJpbmcoKSkKICAgICAgICBsb2cuZGVidWcgIklzc3VlIGNvbiByZWxhdGVzSW5Jc3N1ZUxpbmsiCiAgICB9Cn0KTGlzdDxJc3N1ZUxpbms+IGFsbE91dElzc3VlTGluayA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTGlua01hbmFnZXIoKS5nZXRPdXR3YXJkTGlua3MoaXNzdWUuZ2V0SWQoKSkKZm9yIChJdGVyYXRvcjxJc3N1ZUxpbms+IG91dEl0ZXJhdG9yID0gYWxsT3V0SXNzdWVMaW5rLml0ZXJhdG9yKCk7IG91dEl0ZXJhdG9yLmhhc05leHQoKTspIHsKICAgIElzc3VlTGluayBpc3N1ZUxpbmsgPSAoSXNzdWVMaW5rKSBvdXRJdGVyYXRvci5uZXh0KCk7CgogICAgaWYoaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNSZWxhdGVzJ10udG9TdHJpbmcoKSkpewogICAgICAgIHJlbGF0ZXNPdXRJc3N1ZUxpbms9dHJ1ZQogICAgICAgIGxpbmtlZFRpY2tldHMuYWRkKGlzc3VlTGluay5nZXREZXN0aW5hdGlvbk9iamVjdCgpLnRvU3RyaW5nKCkpCiAgICAgICAgbG9nLmRlYnVnICJJc3N1ZSBjb24gcmVsYXRlc091dElzc3VlTGluayIKICAgIH0KfQoKYmFzZVVSTCA9ICJodHRwOi8vIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgIi9vcC9yZXN0L2F1dG9tYXRpb24vQUEvdGlja2V0LyIgKyBpc3N1ZS5rZXkudG9TdHJpbmcoKSArICIvYXR0YWNobWVudC9iYWxhbmNlIgoKaWYocmVsYXRlc0luSXNzdWVMaW5rIHx8IHJlbGF0ZXNPdXRJc3N1ZUxpbmspewogICAgYmFzZVVSTCA9IGJhc2VVUkwgKyAiP2xpbmtlZFRpY2tldHM9IiArIGxpbmtlZFRpY2tldHMudG9TdHJpbmcoKS5yZXBsYWNlQWxsKCJcXFsiLCIiKS5yZXBsYWNlQWxsKCJcXF0iLCIiKS5yZXBsYWNlQWxsKCIgIiwiIikKfQoKbG9nLmRlYnVnICJiYXNlVXJsOiAiICsgYmFzZVVSTAoKVVJMIHVybAp1cmwgPSBuZXcgVVJMKGJhc2VVUkwpCkh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7CmNvbm5lY3Rpb24uc2V0UmVxdWVzdE1ldGhvZChyZXF1ZXN0TWV0aG9kKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoIkNvbnRlbnQtVHlwZSIsICJhcHBsaWNhdGlvbi9qc29uIik7CmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KCJBY2NlcHQiLCAiKi8qIik7CmNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7CmNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTsKY29ubmVjdGlvbi5jb25uZWN0KCk7CgpkZWYgb3V0cHV0ID0gbmV3IEFycmF5TGlzdCgpCmRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKQpkZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIGVycm9yTXNncyA9IG5ldyBBcnJheUxpc3QoKQoKaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKCIyMDAiKSl7CiAgICBsb2cuZGVidWcgInVybDogIiArIHVybAogICAgbG9nLmRlYnVnICJSZXNwb25zZUNvZGU6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkKICAgIGxvZy5kZWJ1ZyAiUmVzcG9uc2VNZXNzYWdlOiIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpCiAgICBlTGlzdEVycm9ycy5hZGQoIkUiKQogICAgZUxpc3RFcnJvcnMuYWRkKCJHRU5FUkFURS1BQ0NPVU5USU5HUkVQT1JUIikKICAgIGVycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArICIgIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkpCiAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKQogICAgZUxpc3QuYWRkKGVMaXN0RXJyb3JzKQoKICAgIG91dHB1dC5hZGQoZUxpc3QpCiAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7IkUiOiInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnIn0nKQogICAgLy90aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCJFIiwgb3V0cHV0LnRvU3RyaW5nKCkpCn0K</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">7f809f6e87447e19ed7c9921bc7d6a28aed7bf3f</arg>
              <arg name="FIELD_NOTES">YCFgT1AgRW1haWwgTm90aWZpY2F0aW9uOiBGSU5BTkNJQUxfU1RBVEVNRU5UX1RPX0NVU1RPTUVS</arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="6">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="append.value"></arg>
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="field.name">customfield_22644</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="201" name="Riapri Rapporto di Intervento">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_NOTES">YCFgT1BBQV9TQUxFU19PUkRFUl9EQVRFIGFuZCBPUEFBX1BVUkNIQVNFX09SREVSX0RBVEUgc2hvdWxkIGJlIG51bGwgaW4gb3JkZXIgdG8gcmVvcGVuIHRoZSB0aWNrZXQgLSBvdGhlcndpc2UgdGhlIHRpY2tldCBoYXMgYWxyZWFkeSBiZWVuIGFjY291bnRlZCBzbyBpdCBjYW5ub3QgYmUgcmVvcGVuZWQ=</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgY2ZWYWx1ZXNbJ09QX1NBTEVTX09SREVSX0RBVEUnXSA9PSBudWxsICYmIGNmVmFsdWVzWydPUF9QVVJDSEFTRV9PUkRFUl9EQVRFJ10gPT0gbnVsbHx8fA==</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
              <condition type="class">
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ01haW50ZW5hbmNlIFRpY2tldCd8fHw=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="5">
              <post-functions>
                <function type="class">
                  <arg name="field">customfield_22693</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22660</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22644</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22641</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22666</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">93ee91428be862f784d2facaa9da5be13f63a66b</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IFJlbW92ZSBPblNpdGUgUmVwb3J0IEF0dGFjaG1lbnRz</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT"></arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="211" name="Invia notifica ODA al Fornitore">
          <meta name="opsbar-sequence">60</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_NOTES">YCFgQ2hlY2sgT1BfUFVSQ0hBU0VfT1JERVJfREFURSAmJiBPUF9QVVJDSEFTRV9PUkRFUiAtIElmIHRoZSBmaXJzdCBvbmUgaXMgbm90IG51bGwgJiYgdGhlIHNlY29uZCBvbmUgaXMgbnVsbCAtIE9EQSBoYXMgYmVlbiBjcmVhdGVkIGJ1dCBtYWlsIG5vdCBzZW50</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KY2ZWYWx1ZXNbcHJvcGVydGllc1snY2YucHVyY2hhc2VPcmRlckRhdGUnXV0gIT0gbnVsbCAmJiBjZlZhbHVlc1twcm9wZXJ0aWVzWydjZi5wdXJjaGFzZU9yZGVyJ11dID09IG51bGx8fHw=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
              <condition type="class">
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ01haW50ZW5hbmNlIFRpY2tldCd8fHw=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">4e1d2427405a47dffb8300132632cf585f8677e4</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlcXVpcmVkIEZpZWxkcyAtIHNvbG8gZXJyb3JzLCBubyB3YXJuaW5ncw==</arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZQppbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb24KaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3IKaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGdyb292eS5qc29uLkpzb25CdWlsZGVyCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbAoKUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKQpGaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKQpwcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0gewoJcHJvcGVydGllcy5sb2FkKGl0KQp9CmRlZiBDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQogCklzc3VlIGlzc3VlID0gaXNzdWUKCmRlZiBlcnJvcnMgPSBmYWxzZQpkZWYgd2FybmluZ3MgPSBmYWxzZQoKZGVmIGx1bXBTdW1QcmljZSA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YubHVtcFN1bVByaWNlJ10udG9TdHJpbmcoKSlbMF0KCi8qQ2FtcGkgY29uIGRhdGkgb2JibGlnYXRvcmkgcGVyIHRpY2tldCBub24gYSBjb3JwbyovCmRlZiByZXBNYXRlcmlhbHMgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLnJlcGxhY2VkTWF0ZXJpYWxzJ10udG9TdHJpbmcoKSlbMF0KZGVmIHVuYVRhbnR1bVJhdGVzID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi51bmF0YW50dW1SYXRlcyddLnRvU3RyaW5nKCkpWzBdCmRlZiBsYWJvdXJSYXRlcyA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YubGFib3VyUmF0ZXMnXS50b1N0cmluZygpKVswXQpkZWYgdHJhdmVsUmF0ZXMgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLnRyYXZlbFJhdGVzJ10udG9TdHJpbmcoKSlbMF0KCi8qQ2FtcGkgY29uIGRhdGkgb2JibGlnYXRvcmkgcGVyIHRpY2tldCBhIGNvcnBvKi8KZGVmIGx1bXBTdW1SYXRlcyA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YubHVtcFN1bVJhdGVzJ10udG9TdHJpbmcoKSlbMF0KCi8qQ29uZmVybWEgdXRlbnRlIHN1IHdhcm5pbmdzKi8KZGVmIHRyYW5zaXRpb25DaGVjayA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YuY2hlY2tBbmRDb25maXJtJ10udG9TdHJpbmcoKSlbMF0KCi8qSW5zaWdodCBTY2hlbWEgSURzKi8KZGVmIERCT2JqZWN0cyA9IHByb3BlcnRpZXNbJ2lzY2hlbWEuZGJvJ10udG9TdHJpbmcoKSArICItIgpkZWYgT1BBQSA9IHByb3BlcnRpZXNbJ2lzY2hlbWEuYWEnXS50b1N0cmluZygpICsgIi0iCgpkZWYgZXJyb3JNYW5kYXRvcnlGaWVsZHMgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIGVycm9ySm9iU3RhcnRlZENvbXBsZXRlZEZpZWxkcyA9IG5ldyBBcnJheUxpc3QoKQpkZWYgd2FybmluZ0VtcHR5RmllbGRzID0gbmV3IEFycmF5TGlzdCgpCmRlZiB3YXJuaW5nRW1wdHlRdW90ZU1hdEN1c3RvbWVyID0gbmV3IEFycmF5TGlzdCgpCmRlZiB3YXJuaW5nRW1wdHlRdW90ZVJhdGVDdXN0b21lciA9IG5ldyBBcnJheUxpc3QoKQoKLy90cnl7CiAgICBpZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGx1bXBTdW1QcmljZSkhPW51bGwgJiYgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShsdW1wU3VtUHJpY2UpLnRvU3RyaW5nKCkuZXF1YWxzKCJZZXMiKSl7CiAgICAgICAgLypDb250YWJpbGl6emF6aW9uZSBhIGNvcnBvKi8KICAgICAgICBsb2cuZGVidWcgIkNvbnRhYmlsaXp6YXppb25lIGEgY29ycG8iCiAgICAgICAgLy9PUEFBX0xVTVBfU1VNX1JBVEVTCiAgICAgICAgaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShsdW1wU3VtUmF0ZXMpIT1udWxsICYmIChTdHJpbmcpaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShsdW1wU3VtUmF0ZXMpICE9ICIiICYmICFpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGx1bXBTdW1SYXRlcykudG9TdHJpbmcoKS5lcXVhbHMoIiIpKXsKICAgICAgICAgICAgLypDaWNsYXJlIHR1dHRpIGdsaSBvZ2dldHRpIGFzc29jaWF0aSBhbCBjYW1wbyovCiAgICAgICAgICAgIC8vaW5zaWdodCBjbGFzc2VzICYgY29tcG9uZW50cwogICAgICAgICAgICBDbGFzcyBvYmplY3RGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdEZhY2FkZSIpOyAgCiAgICAgICAgICAgIENsYXNzIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGUiKTsKICAgICAgICAgICAgZGVmIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZUNsYXNzKTsKICAgICAgICAgICAgZGVmIG9iamVjdEZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShvYmplY3RGYWNhZGVDbGFzcyk7CgogICAgICAgICAgICBkZWYgbHNSYXRlc0xpc3QgPSBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGx1bXBTdW1SYXRlcykKCiAgICAgICAgICAgIGZvcihscyBpbiBsc1JhdGVzTGlzdCl7CiAgICAgICAgICAgICAgICAvL2V4dHJhY3QgaW5zaWdodCBrZXkgYW5nIGdldCBvYmplY3QKICAgICAgICAgICAgICAgIGRlZiBsc1JhdGU9bHMudG9TdHJpbmcoKQogICAgICAgICAgICAgICAgZGVmIGxzUmF0ZUtleSA9IGxzUmF0ZS5zdWJzdHJpbmcobHNSYXRlLmluZGV4T2YoJygnKSsxLGxzUmF0ZS5pbmRleE9mKCcpJykpCiAgICAgICAgICAgICAgICBkZWYgbHNSYXRlT2JqZWN0ID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RCZWFuKGxzUmF0ZUtleSkKICAgICAgICAgICAgICAgIC8vZ2V0ICJBUFBMSUVEX1RPIiBmb3IgdGhhdCByYXRlCiAgICAgICAgICAgICAgICBkZWYgbHNBcHBsaWVkVG8gPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4obHNSYXRlT2JqZWN0LmdldElkKCksIHByb3BlcnRpZXNbJ2lvYmoub25TaXRlUmF0ZVJlcG9ydC5hcHBsaWVkVG8nXS50b1N0cmluZygpKS5nZXRPYmplY3RBdHRyaWJ1dGVWYWx1ZUJlYW5zKCkudG9TdHJpbmcoKQogICAgICAgICAgICAgICAgZGVmIGxzQXBwbGllZFRvVmFsdWUKICAgICAgICAgICAgICAgIGlmIChsc0FwcGxpZWRUbyl7CiAgICAgICAgICAgICAgICAgICAgbHNBcHBsaWVkVG9WYWx1ZSA9IGxzQXBwbGllZFRvLnN1YnN0cmluZyhsc0FwcGxpZWRUby5pbmRleE9mKCcoJykrMSxsc0FwcGxpZWRUby5pbmRleE9mKCcpJykpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGRlZiBsc1JhdGVSZWYgPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4obHNSYXRlT2JqZWN0LmdldElkKCksIHByb3BlcnRpZXNbJ2lvYmoub25TaXRlUmF0ZVJlcG9ydC5yYXRlUmVmJ10udG9TdHJpbmcoKSkuZ2V0T2JqZWN0QXR0cmlidXRlVmFsdWVCZWFucygpLnRvU3RyaW5nKCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZGVmIGxzUmF0ZVJlZktleQogICAgICAgICAgICAgICAgZGVmIGxzUmF0ZVJlZlZhbHVlCiAgICAgICAgICAgICAgICBpZihsc1JhdGVSZWYuc2l6ZSgpID4gMCl7CiAgICAgICAgICAgICAgICAgICAgbHNSYXRlUmVmID0gbHNSYXRlUmVmLnRvU3RyaW5nKCkKICAgICAgICAgICAgICAgICAgICBsc1JhdGVSZWZLZXkgPSBsc1JhdGVSZWYuc3Vic3RyaW5nKGxzUmF0ZVJlZi5pbmRleE9mKCcoJykrMSxsc1JhdGVSZWYuaW5kZXhPZignKScpKQogICAgICAgICAgICAgICAgICAgIGRlZiBsc1JhdGVSZWZPYmplY3QgPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEJlYW4oT1BBQSArIGxzUmF0ZVJlZktleSkKICAgICAgICAgICAgICAgICAgICBsc1JhdGVSZWZWYWx1ZSA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbihsc1JhdGVSZWZPYmplY3QuZ2V0SWQoKSwgcHJvcGVydGllc1snaW9iai5yYXRlLm5hbWUnXS50b1N0cmluZygpKS5nZXRPYmplY3RBdHRyaWJ1dGVWYWx1ZUJlYW5zKCkudG9TdHJpbmcoKQogICAgICAgICAgICAgICAgICAgIGxzUmF0ZVJlZlZhbHVlID0gbHNSYXRlUmVmVmFsdWUuc3Vic3RyaW5nKGxzUmF0ZVJlZlZhbHVlLmluZGV4T2YoJygnKSsxLGxzUmF0ZVJlZlZhbHVlLmluZGV4T2YoJyknKSkKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZihsc0FwcGxpZWRUb1ZhbHVlLnRvU3RyaW5nKCkuZXF1YWxzKCJCT1RIIikgfHwgbHNBcHBsaWVkVG9WYWx1ZS50b1N0cmluZygpLmVxdWFscygiU1VQUExJRVIiKSl7CiAgICAgICAgICAgICAgICAgICAgLy9nZXQgIlRPVEFMX0FNT1VOVF9TVVBQTElFUiIgZm9yIHRoYXQgY29tcG9uZW50CiAgICAgICAgICAgICAgICAgICAgZGVmIHRvdEN1c3RvbWVyID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKGxzUmF0ZU9iamVjdC5nZXRJZCgpLCBwcm9wZXJ0aWVzWydpb2JqLm9uU2l0ZVJhdGVSZXBvcnQudG90U3VwcGxpZXInXS50b1N0cmluZygpKS5nZXRPYmplY3RBdHRyaWJ1dGVWYWx1ZUJlYW5zKCkKICAgICAgICAgICAgICAgICAgICBpZighdG90Q3VzdG9tZXIgfHwgdG90Q3VzdG9tZXJbMF0uZ2V0VmFsdWUoKS50b1N0cmluZygpLmVxdWFscygiMC4wIikpewogICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5ncz10cnVlCiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdFbXB0eVF1b3RlUmF0ZUN1c3RvbWVyLmFkZChsc1JhdGVSZWZWYWx1ZS50b1N0cmluZygpKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0gICAgCiAgICAgICAgfQoKICAgIH1lbHNlewogICAgICAgIC8qQ29udGFiaWxpenphemlvbmUgbm9uIGEgY29ycG8qLwogICAgICAgIGxvZy5kZWJ1ZyAiQ29udGFiaWxpenphemlvbmUgTk9OIGEgY29ycG8iCgogICAgICAgIC8vT1BBQV9SRVBMQUNFRF9NQVRFUklBTFMKICAgICAgICBpZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHJlcE1hdGVyaWFscykhPW51bGwgJiYgKFN0cmluZylpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHJlcE1hdGVyaWFscykgIT0gIiIgJiYgIWlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUocmVwTWF0ZXJpYWxzKS50b1N0cmluZygpLmVxdWFscygiIikpewogICAgICAgICAgICAvL2xvZy5kZWJ1ZyAiTWF0ZXJpYWxpOiAiICsgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShyZXBNYXRlcmlhbHMpCiAgICAgICAgICAgIC8qQ2ljbGFyZSB0dXR0aSBnbGkgb2dnZXR0aSBhc3NvY2lhdGkgYWwgY2FtcG8qLwogICAgICAgICAgICAvL2luc2lnaHQgY2xhc3NlcyAmIGNvbXBvbmVudHMKICAgICAgICAgICAgQ2xhc3Mgb2JqZWN0RmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RGYWNhZGUiKTsgIAogICAgICAgICAgICBDbGFzcyBvYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlIik7CiAgICAgICAgICAgIGRlZiBvYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyk7CiAgICAgICAgICAgIGRlZiBvYmplY3RGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0RmFjYWRlQ2xhc3MpOwoKICAgICAgICAgICAgZGVmIHJlcE1hdExpc3QgPSBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHJlcE1hdGVyaWFscykKCiAgICAgICAgICAgIGZvcihtYXQgaW4gcmVwTWF0TGlzdCl7CiAgICAgICAgICAgICAgICAvL2V4dHJhY3QgaW5zaWdodCBrZXkgYW5nIGdldCBvYmplY3QKICAgICAgICAgICAgICAgIGRlZiBjb21wb25lbnQ9bWF0LnRvU3RyaW5nKCkKICAgICAgICAgICAgICAgIGRlZiBjb21wb25lbnRLZXkgPSBjb21wb25lbnQuc3Vic3RyaW5nKGNvbXBvbmVudC5pbmRleE9mKCcoJytPUEFBKSsxLGNvbXBvbmVudC5sZW5ndGgoKS0xKQogICAgICAgICAgICAgICAgZGVmIGNvbXBvbmVudE9iamVjdCA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QmVhbihjb21wb25lbnRLZXkpCiAgICAgICAgICAgICAgICAvL2dldCAiQVBQTElFRF9UTyIgZm9yIHRoYXQgY29tcG9uZW50CiAgICAgICAgICAgICAgICBkZWYgYXBwbGllZFRvID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKGNvbXBvbmVudE9iamVjdC5nZXRJZCgpLCBwcm9wZXJ0aWVzWydpb2JqLmNvbXBvbmVudC5hcHBsaWVkVG8nXS50b1N0cmluZygpKS5nZXRPYmplY3RBdHRyaWJ1dGVWYWx1ZUJlYW5zKCkgYXMgQXJyYXlMaXN0CiAgICAgICAgICAgICAgICBkZWYgYXBwbGllZFRvVmFsdWUKICAgICAgICAgICAgICAgIGlmKGFwcGxpZWRUby5zaXplKCkgPiAwKXsKICAgICAgICAgICAgICAgICAgICBhcHBsaWVkVG8gPSBhcHBsaWVkVG8udG9TdHJpbmcoKQogICAgICAgICAgICAgICAgICAgIGFwcGxpZWRUb1ZhbHVlID0gYXBwbGllZFRvLnN1YnN0cmluZyhhcHBsaWVkVG8uaW5kZXhPZignKCcpKzEsYXBwbGllZFRvLmluZGV4T2YoJyknKSkKICAgICAgICAgICAgICAgICAgICAvL2xvZy5kZWJ1ZyAiYXBwbGllZFRvVmFsdWU6ICIgKyBhcHBsaWVkVG9WYWx1ZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBkZWYgbWF0TnVtYmVyID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKGNvbXBvbmVudE9iamVjdC5nZXRJZCgpLCBwcm9wZXJ0aWVzWydpb2JqLmNvbXBvbmVudC5tYXRlcmlhbFJlZiddLnRvU3RyaW5nKCkpLmdldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnMoKSBhcyBBcnJheUxpc3QKICAgICAgICAgICAgICAgIGRlZiBtYXROdW1iZXJLZXkKICAgICAgICAgICAgICAgIGRlZiBtYXROdW1iZXJWYWx1ZQogICAgICAgICAgICAgICAgaWYobWF0TnVtYmVyLnNpemUoKSA+IDApewogICAgICAgICAgICAgICAgICAgIG1hdE51bWJlciA9IG1hdE51bWJlci50b1N0cmluZygpCiAgICAgICAgICAgICAgICAgICAgbWF0TnVtYmVyS2V5ID0gbWF0TnVtYmVyLnN1YnN0cmluZyhtYXROdW1iZXIuaW5kZXhPZignKCcpKzEsbWF0TnVtYmVyLmluZGV4T2YoJyknKSkKICAgICAgICAgICAgICAgICAgICBkZWYgbWF0TnVtYmVyT2JqZWN0ID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RCZWFuKERCT2JqZWN0cyArIG1hdE51bWJlcktleSkKICAgICAgICAgICAgICAgICAgICBtYXROdW1iZXJWYWx1ZSA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbihtYXROdW1iZXJPYmplY3QuZ2V0SWQoKSwgcHJvcGVydGllc1snaW9iai5tYXRlcmlhbC5uYW1lJ10udG9TdHJpbmcoKSkuZ2V0T2JqZWN0QXR0cmlidXRlVmFsdWVCZWFucygpLnRvU3RyaW5nKCkKICAgICAgICAgICAgICAgICAgICBtYXROdW1iZXJWYWx1ZSA9IG1hdE51bWJlclZhbHVlLnN1YnN0cmluZyhtYXROdW1iZXJWYWx1ZS5pbmRleE9mKCcoJykrMSxtYXROdW1iZXJWYWx1ZS5pbmRleE9mKCcpJykpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGRlZiBzZXJpYWxOdW1iZXIgPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4oY29tcG9uZW50T2JqZWN0LmdldElkKCksIHByb3BlcnRpZXNbJ2lvYmouY29tcG9uZW50LnNlcmlhbE51bWJlciddLnRvU3RyaW5nKCkpLmdldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnMoKSBhcyBBcnJheUxpc3QKICAgICAgICAgICAgICAgIGRlZiBzZXJpYWxOdW1iZXJWYWx1ZQogICAgICAgICAgICAgICAgaWYoc2VyaWFsTnVtYmVyLnNpemUoKSA+IDApewogICAgICAgICAgICAgICAgICAgIHNlcmlhbE51bWJlciA9IHNlcmlhbE51bWJlci50b1N0cmluZygpCiAgICAgICAgICAgICAgICAgICAgc2VyaWFsTnVtYmVyVmFsdWUgPSBzZXJpYWxOdW1iZXIuc3Vic3RyaW5nKHNlcmlhbE51bWJlci5pbmRleE9mKCcoJykrMSxzZXJpYWxOdW1iZXIuaW5kZXhPZignKScpKQogICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIGlmKGFwcGxpZWRUb1ZhbHVlLnRvU3RyaW5nKCkuZXF1YWxzKCJCT1RIIikgfHwgYXBwbGllZFRvVmFsdWUudG9TdHJpbmcoKS5lcXVhbHMoIlNVUFBMSUVSIikpewogICAgICAgICAgICAgICAgICAgIC8vZ2V0ICJUT1RBTF9BTU9VTlRfU1VQUExJRVIiIGZvciB0aGF0IGNvbXBvbmVudAogICAgICAgICAgICAgICAgICAgIGRlZiB0b3RDdXN0b21lciA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbihjb21wb25lbnRPYmplY3QuZ2V0SWQoKSwgcHJvcGVydGllc1snaW9iai5vblNpdGVSYXRlUmVwb3J0LmFwcGxpZWRUbyddLnRvU3RyaW5nKCkpLmdldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnMoKQogICAgICAgICAgICAgICAgICAgIGlmKCF0b3RDdXN0b21lciB8fCB0b3RDdXN0b21lclswXS5nZXRWYWx1ZSgpLnRvU3RyaW5nKCkuZXF1YWxzKCIwLjAiKSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdzPXRydWUKICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ0VtcHR5UXVvdGVNYXRDdXN0b21lci5hZGQobWF0TnVtYmVyVmFsdWUudG9TdHJpbmcoKSArICghc2VyaWFsTnVtYmVyLnRvU3RyaW5nKCkuZXF1YWxzKCJbXSIpID8gIiAoIiArIHNlcmlhbE51bWJlclZhbHVlLnRvU3RyaW5nKCkgKyAiKSIgOiAiICgpIikpICAgCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSAgICAKICAgICAgICB9ICAKCiAgICAgICAgLy9PUEFBX1VOQVRBTlRVTV9SQVRFUwogICAgICAgIGlmKGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUodW5hVGFudHVtUmF0ZXMpIT1udWxsICYmIChTdHJpbmcpaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZSh1bmFUYW50dW1SYXRlcykgIT0gIiIgJiYgIWlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUodW5hVGFudHVtUmF0ZXMpLnRvU3RyaW5nKCkuZXF1YWxzKCIiKSl7CiAgICAgICAgICAgIGxvZy5kZWJ1ZyAiVW5hIHRhbnR1bSByYXRlczogIiArIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUodW5hVGFudHVtUmF0ZXMpCiAgICAgICAgICAgIC8qQ2ljbGFyZSB0dXR0aSBnbGkgb2dnZXR0aSBhc3NvY2lhdGkgYWwgY2FtcG8qLwogICAgICAgICAgICAvL2luc2lnaHQgY2xhc3NlcyAmIGNvbXBvbmVudHMKICAgICAgICAgICAgQ2xhc3Mgb2JqZWN0RmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RGYWNhZGUiKTsgIAogICAgICAgICAgICBDbGFzcyBvYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlIik7CiAgICAgICAgICAgIGRlZiBvYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyk7CiAgICAgICAgICAgIGRlZiBvYmplY3RGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0RmFjYWRlQ2xhc3MpOwoKICAgICAgICAgICAgZGVmIHVtUmF0ZXNMaXN0ID0gaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZSh1bmFUYW50dW1SYXRlcykKCiAgICAgICAgICAgIGZvcih1bSBpbiB1bVJhdGVzTGlzdCl7CiAgICAgICAgICAgICAgICAvL2V4dHJhY3QgaW5zaWdodCBrZXkgYW5nIGdldCBvYmplY3QKICAgICAgICAgICAgICAgIGRlZiB1bVJhdGU9dW0udG9TdHJpbmcoKQogICAgICAgICAgICAgICAgZGVmIHVtUmF0ZUtleSA9IHVtUmF0ZS5zdWJzdHJpbmcodW1SYXRlLmluZGV4T2YoJygnKSsxLHVtUmF0ZS5pbmRleE9mKCcpJykpCiAgICAgICAgICAgICAgICBkZWYgdW1SYXRlT2JqZWN0ID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RCZWFuKHVtUmF0ZUtleSkKICAgICAgICAgICAgICAgIC8vZ2V0ICJBUFBMSUVEX1RPIiBmb3IgdGhhdCByYXRlCiAgICAgICAgICAgICAgICBkZWYgdW1BcHBsaWVkVG8gPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4odW1SYXRlT2JqZWN0LmdldElkKCksIHByb3BlcnRpZXNbJ2lvYmoub25TaXRlUmF0ZVJlcG9ydC5hcHBsaWVkVG8nXS50b1N0cmluZygpKS5nZXRPYmplY3RBdHRyaWJ1dGVWYWx1ZUJlYW5zKCkudG9TdHJpbmcoKQogICAgICAgICAgICAgICAgZGVmIHVtQXBwbGllZFRvVmFsdWUgPSB1bUFwcGxpZWRUby5zdWJzdHJpbmcodW1BcHBsaWVkVG8uaW5kZXhPZignKCcpKzEsdW1BcHBsaWVkVG8uaW5kZXhPZignKScpKQoKICAgICAgICAgICAgICAgIGRlZiB1bVJhdGVSZWYgPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4odW1SYXRlT2JqZWN0LmdldElkKCksIHByb3BlcnRpZXNbJ2lvYmoub25TaXRlUmF0ZVJlcG9ydC5yYXRlUmVmJ10udG9TdHJpbmcoKSkuZ2V0T2JqZWN0QXR0cmlidXRlVmFsdWVCZWFucygpLnRvU3RyaW5nKCkKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIGRlZiB1bVJhdGVSZWZLZXkKICAgICAgICAgICAgICAgIGRlZiB1bVJhdGVSZWZWYWx1ZQogICAgICAgICAgICAgICAgaWYodW1SYXRlUmVmLnNpemUoKSA+IDApewogICAgICAgICAgICAgICAgICAgIHVtUmF0ZVJlZiA9IHVtUmF0ZVJlZi50b1N0cmluZygpCiAgICAgICAgICAgICAgICAgICAgdW1SYXRlUmVmS2V5ID0gdW1SYXRlUmVmLnN1YnN0cmluZyh1bVJhdGVSZWYuaW5kZXhPZignKCcpKzEsdW1SYXRlUmVmLmluZGV4T2YoJyknKSkKICAgICAgICAgICAgICAgICAgICBkZWYgdW1SYXRlUmVmT2JqZWN0ID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RCZWFuKE9QQUEgKyB1bVJhdGVSZWZLZXkpCiAgICAgICAgICAgICAgICAgICAgdW1SYXRlUmVmVmFsdWUgPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4odW1SYXRlUmVmT2JqZWN0LmdldElkKCksIHByb3BlcnRpZXNbJ2lvYmoucmF0ZS5uYW1lJ10udG9TdHJpbmcoKSkuZ2V0T2JqZWN0QXR0cmlidXRlVmFsdWVCZWFucygpLnRvU3RyaW5nKCkKICAgICAgICAgICAgICAgICAgICB1bVJhdGVSZWZWYWx1ZSA9IHVtUmF0ZVJlZlZhbHVlLnN1YnN0cmluZyh1bVJhdGVSZWZWYWx1ZS5pbmRleE9mKCcoJykrMSx1bVJhdGVSZWZWYWx1ZS5pbmRleE9mKCcpJykpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmKHVtQXBwbGllZFRvVmFsdWUudG9TdHJpbmcoKS5lcXVhbHMoIkJPVEgiKSB8fCB1bUFwcGxpZWRUb1ZhbHVlLnRvU3RyaW5nKCkuZXF1YWxzKCJTVVBQTElFUiIpKXsKICAgICAgICAgICAgICAgICAgICAvL2dldCAiVE9UQUxfQU1PVU5UX1NVUFBMSUVSIiBmb3IgdGhhdCBjb21wb25lbnQKICAgICAgICAgICAgICAgICAgICBkZWYgdG90Q3VzdG9tZXIgPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4odW1SYXRlT2JqZWN0LmdldElkKCksIHByb3BlcnRpZXNbJ2lvYmoub25TaXRlUmF0ZVJlcG9ydC50b3RTdXBwbGllciddLnRvU3RyaW5nKCkpLmdldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnMoKQogICAgICAgICAgICAgICAgICAgIGlmKCF0b3RDdXN0b21lciB8fCB0b3RDdXN0b21lclswXS5nZXRWYWx1ZSgpLnRvU3RyaW5nKCkuZXF1YWxzKCIwLjAiKSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdzPXRydWUKICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ0VtcHR5UXVvdGVSYXRlQ3VzdG9tZXIuYWRkKHVtUmF0ZVJlZlZhbHVlLnRvU3RyaW5nKCkpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSAgICAKICAgICAgICB9CgogICAgICAgIC8vT1BBQV9MQUJPVVJfUkFURVMKICAgICAgICBpZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGxhYm91clJhdGVzKSE9bnVsbCAmJiAoU3RyaW5nKWlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUobGFib3VyUmF0ZXMpICE9ICIiICYmICFpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGxhYm91clJhdGVzKS50b1N0cmluZygpLmVxdWFscygiIikpewogICAgICAgICAgICBsb2cuZGVidWcgIkxhYm91ciByYXRlczogIiArIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUobGFib3VyUmF0ZXMpCiAgICAgICAgICAgIC8qQ2ljbGFyZSB0dXR0aSBnbGkgb2dnZXR0aSBhc3NvY2lhdGkgYWwgY2FtcG8qLwogICAgICAgICAgICAvL2luc2lnaHQgY2xhc3NlcyAmIGNvbXBvbmVudHMKICAgICAgICAgICAgQ2xhc3Mgb2JqZWN0RmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RGYWNhZGUiKTsgIAogICAgICAgICAgICBDbGFzcyBvYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlIik7CiAgICAgICAgICAgIGRlZiBvYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyk7CiAgICAgICAgICAgIGRlZiBvYmplY3RGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0RmFjYWRlQ2xhc3MpOwoKICAgICAgICAgICAgZGVmIGxhYm91clJhdGVzTGlzdCA9IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUobGFib3VyUmF0ZXMpCgogICAgICAgICAgICBmb3IobGIgaW4gbGFib3VyUmF0ZXNMaXN0KXsKICAgICAgICAgICAgICAgIC8vZXh0cmFjdCBpbnNpZ2h0IGtleSBhbmcgZ2V0IG9iamVjdAogICAgICAgICAgICAgICAgZGVmIGxiUmF0ZT1sYi50b1N0cmluZygpCiAgICAgICAgICAgICAgICBkZWYgbGJSYXRlS2V5ID0gbGJSYXRlLnN1YnN0cmluZyhsYlJhdGUuaW5kZXhPZignKCcpKzEsbGJSYXRlLmluZGV4T2YoJyknKSkKICAgICAgICAgICAgICAgIGRlZiBsYlJhdGVPYmplY3QgPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEJlYW4obGJSYXRlS2V5KQogICAgICAgICAgICAgICAgLy9nZXQgIkFQUExJRURfVE8iIGZvciB0aGF0IHJhdGUKICAgICAgICAgICAgICAgIGRlZiBsYkFwcGxpZWRUbyA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbihsYlJhdGVPYmplY3QuZ2V0SWQoKSwgcHJvcGVydGllc1snaW9iai5vblNpdGVSYXRlUmVwb3J0LmFwcGxpZWRUbyddLnRvU3RyaW5nKCkpLmdldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnMoKS50b1N0cmluZygpCiAgICAgICAgICAgICAgICBkZWYgbGJBcHBsaWVkVG9WYWx1ZSA9IGxiQXBwbGllZFRvLnN1YnN0cmluZyhsYkFwcGxpZWRUby5pbmRleE9mKCcoJykrMSxsYkFwcGxpZWRUby5pbmRleE9mKCcpJykpCgogICAgICAgICAgICAgICAgZGVmIGxiUmF0ZVJlZiA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbihsYlJhdGVPYmplY3QuZ2V0SWQoKSwgcHJvcGVydGllc1snaW9iai5vblNpdGVSYXRlUmVwb3J0LnJhdGVSZWYnXS50b1N0cmluZygpKS5nZXRPYmplY3RBdHRyaWJ1dGVWYWx1ZUJlYW5zKCkudG9TdHJpbmcoKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBkZWYgbGJSYXRlUmVmS2V5CiAgICAgICAgICAgICAgICBkZWYgbGJSYXRlUmVmVmFsdWUKICAgICAgICAgICAgICAgIGlmKGxiUmF0ZVJlZi5zaXplKCkgPiAwKXsKICAgICAgICAgICAgICAgICAgICBsYlJhdGVSZWYgPSBsYlJhdGVSZWYudG9TdHJpbmcoKQogICAgICAgICAgICAgICAgICAgIGxiUmF0ZVJlZktleSA9IGxiUmF0ZVJlZi5zdWJzdHJpbmcobGJSYXRlUmVmLmluZGV4T2YoJygnKSsxLGxiUmF0ZVJlZi5pbmRleE9mKCcpJykpCiAgICAgICAgICAgICAgICAgICAgZGVmIGxiUmF0ZVJlZk9iamVjdCA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QmVhbihPUEFBICsgbGJSYXRlUmVmS2V5KQogICAgICAgICAgICAgICAgICAgIGxiUmF0ZVJlZlZhbHVlID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKGxiUmF0ZVJlZk9iamVjdC5nZXRJZCgpLCBwcm9wZXJ0aWVzWydpb2JqLnJhdGUubmFtZSddLnRvU3RyaW5nKCkpLmdldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnMoKS50b1N0cmluZygpCiAgICAgICAgICAgICAgICAgICAgbGJSYXRlUmVmVmFsdWUgPSBsYlJhdGVSZWZWYWx1ZS5zdWJzdHJpbmcobGJSYXRlUmVmVmFsdWUuaW5kZXhPZignKCcpKzEsbGJSYXRlUmVmVmFsdWUuaW5kZXhPZignKScpKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAvKgogICAgICAgICAgICAgICAgZGVmIHRlY2hSZWYgPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4obGJSYXRlT2JqZWN0LmdldElkKCksICJURUNITklDSUFOX1JFRiIpLmdldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnMoKQogICAgICAgICAgICAgICAgZGVmIHRlY2hSZWZLZXkKICAgICAgICAgICAgICAgIGRlZiB0ZWNoUmVmVmFsdWUKICAgICAgICAgICAgICAgIGlmKHRlY2hSZWYuc2l6ZSgpID4gMCl7CiAgICAgICAgICAgICAgICAgICAgdGVjaFJlZiA9IHRlY2hSZWYudG9TdHJpbmcoKQogICAgICAgICAgICAgICAgICAgIHRlY2hSZWZLZXkgPSB0ZWNoUmVmLnN1YnN0cmluZyh0ZWNoUmVmLmluZGV4T2YoJygnKSsxLHRlY2hSZWYuaW5kZXhPZignKScpKQogICAgICAgICAgICAgICAgICAgIGRlZiB1bVJhdGVSZWZPYmplY3QgPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEJlYW4oT1BBQSArIHVtUmF0ZVJlZktleSkKICAgICAgICAgICAgICAgICAgICB0ZWNoUmVmVmFsdWUgPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4odGVjaFJlZk9iamVjdC5nZXRJZCgpLCAiTmFtZSIpLmdldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnMoKS50b1N0cmluZygpCiAgICAgICAgICAgICAgICAgICAgdGVjaFJlZlZhbHVlID0gdW1SYXRlUmVmVmFsdWUuc3Vic3RyaW5nKHRlY2hSZWZWYWx1ZS5pbmRleE9mKCcoJykrMSx0ZWNoUmVmVmFsdWUuaW5kZXhPZignKScpKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKi8KCiAgICAgICAgICAgICAgICBpZihsYkFwcGxpZWRUb1ZhbHVlLnRvU3RyaW5nKCkuZXF1YWxzKCJCT1RIIikgfHwgbGJBcHBsaWVkVG9WYWx1ZS50b1N0cmluZygpLmVxdWFscygiU1VQUExJRVIiKSl7CiAgICAgICAgICAgICAgICAgICAgLy9nZXQgIlRPVEFMX0FNT1VOVF9TVVBQTElFUiIgZm9yIHRoYXQgY29tcG9uZW50CiAgICAgICAgICAgICAgICAgICAgZGVmIHRvdEN1c3RvbWVyID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKGxiUmF0ZU9iamVjdC5nZXRJZCgpLCBwcm9wZXJ0aWVzWydpb2JqLm9uU2l0ZVJhdGVSZXBvcnQudG90U3VwcGxpZXInXS50b1N0cmluZygpKS5nZXRPYmplY3RBdHRyaWJ1dGVWYWx1ZUJlYW5zKCkKICAgICAgICAgICAgICAgICAgICBpZighdG90Q3VzdG9tZXIgfHwgdG90Q3VzdG9tZXJbMF0uZ2V0VmFsdWUoKS50b1N0cmluZygpLmVxdWFscygiMC4wIikpewogICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5ncz10cnVlCiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdFbXB0eVF1b3RlUmF0ZUN1c3RvbWVyLmFkZChsYlJhdGVSZWZWYWx1ZS50b1N0cmluZygpLyogKyAiICgiICsgdGVjaFJlZlZhbHVlLnRvU3RyaW5nKCkgKyAiKSIqLykKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9ICAgIAogICAgICAgIH0KCiAgICAgICAgLy9PUEFBX1RSQVZFTF9SQVRFUwogICAgICAgIGlmKGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUodHJhdmVsUmF0ZXMpIT1udWxsICYmIChTdHJpbmcpaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZSh0cmF2ZWxSYXRlcykgIT0gIiIgJiYgIWlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUodHJhdmVsUmF0ZXMpLnRvU3RyaW5nKCkuZXF1YWxzKCIiKSl7CiAgICAgICAgICAgIGxvZy5kZWJ1ZyAiVHJhdmVsIHJhdGVzOiAiICsgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZSh0cmF2ZWxSYXRlcykKICAgICAgICAgICAgLypDaWNsYXJlIHR1dHRpIGdsaSBvZ2dldHRpIGFzc29jaWF0aSBhbCBjYW1wbyovCiAgICAgICAgICAgIC8vaW5zaWdodCBjbGFzc2VzICYgY29tcG9uZW50cwogICAgICAgICAgICBDbGFzcyBvYmplY3RGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdEZhY2FkZSIpOyAgCiAgICAgICAgICAgIENsYXNzIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGUiKTsKICAgICAgICAgICAgZGVmIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZUNsYXNzKTsKICAgICAgICAgICAgZGVmIG9iamVjdEZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShvYmplY3RGYWNhZGVDbGFzcyk7CgogICAgICAgICAgICBkZWYgdHJhdmVsUmF0ZXNMaXN0ID0gaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZSh0cmF2ZWxSYXRlcykKCiAgICAgICAgICAgIGZvcih0ciBpbiB0cmF2ZWxSYXRlc0xpc3QpewogICAgICAgICAgICAgICAgLy9leHRyYWN0IGluc2lnaHQga2V5IGFuZyBnZXQgb2JqZWN0CiAgICAgICAgICAgICAgICBkZWYgdHJSYXRlPXRyLnRvU3RyaW5nKCkKICAgICAgICAgICAgICAgIGRlZiB0clJhdGVLZXkgPSB0clJhdGUuc3Vic3RyaW5nKHRyUmF0ZS5pbmRleE9mKCcoJykrMSx0clJhdGUuaW5kZXhPZignKScpKQogICAgICAgICAgICAgICAgZGVmIHRyUmF0ZU9iamVjdCA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QmVhbih0clJhdGVLZXkpCiAgICAgICAgICAgICAgICAvL2dldCAiQVBQTElFRF9UTyIgZm9yIHRoYXQgcmF0ZQogICAgICAgICAgICAgICAgZGVmIHRyQXBwbGllZFRvID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKHRyUmF0ZU9iamVjdC5nZXRJZCgpLCBwcm9wZXJ0aWVzWydpb2JqLm9uU2l0ZVJhdGVSZXBvcnQuYXBwbGllZFRvJ10udG9TdHJpbmcoKSkuZ2V0T2JqZWN0QXR0cmlidXRlVmFsdWVCZWFucygpLnRvU3RyaW5nKCkKICAgICAgICAgICAgICAgIGRlZiB0ckFwcGxpZWRUb1ZhbHVlID0gdHJBcHBsaWVkVG8uc3Vic3RyaW5nKHRyQXBwbGllZFRvLmluZGV4T2YoJygnKSsxLHRyQXBwbGllZFRvLmluZGV4T2YoJyknKSkKCiAgICAgICAgICAgICAgICBkZWYgdHJSYXRlUmVmID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKHRyUmF0ZU9iamVjdC5nZXRJZCgpLCBwcm9wZXJ0aWVzWydpb2JqLm9uU2l0ZVJhdGVSZXBvcnQucmF0ZVJlZiddLnRvU3RyaW5nKCkpLmdldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnMoKS50b1N0cmluZygpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGRlZiB0clJhdGVSZWZLZXkKICAgICAgICAgICAgICAgIGRlZiB0clJhdGVSZWZWYWx1ZQogICAgICAgICAgICAgICAgaWYodHJSYXRlUmVmLnNpemUoKSA+IDApewogICAgICAgICAgICAgICAgICAgIHRyUmF0ZVJlZiA9IHRyUmF0ZVJlZi50b1N0cmluZygpCiAgICAgICAgICAgICAgICAgICAgdHJSYXRlUmVmS2V5ID0gdHJSYXRlUmVmLnN1YnN0cmluZyh0clJhdGVSZWYuaW5kZXhPZignKCcpKzEsdHJSYXRlUmVmLmluZGV4T2YoJyknKSkKICAgICAgICAgICAgICAgICAgICBkZWYgdHJSYXRlUmVmT2JqZWN0ID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RCZWFuKE9QQUEgKyB0clJhdGVSZWZLZXkpCiAgICAgICAgICAgICAgICAgICAgdHJSYXRlUmVmVmFsdWUgPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4odHJSYXRlUmVmT2JqZWN0LmdldElkKCksIHByb3BlcnRpZXNbJ2lvYmoucmF0ZS5uYW1lJ10udG9TdHJpbmcoKSkuZ2V0T2JqZWN0QXR0cmlidXRlVmFsdWVCZWFucygpLnRvU3RyaW5nKCkKICAgICAgICAgICAgICAgICAgICB0clJhdGVSZWZWYWx1ZSA9IHRyUmF0ZVJlZlZhbHVlLnN1YnN0cmluZyh0clJhdGVSZWZWYWx1ZS5pbmRleE9mKCcoJykrMSx0clJhdGVSZWZWYWx1ZS5pbmRleE9mKCcpJykpCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYodHJBcHBsaWVkVG9WYWx1ZS50b1N0cmluZygpLmVxdWFscygiQk9USCIpIHx8IHRyQXBwbGllZFRvVmFsdWUudG9TdHJpbmcoKS5lcXVhbHMoIlNVUFBMSUVSIikpewogICAgICAgICAgICAgICAgICAgIC8vZ2V0ICJUT1RBTF9BTU9VTlRfU1VQUExJRVIiIGZvciB0aGF0IGNvbXBvbmVudAogICAgICAgICAgICAgICAgICAgIGRlZiB0b3RDdXN0b21lciA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbih0clJhdGVPYmplY3QuZ2V0SWQoKSwgcHJvcGVydGllc1snaW9iai5vblNpdGVSYXRlUmVwb3J0LnRvdFN1cHBsaWVyJ10udG9TdHJpbmcoKSkuZ2V0T2JqZWN0QXR0cmlidXRlVmFsdWVCZWFucygpCiAgICAgICAgICAgICAgICAgICAgaWYoIXRvdEN1c3RvbWVyIHx8IHRvdEN1c3RvbWVyWzBdLmdldFZhbHVlKCkudG9TdHJpbmcoKS5lcXVhbHMoIjAuMCIpKXsKICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ3M9dHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nRW1wdHlRdW90ZVJhdGVDdXN0b21lci5hZGQodHJSYXRlUmVmVmFsdWUudG9TdHJpbmcoKSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9ICAgIAogICAgICAgIH0KCiAgICB9CgoKICAgIGRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KCkKCiAgICBpZiAoIWVycm9ycyAmJiAhd2FybmluZ3MpewogICAgICAgIHJldHVybiB0cnVlCiAgICB9ZWxzZXsKICAgICAgICBpZighZXJyb3JzICYmIHdhcm5pbmdzKXsKICAgICAgICAgICAgLy9TZSBjaSBzb25vIHNvbG8gd2FybmluZ3MgdmVyaWZpY28gc2UgbCd1dGVudGUgaGEgZ2nDoCBkaWNoaWFyYXRvIGRpIHZvbGVyIHByb3NlZ3VpcmUgY29tdW5xdWUKICAgICAgICAgICAgLy8gLSB0cmFuc2l0aW9uIGZpZWxkICJPUEFBX0NIRUNLX0FORF9DT05GSVJNIj0iWWVzIgogICAgICAgICAgICAvLyAtIGluIGNhc28gY29udHJhcmlvIGludmlvIGkgd2FybmluZyBhIEZFCgogICAgICAgICAgICAvL2xvZy5kZWJ1ZyAidHJhbnNpdGlvbkNoZWNrOiAiICsgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZSh0cmFuc2l0aW9uQ2hlY2spCiAgICAgICAgICAgIC8vbG9nLmRlYnVnICJyZXN1bHQ6ICIgKyBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHRyYW5zaXRpb25DaGVjaykudG9TdHJpbmcoKS5lcXVhbHMoIlllcyIpCiAgICAgICAgICAgIGlmKGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUodHJhbnNpdGlvbkNoZWNrKS50b1N0cmluZygpLmVxdWFscygiWWVzIikpewogICAgICAgICAgICAgICAgLy9sb2cuZGVidWcgInJldHVybiB0cnVlIC0gdHJhbnNpdGlvbkNoZWNrID0gWWVzIgogICAgICAgICAgICAgICAgcmV0dXJuIHRydWUKICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICBkZWYgd0xpc3QgPSBuZXcgQXJyYXlMaXN0KCkKCiAgICAgICAgICAgICAgICBpZih3YXJuaW5nRW1wdHlRdW90ZVJhdGVDdXN0b21lci5zaXplKCkgPiAwKXsKICAgICAgICAgICAgICAgICAgICBkZWYgd0xpc3RDb25maXJtRW1wdHlSYXRlID0gbmV3IEFycmF5TGlzdCgpCiAgICAgICAgICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHlSYXRlLmFkZCgiVyIpCiAgICAgICAgICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHlSYXRlLmFkZCgiU1VQUExJRVJfQ09ORklSTV9FTVBUWV9SQVRFUyIpCiAgICAgICAgICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHlSYXRlLmFkZChudWxsKQogICAgICAgICAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5UmF0ZS5hZGQod2FybmluZ0VtcHR5UXVvdGVSYXRlQ3VzdG9tZXIpCgogICAgICAgICAgICAgICAgICAgIHdMaXN0LmFkZCh3TGlzdENvbmZpcm1FbXB0eVJhdGUpCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYod2FybmluZ0VtcHR5UXVvdGVNYXRDdXN0b21lci5zaXplKCkgPiAwKXsKICAgICAgICAgICAgICAgICAgICBkZWYgd0xpc3RDb25maXJtRW1wdHlNYXRRdW90ZSA9IG5ldyBBcnJheUxpc3QoKQogICAgICAgICAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5TWF0UXVvdGUuYWRkKCJXIikKICAgICAgICAgICAgICAgICAgICB3TGlzdENvbmZpcm1FbXB0eU1hdFF1b3RlLmFkZCgiU1VQUExJRVJfQ09ORklSTV9FTVBUWV9NQVRfUVVPVEUiKQogICAgICAgICAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5TWF0UXVvdGUuYWRkKG51bGwpCiAgICAgICAgICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHlNYXRRdW90ZS5hZGQod2FybmluZ0VtcHR5UXVvdGVNYXRDdXN0b21lcikKCiAgICAgICAgICAgICAgICAgICAgd0xpc3QuYWRkKHdMaXN0Q29uZmlybUVtcHR5TWF0UXVvdGUpCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgb3V0cHV0LmFkZCh3TGlzdCkKICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oJ3siVyI6IicgKyBvdXRwdXQudG9TdHJpbmcoKSArICcifScpCiAgICAgICAgICAgICAgICAvL3Rocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oIlciLCBvdXRwdXQudG9TdHJpbmcoKSkgICAKICAgICAgICAgICAgfQoKICAgICAgICB9CiAgICAgICAgaWYoZXJyb3JzICYmICF3YXJuaW5ncyl7CiAgICAgICAgICAgIGRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKQoKICAgICAgICAgICAgb3V0cHV0LmFkZChlTGlzdCkKICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigneyJFIjoiJyArIG91dHB1dC50b1N0cmluZygpICsgJyJ9JykKICAgICAgICAgICAgLy90aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCJFIiwgb3V0cHV0LnRvU3RyaW5nKCkpICAgCiAgICAgICAgfQogICAgICAgIGlmKGVycm9ycyAmJiB3YXJuaW5ncyl7CiAgICAgICAgICAgIGRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKQogICAgICAgICAgICBkZWYgd0xpc3QgPSBuZXcgQXJyYXlMaXN0KCkKCiAgICAgICAgICAgIGlmKHdhcm5pbmdFbXB0eVF1b3RlUmF0ZUN1c3RvbWVyLnNpemUoKSA+IDApewogICAgICAgICAgICAgICAgZGVmIHdMaXN0Q29uZmlybUVtcHR5UmF0ZSA9IG5ldyBBcnJheUxpc3QoKQogICAgICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHlSYXRlLmFkZCgiVyIpCiAgICAgICAgICAgICAgICB3TGlzdENvbmZpcm1FbXB0eVJhdGUuYWRkKCJTVVBQTElFUl9DT05GSVJNX0VNUFRZX1JBVEVTIikKICAgICAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5UmF0ZS5hZGQobnVsbCkKICAgICAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5UmF0ZS5hZGQod2FybmluZ0VtcHR5UXVvdGVSYXRlQ3VzdG9tZXIpCgogICAgICAgICAgICAgICAgd0xpc3QuYWRkKHdMaXN0Q29uZmlybUVtcHR5UmF0ZSkKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYod2FybmluZ0VtcHR5UXVvdGVNYXRDdXN0b21lci5zaXplKCkgPiAwKXsKICAgICAgICAgICAgICAgIGRlZiB3TGlzdENvbmZpcm1FbXB0eU1hdFF1b3RlID0gbmV3IEFycmF5TGlzdCgpCiAgICAgICAgICAgICAgICB3TGlzdENvbmZpcm1FbXB0eU1hdFF1b3RlLmFkZCgiVyIpCiAgICAgICAgICAgICAgICB3TGlzdENvbmZpcm1FbXB0eU1hdFF1b3RlLmFkZCgiU1VQUExJRVJfQ09ORklSTV9FTVBUWV9NQVRfUVVPVEUiKQogICAgICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHlNYXRRdW90ZS5hZGQobnVsbCkKICAgICAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5TWF0UXVvdGUuYWRkKHdhcm5pbmdFbXB0eVF1b3RlTWF0Q3VzdG9tZXIpCgogICAgICAgICAgICAgICAgd0xpc3QuYWRkKHdMaXN0Q29uZmlybUVtcHR5TWF0UXVvdGUpCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIG91dHB1dC5hZGQoZUxpc3QpCiAgICAgICAgICAgIG91dHB1dC5hZGQod0xpc3QpCiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oJ3siV0UiOiInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnIn0nKQogICAgICAgICAgICAvL3Rocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oIldFIiwgb3V0cHV0LnRvU3RyaW5nKCkpICAKICAgICAgICB9CiAgICB9Ci8vfWNhdGNoKEV4Y2VwdGlvbiBlKXsKLy8gICAgbG9nLmRlYnVnICJFeGNlcHRpb246ICIgKyBlCi8vICAgIHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oIkV4Y2VwdGlvbiIsIGUudG9TdHJpbmcoKSkgIAovL30K</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">689764320f82b76e3ae6c1de4019336fc58866cd</arg>
              <arg name="FIELD_NOTES">YCFgT1AgRW1haWwgTm90aWZpY2F0aW9uOiBQVVJDSEFTRV9PUkRFUl9UT19TVVBQTElFUg==</arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5NdXRhYmxlSXNzdWUKaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0OwppbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeQppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lcgppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGwKClByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKCkKRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJykKcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHsKCXByb3BlcnRpZXMubG9hZChpdCkKfQpDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQpsb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRykKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5saW5rLklzc3VlTGluawoKSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpOwpDdXN0b21GaWVsZE1hbmFnZXIgY3VzdG9tRmllbGRNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCk7CmRlZiByZXF1ZXN0TWV0aG9kCmRlZiBiYXNlVVJMCgpVUkwgdXJsCkh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24KCnJlcXVlc3RNZXRob2QgPSAiUE9TVCI7CgpkZWYgcmVsYXRlc0luSXNzdWVMaW5rPWZhbHNlCmRlZiByZWxhdGVzT3V0SXNzdWVMaW5rPWZhbHNlCmRlZiBsaW5rZWRUaWNrZXRzPW5ldyBBcnJheUxpc3QoKQoKTGlzdDxJc3N1ZUxpbms+IGFsbEluSXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldElud2FyZExpbmtzKGlzc3VlLmdldElkKCkpCmZvciAoSXRlcmF0b3I8SXNzdWVMaW5rPiBvdXRJdGVyYXRvciA9IGFsbEluSXNzdWVMaW5rLml0ZXJhdG9yKCk7IG91dEl0ZXJhdG9yLmhhc05leHQoKTspIHsKICAgIElzc3VlTGluayBpc3N1ZUxpbmsgPSAoSXNzdWVMaW5rKSBvdXRJdGVyYXRvci5uZXh0KCk7CgogICAgaWYoaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNSZWxhdGVzJ10udG9TdHJpbmcoKSkpewogICAgICAgIHJlbGF0ZXNJbklzc3VlTGluaz10cnVlCiAgICAgICAgbGlua2VkVGlja2V0cy5hZGQoaXNzdWVMaW5rLmdldFNvdXJjZU9iamVjdCgpKQogICAgICAgIGxvZy5kZWJ1ZyAiSXNzdWUgY29uIHJlbGF0ZXNJbklzc3VlTGluayIKICAgIH0KfQpMaXN0PElzc3VlTGluaz4gYWxsT3V0SXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldE91dHdhcmRMaW5rcyhpc3N1ZS5nZXRJZCgpKQpmb3IgKEl0ZXJhdG9yPElzc3VlTGluaz4gb3V0SXRlcmF0b3IgPSBhbGxPdXRJc3N1ZUxpbmsuaXRlcmF0b3IoKTsgb3V0SXRlcmF0b3IuaGFzTmV4dCgpOykgewogICAgSXNzdWVMaW5rIGlzc3VlTGluayA9IChJc3N1ZUxpbmspIG91dEl0ZXJhdG9yLm5leHQoKTsKCiAgICBpZihpc3N1ZUxpbmsuaXNzdWVMaW5rVHlwZS5nZXROYW1lKCkudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snaWwubGlua2VkVGt0c1JlbGF0ZXMnXS50b1N0cmluZygpKSl7CiAgICAgICAgcmVsYXRlc091dElzc3VlTGluaz10cnVlCiAgICAgICAgbGlua2VkVGlja2V0cy5hZGQoaXNzdWVMaW5rLmdldERlc3RpbmF0aW9uT2JqZWN0KCkpCiAgICAgICAgbG9nLmRlYnVnICJJc3N1ZSBjb24gcmVsYXRlc091dElzc3VlTGluayIKICAgIH0KfQoKZGVmIGJvZHlfcmVxID0gW10KCmlmKHJlbGF0ZXNJbklzc3VlTGluayB8fCByZWxhdGVzT3V0SXNzdWVMaW5rKXsKICAgIGJvZHlfcmVxID0gWwogICAgICAgICJ0ZW1wbGF0ZU5hbWUiOiBwcm9wZXJ0aWVzWyd0dC5wdXJjaGFzZU9yZGVyVG9TJ10udG9TdHJpbmcoKSwKICAgICAgICAicGVjIjogZmFsc2UsCiAgICAgICAgImlzc3VlS2V5IjogaXNzdWUua2V5LAogICAgICAgICJsaW5rZWRUaWNrZXRzIjogbGlua2VkVGlja2V0cwogICAgXSAgICAKfWVsc2V7CiAgICBib2R5X3JlcSA9IFsKICAgICAgICAidGVtcGxhdGVOYW1lIjogcHJvcGVydGllc1sndHQucHVyY2hhc2VPcmRlclRvUyddLnRvU3RyaW5nKCksCiAgICAgICAgInBlYyI6IGZhbHNlLAogICAgICAgICJpc3N1ZUtleSI6IGlzc3VlLmtleQogICAgXSAKfQoKYmFzZVVSTCA9ICJodHRwOi8vIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgIi9vcC9yZXN0L2ppcmEvQUEvdHJhbnNhY3Rpb24vbWFpbC9zZW5kIgp1cmwgPSBuZXcgVVJMKGJhc2VVUkwpCmNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7CmNvbm5lY3Rpb24uc2V0UmVxdWVzdE1ldGhvZChyZXF1ZXN0TWV0aG9kKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoIkNvbnRlbnQtVHlwZSIsICJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLTgiKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoIkFjY2VwdCIsICIqLyoiKTsKY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTsKY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpOwpjb25uZWN0aW9uLm91dHB1dFN0cmVhbQpjb25uZWN0aW9uLm91dHB1dFN0cmVhbS53aXRoV3JpdGVyKCJVVEYtOCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfQpsb2cuZGVidWcgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0KY29ubmVjdGlvbi5jb25uZWN0KCk7CgpkZWYgb3V0cHV0ID0gbmV3IEFycmF5TGlzdCgpCmRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKQpkZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIGVycm9yTXNncyA9IG5ldyBBcnJheUxpc3QoKQoKaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKCIyMDAiKSl7CiAgICBsb2cuZGVidWcgInVybDogIiArIHVybAogICAgbG9nLmRlYnVnICJSZXNwb25zZUNvZGU6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkKICAgIGxvZy5kZWJ1ZyAiUmVzcG9uc2VNZXNzYWdlOiIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpCiAgICBlTGlzdEVycm9ycy5hZGQoIkUiKQogICAgZUxpc3RFcnJvcnMuYWRkKCJTRU5ETUFJTCIpCiAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyAiICIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpKQogICAgZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncykKICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycykKCiAgICBvdXRwdXQuYWRkKGVMaXN0KQogICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigneyJFIjoiJyArIG91dHB1dC50b1N0cmluZygpICsgJyJ9JykKICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigiRSIsIG91dHB1dC50b1N0cmluZygpKQp9</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="221" name="Invia Mail Rapporto di Intervento" view="fieldscreen">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19912</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_NOTES">YCFgT1A6IElmIHN0YXR1cz1DT01QTEVURUQgVE8gQkUgQ0xPU0VEICYmIE9OU0lURV9SRVBPUlQgPSBudWxsIC0gTm90aWZpY2F0aW9uIGhhcyBub3QgYmVlbiBzZW50</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KY2ZWYWx1ZXNbcHJvcGVydGllc1snY2Yud2ZPbnNpdGVSZXBvcnQnXV0gPT0gbnVsbHx8fA==</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
              <condition type="class">
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ01haW50ZW5hbmNlIFRpY2tldCd8fHw=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">dcec49d7a2f27ae7f5e1c9874ad28f99eb5fde33</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IGxpbmtlZFRpY2tldHMhPW51bGwgPT4gQ2hlY2sgd2l0aCB1c2VyIHRoZSByZXF1aXJlZCBFbWFpbCBSZWNpcGllbnRz</arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZQppbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb24KaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3IKaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGdyb292eS5qc29uLkpzb25CdWlsZGVyCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUubGluay5Jc3N1ZUxpbmsKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KZGVmIENhdGVnb3J5IGxvZyA9IENhdGVnb3J5LmdldEluc3RhbmNlKCJjb20ub25yZXNvbHZlLmppcmEuZ3Jvb3Z5LlBvc3RGdW5jdGlvbiIpCmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKQoKSXNzdWUgaXNzdWUgPSBpc3N1ZQoKZGVmIGZpZWxkc1JlcXVpcmVkID0gZmFsc2UKZGVmIGF1dG9tYXRpY2FsbHlDbG9zZWQgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLmF1dG9tYXRpY2FsbHlDbG9zZWQnXS50b1N0cmluZygpKVswXQpkZWYgc2VuZE1haWxUbyA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2Yuc2VuZE1haWxUb0xpbmtlZCddLnRvU3RyaW5nKCkpWzBdCmRlZiByZXF1aXJlZEZpZWxkcyA9IG5ldyBBcnJheUxpc3QoKQpkZWYgcmVsYXRlc0luSXNzdWVMaW5rPWZhbHNlCmRlZiByZWxhdGVzT3V0SXNzdWVMaW5rPWZhbHNlCgovKk9QLTEwMzg6IENoaWVkbyBhbGwndXRlbnRlIHNlIGUgYSBjaGkgdnVvbGUgaW52aWFyZSBsYSBub3RpZmljYSBkZWwgcmFwcG9ydG8gZGkgaW50ZXJ2ZW50byBjaGUgdmVycsOgIGdlbmVyYXRvLgpMbyBjaGllZG8gc29sbyBzZSBpbCB0aWNrZXQgc3UgY3VpIHN0byBlc2VndWVuZG8gbGEgdHJhbnNhemlvbmUgbm9uIMOoIHN0YXRvIGNoaXVzbyBpbiBhdXRvbWF0aWNvIGRhbCBzaXN0ZW1hIGUgc29sbyBzZSBub24gZ2xpIGVyYSBnacOgIHN0YXRvIGNoaWVzdG8gcHJpbWEqLwpsb2cuZGVidWcgImlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoYXV0b21hdGljYWxseUNsb3NlZCk6ICIgKyBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGF1dG9tYXRpY2FsbHlDbG9zZWQpCmxvZy5kZWJ1ZyAiaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzZW5kTWFpbFRvKTogIiArIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc2VuZE1haWxUbykKbG9nLmRlYnVnICJ0cmFuc2llbnRWYXJzOiAiICsgdHJhbnNpZW50VmFycwpsb2cuZGVidWcgImlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc2VuZE1haWxUbykudG9TdHJpbmcoKTogIiArIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc2VuZE1haWxUbykudG9TdHJpbmcoKQoKTGlzdDxJc3N1ZUxpbms+IGFsbEluSXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldElud2FyZExpbmtzKGlzc3VlLmdldElkKCkpCmZvciAoSXRlcmF0b3I8SXNzdWVMaW5rPiBvdXRJdGVyYXRvciA9IGFsbEluSXNzdWVMaW5rLml0ZXJhdG9yKCk7IG91dEl0ZXJhdG9yLmhhc05leHQoKTspIHsKICAgIElzc3VlTGluayBpc3N1ZUxpbmsgPSAoSXNzdWVMaW5rKSBvdXRJdGVyYXRvci5uZXh0KCk7CiAgICAKICAgIGlmKGlzc3VlTGluay5pc3N1ZUxpbmtUeXBlLmdldE5hbWUoKS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpbC5saW5rZWRUa3RzUmVsYXRlcyddLnRvU3RyaW5nKCkpKXsKCQlyZWxhdGVzSW5Jc3N1ZUxpbms9dHJ1ZQogICAgICAgIGxvZy5kZWJ1ZyAiSXNzdWUgY29uIHJlbGF0ZXNJbklzc3VlTGluayIKICAgICAgICBicmVhawogICAgfQp9Ckxpc3Q8SXNzdWVMaW5rPiBhbGxPdXRJc3N1ZUxpbmsgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZUxpbmtNYW5hZ2VyKCkuZ2V0T3V0d2FyZExpbmtzKGlzc3VlLmdldElkKCkpCmZvciAoSXRlcmF0b3I8SXNzdWVMaW5rPiBvdXRJdGVyYXRvciA9IGFsbE91dElzc3VlTGluay5pdGVyYXRvcigpOyBvdXRJdGVyYXRvci5oYXNOZXh0KCk7KSB7CiAgICBJc3N1ZUxpbmsgaXNzdWVMaW5rID0gKElzc3VlTGluaykgb3V0SXRlcmF0b3IubmV4dCgpOwogICAgCiAgICBpZihpc3N1ZUxpbmsuaXNzdWVMaW5rVHlwZS5nZXROYW1lKCkudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snaWwubGlua2VkVGt0c1JlbGF0ZXMnXS50b1N0cmluZygpKSl7CgkJcmVsYXRlc091dElzc3VlTGluaz10cnVlCiAgICAgICAgbG9nLmRlYnVnICJJc3N1ZSBjb24gcmVsYXRlc091dElzc3VlTGluayIKICAgICAgICBicmVhawogICAgfQp9Cgpsb2cuZGVidWcgaXNzdWUua2V5ICsgIiAocmVsYXRlc0luSXNzdWVMaW5rIHx8IHJlbGF0ZXNPdXRJc3N1ZUxpbmspOiAiICsgKHJlbGF0ZXNJbklzc3VlTGluayB8fCByZWxhdGVzT3V0SXNzdWVMaW5rKQpsb2cuZGVidWcgaXNzdWUua2V5ICsgIiAoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q2xvc2VkKSAiICsgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q2xvc2VkKQpsb2cuZGVidWcgaXNzdWUua2V5ICsgIiBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHNlbmRNYWlsVG8pPT1udWxsICIgKyAoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzZW5kTWFpbFRvKT09bnVsbCkKCmlmKChyZWxhdGVzSW5Jc3N1ZUxpbmsgfHwgcmVsYXRlc091dElzc3VlTGluaykgLyomJiAoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q2xvc2VkKT09bnVsbCB8fCAhaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q2xvc2VkKS50b1N0cmluZygpLmVxdWFscygiWWVzIikpKi8gJiYgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzZW5kTWFpbFRvKT09bnVsbCl7CglmaWVsZHNSZXF1aXJlZCA9IHRydWUKCXJlcXVpcmVkRmllbGRzLmFkZChwcm9wZXJ0aWVzWydjZi5zZW5kTWFpbFRvTGlua2VkJ10udG9TdHJpbmcoKSkKfQoKbG9nLmRlYnVnICJGaWVsZHNSZXF1aXJlZDogIiArIGZpZWxkc1JlcXVpcmVkCmRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KCkKCmlmKGZpZWxkc1JlcXVpcmVkKXsKCWRlZiBmTGlzdCA9IG5ldyBBcnJheUxpc3QoKQoKICAgICAgICBpZihyZXF1aXJlZEZpZWxkcy5zaXplKCkgPiAwKXsKICAgICAgICAJZGVmIGZMaXN0RGV0YWlsID0gbmV3IEFycmF5TGlzdCgpCiAgICAgICAgICAgICAgICBmTGlzdERldGFpbC5hZGQoIkYiKQogICAgICAgICAgICAgICAgZkxpc3REZXRhaWwuYWRkKCJVU0VSX0lOUFVUIikKICAgICAgICAgICAgCWZMaXN0RGV0YWlsLmFkZChudWxsKQogICAgICAgICAgICAgICAgZkxpc3REZXRhaWwuYWRkKHJlcXVpcmVkRmllbGRzKQogICAgICAgICAgICAgICAgZkxpc3QuYWRkKGZMaXN0RGV0YWlsKQogICAgICAgIH0KCiAgICAgICAgb3V0cHV0LmFkZChmTGlzdCkKICAgIAl0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7IkYiOiInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnIn0nKQogICAgICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigiRiIsIG91dHB1dC50b1N0cmluZygpKSAgIAp9ZWxzZXsKICAgIHJldHVybiB0cnVlCn0=</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">732b852fe810d140fc2df432e5e30b7a3bed81cc</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBPUCBFbWFpbCBOb3RpZmljYXRpb246IE9OU0lURV9SRVBPUlQ=</arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="6">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="append.value"></arg>
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="field.name">customfield_22641</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="7" name="Closed">
      <meta name="jira.status.id">6</meta>
      <actions>
        <action id="231" name="Genera Offerta per Materiali da Preventivare">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_NOTES">YCFgT1A6IEdlbmVyYXppb25lIHRpY2tldCBkaSBwcmV2ZW50aXZhemlvbmUgLSBzb2xvIHNlIGNpIHNvbm8gT1BfUkVRVUlSRURfTUFURVJJQUxTIGUgc2UgT1BBQV9RVU9URV9USUNLRVQgPSBudWxs</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KY2ZWYWx1ZXNbcHJvcGVydGllc1snY2YucmVxdWlyZWRNYXRlcmlhbHMnXV0gIT0gbnVsbCAmJiBjZlZhbHVlc1twcm9wZXJ0aWVzWydjZi5vZmZlckxpbmtlZElzc3VlJ11dID09IG51bGx8fHw=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="7">
              <post-functions>
                <function type="class">
                  <arg name="field.copyFieldSource3">customfield_22601</arg>
                  <arg name="field.copyFieldSource2">customfield_22600</arg>
                  <arg name="field.copyFieldSource1">customfield_22609</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="field.copyFieldSource9"></arg>
                  <arg name="field.copyFieldSource8">customfield_22607</arg>
                  <arg name="field.copyFieldSource7">customfield_22700</arg>
                  <arg name="field.copyFieldSource6">customfield_22651</arg>
                  <arg name="field.copyFieldSource5">customfield_22662</arg>
                  <arg name="field.copyFieldSource4">customfield_22602</arg>
                  <arg name="field.issuePriorityId">0</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_ASSIGNEE</arg>
                  <arg name="targetProjectSelectedCustomField"></arg>
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10500:INWARD</arg>
                  <arg name="field.enablingCustomFieldId">customfield_22609</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                  <arg name="field.createTargetValue8"></arg>
                  <arg name="field.existingAttachmentEnablingCustomFieldId"></arg>
                  <arg name="targetIssueTypeDefinedByCfSelection"></arg>
                  <arg name="field.createTargetValue1"></arg>
                  <arg name="field.copyFieldMode2">OVERWRITE</arg>
                  <arg name="field.originIssue_copyFieldSource1"></arg>
                  <arg name="field.copyFieldMode3">OVERWRITE</arg>
                  <arg name="field.createTargetValue3"></arg>
                  <arg name="field.copyFieldMode1">OVERWRITE</arg>
                  <arg name="field.createTargetValue2"></arg>
                  <arg name="field.copyFieldSeparator8"></arg>
                  <arg name="field.createTargetValue5"></arg>
                  <arg name="field.copyFieldSeparator7"></arg>
                  <arg name="field.createTargetValue4"></arg>
                  <arg name="field.copyFieldSeparator6"></arg>
                  <arg name="field.copyFieldSeparator5"></arg>
                  <arg name="field.createTargetValue7"></arg>
                  <arg name="field.copyFieldSeparator4"></arg>
                  <arg name="field.createTargetValue6"></arg>
                  <arg name="field.copyFieldDestination1">customfield_22658</arg>
                  <arg name="field.copyFieldDestination2">customfield_22600</arg>
                  <arg name="issueTypeId">13001</arg>
                  <arg name="field.copyFieldDestination3">customfield_22601</arg>
                  <arg name="field.copyFieldDestination4">customfield_22602</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="field.attachmentEnablingCustomFieldId"></arg>
                  <arg name="field.copyFieldDestination5">customfield_22662</arg>
                  <arg name="field.copyFieldDestination6">customfield_22651</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="field.copyFieldDestination7">customfield_22700</arg>
                  <arg name="field.copyFieldDestination8">customfield_22607</arg>
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="targetProjectType">SAME</arg>
                  <arg name="transitionAttachmentsOperation">copy</arg>
                  <arg name="field.copyFieldSeparator3"></arg>
                  <arg name="field.copyFieldSeparator2"></arg>
                  <arg name="field.copyFieldSeparator1"></arg>
                  <arg name="field.copyFieldMode8">OVERWRITE</arg>
                  <arg name="field.copyFieldMode6">OVERWRITE</arg>
                  <arg name="field.copyFieldMode7">OVERWRITE</arg>
                  <arg name="field.copyFieldMode4">OVERWRITE</arg>
                  <arg name="field.copyFieldMode5">OVERWRITE</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="scopeDestination-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">4fd7d272cffa1401b740b9188cdaeaaf5185c323</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IFNldCBPUF9PRkZFUl9US1Q9WWVzIG9uIGp1c3QgY3JlYXRlZCBsaW5rZWRJc3N1ZQ==</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZQppbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb24KaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3IKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXIKaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGdyb292eS5qc29uLkpzb25CdWlsZGVyCmltcG9ydCBncm9vdnkuanNvbi5Kc29uU2x1cnBlcgppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXIKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb25maWcudXRpbC5KaXJhSG9tZQppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmV2ZW50LnR5cGUuRXZlbnREaXNwYXRjaE9wdGlvbgppbXBvcnQgamF2YS50ZXh0LlNpbXBsZURhdGVGb3JtYXQKaW1wb3J0IGphdmEudGV4dC5QYXJzZUV4Y2VwdGlvbgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbmZpZy5wcm9wZXJ0aWVzLkFQS2V5cwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuTGlua0NvbGxlY3Rpb25JbXBsOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuSXNzdWVMaW5rOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk1vZGlmaWVkVmFsdWUKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS51dGlsLkRlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlcgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmluZGV4Lklzc3VlSW5kZXhpbmdTZXJ2aWNlCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbAoKUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKQpGaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKQpwcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0gewoJcHJvcGVydGllcy5sb2FkKGl0KQp9CmRlZiBDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQpsb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRykKSXNzdWVJbmRleGluZ1NlcnZpY2UgCWlzc3VlSW5kZXhpbmdTZXJ2aWNlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q29tcG9uZW50KElzc3VlSW5kZXhpbmdTZXJ2aWNlKQoKLypTY3JpcHQgVmFyaWFibGVzKi8KLy9QZXIgUG9zdCBGdW5jdGlvbgppc3N1ZSA9IGlzc3VlCi8vUGVyIHRlc3QgZGEgY29uc29sZQovL0lzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKQovL2lzc3VlID0gaXNzdWVNYW5hZ2VyLmdldElzc3VlQnlLZXlJZ25vcmVDYXNlKCJPUFVULTI1NyIpCmxvZy5kZWJ1ZyAiSXNzdWU6ICIgKyBpc3N1ZQpkZWYgZm91bmQ9ZmFsc2UKZGVmIGxpbmtlZElzc3VlCmRlZiBpc3N1ZVNlcnZpY2UgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZVNlcnZpY2UoKQoKTGlzdDxJc3N1ZUxpbms+IGFsbEluSXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldElud2FyZExpbmtzKGlzc3VlLmdldElkKCkpOwpsb2cuZGVidWcgImFsbEluSXNzdWVMaW5rOiAiICsgYWxsSW5Jc3N1ZUxpbmsKZm9yIChJdGVyYXRvcjxJc3N1ZUxpbms+IG91dEl0ZXJhdG9yID0gYWxsSW5Jc3N1ZUxpbmsuaXRlcmF0b3IoKTsgb3V0SXRlcmF0b3IuaGFzTmV4dCgpOykgewogICAgSXNzdWVMaW5rIGlzc3VlTGluayA9IChJc3N1ZUxpbmspIG91dEl0ZXJhdG9yLm5leHQoKTsKICAgIGRlZiBsaW5rZWRJc3N1ZVRlbXAgPSBpc3N1ZUxpbmsuZ2V0U291cmNlT2JqZWN0KCkKICAgIFN0cmluZyB0eXBlID0gbGlua2VkSXNzdWVUZW1wLmdldElzc3VlVHlwZSgpLmdldE5hbWUoKTsKCiAgICBsb2cuZGVidWcoaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpKSAKICAgIAogICAgaWYoaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNUcmlnZ2VyJ10udG9TdHJpbmcoKSkpewogICAgICAgIGZvdW5kPXRydWUKICAgICAgICBsaW5rZWRJc3N1ZT1saW5rZWRJc3N1ZVRlbXAKICAgIH0KfQpsb2cuZGVidWcgImZvdW5kOiAiICsgZm91bmQKCmlmKGZvdW5kKXsKCWRlZiBkZXN0U3RhdHVzT2JqZWN0ID0gbGlua2VkSXNzdWUuZ2V0U3RhdHVzT2JqZWN0KCkKICAgIGxvZy5kZWJ1ZyAiZGVzdFN0YXR1c09iamVjdDogIiArIGRlc3RTdGF0dXNPYmplY3QKICAgIGxvZy5kZWJ1ZyAibGlua2VkSXNzdWU6ICIgKyBsaW5rZWRJc3N1ZQogICAgZGVmIHVzZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRKaXJhQXV0aGVudGljYXRpb25Db250ZXh0KCkuZ2V0TG9nZ2VkSW5Vc2VyKCkKCS8vIElzIHRoZSBzdGF0dXMgb2YgdGhlIGxpbmtlZCBpc3N1ZSAiSW5zdGFsbGluZyIgPwogICAgCiAgICBkZWYgY3VzdG9tRmllbGRNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuY3VzdG9tRmllbGRNYW5hZ2VyCiAgICBkZWYgb2ZmZXJJc3N1ZUZpZWxkID0gY3VzdG9tRmllbGRNYW5hZ2VyLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi5vZmZlckxpbmtlZElzc3VlJ10udG9TdHJpbmcoKSkuZmlyc3QoKQogICAgZGVmIG1haW50ZW5hbmNlSXNzdWVGaWVsZCA9IGN1c3RvbUZpZWxkTWFuYWdlci5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YubWFpbnRlbmFuY2VMaW5rZWRJc3N1ZSddID8gcHJvcGVydGllc1snY2YubWFpbnRlbmFuY2VMaW5rZWRJc3N1ZSddLnRvU3RyaW5nKCkgOiAiT1BfTUFJTlRFTkFOQ0VfTElOS0VEX0lTU1VFIikuZmlyc3QoKQogICAgZGVmIG9mZmVySXNzdWVCb29sRmllbGQgPSBjdXN0b21GaWVsZE1hbmFnZXIuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLm9mZmVyVGt0J10udG9TdHJpbmcoKSkuZmlyc3QoKQogICAgCiAgICAvL1NldCBPUEFBX09GRkVSX1RLVD1ZZXMgb24ganVzdCBjcmVhdGVkIGxpbmtlZElzc3VlCiAgICBkZWYgY3VycmVudFVzZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRKaXJhQXV0aGVudGljYXRpb25Db250ZXh0KCkuZ2V0TG9nZ2VkSW5Vc2VyKCkKICAgIGRlZiBtaSA9IChNdXRhYmxlSXNzdWUpIGxpbmtlZElzc3VlCgogICAgZGVmIGZpZWxkQ29uZmlnID0gb2ZmZXJJc3N1ZUJvb2xGaWVsZC5nZXRSZWxldmFudENvbmZpZyhsaW5rZWRJc3N1ZSkKICAgIGxvZy53YXJuICJmaWVsZENvbmZpZzogIiArIGZpZWxkQ29uZmlnCiAgICBkZWYgY2ZOZXdWYWx1ZSA9IENvbXBvbmVudEFjY2Vzc29yLm9wdGlvbnNNYW5hZ2VyLmdldE9wdGlvbnMoZmllbGRDb25maWcpPy5maW5kIHsgaXQudG9TdHJpbmcoKSA9PSAiWWVzIiB9CiAgICBvZmZlcklzc3VlQm9vbEZpZWxkLnVwZGF0ZVZhbHVlKG51bGwsIGxpbmtlZElzc3VlLCBuZXcgTW9kaWZpZWRWYWx1ZShsaW5rZWRJc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKG9mZmVySXNzdWVCb29sRmllbGQpLCBjZk5ld1ZhbHVlKSwgbmV3IERlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlcigpKQoJbWFpbnRlbmFuY2VJc3N1ZUZpZWxkLnVwZGF0ZVZhbHVlKG51bGwsIGxpbmtlZElzc3VlLCBuZXcgTW9kaWZpZWRWYWx1ZShsaW5rZWRJc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKG1haW50ZW5hbmNlSXNzdWVGaWVsZCksIGlzc3VlLmtleS50b1N0cmluZygpKSwgbmV3IERlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlcigpKQogICAgCiAgICBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKS51cGRhdGVJc3N1ZShjdXJyZW50VXNlciwgbWksIEV2ZW50RGlzcGF0Y2hPcHRpb24uRE9fTk9UX0RJU1BBVENILCBmYWxzZSk7CiAgICBpc3N1ZUluZGV4aW5nU2VydmljZS5yZUluZGV4KGxpbmtlZElzc3VlKSAgICAKICAgIAogICAgbG9nLmRlYnVnICJvZmZlcklzc3VlRmllbGQ6ICIgKyBvZmZlcklzc3VlRmllbGQKICAgIGxvZy5kZWJ1ZyAibGlua2VkSXNzdWU6ICIgKyBsaW5rZWRJc3N1ZQogICAgb2ZmZXJJc3N1ZUZpZWxkLnVwZGF0ZVZhbHVlKG51bGwsIGlzc3VlLCBuZXcgTW9kaWZpZWRWYWx1ZShpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKG9mZmVySXNzdWVGaWVsZCksIGxpbmtlZElzc3VlLmtleS50b1N0cmluZygpKSwgbmV3IERlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlcigpKQogICAgbG9nLmRlYnVnICJ1cGRhdGVkOiAiICsgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShvZmZlcklzc3VlRmllbGQpCiAgICAKICAgIGlmIChkZXN0U3RhdHVzT2JqZWN0Lm5hbWUgPT0gcHJvcGVydGllc1snd2Yub3BlbiddLnRvU3RyaW5nKCkpIHsKICAgICAgICAvLyBQcmVwYXJlIG91ciBpbnB1dCBmb3IgdGhlIHRyYW5zaXRpb24KICAgICAgICBkZWYgaXNzdWVJbnB1dFBhcmFtZXRlcnMgPSBpc3N1ZVNlcnZpY2UubmV3SXNzdWVJbnB1dFBhcmFtZXRlcnMoKQogICAgICAgIGlzc3VlSW5wdXRQYXJhbWV0ZXJzLndpdGggewogICAgICAgICAgICBzZXRTa2lwU2NyZWVuQ2hlY2sodHJ1ZSkKICAgICAgICB9CiAgICAgICAgLy8gVmFsaWRhdGUgdHJhbnNpdGlvbmluZyB0aGUgbGlua2VkIGlzc3VlIHRvICJTaWducyBOZWVkZWQiCiAgICAgICAgZGVmIHZhbGlkYXRpb25SZXN1bHQgPSBpc3N1ZVNlcnZpY2UudmFsaWRhdGVUcmFuc2l0aW9uKHVzZXIsIGxpbmtlZElzc3VlLmlkLCAocHJvcGVydGllc1snd2YudHIuYXNrUXVvdGUnXSA/IHByb3BlcnRpZXNbJ3dmLnRyLmFza1F1b3RlJ10udG9JbnRlZ2VyKCkgOiAxMSksIGlzc3VlSW5wdXRQYXJhbWV0ZXJzKQogICAgICAgIGlmICh2YWxpZGF0aW9uUmVzdWx0LmlzVmFsaWQoKSkgewogICAgICAgICAgICAvLyBQZXJmb3JtIHRoZSB0cmFuc2l0aW9uCiAgICAgICAgICAgIGRlZiBpc3N1ZVJlc3VsdCA9IGlzc3VlU2VydmljZS50cmFuc2l0aW9uKHVzZXIsIHZhbGlkYXRpb25SZXN1bHQpCiAgICAgICAgICAgIGlmICghIGlzc3VlUmVzdWx0LmlzVmFsaWQoKSkgewogICAgICAgICAgICAgICAgbG9nLmRlYnVnKCJGYWlsZWQgdG8gdHJhbnNpdGlvbiB0YXNrICR7ZGVzdElzc3VlLmtleX0sIGVycm9yczogJHtpc3N1ZVJlc3VsdC5lcnJvckNvbGxlY3Rpb259IikKICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICBsb2cuZGVidWcoIlRyYW5zYXppb25lIGZhdHRhIikKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGxvZy5kZWJ1ZygiQ291bGQgbm90IHRyYW5zaXRpb24gdGFzayAke2Rlc3RJc3N1ZS5rZXl9LCBlcnJvcnM6ICR7dmFsaWRhdGlvblJlc3VsdC5lcnJvckNvbGxlY3Rpb259IikKICAgICAgICB9CiAgICB9CiAgICAKfQ==</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="241" name="Riapri Tkt">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_NOTES">YCFgT1A6IE9QQUFfU0FMRVNfT1JERVJfREFURSBhbmQgT1BBQV9QVVJDSEFTRV9PUkRFUl9EQVRFIHNob3VsZCBiZSBudWxsIGluIG9yZGVyIHRvIHJlb3BlbiB0aGUgdGlja2V0IC0gb3RoZXJ3aXNlIHRoZSB0aWNrZXQgaGFzIGFscmVhZHkgYmVlbiBhY2NvdW50ZWQgc28gaXQgY2Fubm90IGJlIHJlb3BlbmVk</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgY2ZWYWx1ZXNbJ09QX1NBTEVTX09SREVSX0RBVEUnXSA9PSBudWxsICYmIGNmVmFsdWVzWydPUF9QVVJDSEFTRV9PUkRFUl9EQVRFJ10gPT0gbnVsbHx8fA==</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="6">
              <post-functions>
                <function type="class">
                  <arg name="field">customfield_22693</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">resolution</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="8" name="To be Quoted">
      <meta name="jira.status.id">14331</meta>
      <actions>
        <action id="251" name="Richiedi Preventivo a Fornitore" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19913</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">38c5effd94ec08c894a28a7995b3e38d8a3edc57</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlcXVpcmVkIEZpZWxkcw==</arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="9">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">YCFgT1A6IFZhbG9yaXp6YXppb25lIGxpc3RpbmkgZm9ybml0b3Jl</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmluZGV4Lklzc3VlSW5kZXhpbmdTZXJ2aWNlCmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuZXZlbnQudHlwZS5FdmVudERpc3BhdGNoT3B0aW9uCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUudXRpbC5EZWZhdWx0SXNzdWVDaGFuZ2VIb2xkZXIKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Nb2RpZmllZFZhbHVlCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuaW5kZXguSXNzdWVJbmRleGluZ1NlcnZpY2UKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KQ2F0ZWdvcnkgbG9nID0gQ2F0ZWdvcnkuZ2V0SW5zdGFuY2UoImNvbS5vbnJlc29sdmUuamlyYS5ncm9vdnkuUG9zdEZ1bmN0aW9uIikKbG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpCgpJc3N1ZU1hbmFnZXIgaXNzdWVNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKCk7CkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTsKCklzc3VlSW5kZXhpbmdTZXJ2aWNlIAlpc3N1ZUluZGV4aW5nU2VydmljZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldENvbXBvbmVudChJc3N1ZUluZGV4aW5nU2VydmljZSkKCmRlZiByZXF1ZXN0TWV0aG9kCmRlZiBiYXNlVVJMCgpsb2cuZGVidWcgIlZhbG9yaXp6YXppb25lIGxpc3RpbmkiCgovKiBSRVNUIEFQSSBwZXIgQ29udGFiaWxpenphemlvbmUgSW50ZXJ2ZW50byAqLwpyZXF1ZXN0TWV0aG9kID0gIkdFVCI7CgpiYXNlVVJMID0gImh0dHA6Ly8iICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyAiL29wL3Jlc3QvQUEvdGlja2V0L2lzc3VlS2V5LyIgKyBpc3N1ZS5rZXkudG9TdHJpbmcoKSArICIvY2xvc2U/cG9wdWxhdGVSYXRlcz1mYWxzZSZtYXRlcmlhbEF0dHJpYnV0ZT0iICsgcHJvcGVydGllc1snY2YucXVvdGVNYXRlcmlhbHMnXS50b1N0cmluZygpCmxvZy5kZWJ1ZyAiYmFzZVVybDogIiArIGJhc2VVUkwKCi8qRGVmaW5pcmUgcGFyYW1ldHJvIGRpIGlucHV0IHVuYXRhbnR1bT10cnVlfGZhbHNlIGluIGJhc2UgYWwgdmFsb3JlIGRlbGxhIHZhcmlhYmlsZSBib29sZWFuYSB1bmF0YW50dW0qLwpVUkwgdXJsID0gbmV3IFVSTChiYXNlVVJMKQpIdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7CmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KCJDb250ZW50LVR5cGUiLCAiYXBwbGljYXRpb24vanNvbiIpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eSgiQWNjZXB0IiwgIiovKiIpOwpjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpOwpjb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7CmNvbm5lY3Rpb24uY29ubmVjdCgpOwpsb2cuZGVidWcgIlJlc3BvbnNlQ29kZToiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKQpsb2cuZGVidWcgIlJlc3BvbnNlTWVzc2FnZToiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKQoKLy9Jc3N1ZUluZGV4aW5nU2VydmljZSBpc3N1ZUluZGV4aW5nU2VydmljZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldENvbXBvbmVudChJc3N1ZUluZGV4aW5nU2VydmljZSkKLy9pc3N1ZUluZGV4aW5nU2VydmljZS5yZUluZGV4KGlzc3VlTWFuYWdlci5nZXRJc3N1ZU9iamVjdChpc3N1ZS5rZXkudG9TdHJpbmcoKSkpCgovL2RlZiB1bmFUYW50dW1SYXRlcyA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUoIk9QQUFfVU5BVEFOVFVNX1JBVEVTIilbMF0KLy9sb2cud2FybiAidW5hVGFudHVtUmF0ZXM6ICIgKyBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHVuYVRhbnR1bVJhdGVzKQoKZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKQpkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIGVMaXN0RXJyb3JzID0gbmV3IEFycmF5TGlzdCgpCmRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KCkKCmlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscygiMjAwIikpewogICAgbG9nLmRlYnVnICJ1cmw6ICIgKyB1cmwKICAgIGxvZy5kZWJ1ZyAiUmVzcG9uc2VDb2RlOiIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpCiAgICBsb2cuZGVidWcgIlJlc3BvbnNlTWVzc2FnZToiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKQogICAgbG9nLmRlYnVnICJSZXNwb25zZTogIiArIGNvbm5lY3Rpb24KCiAgICBlTGlzdEVycm9ycy5hZGQoIkUiKQogICAgZUxpc3RFcnJvcnMuYWRkKCJPUC1US1QtQUNDT1VOVElORyIpCiAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyAiICIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpKQogICAgZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncykKICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycykKCiAgICBvdXRwdXQuYWRkKGVMaXN0KQogICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigiRSIsIG91dHB1dC50b1N0cmluZygpKQp9</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22693</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="9" name="Waiting for Supplier Quote">
      <meta name="jira.status.id">14332</meta>
      <actions>
        <action id="261" name="Preventivo Fornitore Inserito" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19914</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">23e761954d70d711d1ee5515aaf85f7738768dd8</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIG1hbmRhdG9yeSBhdHRhY2htZW50czogUHJldmVudGl2byBGb3JuaXRvcmU=</arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">53480a627af4b00abaf5fd025ed6c011dab7e21e</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlcXVpcmVkIEZpZWxkcyA=</arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="10">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22693</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="271" name="Quote Reminder">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <results>
            <unconditional-result old-status="null" status="null" step="9">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">YCFgT1AgRW1haWwgTm90aWZpY2F0aW9uOiBSRU1JTkRFUl9GT1JfU1VQUExJRVJfUVVPVEUgKyBVcGRhdGUgZmllbGQgUkVNSU5ERVJfRk9SX1NVUFBMSUVSX1FVT1RFIHdpdGggbmV3IGR1ZSBkYXRl</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5NdXRhYmxlSXNzdWUKaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0OwppbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeQpDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQpsb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRykKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5saW5rLklzc3VlTGluayAKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Nb2RpZmllZFZhbHVlCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUudXRpbC5EZWZhdWx0SXNzdWVDaGFuZ2VIb2xkZXIKaW1wb3J0IGphdmEuc3FsLlRpbWVzdGFtcAppbXBvcnQgamF2YS50ZXh0LlNpbXBsZURhdGVGb3JtYXQKaW1wb3J0IGphdmEudGV4dC5EYXRlRm9ybWF0CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTW9kaWZpZWRWYWx1ZQppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnV0aWwuSXNzdWVDaGFuZ2VIb2xkZXIKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS51dGlsLkRlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlcgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmV2ZW50LnR5cGUuRXZlbnREaXNwYXRjaE9wdGlvbgppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lcgppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGwKClByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKCkKRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJykKcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHsKCXByb3BlcnRpZXMubG9hZChpdCkKfQpJc3N1ZU1hbmFnZXIgaXNzdWVNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKCk7CkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTsKZGVmIHJlcXVlc3RNZXRob2QKZGVmIGJhc2VVUkwKClVSTCB1cmwKSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvbgpkZWYgbWkgPSAoTXV0YWJsZUlzc3VlKSBpc3N1ZQpkZWYgY3VycmVudFVzZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRKaXJhQXV0aGVudGljYXRpb25Db250ZXh0KCkuZ2V0TG9nZ2VkSW5Vc2VyKCkKCmRlZiByZW1pbmRlckRhdGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2Yud2ZSZW1pbmRlckZvclNRdW90ZSddLnRvU3RyaW5nKCkpWzBdCgpyZXF1ZXN0TWV0aG9kID0gIlBPU1QiOwpkZWYgYm9keV9yZXEgPSBbXQoKYm9keV9yZXEgPSBbCiAgICAgICAgInRlbXBsYXRlTmFtZSI6IHByb3BlcnRpZXNbJ3R0LnJlbWluZGVyVG9TJ10udG9TdHJpbmcoKSwKICAgICAgICAicGVjIjogZmFsc2UsCiAgICAgICAgImlzc3VlS2V5IjogaXNzdWUua2V5Cl0gCgpiYXNlVVJMID0gImh0dHA6Ly8iICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyAiL29wL3Jlc3QvamlyYS9BQS90cmFuc2FjdGlvbi9tYWlsL3NlbmQiCnVybCA9IG5ldyBVUkwoYmFzZVVSTCkKY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eSgiQ29udGVudC1UeXBlIiwgImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOCIpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eSgiQWNjZXB0IiwgIiovKiIpOwpjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpOwpjb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7CmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtCmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtLndpdGhXcml0ZXIoIlVURi04IikgeyBuZXcgU3RyZWFtaW5nSnNvbkJ1aWxkZXIoaXQsIGJvZHlfcmVxKSB9CmxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbQpjb25uZWN0aW9uLmNvbm5lY3QoKTsKCmRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpCmRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKQpkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpCgppZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoIjIwMCIpKXsKICAgIGxvZy5kZWJ1ZyAidXJsOiAiICsgdXJsCiAgICBsb2cuZGVidWcgIlJlc3BvbnNlQ29kZToiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKQogICAgbG9nLmRlYnVnICJSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKICAgIGVMaXN0RXJyb3JzLmFkZCgiRSIpCiAgICBlTGlzdEVycm9ycy5hZGQoIlNFTkRNQUlMIikKICAgIGVycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArICIgIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkpCiAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKQogICAgZUxpc3QuYWRkKGVMaXN0RXJyb3JzKQoKICAgIG91dHB1dC5hZGQoZUxpc3QpCiAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCJFIiwgb3V0cHV0LnRvU3RyaW5nKCkpCn1lbHNlewoKICAgIGRlZiBkYXRlID0gaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShyZW1pbmRlckRhdGUpCiAgICBEYXRlIG5ld1REViA9IG5ldyBEYXRlKCkKICAgIAogICAgZGVmIG5ld0RhdGVmb3JtYXQgPSBuZXdURFYuZm9ybWF0KCdNTS9kZC95eXl5JykKICAgIFNpbXBsZURhdGVGb3JtYXQgc2RmID0gbmV3IFNpbXBsZURhdGVGb3JtYXQoIk1NL2RkL3l5eXkiKTsKCWRlZiBjYWwgPSBDYWxlbmRhci5nZXRJbnN0YW5jZSgpCiAgICBjYWwuc2V0VGltZShzZGYucGFyc2UobmV3RGF0ZWZvcm1hdCkpOwogICAgY2FsLmFkZChDYWxlbmRhci5EQVRFLCArMik7IAoKICAgIFRpbWVzdGFtcCBEZWZUREQgPSBuZXcgVGltZXN0YW1wKGNhbC5nZXRUaW1lSW5NaWxsaXMoKSkKIAogICAgbWkuc2V0Q3VzdG9tRmllbGRWYWx1ZShyZW1pbmRlckRhdGUsIERlZlRERCk7CglDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKS51cGRhdGVJc3N1ZShjdXJyZW50VXNlciwgbWksIEV2ZW50RGlzcGF0Y2hPcHRpb24uRE9fTk9UX0RJU1BBVENILCBmYWxzZSk7IAp9</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="10" name="Supplier Quote Received">
      <meta name="jira.status.id">14333</meta>
      <actions>
        <action id="281" name="Invia Offerta al Cliente" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19926</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">87c923e5bb5b4e6303d9b8ce896495c53f9b7957</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlcXVpcmVkIEZpZWxkcw==</arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="11">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22693</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="291" name="Genera Offerta - PDF" view="fieldscreen">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19926</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">87c923e5bb5b4e6303d9b8ce896495c53f9b7957</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlcXVpcmVkIEZpZWxkcw==</arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">f0e886b6a38b4c375023c581670d7765927ee07a</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBnZW5lcmF0ZSBPZmZlciBhdHRhY2htZW50</arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeQppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuSXNzdWVMaW5rCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbAoKUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKQpGaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKQpwcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0gewoJcHJvcGVydGllcy5sb2FkKGl0KQp9CkNhdGVnb3J5IGxvZyA9IENhdGVnb3J5LmdldEluc3RhbmNlKCJjb20ub25yZXNvbHZlLmppcmEuZ3Jvb3Z5LlBvc3RGdW5jdGlvbiIpCmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKQoKSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpOwpDdXN0b21GaWVsZE1hbmFnZXIgY3VzdG9tRmllbGRNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCk7CmRlZiByZXF1ZXN0TWV0aG9kCmRlZiBiYXNlVVJMCgpkZWYgY3VzdG9tZXIgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLmN1c3RvbWVyJ10udG9TdHJpbmcoKSlbMF0KZGVmIHRlbXBsYXRlSWQKaW50IERCTyA9IHByb3BlcnRpZXNbJ2lzY2hlbWEuZGJvLmlkJ10udG9TdHJpbmcoKS50b0ludGVnZXIoKQoKLyogSW5kaXZpZHVhemlvbmUgVGVtcGxhdGUgb2ZmZXJ0YSBkYSBhcHBsaWNhcmUgKi8KLyogQ2FzbyAxKSBlc2lzdGUgdW5vIHNwZWNpZmljbyB0ZW1wbGF0ZSBwZXIgaWwgY2xpZW50ZSBzZWxlemlvbmF0byAtLT4gdXNvIHF1ZXN0byAqLwovKiBlbHNlIC0tPiB1c28gaWwgdGVtcGxhdGUgZGkgZGVmYXVsdDogQXR0YWNobWVudENhdGVnb3J5ID0gIk9mZmVydGEgQ2xpZW50ZSIgQU5EIENVU1RPTUVSX1JFRiBJUyBFTVBUWSBBTkQgREVGQVVMVD10cnVlCi8qUmltb3ppb25lIGFsbGVnYXRvIHJhcHBvcnRvIGRpIGludGVydmVudG8gYXBwZW5hIGNyZWF0byovCi8qIEdldCBJbnNpZ2h0IElRTCBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi8KQ2xhc3MgaXFsRmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5JUUxGYWNhZGUiKTsgCmRlZiBpcWxGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUoaXFsRmFjYWRlQ2xhc3MpOwoKLyogR2V0IEluc2lnaHQgT2JqZWN0IEZhY2FkZSBmcm9tIHBsdWdpbiBhY2Nlc3NvciAqLwpDbGFzcyBvYmplY3RGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdEZhY2FkZSIpOwpkZWYgb2JqZWN0RmFjYWRlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKG9iamVjdEZhY2FkZUNsYXNzKTsKCi8qIEdldCBJbnNpZ2h0IE9iamVjdCBUeXBlIEZhY2FkZSBmcm9tIHBsdWdpbiBhY2Nlc3NvciAqLwpDbGFzcyBvYmplY3RUeXBlRmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlRmFjYWRlIik7CmRlZiBvYmplY3RUeXBlRmFjYWRlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKG9iamVjdFR5cGVGYWNhZGVDbGFzcyk7CgovKiBHZXQgSW5zaWdodCBPYmplY3QgQXR0cmlidXRlIEZhY2FkZSBmcm9tIHBsdWdpbiBhY2Nlc3NvciAqLwpDbGFzcyBvYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlIik7CmRlZiBvYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyk7CgpDbGFzcyBvYmplY3RBdHRyaWJ1dGVCZWFuRmFjdG9yeUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcygiY29tLnJpYWRhbGFicy5qaXJhLnBsdWdpbnMuaW5zaWdodC5zZXJ2aWNlcy5tb2RlbC5mYWN0b3J5Lk9iamVjdEF0dHJpYnV0ZUJlYW5GYWN0b3J5Iik7CmRlZiBvYmplY3RBdHRyaWJ1dGVCZWFuRmFjdG9yeSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShvYmplY3RBdHRyaWJ1dGVCZWFuRmFjdG9yeUNsYXNzKTsKCmRlZiBjdXN0b21lclZhbHVlID0gaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShjdXN0b21lcilbMF0udG9TdHJpbmcoKQpkZWYgY3VzdG9tZXJLZXkgPSBjdXN0b21lclZhbHVlLnN1YnN0cmluZyhjdXN0b21lclZhbHVlLmluZGV4T2YoJygnKSsxLGN1c3RvbWVyVmFsdWUuaW5kZXhPZignKScpKQoKZGVmIERPY3VzdG9tZXJPYmplY3RSZWYgPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4oaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShjdXN0b21lcilbMF0uZ2V0SWQoKSwgcHJvcGVydGllc1snaW9iai5jdXN0b21lci5jdXN0b21lclJlZiddLnRvU3RyaW5nKCkpLmdldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnMoKTsKbG9nLmRlYnVnICJET2N1c3RvbWVyT2JqZWN0UmVmOiAiICsgRE9jdXN0b21lck9iamVjdFJlZgoKZGVmIG9iVHJpYWdlID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKERPY3VzdG9tZXJPYmplY3RSZWZbMF0uZ2V0VmFsdWUoKSwgcHJvcGVydGllc1snaW9iai5jb250YWN0LmRiby5uYW1lJ10udG9TdHJpbmcoKSkuY3JlYXRlTXV0YWJsZSgpICAKZGVmIGN1c3RvbWVyTmFtZSA9IG9iVHJpYWdlLmdldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnMoKQoKLyogU3BlY2lmeSB0aGUgc2NoZW1hIGlkIGFzIHdlbGwgYXMgdGhlIElRTCB0aGF0IHdpbGwgZmV0Y2ggb2JqZWN0cy4gSW4gdGhpcyBjYXNlIGFsbCBvYmplY3RzIHdpdGggTmFtZSBtYXRjaGluZyB0aGUgdmFsdWVDRiwgYmUgc3VyZSB0byBpbmNsdWRlICIgYXJvdW5kIHZhbHVlICovCmRlZiBvYmplY3RzID0gaXFsRmFjYWRlLmZpbmRPYmplY3RzQnlJUUxBbmRTY2hlbWEoREJPLCAiXCIiICsgKHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmF0dGFjaG1lbnRDYXRlZ29yeSddID8gcHJvcGVydGllc1snaW9iai5hdHRhY2htZW50Q2F0ZWdvcnkuYXR0YWNobWVudENhdGVnb3J5J10udG9TdHJpbmcoKSA6ICJBVFRBQ0hNRU5UX0NBVEVHT1JZIikgKyAiXCIuXCIiICsgcHJvcGVydGllc1snaW9iai5hdHRhY2htZW50Q2F0ZWdvcnkubmFtZSddLnRvU3RyaW5nKCkgKyAiXCIgPSBcIiIgKyAocHJvcGVydGllc1snaW9iai5hdHRhY2htZW50Q2F0ZWdvcnkub2Jqcy5vZmZDbGllbnRlJ10gPyBwcm9wZXJ0aWVzWydpb2JqLmF0dGFjaG1lbnRDYXRlZ29yeS5vYmpzLm9mZkNsaWVudGUnXS50b1N0cmluZygpIDogIk9mZmVydGEgQ2xpZW50ZSIpICsgIlwiIEFORCAiICsgcHJvcGVydGllc1snaW9iai5hdHRhY2htZW50Q2F0ZWdvcnkuZGVsZXRlZCddLnRvU3RyaW5nKCkgKyAiIT10cnVlIEFORCBDVVNUT01FUl9SRUYgSVMgTk9UIEVNUFRZIEFORCBDVVNUT01FUl9SRUYuTmFtZSA9IFwiIiArIGN1c3RvbWVyTmFtZVswXS5nZXRWYWx1ZSgpICsgIlwiIik7IC8vIFNlZSB0aGUgY29tcGxldGUgbGlzdCBvZiBwb3NzaWJsZSBJUUwgb24gdGhlIEluc2lnaHQgUXVlcnkgTGFuZ3VhZ2UgZG9jdW1lbnRhdGlvbiBwYWdlCi8qIElmIHRoaXMgaXMgYSBtYW5kYXRvcnkgZmllbGQgeW91IHNob3VsZCBiZSBhYmxlIHRvIGRvIHRoaXM6ICovCmxvZy5pbmZvKCJJbnNpZ2h0IG9iamVjdDogIiArIG9iamVjdHNbMF0pOwpsb2cuZGVidWcgIlwiIiArIChwcm9wZXJ0aWVzWydpb2JqLmF0dGFjaG1lbnRDYXRlZ29yeS5hdHRhY2htZW50Q2F0ZWdvcnknXSA/IHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmF0dGFjaG1lbnRDYXRlZ29yeSddLnRvU3RyaW5nKCkgOiAiQVRUQUNITUVOVF9DQVRFR09SWSIpICsgIlwiLlwiIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5Lm5hbWUnXS50b1N0cmluZygpICsgIlwiID0gXCIiICsgKHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5Lm9ianMub2ZmQ2xpZW50ZSddID8gcHJvcGVydGllc1snaW9iai5hdHRhY2htZW50Q2F0ZWdvcnkub2Jqcy5vZmZDbGllbnRlJ10udG9TdHJpbmcoKSA6ICJPZmZlcnRhIENsaWVudGUiKSArICJcIiBBTkQgIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmRlbGV0ZWQnXS50b1N0cmluZygpICsgIiE9dHJ1ZSBBTkQgQ1VTVE9NRVJfUkVGIElTIE5PVCBFTVBUWSBBTkQgQ1VTVE9NRVJfUkVGLk5hbWUgPSBcIiIgKyBjdXN0b21lck5hbWVbMF0uZ2V0VmFsdWUoKSArICJcIiIKCmlmKCFvYmplY3RzWzBdKXsKICAgIC8qTmVzc3VuIGZpbGUgaW5kaXZpZHVhdG8gcGVyIGlsIGNsaWVudGUgLSBjZXJjbyB0ZW1wbGF0ZSBnZW5lcmljbyAqLwogICAgb2JqZWN0cyA9IGlxbEZhY2FkZS5maW5kT2JqZWN0c0J5SVFMQW5kU2NoZW1hKERCTywgIlwiIiArIChwcm9wZXJ0aWVzWydpb2JqLmF0dGFjaG1lbnRDYXRlZ29yeS5hdHRhY2htZW50Q2F0ZWdvcnknXSA/IHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmF0dGFjaG1lbnRDYXRlZ29yeSddLnRvU3RyaW5nKCkgOiAiQVRUQUNITUVOVF9DQVRFR09SWSIpICsgIlwiLlwiIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5Lm5hbWUnXS50b1N0cmluZygpICsgIlwiID0gXCIiICsgKHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5Lm9ianMub2ZmQ2xpZW50ZSddID8gcHJvcGVydGllc1snaW9iai5hdHRhY2htZW50Q2F0ZWdvcnkub2Jqcy5vZmZDbGllbnRlJ10udG9TdHJpbmcoKSA6ICJPZmZlcnRhIENsaWVudGUiKSArICJcIiBBTkQgIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmRlbGV0ZWQnXS50b1N0cmluZygpICsgIiE9dHJ1ZSBBTkQgQ1VTVE9NRVJfUkVGIElTIEVNUFRZIEFORCBERUZBVUxUPXRydWUiKTsgLy8gU2VlIHRoZSBjb21wbGV0ZSBsaXN0IG9mIHBvc3NpYmxlIElRTCBvbiB0aGUgSW5zaWdodCBRdWVyeSBMYW5ndWFnZSBkb2N1bWVudGF0aW9uIHBhZ2UKICAgIC8qIElmIHRoaXMgaXMgYSBtYW5kYXRvcnkgZmllbGQgeW91IHNob3VsZCBiZSBhYmxlIHRvIGRvIHRoaXM6ICovCiAgICBsb2cuaW5mbygiSW5zaWdodCBvYmplY3Q6ICIgKyBvYmplY3RzWzBdKTsKICAgIGxvZy5kZWJ1ZyAiXCIiICsgKHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmF0dGFjaG1lbnRDYXRlZ29yeSddID8gcHJvcGVydGllc1snaW9iai5hdHRhY2htZW50Q2F0ZWdvcnkuYXR0YWNobWVudENhdGVnb3J5J10udG9TdHJpbmcoKSA6ICJBVFRBQ0hNRU5UX0NBVEVHT1JZIikgKyAiXCIuXCIiICsgcHJvcGVydGllc1snaW9iai5hdHRhY2htZW50Q2F0ZWdvcnkubmFtZSddLnRvU3RyaW5nKCkgKyAiXCIgPSBcIiIgKyAocHJvcGVydGllc1snaW9iai5hdHRhY2htZW50Q2F0ZWdvcnkub2Jqcy5vZmZDbGllbnRlJ10gPyBwcm9wZXJ0aWVzWydpb2JqLmF0dGFjaG1lbnRDYXRlZ29yeS5vYmpzLm9mZkNsaWVudGUnXS50b1N0cmluZygpIDogIk9mZmVydGEgQ2xpZW50ZSIpICsgIlwiIEFORCAiICsgcHJvcGVydGllc1snaW9iai5hdHRhY2htZW50Q2F0ZWdvcnkuZGVsZXRlZCddLnRvU3RyaW5nKCkgKyAiIT10cnVlIEFORCBDVVNUT01FUl9SRUYgSVMgRU1QVFkgQU5EIERFRkFVTFQ9dHJ1ZSIKfQoKaWYob2JqZWN0c1swXSl7CiAgICBsb2cuZGVidWcgInRlbXBsYXRlIGRhIHVzYXJlOiAiICsgb2JqZWN0c1swXS5nZXRJZCgpCiAgICB0ZW1wbGF0ZUlkPW9iamVjdHNbMF0uZ2V0SWQoKQp9CgovKiBSRVNUIEFQSSBwZXIgR2VuZXJhemlvbmUgQWxsZWdhdG8gQ29uc3VudGl2byAqLwpyZXF1ZXN0TWV0aG9kID0gIlBVVCI7CgpiYXNlVVJMID0gImh0dHA6Ly8iICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyAiL29wL3Jlc3QvYXV0b21hdGlvbi90aWNrZXQvIiArIGlzc3VlLmtleS50b1N0cmluZygpICsgIi9hdHRhY2htZW50L2dlbmVyaWM/dGVtcGxhdGVJZD0iICsgdGVtcGxhdGVJZCArICImdHlwZT1QREYmYXR0YWNobWVudEN1c3RvbUZpZWxkPSIgKyBwcm9wZXJ0aWVzWydjZi5vZmZlckF0dGFjaG1lbnRSZWYnXS50b1N0cmluZygpCgpsb2cuZGVidWcgImJhc2VVcmw6ICIgKyBiYXNlVVJMCgpVUkwgdXJsCnVybCA9IG5ldyBVUkwoYmFzZVVSTCkKSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eSgiQ29udGVudC1UeXBlIiwgImFwcGxpY2F0aW9uL2pzb24iKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoIkFjY2VwdCIsICIqLyoiKTsKY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTsKY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpOwpjb25uZWN0aW9uLmNvbm5lY3QoKTsKCmRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpCmRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKQpkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpCgppZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoIjIwMCIpKXsKICAgIGxvZy5kZWJ1ZyAidXJsOiAiICsgdXJsCiAgICBsb2cuZGVidWcgIlJlc3BvbnNlQ29kZToiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKQogICAgbG9nLmRlYnVnICJSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKICAgIGVMaXN0RXJyb3JzLmFkZCgiRSIpCiAgICBlTGlzdEVycm9ycy5hZGQoIkdFTkVSQVRFLUFDQ09VTlRJTkdSRVBPUlQiKQogICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgIiAiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKSkKICAgIGVMaXN0RXJyb3JzLmFkZChlcnJvck1zZ3MpCiAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpCgogICAgb3V0cHV0LmFkZChlTGlzdCkKICAgIHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oJ3siRSI6IicgKyBvdXRwdXQudG9TdHJpbmcoKSArICcifScpCiAgICAvL3Rocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oIkUiLCBvdXRwdXQudG9TdHJpbmcoKSkKfQo=</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="10">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22693</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="301" name="Genera Offerta - Word" view="fieldscreen">
          <meta name="opsbar-sequence">30</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19926</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">87c923e5bb5b4e6303d9b8ce896495c53f9b7957</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlcXVpcmVkIEZpZWxkcw==</arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">0ed547676d78f1b77b55fb654d1a258e09977399</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBnZW5lcmF0ZSBPZmZlciBhdHRhY2htZW50IC0gV29yZA==</arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="10">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22693</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="381" name="ReOpen Quote">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <results>
            <unconditional-result old-status="null" status="null" step="8">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="11" name="Waiting for Customer Feedback">
      <meta name="jira.status.id">14334</meta>
      <actions>
        <action id="311" name="Offerta Accettata da Cliente">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <results>
            <unconditional-result old-status="null" status="null" step="12">
              <post-functions>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="fieldValue">Yes</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">customfield_22681</arg>
                </function>
                <function type="class">
                  <arg name="field.copyFieldSource2"></arg>
                  <arg name="field.copyFieldSource1">customfield_22683</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="field.createTargetValue1"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyFieldMode1">OVERWRITE</arg>
                  <arg name="field.copyFieldDestination1">customfield_22635</arg>
                  <arg name="field.copyFieldSeparator1"></arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescopyValueFromOtherField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.CopyValueFromOtherFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">38100fbf-8abd-4951-82c2-3defd3481f99</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IENhbGN1bGF0ZSBPRkZFUl9DVVNUT01FUl9UT1RBTF9BTU9VTlQsIE9GRkVSX1NVUFBMSUVSX1RPVEFMX0FNT1VOVCArIF9NQVRFUklBTCBlIF9MQUJPVVI=</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT"></arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">f66a5f06-1465-410f-b85d-1622703520c0</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IEdlbmVyYXRlIENvbXBvbmVudHMgJiBwb3B1bGF0ZSBPUEFBX1JFUExBQ0VEX01BVEVSSUFMUw==</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT"></arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="321" name="Offerta Rifiutata da Cliente">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <results>
            <unconditional-result old-status="null" status="null" step="13">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="331" name="Richiesta Preventivo Scaduta">
          <meta name="opsbar-sequence">30</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <results>
            <unconditional-result old-status="null" status="null" step="14">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="12" name="Required">
      <meta name="jira.status.id">14335</meta>
      <actions>
<common-action id="51" />
      </actions>
    </step>
    <step id="13" name="Rejected">
      <meta name="jira.status.id">11436</meta>
    </step>
    <step id="14" name="Quote Expired">
      <meta name="jira.status.id">14336</meta>
    </step>
    <step id="15" name="Deleted">
      <meta name="jira.status.id">10335</meta>
      <actions>
<common-action id="371" />
      </actions>
    </step>
    <step id="16" name="Suspended">
      <meta name="jira.status.id">14337</meta>
      <actions>
<common-action id="371" />
      </actions>
    </step>
    <step id="17" name="Canceled">
      <meta name="jira.status.id">11728</meta>
      <actions>
<common-action id="371" />
      </actions>
    </step>
  </steps>
</workflow>
