<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE workflow PUBLIC "-//OpenSymphony Group//DTD OSWorkflow 2.8//EN" "http://www.opensymphony.com/osworkflow/workflow_2_8.dtd">
<workflow>
  <meta name="jira.description">(This copy was automatically generated from a draft, when workflow 'OPAA: Maintenance/New Installation Ticket Workflow v. 1.5.1' was made inactive.)</meta>
  <meta name="jira.update.author.key">arianna.fabbri</meta>
  <meta name="jira.updated.date">1658677560641</meta>
  <initial-actions>
    <action id="1" name="Create">
      <validators>
        <validator name="" type="class">
          <arg name="permission">Create Issue</arg>
          <arg name="class.name">com.atlassian.jira.workflow.validator.PermissionValidator</arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="null" status="open" step="1">
          <post-functions>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="append.value"></arg>
              <arg name="maxAllowed-integerValue"></arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field.value">NOT_CONFIRMED</arg>
              <arg name="field.name">customfield_23620</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">f301d5d3-a896-4a2f-8b27-637ed94455fc</arg>
              <arg name="FIELD_NOTES">YCFgQ2xvbmVkIHRrdDogY3JlYXRlIGxpbmtzIHRvIGFsbCB0aGUgcmVsYXRlZCBpc3N1ZXM=</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlXG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlclxuaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnlcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmV2ZW50LnR5cGUuRXZlbnREaXNwYXRjaE9wdGlvblxuaW1wb3J0IGphdmEudGV4dC5TaW1wbGVEYXRlRm9ybWF0XG5pbXBvcnQgamF2YS50ZXh0LlBhcnNlRXhjZXB0aW9uXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLnNlY3VyaXR5LkppcmFBdXRoZW50aWNhdGlvbkNvbnRleHRcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuYmMuaXNzdWUuSXNzdWVTZXJ2aWNlLklzc3VlUmVzdWx0XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmpxbC5wYXJzZXIuSnFsUXVlcnlQYXJzZXJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuYmMuaXNzdWUuc2VhcmNoLlNlYXJjaFNlcnZpY2VcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEudXNlci51dGlsLlVzZXJVdGlsXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLndlYi5iZWFuLlBhZ2VyRmlsdGVyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuTGlua0NvbGxlY3Rpb25JbXBsO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5saW5rLklzc3VlTGluaztcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTW9kaWZpZWRWYWx1ZVxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS51dGlsLkRlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbi8qU2NyaXB0IFZhcmlhYmxlcyovXG4vL1BlciB0ZXN0IGRhIGNvbnNvbGVcbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKVxuLy9Jc3N1ZSBpc3N1ZSA9IGlzc3VlTWFuYWdlci5nZXRJc3N1ZUJ5S2V5SWdub3JlQ2FzZShcIkFBUy00MDE5XCIpXG5cbmRlZiB1c2VyID0gQ29tcG9uZW50QWNjZXNzb3IuamlyYUF1dGhlbnRpY2F0aW9uQ29udGV4dC5sb2dnZWRJblVzZXJcblxuZGVmIGlzc3VlU2VydmljZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlU2VydmljZSgpXG5kZWYgY2xvbmVkVGt0ID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLmNsb25lZFRrdCddID8gcHJvcGVydGllc1snY2YuY2xvbmVkVGt0J10udG9TdHJpbmcoKSA6IFwiT1BfQ0xPTkVEX1RLVFwiKVswXVxuZGVmIGNsb25lZEJ5VGt0ID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLmNsb25lZEJ5VGt0J10gPyBwcm9wZXJ0aWVzWydjZi5jbG9uZWRCeVRrdCddLnRvU3RyaW5nKCkgOiBcIk9QX0NMT05FRF9CWV9JU1NVRVwiKVswXVxuXG5pZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGNsb25lZFRrdCkudG9TdHJpbmcoKS5lcXVhbHMoXCJZRVNcIikpe1xuICAgIExpc3Q8SXNzdWVMaW5rPiBhbGxJbklzc3VlTGluayA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTGlua01hbmFnZXIoKS5nZXRJbndhcmRMaW5rcyhpc3N1ZS5nZXRJZCgpKTtcbiAgICBMaXN0PElzc3VlTGluaz4gYWxsT3V0SXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldE91dHdhcmRMaW5rcyhpc3N1ZS5nZXRJZCgpKTtcbiAgICBkZWYgbGlua2VkSXNzdWVUZW1wID0gaXNzdWVNYW5hZ2VyLmdldElzc3VlQnlLZXlJZ25vcmVDYXNlKGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoY2xvbmVkQnlUa3QpLnRvU3RyaW5nKCkpLy9pc3N1ZUxpbmsuZ2V0U291cmNlT2JqZWN0KClcbiAgICBTdHJpbmcgdHlwZSA9IGxpbmtlZElzc3VlVGVtcC5nZXRJc3N1ZVR5cGUoKS5nZXROYW1lKCk7XG5cbiAgICBMaXN0PElzc3VlTGluaz4gYWxsT3V0U291cmNlSXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldE91dHdhcmRMaW5rcygvKmlzc3VlTGluay5nZXRTb3VyY2VPYmplY3QoKSovbGlua2VkSXNzdWVUZW1wLmdldElkKCkpO1xuICAgIGxvZy5kZWJ1ZyBhbGxPdXRTb3VyY2VJc3N1ZUxpbmtcbiAgICBmb3IgKEl0ZXJhdG9yPElzc3VlTGluaz4gc291cmNlT3V0SXRlcmF0b3IgPSBhbGxPdXRTb3VyY2VJc3N1ZUxpbmsuaXRlcmF0b3IoKTsgc291cmNlT3V0SXRlcmF0b3IuaGFzTmV4dCgpOykge1xuICAgICAgICBJc3N1ZUxpbmsgc291cmNlSXNzdWVMaW5rID0gKElzc3VlTGluaykgc291cmNlT3V0SXRlcmF0b3IubmV4dCgpO1xuICAgICAgICBkZWYgbGlua2VkSVRlbXAgPSBzb3VyY2VJc3N1ZUxpbmsuZ2V0U291cmNlT2JqZWN0KClcbiAgICAgICAgU3RyaW5nIHQgPSBsaW5rZWRJVGVtcC5nZXRJc3N1ZVR5cGUoKS5nZXROYW1lKCk7XG5cbiAgICAgICAgbG9nLmRlYnVnIFwiaXNzdWVsaW5rIFR5cGU6IFwiICsgc291cmNlSXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpXG4gICAgICAgIGxvZy5kZWJ1ZyBcInNvdXJjZUlzc3VlOiBcIiArIHNvdXJjZUlzc3VlTGluay5nZXRTb3VyY2VPYmplY3QoKVxuICAgICAgICBsb2cuZGVidWcgXCJkZXN0aW5hdGlvbklzc3VlOiBcIiArIHNvdXJjZUlzc3VlTGluay5nZXREZXN0aW5hdGlvbk9iamVjdCgpXG5cbiAgICAgICAgaWYoc291cmNlSXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNSZWxhdGVzJ10udG9TdHJpbmcoKSkgJiYgc291cmNlSXNzdWVMaW5rLmdldERlc3RpbmF0aW9uT2JqZWN0KCkua2V5IT1pc3N1ZS5rZXkpe1xuICAgICAgICAgICAgbG9nLmRlYnVnIFwidHJvdmF0byBvdXRXYXJkTGluayAtIHByZW5kbyBsYSBkZXN0aW5hdGlvbiBpc3N1ZSBcIiArIHNvdXJjZUlzc3VlTGluay5nZXREZXN0aW5hdGlvbk9iamVjdCgpICsgXCIgZSBsYSBsZWdvIGFsbGEgaXNzdWUgY29ycmVudGUgc29sbyBzZSBub24gXHUwMGU4IGdpXHUwMGUwIGxpbmthdGFcIlxuICAgICAgICAgICAgZGVmIGFscmVhZHlMaW5rZWQ9ZmFsc2VcbiAgICAgICAgICAgIGZvcihsaSBpbiBhbGxJbklzc3VlTGluayl7XG4gICAgICAgICAgICAgICAgaWYoc291cmNlSXNzdWVMaW5rLmdldERlc3RpbmF0aW9uT2JqZWN0KCkuZ2V0SWQoKSA9PSBsaS5nZXRTb3VyY2VPYmplY3QoKS5nZXRJZCgpIHx8IHNvdXJjZUlzc3VlTGluay5nZXREZXN0aW5hdGlvbk9iamVjdCgpLmdldElkKCkgPT0gbGkuZ2V0RGVzdGluYXRpb25PYmplY3QoKS5nZXRJZCgpKXtcbiAgICAgICAgICAgICAgICAgICAgYWxyZWFkeUxpbmtlZD10cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yKGxpIGluIGFsbE91dElzc3VlTGluayl7XG4gICAgICAgICAgICAgICAgaWYoc291cmNlSXNzdWVMaW5rLmdldERlc3RpbmF0aW9uT2JqZWN0KCkuZ2V0SWQoKSA9PSBsaS5nZXRTb3VyY2VPYmplY3QoKS5nZXRJZCgpIHx8IHNvdXJjZUlzc3VlTGluay5nZXREZXN0aW5hdGlvbk9iamVjdCgpLmdldElkKCkgPT0gbGkuZ2V0RGVzdGluYXRpb25PYmplY3QoKS5nZXRJZCgpKXtcbiAgICAgICAgICAgICAgICAgICAgYWxyZWFkeUxpbmtlZD10cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoIWFscmVhZHlMaW5rZWQpe1xuICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIm5vbiBcdTAwZTggbGlua2F0YSwgbGEgbGlua29cIlxuICAgICAgICAgICAgICAgIENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTGlua01hbmFnZXIoKS5jcmVhdGVJc3N1ZUxpbmsoc291cmNlSXNzdWVMaW5rLmdldERlc3RpbmF0aW9uT2JqZWN0KCkuZ2V0SWQoKSwgaXNzdWUuZ2V0SWQoKSwgTG9uZy5wYXJzZUxvbmcocHJvcGVydGllc1snaWwubGlua2VkVGt0c1JlbGF0ZXNJZCddLnRvU3RyaW5nKCkpLCAxLCB1c2VyKTsgICBcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyBcImdpXHUwMGUwIGxpbmthdGEsIG5vbiBsYSBsaW5rbyBkaSBudW92b1wiXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cbn1cbiIsInNjcmlwdFBhdGgiOm51bGx9</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="FIELD_SECURITY_LEVEL_ID">11600</arg>
              <arg name="FIELD_NOTES">YCFgU2V0ICJPcGVyYXRpb24gUG9ydGFsIC0gRkFBQyBTZXJ2aWNlIiBJc3N1ZSBTZWN1cml0eSBMZXZlbA==</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
              <arg name="FIELD_CONDITION"></arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="append.value"></arg>
              <arg name="maxAllowed-integerValue">50</arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field.value">%%CURRENT_DATETIME%%</arg>
              <arg name="field.name">customfield_22715</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
            <function type="class">
              <arg name="conditionList">3</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
              <arg name="comparisonType">1</arg>
              <arg name="precondition">true</arg>
              <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
              <arg name="preconditionNegateResult-booleanValue"></arg>
              <arg name="fieldValue">Maintenance Ticket</arg>
              <arg name="preconditionMode-textValue">DISCARD</arg>
              <arg name="fieldsList">issuetype</arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="append.value"></arg>
              <arg name="maxAllowed-integerValue">50</arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field.value">Yes</arg>
              <arg name="field.name">customfield_22620</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="preconditionAwareFunctionMode-textValue">FALSE</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="append.value"></arg>
              <arg name="maxAllowed-integerValue">50</arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field.value">New Installation Ticket</arg>
              <arg name="field.name">customfield_22716</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="preconditionAwareFunctionMode-textValue">FALSE</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="append.value"></arg>
              <arg name="maxAllowed-integerValue">50</arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field.value">Maintenance Ticket</arg>
              <arg name="field.name">customfield_22716</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
            <function type="class">
              <arg name="conditionList">3</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="comparisonType">1</arg>
              <arg name="precondition">true</arg>
              <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
              <arg name="preconditionNegateResult-booleanValue"></arg>
              <arg name="fieldValue">Planned Maintenance Ticket</arg>
              <arg name="preconditionMode-textValue">DISCARD</arg>
              <arg name="fieldsList">issuetype</arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="append.value"></arg>
              <arg name="maxAllowed-integerValue">50</arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field.value">Planned Maintenance Ticket</arg>
              <arg name="field.name">customfield_22716</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueCreateFunction</arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="append.value"></arg>
              <arg name="maxAllowed-integerValue"></arg>
              <arg name="runAsUser-user"></arg>
              <arg name="field.value">No</arg>
              <arg name="field.name">customfield_23264</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">5e04d019-e862-4b3e-b4e6-2fe357f2f60f</arg>
              <arg name="FIELD_NOTES">YCFgQ2xlYXIgY2FjaGU=</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxuXG4vKiBSRVNUIEFQSSBwZXIgR2VuZXJhemlvbmUgQWxsZWdhdG8gUmFwcG9ydG8gZGkgSW50ZXJ2ZW50byAqL1xucmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuLypTY3JpcHQgVmFyaWFibGVzKi9cbi8vUGVyIHRlc3QgZGEgY29uc29sZVxuLy9Jc3N1ZSBpc3N1ZSA9IGlzc3VlTWFuYWdlci5nZXRJc3N1ZUJ5S2V5SWdub3JlQ2FzZShcIk9QVVQtMTQwNjJcIilcbmJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9hdXRvbWF0aW9uL2NsZWFyQ2FjaGUvZGF0YU9iamVjdFwiXG5kZWYgYm9keV9yZXEgPSBbXVxuVVJMIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcbkh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbmNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5sb2cuZGVidWcgXCJib2R5X3JlcTogXCIgKyBib2R5X3JlcVxuY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxubG9nLmRlYnVnIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5jb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAwXCIpKXtcbiAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcbn0iLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuV29ya2Zsb3dFeGNlcHRpb247CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7CmltcG9ydCBncm9vdnkuanNvbi5TdHJlYW1pbmdKc29uQnVpbGRlcjsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5DdXN0b21GaWVsZE1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3I7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlCmltcG9ydCBvcmcuYXBhY2hlLmNvbW1vbnMuY29kZWMuYmluYXJ5LkJhc2U2NDsKaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGdyb292eXgubmV0Lmh0dHAuSFRUUEJ1aWxkZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KQ2F0ZWdvcnkgbG9nID0gQ2F0ZWdvcnkuZ2V0SW5zdGFuY2UoImNvbS5vbnJlc29sdmUuamlyYS5ncm9vdnkuUG9zdEZ1bmN0aW9uIikKbG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpCgpJc3N1ZU1hbmFnZXIgaXNzdWVNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKCk7CkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTsKCmRlZiByZXF1ZXN0TWV0aG9kCmRlZiBiYXNlVVJMCgpkZWYgZmlyc3RUaWNrZXQgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLmZpcnN0VGt0J10udG9TdHJpbmcoKSlbMF0KCmxvZy5kZWJ1ZyBpc3N1ZS5nZXRJc3N1ZVR5cGUoKS5uYW1lCmxvZy5kZWJ1ZyBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGZpcnN0VGlja2V0KQoKCi8qIFJFU1QgQVBJIHBlciBJbnZpbyBOb3RpZmljYSBFbWFpbCBPTlNJVEVfUkVQT1JUICovCnJlcXVlc3RNZXRob2QgPSAiR0VUIjsKCmlmKGlzc3VlLmdldElzc3VlVHlwZSgpLm5hbWUudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snaXQubmV3SW5zdGFsbGF0aW9uJ10pIHx8IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoZmlyc3RUaWNrZXQpIT1udWxsKXsKICAgIGRlZiBmaXJzdF90aWNrZXQ9ZmFsc2UKICAgIGRlZiB0ZW1wbGF0ZT0iIgogICAgaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShmaXJzdFRpY2tldCkhPW51bGwpewogICAgICAgIGZpcnN0X3RpY2tldD10cnVlCiAgICAgICAgdGVtcGxhdGU9IkZJUlNUX1RJQ0tFVCU3Q01BTlVGQUNUVVJFUiIKICAgIH1lbHNlewogICAgICAgIHRlbXBsYXRlPSJORVdfSU5TVEFMTEFUSU9OX0NSRUFURV9US1QlN0NNQU5VRkFDVFVSRVIiCiAgICB9CiAgICBiYXNlVVJMID0gImh0dHA6Ly8iICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyAiL29wL3Jlc3QvYXV0b21hdGlvbi9kb2N1bWVudC9nZW5lcmF0aW9uL2NoZWNrP0lTU1VFX0tFWT0iKyBpc3N1ZS5rZXkgKyImRE9DX0NBVEVHT1JZPSIgKyB0ZW1wbGF0ZSArICImRU5BQkxFRF9GT1JfRklSU1RfVElDS0VUPSIrZmlyc3RfdGlja2V0KyImSU1QT1JUX0ZST009T1BfQVNTRVQiCiAgICBsb2cuZGVidWcgYmFzZVVSTAogICAgVVJMIHVybCA9IG5ldyBVUkwoYmFzZVVSTCkKICAgIEh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7CiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7CiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eSgiQ29udGVudC1UeXBlIiwgImFwcGxpY2F0aW9uL2pzb24iKTsKICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KCJBY2NlcHQiLCAiKi8qIik7CiAgICBjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpOwogICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpOwogICAgY29ubmVjdGlvbi5jb25uZWN0KCk7CgogICAgZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKQogICAgZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpCiAgICBkZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KCkKICAgIGRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KCkKCiAgICBpZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoIjIwMCIpKXsKICAgICAgICBsb2cuZGVidWcgInVybDogIiArIHVybAogICAgICAgIGxvZy5kZWJ1ZyAiUmVzcG9uc2VDb2RlOiIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpCiAgICAgICAgbG9nLmRlYnVnICJSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKICAgICAgICBsb2cuZGVidWcgIkVycm9yU3RyZWFtOiAiICsgY29ubmVjdGlvbi5nZXRFcnJvclN0cmVhbSgpLnRvU3RyaW5nKCkKICAgICAgICBsb2cuZGVidWcgImdldEhlYWRlckZpZWxkcygpOiAiICsgY29ubmVjdGlvbi5nZXRIZWFkZXJGaWVsZHMoKQogICAgICAgIGRlZiBvdXRwdXRNc2cgPSAoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHQKICAgICAgICBsb2cuZGVidWcgIigoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dDogIiArIG91dHB1dE1zZwoKICAgICAgICBkZWYganNvblNsdXJwZXIgPSBuZXcgSnNvblNsdXJwZXIoKQogICAgICAgIGRlZiBqc29uX29iamVjdCA9IGpzb25TbHVycGVyLnBhcnNlVGV4dChvdXRwdXRNc2cpCiAgICAgICAgYXNzZXJ0IGpzb25fb2JqZWN0IGluc3RhbmNlb2YgTWFwICAKICAgICAgICBsb2cuZGVidWcgIm1lc3NhZ2U6ICIgKyAganNvbl9vYmplY3QubWVzc2FnZQoKICAgICAgICBlTGlzdEVycm9ycy5hZGQoIkUiKQogICAgICAgIGVMaXN0RXJyb3JzLmFkZCgiT1AtRE9DUyIpCiAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgIiAiICsganNvbl9vYmplY3QubWVzc2FnZSkKICAgICAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKQogICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycykKCiAgICAgICAgb3V0cHV0LmFkZChlTGlzdCkKICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCJFIiwgb3V0cHV0LnRvU3RyaW5nKCkpCiAgICB9Cn0K</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">fc3fcb3a-f02f-471a-98e8-7472f7f6b0fc</arg>
              <arg name="FIELD_NOTES">YCFgTGluayBOZXcgSW5zdGFsbGF0aW9uIFRpY2tldHM=</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">a73cc7d1-9469-4cfd-a066-0850639df8f8</arg>
              <arg name="FIELD_NOTES">YCFgSW50ZXJuYWwgVGVjaG5pY2lhbnM6IGZpbGwgaW4gT1BfSU5URVJOQUxfU1VQUExJRVIgKGludGVybmFsIHN1cHBsaWVyKSB0byBiZSB1c2VkIGlmIHRoZSB0aWNrZXQgaGFzIHRvIGJlIGFzc2lnbmVkIHRvIGludGVybmFsIHRlY2hz</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uY3Jvd2QuZW1iZWRkZWQuYXBpLlVzZXJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLnVzZXIuVXNlclByb3BlcnR5TWFuYWdlclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS51c2VyLnV0aWwuVXNlck1hbmFnZXIgXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5ldmVudC50eXBlLkV2ZW50RGlzcGF0Y2hPcHRpb25cblxuUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKVxuRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJylcbnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7XG5cdHByb3BlcnRpZXMubG9hZChpdClcbn1cbi8qU2NyaXB0IFZhcmlhYmxlcyovXG4vL1BlciB0ZXN0IGRhIGNvbnNvbGVcbi8vZGVmIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpXG4vL0lzc3VlIGlzc3VlID0gaXNzdWVNYW5hZ2VyLmdldElzc3VlQnlLZXlJZ25vcmVDYXNlKFwiQUFTLTM3NTNcIilcblVzZXJQcm9wZXJ0eU1hbmFnZXIgdXNlclByb3BlcnR5TWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldFVzZXJQcm9wZXJ0eU1hbmFnZXIoKVxuQ2xhc3MgaXFsRmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKFwiY29tLnJpYWRhbGFicy5qaXJhLnBsdWdpbnMuaW5zaWdodC5jaGFubmVsLmV4dGVybmFsLmFwaS5mYWNhZGUuSVFMRmFjYWRlXCIpO1xuZGVmIGlxbEZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShpcWxGYWNhZGVDbGFzcyk7XG4vKiBHZXQgSW5zaWdodCBPYmplY3QgRmFjYWRlIGZyb20gcGx1Z2luIGFjY2Vzc29yICovXG5DbGFzcyBvYmplY3RGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RGYWNhZGVcIik7XG5kZWYgb2JqZWN0RmFjYWRlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKG9iamVjdEZhY2FkZUNsYXNzKTtcblxuZGVmIHNjaGVtYU9QQUFpZCA9IHByb3BlcnRpZXNbJ2lzY2hlbWEuYWEuaWQnXS50b0ludGVnZXIoKVxuZGVmIHNjaGVtYURPID0gcHJvcGVydGllc1snaXNjaGVtYS5kYm8nXS50b1N0cmluZygpXG5kZWYgdmlzaWJpbGl0eSA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YudGt0VmlzaWJpbGl0eSddID8gcHJvcGVydGllc1snY2YudGt0VmlzaWJpbGl0eSddLnRvU3RyaW5nKCkgOiBcIk9QX1RLVF9WSVNJQklMSVRZX0tFWVwiKVswXVxuZGVmIGludGVybmFsU3VwcGxpZXIgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLmludGVybmFsU3VwcGxpZXInXSA/IHByb3BlcnRpZXNbJ2NmLmludGVybmFsU3VwcGxpZXInXS50b1N0cmluZygpIDogXCJPUF9JTlRFUk5BTF9TVVBQTElFUlwiKVswXVxuXG5kZWYgY3VycmVudFVzZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRKaXJhQXV0aGVudGljYXRpb25Db250ZXh0KCkuZ2V0TG9nZ2VkSW5Vc2VyKClcbmRlZiB2aXNpYmlsaXR5S2V5ID0gaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZSh2aXNpYmlsaXR5KVswXS50b1N0cmluZygpLnN1YnN0cmluZyhpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHZpc2liaWxpdHkpWzBdLnRvU3RyaW5nKCkuaW5kZXhPZignKCcpKzEsaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZSh2aXNpYmlsaXR5KVswXS50b1N0cmluZygpLmluZGV4T2YoJyknKSlcbi8vbG9nLmRlYnVnIHZpc2liaWxpdHlLZXlcbmRlZiBjb21wYW55UmVmID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QmVhbih2aXNpYmlsaXR5S2V5KS5nZXRJZCgpLCBwcm9wZXJ0aWVzWydpb2JqLnZpc2liaWxpdHlLZXkuY29tcGFueVJlZiddLnRvU3RyaW5nKCkpLmdldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnMoKTtcbi8vbG9nLmluZm8gXCJjb21wYW55UmVmOiBcIiArIGNvbXBhbnlSZWZcbmRlZiBjb21wYW55UmVmSWQgPSBjb21wYW55UmVmLnRvU3RyaW5nKCkuc3Vic3RyaW5nKGNvbXBhbnlSZWYudG9TdHJpbmcoKS5pbmRleE9mKCcoJykrMSxjb21wYW55UmVmLnRvU3RyaW5nKCkuaW5kZXhPZignKScpKVxuZGVmIGNvbXBhbnlTdXBwbGllciA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbihjb21wYW55UmVmSWQudG9JbnRlZ2VyKCksIHByb3BlcnRpZXNbJ2lvYmoudmlzaWJpbGl0eUtleS5zdXBwbGllclJlZiddLnRvU3RyaW5nKCkpLmdldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnMoKTtcbi8vbG9nLmRlYnVnIGNvbXBhbnlTdXBwbGllclxuZGVmIGNvbXBhbnlTdXBwbGllcklkID0gY29tcGFueVN1cHBsaWVyLnRvU3RyaW5nKCkuc3Vic3RyaW5nKGNvbXBhbnlTdXBwbGllci50b1N0cmluZygpLmluZGV4T2YoJygnKSsxLGNvbXBhbnlTdXBwbGllci50b1N0cmluZygpLmluZGV4T2YoJyknKSlcbi8vbG9nLmRlYnVnIGNvbXBhbnlTdXBwbGllcklkXG5kZWYgb2JqZWN0cyA9IGlxbEZhY2FkZS5maW5kT2JqZWN0c0J5SVFMQW5kU2NoZW1hKHNjaGVtYU9QQUFpZCwgXCJvYmplY3RUeXBlPVN1cHBsaWVyIEFORCBTVVBQTElFUl9SRUYuS2V5ID0gXCIgKyBzY2hlbWFETytcIi1cIitjb21wYW55U3VwcGxpZXJJZClcbi8vbG9nLmRlYnVnIG9iamVjdHNcbmRlZiBvYmpLZXkgPSBvYmplY3RzWzBdLnRvU3RyaW5nKCkuc3Vic3RyaW5nKG9iamVjdHNbMF0udG9TdHJpbmcoKS5pbmRleE9mKCcoJykrMSxvYmplY3RzWzBdLnRvU3RyaW5nKCkuaW5kZXhPZignKScpKVxuLy9sb2cuZGVidWcgb2JqS2V5XG5NdXRhYmxlSXNzdWUgbWkgPSAoTXV0YWJsZUlzc3VlKSBpc3N1ZTtcbm1pLnNldEN1c3RvbUZpZWxkVmFsdWUoaW50ZXJuYWxTdXBwbGllciwgb2JqZWN0cyk7XG5Db21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKS51cGRhdGVJc3N1ZShjdXJyZW50VXNlciwgbWksIEV2ZW50RGlzcGF0Y2hPcHRpb24uRE9fTk9UX0RJU1BBVENILCBmYWxzZSk7XG4iLCJzY3JpcHRQYXRoIjpudWxsfQ==</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">1</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">5e04d019-e862-4b3e-b4e6-2fe357f2f60f</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IERvYyBUZW1wbGF0ZSBnZW5lcmF0aW9uIC0gc2UgTmV3IEluc3RhbGxhdGlvbiBPUiBGaXJzdCBUaWNrZXQgPSB0cnVl</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5Xb3JrZmxvd0V4Y2VwdGlvbjtcbmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvblxuaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyO1xuaW1wb3J0IGdyb292eS5qc29uLlN0cmVhbWluZ0pzb25CdWlsZGVyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5DdXN0b21GaWVsZE1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3I7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5NdXRhYmxlSXNzdWVcbmltcG9ydCBvcmcuYXBhY2hlLmNvbW1vbnMuY29kZWMuYmluYXJ5LkJhc2U2NDtcbmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5XG5pbXBvcnQgZ3Jvb3Z5eC5uZXQuaHR0cC5IVFRQQnVpbGRlclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcblxuZGVmIHJlcXVlc3RNZXRob2RcbmRlZiBiYXNlVVJMXG5cbmRlZiBmaXJzdFRpY2tldCA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YuZmlyc3RUa3QnXS50b1N0cmluZygpKVswXVxuZGVmIGFzc2V0ID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi5hc3NldCddLnRvU3RyaW5nKCkpWzBdXG5kZWYgc3VwcGxpZXIgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLnN1cHBsaWVyJ10udG9TdHJpbmcoKSlbMF1cblxubG9nLmRlYnVnIGlzc3VlLmdldElzc3VlVHlwZSgpLm5hbWVcbmxvZy5kZWJ1ZyBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGZpcnN0VGlja2V0KVxuXG5cbi8qIFJFU1QgQVBJIHBlciBJbnZpbyBOb3RpZmljYSBFbWFpbCBPTlNJVEVfUkVQT1JUICovXG5yZXF1ZXN0TWV0aG9kID0gXCJHRVRcIjtcblxuaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzdXBwbGllcikhPW51bGwgJiYgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhc3NldCkhPW51bGwgJiYgKGlzc3VlLmdldElzc3VlVHlwZSgpLm5hbWUudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snaXQubmV3SW5zdGFsbGF0aW9uJ10pIHx8IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoZmlyc3RUaWNrZXQpIT1udWxsKSl7XG4gICAgZGVmIGZpcnN0X3RpY2tldD1mYWxzZVxuICAgIGRlZiB0ZW1wbGF0ZT1cIlwiXG4gICAgaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShmaXJzdFRpY2tldCkhPW51bGwpe1xuICAgICAgICBmaXJzdF90aWNrZXQ9dHJ1ZVxuICAgICAgICB0ZW1wbGF0ZT1cIkZJUlNUX1RJQ0tFVCU3Q01BTlVGQUNUVVJFUlwiXG4gICAgfWVsc2V7XG4gICAgICAgIHRlbXBsYXRlPVwiTkVXX0lOU1RBTExBVElPTl9DUkVBVEVfVEtUJTdDTUFOVUZBQ1RVUkVSXCJcbiAgICB9XG4gICAgXG4gICAgaWYoaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpdC5uZXdJbnN0YWxsYXRpb24nXSkpe1xuICAgICAgICBiYXNlVVJMID0gXCJodHRwOi8vXCIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArIFwiL29wL3Jlc3QvYXV0b21hdGlvbi9kb2N1bWVudC9nZW5lcmF0aW9uL2NoZWNrP0lTU1VFX0tFWT1cIisgaXNzdWUua2V5ICtcIiZET0NfQ0FURUdPUlk9XCIgKyB0ZW1wbGF0ZSArIFwiJkVOQUJMRURfRk9SX0ZJUlNUX1RJQ0tFVD1cIitmaXJzdF90aWNrZXQrXCImSU1QT1JUX0ZST009XCJcbiAgICB9ZWxzZXtcbiAgICAgICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2F1dG9tYXRpb24vZG9jdW1lbnQvZ2VuZXJhdGlvbi9jaGVjaz9JU1NVRV9LRVk9XCIrIGlzc3VlLmtleSArXCImRE9DX0NBVEVHT1JZPVwiICsgdGVtcGxhdGUgKyBcIiZFTkFCTEVEX0ZPUl9GSVJTVF9USUNLRVQ9XCIrZmlyc3RfdGlja2V0K1wiJklNUE9SVF9GUk9NPU9QX0FTU0VUXCJcbiAgICB9XG4gICAgXG4gICAgbG9nLmRlYnVnIGJhc2VVUkxcbiAgICBVUkwgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgIEh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbiAgICBjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbiAgICBjb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuICAgIGRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5cdGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICBcbiAgICBpZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDBcIikpe1xuICAgICAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuICAgICAgICBsb2cuZGVidWcgXCJFcnJvclN0cmVhbTogXCIgKyBjb25uZWN0aW9uLmdldEVycm9yU3RyZWFtKCkudG9TdHJpbmcoKVxuICAgICAgICBsb2cuZGVidWcgXCJnZXRIZWFkZXJGaWVsZHMoKTogXCIgKyBjb25uZWN0aW9uLmdldEhlYWRlckZpZWxkcygpXG4gICAgICAgIGRlZiBvdXRwdXRNc2cgPSAoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHRcbiAgICAgICAgbG9nLmRlYnVnIFwiKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0OiBcIiArIG91dHB1dE1zZ1xuXG4gICAgICAgIGRlZiBqc29uU2x1cnBlciA9IG5ldyBKc29uU2x1cnBlcigpXG4gICAgICAgIGRlZiBqc29uX29iamVjdCA9IGpzb25TbHVycGVyLnBhcnNlVGV4dChvdXRwdXRNc2cpXG4gICAgICAgIGFzc2VydCBqc29uX29iamVjdCBpbnN0YW5jZW9mIE1hcCAgXG4gICAgICAgIGxvZy5kZWJ1ZyBcIm1lc3NhZ2U6IFwiICsgIGpzb25fb2JqZWN0Lm1lc3NhZ2VcblxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIk9QLURPQ1NcIilcbiAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5tZXNzYWdlKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKVxuICAgICAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpXG5cbiAgICAgICAgb3V0cHV0LmFkZChlTGlzdClcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbihcIkVcIiwgb3V0cHV0LnRvU3RyaW5nKCkpXG4gICAgfVxufVxuIiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuV29ya2Zsb3dFeGNlcHRpb247CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7CmltcG9ydCBncm9vdnkuanNvbi5TdHJlYW1pbmdKc29uQnVpbGRlcjsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5DdXN0b21GaWVsZE1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3I7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlCmltcG9ydCBvcmcuYXBhY2hlLmNvbW1vbnMuY29kZWMuYmluYXJ5LkJhc2U2NDsKaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGdyb292eXgubmV0Lmh0dHAuSFRUUEJ1aWxkZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KQ2F0ZWdvcnkgbG9nID0gQ2F0ZWdvcnkuZ2V0SW5zdGFuY2UoImNvbS5vbnJlc29sdmUuamlyYS5ncm9vdnkuUG9zdEZ1bmN0aW9uIikKbG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpCgpJc3N1ZU1hbmFnZXIgaXNzdWVNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKCk7CkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTsKCmRlZiByZXF1ZXN0TWV0aG9kCmRlZiBiYXNlVVJMCgpkZWYgZmlyc3RUaWNrZXQgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLmZpcnN0VGt0J10udG9TdHJpbmcoKSlbMF0KCmxvZy5kZWJ1ZyBpc3N1ZS5nZXRJc3N1ZVR5cGUoKS5uYW1lCmxvZy5kZWJ1ZyBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGZpcnN0VGlja2V0KQoKCi8qIFJFU1QgQVBJIHBlciBJbnZpbyBOb3RpZmljYSBFbWFpbCBPTlNJVEVfUkVQT1JUICovCnJlcXVlc3RNZXRob2QgPSAiR0VUIjsKCmlmKGlzc3VlLmdldElzc3VlVHlwZSgpLm5hbWUudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snaXQubmV3SW5zdGFsbGF0aW9uJ10pIHx8IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoZmlyc3RUaWNrZXQpIT1udWxsKXsKICAgIGRlZiBmaXJzdF90aWNrZXQ9ZmFsc2UKICAgIGRlZiB0ZW1wbGF0ZT0iIgogICAgaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShmaXJzdFRpY2tldCkhPW51bGwpewogICAgICAgIGZpcnN0X3RpY2tldD10cnVlCiAgICAgICAgdGVtcGxhdGU9IkZJUlNUX1RJQ0tFVCU3Q01BTlVGQUNUVVJFUiIKICAgIH1lbHNlewogICAgICAgIHRlbXBsYXRlPSJORVdfSU5TVEFMTEFUSU9OX0NSRUFURV9US1QlN0NNQU5VRkFDVFVSRVIiCiAgICB9CiAgICBiYXNlVVJMID0gImh0dHA6Ly8iICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyAiL29wL3Jlc3QvYXV0b21hdGlvbi9kb2N1bWVudC9nZW5lcmF0aW9uL2NoZWNrP0lTU1VFX0tFWT0iKyBpc3N1ZS5rZXkgKyImRE9DX0NBVEVHT1JZPSIgKyB0ZW1wbGF0ZSArICImRU5BQkxFRF9GT1JfRklSU1RfVElDS0VUPSIrZmlyc3RfdGlja2V0KyImSU1QT1JUX0ZST009T1BfQVNTRVQiCiAgICBsb2cuZGVidWcgYmFzZVVSTAogICAgVVJMIHVybCA9IG5ldyBVUkwoYmFzZVVSTCkKICAgIEh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7CiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7CiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eSgiQ29udGVudC1UeXBlIiwgImFwcGxpY2F0aW9uL2pzb24iKTsKICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KCJBY2NlcHQiLCAiKi8qIik7CiAgICBjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpOwogICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpOwogICAgY29ubmVjdGlvbi5jb25uZWN0KCk7CgogICAgZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKQogICAgZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpCiAgICBkZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KCkKICAgIGRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KCkKCiAgICBpZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoIjIwMCIpKXsKICAgICAgICBsb2cuZGVidWcgInVybDogIiArIHVybAogICAgICAgIGxvZy5kZWJ1ZyAiUmVzcG9uc2VDb2RlOiIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpCiAgICAgICAgbG9nLmRlYnVnICJSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKICAgICAgICBsb2cuZGVidWcgIkVycm9yU3RyZWFtOiAiICsgY29ubmVjdGlvbi5nZXRFcnJvclN0cmVhbSgpLnRvU3RyaW5nKCkKICAgICAgICBsb2cuZGVidWcgImdldEhlYWRlckZpZWxkcygpOiAiICsgY29ubmVjdGlvbi5nZXRIZWFkZXJGaWVsZHMoKQogICAgICAgIGRlZiBvdXRwdXRNc2cgPSAoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHQKICAgICAgICBsb2cuZGVidWcgIigoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dDogIiArIG91dHB1dE1zZwoKICAgICAgICBkZWYganNvblNsdXJwZXIgPSBuZXcgSnNvblNsdXJwZXIoKQogICAgICAgIGRlZiBqc29uX29iamVjdCA9IGpzb25TbHVycGVyLnBhcnNlVGV4dChvdXRwdXRNc2cpCiAgICAgICAgYXNzZXJ0IGpzb25fb2JqZWN0IGluc3RhbmNlb2YgTWFwICAKICAgICAgICBsb2cuZGVidWcgIm1lc3NhZ2U6ICIgKyAganNvbl9vYmplY3QubWVzc2FnZQoKICAgICAgICBlTGlzdEVycm9ycy5hZGQoIkUiKQogICAgICAgIGVMaXN0RXJyb3JzLmFkZCgiT1AtRE9DUyIpCiAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgIiAiICsganNvbl9vYmplY3QubWVzc2FnZSkKICAgICAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKQogICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycykKCiAgICAgICAgb3V0cHV0LmFkZChlTGlzdCkKICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCJFIiwgb3V0cHV0LnRvU3RyaW5nKCkpCiAgICB9Cn0K</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">23c263e9-c1c5-4814-9728-19694c287347</arg>
              <arg name="FIELD_NOTES">YCFgQ3JlYXRlIFNOIGlmIG5vdCBleGlzdGluZw==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuXG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUubGluay5Jc3N1ZUxpbmtcblxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpO1xuQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpO1xuXG5kZWYgU04gPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfU0FQX1NFUlZJQ0VfTk9USUZJQ0FUSU9OXCIpWzBdXG5kZWYgcmVxdWVzdE1ldGhvZFxuZGVmIGJhc2VVUkxcblxuVVJMIHVybFxuSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvblxuXG5pZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKFNOKSA9PSBudWxsICYmIGlzc3VlLmlzc3VlVHlwZS5uYW1lICE9IFwiUGxhbm5lZCBNYWludGVuYW5jZSBUaWNrZXRcIil7XG4gICAgcmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuXG4gICAgZGVmIGJvZHlfcmVxID0gW11cbiAgICBib2R5X3JlcSA9IFtcbiAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXksXG4gICAgICAgIFwic3RhdHVzXCI6IFwiSU5QXCJcbiAgICBdIFxuXG4gICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvYWZ0ZXIvc2FsZXMvY3JlYXRlL3NlcnZpY2Uvbm90aWZpY2F0aW9uXCJcblxuICAgIGxvZy5kZWJ1ZyBcImJhc2VVUkwgU046IFwiICsgYmFzZVVSTFxuICAgIGxvZy5kZWJ1ZyBcImJvZHlfcmVxIFNOOiBcIiArIGJvZHlfcmVxXG4gICAgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG4gICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxuICAgIGxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpO1xuXG4gICAgZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KClcblxuICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMVwiKSl7XG4gICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG4gICAgICAgIFxuICAgICAgICBkZWYgb3V0cHV0TXNnID0gKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0XG4gICAgICAgIGxvZy5kZWJ1ZyBcIigoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dDogXCIgKyBvdXRwdXRNc2dcblxuICAgICAgICBkZWYganNvblNsdXJwZXIgPSBuZXcgSnNvblNsdXJwZXIoKVxuICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgICAgICBhc3NlcnQganNvbl9vYmplY3QgaW5zdGFuY2VvZiBNYXAgIFxuICAgICAgICBsb2cuZGVidWcgXCJtZXNzYWdlOiBcIiArICBqc29uX29iamVjdC5tZXNzYWdlXG4gICAgICAgIGxvZy5kZWJ1ZyBcImVycm9yczogXCIgKyAganNvbl9vYmplY3QuZXJyb3JzLnRvU3RyaW5nKClcblxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIk9QLVNBUC1TTi1VUERBVEVcIilcbiAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5lcnJvcnNbMF0pXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChlcnJvck1zZ3MpXG4gICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycylcblxuICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcbiAgICB9XG59Iiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </initial-actions>
  <global-actions>
    <action id="351" name="Sospendi Ticket" view="fieldscreen">
      <meta name="opsbar-sequence">110</meta>
      <meta name="jira.description"></meta>
      <meta name="jira.fieldscreen.id">20200</meta>
      <restrict-to>
        <conditions>
          <condition type="class">
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
            <arg name="FIELD_CONDITION">YCFgIWlzc3VlLmdldFN0YXR1cygpLmdldE5hbWUoKS50b1N0cmluZygpLmVxdWFscygiQ2xvc2VkIil8fHw=</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
            <arg name="FIELD_PREVIEW_ISSUE"></arg>
          </condition>
        </conditions>
      </restrict-to>
      <results>
        <unconditional-result old-status="null" status="null" step="16">
          <post-functions>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="maxAllowed-integerValue">50</arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field">customfield_22693</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="field6">customfield_22647</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
              <arg name="field3">customfield_22758</arg>
              <arg name="field2">customfield_22756</arg>
              <arg name="scopeSource-jql"></arg>
              <arg name="field5">customfield_23603</arg>
              <arg name="field4">customfield_22757</arg>
            </function>
            <function type="class">
              <arg name="field.name">resolution</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
              <arg name="field.value">10401</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="361" name="Annulla Ticket" view="fieldscreen">
      <meta name="opsbar-sequence">120</meta>
      <meta name="jira.description"></meta>
      <meta name="jira.fieldscreen.id">20200</meta>
      <restrict-to>
        <conditions>
          <condition type="class">
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
            <arg name="FIELD_CONDITION">YCFgIWlzc3VlLmdldFN0YXR1cygpLmdldE5hbWUoKS50b1N0cmluZygpLmVxdWFscygiQ2xvc2VkIil8fHw=</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
            <arg name="FIELD_PREVIEW_ISSUE"></arg>
          </condition>
        </conditions>
      </restrict-to>
      <results>
        <unconditional-result old-status="null" status="null" step="17">
          <post-functions>
            <function type="class">
              <arg name="conditionList">3</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="comparisonType">1</arg>
              <arg name="precondition">true</arg>
              <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
              <arg name="preconditionNegateResult-booleanValue"></arg>
              <arg name="fieldValue">Planned Maintenance Ticket</arg>
              <arg name="preconditionMode-textValue">DISCARD</arg>
              <arg name="fieldsList">issuetype</arg>
            </function>
            <function type="class">
              <arg name="field.copyFieldSource1"></arg>
              <arg name="textValue">10103</arg>
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="maxAllowed-integerValue">50</arg>
              <arg name="workflowName-textValue">OPAA: PM Task Workflow</arg>
              <arg name="performTransitionAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="scopeType">PARENT</arg>
              <arg name="destination-scopeTarget">SUB_TASK</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitieslinkedtransition-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="integerValue">161</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">ch.beecom.jira.jsu.workflow.function.linkedtransition.LinkedTransitionFunction</arg>
              <arg name="scopeSource-jql"></arg>
              <arg name="status"></arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="maxAllowed-integerValue">50</arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field">customfield_22693</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="field6">customfield_22647</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
              <arg name="field3">customfield_22758</arg>
              <arg name="field2">customfield_22756</arg>
              <arg name="scopeSource-jql"></arg>
              <arg name="field5">customfield_23603</arg>
              <arg name="field4">customfield_22757</arg>
            </function>
            <function type="class">
              <arg name="field.name">resolution</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
              <arg name="field.value">10103</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </global-actions>
  <common-actions>
    <action id="931" name="Start Traveling">
      <meta name="jira.description"></meta>
      <meta name="jira.fieldscreen.id"></meta>
      <restrict-to>
        <conditions>
          <condition type="class">
            <arg name="FIELD_FUNCTION_ID">787fd14c-d7a6-4a78-a3cd-9488c7d37a1a</arg>
            <arg name="FIELD_INVERT_CONDITION"></arg>
            <arg name="FIELD_NOTES">YCFgRElTQUJMRUQ=</arg>
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
            <arg name="FIELD_USER_IDS">arianna.fabbri</arg>
          </condition>
        </conditions>
      </restrict-to>
      <results>
        <unconditional-result old-status="null" status="null" step="21">
          <post-functions>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="741" name="Annulla Richiesta Preventivo">
      <meta name="jira.description"></meta>
      <meta name="jira.fieldscreen.id"></meta>
      <results>
        <unconditional-result old-status="null" status="null" step="1">
          <post-functions>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeSource-jql"></arg>
              <arg name="maxAllowed-integerValue">50</arg>
              <arg name="field11">customfield_22677</arg>
              <arg name="field12">customfield_22675</arg>
              <arg name="field10">customfield_22674</arg>
              <arg name="field">customfield_22656</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="field13">customfield_22678</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="field7">customfield_22647</arg>
              <arg name="field6">customfield_23603</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="field9">customfield_22676</arg>
              <arg name="field8">customfield_22673</arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
              <arg name="field3">customfield_22693</arg>
              <arg name="field2">customfield_22681</arg>
              <arg name="field5">customfield_23402</arg>
              <arg name="field4">customfield_23401</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="101" name="Conferma senza Notifica al Cliente" view="fieldscreen">
      <meta name="opsbar-sequence">20</meta>
      <meta name="jira.description"></meta>
      <meta name="jira.fieldscreen.id">19923</meta>
      <restrict-to>
        <conditions>
          <condition type="class">
            <arg name="FIELD_FUNCTION_ID">3f2fe9ea0b98294db32d475986c17366260064ed</arg>
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
            <arg name="disabled">true</arg>
            <arg name="FIELD_CONDITION">YCFgaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ05ldyBJbnN0YWxsYXRpb24nfHx8</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
            <arg name="FIELD_PREVIEW_ISSUE"></arg>
          </condition>
        </conditions>
      </restrict-to>
      <validators>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">5075c35e-1e44-4679-bd11-39d59fb7bffa</arg>
          <arg name="FIELD_NOTES">YCFgQ3JlYXRlIFNOIGZvciBvbGQgdGlja2V0cw==</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuXG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUubGluay5Jc3N1ZUxpbmtcblxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpO1xuQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpO1xuXG5kZWYgU04gPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfU0FQX1NFUlZJQ0VfTk9USUZJQ0FUSU9OXCIpWzBdXG5kZWYgcmVxdWVzdE1ldGhvZFxuZGVmIGJhc2VVUkxcblxuVVJMIHVybFxuSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvblxuXG5pZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKFNOKSA9PSBudWxsICYmIGlzc3VlLmlzc3VlVHlwZS5uYW1lICE9IFwiUGxhbm5lZCBNYWludGVuYW5jZSBUaWNrZXRcIil7XG4gICAgcmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuXG4gICAgZGVmIGJvZHlfcmVxID0gW11cbiAgICBib2R5X3JlcSA9IFtcbiAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXksXG4gICAgICAgIFwic3RhdHVzXCI6IFwiT1BFXCJcbiAgICBdIFxuXG4gICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvYWZ0ZXIvc2FsZXMvY3JlYXRlL3NlcnZpY2Uvbm90aWZpY2F0aW9uXCJcblxuICAgIGxvZy5kZWJ1ZyBcImJhc2VVUkwgU046IFwiICsgYmFzZVVSTFxuICAgIGxvZy5kZWJ1ZyBcImJvZHlfcmVxIFNOOiBcIiArIGJvZHlfcmVxXG4gICAgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG4gICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxuICAgIGxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpO1xuXG4gICAgZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KClcblxuICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMVwiKSl7XG4gICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG4gICAgICAgIFxuICAgICAgICBkZWYgb3V0cHV0TXNnID0gKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0XG4gICAgICAgIGxvZy5kZWJ1ZyBcIigoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dDogXCIgKyBvdXRwdXRNc2dcblxuICAgICAgICBkZWYganNvblNsdXJwZXIgPSBuZXcgSnNvblNsdXJwZXIoKVxuICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgICAgICBhc3NlcnQganNvbl9vYmplY3QgaW5zdGFuY2VvZiBNYXAgIFxuICAgICAgICBsb2cuZGVidWcgXCJtZXNzYWdlOiBcIiArICBqc29uX29iamVjdC5tZXNzYWdlXG4gICAgICAgIGxvZy5kZWJ1ZyBcImVycm9yczogXCIgKyAganNvbl9vYmplY3QuZXJyb3JzLnRvU3RyaW5nKClcblxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIk9QLVNBUC1TTi1VUERBVEVcIilcbiAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5lcnJvcnNbMF0pXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChlcnJvck1zZ3MpXG4gICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycylcblxuICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcbiAgICB9XG59Iiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="disabled">true</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">5ee7ae0d-08e5-4368-b76a-c0a38b7b4a52</arg>
          <arg name="FIELD_NOTES">YCFgU0FQOiB1cGRhdGUgU04gc3RhdHVz</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="null" status="null" step="4">
          <post-functions>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
            <function type="class">
              <arg name="field.copyFieldSource1"></arg>
              <arg name="textValue">-1</arg>
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="maxAllowed-integerValue"></arg>
              <arg name="workflowName-textValue">OPAA: PM Task Workflow</arg>
              <arg name="performTransitionAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="scopeType">PARENT</arg>
              <arg name="destination-scopeTarget">SUB_TASK</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitieslinkedtransition-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="integerValue">31</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">ch.beecom.jira.jsu.workflow.function.linkedtransition.LinkedTransitionFunction</arg>
              <arg name="scopeSource-jql"></arg>
              <arg name="status"></arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">2fd21626-8339-471c-b600-1cf830515e55</arg>
              <arg name="FIELD_NOTES">YCFgUE0gVGFzazogY2xlYXIgc3ViLXRhc2tzIGNhY2hl</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxuXG5pc3N1ZS5nZXRTdWJUYXNrT2JqZWN0cygpLmVhY2h7XG4gICAgaSAtPiBcbiAgICAvKiBSRVNUIEFQSSBwZXIgcHVsaXppYSBjYWNoZSBpc3N1ZSBsaW5rYXRhICovXG4gICAgcmVxdWVzdE1ldGhvZCA9IFwiR0VUXCI7XG4gICAgLypTY3JpcHQgVmFyaWFibGVzKi9cbiAgICAvL1BlciB0ZXN0IGRhIGNvbnNvbGVcbiAgICAvL0lzc3VlIGlzc3VlID0gaXNzdWVNYW5hZ2VyLmdldElzc3VlQnlLZXlJZ25vcmVDYXNlKFwiQUFTLTMyNTM1XCIpXG4gICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2F1dG9tYXRpb24vY2xlYXJDYWNoZS90aWNrZXRrZXkvXCIgKyBpLmtleVxuICAgIFVSTCB1cmwgPSBuZXcgVVJMKGJhc2VVUkwpXG4gICAgSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLThcIik7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJBY2NlcHRcIiwgXCIqLypcIik7XG4gICAgY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbiAgICBjb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5jb25uZWN0KCk7XG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMFwiKSl7XG4gICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG4gICAgfVxufVxuIiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">18957343-c266-4078-a59d-eaf771da397c</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIGxpbmtlZFRpY2tldHMgJiBGYXN0LVRyYW5zYWN0IHRoZW0=</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="841" name="Chiudi Intervento da cartaceo" view="fieldscreen">
      <meta name="opsbar-sequence">10</meta>
      <meta name="jira.description"></meta>
      <meta name="jira.fieldscreen.id">20300</meta>
      <restrict-to>
        <conditions>
          <condition type="class">
            <arg name="FIELD_FUNCTION_ID">e11c2942-0754-423c-8e92-d78a6375f221</arg>
            <arg name="FIELD_NOTES">YCFgT25seSBmb3IgUE0gVGlja2V0</arg>
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
            <arg name="disabled">false</arg>
            <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnUGxhbm5lZCBNYWludGVuYW5jZSBUaWNrZXQnIiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
          </condition>
        </conditions>
      </restrict-to>
      <validators>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">fa37467a9382f8924cd169d5ba599dcb71925405</arg>
          <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlcXVpcmVkIEZpZWxkcyAtIHNvbG8gZXJyb3JzLCBubyB3YXJuaW5ncw==</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
          <arg name="FIELD_INLINE_SCRIPT"></arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="disabled">true</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
          <arg name="FIELD_SCRIPT_FILE"></arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">9fe0fa5191d4b6a91ba7485380ff8d0a9fda8fe7</arg>
          <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBPUCBnZW5lcmF6aW9uZSBSYXBwb3J0byBkaSBpbnRlcnZlbnRv</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxubG9nLmRlYnVnIFwiT25TaXRlIFJlcG9ydCBwZXIgaXNzdWU6IFwiICsgaXNzdWUua2V5XG4vKiBSRVNUIEFQSSBwZXIgR2VuZXJhemlvbmUgQWxsZWdhdG8gUmFwcG9ydG8gZGkgSW50ZXJ2ZW50byAqL1xucmVxdWVzdE1ldGhvZCA9IFwiUFVUXCI7XG4vKlNjcmlwdCBWYXJpYWJsZXMqL1xuLy9QZXIgdGVzdCBkYSBjb25zb2xlXG4vL0lzc3VlIGlzc3VlID0gaXNzdWVNYW5hZ2VyLmdldElzc3VlQnlLZXlJZ25vcmVDYXNlKFwiT1BVVC0xNDA2MlwiKVxuXG5pbnQgT1BBQSA9IHByb3BlcnRpZXNbJ2lzY2hlbWEuYWEuaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5pbnQgREJPID0gcHJvcGVydGllc1snaXNjaGVtYS5kYm8uaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5cbi8qUmltb3ppb25lIGFsbGVnYXRvIHJhcHBvcnRvIGRpIGludGVydmVudG8gYXBwZW5hIGNyZWF0byovXG4vKiBHZXQgSW5zaWdodCBJUUwgRmFjYWRlIGZyb20gcGx1Z2luIGFjY2Vzc29yICovXG5DbGFzcyBpcWxGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5JUUxGYWNhZGVcIik7IFxuZGVmIGlxbEZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShpcWxGYWNhZGVDbGFzcyk7XG5cbi8qIEdldCBJbnNpZ2h0IE9iamVjdCBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdEZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdEZhY2FkZVwiKTtcbmRlZiBvYmplY3RGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0RmFjYWRlQ2xhc3MpO1xuXG4vKiBHZXQgSW5zaWdodCBPYmplY3QgVHlwZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdFR5cGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlRmFjYWRlXCIpO1xuZGVmIG9iamVjdFR5cGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUZhY2FkZUNsYXNzKTtcblxuLyogR2V0IEluc2lnaHQgT2JqZWN0IEF0dHJpYnV0ZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlXCIpO1xuZGVmIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZUNsYXNzKTtcblxuQ2xhc3Mgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LnNlcnZpY2VzLm1vZGVsLmZhY3RvcnkuT2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlcIik7XG5kZWYgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnkgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyk7XG5cbi8qIFNwZWNpZnkgdGhlIHNjaGVtYSBpZCBhcyB3ZWxsIGFzIHRoZSBJUUwgdGhhdCB3aWxsIGZldGNoIG9iamVjdHMuIEluIHRoaXMgY2FzZSBhbGwgb2JqZWN0cyB3aXRoIE5hbWUgbWF0Y2hpbmcgdGhlIHZhbHVlQ0YsIGJlIHN1cmUgdG8gaW5jbHVkZSBcIiBhcm91bmQgdmFsdWUgKi9cbmRlZiBvYmplY3RzID0gaXFsRmFjYWRlLmZpbmRPYmplY3RzQnlJUUxBbmRTY2hlbWEoREJPLCBcIlxcXCJcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmNhdGVnb3J5UmVmJ10udG9TdHJpbmcoKSArIFwiXFxcIi5OYW1lIExJS0UgXFxcIlJhcHBvcnRvIGRpIGludGVydmVudG9cXFwiIEFORCBcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmRlbGV0ZWQnXS50b1N0cmluZygpICsgXCIhPXRydWUgQU5EIG9iamVjdCBIQVZJTkcgY29ubmVjdGVkVGlja2V0cyhrZXkgPSBcIiArIGlzc3VlLmtleS50b1N0cmluZygpICsgXCIpXCIpOyAvLyBTZWUgdGhlIGNvbXBsZXRlIGxpc3Qgb2YgcG9zc2libGUgSVFMIG9uIHRoZSBJbnNpZ2h0IFF1ZXJ5IExhbmd1YWdlIGRvY3VtZW50YXRpb24gcGFnZVxuLyogSWYgdGhpcyBpcyBhIG1hbmRhdG9yeSBmaWVsZCB5b3Ugc2hvdWxkIGJlIGFibGUgdG8gZG8gdGhpczogKi9cbmxvZy5kZWJ1ZyBcIklRTDogXCIgKyBcIlxcXCJcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmNhdGVnb3J5UmVmJ10udG9TdHJpbmcoKSArIFwiXFxcIi5OYW1lIExJS0UgXFxcIlJhcHBvcnRvIGRpIGludGVydmVudG9cXFwiIEFORCBcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmRlbGV0ZWQnXS50b1N0cmluZygpICsgXCIhPXRydWUgQU5EIG9iamVjdCBIQVZJTkcgY29ubmVjdGVkVGlja2V0cyhrZXkgPSBcIiArIGlzc3VlLmtleS50b1N0cmluZygpICsgXCIpXCJcblxuLyohIURhIHJpbXVvdmVyZSBhcHBlbmEgcmlzb2x0aSBpIGJ1ZyEhKi9cbmlmKChvYmplY3RzID09IG51bGwgfHwgb2JqZWN0cy5zaXplPT0wKSAmJiAhaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpdC5wbGFubmVkTWFpbnRlbmFuY2UnXSkpe1xuICAgIGJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9hdXRvbWF0aW9uL0FBL3RpY2tldC9cIiArIGlzc3VlLmtleS50b1N0cmluZygpICsgXCIvYXR0YWNobWVudC9vbnNpdGVcIlxuICAgIGxvZy5kZWJ1ZyBcImJhc2VVcmw6IFwiICsgYmFzZVVSTFxuXG4gICAgVVJMIHVybFxuICAgIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcbiAgICBIdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdE1ldGhvZChyZXF1ZXN0TWV0aG9kKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJBY2NlcHRcIiwgXCIqLypcIik7XG4gICAgY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbiAgICBjb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5jb25uZWN0KCk7XG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcblxuICAgIGRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5cbiAgICBpZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDBcIikpe1xuICAgICAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIkdFTkVSQVRFLU9OU0lURVJFUE9SVFwiKVxuICAgICAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyBcIiBcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChlcnJvck1zZ3MpXG4gICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycylcblxuICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcbiAgICB9XG5cbn1cbiIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
          <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeQppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lcgppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGwKClByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKCkKRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJykKcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHsKCXByb3BlcnRpZXMubG9hZChpdCkKfQpDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQpsb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRykKCklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTsKQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpOwpkZWYgcmVxdWVzdE1ldGhvZApkZWYgYmFzZVVSTApsb2cuZGVidWcgIk9uU2l0ZSBSZXBvcnQgcGVyIGlzc3VlOiAiICsgaXNzdWUua2V5Ci8qIFJFU1QgQVBJIHBlciBHZW5lcmF6aW9uZSBBbGxlZ2F0byBSYXBwb3J0byBkaSBJbnRlcnZlbnRvICovCnJlcXVlc3RNZXRob2QgPSAiUFVUIjsKCmJhc2VVUkwgPSAiaHR0cDovLyIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArICIvb3AvcmVzdC9hdXRvbWF0aW9uL0FBL3RpY2tldC8iICsgaXNzdWUua2V5LnRvU3RyaW5nKCkgKyAiL2F0dGFjaG1lbnQvb25zaXRlIgpsb2cuZGVidWcgImJhc2VVcmw6ICIgKyBiYXNlVVJMCgpVUkwgdXJsCnVybCA9IG5ldyBVUkwoYmFzZVVSTCkKSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eSgiQ29udGVudC1UeXBlIiwgImFwcGxpY2F0aW9uL2pzb24iKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoIkFjY2VwdCIsICIqLyoiKTsKY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTsKY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpOwpjb25uZWN0aW9uLmNvbm5lY3QoKTsKbG9nLmRlYnVnICJSZXNwb25zZUNvZGU6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkKbG9nLmRlYnVnICJSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKCmRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpCmRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKQpkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpCgppZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoIjIwMCIpKXsKICAgIGxvZy5kZWJ1ZyAidXJsOiAiICsgdXJsCiAgICBsb2cuZGVidWcgIlJlc3BvbnNlQ29kZToiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKQogICAgbG9nLmRlYnVnICJSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKICAgIGVMaXN0RXJyb3JzLmFkZCgiRSIpCiAgICBlTGlzdEVycm9ycy5hZGQoIkdFTkVSQVRFLU9OU0lURVJFUE9SVCIpCiAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyAiICIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpKQogICAgZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncykKICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycykKCiAgICBvdXRwdXQuYWRkKGVMaXN0KQogICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigneyJFIjoiJyArIG91dHB1dC50b1N0cmluZygpICsgJyJ9JykKICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigiRSIsIG91dHB1dC50b1N0cmluZygpKQp9Cg==</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="disabled">true</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
          <arg name="FIELD_SCRIPT_FILE"></arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">b734e2c5-1436-43e7-ba9d-53f2ba06c457</arg>
          <arg name="FIELD_NOTES">YCFgQ3JlYXRlIFNOICYgU08gZm9yIG9sZCB0aWNrZXRzICsgZm9yIENvbXBsZXRlZCBkdXJpbmcgTWFpbnRlbmFuY2U=</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuXG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUubGluay5Jc3N1ZUxpbmtcblxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpO1xuQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpO1xuXG5kZWYgU04gPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfU0FQX1NFUlZJQ0VfTk9USUZJQ0FUSU9OXCIpWzBdXG5kZWYgcmVxdWVzdE1ldGhvZFxuZGVmIGJhc2VVUkxcblxuVVJMIHVybFxuSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvblxuXG5pZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKFNOKSA9PSBudWxsICYmIGlzc3VlLmlzc3VlVHlwZS5uYW1lICE9IFwiUGxhbm5lZCBNYWludGVuYW5jZSBUaWNrZXRcIil7XG4gICAgcmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuXG4gICAgZGVmIGJvZHlfcmVxID0gW11cbiAgICBib2R5X3JlcSA9IFtcbiAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXksXG4gICAgICAgIFwic3RhdHVzXCI6IFwiSU5QXCJcbiAgICBdIFxuXG4gICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvYWZ0ZXIvc2FsZXMvY3JlYXRlL3NlcnZpY2Uvbm90aWZpY2F0aW9uXCJcblxuICAgIGxvZy5kZWJ1ZyBcImJhc2VVUkwgU046IFwiICsgYmFzZVVSTFxuICAgIGxvZy5kZWJ1ZyBcImJvZHlfcmVxIFNOOiBcIiArIGJvZHlfcmVxXG4gICAgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG4gICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxuICAgIGxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpO1xuXG4gICAgZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KClcblxuICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMVwiKSl7XG4gICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG4gICAgICAgIFxuICAgICAgICBkZWYgb3V0cHV0TXNnID0gKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0XG4gICAgICAgIGxvZy5kZWJ1ZyBcIigoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dDogXCIgKyBvdXRwdXRNc2dcblxuICAgICAgICBkZWYganNvblNsdXJwZXIgPSBuZXcgSnNvblNsdXJwZXIoKVxuICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgICAgICBhc3NlcnQganNvbl9vYmplY3QgaW5zdGFuY2VvZiBNYXAgIFxuICAgICAgICBsb2cuZGVidWcgXCJtZXNzYWdlOiBcIiArICBqc29uX29iamVjdC5tZXNzYWdlXG4gICAgICAgIGxvZy5kZWJ1ZyBcImVycm9yczogXCIgKyAganNvbl9vYmplY3QuZXJyb3JzLnRvU3RyaW5nKClcblxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIk9QLVNBUC1TTi1VUERBVEVcIilcbiAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5lcnJvcnNbMF0pXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChlcnJvck1zZ3MpXG4gICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycylcblxuICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcbiAgICB9ZWxzZXtcbiAgICAgICAgLyoqIFNFUlZJQ0UgT1JERVIgQ1JFQVRJT04gKiovXG4gICAgICAgIGJvZHlfcmVxID0gW1xuICAgICAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXlcbiAgICAgICAgXSBcbiAgICAgICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvYWZ0ZXIvc2FsZXMvY3JlYXRlL29yL3VwZGF0ZS9zZXJ2aWNlL29yZGVyXCJcblxuICAgICAgICBsb2cuZGVidWcgXCJiYXNlVVJMIFNPOiBcIiArIGJhc2VVUkxcbiAgICAgICAgbG9nLmRlYnVnIFwiYm9keV9yZXEgU086IFwiICsgYm9keV9yZXFcbiAgICAgICAgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgICAgICBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xuICAgICAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG4gICAgICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xuICAgICAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbiAgICAgICAgY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbiAgICAgICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuICAgICAgICBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgICAgICBjb25uZWN0aW9uLm91dHB1dFN0cmVhbS53aXRoV3JpdGVyKFwiVVRGLThcIikgeyBuZXcgU3RyZWFtaW5nSnNvbkJ1aWxkZXIoaXQsIGJvZHlfcmVxKSB9XG4gICAgICAgIGxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgICAgICBjb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuICAgICAgICBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5cbiAgICAgICAgaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAxXCIpICYmICFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAwXCIpKXtcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZGVmIG91dHB1dE1zZyA9ICgoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dFxuICAgIFx0XHRsb2cuZGVidWcgXCIoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHQ6IFwiICsgb3V0cHV0TXNnXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGRlZiBqc29uU2x1cnBlciA9IG5ldyBKc29uU2x1cnBlcigpXG4gICAgICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgICAgICAgICAgYXNzZXJ0IGpzb25fb2JqZWN0IGluc3RhbmNlb2YgTWFwICBcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIm1lc3NhZ2U6IFwiICsgIGpzb25fb2JqZWN0Lm1lc3NhZ2VcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcImVycm9yczogXCIgKyAganNvbl9vYmplY3QuZXJyb3JzLnRvU3RyaW5nKClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiRVwiKVxuICAgICAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiT1AtU0FQLVNPLUNSRUFURVwiKVxuICAgICAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5lcnJvcnNbMF0pXG4gICAgICAgICAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKVxuICAgICAgICAgICAgZUxpc3QuYWRkKGVMaXN0RXJyb3JzKVxuXG4gICAgICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgICAgIH1cbiAgICB9XG59Iiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="disabled">true</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">37c2d78492ac54794b8917d58342d465c219be98</arg>
          <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBPUCBFbWFpbCBOb3RpZmljYXRpb246IE9OU0lURV9SRVBPUlQgLSBvbmx5IElGIE9QQUFfQVVUT01BVElDQUxMWV9DTE9TRUQhPVllcyBBTkQgc2VuZE1haWwhPU5PIE1BSUwgQU5EIGNpIHNvbm8gdGlja2V0IGNvbGxlZ2F0aS4gLS0tLT4gRElTQUJMRUQgc3UgdHJhbnNhemlvbmUgY29tcGxldGUgLSB2aWVuZSBmYXR0byBtYW51YWxtZW50ZSBkYSBTRU5EIE9OU0lURSBSRVBPUlQ=</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
          <arg name="FIELD_INLINE_SCRIPT"></arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="disabled">true</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
          <arg name="FIELD_SCRIPT_FILE"></arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">df15a75e93b4c124a70f49e69dbcae9d48e2e8e4</arg>
          <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBPUCBwZXIgY29uc3VudGl2YXppb25lIHRpY2tldA==</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmluZGV4Lklzc3VlSW5kZXhpbmdTZXJ2aWNlXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5NdXRhYmxlSXNzdWVcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuZXZlbnQudHlwZS5FdmVudERpc3BhdGNoT3B0aW9uXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnV0aWwuRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk1vZGlmaWVkVmFsdWVcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuaW5kZXguSXNzdWVJbmRleGluZ1NlcnZpY2VcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyXG5pbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGxcblxuUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKVxuRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJylcbnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7XG5cdHByb3BlcnRpZXMubG9hZChpdClcbn1cbmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKVxuXG5Jc3N1ZU1hbmFnZXIgaXNzdWVNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKCk7XG5DdXN0b21GaWVsZE1hbmFnZXIgY3VzdG9tRmllbGRNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCk7XG5cbklzc3VlSW5kZXhpbmdTZXJ2aWNlIFx0aXNzdWVJbmRleGluZ1NlcnZpY2UgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDb21wb25lbnQoSXNzdWVJbmRleGluZ1NlcnZpY2UpXG5kZWYgYXV0b21hdGljYWxseUNsb3NlZCA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YuYXV0b21hdGljYWxseUNsb3NlZCddLnRvU3RyaW5nKCkpWzBdXG5cbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxuXG5pbnQgT1BBQSA9IHByb3BlcnRpZXNbJ2lzY2hlbWEuYWEuaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5pbnQgREJPID0gcHJvcGVydGllc1snaXNjaGVtYS5kYm8uaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5ib29sZWFuIHVuYXRhbnR1bT10cnVlXG5cbi8qISFEYSByaW11b3ZlcmUgYXBwZW5hIHJpc29sdGkgaSBidWchISovXG4vL2lmKCFpc3N1ZS5nZXRJc3N1ZVR5cGUoKS5uYW1lLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2l0LnBsYW5uZWRNYWludGVuYW5jZSddKSl7XG5cbiAgICAvKk9QLTEwMzg6IGxhIGNvbnRhYmlsaXp6YXppb25lIGRvdnJcdTAwZTAgcHJldmVkZXJlIGxlIHVuYXRhbnR1bSByYXRlcyBzb2xvIHNlIGlsIHRpY2tldCBub24gXHUwMGU4IHN0YXRvIGNoaXVzbyBpbiBhdXRvbWF0aWNvKi9cbiAgICBpZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGF1dG9tYXRpY2FsbHlDbG9zZWQpIT1udWxsICYmIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoYXV0b21hdGljYWxseUNsb3NlZCkudG9TdHJpbmcoKS5lcXVhbHMoXCJZZXNcIikpe1xuICAgICAgICB1bmF0YW50dW09ZmFsc2UgICAgXG4gICAgfVxuICAgIGxvZy5kZWJ1ZyBcIkNvbnN1bnRpdmF6aW9uZSB0aWNrZXQgXCIgKyBpc3N1ZS5rZXkgKyBcIiBjb24gdW5hdGFudHVtOiBcIiArIHVuYXRhbnR1bVxuXG4gICAgLyogUkVTVCBBUEkgcGVyIENvbnRhYmlsaXp6YXppb25lIEludGVydmVudG8gKi9cbiAgICByZXF1ZXN0TWV0aG9kID0gXCJHRVRcIjtcblxuICAgIGJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9BQS90aWNrZXQvaXNzdWVLZXkvXCIgKyBpc3N1ZS5rZXkudG9TdHJpbmcoKSArIFwiL2Nsb3NlP3VtPVwiK3VuYXRhbnR1bS50b1N0cmluZygpXG4gICAgbG9nLmRlYnVnIFwiYmFzZVVybDogXCIgKyBiYXNlVVJMXG5cbiAgICAvKkRlZmluaXJlIHBhcmFtZXRybyBkaSBpbnB1dCB1bmF0YW50dW09dHJ1ZXxmYWxzZSBpbiBiYXNlIGFsIHZhbG9yZSBkZWxsYSB2YXJpYWJpbGUgYm9vbGVhbmEgdW5hdGFudHVtKi9cbiAgICBVUkwgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgIEh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbiAgICBjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbiAgICBjb25uZWN0aW9uLmNvbm5lY3QoKTtcbiAgICBsb2cuZGVidWcgXCJSZXNwb25zZUNvZGU6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuXG4gICAgLy9Jc3N1ZUluZGV4aW5nU2VydmljZSBpc3N1ZUluZGV4aW5nU2VydmljZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldENvbXBvbmVudChJc3N1ZUluZGV4aW5nU2VydmljZSlcbiAgICAvL2lzc3VlSW5kZXhpbmdTZXJ2aWNlLnJlSW5kZXgoaXNzdWVNYW5hZ2VyLmdldElzc3VlT2JqZWN0KGlzc3VlLmtleS50b1N0cmluZygpKSlcblxuICAgIC8vZGVmIHVuYVRhbnR1bVJhdGVzID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShcIk9QQUFfVU5BVEFOVFVNX1JBVEVTXCIpWzBdXG4gICAgLy9sb2cud2FybiBcInVuYVRhbnR1bVJhdGVzOiBcIiArIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUodW5hVGFudHVtUmF0ZXMpXG5cbiAgICBkZWYgb3V0cHV0ID0gbmV3IEFycmF5TGlzdCgpXG4gICAgZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpXG4gICAgZGVmIGVMaXN0RXJyb3JzID0gbmV3IEFycmF5TGlzdCgpXG4gICAgZGVmIGVycm9yTXNncyA9IG5ldyBBcnJheUxpc3QoKVxuXG4gICAgaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAwXCIpKXtcbiAgICAgICAgbG9nLmRlYnVnIFwidXJsOiBcIiArIHVybFxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZUNvZGU6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2U6IFwiICsgY29ubmVjdGlvblxuXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIkVcIilcbiAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiT1AtVEtULUFDQ09VTlRJTkdcIilcbiAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKVxuICAgICAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpXG5cbiAgICAgICAgb3V0cHV0LmFkZChlTGlzdClcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgfWVsc2V7XG4gICAgICAgIC8qT1AtMTAzODogY29uc3VudGl2YXppb25lIHRlcm1pbmF0YSBjb3JyZXR0YW1lbnRlIC0gc2UgXHUwMGU4IHN0YXRhIGVzZWd1aXRhIGNvbiB1bmF0YW50dW09dHJ1ZSBzZXR0byBhIE5vIGlsIGNhbXBvIE9QQUFfQVVUT01BVElDQUxMWV9DTE9TRUQqL1xuICAgICAgICBpZih1bmF0YW50dW0pe1xuICAgICAgICAgICAgZGVmIGN1cnJlbnRVc2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SmlyYUF1dGhlbnRpY2F0aW9uQ29udGV4dCgpLmdldExvZ2dlZEluVXNlcigpXG4gICAgICAgICAgICBkZWYgbWkgPSAoTXV0YWJsZUlzc3VlKSBpc3N1ZVxuXG4gICAgICAgICAgICBkZWYgZmllbGRDb25maWcgPSBhdXRvbWF0aWNhbGx5Q2xvc2VkLmdldFJlbGV2YW50Q29uZmlnKGlzc3VlKVxuICAgICAgICAgICAgbG9nLmRlYnVnIFwiZmllbGRDb25maWc6IFwiICsgZmllbGRDb25maWdcbiAgICAgICAgICAgIGRlZiBjZk5ld1ZhbHVlID0gQ29tcG9uZW50QWNjZXNzb3Iub3B0aW9uc01hbmFnZXIuZ2V0T3B0aW9ucyhmaWVsZENvbmZpZyk/LmZpbmQgeyBpdC50b1N0cmluZygpID09IFwiTm9cIiB9XG4gICAgICAgICAgICBhdXRvbWF0aWNhbGx5Q2xvc2VkLnVwZGF0ZVZhbHVlKG51bGwsIGlzc3VlLCBuZXcgTW9kaWZpZWRWYWx1ZShpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGF1dG9tYXRpY2FsbHlDbG9zZWQpLCBjZk5ld1ZhbHVlKSwgbmV3IERlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlcigpKVxuXG4gICAgICAgICAgICBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKS51cGRhdGVJc3N1ZShjdXJyZW50VXNlciwgbWksIEV2ZW50RGlzcGF0Y2hPcHRpb24uRE9fTk9UX0RJU1BBVENILCBmYWxzZSk7XG4gICAgICAgICAgICBpc3N1ZUluZGV4aW5nU2VydmljZS5yZUluZGV4KGlzc3VlKVxuICAgICAgICAgICAgbG9nLmRlYnVnIFwiVXBkYXRlZCBjdXN0b21maWVsZCAtIGlzc3VlIHByaW5jaXBhbGUgJHtpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGF1dG9tYXRpY2FsbHlDbG9zZWQpfVwiXG4gICAgICAgIH1cbiAgICB9XG4vL30iLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
          <arg name="FIELD_INLINE_SCRIPT"></arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
          <arg name="FIELD_SCRIPT_FILE"></arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="null" status="null" step="6">
          <post-functions>
            <function type="class">
              <arg name="field.copyFieldSource1"></arg>
              <arg name="textValue">6</arg>
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="maxAllowed-integerValue">50</arg>
              <arg name="workflowName-textValue">OPAA: PM Task Workflow</arg>
              <arg name="performTransitionAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="scopeType">PARENT</arg>
              <arg name="destination-scopeTarget">SUB_TASK</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitieslinkedtransition-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="integerValue">141</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">ch.beecom.jira.jsu.workflow.function.linkedtransition.LinkedTransitionFunction</arg>
              <arg name="scopeSource-jql"></arg>
              <arg name="status"></arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">81aa9673-d0a1-4cdb-9909-19371f018388</arg>
              <arg name="FIELD_NOTES">YCFgUE0gVGlja2V0IC0gVXBkYXRlIEhBUkRXQVJFLk1BSU5URU5BTkNFX05FWFRfVElDS0VUX0RBVEUgKyBIQVJEV0FSRS5NQUlOVEVOQU5DRV9MQVNUX1RJQ0tFVF9EQVRF</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIGxpbmtlZFRpY2tldHMgJiBGYXN0LVRyYW5zYWN0IHRoZW0=</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="maxAllowed-integerValue">50</arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field">customfield_22693</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="141" name="Chiudi Rapporto di Intervento" view="fieldscreen">
      <meta name="opsbar-sequence">10</meta>
      <meta name="jira.description"></meta>
      <meta name="jira.fieldscreen.id">19910</meta>
      <restrict-to>
        <conditions type="OR">
          <condition type="class">
            <arg name="FIELD_FUNCTION_ID">e11c2942-0754-423c-8e92-d78a6375f221</arg>
            <arg name="FIELD_NOTES">YCFgTk9UIFBNIFRpY2tldA==</arg>
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
            <arg name="disabled">true</arg>
            <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSAhPSAnUGxhbm5lZCBNYWludGVuYW5jZSBUaWNrZXQnIiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
          </condition>
          <condition type="class">
            <arg name="RESOLUTION_FIELD_NAME">6</arg>
            <arg name="FIELD_FUNCTION_ID">fc8b9dd9-f011-4c94-85b2-3dad9c428711</arg>
            <arg name="FIELD_NOTES">YCFgRm9yIFBNIFRpY2tldHMgLSBhbGwgc3ViLXRhc2tzIG11c3QgYmUgcmVzb2x2ZWQ=</arg>
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.AllSubtasksResolvedCondition</arg>
            <arg name="disabled">true</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
          </condition>
        </conditions>
      </restrict-to>
      <validators>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">fa37467a9382f8924cd169d5ba599dcb71925405</arg>
          <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlcXVpcmVkIEZpZWxkcyAtIHNvbG8gZXJyb3JzLCBubyB3YXJuaW5ncw==</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
          <arg name="FIELD_INLINE_SCRIPT"></arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
          <arg name="FIELD_SCRIPT_FILE"></arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">9fe0fa5191d4b6a91ba7485380ff8d0a9fda8fe7</arg>
          <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBPUCBnZW5lcmF6aW9uZSBSYXBwb3J0byBkaSBpbnRlcnZlbnRv</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxubG9nLmRlYnVnIFwiT25TaXRlIFJlcG9ydCBwZXIgaXNzdWU6IFwiICsgaXNzdWUua2V5XG4vKiBSRVNUIEFQSSBwZXIgR2VuZXJhemlvbmUgQWxsZWdhdG8gUmFwcG9ydG8gZGkgSW50ZXJ2ZW50byAqL1xucmVxdWVzdE1ldGhvZCA9IFwiUFVUXCI7XG4vKlNjcmlwdCBWYXJpYWJsZXMqL1xuLy9QZXIgdGVzdCBkYSBjb25zb2xlXG4vL0lzc3VlIGlzc3VlID0gaXNzdWVNYW5hZ2VyLmdldElzc3VlQnlLZXlJZ25vcmVDYXNlKFwiT1BVVC0xNDA2MlwiKVxuXG5pbnQgT1BBQSA9IHByb3BlcnRpZXNbJ2lzY2hlbWEuYWEuaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5pbnQgREJPID0gcHJvcGVydGllc1snaXNjaGVtYS5kYm8uaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5cbi8qUmltb3ppb25lIGFsbGVnYXRvIHJhcHBvcnRvIGRpIGludGVydmVudG8gYXBwZW5hIGNyZWF0byovXG4vKiBHZXQgSW5zaWdodCBJUUwgRmFjYWRlIGZyb20gcGx1Z2luIGFjY2Vzc29yICovXG5DbGFzcyBpcWxGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5JUUxGYWNhZGVcIik7IFxuZGVmIGlxbEZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShpcWxGYWNhZGVDbGFzcyk7XG5cbi8qIEdldCBJbnNpZ2h0IE9iamVjdCBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdEZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdEZhY2FkZVwiKTtcbmRlZiBvYmplY3RGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0RmFjYWRlQ2xhc3MpO1xuXG4vKiBHZXQgSW5zaWdodCBPYmplY3QgVHlwZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdFR5cGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlRmFjYWRlXCIpO1xuZGVmIG9iamVjdFR5cGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUZhY2FkZUNsYXNzKTtcblxuLyogR2V0IEluc2lnaHQgT2JqZWN0IEF0dHJpYnV0ZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlXCIpO1xuZGVmIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZUNsYXNzKTtcblxuQ2xhc3Mgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LnNlcnZpY2VzLm1vZGVsLmZhY3RvcnkuT2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlcIik7XG5kZWYgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnkgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyk7XG5cbi8qIFNwZWNpZnkgdGhlIHNjaGVtYSBpZCBhcyB3ZWxsIGFzIHRoZSBJUUwgdGhhdCB3aWxsIGZldGNoIG9iamVjdHMuIEluIHRoaXMgY2FzZSBhbGwgb2JqZWN0cyB3aXRoIE5hbWUgbWF0Y2hpbmcgdGhlIHZhbHVlQ0YsIGJlIHN1cmUgdG8gaW5jbHVkZSBcIiBhcm91bmQgdmFsdWUgKi9cbmRlZiBvYmplY3RzID0gaXFsRmFjYWRlLmZpbmRPYmplY3RzQnlJUUxBbmRTY2hlbWEoREJPLCBcIlxcXCJcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmNhdGVnb3J5UmVmJ10udG9TdHJpbmcoKSArIFwiXFxcIi5OYW1lIExJS0UgXFxcIlJhcHBvcnRvIGRpIGludGVydmVudG9cXFwiIEFORCBcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmRlbGV0ZWQnXS50b1N0cmluZygpICsgXCIhPXRydWUgQU5EIG9iamVjdCBIQVZJTkcgY29ubmVjdGVkVGlja2V0cyhrZXkgPSBcIiArIGlzc3VlLmtleS50b1N0cmluZygpICsgXCIpXCIpOyAvLyBTZWUgdGhlIGNvbXBsZXRlIGxpc3Qgb2YgcG9zc2libGUgSVFMIG9uIHRoZSBJbnNpZ2h0IFF1ZXJ5IExhbmd1YWdlIGRvY3VtZW50YXRpb24gcGFnZVxuLyogSWYgdGhpcyBpcyBhIG1hbmRhdG9yeSBmaWVsZCB5b3Ugc2hvdWxkIGJlIGFibGUgdG8gZG8gdGhpczogKi9cbmxvZy5kZWJ1ZyBcIklRTDogXCIgKyBcIlxcXCJcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmNhdGVnb3J5UmVmJ10udG9TdHJpbmcoKSArIFwiXFxcIi5OYW1lIExJS0UgXFxcIlJhcHBvcnRvIGRpIGludGVydmVudG9cXFwiIEFORCBcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmRlbGV0ZWQnXS50b1N0cmluZygpICsgXCIhPXRydWUgQU5EIG9iamVjdCBIQVZJTkcgY29ubmVjdGVkVGlja2V0cyhrZXkgPSBcIiArIGlzc3VlLmtleS50b1N0cmluZygpICsgXCIpXCJcblxuLyohIURhIHJpbXVvdmVyZSBhcHBlbmEgcmlzb2x0aSBpIGJ1ZyEhKi9cbmlmKChvYmplY3RzID09IG51bGwgfHwgb2JqZWN0cy5zaXplPT0wKSAmJiAhaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpdC5wbGFubmVkTWFpbnRlbmFuY2UnXSkpe1xuICAgIGJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9hdXRvbWF0aW9uL0FBL3RpY2tldC9cIiArIGlzc3VlLmtleS50b1N0cmluZygpICsgXCIvYXR0YWNobWVudC9vbnNpdGVcIlxuICAgIGxvZy5kZWJ1ZyBcImJhc2VVcmw6IFwiICsgYmFzZVVSTFxuXG4gICAgVVJMIHVybFxuICAgIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcbiAgICBIdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdE1ldGhvZChyZXF1ZXN0TWV0aG9kKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJBY2NlcHRcIiwgXCIqLypcIik7XG4gICAgY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbiAgICBjb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5jb25uZWN0KCk7XG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcblxuICAgIGRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5cbiAgICBpZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDBcIikpe1xuICAgICAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIkdFTkVSQVRFLU9OU0lURVJFUE9SVFwiKVxuICAgICAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyBcIiBcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChlcnJvck1zZ3MpXG4gICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycylcblxuICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcbiAgICB9XG5cbn1cbiIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
          <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeQppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lcgppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGwKClByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKCkKRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJykKcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHsKCXByb3BlcnRpZXMubG9hZChpdCkKfQpDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQpsb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRykKCklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTsKQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpOwpkZWYgcmVxdWVzdE1ldGhvZApkZWYgYmFzZVVSTApsb2cuZGVidWcgIk9uU2l0ZSBSZXBvcnQgcGVyIGlzc3VlOiAiICsgaXNzdWUua2V5Ci8qIFJFU1QgQVBJIHBlciBHZW5lcmF6aW9uZSBBbGxlZ2F0byBSYXBwb3J0byBkaSBJbnRlcnZlbnRvICovCnJlcXVlc3RNZXRob2QgPSAiUFVUIjsKCmJhc2VVUkwgPSAiaHR0cDovLyIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArICIvb3AvcmVzdC9hdXRvbWF0aW9uL0FBL3RpY2tldC8iICsgaXNzdWUua2V5LnRvU3RyaW5nKCkgKyAiL2F0dGFjaG1lbnQvb25zaXRlIgpsb2cuZGVidWcgImJhc2VVcmw6ICIgKyBiYXNlVVJMCgpVUkwgdXJsCnVybCA9IG5ldyBVUkwoYmFzZVVSTCkKSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eSgiQ29udGVudC1UeXBlIiwgImFwcGxpY2F0aW9uL2pzb24iKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoIkFjY2VwdCIsICIqLyoiKTsKY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTsKY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpOwpjb25uZWN0aW9uLmNvbm5lY3QoKTsKbG9nLmRlYnVnICJSZXNwb25zZUNvZGU6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkKbG9nLmRlYnVnICJSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKCmRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpCmRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKQpkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpCgppZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoIjIwMCIpKXsKICAgIGxvZy5kZWJ1ZyAidXJsOiAiICsgdXJsCiAgICBsb2cuZGVidWcgIlJlc3BvbnNlQ29kZToiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKQogICAgbG9nLmRlYnVnICJSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKICAgIGVMaXN0RXJyb3JzLmFkZCgiRSIpCiAgICBlTGlzdEVycm9ycy5hZGQoIkdFTkVSQVRFLU9OU0lURVJFUE9SVCIpCiAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyAiICIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpKQogICAgZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncykKICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycykKCiAgICBvdXRwdXQuYWRkKGVMaXN0KQogICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigneyJFIjoiJyArIG91dHB1dC50b1N0cmluZygpICsgJyJ9JykKICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigiRSIsIG91dHB1dC50b1N0cmluZygpKQp9Cg==</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="disabled">true</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
          <arg name="FIELD_SCRIPT_FILE"></arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">b734e2c5-1436-43e7-ba9d-53f2ba06c457</arg>
          <arg name="FIELD_NOTES">YCFgQ3JlYXRlIFNOICYgU08gZm9yIG9sZCB0aWNrZXRzICsgZm9yIENvbXBsZXRlZCBkdXJpbmcgTWFpbnRlbmFuY2U=</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuXG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUubGluay5Jc3N1ZUxpbmtcblxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpO1xuQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpO1xuXG5kZWYgU04gPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfU0FQX1NFUlZJQ0VfTk9USUZJQ0FUSU9OXCIpWzBdXG5kZWYgcmVxdWVzdE1ldGhvZFxuZGVmIGJhc2VVUkxcblxuVVJMIHVybFxuSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvblxuXG5pZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKFNOKSA9PSBudWxsICYmIGlzc3VlLmlzc3VlVHlwZS5uYW1lICE9IFwiUGxhbm5lZCBNYWludGVuYW5jZSBUaWNrZXRcIil7XG4gICAgcmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuXG4gICAgZGVmIGJvZHlfcmVxID0gW11cbiAgICBib2R5X3JlcSA9IFtcbiAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXksXG4gICAgICAgIFwic3RhdHVzXCI6IFwiSU5QXCJcbiAgICBdIFxuXG4gICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvYWZ0ZXIvc2FsZXMvY3JlYXRlL3NlcnZpY2Uvbm90aWZpY2F0aW9uXCJcblxuICAgIGxvZy5kZWJ1ZyBcImJhc2VVUkwgU046IFwiICsgYmFzZVVSTFxuICAgIGxvZy5kZWJ1ZyBcImJvZHlfcmVxIFNOOiBcIiArIGJvZHlfcmVxXG4gICAgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG4gICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxuICAgIGxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpO1xuXG4gICAgZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KClcblxuICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMVwiKSl7XG4gICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG4gICAgICAgIFxuICAgICAgICBkZWYgb3V0cHV0TXNnID0gKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0XG4gICAgICAgIGxvZy5kZWJ1ZyBcIigoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dDogXCIgKyBvdXRwdXRNc2dcblxuICAgICAgICBkZWYganNvblNsdXJwZXIgPSBuZXcgSnNvblNsdXJwZXIoKVxuICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgICAgICBhc3NlcnQganNvbl9vYmplY3QgaW5zdGFuY2VvZiBNYXAgIFxuICAgICAgICBsb2cuZGVidWcgXCJtZXNzYWdlOiBcIiArICBqc29uX29iamVjdC5tZXNzYWdlXG4gICAgICAgIGxvZy5kZWJ1ZyBcImVycm9yczogXCIgKyAganNvbl9vYmplY3QuZXJyb3JzLnRvU3RyaW5nKClcblxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIk9QLVNBUC1TTi1VUERBVEVcIilcbiAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5lcnJvcnNbMF0pXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChlcnJvck1zZ3MpXG4gICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycylcblxuICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcbiAgICB9ZWxzZXtcbiAgICAgICAgLyoqIFNFUlZJQ0UgT1JERVIgQ1JFQVRJT04gKiovXG4gICAgICAgIGJvZHlfcmVxID0gW1xuICAgICAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXlcbiAgICAgICAgXSBcbiAgICAgICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvYWZ0ZXIvc2FsZXMvY3JlYXRlL29yL3VwZGF0ZS9zZXJ2aWNlL29yZGVyXCJcblxuICAgICAgICBsb2cuZGVidWcgXCJiYXNlVVJMIFNPOiBcIiArIGJhc2VVUkxcbiAgICAgICAgbG9nLmRlYnVnIFwiYm9keV9yZXEgU086IFwiICsgYm9keV9yZXFcbiAgICAgICAgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgICAgICBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xuICAgICAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG4gICAgICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xuICAgICAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbiAgICAgICAgY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbiAgICAgICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuICAgICAgICBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgICAgICBjb25uZWN0aW9uLm91dHB1dFN0cmVhbS53aXRoV3JpdGVyKFwiVVRGLThcIikgeyBuZXcgU3RyZWFtaW5nSnNvbkJ1aWxkZXIoaXQsIGJvZHlfcmVxKSB9XG4gICAgICAgIGxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgICAgICBjb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuICAgICAgICBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5cbiAgICAgICAgaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAxXCIpICYmICFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAwXCIpKXtcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZGVmIG91dHB1dE1zZyA9ICgoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dFxuICAgIFx0XHRsb2cuZGVidWcgXCIoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHQ6IFwiICsgb3V0cHV0TXNnXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGRlZiBqc29uU2x1cnBlciA9IG5ldyBKc29uU2x1cnBlcigpXG4gICAgICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgICAgICAgICAgYXNzZXJ0IGpzb25fb2JqZWN0IGluc3RhbmNlb2YgTWFwICBcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIm1lc3NhZ2U6IFwiICsgIGpzb25fb2JqZWN0Lm1lc3NhZ2VcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcImVycm9yczogXCIgKyAganNvbl9vYmplY3QuZXJyb3JzLnRvU3RyaW5nKClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiRVwiKVxuICAgICAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiT1AtU0FQLVNPLUNSRUFURVwiKVxuICAgICAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5lcnJvcnNbMF0pXG4gICAgICAgICAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKVxuICAgICAgICAgICAgZUxpc3QuYWRkKGVMaXN0RXJyb3JzKVxuXG4gICAgICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgICAgIH1cbiAgICB9XG59Iiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">37c2d78492ac54794b8917d58342d465c219be98</arg>
          <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBPUCBFbWFpbCBOb3RpZmljYXRpb246IE9OU0lURV9SRVBPUlQgLSBvbmx5IElGIE9QQUFfQVVUT01BVElDQUxMWV9DTE9TRUQhPVllcyBBTkQgc2VuZE1haWwhPU5PIE1BSUwgQU5EIGNpIHNvbm8gdGlja2V0IGNvbGxlZ2F0aS4gLS0tLT4gRElTQUJMRUQgc3UgdHJhbnNhemlvbmUgY29tcGxldGUgLSB2aWVuZSBmYXR0byBtYW51YWxtZW50ZSBkYSBTRU5EIE9OU0lURSBSRVBPUlQ=</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk1vZGlmaWVkVmFsdWVcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUudXRpbC5EZWZhdWx0SXNzdWVDaGFuZ2VIb2xkZXJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuZXZlbnQudHlwZS5FdmVudERpc3BhdGNoT3B0aW9uXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5saW5rLklzc3VlTGlua1xuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiBhdXRvbWF0aWNhbGx5Q2xvc2VkID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi5hdXRvbWF0aWNhbGx5Q2xvc2VkJ10udG9TdHJpbmcoKSlbMF1cbmRlZiBzZW5kTWFpbFRvID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi5zZW5kTWFpbFRvJ10udG9TdHJpbmcoKSlbMF1cbmRlZiBzZW5kTWFpbFRvUmVjID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi5zZW5kTWFpbFRvUmVjaXBpZW50cyddLnRvU3RyaW5nKCkpWzBdXG5kZWYgb25zaXRlUmVwb3J0RGF0ZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi53Zk9uc2l0ZVJlcG9ydCddLnRvU3RyaW5nKCkpWzBdXG5cbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxuXG5pbnQgT1BBQSA9IHByb3BlcnRpZXNbJ2lzY2hlbWEuYWEuaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5pbnQgREJPID0gcHJvcGVydGllc1snaXNjaGVtYS5kYm8uaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5kZWYgcmVsYXRlc0luSXNzdWVMaW5rPWZhbHNlXG5kZWYgcmVsYXRlc091dElzc3VlTGluaz1mYWxzZVxuZGVmIGxpbmtlZFRpY2tldHM9bmV3IEFycmF5TGlzdCgpXG5kZWYgYm9keV9yZXFcbmRlZiBzZW5kbWFpbD10cnVlXG5cbmlmKGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoYXV0b21hdGljYWxseUNsb3NlZCk9PW51bGwgfHwgIWlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoYXV0b21hdGljYWxseUNsb3NlZCkudG9TdHJpbmcoKS5lcXVhbHMoXCJZZXNcIikpe1xuXG4gICAgLypPUC0xMDM4OiB2ZXJpZmljYSB0aWNrZXQgY29sbGVnYXRpKi9cbiAgICBMaXN0PElzc3VlTGluaz4gYWxsSW5Jc3N1ZUxpbmsgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZUxpbmtNYW5hZ2VyKCkuZ2V0SW53YXJkTGlua3MoaXNzdWUuZ2V0SWQoKSlcbiAgICBmb3IgKEl0ZXJhdG9yPElzc3VlTGluaz4gb3V0SXRlcmF0b3IgPSBhbGxJbklzc3VlTGluay5pdGVyYXRvcigpOyBvdXRJdGVyYXRvci5oYXNOZXh0KCk7KSB7XG4gICAgICAgIElzc3VlTGluayBpc3N1ZUxpbmsgPSAoSXNzdWVMaW5rKSBvdXRJdGVyYXRvci5uZXh0KCk7XG5cbiAgICAgICAgaWYoaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNSZWxhdGVzJ10udG9TdHJpbmcoKSkpe1xuICAgICAgICAgICAgcmVsYXRlc0luSXNzdWVMaW5rPXRydWVcbiAgICAgICAgICAgIGxpbmtlZFRpY2tldHMuYWRkKGlzc3VlTGluay5nZXRTb3VyY2VPYmplY3QoKS50b1N0cmluZygpKVxuICAgICAgICAgICAgbG9nLmRlYnVnIFwiSXNzdWUgY29uIHJlbGF0ZXNJbklzc3VlTGlua1wiXG4gICAgICAgIH1cbiAgICB9XG4gICAgTGlzdDxJc3N1ZUxpbms+IGFsbE91dElzc3VlTGluayA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTGlua01hbmFnZXIoKS5nZXRPdXR3YXJkTGlua3MoaXNzdWUuZ2V0SWQoKSlcbiAgICBmb3IgKEl0ZXJhdG9yPElzc3VlTGluaz4gb3V0SXRlcmF0b3IgPSBhbGxPdXRJc3N1ZUxpbmsuaXRlcmF0b3IoKTsgb3V0SXRlcmF0b3IuaGFzTmV4dCgpOykge1xuICAgICAgICBJc3N1ZUxpbmsgaXNzdWVMaW5rID0gKElzc3VlTGluaykgb3V0SXRlcmF0b3IubmV4dCgpO1xuXG4gICAgICAgIGlmKGlzc3VlTGluay5pc3N1ZUxpbmtUeXBlLmdldE5hbWUoKS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpbC5saW5rZWRUa3RzUmVsYXRlcyddLnRvU3RyaW5nKCkpKXtcbiAgICAgICAgICAgIHJlbGF0ZXNPdXRJc3N1ZUxpbms9dHJ1ZVxuICAgICAgICAgICAgbGlua2VkVGlja2V0cy5hZGQoaXNzdWVMaW5rLmdldERlc3RpbmF0aW9uT2JqZWN0KCkudG9TdHJpbmcoKSlcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIklzc3VlIGNvbiByZWxhdGVzT3V0SXNzdWVMaW5rXCJcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBsb2cuZGVidWcgXCJpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHNlbmRNYWlsVG8pLnRvU3RyaW5nKCk6IFwiICsgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzZW5kTWFpbFRvKS50b1N0cmluZygpXG4gICAgaWYoKHJlbGF0ZXNJbklzc3VlTGluayB8fCByZWxhdGVzT3V0SXNzdWVMaW5rKSAmJiAhaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzZW5kTWFpbFRvKS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydjZi5vcHRpb24uc2VuZE1haWxUby5ub0VtYWlsJ10udG9TdHJpbmcoKSkgJiYgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzZW5kTWFpbFRvKS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydjZi5vcHRpb24uc2VuZE1haWxUby5jdXJyZW50UmVwb3J0J10udG9TdHJpbmcoKSkpe1xuICAgICAgICAvL09QLTEwMzg6IGludmlhcmUgc29sbyBsYSBtYWlsIGNvbiBpbCByYXBwb3J0byBkaSBpbnRlcnZlbnRvIGRlbCB0aWNrZXQgY29ycmVudGVcbiAgICAgICAgYm9keV9yZXEgPSBbXG4gICAgICAgICAgICBcInRlbXBsYXRlTmFtZVwiOiBwcm9wZXJ0aWVzWyd0dC5vblNpdGVSZXBvcnQnXS50b1N0cmluZygpLFxuICAgICAgICAgICAgXCJwZWNcIjogZmFsc2UsXG4gICAgICAgICAgICBcImlzc3VlS2V5XCI6IGlzc3VlLmtleSxcbiAgICAgICAgICAgIFwiYWRkaXRpb25hbFJlY2lwaWVudHNcIjogaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzZW5kTWFpbFRvUmVjKS50b1N0cmluZygpXG4gICAgICAgIF1cbiAgICAgICAgLyozMS4wNy4yMDIwIEFGOiBuZWxsYSB0cmFuc2F6aW9uZSBjb21wbGV0ZSBOT04gaW52aWFyZSBtYWlsIGxhIG1haWwgcGVyIGkgdGlja2V0IGNvbiBjb2xsZWdhdGkgLSBpbCByYXBwb3J0byBkaSBpbnRlcnZlbnRvIGRlaSB0aWNrZXQgXCJmaWdsaVwiIHZpZW5lIGdlbmVyYXRvIGRvcG8gbCdpbnZpbyBkZWxsYSBtYWlsIHN1bCBcInBhZHJlXCIgcXVpbmRpIG5vbiB2ZXJyZWJiZSBpbmNsdXNvIG5lbGxhIG1haWwqL1xuICAgICAgICAvKkwnaW52aW8gZGVsbGEgbWFpbCB2ZXJyXHUwMGUwIGZhdHRvIHN1Y2Nlc3NpdmFtZW50ZSByaXNwZXR0byBhbGxhIGNoaXVzdXJhIGNvbiBcIlNlbmQgT25TaXRlIFJlcG9ydFwiKi9cbiAgICAgICAgc2VuZG1haWw9ZmFsc2VcbiAgICB9ZWxzZSBpZigocmVsYXRlc0luSXNzdWVMaW5rIHx8IHJlbGF0ZXNPdXRJc3N1ZUxpbmspICYmICFpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHNlbmRNYWlsVG8pLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2NmLm9wdGlvbi5zZW5kTWFpbFRvLm5vRW1haWwnXS50b1N0cmluZygpKSAmJiBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHNlbmRNYWlsVG8pLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2NmLm9wdGlvbi5zZW5kTWFpbFRvLmN1cnJlbnRSZXBvcnQnXS50b1N0cmluZygpKSl7XG4gICAgICAgIC8vT1AtMTAzODogaW52aWFyZSBsYSBtYWlsIGNvbiB0dXR0aSBpIHJhcHBvcnRpIGRpIGludGVydmVudG8gZGVpIHRpY2tldCBjb2xsZWdhdGlcbiAgICAgICAgYm9keV9yZXEgPSBbXG4gICAgICAgICAgICBcInRlbXBsYXRlTmFtZVwiOiBwcm9wZXJ0aWVzWyd0dC5vblNpdGVSZXBvcnQnXS50b1N0cmluZygpLFxuICAgICAgICAgICAgXCJwZWNcIjogZmFsc2UsXG4gICAgICAgICAgICBcImlzc3VlS2V5XCI6IGlzc3VlLmtleSxcbiAgICAgICAgICAgIFwibGlua2VkVGlja2V0c1wiOiBsaW5rZWRUaWNrZXRzLFxuICAgICAgICAgICAgXCJhZGRpdGlvbmFsUmVjaXBpZW50c1wiOiBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHNlbmRNYWlsVG9SZWMpLnRvU3RyaW5nKClcbiAgICAgICAgXVxuICAgICAgICAvKjMxLjA3LjIwMjAgQUY6IG5lbGxhIHRyYW5zYXppb25lIGNvbXBsZXRlIE5PTiBpbnZpYXJlIG1haWwgbGEgbWFpbCBwZXIgaSB0aWNrZXQgY29uIGNvbGxlZ2F0aSAtIGlsIHJhcHBvcnRvIGRpIGludGVydmVudG8gZGVpIHRpY2tldCBcImZpZ2xpXCIgdmllbmUgZ2VuZXJhdG8gZG9wbyBsJ2ludmlvIGRlbGxhIG1haWwgc3VsIFwicGFkcmVcIiBxdWluZGkgbm9uIHZlcnJlYmJlIGluY2x1c28gbmVsbGEgbWFpbCovXG4gICAgICAgIC8qTCdpbnZpbyBkZWxsYSBtYWlsIHZlcnJcdTAwZTAgZmF0dG8gc3VjY2Vzc2l2YW1lbnRlIHJpc3BldHRvIGFsbGEgY2hpdXN1cmEgY29uIFwiU2VuZCBPblNpdGUgUmVwb3J0XCIqL1xuICAgICAgICBzZW5kbWFpbD1mYWxzZVxuICAgIH1lbHNlIGlmKCFyZWxhdGVzSW5Jc3N1ZUxpbmsgJiYgIXJlbGF0ZXNPdXRJc3N1ZUxpbmspe1xuICAgICAgICAvKkFGIDIwMjAwNzI5IC0gc3UgRkFBQyBTZXJ2aWNlIGxhIG5vdGlmaWNhIGNvbiBpbCByYXBwb3J0byBkaSBpbnRlcnZlbnRvIHZpZW5lIGludmlhdGEgc29sbyBzdSBlc3BsaWNpdGEgZGVjaXNpb25lIGRlbGwndXRlbnRlIC0gY2hlIHNwaW5nZXJcdTAwZTAgU0VORCBPTlNJVEUgUkVQT1JUIGRvcG8gYXZlciBjaGl1c28gaWwgdGlja2V0LiBRdWluZGkgc2Ugbm9uIGNpIHNvbm8gdGlja2V0IGNvbGxlZ2F0aSBzZXR0aWFtbyBzZW5kbWFpbD1mYWxzZSovXG4gICAgICAgIHNlbmRtYWlsPWZhbHNlXG4gICAgICAgIGJvZHlfcmVxID0gW1xuICAgICAgICAgICAgXCJ0ZW1wbGF0ZU5hbWVcIjogcHJvcGVydGllc1sndHQub25TaXRlUmVwb3J0J10udG9TdHJpbmcoKSxcbiAgICAgICAgICAgIFwicGVjXCI6IGZhbHNlLFxuICAgICAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXksXG4gICAgICAgICAgICBcImFkZGl0aW9uYWxSZWNpcGllbnRzXCI6IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc2VuZE1haWxUb1JlYykudG9TdHJpbmcoKVxuICAgICAgICBdXG4gICAgfWVsc2V7XG4gICAgICAgIC8vT1AtMTAzODogbm9uIGludmlhcmUgbGEgbWFpbFxuICAgICAgICBzZW5kbWFpbD1mYWxzZVxuICAgIH1cbiAgICBcbiAgICBsb2cuZGVidWcgXCJzZW5kbWFpbDogXCIgKyBzZW5kbWFpbFxuICAgIGlmKHNlbmRtYWlsKXtcbiAgICAgICAgLyogUkVTVCBBUEkgcGVyIEludmlvIE5vdGlmaWNhIEVtYWlsIE9OU0lURV9SRVBPUlQgKi9cbiAgICAgICAgcmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuXG4gICAgICAgIGJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9qaXJhL0FBL3RyYW5zYWN0aW9uL21haWwvc2VuZFwiXG4gICAgICAgIFVSTCB1cmwgPSBuZXcgVVJMKGJhc2VVUkwpXG4gICAgICAgIEh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG4gICAgICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdE1ldGhvZChyZXF1ZXN0TWV0aG9kKTtcbiAgICAgICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLThcIik7XG4gICAgICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuICAgICAgICBjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpO1xuICAgICAgICBjb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7XG4gICAgICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG4gICAgICAgIGxvZy5kZWJ1ZyBcImJvZHlfcmVxOiBcIiArIGJvZHlfcmVxXG4gICAgICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtLndpdGhXcml0ZXIoXCJVVEYtOFwiKSB7IG5ldyBTdHJlYW1pbmdKc29uQnVpbGRlcihpdCwgYm9keV9yZXEpIH1cbiAgICAgICAgbG9nLmRlYnVnIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG4gICAgICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpO1xuICAgICAgICBcbiAgICAgICAgbG9nLmRlYnVnIFwidXJsOiBcIiArIHVybFxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZUNvZGU6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpXG4gICAgICAgIC8vbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuXG4gICAgICAgIGRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpXG4gICAgICAgIGRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKVxuICAgICAgICBkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5cbiAgICAgICAgaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAwXCIpKXtcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcblxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvKiBHZXQgSW5zaWdodCBJUUwgRmFjYWRlIGZyb20gcGx1Z2luIGFjY2Vzc29yICovXG4gICAgICAgICAgICBDbGFzcyBpcWxGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5JUUxGYWNhZGVcIik7IFxuICAgICAgICAgICAgZGVmIGlxbEZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShpcWxGYWNhZGVDbGFzcyk7XG5cbiAgICAgICAgICAgIC8qIEdldCBJbnNpZ2h0IE9iamVjdCBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbiAgICAgICAgICAgIENsYXNzIG9iamVjdEZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdEZhY2FkZVwiKTtcbiAgICAgICAgICAgIGRlZiBvYmplY3RGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0RmFjYWRlQ2xhc3MpO1xuXG4gICAgICAgICAgICAvKiBHZXQgSW5zaWdodCBPYmplY3QgVHlwZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbiAgICAgICAgICAgIENsYXNzIG9iamVjdFR5cGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlRmFjYWRlXCIpO1xuICAgICAgICAgICAgZGVmIG9iamVjdFR5cGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUZhY2FkZUNsYXNzKTtcblxuICAgICAgICAgICAgLyogR2V0IEluc2lnaHQgT2JqZWN0IEF0dHJpYnV0ZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbiAgICAgICAgICAgIENsYXNzIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlXCIpO1xuICAgICAgICAgICAgZGVmIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZUNsYXNzKTtcblxuICAgICAgICAgICAgQ2xhc3Mgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LnNlcnZpY2VzLm1vZGVsLmZhY3RvcnkuT2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlcIik7XG4gICAgICAgICAgICBkZWYgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnkgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyk7XG5cbiAgICAgICAgICAgIC8qIFNwZWNpZnkgdGhlIHNjaGVtYSBpZCBhcyB3ZWxsIGFzIHRoZSBJUUwgdGhhdCB3aWxsIGZldGNoIG9iamVjdHMuIEluIHRoaXMgY2FzZSBhbGwgb2JqZWN0cyB3aXRoIE5hbWUgbWF0Y2hpbmcgdGhlIHZhbHVlQ0YsIGJlIHN1cmUgdG8gaW5jbHVkZSBcIiBhcm91bmQgdmFsdWUgKi9cbiAgICAgICAgICAgIC8qUk9MTEJBQ0sqL1xuICAgICAgICAgICAgLypSaW1vemlvbmUgYWxsZWdhdG8gcmFwcG9ydG8gZGkgaW50ZXJ2ZW50byBhcHBlbmEgY3JlYXRvKi9cbiAgICAgICAgICAgIGRlZiBvYmplY3RzID0gaXFsRmFjYWRlLmZpbmRPYmplY3RzQnlJUUxBbmRTY2hlbWEoREJPLCBcIlxcXCJcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmNhdGVnb3J5UmVmJ10udG9TdHJpbmcoKSArIFwiXFxcIi5cXFwiTmFtZVxcXCIgPSBcXFwiXCIgKyBwcm9wZXJ0aWVzWydpb2JqLmF0dGFjaG1lbnRDYXRlZ29yeS5vYmpzLnJhcHBJbnRGQUFDJ10udG9TdHJpbmcoKSArIFwiXFxcIiBBTkQgXCIgKyBwcm9wZXJ0aWVzWydpb2JqLmF0dGFjaG1lbnRDYXRlZ29yeS5kZWxldGVkJ10udG9TdHJpbmcoKSArIFwiIT10cnVlIEFORCBvYmplY3QgSEFWSU5HIGNvbm5lY3RlZFRpY2tldHMoa2V5ID0gXCIgKyBpc3N1ZS5rZXkudG9TdHJpbmcoKSArIFwiKVwiKTsgLy8gU2VlIHRoZSBjb21wbGV0ZSBsaXN0IG9mIHBvc3NpYmxlIElRTCBvbiB0aGUgSW5zaWdodCBRdWVyeSBMYW5ndWFnZSBkb2N1bWVudGF0aW9uIHBhZ2VcbiAgICAgICAgICAgIC8qIElmIHRoaXMgaXMgYSBtYW5kYXRvcnkgZmllbGQgeW91IHNob3VsZCBiZSBhYmxlIHRvIGRvIHRoaXM6ICovXG4gICAgICAgICAgICAvL2xvZy5pbmZvKFwiSW5zaWdodCBvYmplY3Q6IFwiICsgb2JqZWN0c1swXSk7XG5cbiAgICAgICAgICAgIGlmKG9iamVjdHNbMF0pe1xuICAgICAgICAgICAgICAgIC8qIFVQREFURSBPSkJFQ1QgREVMRVRFRCBWQUxVRSAqL1xuICAgICAgICAgICAgICAgIGRlZiBvYlRyaWFnZSA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbihvYmplY3RzWzBdLmdldElkKCksIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmRlbGV0ZWQnXS50b1N0cmluZygpKS5jcmVhdGVNdXRhYmxlKCkgIFxuICAgICAgICAgICAgICAgIGRlZiB2YWx1ZSA9IG9iVHJpYWdlLmdldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnMoKVxuXG4gICAgICAgICAgICAgICAgZGVmIHZhbHVlQmVhbiA9IG9iVHJpYWdlLmNyZWF0ZU9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbigpXG4gICAgICAgICAgICAgICAgdmFsdWVCZWFuLnNldFZhbHVlKG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGUubG9hZE9iamVjdFR5cGVBdHRyaWJ1dGVCZWFuKG9iVHJpYWdlLmdldE9iamVjdFR5cGVBdHRyaWJ1dGVJZCgpKSwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAvKkNsZWFuIGFjdHVhbCB2YWx1ZSovXG4gICAgICAgICAgICAgICAgdmFsdWUuY2xlYXIoKVxuICAgICAgICAgICAgICAgIHZhbHVlLmFkZCh2YWx1ZUJlYW4pO1xuICAgICAgICAgICAgICAgIG9iVHJpYWdlLnNldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnModmFsdWUpXG5cbiAgICAgICAgICAgICAgICAvL1VwZGF0ZSBPSkJFQ1QgYXR0cmlidXRlIHZhbHVlXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb2JUcmlhZ2UgPSBvYmplY3RGYWNhZGUuc3RvcmVPYmplY3RBdHRyaWJ1dGVCZWFuKG9iVHJpYWdlKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gdmllKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZy53YXJuKFwiMS4gQ291bGQgbm90IHVwZGF0ZSBvYmplY3QgYXR0cmlidXRlIGR1ZSB0byB2YWxpZGF0aW9uIGV4Y2VwdGlvbjpcIiArIHZpZS5nZXRNZXNzYWdlKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLypSb2xsYmFjayBjb250YWJpbGl6emF6aW9uZSBpbnRlcnZlbnRvKi9cbiAgICAgICAgICAgIC8qQ2FuY2VsbGFyZSB0dXR0aSBnbGkgb2dnZXR0aSBPblNpdGVfUmF0ZV9SZXBvcnQgcmVnaXN0cmF0aSBuZWkgY2FtcGkgT1BBQV9MVU1QX1NVTV9SQVRFUywgT1BBQV9VTkFfVEFOVFVNX1JBVEVTLCBPUEFBX1RSQVZFTF9SQVRFUywgT1BBQV9MQUJPVVJfUkFURVMqL1xuICAgICAgICAgICAgLypDaWNsYXJlIHR1dHRpIGdsaSBvZ2dldHRpIGFzc29jaWF0aSBhbCBjYW1wbyovXG5cbiAgICAgICAgICAgIC8qIFNwZWNpZnkgdGhlIHNjaGVtYSBpZCBhcyB3ZWxsIGFzIHRoZSBJUUwgdGhhdCB3aWxsIGZldGNoIG9iamVjdHMuIEluIHRoaXMgY2FzZSBhbGwgb2JqZWN0cyB3aXRoIE5hbWUgbWF0Y2hpbmcgdGhlIHZhbHVlQ0YsIGJlIHN1cmUgdG8gaW5jbHVkZSBcIiBhcm91bmQgdmFsdWUgKi9cbiAgICAgICAgICAgIG9iamVjdHMgPSBpcWxGYWNhZGUuZmluZE9iamVjdHNCeUlRTEFuZFNjaGVtYShPUEFBLCBcIm9iamVjdFR5cGUgPSBcIiArIHByb3BlcnRpZXNbJ2lvYmoub25TaXRlUmF0ZVJlcG9ydCddLnRvU3RyaW5nKCkgKyBcIiBBTkQgb2JqZWN0IEhBVklORyBjb25uZWN0ZWRUaWNrZXRzKGtleT1cIiArIGlzc3VlLmtleS50b1N0cmluZygpICsgXCIpIEFORCBcXFwiXCIgKyBwcm9wZXJ0aWVzWydpb2JqLm9uU2l0ZVJhdGVSZXBvcnQuZGVsZXRlZCddLnRvU3RyaW5nKCkgKyBcIlxcXCIgIT0gdHJ1ZVwiKTsgLy8gU2VlIHRoZSBjb21wbGV0ZSBsaXN0IG9mIHBvc3NpYmxlIElRTCBvbiB0aGUgSW5zaWdodCBRdWVyeSBMYW5ndWFnZSBkb2N1bWVudGF0aW9uIHBhZ2VcbiAgICAgICAgICAgIC8qIElmIHRoaXMgaXMgYSBtYW5kYXRvcnkgZmllbGQgeW91IHNob3VsZCBiZSBhYmxlIHRvIGRvIHRoaXM6ICovXG4gICAgICAgICAgICAvL2xvZy5pbmZvKFwiSW5zaWdodCBvYmplY3RzIGRhIGNhbmNlbGxhcmU6IFwiICsgb2JqZWN0cyk7XG5cbiAgICAgICAgICAgIGZvcihvYmogaW4gb2JqZWN0cyl7XG4gICAgICAgICAgICAgICAgLyogREVMRVRFIENPTk5FQ1RFRCBPQkpFQ1RTICovXG4gICAgICAgICAgICAgICAgb2JqZWN0RmFjYWRlLmRlbGV0ZU9iamVjdEJlYW4ob2JqLmdldElkKCkpOyAgXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qQ2FuY2VsbGFyZSBnbGkgaW1wb3J0aSBmb3JuaXRvcmUsIGNsaWVudGUgZSBpIHRvdGFsaSBzdSB0dXR0aSBnbGkgb2dnZXR0aSBDb21wb25lbnQgaW4gT1BBQV9SRVBMQUNFRF9NQVRFUklBTFMqL1xuICAgICAgICAgICAgZGVmIHJlcE1hdGVyaWFscyA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YucmVwbGFjZWRNYXRlcmlhbHMnXS50b1N0cmluZygpKVswXVxuICAgICAgICAgICAgZGVmIHJlcE1hdExpc3QgPSBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHJlcE1hdGVyaWFscylcblxuICAgICAgICAgICAgZm9yKG1hdCBpbiByZXBNYXRMaXN0KXtcbiAgICAgICAgICAgICAgICAvL2V4dHJhY3QgaW5zaWdodCBrZXkgYW5kIGdldCBvYmplY3RcbiAgICAgICAgICAgICAgICBkZWYgY29tcG9uZW50PW1hdC50b1N0cmluZygpXG4gICAgICAgICAgICAgICAgZGVmIGNvbXBvbmVudEtleSA9IGNvbXBvbmVudC5zdWJzdHJpbmcoY29tcG9uZW50LmluZGV4T2YoJygnKSsxLGNvbXBvbmVudC5pbmRleE9mKCcpJykpXG4gICAgICAgICAgICAgICAgZGVmIGNvbXBvbmVudE9iamVjdCA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QmVhbihjb21wb25lbnRLZXkpXG4gICAgICAgICAgICAgICAgLy9zZXQgXCJBUFBMSUVEX1RPXCIsIFwiQUNDT1VOVElOR19TVVBQTElFUl9NQVRFUklBTF9SRUZcIiwgXCJBQ0NPVU5USU5HX0NVU1RPTUVSX01BVEVSSUFMX1JFRlwiLCBcIlRPVEFMX0FNT1VOVF9TVVBQTElFUlwiLCBcIlRPVEFMX0FNT1VOVF9DVVNUT01FUlwiIHRvIG51bGwgZm9yIHRoYXQgY29tcG9uZW50XG5cbiAgICAgICAgICAgICAgICAvL0FQUExJRURfVE9cbiAgICAgICAgICAgICAgICBpZihvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4oY29tcG9uZW50T2JqZWN0LmdldElkKCksIHByb3BlcnRpZXNbJ2lvYmouY29tcG9uZW50LmFwcGxpZWRUbyddLnRvU3RyaW5nKCkpKXtcbiAgICAgICAgICAgICAgICAgICAgZGVmIG9iVHJpYWdlQXBwbGllZFRvID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKGNvbXBvbmVudE9iamVjdC5nZXRJZCgpLCBwcm9wZXJ0aWVzWydpb2JqLmNvbXBvbmVudC5hcHBsaWVkVG8nXS50b1N0cmluZygpKS5jcmVhdGVNdXRhYmxlKClcbiAgICAgICAgICAgICAgICAgICAgZGVmIHZhbHVlQXBwbGllZFRvID0gb2JUcmlhZ2VBcHBsaWVkVG8uZ2V0T2JqZWN0QXR0cmlidXRlVmFsdWVCZWFucygpXG4gICAgICAgICAgICAgICAgICAgIGxvZy53YXJuIFwidmFsdWVBcHBsaWVkVG86IFwiICsgdmFsdWVBcHBsaWVkVG9cbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlQXBwbGllZFRvLnNpemUoKSA+IDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVBcHBsaWVkVG8uY2xlYXIoKSBcblxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYlRyaWFnZUFwcGxpZWRUbyA9IG9iamVjdEZhY2FkZS5kZWxldGVPYmplY3RBdHRyaWJ1dGVCZWFuKG9iVHJpYWdlQXBwbGllZFRvLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiB2aWUpeyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2cuZXJyb3IoXCJDb3VsZCBub3QgdXBkYXRlIG9iamVjdCBhdHRyaWJ1dGUgZHVlIHRvIHZhbGlkYXRpb24gZXhjZXB0aW9uOlwiICsgdmllLmdldE1lc3NhZ2UoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL0FDQ09VTlRJTkdfU1VQUExJRVJfTUFURVJJQUxfUkVGXG4gICAgICAgICAgICAgICAgaWYob2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKGNvbXBvbmVudE9iamVjdC5nZXRJZCgpLCBwcm9wZXJ0aWVzWydpb2JqLmNvbXBvbmVudC5hY2NvdW50aW5nU3VwcE1hdGVyaWFsJ10udG9TdHJpbmcoKSkpe1xuICAgICAgICAgICAgICAgICAgICBkZWYgb2JUcmlhZ2VNYXRTID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKGNvbXBvbmVudE9iamVjdC5nZXRJZCgpLCBwcm9wZXJ0aWVzWydpb2JqLmNvbXBvbmVudC5hY2NvdW50aW5nU3VwcE1hdGVyaWFsJ10udG9TdHJpbmcoKSkuY3JlYXRlTXV0YWJsZSgpXG4gICAgICAgICAgICAgICAgICAgIGRlZiB2YWx1ZU1hdFMgPSBvYlRyaWFnZU1hdFMuZ2V0T2JqZWN0QXR0cmlidXRlVmFsdWVCZWFucygpXG4gICAgICAgICAgICAgICAgICAgIGxvZy53YXJuIFwidmFsdWVNYXRTOiBcIiArIHZhbHVlTWF0U1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVNYXRTLnNpemUoKSA+IDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVNYXRTLmNsZWFyKCkgXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JUcmlhZ2VNYXRTID0gb2JqZWN0RmFjYWRlLmRlbGV0ZU9iamVjdEF0dHJpYnV0ZUJlYW4ob2JUcmlhZ2VNYXRTLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiB2aWUpeyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2cuZXJyb3IoXCJDb3VsZCBub3QgdXBkYXRlIG9iamVjdCBhdHRyaWJ1dGUgZHVlIHRvIHZhbGlkYXRpb24gZXhjZXB0aW9uOlwiICsgdmllLmdldE1lc3NhZ2UoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL0FDQ09VTlRJTkdfQ1VTVE9NRVJfTUFURVJJQUxfUkVGXG4gICAgICAgICAgICAgICAgaWYob2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKGNvbXBvbmVudE9iamVjdC5nZXRJZCgpLCBwcm9wZXJ0aWVzWydpb2JqLmNvbXBvbmVudC5hY2NvdW50aW5nQ3VzdE1hdGVyaWFsJ10udG9TdHJpbmcoKSkpe1xuICAgICAgICAgICAgICAgICAgICBkZWYgb2JUcmlhZ2VNYXRDID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKGNvbXBvbmVudE9iamVjdC5nZXRJZCgpLCBwcm9wZXJ0aWVzWydpb2JqLmNvbXBvbmVudC5hY2NvdW50aW5nQ3VzdE1hdGVyaWFsJ10udG9TdHJpbmcoKSkuY3JlYXRlTXV0YWJsZSgpXG4gICAgICAgICAgICAgICAgICAgIGRlZiB2YWx1ZU1hdEMgPSBvYlRyaWFnZU1hdEMuZ2V0T2JqZWN0QXR0cmlidXRlVmFsdWVCZWFucygpXG4gICAgICAgICAgICAgICAgICAgIGxvZy53YXJuIFwidmFsdWVNYXRDOiBcIiArIHZhbHVlTWF0Q1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVNYXRDLnNpemUoKSA+IDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVNYXRDLmNsZWFyKCkgXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JUcmlhZ2VNYXRDID0gb2JqZWN0RmFjYWRlLmRlbGV0ZU9iamVjdEF0dHJpYnV0ZUJlYW4ob2JUcmlhZ2VNYXRDLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiB2aWUpeyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2cuZXJyb3IoXCJDb3VsZCBub3QgdXBkYXRlIG9iamVjdCBhdHRyaWJ1dGUgZHVlIHRvIHZhbGlkYXRpb24gZXhjZXB0aW9uOlwiICsgdmllLmdldE1lc3NhZ2UoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy9UT1RBTF9BTU9VTlRfU1VQUExJRVJcbiAgICAgICAgICAgICAgICBpZihvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4oY29tcG9uZW50T2JqZWN0LmdldElkKCksIHByb3BlcnRpZXNbJ2lvYmouY29tcG9uZW50LnRvdFN1cHAnXS50b1N0cmluZygpKSl7XG4gICAgICAgICAgICAgICAgICAgIGRlZiBvYlRyaWFnZVRvdFMgPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4oY29tcG9uZW50T2JqZWN0LmdldElkKCksIHByb3BlcnRpZXNbJ2lvYmouY29tcG9uZW50LnRvdFN1cHAnXS50b1N0cmluZygpKS5jcmVhdGVNdXRhYmxlKClcbiAgICAgICAgICAgICAgICAgICAgZGVmIHZhbHVlVG90UyA9IG9iVHJpYWdlVG90Uy5nZXRPYmplY3RBdHRyaWJ1dGVWYWx1ZUJlYW5zKClcbiAgICAgICAgICAgICAgICAgICAgbG9nLndhcm4gXCJ2YWx1ZVRvdFM6IFwiICsgdmFsdWVUb3RTXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZVRvdFMuc2l6ZSgpID4gMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVRvdFMuY2xlYXIoKSBcblxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYlRyaWFnZVRvdFMgPSBvYmplY3RGYWNhZGUuZGVsZXRlT2JqZWN0QXR0cmlidXRlQmVhbihvYlRyaWFnZVRvdFMuaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIHZpZSl7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZy5lcnJvcihcIkNvdWxkIG5vdCB1cGRhdGUgb2JqZWN0IGF0dHJpYnV0ZSBkdWUgdG8gdmFsaWRhdGlvbiBleGNlcHRpb246XCIgKyB2aWUuZ2V0TWVzc2FnZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vVE9UQUxfQU1PVU5UX0NVU1RPTUVSXG4gICAgICAgICAgICAgICAgaWYob2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKGNvbXBvbmVudE9iamVjdC5nZXRJZCgpLCBwcm9wZXJ0aWVzWydpb2JqLmNvbXBvbmVudC50b3RDdXN0J10udG9TdHJpbmcoKSkpe1xuICAgICAgICAgICAgICAgICAgICBkZWYgb2JUcmlhZ2VUb3RDID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKGNvbXBvbmVudE9iamVjdC5nZXRJZCgpLCBwcm9wZXJ0aWVzWydpb2JqLmNvbXBvbmVudC50b3RDdXN0J10udG9TdHJpbmcoKSkuY3JlYXRlTXV0YWJsZSgpXG4gICAgICAgICAgICAgICAgICAgIGRlZiB2YWx1ZVRvdEMgPSBvYlRyaWFnZVRvdEMuZ2V0T2JqZWN0QXR0cmlidXRlVmFsdWVCZWFucygpXG4gICAgICAgICAgICAgICAgICAgIGxvZy53YXJuIFwidmFsdWVUb3RDOiBcIiArIHZhbHVlVG90Q1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVUb3RDLnNpemUoKSA+IDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVUb3RDLmNsZWFyKCkgXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JUcmlhZ2VUb3RDID0gb2JqZWN0RmFjYWRlLmRlbGV0ZU9iamVjdEF0dHJpYnV0ZUJlYW4ob2JUcmlhZ2VUb3RDLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiB2aWUpeyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2cuZXJyb3IoXCJDb3VsZCBub3QgdXBkYXRlIG9iamVjdCBhdHRyaWJ1dGUgZHVlIHRvIHZhbGlkYXRpb24gZXhjZXB0aW9uOlwiICsgdmllLmdldE1lc3NhZ2UoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ICAgIFxuXG4gICAgICAgICAgICBkZWYgb3V0cHV0TXNnID0gKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0XG4gICAgICAgICAgICBsb2cuZGVidWcgXCIoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHQ6IFwiICsgb3V0cHV0TXNnXG5cbiAgICAgICAgICAgIGRlZiBqc29uU2x1cnBlciA9IG5ldyBKc29uU2x1cnBlcigpXG4gICAgICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgICAgICAgICAgYXNzZXJ0IGpzb25fb2JqZWN0IGluc3RhbmNlb2YgTWFwICBcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIm1lc3NhZ2U6IFwiICsgIGpzb25fb2JqZWN0Lm1lc3NhZ2VcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiRVwiKVxuICAgICAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiU0VORE1BSUxcIilcbiAgICAgICAgICAgIGVycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArIFwiIFwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKSlcbiAgICAgICAgICAgIGVMaXN0RXJyb3JzLmFkZChqc29uX29iamVjdC5tZXNzYWdlKVxuICAgICAgICAgICAgZUxpc3QuYWRkKGVMaXN0RXJyb3JzKVxuXG4gICAgICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgLypMJ2VtYWlsIFx1MDBlOCBzdGF0YSBpbnZpYXRhIGNvcnJldHRhbWVudGUsIGFnZ2lvcm5vIGlsIGNhbXBvIE9OU0lURV9SRVBPUlQgY29uIGxhIGRhdGEgY29ycmVudGUqL1xuXG4gICAgICAgICAgICAvLyBsb2cud2FybiBcImlzc3VlIFwiK2lzc3VlLmdldEtleSgpXG4gICAgICAgICAgICBkZWYgY2Z2ID0gaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShvbnNpdGVSZXBvcnREYXRlKVxuICAgICAgICAgICAgaWYgKCFjZnYpIHtcbiAgICAgICAgICAgICAgZGVmIHQwICA9IG5ldyBqYXZhLnNxbC5UaW1lc3RhbXAoU3lzdGVtLmN1cnJlbnRUaW1lTWlsbGlzKCkpXG4gICAgICAgICAgICAgIGxvZy53YXJuIFwiU3RhcnRUaW1lID0+ICdcIit0MC50b1N0cmluZygpK1wiJ1wiXG4gICAgICAgICAgICAgIGRlZiBtdiA9IG5ldyBNb2RpZmllZFZhbHVlKG9uc2l0ZVJlcG9ydERhdGUsIHQwKVxuICAgICAgICAgICAgICBkZWYgY2ggPSBuZXcgRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyKClcbiAgICAgICAgICAgICAgb25zaXRlUmVwb3J0RGF0ZS51cGRhdGVWYWx1ZShudWxsLCBpc3N1ZSwgbXYsIGNoKSBcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGxvZy53YXJuIFwiU3RhcnRUaW1lID09ICdcIitjZnYudG9TdHJpbmcoKStcIidcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
          <arg name="FIELD_INLINE_SCRIPT"></arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="disabled">true</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
          <arg name="FIELD_SCRIPT_FILE"></arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">df15a75e93b4c124a70f49e69dbcae9d48e2e8e4</arg>
          <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBPUCBwZXIgY29uc3VudGl2YXppb25lIHRpY2tldA==</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
          <arg name="FIELD_INLINE_SCRIPT"></arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
          <arg name="FIELD_SCRIPT_FILE"></arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="null" status="null" step="6">
          <post-functions>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">81aa9673-d0a1-4cdb-9909-19371f018388</arg>
              <arg name="FIELD_NOTES">YCFgUE0gVGlja2V0IC0gVXBkYXRlIEhBUkRXQVJFLk1BSU5URU5BTkNFX05FWFRfVElDS0VUX0RBVEUgKyBIQVJEV0FSRS5NQUlOVEVOQU5DRV9MQVNUX1RJQ0tFVF9EQVRF</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIGxpbmtlZFRpY2tldHMgJiBGYXN0LVRyYW5zYWN0IHRoZW0=</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </function>
            <function type="class">
              <arg name="conditionList">3</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="comparisonType">1</arg>
              <arg name="precondition">true</arg>
              <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
              <arg name="preconditionNegateResult-booleanValue"></arg>
              <arg name="fieldValue"></arg>
              <arg name="preconditionMode-textValue">DISCARD</arg>
              <arg name="fieldsList">customfield_22657</arg>
            </function>
            <function type="class">
              <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="targetIssueTypeDefinedByCfSelection">customfield_22716</arg>
              <arg name="issueTypeId">26</arg>
              <arg name="scopeType">ISSUE_LINKING</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
              <arg name="targetIssueType">DEFINED_BY_CF_SELECTION</arg>
              <arg name="scopeSource-jql"></arg>
              <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field.copyTransitionComment">false</arg>
              <arg name="targetProjectType">SAME</arg>
              <arg name="maxAllowed-integerValue"></arg>
              <arg name="transitionAttachmentsOperation">copy</arg>
              <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
              <arg name="targetProjectSelectedCustomField"></arg>
              <arg name="destination-scopeTarget">LINK_END</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
              <arg name="scopeDestination-linkEnd">10003:INWARD</arg>
              <arg name="field.enablingCustomFieldId">customfield_22609</arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="subFunctions">[{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22609&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22658&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22600&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22600&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22822&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22822&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22601&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22601&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22602&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22602&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22813&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22813&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23235&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23235&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22651&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22651&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22700&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22700&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22814&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22814&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23203&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23203&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23401&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23237&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_21909&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21909&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22649&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22629&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23401&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21908&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22716&quot;,&quot;destinationFieldId&quot;:&quot;summary&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Yes&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22681&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22615&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22614&quot;}}]</arg>
              <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
              <arg name="projectId">11228</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">2fb89327-ada3-433c-be67-4363e745771e</arg>
              <arg name="FIELD_NOTES">YCFgRlNNOiBVcGRhdGUgc3RhdHVzIG9uIGp1c3QgY3JlYXRlZCBSZXBhaXIgUXVvdGF0aW9uIGlzc3Vl</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="maxAllowed-integerValue">50</arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field">customfield_22693</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="751" name="Assegna a Fornitore senza notifiche" view="fieldscreen">
      <meta name="opsbar-sequence">50</meta>
      <meta name="jira.description"></meta>
      <meta name="jira.fieldscreen.id">19904</meta>
      <restrict-to>
        <conditions type="AND">
          <condition type="class">
            <arg name="FIELD_FUNCTION_ID">93d6b54e-ad03-41e6-82a8-a6d0a675107e</arg>
            <arg name="FIELD_NOTES">YCFgT1BfQVNTRVQgc2hvdWxkIGJlIGV2YWx1YXRlZA==</arg>
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
            <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJjZlZhbHVlc1snT1BfQVNTRVQnXSAhPSBudWxsIHx8IGlzc3VlLmlzc3VlVHlwZS5uYW1lID09ICdQbGFubmVkIE1haW50ZW5hbmNlIFRpY2tldCciLCJzY3JpcHRQYXRoIjpudWxsfQ==</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
          </condition>
          <condition type="class">
            <arg name="FIELD_FUNCTION_ID">862e4160-0f10-49db-afe0-9dc656448701</arg>
            <arg name="FIELD_NOTES">YCFgT1BfU1VQUExJRVIgc2hvdWxkIGJlIGV2YWx1YXRlZA==</arg>
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
            <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuXG5kZWYgdHJvdmF0bz1mYWxzZVxuZm9yIChzIGluIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi5zdXBwbGllciddLnRvU3RyaW5nKCkpKXtcbiAgICBpZiAoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzKSAhPSBudWxsKXtcbiAgICAgICAgdHJvdmF0bz10cnVlXG4gICAgfVxufVxucmV0dXJuIHRyb3ZhdG8iLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
            <arg name="FIELD_PREVIEW_ISSUE">AAS-22767</arg>
          </condition>
        </conditions>
      </restrict-to>
      <validators>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">339d339e-1008-47f6-86fc-0fa1b991ccd2</arg>
          <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIEN1c3RvbWVyIENvbnRyYWN0ICYmIE51bWJlciBvZiB0aWNrZXRzIGluIHRoZSBsYXN0IDYwIGRheXM=</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">6411a0f5-9ae7-4a56-a7f5-a857227a153e</arg>
          <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlLVNjaGVkdWxlIEZsYWc=</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlXG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGdyb292eS5qc29uLkpzb25CdWlsZGVyXG5pbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXG5pbXBvcnQgamF2YS50ZXh0LkRhdGVGb3JtYXQ7XG5pbXBvcnQgamF2YS50ZXh0LlNpbXBsZURhdGVGb3JtYXQ7XG5pbXBvcnQgamF2YS51dGlsLkRhdGU7XG5pbXBvcnQgamF2YS5zcWwuVGltZXN0YW1wXG5cblByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKClcbkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpXG5wcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0ge1xuXHRwcm9wZXJ0aWVzLmxvYWQoaXQpXG59XG5cbmRlZiB3YXJuaW5ncyA9IGZhbHNlXG5kZWYgbWlzc2luZ0NvbnRyYWN0ID0gZmFsc2VcbmRlZiBleHBpcmVkQ29udHJhY3QgPSBmYWxzZVxuZGVmIGVycm9ycyA9IGZhbHNlXG5cbmRlZiByZXNjaGVkdWxpbmcgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLnJlc2NoZWR1bGluZyddID8gcHJvcGVydGllc1snY2YucmVzY2hlZHVsaW5nJ10udG9TdHJpbmcoKSA6IFwiT1BfQ0hBTkdFX1NDSEVEVUxJTkdcIilbMF1cbmRlZiB0cmFuc2l0aW9uQ2hlY2sgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLmNoZWNrQW5kQ29uZmlybTInXS50b1N0cmluZygpKVswXVxuZGVmIGZpcnN0VGlja2V0ID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi5maXJzdFRrdCddLnRvU3RyaW5nKCkpWzBdXG5cbmRlZiB3YXJuaW5nRW1wdHlGaWVsZHMgPSBuZXcgQXJyYXlMaXN0KClcbmRlZiBlcnJvck1hbmRhdG9yeUZpZWxkcyA9IG5ldyBBcnJheUxpc3QoKVxuIFxuaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShyZXNjaGVkdWxpbmcpLnRvU3RyaW5nKCkuZXF1YWxzKFwiWWVzXCIpICYmIChpc3N1ZS5nZXRJc3N1ZVR5cGUoKS5uYW1lLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2l0Lm5ld0luc3RhbGxhdGlvbiddKSB8fCBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGZpcnN0VGlja2V0KSE9bnVsbCkpe1xuICAgIC8vQXNrIGNvbmZpcm1hdGlvbiB0byBkZWxldGUgYW5kIGNyZWF0ZSBhZ2FpbiBOZXcgSW5zdGFsbGF0aW9uIGF0dGFjaG1lbnRzXG4gICAgd2FybmluZ3MgPSB0cnVlXG59XG5cbmRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcblxuaWYgKCF3YXJuaW5ncyl7XG4gICAgcmV0dXJuIHRydWVcbn1lbHNle1xuICAgIGlmKHdhcm5pbmdzKXtcbiAgICAgICAgaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZSh0cmFuc2l0aW9uQ2hlY2spLnRvU3RyaW5nKCkuZXF1YWxzKFwiWWVzXCIpKXtcbiAgICAgICAgICAgIC8vbG9nLmRlYnVnIFwicmV0dXJuIHRydWVcIlxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBkZWYgd0xpc3QgPSBuZXcgQXJyYXlMaXN0KClcblx0XHRcdGRlZiB3TGlzdENvbmZpcm1FbXB0eUNvbnRyYWN0ID0gbmV3IEFycmF5TGlzdCgpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5Q29udHJhY3QuYWRkKFwiV1wiKVxuICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHlDb250cmFjdC5hZGQoXCJORVdfRE9DU19HRU5FUkFUSU9OXCIpXG4gICAgICAgICAgICB3TGlzdENvbmZpcm1FbXB0eUNvbnRyYWN0LmFkZChudWxsKVxuXG4gICAgICAgICAgICB3TGlzdC5hZGQod0xpc3RDb25maXJtRW1wdHlDb250cmFjdClcbiAgICAgICAgXG4gICAgICAgICAgICBvdXRwdXQuYWRkKHdMaXN0KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiV1wiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpIFxuICAgICAgICB9XG4gICAgfVxufSIsInNjcmlwdFBhdGgiOm51bGx9</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">136ddcac-3447-4136-8695-c845548ae5b2</arg>
          <arg name="FIELD_NOTES">YCFgRGVsZXRlIHByZXZpb3VzIGF0dGFjaG1lbnRzIHJlbGF0ZWQgdG8gTkVXIEluc3RhbGxhdGlvbiBUS1QgR2VuZXJhdGlvbg==</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">17f1689e-675a-4677-aec8-021a2640fd0c</arg>
          <arg name="FIELD_NOTES">YCFgT1A6IERvYyBUZW1wbGF0ZSBnZW5lcmF0aW9uIC0gc2UgTmV3IEluc3RhbGxhdGlvbiBPUiBGaXJzdCBUaWNrZXQgPSB0cnVl</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5Xb3JrZmxvd0V4Y2VwdGlvbjtcbmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvblxuaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyO1xuaW1wb3J0IGdyb292eS5qc29uLlN0cmVhbWluZ0pzb25CdWlsZGVyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5DdXN0b21GaWVsZE1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3I7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5NdXRhYmxlSXNzdWVcbmltcG9ydCBvcmcuYXBhY2hlLmNvbW1vbnMuY29kZWMuYmluYXJ5LkJhc2U2NDtcbmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5XG5pbXBvcnQgZ3Jvb3Z5eC5uZXQuaHR0cC5IVFRQQnVpbGRlclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcblxuZGVmIHJlcXVlc3RNZXRob2RcbmRlZiBiYXNlVVJMXG5cbmRlZiBmaXJzdFRpY2tldCA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YuZmlyc3RUa3QnXS50b1N0cmluZygpKVswXVxuXG5sb2cuZGVidWcgaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZVxubG9nLmRlYnVnIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoZmlyc3RUaWNrZXQpXG5cblxuLyogUkVTVCBBUEkgcGVyIEludmlvIE5vdGlmaWNhIEVtYWlsIE9OU0lURV9SRVBPUlQgKi9cbnJlcXVlc3RNZXRob2QgPSBcIkdFVFwiO1xuZGVmIHJlc2NoZWR1bGluZyA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YucmVzY2hlZHVsaW5nJ10gPyBwcm9wZXJ0aWVzWydjZi5yZXNjaGVkdWxpbmcnXS50b1N0cmluZygpIDogXCJPUF9DSEFOR0VfU0NIRURVTElOR1wiKVswXVxuZGVmIHRyYW5zaXRpb25DaGVjayA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YuY2hlY2tBbmRDb25maXJtMiddLnRvU3RyaW5nKCkpWzBdXG5cbmlmKGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUocmVzY2hlZHVsaW5nKS50b1N0cmluZygpLmVxdWFscyhcIlllc1wiKSAmJiBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHRyYW5zaXRpb25DaGVjaykudG9TdHJpbmcoKS5lcXVhbHMoXCJZZXNcIikgJiYgKGlzc3VlLmdldElzc3VlVHlwZSgpLm5hbWUudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snaXQubmV3SW5zdGFsbGF0aW9uJ10pIHx8IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoZmlyc3RUaWNrZXQpIT1udWxsKSl7XG4gICAgZGVmIGZpcnN0X3RpY2tldD1mYWxzZVxuICAgIGRlZiB0ZW1wbGF0ZT1cIlwiXG4gICAgaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShmaXJzdFRpY2tldCkhPW51bGwpe1xuICAgICAgICBmaXJzdF90aWNrZXQ9dHJ1ZVxuICAgICAgICB0ZW1wbGF0ZT1cIkZJUlNUX1RJQ0tFVCU3Q01BTlVGQUNUVVJFUlwiXG4gICAgfWVsc2V7XG4gICAgICAgIHRlbXBsYXRlPVwiTkVXX0lOU1RBTExBVElPTl9DUkVBVEVfVEtUJTdDTUFOVUZBQ1RVUkVSXCJcbiAgICB9XG4gICAgXG4gICAgaWYoaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpdC5uZXdJbnN0YWxsYXRpb24nXSkpe1xuICAgICAgICBiYXNlVVJMID0gXCJodHRwOi8vXCIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArIFwiL29wL3Jlc3QvYXV0b21hdGlvbi9kb2N1bWVudC9nZW5lcmF0aW9uL2NoZWNrP0lTU1VFX0tFWT1cIisgaXNzdWUua2V5ICtcIiZET0NfQ0FURUdPUlk9XCIgKyB0ZW1wbGF0ZSArIFwiJkVOQUJMRURfRk9SX0ZJUlNUX1RJQ0tFVD1cIitmaXJzdF90aWNrZXQrXCImSU1QT1JUX0ZST009XCJcbiAgICB9ZWxzZXtcbiAgICAgICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2F1dG9tYXRpb24vZG9jdW1lbnQvZ2VuZXJhdGlvbi9jaGVjaz9JU1NVRV9LRVk9XCIrIGlzc3VlLmtleSArXCImRE9DX0NBVEVHT1JZPVwiICsgdGVtcGxhdGUgKyBcIiZFTkFCTEVEX0ZPUl9GSVJTVF9USUNLRVQ9XCIrZmlyc3RfdGlja2V0K1wiJklNUE9SVF9GUk9NPU9QX0FTU0VUXCJcbiAgICB9XG4gICAgXG4gICAgbG9nLmRlYnVnIGJhc2VVUkxcbiAgICBVUkwgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgIEh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbiAgICBjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbiAgICBjb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuICAgIGRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5cdGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICBcbiAgICBpZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDBcIikpe1xuICAgICAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuICAgICAgICBsb2cuZGVidWcgXCJFcnJvclN0cmVhbTogXCIgKyBjb25uZWN0aW9uLmdldEVycm9yU3RyZWFtKCkudG9TdHJpbmcoKVxuICAgICAgICBsb2cuZGVidWcgXCJnZXRIZWFkZXJGaWVsZHMoKTogXCIgKyBjb25uZWN0aW9uLmdldEhlYWRlckZpZWxkcygpXG4gICAgICAgIGRlZiBvdXRwdXRNc2cgPSAoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHRcbiAgICAgICAgbG9nLmRlYnVnIFwiKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0OiBcIiArIG91dHB1dE1zZ1xuXG4gICAgICAgIGRlZiBqc29uU2x1cnBlciA9IG5ldyBKc29uU2x1cnBlcigpXG4gICAgICAgIGRlZiBqc29uX29iamVjdCA9IGpzb25TbHVycGVyLnBhcnNlVGV4dChvdXRwdXRNc2cpXG4gICAgICAgIGFzc2VydCBqc29uX29iamVjdCBpbnN0YW5jZW9mIE1hcCAgXG4gICAgICAgIGxvZy5kZWJ1ZyBcIm1lc3NhZ2U6IFwiICsgIGpzb25fb2JqZWN0Lm1lc3NhZ2VcblxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIk9QLURPQ1NcIilcbiAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5tZXNzYWdlKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKVxuICAgICAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpXG5cbiAgICAgICAgb3V0cHV0LmFkZChlTGlzdClcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgfVxufVxuIiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">3bddafa4-9601-4ff0-9db1-83ec1b0f0850</arg>
          <arg name="FIELD_NOTES">YCFgR2VuZXJhdGUgU04gZm9yIG9sZCB0aWNrZXRz</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuXG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUubGluay5Jc3N1ZUxpbmtcblxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpO1xuQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpO1xuXG5kZWYgU04gPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfU0FQX1NFUlZJQ0VfTk9USUZJQ0FUSU9OXCIpWzBdXG5kZWYgcmVxdWVzdE1ldGhvZFxuZGVmIGJhc2VVUkxcblxuVVJMIHVybFxuSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvblxuXG5pZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKFNOKSA9PSBudWxsICYmIGlzc3VlLmlzc3VlVHlwZS5uYW1lICE9IFwiUGxhbm5lZCBNYWludGVuYW5jZSBUaWNrZXRcIil7XG4gICAgcmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuXG4gICAgZGVmIGJvZHlfcmVxID0gW11cbiAgICBib2R5X3JlcSA9IFtcbiAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXksXG4gICAgICAgIFwic3RhdHVzXCI6IFwiT1BFXCJcbiAgICBdIFxuXG4gICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvYWZ0ZXIvc2FsZXMvY3JlYXRlL3NlcnZpY2Uvbm90aWZpY2F0aW9uXCJcblxuICAgIGxvZy5kZWJ1ZyBcImJhc2VVUkwgU046IFwiICsgYmFzZVVSTFxuICAgIGxvZy5kZWJ1ZyBcImJvZHlfcmVxIFNOOiBcIiArIGJvZHlfcmVxXG4gICAgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG4gICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxuICAgIGxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpO1xuXG4gICAgZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KClcblxuICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMVwiKSl7XG4gICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG4gICAgICAgIFxuICAgICAgICBkZWYgb3V0cHV0TXNnID0gKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0XG4gICAgICAgIGxvZy5kZWJ1ZyBcIigoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dDogXCIgKyBvdXRwdXRNc2dcblxuICAgICAgICBkZWYganNvblNsdXJwZXIgPSBuZXcgSnNvblNsdXJwZXIoKVxuICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgICAgICBhc3NlcnQganNvbl9vYmplY3QgaW5zdGFuY2VvZiBNYXAgIFxuICAgICAgICBsb2cuZGVidWcgXCJtZXNzYWdlOiBcIiArICBqc29uX29iamVjdC5tZXNzYWdlXG4gICAgICAgIGxvZy5kZWJ1ZyBcImVycm9yczogXCIgKyAganNvbl9vYmplY3QuZXJyb3JzLnRvU3RyaW5nKClcblxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIk9QLVNBUC1TTi1VUERBVEVcIilcbiAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5lcnJvcnNbMF0pXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChlcnJvck1zZ3MpXG4gICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycylcblxuICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcbiAgICB9XG59XG4gIiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="null" status="null" step="2">
          <post-functions>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="append.value"></arg>
              <arg name="maxAllowed-integerValue">50</arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field.value">%%CURRENT_DATETIME%%</arg>
              <arg name="field.name">customfield_22639</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">14b92cea1dc4f22ec42d0ad489a7359b4ad4a858</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IE5ldyBJbnN0YWxsYXRpb24gLSBDaGVjayBsaW5rZWRUaWNrZXRzICYgRmFzdC1UcmFuc2FjdCB0aGVt</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmluZGV4Lklzc3VlSW5kZXhpbmdTZXJ2aWNlXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5NdXRhYmxlSXNzdWVcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuZXZlbnQudHlwZS5FdmVudERpc3BhdGNoT3B0aW9uXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnV0aWwuRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk1vZGlmaWVkVmFsdWVcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUubGluay5Jc3N1ZUxpbmtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuaW5kZXguSXNzdWVJbmRleGluZ1NlcnZpY2VcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyXG5pbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGxcblxuUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKVxuRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJylcbnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7XG5cdHByb3BlcnRpZXMubG9hZChpdClcbn1cbmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLldBUk4pXG5cbmxvZy53YXJuIFwiJHtpc3N1ZS5rZXl9IFRyYW5zYXppb25lIEFTU0lHTiBUTyBTVVBQTElFUiAtIFBvc3QgRnVuY3Rpb24gY2hlY2sgbGlua2VkSXNzdWVzXCJcblxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpO1xuQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpO1xuZGVmIGF1dG9tYXRpY2FsbHlDb25maXJtZWQgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLmF1dG9tYXRpY2FsbHlBc3NpZ25lZCddID8gcHJvcGVydGllc1snY2YuYXV0b21hdGljYWxseUFzc2lnbmVkJ10udG9TdHJpbmcoKSA6IFwiT1BfQVVUT01BVElDQUxMWV9BU1NJR05FRFwiKVswXVxuSXNzdWVJbmRleGluZ1NlcnZpY2UgXHRpc3N1ZUluZGV4aW5nU2VydmljZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldENvbXBvbmVudChJc3N1ZUluZGV4aW5nU2VydmljZSlcblxuLy9QZXIgdGVzdCBkYSBjb25zb2xlXG4vL2lzc3VlID0gaXNzdWVNYW5hZ2VyLmdldElzc3VlQnlLZXlJZ25vcmVDYXNlKFwiT1BVVC0yNzZcIilcblxuLypERVYqL1xuQVNTSUdOX1RPX1NVUFBMSUVSID0gcHJvcGVydGllc1snd2YudHIuYXNzaWduVG9TdXBwbGllciddID8gcHJvcGVydGllc1snd2YudHIuYXNzaWduVG9TdXBwbGllciddIDogNTFcblxuLypQUk9EKi9cbi8vQ09ORklSTV9UT19DVVNUT01FUlxuXG5kZWYgdXNlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEppcmFBdXRoZW50aWNhdGlvbkNvbnRleHQoKS5nZXRMb2dnZWRJblVzZXIoKVxuZGVmIGlzc3VlU2VydmljZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlU2VydmljZSgpXG5cbi8qU2UgZXNlZ3VvIGxhIGNvbmZpcm0gdG8gY3VzdG9tZXIgc3UgdW4gdGlja2V0IGNvbiAxIG8gKyB0aWNrZXQgY29sbGVnYXRpLCB2ZXJpZmljbyBlIHNwb3N0byBpbiBhdXRvbWF0aWNvIGdsaSBldmVudHVhbGkgdGlja2V0IGNvbGxlZ2F0aSovXG5sb2cud2FybiBcInZlcmlmaWNvIGUgc3Bvc3RvIGluIGF1dG9tYXRpY28gZ2xpIGV2ZW50dWFsaSB0aWNrZXQgY29sbGVnYXRpXCJcblxuaWYoaXNzdWUuZ2V0SXNzdWVUeXBlKCkuZ2V0TmFtZSgpID09IHByb3BlcnRpZXNbJ2l0Lm5ld0luc3RhbGxhdGlvbiddLnRvU3RyaW5nKCkgJiYgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q29uZmlybWVkKT09bnVsbCB8fCBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGF1dG9tYXRpY2FsbHlDb25maXJtZWQpLnRvU3RyaW5nKCkuZXF1YWxzKFwiTm9cIikpe1xuICAgIExpc3Q8SXNzdWVMaW5rPiBhbGxJbklzc3VlTGluayA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTGlua01hbmFnZXIoKS5nZXRJbndhcmRMaW5rcyhpc3N1ZS5nZXRJZCgpKVxuICAgIGZvciAoSXRlcmF0b3I8SXNzdWVMaW5rPiBvdXRJdGVyYXRvciA9IGFsbEluSXNzdWVMaW5rLml0ZXJhdG9yKCk7IG91dEl0ZXJhdG9yLmhhc05leHQoKTspIHtcbiAgICAgICAgSXNzdWVMaW5rIGlzc3VlTGluayA9IChJc3N1ZUxpbmspIG91dEl0ZXJhdG9yLm5leHQoKTtcblxuICAgICAgICBpZihpc3N1ZUxpbmsuZ2V0U291cmNlT2JqZWN0KCkhPSBudWxsICYmIGlzc3VlTGluay5pc3N1ZUxpbmtUeXBlLmdldE5hbWUoKS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpbC5saW5rZWRUa3RzUmVsYXRlcyddLnRvU3RyaW5nKCkpKXtcbiAgICAgICAgICAgIGxvZy53YXJuIFwiSXNzdWUgY29uIHJlbGF0ZXNJbklzc3VlTGlua1wiXG4gICAgICAgICAgICAvKkVzZWd1aXJlIHRyYW5zYXppb25lIGRpIHN0YXRvIGRlbGxhIHNvdXJjZUlzc3VlKi9cbiAgICAgICAgICAgIGRlZiBsaW5rZWRJc3N1ZSA9IGlzc3VlTGluay5nZXRTb3VyY2VPYmplY3QoKVxuICAgICAgICAgICAgZGVmIGxpbmtlZElzc3VlU3RhdHVzID0gbGlua2VkSXNzdWUuZ2V0U3RhdHVzKClcbiAgICAgICAgICAgIGRlZiB0cmFuc2l0aW9uSWRcbiAgICAgICAgICAgIGlmKGxpbmtlZElzc3VlU3RhdHVzLm5hbWUgPT0gcHJvcGVydGllc1snd2Yub3BlbiddLnRvU3RyaW5nKCkpe1xuICAgICAgICAgICAgICAgIHRyYW5zaXRpb25JZD1BU1NJR05fVE9fU1VQUExJRVJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKHRyYW5zaXRpb25JZD09QVNTSUdOX1RPX1NVUFBMSUVSKXtcbiAgICAgICAgICAgICAgICAvLyBQcmVwYXJlIG91ciBpbnB1dCBmb3IgdGhlIHRyYW5zaXRpb25cbiAgICAgICAgICAgICAgICBkZWYgaXNzdWVJbnB1dFBhcmFtZXRlcnMgPSBpc3N1ZVNlcnZpY2UubmV3SXNzdWVJbnB1dFBhcmFtZXRlcnMoKVxuICAgICAgICAgICAgICAgIGlzc3VlSW5wdXRQYXJhbWV0ZXJzLndpdGgge1xuICAgICAgICAgICAgICAgICAgICBzZXRTa2lwU2NyZWVuQ2hlY2sodHJ1ZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy9kZWYgZmllbGRDb25maWcgPSBhdXRvbWF0aWNhbGx5Q2xvc2VkLmdldFJlbGV2YW50Q29uZmlnKGlzc3VlKVxuICAgICAgICAgICAgICAgIC8vQ29tcG9uZW50QWNjZXNzb3Iub3B0aW9uc01hbmFnZXIuZ2V0T3B0aW9ucyhmaWVsZENvbmZpZyk/LmZpbmQgeyBpdC50b1N0cmluZygpID09IFwiWWVzXCIgfVxuICAgICAgICAgICAgICAgIC8vaXNzdWVJbnB1dFBhcmFtZXRlcnMuYWRkQ3VzdG9tRmllbGRWYWx1ZShmaWVsZENvbmZpZy5nZXRJZCgpLCBcIlllc1wiKSBcbiAgICAgICAgICAgICAgICAvL2xvZy53YXJuIFwiaXNzdWVJbnB1dFBhcmFtZXRlcnM6IFwiICsgaXNzdWVJbnB1dFBhcmFtZXRlcnNcbiAgICAgICAgICAgICAgICBkZWYgY3VycmVudFVzZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRKaXJhQXV0aGVudGljYXRpb25Db250ZXh0KCkuZ2V0TG9nZ2VkSW5Vc2VyKClcbiAgICAgICAgICAgICAgICBkZWYgbWkgPSAoTXV0YWJsZUlzc3VlKSBsaW5rZWRJc3N1ZVxuXG4gICAgICAgICAgICAgICAgZGVmIGZpZWxkQ29uZmlnID0gYXV0b21hdGljYWxseUNvbmZpcm1lZC5nZXRSZWxldmFudENvbmZpZyhsaW5rZWRJc3N1ZSlcbiAgICAgICAgICAgICAgICBsb2cud2FybiBcImZpZWxkQ29uZmlnOiBcIiArIGZpZWxkQ29uZmlnXG4gICAgICAgICAgICAgICAgZGVmIGNmTmV3VmFsdWUgPSBDb21wb25lbnRBY2Nlc3Nvci5vcHRpb25zTWFuYWdlci5nZXRPcHRpb25zKGZpZWxkQ29uZmlnKT8uZmluZCB7IGl0LnRvU3RyaW5nKCkgPT0gXCJZZXNcIiB9XG4gICAgICAgICAgICAgICAgYXV0b21hdGljYWxseUNvbmZpcm1lZC51cGRhdGVWYWx1ZShudWxsLCBsaW5rZWRJc3N1ZSwgbmV3IE1vZGlmaWVkVmFsdWUobGlua2VkSXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q29uZmlybWVkKSwgY2ZOZXdWYWx1ZSksIG5ldyBEZWZhdWx0SXNzdWVDaGFuZ2VIb2xkZXIoKSlcblxuICAgICAgICAgICAgICAgIENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpLnVwZGF0ZUlzc3VlKGN1cnJlbnRVc2VyLCBtaSwgRXZlbnREaXNwYXRjaE9wdGlvbi5ET19OT1RfRElTUEFUQ0gsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBpc3N1ZUluZGV4aW5nU2VydmljZS5yZUluZGV4KGxpbmtlZElzc3VlKVxuICAgICAgICAgICAgICAgIGxvZy53YXJuIFwiVXBkYXRlZCBjdXN0b21maWVsZCAtIGlzc3VlIGxpbmthdGFcIlxuXG4gICAgICAgICAgICAgICAgLy9kZWYgdmFsaWRhdGlvblJlc3VsdCA9IGlzc3VlU2VydmljZS52YWxpZGF0ZVRyYW5zaXRpb24odXNlciwgbGlua2VkSXNzdWUuaWQsIHRyYW5zaXRpb25JZCwgaXNzdWVJbnB1dFBhcmFtZXRlcnMpXG4gICAgICAgICAgICAgICAgaWYgKGlzc3VlU2VydmljZS52YWxpZGF0ZVRyYW5zaXRpb24odXNlciwgbGlua2VkSXNzdWUuaWQsIHRyYW5zaXRpb25JZCwgaXNzdWVJbnB1dFBhcmFtZXRlcnMpLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBQZXJmb3JtIHRoZSB0cmFuc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgIGRlZiBpc3N1ZVJlc3VsdCA9IGlzc3VlU2VydmljZS50cmFuc2l0aW9uKHVzZXIsIGlzc3VlU2VydmljZS52YWxpZGF0ZVRyYW5zaXRpb24odXNlciwgbGlua2VkSXNzdWUuaWQsIHRyYW5zaXRpb25JZCwgaXNzdWVJbnB1dFBhcmFtZXRlcnMpKVxuICAgICAgICAgICAgICAgICAgICBpZiAoISBpc3N1ZVJlc3VsdC5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZy53YXJuKFwiRmFpbGVkIHRvIHRyYW5zaXRpb24gdGFzayAke2xpbmtlZElzc3VlLmtleX0sIGVycm9yczogJHtpc3N1ZVJlc3VsdC5lcnJvckNvbGxlY3Rpb259XCIpXG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nLndhcm4oXCJUcmFuc2F6aW9uZSBmYXR0YSA3OSAke2xpbmtlZElzc3VlLmtleX0sIGVycm9yczogJHtpc3N1ZVJlc3VsdC5lcnJvckNvbGxlY3Rpb259LCAke2xpbmtlZElzc3VlLnN0YXR1c31cIilcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZy53YXJuKFwiQ291bGQgbm90IHRyYW5zaXRpb24gdGFzayAke2xpbmtlZElzc3VlLmtleX0sIGVycm9yczogJHtpc3N1ZVNlcnZpY2UudmFsaWRhdGVUcmFuc2l0aW9uKHVzZXIsIGxpbmtlZElzc3VlLmlkLCB0cmFuc2l0aW9uSWQsIGlzc3VlSW5wdXRQYXJhbWV0ZXJzKS5lcnJvckNvbGxlY3Rpb259XCIpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgTGlzdDxJc3N1ZUxpbms+IGFsbE91dElzc3VlTGluayA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTGlua01hbmFnZXIoKS5nZXRPdXR3YXJkTGlua3MoaXNzdWUuZ2V0SWQoKSlcbiAgICBmb3IgKEl0ZXJhdG9yPElzc3VlTGluaz4gb3V0SXRlcmF0b3IgPSBhbGxPdXRJc3N1ZUxpbmsuaXRlcmF0b3IoKTsgb3V0SXRlcmF0b3IuaGFzTmV4dCgpOykge1xuICAgICAgICBJc3N1ZUxpbmsgaXNzdWVMaW5rID0gKElzc3VlTGluaykgb3V0SXRlcmF0b3IubmV4dCgpO1xuXG4gICAgICAgIGlmKGlzc3VlTGluay5nZXREZXN0aW5hdGlvbk9iamVjdCgpIT0gbnVsbCAmJiBpc3N1ZUxpbmsuaXNzdWVMaW5rVHlwZS5nZXROYW1lKCkudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snaWwubGlua2VkVGt0c1JlbGF0ZXMnXS50b1N0cmluZygpKSl7XG4gICAgICAgICAgICBsb2cud2FybiBcIklzc3VlIGNvbiByZWxhdGVzT3V0SXNzdWVMaW5rXCJcbiAgICAgICAgICAgIC8qRXNlZ3VpcmUgdHJhbnNhemlvbmUgZGkgc3RhdG8gZGVsbGEgZGVzdGluYXRpb25Jc3N1ZSovXG4gICAgICAgICAgICBkZWYgbGlua2VkSXNzdWUgPSBpc3N1ZUxpbmsuZ2V0RGVzdGluYXRpb25PYmplY3QoKVxuICAgICAgICAgICAgZGVmIGxpbmtlZElzc3VlU3RhdHVzID0gbGlua2VkSXNzdWUuZ2V0U3RhdHVzKClcbiAgICAgICAgICAgIGRlZiB0cmFuc2l0aW9uSWRcbiAgICAgICAgICAgIGxvZy53YXJuIFwibGlua2VkSXNzdWU6IFwiICsgbGlua2VkSXNzdWVcbiAgICAgICAgICAgIGxvZy53YXJuIFwibGlua2VkSXNzdWVTdGF0dXMubmFtZTogXCIgKyBsaW5rZWRJc3N1ZVN0YXR1cy5uYW1lXG4gICAgICAgICAgICBpZihsaW5rZWRJc3N1ZVN0YXR1cy5uYW1lID09IHByb3BlcnRpZXNbJ3dmLm9wZW4nXS50b1N0cmluZygpKXtcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uSWQ9QVNTSUdOX1RPX1NVUFBMSUVSXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKHRyYW5zaXRpb25JZD09QVNTSUdOX1RPX1NVUFBMSUVSKXtcbiAgICAgICAgICAgICAgICAvLyBQcmVwYXJlIG91ciBpbnB1dCBmb3IgdGhlIHRyYW5zaXRpb25cbiAgICAgICAgICAgICAgICBkZWYgaXNzdWVJbnB1dFBhcmFtZXRlcnMgPSBpc3N1ZVNlcnZpY2UubmV3SXNzdWVJbnB1dFBhcmFtZXRlcnMoKVxuICAgICAgICAgICAgICAgIGlzc3VlSW5wdXRQYXJhbWV0ZXJzLndpdGgge1xuICAgICAgICAgICAgICAgICAgICBzZXRTa2lwU2NyZWVuQ2hlY2sodHJ1ZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy9kZWYgZmllbGRDb25maWcgPSBhdXRvbWF0aWNhbGx5Q2xvc2VkLmdldFJlbGV2YW50Q29uZmlnKGlzc3VlKVxuICAgICAgICAgICAgICAgIC8vQ29tcG9uZW50QWNjZXNzb3Iub3B0aW9uc01hbmFnZXIuZ2V0T3B0aW9ucyhmaWVsZENvbmZpZyk/LmZpbmQgeyBpdC50b1N0cmluZygpID09IFwiWWVzXCIgfVxuICAgICAgICAgICAgICAgIC8vaXNzdWVJbnB1dFBhcmFtZXRlcnMuYWRkQ3VzdG9tRmllbGRWYWx1ZShmaWVsZENvbmZpZy5nZXRJZCgpLCBcIlllc1wiKSBcblxuICAgICAgICAgICAgICAgIGRlZiBjdXJyZW50VXNlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEppcmFBdXRoZW50aWNhdGlvbkNvbnRleHQoKS5nZXRMb2dnZWRJblVzZXIoKVxuICAgICAgICAgICAgICAgIGRlZiBtaSA9IChNdXRhYmxlSXNzdWUpIGxpbmtlZElzc3VlXG5cbiAgICAgICAgICAgICAgICBkZWYgZmllbGRDb25maWcgPSBhdXRvbWF0aWNhbGx5Q29uZmlybWVkLmdldFJlbGV2YW50Q29uZmlnKGxpbmtlZElzc3VlKVxuICAgICAgICAgICAgICAgIGxvZy53YXJuIFwiZmllbGRDb25maWc6IFwiICsgZmllbGRDb25maWdcbiAgICAgICAgICAgICAgICBkZWYgY2ZOZXdWYWx1ZSA9IENvbXBvbmVudEFjY2Vzc29yLm9wdGlvbnNNYW5hZ2VyLmdldE9wdGlvbnMoZmllbGRDb25maWcpPy5maW5kIHsgaXQudG9TdHJpbmcoKSA9PSBcIlllc1wiIH1cbiAgICAgICAgICAgICAgICBhdXRvbWF0aWNhbGx5Q29uZmlybWVkLnVwZGF0ZVZhbHVlKG51bGwsIGxpbmtlZElzc3VlLCBuZXcgTW9kaWZpZWRWYWx1ZShsaW5rZWRJc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGF1dG9tYXRpY2FsbHlDb25maXJtZWQpLCBjZk5ld1ZhbHVlKSwgbmV3IERlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlcigpKVxuXG4gICAgICAgICAgICAgICAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKCkudXBkYXRlSXNzdWUoY3VycmVudFVzZXIsIG1pLCBFdmVudERpc3BhdGNoT3B0aW9uLkRPX05PVF9ESVNQQVRDSCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGlzc3VlSW5kZXhpbmdTZXJ2aWNlLnJlSW5kZXgobGlua2VkSXNzdWUpXG4gICAgICAgICAgICAgICAgbG9nLndhcm4gXCJVcGRhdGVkIGN1c3RvbWZpZWxkIC0gaXNzdWUgbGlua2F0YVwiXG5cbiAgICAgICAgICAgICAgICBpZiAoaXNzdWVTZXJ2aWNlLnZhbGlkYXRlVHJhbnNpdGlvbih1c2VyLCBsaW5rZWRJc3N1ZS5pZCwgdHJhbnNpdGlvbklkLCBpc3N1ZUlucHV0UGFyYW1ldGVycykuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFBlcmZvcm0gdGhlIHRyYW5zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgZGVmIGlzc3VlUmVzdWx0ID0gaXNzdWVTZXJ2aWNlLnRyYW5zaXRpb24odXNlciwgaXNzdWVTZXJ2aWNlLnZhbGlkYXRlVHJhbnNpdGlvbih1c2VyLCBsaW5rZWRJc3N1ZS5pZCwgdHJhbnNpdGlvbklkLCBpc3N1ZUlucHV0UGFyYW1ldGVycykpXG4gICAgICAgICAgICAgICAgICAgIGlmICghIGlzc3VlUmVzdWx0LmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nLndhcm4oXCJGYWlsZWQgdG8gdHJhbnNpdGlvbiB0YXNrICR7bGlua2VkSXNzdWUua2V5fSwgZXJyb3JzOiAke2lzc3VlUmVzdWx0LmVycm9yQ29sbGVjdGlvbn1cIilcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2cud2FybihcIlRyYW5zYXppb25lIGZhdHRhIDEyMiAke2xpbmtlZElzc3VlLmtleX0sIGVycm9yczogJHtpc3N1ZVJlc3VsdC5lcnJvckNvbGxlY3Rpb259LCAke2xpbmtlZElzc3VlLnN0YXR1c31cIilcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZy53YXJuKFwiQ291bGQgbm90IHRyYW5zaXRpb24gdGFzayAke2xpbmtlZElzc3VlLmtleX0sIGVycm9yczogJHtpc3N1ZVNlcnZpY2UudmFsaWRhdGVUcmFuc2l0aW9uKHVzZXIsIGxpbmtlZElzc3VlLmlkLCB0cmFuc2l0aW9uSWQsIGlzc3VlSW5wdXRQYXJhbWV0ZXJzKS5lcnJvckNvbGxlY3Rpb259XCIpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICB9XG59Iiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="111" name="Compila Rapporto di Intervento" view="fieldscreen">
      <meta name="opsbar-sequence">10</meta>
      <meta name="jira.description"></meta>
      <meta name="jira.fieldscreen.id">19908</meta>
      <restrict-to>
        <conditions>
          <condition type="class">
            <arg name="FIELD_FUNCTION_ID">c1bea7bb-faff-4fe3-adfb-1dacc9b04219</arg>
            <arg name="FIELD_NOTES">YCFgZGlzYWJsZWQ=</arg>
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
            <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJ0cnVlIC8qaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ01haW50ZW5hbmNlIFRpY2tldCcqLyIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
            <arg name="FIELD_PREVIEW_ISSUE"></arg>
          </condition>
        </conditions>
      </restrict-to>
      <validators>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">fdff8da8847f0cecf612f8079bbc8937a21ddfe5</arg>
          <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlcXVpcmVkIEZpZWxkcyAtIHNvbG8gZXJyb3JzLCBubyB3YXJuaW5ncw==</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlXG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGdyb292eS5qc29uLkpzb25CdWlsZGVyXG5pbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXG5cblByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKClcbkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpXG5wcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0ge1xuXHRwcm9wZXJ0aWVzLmxvYWQoaXQpXG59XG5kZWYgZXJyb3JzID0gZmFsc2VcbmRlZiB3YXJuaW5ncyA9IGZhbHNlXG5cbmRlZiBwbGFubmVkVGVjaHMgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLnRlY2huaWNpYW5zJ10udG9TdHJpbmcoKSlbMF1cbmRlZiBhdXRvbWF0aWNhbGx5Q2xvc2VkID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi5hdXRvbWF0aWNhbGx5Q2xvc2VkJ10udG9TdHJpbmcoKSlbMF1cbmRlZiB0cmFuc2l0aW9uQ2hlY2sgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLmNoZWNrQW5kQ29uZmlybSddLnRvU3RyaW5nKCkpWzBdXG5cbmRlZiBlcnJvck1hbmRhdG9yeUZpZWxkcyA9IG5ldyBBcnJheUxpc3QoKVxuZGVmIHdhcm5pbmdFbXB0eUZpZWxkcyA9IG5ldyBBcnJheUxpc3QoKVxuIFxuLy9PUEFBX1RFQ0hOSUNJQU5TXG5pZigoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q2xvc2VkKT09bnVsbCB8fCBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGF1dG9tYXRpY2FsbHlDbG9zZWQpLnRvU3RyaW5nKCkuZXF1YWxzKFwiTm9cIikpICYmIChpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHBsYW5uZWRUZWNocyk9PW51bGwgfHwgKFN0cmluZylpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHBsYW5uZWRUZWNocykgPT0gXCJcIiB8fCBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHBsYW5uZWRUZWNocykudG9TdHJpbmcoKS5lcXVhbHMoXCJcIikpKXtcbiAgICB3YXJuaW5ncyA9IHRydWVcbiAgICB3YXJuaW5nRW1wdHlGaWVsZHMuYWRkKHByb3BlcnRpZXNbJ2NmLnRlY2huaWNpYW5zJ10udG9TdHJpbmcoKSlcbn1cblxuZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKVxuXG5pZiAoIWVycm9ycyAmJiAhd2FybmluZ3Mpe1xuICAgIHJldHVybiB0cnVlXG59ZWxzZXtcbiAgICBpZighZXJyb3JzICYmIHdhcm5pbmdzKXtcbiAgICAgICAgaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZSh0cmFuc2l0aW9uQ2hlY2spLnRvU3RyaW5nKCkuZXF1YWxzKFwiWWVzXCIpKXtcbiAgICAgICAgICAgIC8vbG9nLmRlYnVnIFwicmV0dXJuIHRydWVcIlxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBkZWYgd0xpc3QgPSBuZXcgQXJyYXlMaXN0KClcblxuICAgICAgICAgICAgaWYod2FybmluZ0VtcHR5RmllbGRzLnNpemUoKSA+IDApe1xuICAgICAgICAgICAgICAgIGRlZiB3TGlzdENvbmZpcm1FbXB0eSA9IG5ldyBBcnJheUxpc3QoKVxuICAgICAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5LmFkZChcIldcIilcbiAgICAgICAgICAgICAgICB3TGlzdENvbmZpcm1FbXB0eS5hZGQoXCJDT05GSVJNX0VNUFRZX0ZJRUxEU1wiKVxuICAgICAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5LmFkZChudWxsKVxuICAgICAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5LmFkZCh3YXJuaW5nRW1wdHlGaWVsZHMpXG5cbiAgICAgICAgICAgICAgICB3TGlzdC5hZGQod0xpc3RDb25maXJtRW1wdHkpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG91dHB1dC5hZGQod0xpc3QpXG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJXXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcbiAgICAgICAgICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbihcIldcIiwgb3V0cHV0LnRvU3RyaW5nKCkpICAgXG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYoZXJyb3JzICYmICF3YXJuaW5ncyl7XG4gICAgICAgIGRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuICAgICAgICBcbiAgICAgICAgaWYoZXJyb3JNYW5kYXRvcnlGaWVsZHMuc2l6ZSgpID4gMCl7XG4gICAgICAgICAgICBkZWYgZUxpc3RNYW5kYXRvcnkgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZChcIkVcIilcbiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZChcIk1BTkRBVE9SWV9GSUVMRFNcIilcbiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZChudWxsKVxuICAgICAgICAgICAgZUxpc3RNYW5kYXRvcnkuYWRkKGVycm9yTWFuZGF0b3J5RmllbGRzKVxuICAgICAgICAgICAgZUxpc3QuYWRkKGVMaXN0TWFuZGF0b3J5KVxuICAgICAgICB9XG4gICAgICAgIFxuXHRcdG91dHB1dC5hZGQoZUxpc3QpXG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oJ3tcIkVcIjpcIicgKyBvdXRwdXQudG9TdHJpbmcoKSArICdcIn0nKVxuICAgICAgICAvL3Rocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oXCJFXCIsIG91dHB1dC50b1N0cmluZygpKSAgIFxuICAgIH1cbiAgICBpZihlcnJvcnMgJiYgd2FybmluZ3Mpe1xuICAgICAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgZGVmIHdMaXN0ID0gbmV3IEFycmF5TGlzdCgpXG4gICAgICAgIFxuICAgICAgICBpZihlcnJvck1hbmRhdG9yeUZpZWxkcy5zaXplKCkgPiAwKXtcbiAgICAgICAgICAgIGRlZiBlTGlzdE1hbmRhdG9yeSA9IG5ldyBBcnJheUxpc3QoKVxuICAgICAgICAgICAgZUxpc3RNYW5kYXRvcnkuYWRkKFwiRVwiKVxuICAgICAgICAgICAgZUxpc3RNYW5kYXRvcnkuYWRkKFwiTUFOREFUT1JZX0ZJRUxEU1wiKVxuICAgICAgICAgICAgZUxpc3RNYW5kYXRvcnkuYWRkKG51bGwpXG4gICAgICAgICAgICBlTGlzdE1hbmRhdG9yeS5hZGQoZXJyb3JNYW5kYXRvcnlGaWVsZHMpXG4gICAgICAgICAgICBlTGlzdC5hZGQoZUxpc3RNYW5kYXRvcnkpXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmKHdhcm5pbmdFbXB0eUZpZWxkcy5zaXplKCkgPiAwKXtcbiAgICAgICAgICAgIGRlZiB3TGlzdENvbmZpcm1FbXB0eSA9IG5ldyBBcnJheUxpc3QoKVxuICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHkuYWRkKFwiV1wiKVxuICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHkuYWRkKFwiQ09ORklSTV9FTVBUWV9GSUVMRFNcIilcbiAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5LmFkZChudWxsKVxuICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHkuYWRkKHdhcm5pbmdFbXB0eUZpZWxkcylcblxuICAgICAgICAgICAgd0xpc3QuYWRkKHdMaXN0Q29uZmlybUVtcHR5KVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICBvdXRwdXQuYWRkKHdMaXN0KVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJXRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbihcIldFXCIsIG91dHB1dC50b1N0cmluZygpKSAgXG4gICAgfVxufSIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
          <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZQppbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb24KaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3IKaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGdyb292eS5qc29uLkpzb25CdWlsZGVyCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbAoKUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKQpGaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKQpwcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0gewoJcHJvcGVydGllcy5sb2FkKGl0KQp9CmRlZiBDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQogCklzc3VlIGlzc3VlID0gaXNzdWUKCmRlZiBlcnJvcnMgPSBmYWxzZQpkZWYgd2FybmluZ3MgPSBmYWxzZQoKZGVmIHBsYW5uZWRUZWNocyA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YudGVjaG5pY2lhbnMnXS50b1N0cmluZygpKVswXQpkZWYgYXV0b21hdGljYWxseUNsb3NlZCA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YuYXV0b21hdGljYWxseUNsb3NlZCddLnRvU3RyaW5nKCkpWzBdCmRlZiB0cmFuc2l0aW9uQ2hlY2sgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLmNoZWNrQW5kQ29uZmlybSddLnRvU3RyaW5nKCkpWzBdCgpkZWYgZXJyb3JNYW5kYXRvcnlGaWVsZHMgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIHdhcm5pbmdFbXB0eUZpZWxkcyA9IG5ldyBBcnJheUxpc3QoKQogCi8vT1BBQV9URUNITklDSUFOUwppZigoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q2xvc2VkKT09bnVsbCB8fCBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGF1dG9tYXRpY2FsbHlDbG9zZWQpLnRvU3RyaW5nKCkuZXF1YWxzKCJObyIpKSAmJiAoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShwbGFubmVkVGVjaHMpPT1udWxsIHx8IChTdHJpbmcpaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShwbGFubmVkVGVjaHMpID09ICIiIHx8IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUocGxhbm5lZFRlY2hzKS50b1N0cmluZygpLmVxdWFscygiIikpKXsKICAgIHdhcm5pbmdzID0gdHJ1ZQogICAgd2FybmluZ0VtcHR5RmllbGRzLmFkZChwcm9wZXJ0aWVzWydjZi50ZWNobmljaWFucyddLnRvU3RyaW5nKCkpCn0KCmRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KCkKCmlmICghZXJyb3JzICYmICF3YXJuaW5ncyl7CiAgICByZXR1cm4gdHJ1ZQp9ZWxzZXsKICAgIGlmKCFlcnJvcnMgJiYgd2FybmluZ3MpewogICAgICAgIGlmKGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUodHJhbnNpdGlvbkNoZWNrKS50b1N0cmluZygpLmVxdWFscygiWWVzIikpewogICAgICAgICAgICAvL2xvZy5kZWJ1ZyAicmV0dXJuIHRydWUiCiAgICAgICAgICAgIHJldHVybiB0cnVlCiAgICAgICAgfWVsc2V7CiAgICAgICAgICAgIGRlZiB3TGlzdCA9IG5ldyBBcnJheUxpc3QoKQoKICAgICAgICAgICAgaWYod2FybmluZ0VtcHR5RmllbGRzLnNpemUoKSA+IDApewogICAgICAgICAgICAgICAgZGVmIHdMaXN0Q29uZmlybUVtcHR5ID0gbmV3IEFycmF5TGlzdCgpCiAgICAgICAgICAgICAgICB3TGlzdENvbmZpcm1FbXB0eS5hZGQoIlciKQogICAgICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHkuYWRkKCJDT05GSVJNX0VNUFRZX0ZJRUxEUyIpCiAgICAgICAgICAgICAgICB3TGlzdENvbmZpcm1FbXB0eS5hZGQobnVsbCkKICAgICAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5LmFkZCh3YXJuaW5nRW1wdHlGaWVsZHMpCgogICAgICAgICAgICAgICAgd0xpc3QuYWRkKHdMaXN0Q29uZmlybUVtcHR5KQogICAgICAgICAgICB9CgogICAgICAgICAgICBvdXRwdXQuYWRkKHdMaXN0KQogICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7IlciOiInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnIn0nKQogICAgICAgICAgICAvL3Rocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oIlciLCBvdXRwdXQudG9TdHJpbmcoKSkgICAKICAgICAgICB9CiAgICB9CiAgICBpZihlcnJvcnMgJiYgIXdhcm5pbmdzKXsKICAgICAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KCkKICAgICAgICAKICAgICAgICBpZihlcnJvck1hbmRhdG9yeUZpZWxkcy5zaXplKCkgPiAwKXsKICAgICAgICAgICAgZGVmIGVMaXN0TWFuZGF0b3J5ID0gbmV3IEFycmF5TGlzdCgpCiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZCgiRSIpCiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZCgiTUFOREFUT1JZX0ZJRUxEUyIpCiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZChudWxsKQogICAgICAgICAgICBlTGlzdE1hbmRhdG9yeS5hZGQoZXJyb3JNYW5kYXRvcnlGaWVsZHMpCiAgICAgICAgICAgIGVMaXN0LmFkZChlTGlzdE1hbmRhdG9yeSkKICAgICAgICB9CiAgICAgICAgCgkJb3V0cHV0LmFkZChlTGlzdCkKICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7IkUiOiInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnIn0nKQogICAgICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigiRSIsIG91dHB1dC50b1N0cmluZygpKSAgIAogICAgfQogICAgaWYoZXJyb3JzICYmIHdhcm5pbmdzKXsKICAgICAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KCkKICAgICAgICBkZWYgd0xpc3QgPSBuZXcgQXJyYXlMaXN0KCkKICAgICAgICAKICAgICAgICBpZihlcnJvck1hbmRhdG9yeUZpZWxkcy5zaXplKCkgPiAwKXsKICAgICAgICAgICAgZGVmIGVMaXN0TWFuZGF0b3J5ID0gbmV3IEFycmF5TGlzdCgpCiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZCgiRSIpCiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZCgiTUFOREFUT1JZX0ZJRUxEUyIpCiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZChudWxsKQogICAgICAgICAgICBlTGlzdE1hbmRhdG9yeS5hZGQoZXJyb3JNYW5kYXRvcnlGaWVsZHMpCiAgICAgICAgICAgIGVMaXN0LmFkZChlTGlzdE1hbmRhdG9yeSkKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgaWYod2FybmluZ0VtcHR5RmllbGRzLnNpemUoKSA+IDApewogICAgICAgICAgICBkZWYgd0xpc3RDb25maXJtRW1wdHkgPSBuZXcgQXJyYXlMaXN0KCkKICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHkuYWRkKCJXIikKICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHkuYWRkKCJDT05GSVJNX0VNUFRZX0ZJRUxEUyIpCiAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5LmFkZChudWxsKQogICAgICAgICAgICB3TGlzdENvbmZpcm1FbXB0eS5hZGQod2FybmluZ0VtcHR5RmllbGRzKQoKICAgICAgICAgICAgd0xpc3QuYWRkKHdMaXN0Q29uZmlybUVtcHR5KQogICAgICAgIH0KICAgICAgICAKICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KQogICAgICAgIG91dHB1dC5hZGQod0xpc3QpCiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigneyJXRSI6IicgKyBvdXRwdXQudG9TdHJpbmcoKSArICcifScpCiAgICAgICAgLy90aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCJXRSIsIG91dHB1dC50b1N0cmluZygpKSAgCiAgICB9Cn0=</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
          <arg name="FIELD_SCRIPT_FILE"></arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">2580b6a9-1e28-4b71-b42f-6b72d015b920</arg>
          <arg name="FIELD_NOTES">YCFgQ3JlYXRlIFNOICYgU08gZm9yIG9sZCB0aWNrZXRz</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuXG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUubGluay5Jc3N1ZUxpbmtcblxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpO1xuQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpO1xuXG5kZWYgU04gPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfU0FQX1NFUlZJQ0VfTk9USUZJQ0FUSU9OXCIpWzBdXG5kZWYgcmVxdWVzdE1ldGhvZFxuZGVmIGJhc2VVUkxcblxuVVJMIHVybFxuSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvblxuXG5pZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKFNOKSA9PSBudWxsICYmIGlzc3VlLmlzc3VlVHlwZS5uYW1lICE9IFwiUGxhbm5lZCBNYWludGVuYW5jZSBUaWNrZXRcIil7XG4gICAgcmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuXG4gICAgZGVmIGJvZHlfcmVxID0gW11cbiAgICBib2R5X3JlcSA9IFtcbiAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXksXG4gICAgICAgIFwic3RhdHVzXCI6IFwiT1BFXCJcbiAgICBdIFxuXG4gICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvYWZ0ZXIvc2FsZXMvY3JlYXRlL3NlcnZpY2Uvbm90aWZpY2F0aW9uXCJcblxuICAgIGxvZy5kZWJ1ZyBcImJhc2VVUkwgU046IFwiICsgYmFzZVVSTFxuICAgIGxvZy5kZWJ1ZyBcImJvZHlfcmVxIFNOOiBcIiArIGJvZHlfcmVxXG4gICAgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG4gICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxuICAgIGxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpO1xuXG4gICAgZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KClcblxuICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMVwiKSl7XG4gICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG4gICAgICAgIFxuICAgICAgICBkZWYgb3V0cHV0TXNnID0gKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0XG4gICAgICAgIGxvZy5kZWJ1ZyBcIigoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dDogXCIgKyBvdXRwdXRNc2dcblxuICAgICAgICBkZWYganNvblNsdXJwZXIgPSBuZXcgSnNvblNsdXJwZXIoKVxuICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgICAgICBhc3NlcnQganNvbl9vYmplY3QgaW5zdGFuY2VvZiBNYXAgIFxuICAgICAgICBsb2cuZGVidWcgXCJtZXNzYWdlOiBcIiArICBqc29uX29iamVjdC5tZXNzYWdlXG4gICAgICAgIGxvZy5kZWJ1ZyBcImVycm9yczogXCIgKyAganNvbl9vYmplY3QuZXJyb3JzLnRvU3RyaW5nKClcblxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIk9QLVNBUC1TTi1VUERBVEVcIilcbiAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5lcnJvcnNbMF0pXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChlcnJvck1zZ3MpXG4gICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycylcblxuICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcbiAgICB9ZWxzZXtcbiAgICAgICAgLyoqIFNFUlZJQ0UgT1JERVIgQ1JFQVRJT04gKiovXG4gICAgICAgIGJvZHlfcmVxID0gW1xuICAgICAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXlcbiAgICAgICAgXSBcbiAgICAgICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvYWZ0ZXIvc2FsZXMvY3JlYXRlL29yL3VwZGF0ZS9zZXJ2aWNlL29yZGVyXCJcblxuICAgICAgICBsb2cuZGVidWcgXCJiYXNlVVJMIFNPOiBcIiArIGJhc2VVUkxcbiAgICAgICAgbG9nLmRlYnVnIFwiYm9keV9yZXEgU086IFwiICsgYm9keV9yZXFcbiAgICAgICAgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgICAgICBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xuICAgICAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG4gICAgICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xuICAgICAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbiAgICAgICAgY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbiAgICAgICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuICAgICAgICBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgICAgICBjb25uZWN0aW9uLm91dHB1dFN0cmVhbS53aXRoV3JpdGVyKFwiVVRGLThcIikgeyBuZXcgU3RyZWFtaW5nSnNvbkJ1aWxkZXIoaXQsIGJvZHlfcmVxKSB9XG4gICAgICAgIGxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgICAgICBjb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuICAgICAgICBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5cbiAgICAgICAgaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAxXCIpICYmICFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAwXCIpKXtcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZGVmIG91dHB1dE1zZyA9ICgoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dFxuICAgIFx0XHRsb2cuZGVidWcgXCIoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHQ6IFwiICsgb3V0cHV0TXNnXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGRlZiBqc29uU2x1cnBlciA9IG5ldyBKc29uU2x1cnBlcigpXG4gICAgICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgICAgICAgICAgYXNzZXJ0IGpzb25fb2JqZWN0IGluc3RhbmNlb2YgTWFwICBcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIm1lc3NhZ2U6IFwiICsgIGpzb25fb2JqZWN0Lm1lc3NhZ2VcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcImVycm9yczogXCIgKyAganNvbl9vYmplY3QuZXJyb3JzLnRvU3RyaW5nKClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiRVwiKVxuICAgICAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiT1AtU0FQLVNPLUNSRUFURVwiKVxuICAgICAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5lcnJvcnNbMF0pXG4gICAgICAgICAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKVxuICAgICAgICAgICAgZUxpc3QuYWRkKGVMaXN0RXJyb3JzKVxuXG4gICAgICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgICAgIH1cbiAgICB9XG59Iiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">dea2fa04-ea02-41ce-b5d3-f9f9e0a38379</arg>
          <arg name="FIELD_NOTES">YCFgU0FQOiB1cGRhdGUgU04gc3RhdHVzICYgY3JlYXRlIFNP</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="null" status="null" step="5">
          <post-functions>
            <function type="class">
              <arg name="field.copyFieldSource1"></arg>
              <arg name="textValue">-1</arg>
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="maxAllowed-integerValue"></arg>
              <arg name="workflowName-textValue">OPAA: PM Task Workflow</arg>
              <arg name="performTransitionAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="scopeType">PARENT</arg>
              <arg name="destination-scopeTarget">SUB_TASK</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitieslinkedtransition-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="integerValue">31</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">ch.beecom.jira.jsu.workflow.function.linkedtransition.LinkedTransitionFunction</arg>
              <arg name="scopeSource-jql"></arg>
              <arg name="status"></arg>
            </function>
            <function type="class">
              <arg name="conditionList">6</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="comparisonType">1</arg>
              <arg name="precondition">true</arg>
              <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
              <arg name="preconditionNegateResult-booleanValue"></arg>
              <arg name="fieldValue">Planned Maintenance Ticket</arg>
              <arg name="preconditionMode-textValue">DISCARD</arg>
              <arg name="fieldsList">issuetype</arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="append.value"></arg>
              <arg name="maxAllowed-integerValue">50</arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field.value">%%CURRENT_DATETIME%%</arg>
              <arg name="field.name">customfield_22628</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">57df5339-7590-48bb-8b3c-756aca191f01</arg>
              <arg name="FIELD_NOTES">YCFgUE0gVGFzazogY2xlYXIgc3ViLXRhc2tzIGNhY2hl</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxuXG5pc3N1ZS5nZXRTdWJUYXNrT2JqZWN0cygpLmVhY2h7XG4gICAgaSAtPiBcbiAgICAvKiBSRVNUIEFQSSBwZXIgcHVsaXppYSBjYWNoZSBpc3N1ZSBsaW5rYXRhICovXG4gICAgcmVxdWVzdE1ldGhvZCA9IFwiR0VUXCI7XG4gICAgLypTY3JpcHQgVmFyaWFibGVzKi9cbiAgICAvL1BlciB0ZXN0IGRhIGNvbnNvbGVcbiAgICAvL0lzc3VlIGlzc3VlID0gaXNzdWVNYW5hZ2VyLmdldElzc3VlQnlLZXlJZ25vcmVDYXNlKFwiQUFTLTMyNTM1XCIpXG4gICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2F1dG9tYXRpb24vY2xlYXJDYWNoZS90aWNrZXRrZXkvXCIgKyBpLmtleVxuICAgIFVSTCB1cmwgPSBuZXcgVVJMKGJhc2VVUkwpXG4gICAgSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLThcIik7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJBY2NlcHRcIiwgXCIqLypcIik7XG4gICAgY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbiAgICBjb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5jb25uZWN0KCk7XG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMFwiKSl7XG4gICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG4gICAgfVxufVxuIiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="field.type">8</arg>
              <arg name="full.module.key">com.riadalabs.jira.plugins.insightinsight-post-function</arg>
              <arg name="field.groovyScript">import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.MutableIssue;
import com.atlassian.jira.event.type.EventDispatchOption;
import org.apache.log4j.Level

Properties relativePath = new Properties()
File relativePathFile = new File('/var/atlassian/application-data/jira/insightPathToScript.properties')
relativePathFile.withInputStream {
	relativePath.load(it)
}

Properties properties = new Properties()
File propertiesFile = new File('/var/atlassian/application-data/shared/scripts/opproject.properties')
propertiesFile.withInputStream {
                properties.load(it)
}

/* Get Insight Object Facade from plugin accessor */
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(&quot;com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade&quot;); 
def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);
  
/* Get Insight Object Type Facade from plugin accessor */
Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(&quot;com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade&quot;); 
def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);
  
/* Get Insight Object Attribute Facade from plugin accessor */
Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(&quot;com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade&quot;); 
def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
  
Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(&quot;com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory&quot;); 
def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);

Issue issue = issue

def plannedTechsField = issue.getCustomFieldValue(ComponentAccessor.getCustomFieldManager().getCustomFieldObjectByName(properties['cf.technicians'].toString()))
def onSiteTechsField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.techniciansOnsite'].toString())[0];
def OnSiteTechObjects = new ArrayList();

def automaticallyClosedField = issue.getCustomFieldValue(ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.automaticallyClosed'].toString()))

def ONSITE_TECH_REPORT_OBJ_TYPE=properties['iobj.onSiteTechReport'].toString().toInteger()
def ONSITE_TECH_REPORT_ATTR_NAME=properties['iobj.onSiteTechReport.name.id'].toString().toInteger()
def ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF=properties['iobj.onSiteTechReport.technicianRef.id'].toString().toInteger()
def ONSITE_TECH_REPORT_ATTR_SUPPLIER_REF=properties['iobj.onSiteTechReport.supplierRef.id'] ? properties['iobj.onSiteTechReport.supplierRef.id'].toString().toInteger() : 3073

if(automaticallyClosedField==null || automaticallyClosedField.toString().equals(&quot;No&quot;)){
    if(plannedTechsField){
        
        for(technician in plannedTechsField){
            
            //extract insight key ang get object
            def tech=technician.toString()
            def techKey = tech.substring(tech.indexOf('(')+1,tech.indexOf(')'))
            def techName = tech.substring(0,tech.indexOf('(')-1)
            def techObject = objectFacade.loadObjectBean(techKey)
            log.info &quot;techKey: &quot; + techKey
            log.info (&quot;techName: &quot; + techName)
            log.info (&quot;techObject: &quot; + techObject)
            
            def objectTypeOnSiteTechReport = objectTypeFacade.loadObjectTypeBean(ONSITE_TECH_REPORT_OBJ_TYPE);
            def newObjectBean = objectTypeOnSiteTechReport.createMutableObjectBean();
            
            def objectAttributeBeans = new ArrayList();
            def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_NAME); 
            
            objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, nameObjectTypeAttributeBean, techName));
                    
            newObjectBean.setObjectAttributeBeans(objectAttributeBeans);
            /* Store the object into Insight. The new ObjectBean will be updated with an unique ID */
            try {
                newObjectBean = objectFacade.storeObjectBean(newObjectBean);
                log.warn(&quot;newObjectBean: &quot; + newObjectBean);
            } catch (Exception vie) {
                log.warn(&quot;Could not create issue due to validation exception:&quot; + vie.getMessage());
            }
    
            /* Update TECHNICIAN_REF on the newObject */		        
            def objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_TECHNICIAN_REF).createMutable() //The id of the attribute

            /* Create the new attribute bean based on the value */
            def newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, techKey);
            /* Load the attribute bean */
            def objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), techKey);
            if (objectAttributeBean != null) {
               /* If attribute exist reuse the old id for the new attribute */
               newObjectAttributeBean.setId(objectAttributeBean.getId());
            }
            /* Store the object attribute into Insight. */
            try {
                objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);
            } catch (Exception vie) {
                log.warn(&quot;Could not update object attribute due to validation exception:&quot; + vie.getMessage());
            }  
            
            /* Update SUPPLIER_REF on the newObject */	
            /* Get SUPPLIER_REF from Tech */
            def obTriage = objectFacade.loadObjectAttributeBean(techObject.getId(), (properties['iobj.techOnsite.supplierRef'] ? properties['iobj.techOnsite.supplierRef'].toString() : &quot;SUPPLIER_REF&quot;)).createMutable()
            def suppRef = obTriage.getObjectAttributeValueBeans().toString()
            def supp = suppRef.toString()
            log.info &quot;supp: &quot; + supp
            suppRefId = supp.substring(supp.indexOf('(')+1,supp.indexOf(')'))
            log.info &quot;suppRefId: &quot; + suppRefId
            suppRefKey = properties['ischema.aa'].toString() + &quot;-&quot; + suppRefId
            log.info &quot;suppRefKey: &quot; + suppRefKey
            suppRefObj = objectFacade.loadObjectBean(properties['ischema.aa'].toString() + &quot;-&quot; + suppRefId)
			log.info &quot;suppRefObj: &quot; + suppRefObj
            
            def suppObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_TECH_REPORT_ATTR_SUPPLIER_REF).createMutable() //The id of the attribute
            
            /* Create the new attribute bean based on the value */
            newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, suppObjectTypeAttributeBean, suppRefKey);
            /* Load the attribute bean */
            objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), suppRefKey);
            if (objectAttributeBean != null) {
               /* If attribute exist reuse the old id for the new attribute */
               newObjectAttributeBean.setId(objectAttributeBean.getId());
            }
            /* Store the object attribute into Insight. */
            try {
                objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);
            } catch (Exception vie) {
                log.warn(&quot;Could not update object attribute due to validation exception:&quot; + vie.getMessage());
            }  
            
            OnSiteTechObjects.add(newObjectBean)
         }
    }
    log.info (&quot;OnSiteTechObjects: &quot; + OnSiteTechObjects)
    def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
    
    if (!OnSiteTechObjects.isEmpty()) {
        MutableIssue mi = (MutableIssue) issue;
        mi.setCustomFieldValue(onSiteTechsField, OnSiteTechObjects);
        ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
    }   
}            </arg>
              <arg name="field.filepath"></arg>
              <arg name="class.name">com.riadalabs.jira.plugins.insight.services.jira.postfunction.InsightPostFunction</arg>
              <arg name="field.description">OP: Create OnSite_Tech_Report objects to be associated to the issue's customfield OP_TECHNICIANS_ONSITE</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="maxAllowed-integerValue">50</arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field">customfield_22693</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="81" name="Rifiuta Intervento" view="fieldscreen">
      <meta name="opsbar-sequence">20</meta>
      <meta name="jira.description"></meta>
      <meta name="jira.fieldscreen.id">19906</meta>
      <restrict-to>
        <conditions>
          <condition type="class">
            <arg name="FIELD_FUNCTION_ID">abf73c31-806e-4e97-9a9d-895cf27e5345</arg>
            <arg name="FIELD_NOTES">YCFgTm90IGF2YWlsYWJsZSBmb3IgUE0gVGlja2V0cw==</arg>
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
            <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSAhPSAnUGxhbm5lZCBNYWludGVuYW5jZSBUaWNrZXQnIiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
          </condition>
        </conditions>
      </restrict-to>
      <results>
        <unconditional-result old-status="null" status="null" step="1">
          <post-functions>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">82bbfbab-2201-4d21-a192-434ad461af50</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IE5ldyBJbnN0YWxsYXRpb24gLSBDaGVjayBsaW5rZWRUaWNrZXRzICYgRmFzdC1UcmFuc2FjdCB0aGVt</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="maxAllowed-integerValue">50</arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field">customfield_22756</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
              <arg name="field2">customfield_22693</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="FIELD_NOTES">YCFgT1AgRW1haWwgTm90aWZpY2F0aW9uOiBSRUpFQ1RFRF9CWV9TVVBQTElFUiAtIE1hbnRlbnV0YSBjb21lIHBvc3QgZnVuY3Rpb24gcGVyIG5vbiBnZW5lcmFyZSBibG9jY2hpIGFsIGZvcm5pdG9yZSBsZWdhdGkgYSBlcnJvcmkgZGkgaW52aW8gbWFpbCBpbnRlcm5l</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7CmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5CmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbAoKUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKQpGaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKQpwcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0gewoJcHJvcGVydGllcy5sb2FkKGl0KQp9CkNhdGVnb3J5IGxvZyA9IENhdGVnb3J5LmdldEluc3RhbmNlKCJjb20ub25yZXNvbHZlLmppcmEuZ3Jvb3Z5LlBvc3RGdW5jdGlvbiIpCmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKQoKZGVmIHJlcXVlc3RNZXRob2QgPSAiUE9TVCI7CgpJc3N1ZU1hbmFnZXIgaXNzdWVNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKCk7CkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTsKCmRlZiBib2R5X3JlcSA9IFsKCSJ0ZW1wbGF0ZU5hbWUiOiBwcm9wZXJ0aWVzWyd0dC5yZWplY3RlZEJ5U3VwcGxpZXInXS50b1N0cmluZygpLAoJInBlYyI6IGZhbHNlLAogICAgImlzc3VlS2V5IjogaXNzdWUua2V5Cl0KCmRlZiBiYXNlVVJMID0gImh0dHA6Ly8iICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyAiL29wL3Jlc3QvamlyYS9BQS90cmFuc2FjdGlvbi9tYWlsL3NlbmQiClVSTCB1cmwKdXJsID0gbmV3IFVSTChiYXNlVVJMKQoKSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eSgiQ29udGVudC1UeXBlIiwgImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOCIpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eSgiQWNjZXB0IiwgIiovKiIpOwpjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpOwpjb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7CmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtCmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtLndpdGhXcml0ZXIoIlVURi04IikgeyBuZXcgU3RyZWFtaW5nSnNvbkJ1aWxkZXIoaXQsIGJvZHlfcmVxKSB9CmxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbQpjb25uZWN0aW9uLmNvbm5lY3QoKTsKCmxvZy5kZWJ1ZyAidXJsOiAiICsgdXJsCmxvZy5kZWJ1ZyAiUmVzcG9uc2VDb2RlOiIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpCmxvZy5kZWJ1ZyAiUmVzcG9uc2VNZXNzYWdlOiIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpCmxvZy5kZWJ1ZyAiZ2V0UmVzcG9uc2VNZXNzYWdlOiIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpCgo=</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="51" name="Assegna a Fornitore" view="fieldscreen">
      <meta name="opsbar-sequence">50</meta>
      <meta name="jira.description"></meta>
      <meta name="jira.fieldscreen.id">19904</meta>
      <restrict-to>
        <conditions type="AND">
          <condition type="class">
            <arg name="FIELD_FUNCTION_ID">93d6b54e-ad03-41e6-82a8-a6d0a675107e</arg>
            <arg name="FIELD_NOTES">YCFgT1BfQVNTRVQgc2hvdWxkIGJlIGV2YWx1YXRlZA==</arg>
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
            <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJjZlZhbHVlc1snT1BfQVNTRVQnXSAhPSBudWxsIHx8IGlzc3VlLmlzc3VlVHlwZS5uYW1lID09ICdQbGFubmVkIE1haW50ZW5hbmNlIFRpY2tldCciLCJzY3JpcHRQYXRoIjpudWxsfQ==</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
          </condition>
          <condition type="class">
            <arg name="FIELD_FUNCTION_ID">862e4160-0f10-49db-afe0-9dc656448701</arg>
            <arg name="FIELD_NOTES">YCFgT1BfU1VQUExJRVIgc2hvdWxkIGJlIGV2YWx1YXRlZA==</arg>
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
            <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuXG5kZWYgdHJvdmF0bz1mYWxzZVxuZm9yIChzIGluIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi5zdXBwbGllciddLnRvU3RyaW5nKCkpKXtcbiAgICBpZiAoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzKSAhPSBudWxsKXtcbiAgICAgICAgdHJvdmF0bz10cnVlXG4gICAgfVxufVxucmV0dXJuIHRyb3ZhdG9cbiIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
            <arg name="FIELD_PREVIEW_ISSUE">AAS-15446</arg>
          </condition>
        </conditions>
      </restrict-to>
      <validators>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">339d339e-1008-47f6-86fc-0fa1b991ccd2</arg>
          <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIEN1c3RvbWVyIENvbnRyYWN0ICYmIE51bWJlciBvZiB0aWNrZXRzIGluIHRoZSBsYXN0IDYwIGRheXM=</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">6411a0f5-9ae7-4a56-a7f5-a857227a153e</arg>
          <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlLVNjaGVkdWxlIEZsYWc=</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlXG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGdyb292eS5qc29uLkpzb25CdWlsZGVyXG5pbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXG5pbXBvcnQgamF2YS50ZXh0LkRhdGVGb3JtYXQ7XG5pbXBvcnQgamF2YS50ZXh0LlNpbXBsZURhdGVGb3JtYXQ7XG5pbXBvcnQgamF2YS51dGlsLkRhdGU7XG5pbXBvcnQgamF2YS5zcWwuVGltZXN0YW1wXG5cblByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKClcbkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpXG5wcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0ge1xuXHRwcm9wZXJ0aWVzLmxvYWQoaXQpXG59XG5cbmRlZiB3YXJuaW5ncyA9IGZhbHNlXG5kZWYgbWlzc2luZ0NvbnRyYWN0ID0gZmFsc2VcbmRlZiBleHBpcmVkQ29udHJhY3QgPSBmYWxzZVxuZGVmIGVycm9ycyA9IGZhbHNlXG5cbmRlZiByZXNjaGVkdWxpbmcgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLnJlc2NoZWR1bGluZyddID8gcHJvcGVydGllc1snY2YucmVzY2hlZHVsaW5nJ10udG9TdHJpbmcoKSA6IFwiT1BfQ0hBTkdFX1NDSEVEVUxJTkdcIilbMF1cbmRlZiB0cmFuc2l0aW9uQ2hlY2sgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLmNoZWNrQW5kQ29uZmlybTInXS50b1N0cmluZygpKVswXVxuZGVmIGZpcnN0VGlja2V0ID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi5maXJzdFRrdCddLnRvU3RyaW5nKCkpWzBdXG5cbmRlZiB3YXJuaW5nRW1wdHlGaWVsZHMgPSBuZXcgQXJyYXlMaXN0KClcbmRlZiBlcnJvck1hbmRhdG9yeUZpZWxkcyA9IG5ldyBBcnJheUxpc3QoKVxuIFxuaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShyZXNjaGVkdWxpbmcpLnRvU3RyaW5nKCkuZXF1YWxzKFwiWWVzXCIpICYmIChpc3N1ZS5nZXRJc3N1ZVR5cGUoKS5uYW1lLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2l0Lm5ld0luc3RhbGxhdGlvbiddKSB8fCBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGZpcnN0VGlja2V0KSE9bnVsbCkpe1xuICAgIC8vQXNrIGNvbmZpcm1hdGlvbiB0byBkZWxldGUgYW5kIGNyZWF0ZSBhZ2FpbiBOZXcgSW5zdGFsbGF0aW9uIGF0dGFjaG1lbnRzXG4gICAgd2FybmluZ3MgPSB0cnVlXG59XG5cbmRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcblxuaWYgKCF3YXJuaW5ncyl7XG4gICAgcmV0dXJuIHRydWVcbn1lbHNle1xuICAgIGlmKHdhcm5pbmdzKXtcbiAgICAgICAgaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZSh0cmFuc2l0aW9uQ2hlY2spLnRvU3RyaW5nKCkuZXF1YWxzKFwiWWVzXCIpKXtcbiAgICAgICAgICAgIC8vbG9nLmRlYnVnIFwicmV0dXJuIHRydWVcIlxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBkZWYgd0xpc3QgPSBuZXcgQXJyYXlMaXN0KClcblx0XHRcdGRlZiB3TGlzdENvbmZpcm1FbXB0eUNvbnRyYWN0ID0gbmV3IEFycmF5TGlzdCgpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5Q29udHJhY3QuYWRkKFwiV1wiKVxuICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHlDb250cmFjdC5hZGQoXCJORVdfRE9DU19HRU5FUkFUSU9OXCIpXG4gICAgICAgICAgICB3TGlzdENvbmZpcm1FbXB0eUNvbnRyYWN0LmFkZChudWxsKVxuXG4gICAgICAgICAgICB3TGlzdC5hZGQod0xpc3RDb25maXJtRW1wdHlDb250cmFjdClcbiAgICAgICAgXG4gICAgICAgICAgICBvdXRwdXQuYWRkKHdMaXN0KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiV1wiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpIFxuICAgICAgICB9XG4gICAgfVxufSIsInNjcmlwdFBhdGgiOm51bGx9</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">136ddcac-3447-4136-8695-c845548ae5b2</arg>
          <arg name="FIELD_NOTES">YCFgRGVsZXRlIHByZXZpb3VzIGF0dGFjaG1lbnRzIHJlbGF0ZWQgdG8gTkVXIEluc3RhbGxhdGlvbiBUS1QgR2VuZXJhdGlvbg==</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">17f1689e-675a-4677-aec8-021a2640fd0c</arg>
          <arg name="FIELD_NOTES">YCFgT1A6IERvYyBUZW1wbGF0ZSBnZW5lcmF0aW9uIC0gc2UgTmV3IEluc3RhbGxhdGlvbiBPUiBGaXJzdCBUaWNrZXQgPSB0cnVl</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5Xb3JrZmxvd0V4Y2VwdGlvbjtcbmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvblxuaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyO1xuaW1wb3J0IGdyb292eS5qc29uLlN0cmVhbWluZ0pzb25CdWlsZGVyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5DdXN0b21GaWVsZE1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3I7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5NdXRhYmxlSXNzdWVcbmltcG9ydCBvcmcuYXBhY2hlLmNvbW1vbnMuY29kZWMuYmluYXJ5LkJhc2U2NDtcbmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5XG5pbXBvcnQgZ3Jvb3Z5eC5uZXQuaHR0cC5IVFRQQnVpbGRlclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcblxuZGVmIHJlcXVlc3RNZXRob2RcbmRlZiBiYXNlVVJMXG5cbmRlZiBmaXJzdFRpY2tldCA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YuZmlyc3RUa3QnXS50b1N0cmluZygpKVswXVxuXG5sb2cuZGVidWcgaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZVxubG9nLmRlYnVnIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoZmlyc3RUaWNrZXQpXG5cblxuLyogUkVTVCBBUEkgcGVyIEludmlvIE5vdGlmaWNhIEVtYWlsIE9OU0lURV9SRVBPUlQgKi9cbnJlcXVlc3RNZXRob2QgPSBcIkdFVFwiO1xuZGVmIHJlc2NoZWR1bGluZyA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YucmVzY2hlZHVsaW5nJ10gPyBwcm9wZXJ0aWVzWydjZi5yZXNjaGVkdWxpbmcnXS50b1N0cmluZygpIDogXCJPUF9DSEFOR0VfU0NIRURVTElOR1wiKVswXVxuZGVmIHRyYW5zaXRpb25DaGVjayA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YuY2hlY2tBbmRDb25maXJtJ10udG9TdHJpbmcoKSlbMF1cblxuaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShyZXNjaGVkdWxpbmcpLnRvU3RyaW5nKCkuZXF1YWxzKFwiWWVzXCIpICYmIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUodHJhbnNpdGlvbkNoZWNrKS50b1N0cmluZygpLmVxdWFscyhcIlllc1wiKSAmJiAoaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpdC5uZXdJbnN0YWxsYXRpb24nXSkgfHwgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShmaXJzdFRpY2tldCkhPW51bGwpKXtcbiAgICBkZWYgZmlyc3RfdGlja2V0PWZhbHNlXG4gICAgZGVmIHRlbXBsYXRlPVwiXCJcbiAgICBpZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGZpcnN0VGlja2V0KSE9bnVsbCl7XG4gICAgICAgIGZpcnN0X3RpY2tldD10cnVlXG4gICAgICAgIHRlbXBsYXRlPVwiRklSU1RfVElDS0VUJTdDTUFOVUZBQ1RVUkVSXCJcbiAgICB9ZWxzZXtcbiAgICAgICAgdGVtcGxhdGU9XCJORVdfSU5TVEFMTEFUSU9OX0NSRUFURV9US1QlN0NNQU5VRkFDVFVSRVJcIlxuICAgIH1cbiAgICBcbiAgICBpZihpc3N1ZS5nZXRJc3N1ZVR5cGUoKS5uYW1lLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2l0Lm5ld0luc3RhbGxhdGlvbiddKSl7XG4gICAgICAgIGJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9hdXRvbWF0aW9uL2RvY3VtZW50L2dlbmVyYXRpb24vY2hlY2s/SVNTVUVfS0VZPVwiKyBpc3N1ZS5rZXkgK1wiJkRPQ19DQVRFR09SWT1cIiArIHRlbXBsYXRlICsgXCImRU5BQkxFRF9GT1JfRklSU1RfVElDS0VUPVwiK2ZpcnN0X3RpY2tldCtcIiZJTVBPUlRfRlJPTT1cIlxuICAgIH1lbHNle1xuICAgICAgICBiYXNlVVJMID0gXCJodHRwOi8vXCIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArIFwiL29wL3Jlc3QvYXV0b21hdGlvbi9kb2N1bWVudC9nZW5lcmF0aW9uL2NoZWNrP0lTU1VFX0tFWT1cIisgaXNzdWUua2V5ICtcIiZET0NfQ0FURUdPUlk9XCIgKyB0ZW1wbGF0ZSArIFwiJkVOQUJMRURfRk9SX0ZJUlNUX1RJQ0tFVD1cIitmaXJzdF90aWNrZXQrXCImSU1QT1JUX0ZST009T1BfQVNTRVRcIlxuICAgIH1cbiAgICBcbiAgICBsb2cuZGVidWcgYmFzZVVSTFxuICAgIFVSTCB1cmwgPSBuZXcgVVJMKGJhc2VVUkwpXG4gICAgSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpO1xuXG4gICAgZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KClcblx0bG9nLmRlYnVnIFwidXJsOiBcIiArIHVybFxuICAgIFxuICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMFwiKSl7XG4gICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG4gICAgICAgIGxvZy5kZWJ1ZyBcIkVycm9yU3RyZWFtOiBcIiArIGNvbm5lY3Rpb24uZ2V0RXJyb3JTdHJlYW0oKS50b1N0cmluZygpXG4gICAgICAgIGxvZy5kZWJ1ZyBcImdldEhlYWRlckZpZWxkcygpOiBcIiArIGNvbm5lY3Rpb24uZ2V0SGVhZGVyRmllbGRzKClcbiAgICAgICAgZGVmIG91dHB1dE1zZyA9ICgoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dFxuICAgICAgICBsb2cuZGVidWcgXCIoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHQ6IFwiICsgb3V0cHV0TXNnXG5cbiAgICAgICAgZGVmIGpzb25TbHVycGVyID0gbmV3IEpzb25TbHVycGVyKClcbiAgICAgICAgZGVmIGpzb25fb2JqZWN0ID0ganNvblNsdXJwZXIucGFyc2VUZXh0KG91dHB1dE1zZylcbiAgICAgICAgYXNzZXJ0IGpzb25fb2JqZWN0IGluc3RhbmNlb2YgTWFwICBcbiAgICAgICAgbG9nLmRlYnVnIFwibWVzc2FnZTogXCIgKyAganNvbl9vYmplY3QubWVzc2FnZVxuXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIkVcIilcbiAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiT1AtRE9DU1wiKVxuICAgICAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyBcIiBcIiArIGpzb25fb2JqZWN0Lm1lc3NhZ2UpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChlcnJvck1zZ3MpXG4gICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycylcblxuICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcbiAgICB9XG59XG4iLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">3bddafa4-9601-4ff0-9db1-83ec1b0f0850</arg>
          <arg name="FIELD_NOTES">YCFgIEdlbmVyYXRlIFNOIGZvciBvbGQgdGlja2V0cyAmIG9mZmVyIHRrdHM=</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuXG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUubGluay5Jc3N1ZUxpbmtcblxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpO1xuQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpO1xuXG5kZWYgU04gPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfU0FQX1NFUlZJQ0VfTk9USUZJQ0FUSU9OXCIpWzBdXG5kZWYgcmVxdWVzdE1ldGhvZFxuZGVmIGJhc2VVUkxcblxuVVJMIHVybFxuSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvblxuXG5pZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKFNOKSA9PSBudWxsICYmIGlzc3VlLmlzc3VlVHlwZS5uYW1lICE9IFwiUGxhbm5lZCBNYWludGVuYW5jZSBUaWNrZXRcIil7XG4gICAgcmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuXG4gICAgZGVmIGJvZHlfcmVxID0gW11cbiAgICBib2R5X3JlcSA9IFtcbiAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXksXG4gICAgICAgIFwic3RhdHVzXCI6IFwiT1BFXCJcbiAgICBdIFxuXG4gICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvYWZ0ZXIvc2FsZXMvY3JlYXRlL3NlcnZpY2Uvbm90aWZpY2F0aW9uXCJcblxuICAgIGxvZy5kZWJ1ZyBcImJhc2VVUkwgU046IFwiICsgYmFzZVVSTFxuICAgIGxvZy5kZWJ1ZyBcImJvZHlfcmVxIFNOOiBcIiArIGJvZHlfcmVxXG4gICAgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG4gICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxuICAgIGxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpO1xuXG4gICAgZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KClcblxuICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMVwiKSl7XG4gICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG4gICAgICAgIFxuICAgICAgICBkZWYgb3V0cHV0TXNnID0gKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0XG4gICAgICAgIGxvZy5kZWJ1ZyBcIigoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dDogXCIgKyBvdXRwdXRNc2dcblxuICAgICAgICBkZWYganNvblNsdXJwZXIgPSBuZXcgSnNvblNsdXJwZXIoKVxuICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgICAgICBhc3NlcnQganNvbl9vYmplY3QgaW5zdGFuY2VvZiBNYXAgIFxuICAgICAgICBsb2cuZGVidWcgXCJtZXNzYWdlOiBcIiArICBqc29uX29iamVjdC5tZXNzYWdlXG4gICAgICAgIGxvZy5kZWJ1ZyBcImVycm9yczogXCIgKyAganNvbl9vYmplY3QuZXJyb3JzLnRvU3RyaW5nKClcblxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIk9QLVNBUC1TTi1VUERBVEVcIilcbiAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5lcnJvcnNbMF0pXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChlcnJvck1zZ3MpXG4gICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycylcblxuICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcbiAgICB9XG59XG4gIiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">0edcbf2c1701d9f3a9ad279bea831e613d3338a7</arg>
          <arg name="FIELD_NOTES">YCFgT1AgRW1haWwgTm90aWZpY2F0aW9uOiBBU1NJR05fVE9fU1VQUExJRVI=</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmluZGV4Lklzc3VlSW5kZXhpbmdTZXJ2aWNlXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuSXNzdWVMaW5rXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbmRlZiByZXF1ZXN0TWV0aG9kID0gXCJQT1NUXCI7XG5kZWYgcmVsYXRlc0luSXNzdWVMaW5rPWZhbHNlXG5kZWYgcmVsYXRlc091dElzc3VlTGluaz1mYWxzZVxuZGVmIGxpbmtlZFRpY2tldHM9bmV3IEFycmF5TGlzdCgpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiBhdXRvbWF0aWNhbGx5Q29uZmlybWVkID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi5hdXRvbWF0aWNhbGx5QXNzaWduZWQnXSA/IHByb3BlcnRpZXNbJ2NmLmF1dG9tYXRpY2FsbHlBc3NpZ25lZCddLnRvU3RyaW5nKCkgOiBcIk9QX0FVVE9NQVRJQ0FMTFlfQVNTSUdORURcIilbMF1cblxuLyp2ZXJpZmljYSB0aWNrZXQgY29sbGVnYXRpKi9cbkxpc3Q8SXNzdWVMaW5rPiBhbGxJbklzc3VlTGluayA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTGlua01hbmFnZXIoKS5nZXRJbndhcmRMaW5rcyhpc3N1ZS5nZXRJZCgpKVxuZm9yIChJdGVyYXRvcjxJc3N1ZUxpbms+IG91dEl0ZXJhdG9yID0gYWxsSW5Jc3N1ZUxpbmsuaXRlcmF0b3IoKTsgb3V0SXRlcmF0b3IuaGFzTmV4dCgpOykge1xuICAgIElzc3VlTGluayBpc3N1ZUxpbmsgPSAoSXNzdWVMaW5rKSBvdXRJdGVyYXRvci5uZXh0KCk7XG5cbiAgICBpZihpc3N1ZUxpbmsuZ2V0U291cmNlT2JqZWN0KCkhPSBudWxsICYmIGlzc3VlTGluay5nZXRTb3VyY2VPYmplY3QoKS5nZXRJc3N1ZVR5cGUoKS5uYW1lID09IGlzc3VlLmdldElzc3VlVHlwZSgpLm5hbWUgJiYgaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNSZWxhdGVzJ10udG9TdHJpbmcoKSkgJiYgaXNzdWVMaW5rLmdldFNvdXJjZU9iamVjdCgpLnN0YXR1cy5uYW1lID09IFwiT3BlblwiKXtcbiAgICAgICAgcmVsYXRlc0luSXNzdWVMaW5rPXRydWVcbiAgICAgICAgbGlua2VkVGlja2V0cy5hZGQoaXNzdWVMaW5rLmdldFNvdXJjZU9iamVjdCgpLnRvU3RyaW5nKCkpXG4gICAgICAgIGxvZy5kZWJ1ZyBcIklzc3VlIGNvbiByZWxhdGVzSW5Jc3N1ZUxpbmsgXCIgKyBpc3N1ZUxpbmsuZ2V0U291cmNlT2JqZWN0KCkuZ2V0SXNzdWVUeXBlKCkubmFtZSBcbiAgICB9XG59XG5MaXN0PElzc3VlTGluaz4gYWxsT3V0SXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldE91dHdhcmRMaW5rcyhpc3N1ZS5nZXRJZCgpKVxuZm9yIChJdGVyYXRvcjxJc3N1ZUxpbms+IG91dEl0ZXJhdG9yID0gYWxsT3V0SXNzdWVMaW5rLml0ZXJhdG9yKCk7IG91dEl0ZXJhdG9yLmhhc05leHQoKTspIHtcbiAgICBJc3N1ZUxpbmsgaXNzdWVMaW5rID0gKElzc3VlTGluaykgb3V0SXRlcmF0b3IubmV4dCgpO1xuXG4gICAgaWYoaXNzdWVMaW5rLmdldERlc3RpbmF0aW9uT2JqZWN0KCkhPSBudWxsICYmIGlzc3VlTGluay5nZXREZXN0aW5hdGlvbk9iamVjdCgpLmdldElzc3VlVHlwZSgpLm5hbWUgPT0gaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZSAmJiBpc3N1ZUxpbmsuaXNzdWVMaW5rVHlwZS5nZXROYW1lKCkudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snaWwubGlua2VkVGt0c1JlbGF0ZXMnXS50b1N0cmluZygpKSAmJiBpc3N1ZUxpbmsuZ2V0RGVzdGluYXRpb25PYmplY3QoKS5zdGF0dXMubmFtZSA9PSBcIk9wZW5cIil7XG4gICAgICAgIHJlbGF0ZXNPdXRJc3N1ZUxpbms9dHJ1ZVxuICAgICAgICBsaW5rZWRUaWNrZXRzLmFkZChpc3N1ZUxpbmsuZ2V0RGVzdGluYXRpb25PYmplY3QoKS50b1N0cmluZygpKVxuICAgICAgICBsb2cuZGVidWcgXCJJc3N1ZSBjb24gcmVsYXRlc091dElzc3VlTGluayBcIiArIGlzc3VlTGluay5nZXREZXN0aW5hdGlvbk9iamVjdCgpXG4gICAgfVxufVxuXG5kZWYgYm9keV9yZXFcbmlmKHJlbGF0ZXNJbklzc3VlTGluayB8fCByZWxhdGVzT3V0SXNzdWVMaW5rKXtcbiAgICBib2R5X3JlcSA9IFtcbiAgICAgICAgXCJ0ZW1wbGF0ZU5hbWVcIjogcHJvcGVydGllc1sndHQuYXNzaWduVG9TdXBwbGllciddLnRvU3RyaW5nKCksXG4gICAgICAgIFwicGVjXCI6IGZhbHNlLFxuICAgICAgICBcImlzc3VlS2V5XCI6IGlzc3VlLmtleSxcbiAgICAgICAgXCJsaW5rZWRUaWNrZXRzXCI6IGxpbmtlZFRpY2tldHNcbiAgICBdXG59ZWxzZXtcbiAgICBib2R5X3JlcSA9IFtcbiAgICAgICAgXCJ0ZW1wbGF0ZU5hbWVcIjogcHJvcGVydGllc1sndHQuYXNzaWduVG9TdXBwbGllciddLnRvU3RyaW5nKCksXG4gICAgICAgIFwicGVjXCI6IGZhbHNlLFxuICAgICAgICBcImlzc3VlS2V5XCI6IGlzc3VlLmtleVxuICAgIF1cbn1cblxuaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q29uZmlybWVkKT09bnVsbCB8fCBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGF1dG9tYXRpY2FsbHlDb25maXJtZWQpLnRvU3RyaW5nKCkuZXF1YWxzKFwiTm9cIikpe1xuICAgIGRlZiBiYXNlVVJMID0gXCJodHRwOi8vXCIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArIFwiL29wL3Jlc3QvamlyYS9BQS90cmFuc2FjdGlvbi9tYWlsL3NlbmRcIlxuICAgIFVSTCB1cmxcbiAgICB1cmwgPSBuZXcgVVJMKGJhc2VVUkwpXG5cbiAgICBsb2cuZGVidWcgXCJiYXNlVVJMOiBcIiArIGJhc2VVUkxcbiAgICBIdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdE1ldGhvZChyZXF1ZXN0TWV0aG9kKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbiAgICBjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbiAgICBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtLndpdGhXcml0ZXIoXCJVVEYtOFwiKSB7IG5ldyBTdHJlYW1pbmdKc29uQnVpbGRlcihpdCwgYm9keV9yZXEpIH1cbiAgICBsb2cuZGVidWcgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW1cbiAgICBjb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuICAgIGRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5cdGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICBcbiAgICBpZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDBcIikgJiYgIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDRcIikpe1xuICAgICAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuXG4gICAgICAgIGRlZiBvdXRwdXRNc2cgPSAoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHRcbiAgICAgICAgbG9nLmRlYnVnIFwiKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0OiBcIiArIG91dHB1dE1zZ1xuXG4gICAgICAgIGRlZiBqc29uU2x1cnBlciA9IG5ldyBKc29uU2x1cnBlcigpXG4gICAgICAgIGRlZiBqc29uX29iamVjdCA9IGpzb25TbHVycGVyLnBhcnNlVGV4dChvdXRwdXRNc2cpXG4gICAgICAgIGFzc2VydCBqc29uX29iamVjdCBpbnN0YW5jZW9mIE1hcCAgXG4gICAgICAgIGxvZy5kZWJ1ZyBcIm1lc3NhZ2U6IFwiICsgIGpzb25fb2JqZWN0Lm1lc3NhZ2VcblxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIlNFTkRNQUlMXCIpXG4gICAgICAgIGVycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArIFwiIFwiICsganNvbl9vYmplY3QubWVzc2FnZS50b1N0cmluZygpLnJlcGxhY2VBbGwoXCIvW15hLXpBLVogXS9nXCIsXCJcIikucmVwbGFjZUFsbCgnXCInLCcnKSlcbiAgICAgICAgZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncylcbiAgICAgICAgZUxpc3QuYWRkKGVMaXN0RXJyb3JzKVxuXG4gICAgICAgIG91dHB1dC5hZGQoZUxpc3QpXG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oJ3tcIkVcIjpcIicgKyBvdXRwdXQudG9TdHJpbmcoKSArICdcIn0nKVxuICAgIH1cbn1cbiAiLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
          <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmluZGV4Lklzc3VlSW5kZXhpbmdTZXJ2aWNlCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUubGluay5Jc3N1ZUxpbmsKaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KQ2F0ZWdvcnkgbG9nID0gQ2F0ZWdvcnkuZ2V0SW5zdGFuY2UoImNvbS5vbnJlc29sdmUuamlyYS5ncm9vdnkuUG9zdEZ1bmN0aW9uIikKbG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpCgpkZWYgcmVxdWVzdE1ldGhvZCA9ICJQT1NUIjsKZGVmIHJlbGF0ZXNJbklzc3VlTGluaz1mYWxzZQpkZWYgcmVsYXRlc091dElzc3VlTGluaz1mYWxzZQpkZWYgbGlua2VkVGlja2V0cz1uZXcgQXJyYXlMaXN0KCkKCklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTsKQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpOwpkZWYgYXV0b21hdGljYWxseUNvbmZpcm1lZCA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YuYXV0b21hdGljYWxseUFzc2lnbmVkJ10gPyBwcm9wZXJ0aWVzWydjZi5hdXRvbWF0aWNhbGx5QXNzaWduZWQnXS50b1N0cmluZygpIDogIk9QX0FVVE9NQVRJQ0FMTFlfQVNTSUdORUQiKVswXQoKLypPUC0xMDM4OiB2ZXJpZmljYSB0aWNrZXQgY29sbGVnYXRpKi8KTGlzdDxJc3N1ZUxpbms+IGFsbEluSXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldElud2FyZExpbmtzKGlzc3VlLmdldElkKCkpCmZvciAoSXRlcmF0b3I8SXNzdWVMaW5rPiBvdXRJdGVyYXRvciA9IGFsbEluSXNzdWVMaW5rLml0ZXJhdG9yKCk7IG91dEl0ZXJhdG9yLmhhc05leHQoKTspIHsKICAgIElzc3VlTGluayBpc3N1ZUxpbmsgPSAoSXNzdWVMaW5rKSBvdXRJdGVyYXRvci5uZXh0KCk7CgogICAgaWYoaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNSZWxhdGVzJ10udG9TdHJpbmcoKSkpewogICAgICAgIHJlbGF0ZXNJbklzc3VlTGluaz10cnVlCiAgICAgICAgbGlua2VkVGlja2V0cy5hZGQoaXNzdWVMaW5rLmdldFNvdXJjZU9iamVjdCgpLnRvU3RyaW5nKCkpCiAgICAgICAgbG9nLmRlYnVnICJJc3N1ZSBjb24gcmVsYXRlc0luSXNzdWVMaW5rIgogICAgfQp9Ckxpc3Q8SXNzdWVMaW5rPiBhbGxPdXRJc3N1ZUxpbmsgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZUxpbmtNYW5hZ2VyKCkuZ2V0T3V0d2FyZExpbmtzKGlzc3VlLmdldElkKCkpCmZvciAoSXRlcmF0b3I8SXNzdWVMaW5rPiBvdXRJdGVyYXRvciA9IGFsbE91dElzc3VlTGluay5pdGVyYXRvcigpOyBvdXRJdGVyYXRvci5oYXNOZXh0KCk7KSB7CiAgICBJc3N1ZUxpbmsgaXNzdWVMaW5rID0gKElzc3VlTGluaykgb3V0SXRlcmF0b3IubmV4dCgpOwoKICAgIGlmKGlzc3VlTGluay5pc3N1ZUxpbmtUeXBlLmdldE5hbWUoKS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpbC5saW5rZWRUa3RzUmVsYXRlcyddLnRvU3RyaW5nKCkpKXsKICAgICAgICByZWxhdGVzT3V0SXNzdWVMaW5rPXRydWUKICAgICAgICBsaW5rZWRUaWNrZXRzLmFkZChpc3N1ZUxpbmsuZ2V0RGVzdGluYXRpb25PYmplY3QoKS50b1N0cmluZygpKQogICAgICAgIGxvZy5kZWJ1ZyAiSXNzdWUgY29uIHJlbGF0ZXNPdXRJc3N1ZUxpbmsiCiAgICB9Cn0KCmRlZiBib2R5X3JlcQppZihyZWxhdGVzSW5Jc3N1ZUxpbmsgfHwgcmVsYXRlc091dElzc3VlTGluayl7CiAgICBib2R5X3JlcSA9IFsKICAgICAgICAidGVtcGxhdGVOYW1lIjogcHJvcGVydGllc1sndHQuYXNzaWduVG9TdXBwbGllciddLnRvU3RyaW5nKCksCiAgICAgICAgInBlYyI6IGZhbHNlLAogICAgICAgICJpc3N1ZUtleSI6IGlzc3VlLmtleSwKICAgICAgICAibGlua2VkVGlja2V0cyI6IGxpbmtlZFRpY2tldHMKICAgIF0KfWVsc2V7CiAgICBib2R5X3JlcSA9IFsKICAgICAgICAidGVtcGxhdGVOYW1lIjogcHJvcGVydGllc1sndHQuYXNzaWduVG9TdXBwbGllciddLnRvU3RyaW5nKCksCiAgICAgICAgInBlYyI6IGZhbHNlLAogICAgICAgICJpc3N1ZUtleSI6IGlzc3VlLmtleQogICAgXQp9CgppZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGF1dG9tYXRpY2FsbHlDb25maXJtZWQpPT1udWxsIHx8IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoYXV0b21hdGljYWxseUNvbmZpcm1lZCkudG9TdHJpbmcoKS5lcXVhbHMoIk5vIikpewogICAgZGVmIGJhc2VVUkwgPSAiaHR0cDovLyIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArICIvb3AvcmVzdC9qaXJhL0FBL3RyYW5zYWN0aW9uL21haWwvc2VuZCIKICAgIFVSTCB1cmwKICAgIHVybCA9IG5ldyBVUkwoYmFzZVVSTCkKCiAgICBIdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpOwogICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpOwogICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoIkNvbnRlbnQtVHlwZSIsICJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLTgiKTsKICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KCJBY2NlcHQiLCAiKi8qIik7CiAgICBjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpOwogICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpOwogICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0KICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtLndpdGhXcml0ZXIoIlVURi04IikgeyBuZXcgU3RyZWFtaW5nSnNvbkJ1aWxkZXIoaXQsIGJvZHlfcmVxKSB9CiAgICBsb2cuZGVidWcgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0KICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpOwoKICAgIGRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KCkKICAgIGRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKQogICAgZGVmIGVMaXN0RXJyb3JzID0gbmV3IEFycmF5TGlzdCgpCiAgICBkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpCgogICAgaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKCIyMDAiKSl7CiAgICAgICAgbG9nLmRlYnVnICJ1cmw6ICIgKyB1cmwKICAgICAgICBsb2cuZGVidWcgIlJlc3BvbnNlQ29kZToiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKQogICAgICAgIGxvZy5kZWJ1ZyAiUmVzcG9uc2VNZXNzYWdlOiIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpCiAgICAgICAgCiAgICAgICAgZGVmIG91dHB1dE1zZyA9ICgoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dAogICAgCWxvZy5kZWJ1ZyAiKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0OiAiICsgb3V0cHV0TXNnCiAgICAgICAgCiAgICAgICAgZGVmIGpzb25TbHVycGVyID0gbmV3IEpzb25TbHVycGVyKCkKICAgIAlkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKQogICAgICAgIGFzc2VydCBqc29uX29iamVjdCBpbnN0YW5jZW9mIE1hcCAgCiAgICAgICAgbG9nLmRlYnVnICJtZXNzYWdlOiAiICsgIGpzb25fb2JqZWN0Lm1lc3NhZ2UKCiAgICAgICAgZUxpc3RFcnJvcnMuYWRkKCJFIikKICAgICAgICBlTGlzdEVycm9ycy5hZGQoIlNFTkRNQUlMIikKICAgICAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyAiICIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpKQogICAgICAgIC8vZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncykKICAgICAgICBlTGlzdEVycm9ycy5hZGQoanNvbl9vYmplY3QubWVzc2FnZSkKICAgICAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpCgogICAgICAgIG91dHB1dC5hZGQoZUxpc3QpCiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigneyJFIjoiJyArIG91dHB1dC50b1N0cmluZygpICsgJyJ9JykKICAgICAgICAvL3Rocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oIkUiLCBvdXRwdXQudG9TdHJpbmcoKSkKICAgIH0KfQo=</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
          <arg name="FIELD_SCRIPT_FILE"></arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="null" status="null" step="2">
          <post-functions>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="append.value"></arg>
              <arg name="maxAllowed-integerValue">50</arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field.value">%%CURRENT_DATETIME%%</arg>
              <arg name="field.name">customfield_22639</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">14b92cea1dc4f22ec42d0ad489a7359b4ad4a858</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IE5ldyBJbnN0YWxsYXRpb24gLSBDaGVjayBsaW5rZWRUaWNrZXRzICYgRmFzdC1UcmFuc2FjdCB0aGVt</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="maxAllowed-integerValue"></arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field">customfield_22758</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
              <arg name="field2">customfield_22757</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="371" name="Recupera Tkt">
      <meta name="opsbar-sequence">10</meta>
      <meta name="jira.description"></meta>
      <meta name="jira.fieldscreen.id"></meta>
      <results>
        <unconditional-result old-status="null" status="null" step="1">
          <post-functions>
            <function type="class">
              <arg name="field.name">resolution</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
              <arg name="field.value"></arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="121" name="Ripianifica Tkt">
      <meta name="opsbar-sequence">30</meta>
      <meta name="jira.description"></meta>
      <meta name="jira.fieldscreen.id"></meta>
      <results>
        <unconditional-result old-status="null" status="null" step="1">
          <post-functions>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="maxAllowed-integerValue">50</arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field">customfield_23245</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="field7">customfield_22757</arg>
              <arg name="field6">customfield_22756</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
              <arg name="field3">customfield_22613</arg>
              <arg name="field2">customfield_22693</arg>
              <arg name="scopeSource-jql"></arg>
              <arg name="field5">customfield_22758</arg>
              <arg name="field4">customfield_22653</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="91" name="Invia Conferma Intervento al Cliente" view="fieldscreen">
      <meta name="opsbar-sequence">10</meta>
      <meta name="jira.description"></meta>
      <meta name="jira.fieldscreen.id">19907</meta>
      <validators>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">9c15d3e06c08c288db8be2a197da43b6cfcf9624</arg>
          <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlcXVpcmVkIEZpZWxkcyAtIG9ubHkgZXJyb3JzLCBubyB3YXJuaW5ncyAtIFNPTE8gU0UgT1BBQV9BVVRPTUFUSUNBTExZX0NPTkZJUk1FRD09bnVsbCBPUiAhPVllcw==</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
          <arg name="FIELD_INLINE_SCRIPT"></arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
          <arg name="FIELD_SCRIPT_FILE"></arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">981a59bf-045e-4211-92ff-363ee26d86b2</arg>
          <arg name="FIELD_NOTES">YCFgR2VuZXJhdGUgU04gZm9yIG9sZCB0aWNrZXRz</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuXG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUubGluay5Jc3N1ZUxpbmtcblxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpO1xuQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpO1xuXG5kZWYgU04gPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfU0FQX1NFUlZJQ0VfTk9USUZJQ0FUSU9OXCIpWzBdXG5kZWYgcmVxdWVzdE1ldGhvZFxuZGVmIGJhc2VVUkxcblxuVVJMIHVybFxuSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvblxuXG5pZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKFNOKSA9PSBudWxsICYmIGlzc3VlLmlzc3VlVHlwZS5uYW1lICE9IFwiUGxhbm5lZCBNYWludGVuYW5jZSBUaWNrZXRcIil7XG4gICAgcmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuXG4gICAgZGVmIGJvZHlfcmVxID0gW11cbiAgICBib2R5X3JlcSA9IFtcbiAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXksXG4gICAgICAgIFwic3RhdHVzXCI6IFwiT1BFXCJcbiAgICBdIFxuXG4gICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvYWZ0ZXIvc2FsZXMvY3JlYXRlL3NlcnZpY2Uvbm90aWZpY2F0aW9uXCJcblxuICAgIGxvZy5kZWJ1ZyBcImJhc2VVUkwgU046IFwiICsgYmFzZVVSTFxuICAgIGxvZy5kZWJ1ZyBcImJvZHlfcmVxIFNOOiBcIiArIGJvZHlfcmVxXG4gICAgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG4gICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxuICAgIGxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpO1xuXG4gICAgZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KClcblxuICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMVwiKSl7XG4gICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG4gICAgICAgIFxuICAgICAgICBkZWYgb3V0cHV0TXNnID0gKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0XG4gICAgICAgIGxvZy5kZWJ1ZyBcIigoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dDogXCIgKyBvdXRwdXRNc2dcblxuICAgICAgICBkZWYganNvblNsdXJwZXIgPSBuZXcgSnNvblNsdXJwZXIoKVxuICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgICAgICBhc3NlcnQganNvbl9vYmplY3QgaW5zdGFuY2VvZiBNYXAgIFxuICAgICAgICBsb2cuZGVidWcgXCJtZXNzYWdlOiBcIiArICBqc29uX29iamVjdC5tZXNzYWdlXG4gICAgICAgIGxvZy5kZWJ1ZyBcImVycm9yczogXCIgKyAganNvbl9vYmplY3QuZXJyb3JzLnRvU3RyaW5nKClcblxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIk9QLVNBUC1TTi1VUERBVEVcIilcbiAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5lcnJvcnNbMF0pXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChlcnJvck1zZ3MpXG4gICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycylcblxuICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcbiAgICB9XG59Iiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">6d00c2e9-590a-4072-837b-afca0657f9fb</arg>
          <arg name="FIELD_NOTES">YCFgU0FQOiB1cGRhdGUgU04gc3RhdHVzICYgY3JlYXRlIFNP</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuSXNzdWVMaW5rXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcblxuZGVmIHNhcFNOID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShcIk9QX1NBUF9TRVJWSUNFX05PVElGSUNBVElPTlwiKVswXVxuZGVmIHJlcXVlc3RNZXRob2RcbmRlZiBiYXNlVVJMXG5cblVSTCB1cmxcbkh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb25cblxuaWYoaXNzdWUuaXNzdWVUeXBlLm5hbWUgIT0gXCJQbGFubmVkIE1haW50ZW5hbmNlIFRpY2tldFwiICYmIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc2FwU04pICE9IG51bGwpe1xuICAgIHJlcXVlc3RNZXRob2QgPSBcIlBPU1RcIjtcblxuICAgIGRlZiBib2R5X3JlcSA9IFtdXG4gICAgYm9keV9yZXEgPSBbXG4gICAgICAgIFwiaXNzdWVLZXlcIjogaXNzdWUua2V5LFxuICAgICAgICBcInN0YXR1c1wiOiBcIlBMQVwiXG4gICAgXSBcblxuICAgIGJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9qaXJhL0FBL2FmdGVyL3NhbGVzL2NyZWF0ZS9zZXJ2aWNlL25vdGlmaWNhdGlvblwiXG5cbiAgICBsb2cuZGVidWcgXCJiYXNlVVJMIFNOOiBcIiArIGJhc2VVUkxcbiAgICBsb2cuZGVidWcgXCJib2R5X3JlcSBTTjogXCIgKyBib2R5X3JlcVxuICAgIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcbiAgICBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdE1ldGhvZChyZXF1ZXN0TWV0aG9kKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbiAgICBjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbiAgICBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtLndpdGhXcml0ZXIoXCJVVEYtOFwiKSB7IG5ldyBTdHJlYW1pbmdKc29uQnVpbGRlcihpdCwgYm9keV9yZXEpIH1cbiAgICBsb2cuZGVidWcgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW1cbiAgICBjb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuICAgIGRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5cbiAgICBpZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDBcIikpe1xuICAgICAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuICAgICAgICBcbiAgICAgICAgZGVmIG91dHB1dE1zZyA9ICgoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dFxuICAgICAgICBsb2cuZGVidWcgXCIoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHQ6IFwiICsgb3V0cHV0TXNnXG5cbiAgICAgICAgZGVmIGpzb25TbHVycGVyID0gbmV3IEpzb25TbHVycGVyKClcbiAgICAgICAgZGVmIGpzb25fb2JqZWN0ID0ganNvblNsdXJwZXIucGFyc2VUZXh0KG91dHB1dE1zZylcbiAgICAgICAgYXNzZXJ0IGpzb25fb2JqZWN0IGluc3RhbmNlb2YgTWFwICBcbiAgICAgICAgbG9nLmRlYnVnIFwibWVzc2FnZTogXCIgKyAganNvbl9vYmplY3QubWVzc2FnZVxuICAgICAgICBsb2cuZGVidWcgXCJlcnJvcnM6IFwiICsgIGpzb25fb2JqZWN0LmVycm9ycy50b1N0cmluZygpXG5cbiAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiRVwiKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJPUC1TQVAtU04tVVBEQVRFXCIpXG4gICAgICAgIGVycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArIFwiIFwiICsganNvbl9vYmplY3QuZXJyb3JzWzBdKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKVxuICAgICAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpXG5cbiAgICAgICAgb3V0cHV0LmFkZChlTGlzdClcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgfWVsc2V7XG4gICAgICAgIC8qKiBTRVJWSUNFIE9SREVSIENSRUFUSU9OICoqL1xuICAgICAgICBib2R5X3JlcSA9IFtcbiAgICAgICAgICAgIFwiaXNzdWVLZXlcIjogaXNzdWUua2V5XG4gICAgICAgIF0gXG4gICAgICAgIGJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9qaXJhL0FBL2FmdGVyL3NhbGVzL2NyZWF0ZS9vci91cGRhdGUvc2VydmljZS9vcmRlclwiXG5cbiAgICAgICAgbG9nLmRlYnVnIFwiYmFzZVVSTCBTTzogXCIgKyBiYXNlVVJMXG4gICAgICAgIGxvZy5kZWJ1ZyBcImJvZHlfcmVxIFNPOiBcIiArIGJvZHlfcmVxXG4gICAgICAgIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcbiAgICAgICAgY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTtcbiAgICAgICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuICAgICAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbiAgICAgICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJBY2NlcHRcIiwgXCIqLypcIik7XG4gICAgICAgIGNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7XG4gICAgICAgIGNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbiAgICAgICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW1cbiAgICAgICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxuICAgICAgICBsb2cuZGVidWcgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW1cbiAgICAgICAgY29ubmVjdGlvbi5jb25uZWN0KCk7XG5cbiAgICAgICAgb3V0cHV0ID0gbmV3IEFycmF5TGlzdCgpXG4gICAgICAgIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpXG4gICAgICAgIGVMaXN0RXJyb3JzID0gbmV3IEFycmF5TGlzdCgpXG4gICAgICAgIGVycm9yTXNncyA9IG5ldyBBcnJheUxpc3QoKVxuXG4gICAgICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMVwiKSAmJiAhY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMFwiKSl7XG4gICAgICAgICAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZUNvZGU6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpXG4gICAgICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGRlZiBvdXRwdXRNc2cgPSAoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHRcbiAgICBcdFx0bG9nLmRlYnVnIFwiKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0OiBcIiArIG91dHB1dE1zZ1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBkZWYganNvblNsdXJwZXIgPSBuZXcgSnNvblNsdXJwZXIoKVxuICAgICAgICAgICAgZGVmIGpzb25fb2JqZWN0ID0ganNvblNsdXJwZXIucGFyc2VUZXh0KG91dHB1dE1zZylcbiAgICAgICAgICAgIGFzc2VydCBqc29uX29iamVjdCBpbnN0YW5jZW9mIE1hcCAgXG4gICAgICAgICAgICBsb2cuZGVidWcgXCJtZXNzYWdlOiBcIiArICBqc29uX29iamVjdC5tZXNzYWdlXG4gICAgICAgICAgICBsb2cuZGVidWcgXCJlcnJvcnM6IFwiICsgIGpzb25fb2JqZWN0LmVycm9ycy50b1N0cmluZygpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIkVcIilcbiAgICAgICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIk9QLVNBUC1TTy1DUkVBVEVcIilcbiAgICAgICAgICAgIGVycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArIFwiIFwiICsganNvbl9vYmplY3QuZXJyb3JzWzBdKVxuICAgICAgICAgICAgZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncylcbiAgICAgICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycylcblxuICAgICAgICAgICAgb3V0cHV0LmFkZChlTGlzdClcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oJ3tcIkVcIjpcIicgKyBvdXRwdXQudG9TdHJpbmcoKSArICdcIn0nKVxuICAgICAgICB9XG4gICAgfVxufVxuICIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">bc182ea265c648453eb3ce3ec1d06e9d7cbe1ec6</arg>
          <arg name="FIELD_NOTES">YCFgT1AgRW1haWwgTm90aWZpY2F0aW9uOiBDT05GSVJNX1RPX0NVU1RPTUVSIC0gU2UgT1BBQV9BVVRPTUFUSUNBTExZX0NPTkZJUk1FRCA9IG51bGwgT1IgIT0gWWVz</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
          <arg name="FIELD_INLINE_SCRIPT"></arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
          <arg name="FIELD_SCRIPT_FILE"></arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">8bdd909f-e27d-4d09-9e29-3486f16f1d9e</arg>
          <arg name="FIELD_NOTES">YCFgT1A6IFNldCBPUEFBX0FVVE9NQVRJQ0FMTFlfQ09ORklSTUVEPU5vIGlmIE9QQUFfQVVUT01BVElDQUxMWV9DT05GSVJNRUQ9bnVsbCBPUiAhPVllcw==</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnV0aWwuRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk1vZGlmaWVkVmFsdWVcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuZXZlbnQudHlwZS5FdmVudERpc3BhdGNoT3B0aW9uXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmluZGV4Lklzc3VlSW5kZXhpbmdTZXJ2aWNlXG5cbmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5XG5pbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXG5cblByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKClcbkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpXG5wcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0ge1xuXHRwcm9wZXJ0aWVzLmxvYWQoaXQpXG59XG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcblxuZGVmIHJlcXVlc3RNZXRob2QgPSBcIlBPU1RcIjtcblxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpO1xuQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpO1xuSXNzdWVJbmRleGluZ1NlcnZpY2UgXHRpc3N1ZUluZGV4aW5nU2VydmljZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldENvbXBvbmVudChJc3N1ZUluZGV4aW5nU2VydmljZSlcblxuZGVmIGF1dG9tYXRpY2FsbHlDb25maXJtZWQgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLmF1dG9tYXRpY2FsbHlDb25maXJtZWQnXS50b1N0cmluZygpKVswXVxuXG5sb2cuZGVidWcgXCJpc3N1ZTogXCIgKyBpc3N1ZS5rZXkgKyBcIiAtIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoYXV0b21hdGljYWxseUNvbmZpcm1lZCk6IFwiICsgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q29uZmlybWVkKVxuXG5pZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGF1dG9tYXRpY2FsbHlDb25maXJtZWQpPT1udWxsIHx8ICFpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGF1dG9tYXRpY2FsbHlDb25maXJtZWQpLnRvU3RyaW5nKCkuZXF1YWxzKFwiWWVzXCIpKXtcbiAgICAgICAgZGVmIGN1cnJlbnRVc2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SmlyYUF1dGhlbnRpY2F0aW9uQ29udGV4dCgpLmdldExvZ2dlZEluVXNlcigpXG4gICAgICAgIGRlZiBtaSA9IChNdXRhYmxlSXNzdWUpIGlzc3VlXG5cbiAgICAgICAgZGVmIGZpZWxkQ29uZmlnID0gYXV0b21hdGljYWxseUNvbmZpcm1lZC5nZXRSZWxldmFudENvbmZpZyhpc3N1ZSlcbiAgICAgICAgbG9nLmRlYnVnIFwiZmllbGRDb25maWc6IFwiICsgZmllbGRDb25maWcgKyBcIiBkYSBhZ2dpb3JuYXJlIHN1IGlzc3VlICR7aXNzdWV9XCJcbiAgICAgICAgZGVmIGNmTmV3VmFsdWUgPSBDb21wb25lbnRBY2Nlc3Nvci5vcHRpb25zTWFuYWdlci5nZXRPcHRpb25zKGZpZWxkQ29uZmlnKT8uZmluZCB7IGl0LnRvU3RyaW5nKCkgPT0gXCJOb1wiIH1cbiAgICAgICAgbG9nLmRlYnVnIFwiY2ZOZXdWYWx1ZTogXCIgKyBjZk5ld1ZhbHVlXG4gICAgICAgIGF1dG9tYXRpY2FsbHlDb25maXJtZWQudXBkYXRlVmFsdWUobnVsbCwgaXNzdWUsIG5ldyBNb2RpZmllZFZhbHVlKGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoYXV0b21hdGljYWxseUNvbmZpcm1lZCksIGNmTmV3VmFsdWUpLCBuZXcgRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyKCkpXG5cbiAgICAgICAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKCkudXBkYXRlSXNzdWUoY3VycmVudFVzZXIsIG1pLCBFdmVudERpc3BhdGNoT3B0aW9uLkRPX05PVF9ESVNQQVRDSCwgZmFsc2UpO1xuICAgICAgICBpc3N1ZUluZGV4aW5nU2VydmljZS5yZUluZGV4KGlzc3VlKVxuICAgICAgICBsb2cuZGVidWcgXCJVcGRhdGVkIGN1c3RvbWZpZWxkIC0gaXNzdWUgcHJpbmNpcGFsZTogJHtpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGF1dG9tYXRpY2FsbHlDb25maXJtZWQpfVwiXG59Iiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
          <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnV0aWwuRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTW9kaWZpZWRWYWx1ZQppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmV2ZW50LnR5cGUuRXZlbnREaXNwYXRjaE9wdGlvbgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmluZGV4Lklzc3VlSW5kZXhpbmdTZXJ2aWNlCgppbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeQppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lcgppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGwKClByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKCkKRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJykKcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHsKCXByb3BlcnRpZXMubG9hZChpdCkKfQpDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQpsb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRykKCmRlZiByZXF1ZXN0TWV0aG9kID0gIlBPU1QiOwoKSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpOwpDdXN0b21GaWVsZE1hbmFnZXIgY3VzdG9tRmllbGRNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCk7Cklzc3VlSW5kZXhpbmdTZXJ2aWNlIAlpc3N1ZUluZGV4aW5nU2VydmljZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldENvbXBvbmVudChJc3N1ZUluZGV4aW5nU2VydmljZSkKCmRlZiBhdXRvbWF0aWNhbGx5Q29uZmlybWVkID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi5hdXRvbWF0aWNhbGx5Q29uZmlybWVkJ10udG9TdHJpbmcoKSlbMF0KCmxvZy5kZWJ1ZyAiaXNzdWU6ICIgKyBpc3N1ZS5rZXkgKyAiIC0gaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q29uZmlybWVkKTogIiArIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoYXV0b21hdGljYWxseUNvbmZpcm1lZCkKCmlmKGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoYXV0b21hdGljYWxseUNvbmZpcm1lZCk9PW51bGwgfHwgIWlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoYXV0b21hdGljYWxseUNvbmZpcm1lZCkudG9TdHJpbmcoKS5lcXVhbHMoIlllcyIpKXsKICAgICAgICBkZWYgY3VycmVudFVzZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRKaXJhQXV0aGVudGljYXRpb25Db250ZXh0KCkuZ2V0TG9nZ2VkSW5Vc2VyKCkKICAgICAgICBkZWYgbWkgPSAoTXV0YWJsZUlzc3VlKSBpc3N1ZQoKICAgICAgICBkZWYgZmllbGRDb25maWcgPSBhdXRvbWF0aWNhbGx5Q29uZmlybWVkLmdldFJlbGV2YW50Q29uZmlnKGlzc3VlKQogICAgICAgIGxvZy5kZWJ1ZyAiZmllbGRDb25maWc6ICIgKyBmaWVsZENvbmZpZyArICIgZGEgYWdnaW9ybmFyZSBzdSBpc3N1ZSAke2lzc3VlfSIKICAgICAgICBkZWYgY2ZOZXdWYWx1ZSA9IENvbXBvbmVudEFjY2Vzc29yLm9wdGlvbnNNYW5hZ2VyLmdldE9wdGlvbnMoZmllbGRDb25maWcpPy5maW5kIHsgaXQudG9TdHJpbmcoKSA9PSAiTm8iIH0KICAgICAgICBsb2cuZGVidWcgImNmTmV3VmFsdWU6ICIgKyBjZk5ld1ZhbHVlCiAgICAgICAgYXV0b21hdGljYWxseUNvbmZpcm1lZC51cGRhdGVWYWx1ZShudWxsLCBpc3N1ZSwgbmV3IE1vZGlmaWVkVmFsdWUoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q29uZmlybWVkKSwgY2ZOZXdWYWx1ZSksIG5ldyBEZWZhdWx0SXNzdWVDaGFuZ2VIb2xkZXIoKSkKCiAgICAgICAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKCkudXBkYXRlSXNzdWUoY3VycmVudFVzZXIsIG1pLCBFdmVudERpc3BhdGNoT3B0aW9uLkRPX05PVF9ESVNQQVRDSCwgZmFsc2UpOwogICAgICAgIGlzc3VlSW5kZXhpbmdTZXJ2aWNlLnJlSW5kZXgoaXNzdWUpCiAgICAgICAgbG9nLmRlYnVnICJVcGRhdGVkIGN1c3RvbWZpZWxkIC0gaXNzdWUgcHJpbmNpcGFsZTogJHtpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGF1dG9tYXRpY2FsbHlDb25maXJtZWQpfSIKfQ==</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
          <arg name="FIELD_SCRIPT_FILE"></arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="null" status="null" step="4">
          <post-functions>
            <function type="class">
              <arg name="field.copyFieldSource1"></arg>
              <arg name="textValue">-1</arg>
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="maxAllowed-integerValue"></arg>
              <arg name="workflowName-textValue">OPAA: PM Task Workflow</arg>
              <arg name="performTransitionAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="scopeType">PARENT</arg>
              <arg name="destination-scopeTarget">SUB_TASK</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitieslinkedtransition-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="integerValue">31</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">ch.beecom.jira.jsu.workflow.function.linkedtransition.LinkedTransitionFunction</arg>
              <arg name="scopeSource-jql"></arg>
              <arg name="status"></arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">ff6eab36-d82e-47e7-83be-6d09c7964b97</arg>
              <arg name="FIELD_NOTES">YCFgUE0gVGFzazogY2xlYXIgc3ViLXRhc2tzIGNhY2hl</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxuXG5pc3N1ZS5nZXRTdWJUYXNrT2JqZWN0cygpLmVhY2h7XG4gICAgaSAtPiBcbiAgICAvKiBSRVNUIEFQSSBwZXIgcHVsaXppYSBjYWNoZSBpc3N1ZSBsaW5rYXRhICovXG4gICAgcmVxdWVzdE1ldGhvZCA9IFwiR0VUXCI7XG4gICAgLypTY3JpcHQgVmFyaWFibGVzKi9cbiAgICAvL1BlciB0ZXN0IGRhIGNvbnNvbGVcbiAgICAvL0lzc3VlIGlzc3VlID0gaXNzdWVNYW5hZ2VyLmdldElzc3VlQnlLZXlJZ25vcmVDYXNlKFwiQUFTLTMyNTM1XCIpXG4gICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2F1dG9tYXRpb24vY2xlYXJDYWNoZS90aWNrZXRrZXkvXCIgKyBpLmtleVxuICAgIFVSTCB1cmwgPSBuZXcgVVJMKGJhc2VVUkwpXG4gICAgSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLThcIik7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJBY2NlcHRcIiwgXCIqLypcIik7XG4gICAgY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbiAgICBjb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5jb25uZWN0KCk7XG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMFwiKSl7XG4gICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG4gICAgfVxufVxuIiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="append.value"></arg>
              <arg name="maxAllowed-integerValue">50</arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field.value">%%CURRENT_DATETIME%%</arg>
              <arg name="field.name">customfield_22640</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">4dcfdd4f11f7d9ea3966d7c23e98027086a2ee90</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIGxpbmtlZFRpY2tldHMgJiBGYXN0LVRyYW5zYWN0IHRoZW0=</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="maxAllowed-integerValue">50</arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field">customfield_22693</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="541" name="Assegna a Fornitore e Pianifica" view="fieldscreen">
      <meta name="opsbar-sequence">50</meta>
      <meta name="jira.description"></meta>
      <meta name="jira.fieldscreen.id">20112</meta>
      <restrict-to>
        <conditions type="AND">
          <condition type="class">
            <arg name="FIELD_FUNCTION_ID">a9655845-bd3d-4171-ab08-fdb0c420b5d2</arg>
            <arg name="FIELD_NOTES">YCFgT1BfQVNTRVQgc2hvdWxkIGJlIGV2YWx1YXRlZCAmJiBJc3N1ZSB0eXBlIHNob3VsZCBiZSBOZXcgSW5zdGFsbGF0aW9u</arg>
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
            <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJjZlZhbHVlc1snT1BfQVNTRVQnXSAhPSBudWxsICYmIGlzc3VlLmlzc3VlVHlwZS5uYW1lID09ICdOZXcgSW5zdGFsbGF0aW9uJyIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
          </condition>
          <condition type="class">
            <arg name="FIELD_FUNCTION_ID">e335982b-f860-4bed-a8cc-028022cff1ce</arg>
            <arg name="FIELD_NOTES">YCFgT1BfU1VQUExJRVIgc2hvdWxkIGJlIG5vdCBudWxs</arg>
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
            <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuXG5kZWYgdHJvdmF0bz1mYWxzZVxuZm9yIChzIGluIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi5zdXBwbGllciddLnRvU3RyaW5nKCkpKXtcbiAgICBpZiAoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzKSAhPSBudWxsKXtcbiAgICAgICAgdHJvdmF0bz10cnVlXG4gICAgfVxufVxucmV0dXJuIHRyb3ZhdG8iLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
          </condition>
        </conditions>
      </restrict-to>
      <validators>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">de52ae8f-3a4f-4dd8-93de-2d990003847d</arg>
          <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIEN1c3RvbWVyIENvbnRyYWN0ICYmIE51bWJlciBvZiB0aWNrZXRzIGluIHRoZSBsYXN0IDYwIGRheXM=</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">a80e150a-63e9-41ea-964a-c564139e7864</arg>
          <arg name="FIELD_NOTES">YCFgU0FQOiB1cGRhdGUgU04gc3RhdHVzICYgQ3JlYXRlIFNP</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="disabled">false</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">5e9c9e99-6d82-4e7b-bcbd-a39b8cf84bb5</arg>
          <arg name="FIELD_NOTES">YCFgT1AgRW1haWwgTm90aWZpY2F0aW9uOiBBU1NJR05fVE9fU1VQUExJRVI=</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmluZGV4Lklzc3VlSW5kZXhpbmdTZXJ2aWNlXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuSXNzdWVMaW5rXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbmRlZiByZXF1ZXN0TWV0aG9kID0gXCJQT1NUXCI7XG5kZWYgcmVsYXRlc0luSXNzdWVMaW5rPWZhbHNlXG5kZWYgcmVsYXRlc091dElzc3VlTGluaz1mYWxzZVxuZGVmIGxpbmtlZFRpY2tldHM9bmV3IEFycmF5TGlzdCgpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiBhdXRvbWF0aWNhbGx5Q29uZmlybWVkID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi5hdXRvbWF0aWNhbGx5QXNzaWduZWQnXSA/IHByb3BlcnRpZXNbJ2NmLmF1dG9tYXRpY2FsbHlBc3NpZ25lZCddLnRvU3RyaW5nKCkgOiBcIk9QX0FVVE9NQVRJQ0FMTFlfQVNTSUdORURcIilbMF1cblxuLyp2ZXJpZmljYSB0aWNrZXQgY29sbGVnYXRpKi9cbkxpc3Q8SXNzdWVMaW5rPiBhbGxJbklzc3VlTGluayA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTGlua01hbmFnZXIoKS5nZXRJbndhcmRMaW5rcyhpc3N1ZS5nZXRJZCgpKVxuZm9yIChJdGVyYXRvcjxJc3N1ZUxpbms+IG91dEl0ZXJhdG9yID0gYWxsSW5Jc3N1ZUxpbmsuaXRlcmF0b3IoKTsgb3V0SXRlcmF0b3IuaGFzTmV4dCgpOykge1xuICAgIElzc3VlTGluayBpc3N1ZUxpbmsgPSAoSXNzdWVMaW5rKSBvdXRJdGVyYXRvci5uZXh0KCk7XG5cbiAgICBpZihpc3N1ZUxpbmsuZ2V0U291cmNlT2JqZWN0KCkhPSBudWxsICYmIGlzc3VlTGluay5pc3N1ZUxpbmtUeXBlLmdldE5hbWUoKS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpbC5saW5rZWRUa3RzUmVsYXRlcyddLnRvU3RyaW5nKCkpICYmIChpc3N1ZUxpbmsuZ2V0U291cmNlT2JqZWN0KCkuc3RhdHVzLm5hbWUgPT0gXCJPcGVuXCIgfHwgaXNzdWVMaW5rLmdldFNvdXJjZU9iamVjdCgpLnN0YXR1cy5uYW1lID09IFwiUmVxdWlyZWRcIikpe1xuICAgICAgICByZWxhdGVzSW5Jc3N1ZUxpbms9dHJ1ZVxuICAgICAgICBsaW5rZWRUaWNrZXRzLmFkZChpc3N1ZUxpbmsuZ2V0U291cmNlT2JqZWN0KCkudG9TdHJpbmcoKSlcbiAgICAgICAgbG9nLmRlYnVnIFwiSXNzdWUgY29uIHJlbGF0ZXNJbklzc3VlTGlua1wiXG4gICAgfVxufVxuTGlzdDxJc3N1ZUxpbms+IGFsbE91dElzc3VlTGluayA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTGlua01hbmFnZXIoKS5nZXRPdXR3YXJkTGlua3MoaXNzdWUuZ2V0SWQoKSlcbmZvciAoSXRlcmF0b3I8SXNzdWVMaW5rPiBvdXRJdGVyYXRvciA9IGFsbE91dElzc3VlTGluay5pdGVyYXRvcigpOyBvdXRJdGVyYXRvci5oYXNOZXh0KCk7KSB7XG4gICAgSXNzdWVMaW5rIGlzc3VlTGluayA9IChJc3N1ZUxpbmspIG91dEl0ZXJhdG9yLm5leHQoKTtcblxuICAgIGlmKGlzc3VlTGluay5nZXREZXN0aW5hdGlvbk9iamVjdCgpIT0gbnVsbCAmJiBpc3N1ZUxpbmsuaXNzdWVMaW5rVHlwZS5nZXROYW1lKCkudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snaWwubGlua2VkVGt0c1JlbGF0ZXMnXS50b1N0cmluZygpKSAmJiAoaXNzdWVMaW5rLmdldERlc3RpbmF0aW9uT2JqZWN0KCkuc3RhdHVzLm5hbWUgPT0gXCJPcGVuXCIgfHwgaXNzdWVMaW5rLmdldERlc3RpbmF0aW9uT2JqZWN0KCkuc3RhdHVzLm5hbWUgPT0gXCJSZXF1aXJlZFwiKSl7XG4gICAgICAgIHJlbGF0ZXNPdXRJc3N1ZUxpbms9dHJ1ZVxuICAgICAgICBsaW5rZWRUaWNrZXRzLmFkZChpc3N1ZUxpbmsuZ2V0RGVzdGluYXRpb25PYmplY3QoKS50b1N0cmluZygpKVxuICAgICAgICBsb2cuZGVidWcgXCJJc3N1ZSBjb24gcmVsYXRlc091dElzc3VlTGlua1wiXG4gICAgfVxufVxuXG5kZWYgYm9keV9yZXFcbmlmKHJlbGF0ZXNJbklzc3VlTGluayB8fCByZWxhdGVzT3V0SXNzdWVMaW5rKXtcbiAgICBib2R5X3JlcSA9IFtcbiAgICAgICAgXCJ0ZW1wbGF0ZU5hbWVcIjogcHJvcGVydGllc1sndHQuYXNzaWduVG9TdXBwbGllciddLnRvU3RyaW5nKCksXG4gICAgICAgIFwicGVjXCI6IGZhbHNlLFxuICAgICAgICBcImlzc3VlS2V5XCI6IGlzc3VlLmtleSxcbiAgICAgICAgXCJsaW5rZWRUaWNrZXRzXCI6IGxpbmtlZFRpY2tldHNcbiAgICBdXG59ZWxzZXtcbiAgICBib2R5X3JlcSA9IFtcbiAgICAgICAgXCJ0ZW1wbGF0ZU5hbWVcIjogcHJvcGVydGllc1sndHQuYXNzaWduVG9TdXBwbGllciddLnRvU3RyaW5nKCksXG4gICAgICAgIFwicGVjXCI6IGZhbHNlLFxuICAgICAgICBcImlzc3VlS2V5XCI6IGlzc3VlLmtleVxuICAgIF1cbn1cblxuaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q29uZmlybWVkKT09bnVsbCB8fCBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGF1dG9tYXRpY2FsbHlDb25maXJtZWQpLnRvU3RyaW5nKCkuZXF1YWxzKFwiTm9cIikpe1xuICAgIGRlZiBiYXNlVVJMID0gXCJodHRwOi8vXCIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArIFwiL29wL3Jlc3QvamlyYS9BQS90cmFuc2FjdGlvbi9tYWlsL3NlbmRcIlxuICAgIFVSTCB1cmxcbiAgICB1cmwgPSBuZXcgVVJMKGJhc2VVUkwpXG5cbiAgICBsb2cuZGVidWcgXCJiYXNlVVJMOiBcIiArIGJhc2VVUkxcbiAgICBIdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdE1ldGhvZChyZXF1ZXN0TWV0aG9kKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbiAgICBjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbiAgICBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtLndpdGhXcml0ZXIoXCJVVEYtOFwiKSB7IG5ldyBTdHJlYW1pbmdKc29uQnVpbGRlcihpdCwgYm9keV9yZXEpIH1cbiAgICBsb2cuZGVidWcgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW1cbiAgICBjb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuICAgIGRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5cdGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICBcbiAgICBpZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDBcIikgJiYgIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDRcIikpe1xuICAgICAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIlNFTkRNQUlMXCIpXG4gICAgICAgIGVycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArIFwiIFwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKSlcbiAgICAgICAgZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncylcbiAgICAgICAgZUxpc3QuYWRkKGVMaXN0RXJyb3JzKVxuXG4gICAgICAgIG91dHB1dC5hZGQoZUxpc3QpXG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oJ3tcIkVcIjpcIicgKyBvdXRwdXQudG9TdHJpbmcoKSArICdcIn0nKVxuICAgIH1cbn1cbiIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="disabled">false</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="null" status="null" step="4">
          <post-functions>
            <function type="class">
              <arg name="field.copyFieldSource1"></arg>
              <arg name="textValue">-1</arg>
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="maxAllowed-integerValue"></arg>
              <arg name="workflowName-textValue">OPAA: PM Task Workflow</arg>
              <arg name="performTransitionAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="scopeType">PARENT</arg>
              <arg name="destination-scopeTarget">SUB_TASK</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitieslinkedtransition-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="integerValue">31</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">ch.beecom.jira.jsu.workflow.function.linkedtransition.LinkedTransitionFunction</arg>
              <arg name="scopeSource-jql"></arg>
              <arg name="status"></arg>
            </function>
            <function type="class">
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="append.value"></arg>
              <arg name="maxAllowed-integerValue"></arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field.value">%%CURRENT_DATETIME%%</arg>
              <arg name="field.name">customfield_22639</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">0db4b388-06a4-49d8-ace8-c098c9d1a5c2</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IE5ldyBJbnN0YWxsYXRpb24gLSBDaGVjayBsaW5rZWRUaWNrZXRzICYgRmFzdC1UcmFuc2FjdCB0aGVt</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="maxAllowed-integerValue"></arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field">customfield_22758</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
              <arg name="field2">customfield_22757</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="861" name="Assegna a tecnici interni" view="fieldscreen">
      <meta name="opsbar-sequence">50</meta>
      <meta name="jira.description"></meta>
      <meta name="jira.fieldscreen.id">20402</meta>
      <restrict-to>
        <conditions>
          <condition type="class">
            <arg name="FIELD_FUNCTION_ID">67d21477-5b8c-45a3-88f8-a691f3cb035f</arg>
            <arg name="FIELD_NOTES">YCFgT1BfQVNTRVQgc2hvdWxkIGJlIGV2YWx1YXRlZA==</arg>
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
            <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJjZlZhbHVlc1snT1BfQVNTRVQnXSAhPSBudWxsIHx8IGlzc3VlLmlzc3VlVHlwZS5uYW1lID09ICdQbGFubmVkIE1haW50ZW5hbmNlIFRpY2tldCciLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
          </condition>
        </conditions>
      </restrict-to>
      <validators>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">10786a5c-e2b3-4bea-a0d1-46f9012a73e2</arg>
          <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIEN1c3RvbWVyIENvbnRyYWN0ICYmIE51bWJlciBvZiB0aWNrZXRzIGluIHRoZSBsYXN0IDYwIGRheXM=</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">7a272e30-dcd2-4e28-bf3b-a91abc51c017</arg>
          <arg name="FIELD_NOTES">YCFgU0FQOiB1cGRhdGUgU04gc3RhdHVzICYgQ3JlYXRlIFNP</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">583df9c7-fce8-41ca-ad87-8f516b4ff5c5</arg>
          <arg name="FIELD_NOTES">YCFgRGVsZXRlIHByZXZpb3VzIGF0dGFjaG1lbnRzIHJlbGF0ZWQgdG8gTkVXIEluc3RhbGxhdGlvbiBUS1QgR2VuZXJhdGlvbg==</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">ae3f3563-1b6f-4e50-a442-a0926310744c</arg>
          <arg name="FIELD_NOTES">YCFgT1A6IERvYyBUZW1wbGF0ZSBnZW5lcmF0aW9uIC0gc2UgTmV3IEluc3RhbGxhdGlvbiBPUiBGaXJzdCBUaWNrZXQgPSB0cnVl</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5Xb3JrZmxvd0V4Y2VwdGlvbjtcbmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvblxuaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyO1xuaW1wb3J0IGdyb292eS5qc29uLlN0cmVhbWluZ0pzb25CdWlsZGVyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5DdXN0b21GaWVsZE1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3I7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5NdXRhYmxlSXNzdWVcbmltcG9ydCBvcmcuYXBhY2hlLmNvbW1vbnMuY29kZWMuYmluYXJ5LkJhc2U2NDtcbmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5XG5pbXBvcnQgZ3Jvb3Z5eC5uZXQuaHR0cC5IVFRQQnVpbGRlclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcblxuZGVmIHJlcXVlc3RNZXRob2RcbmRlZiBiYXNlVVJMXG5cbmRlZiBmaXJzdFRpY2tldCA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YuZmlyc3RUa3QnXS50b1N0cmluZygpKVswXVxuXG5sb2cuZGVidWcgaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZVxubG9nLmRlYnVnIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoZmlyc3RUaWNrZXQpXG5cblxuLyogUkVTVCBBUEkgcGVyIEludmlvIE5vdGlmaWNhIEVtYWlsIE9OU0lURV9SRVBPUlQgKi9cbnJlcXVlc3RNZXRob2QgPSBcIkdFVFwiO1xuZGVmIHJlc2NoZWR1bGluZyA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YucmVzY2hlZHVsaW5nJ10gPyBwcm9wZXJ0aWVzWydjZi5yZXNjaGVkdWxpbmcnXS50b1N0cmluZygpIDogXCJPUF9DSEFOR0VfU0NIRURVTElOR1wiKVswXVxuZGVmIHRyYW5zaXRpb25DaGVjayA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YuY2hlY2tBbmRDb25maXJtMiddLnRvU3RyaW5nKCkpWzBdXG5cbmxvZy5kZWJ1ZyBcImlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoZmlyc3RUaWNrZXQpOiBcIiArIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoZmlyc3RUaWNrZXQpXG5kZWYgZmlyc3RfdGlja2V0PWZhbHNlXG5kZWYgdGVtcGxhdGU9XCJcIlxuaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShmaXJzdFRpY2tldCkhPW51bGwpe1xuICAgIGZpcnN0X3RpY2tldD10cnVlXG4gICAgdGVtcGxhdGU9XCJGSVJTVF9USUNLRVQlN0NNQU5VRkFDVFVSRVJcIlxufWVsc2V7XG4gICAgdGVtcGxhdGU9XCJORVdfSU5TVEFMTEFUSU9OX0NSRUFURV9US1QlN0NNQU5VRkFDVFVSRVJcIlxufVxuXG5pZihpc3N1ZS5nZXRJc3N1ZVR5cGUoKS5uYW1lLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2l0Lm5ld0luc3RhbGxhdGlvbiddKSl7XG4gICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2F1dG9tYXRpb24vZG9jdW1lbnQvZ2VuZXJhdGlvbi9jaGVjaz9JU1NVRV9LRVk9XCIrIGlzc3VlLmtleSArXCImRE9DX0NBVEVHT1JZPVwiICsgdGVtcGxhdGUgKyBcIiZFTkFCTEVEX0ZPUl9GSVJTVF9USUNLRVQ9XCIrZmlyc3RfdGlja2V0K1wiJklNUE9SVF9GUk9NPVwiXG59ZWxzZXtcbiAgICBpZihmaXJzdF90aWNrZXQpe1xuICAgIFx0YmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2F1dG9tYXRpb24vZG9jdW1lbnQvZ2VuZXJhdGlvbi9jaGVjaz9JU1NVRV9LRVk9XCIrIGlzc3VlLmtleSArXCImRE9DX0NBVEVHT1JZPVwiICsgdGVtcGxhdGUgKyBcIiZFTkFCTEVEX0ZPUl9GSVJTVF9USUNLRVQ9XCIrZmlyc3RfdGlja2V0K1wiJklNUE9SVF9GUk9NPU9QX0FTU0VUXCJcbiAgICB9XG59XG5cbmxvZy5kZWJ1ZyBiYXNlVVJMXG5pZihiYXNlVVJMICE9IG51bGwgJiYgYmFzZVVSTCAhPSBcIlwiKXtcbiAgICBVUkwgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgIEh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbiAgICBjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbiAgICBjb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuICAgIGRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG4gICAgbG9nLmRlYnVnIFwidXJsOiBcIiArIHVybFxuXG4gICAgaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAwXCIpKXtcbiAgICAgICAgbG9nLmRlYnVnIFwidXJsOiBcIiArIHVybFxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZUNvZGU6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcbiAgICAgICAgbG9nLmRlYnVnIFwiRXJyb3JTdHJlYW06IFwiICsgY29ubmVjdGlvbi5nZXRFcnJvclN0cmVhbSgpLnRvU3RyaW5nKClcbiAgICAgICAgbG9nLmRlYnVnIFwiZ2V0SGVhZGVyRmllbGRzKCk6IFwiICsgY29ubmVjdGlvbi5nZXRIZWFkZXJGaWVsZHMoKVxuICAgICAgICBkZWYgb3V0cHV0TXNnID0gKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0XG4gICAgICAgIGxvZy5kZWJ1ZyBcIigoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dDogXCIgKyBvdXRwdXRNc2dcblxuICAgICAgICBkZWYganNvblNsdXJwZXIgPSBuZXcgSnNvblNsdXJwZXIoKVxuICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgICAgICBhc3NlcnQganNvbl9vYmplY3QgaW5zdGFuY2VvZiBNYXAgIFxuICAgICAgICBsb2cuZGVidWcgXCJtZXNzYWdlOiBcIiArICBqc29uX29iamVjdC5tZXNzYWdlXG5cbiAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiRVwiKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJPUC1ET0NTXCIpXG4gICAgICAgIGVycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArIFwiIFwiICsganNvbl9vYmplY3QubWVzc2FnZSlcbiAgICAgICAgZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncylcbiAgICAgICAgZUxpc3QuYWRkKGVMaXN0RXJyb3JzKVxuXG4gICAgICAgIG91dHB1dC5hZGQoZUxpc3QpXG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oJ3tcIkVcIjpcIicgKyBvdXRwdXQudG9TdHJpbmcoKSArICdcIn0nKVxuICAgIH1cbn1cbiIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">dd185790-4471-4435-99ff-f3aca12a451c</arg>
          <arg name="FIELD_NOTES">YCFgT1AgRW1haWwgTm90aWZpY2F0aW9uOiBBU1NJR05fVE9fSU5URVJOQUxfVEVDSFM=</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmluZGV4Lklzc3VlSW5kZXhpbmdTZXJ2aWNlXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuSXNzdWVMaW5rXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbmRlZiByZXF1ZXN0TWV0aG9kID0gXCJQT1NUXCI7XG5kZWYgcmVsYXRlc0luSXNzdWVMaW5rPWZhbHNlXG5kZWYgcmVsYXRlc091dElzc3VlTGluaz1mYWxzZVxuZGVmIGxpbmtlZFRpY2tldHM9bmV3IEFycmF5TGlzdCgpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiBhdXRvbWF0aWNhbGx5Q29uZmlybWVkID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi5hdXRvbWF0aWNhbGx5QXNzaWduZWQnXSA/IHByb3BlcnRpZXNbJ2NmLmF1dG9tYXRpY2FsbHlBc3NpZ25lZCddLnRvU3RyaW5nKCkgOiBcIk9QX0FVVE9NQVRJQ0FMTFlfQVNTSUdORURcIilbMF1cblxuLyp2ZXJpZmljYSB0aWNrZXQgY29sbGVnYXRpKi9cbkxpc3Q8SXNzdWVMaW5rPiBhbGxJbklzc3VlTGluayA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTGlua01hbmFnZXIoKS5nZXRJbndhcmRMaW5rcyhpc3N1ZS5nZXRJZCgpKVxuZm9yIChJdGVyYXRvcjxJc3N1ZUxpbms+IG91dEl0ZXJhdG9yID0gYWxsSW5Jc3N1ZUxpbmsuaXRlcmF0b3IoKTsgb3V0SXRlcmF0b3IuaGFzTmV4dCgpOykge1xuICAgIElzc3VlTGluayBpc3N1ZUxpbmsgPSAoSXNzdWVMaW5rKSBvdXRJdGVyYXRvci5uZXh0KCk7XG5cbiAgICBpZihpc3N1ZUxpbmsuZ2V0U291cmNlT2JqZWN0KCkhPSBudWxsICYmIGlzc3VlTGluay5pc3N1ZUxpbmtUeXBlLmdldE5hbWUoKS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpbC5saW5rZWRUa3RzUmVsYXRlcyddLnRvU3RyaW5nKCkpICYmIGlzc3VlTGluay5nZXRTb3VyY2VPYmplY3QoKS5zdGF0dXMubmFtZSA9PSBcIk9wZW5cIil7XG4gICAgICAgIHJlbGF0ZXNJbklzc3VlTGluaz10cnVlXG4gICAgICAgIGxpbmtlZFRpY2tldHMuYWRkKGlzc3VlTGluay5nZXRTb3VyY2VPYmplY3QoKS50b1N0cmluZygpKVxuICAgICAgICBsb2cuZGVidWcgXCJJc3N1ZSBjb24gcmVsYXRlc0luSXNzdWVMaW5rXCJcbiAgICB9XG59XG5MaXN0PElzc3VlTGluaz4gYWxsT3V0SXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldE91dHdhcmRMaW5rcyhpc3N1ZS5nZXRJZCgpKVxuZm9yIChJdGVyYXRvcjxJc3N1ZUxpbms+IG91dEl0ZXJhdG9yID0gYWxsT3V0SXNzdWVMaW5rLml0ZXJhdG9yKCk7IG91dEl0ZXJhdG9yLmhhc05leHQoKTspIHtcbiAgICBJc3N1ZUxpbmsgaXNzdWVMaW5rID0gKElzc3VlTGluaykgb3V0SXRlcmF0b3IubmV4dCgpO1xuXG4gICAgaWYoaXNzdWVMaW5rLmdldERlc3RpbmF0aW9uT2JqZWN0KCkhPSBudWxsICYmIGlzc3VlTGluay5pc3N1ZUxpbmtUeXBlLmdldE5hbWUoKS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpbC5saW5rZWRUa3RzUmVsYXRlcyddLnRvU3RyaW5nKCkpICYmIGlzc3VlTGluay5nZXREZXN0aW5hdGlvbk9iamVjdCgpLnN0YXR1cy5uYW1lID09IFwiT3BlblwiKXtcbiAgICAgICAgcmVsYXRlc091dElzc3VlTGluaz10cnVlXG4gICAgICAgIGxpbmtlZFRpY2tldHMuYWRkKGlzc3VlTGluay5nZXREZXN0aW5hdGlvbk9iamVjdCgpLnRvU3RyaW5nKCkpXG4gICAgICAgIGxvZy5kZWJ1ZyBcIklzc3VlIGNvbiByZWxhdGVzT3V0SXNzdWVMaW5rXCJcbiAgICB9XG59XG5cbmRlZiBib2R5X3JlcVxuaWYocmVsYXRlc0luSXNzdWVMaW5rIHx8IHJlbGF0ZXNPdXRJc3N1ZUxpbmspe1xuICAgIGJvZHlfcmVxID0gW1xuICAgICAgICBcInRlbXBsYXRlTmFtZVwiOiBwcm9wZXJ0aWVzWyd0dC5hc3NpZ25Ub0ludGVybmFsVGVjaHMnXS50b1N0cmluZygpLFxuICAgICAgICBcInBlY1wiOiBmYWxzZSxcbiAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXksXG4gICAgICAgIFwibGlua2VkVGlja2V0c1wiOiBsaW5rZWRUaWNrZXRzXG4gICAgXVxufWVsc2V7XG4gICAgYm9keV9yZXEgPSBbXG4gICAgICAgIFwidGVtcGxhdGVOYW1lXCI6IHByb3BlcnRpZXNbJ3R0LmFzc2lnblRvSW50ZXJuYWxUZWNocyddLnRvU3RyaW5nKCksXG4gICAgICAgIFwicGVjXCI6IGZhbHNlLFxuICAgICAgICBcImlzc3VlS2V5XCI6IGlzc3VlLmtleVxuICAgIF1cbn1cblxuaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q29uZmlybWVkKT09bnVsbCB8fCBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGF1dG9tYXRpY2FsbHlDb25maXJtZWQpLnRvU3RyaW5nKCkuZXF1YWxzKFwiTm9cIikpe1xuICAgIGRlZiBiYXNlVVJMID0gXCJodHRwOi8vXCIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArIFwiL29wL3Jlc3QvamlyYS9BQS90cmFuc2FjdGlvbi9tYWlsL3NlbmRcIlxuICAgIFVSTCB1cmxcbiAgICB1cmwgPSBuZXcgVVJMKGJhc2VVUkwpXG5cbiAgICBsb2cuZGVidWcgXCJiYXNlVVJMOiBcIiArIGJhc2VVUkxcbiAgICBIdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdE1ldGhvZChyZXF1ZXN0TWV0aG9kKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbiAgICBjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbiAgICBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtLndpdGhXcml0ZXIoXCJVVEYtOFwiKSB7IG5ldyBTdHJlYW1pbmdKc29uQnVpbGRlcihpdCwgYm9keV9yZXEpIH1cbiAgICBsb2cuZGVidWcgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW1cbiAgICBjb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuICAgIGRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5cdGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICBcbiAgICBpZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDBcIikgJiYgIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDRcIikpe1xuICAgICAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIlNFTkRNQUlMXCIpXG4gICAgICAgIGVycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArIFwiIFwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKSlcbiAgICAgICAgZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncylcbiAgICAgICAgZUxpc3QuYWRkKGVMaXN0RXJyb3JzKVxuXG4gICAgICAgIG91dHB1dC5hZGQoZUxpc3QpXG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oJ3tcIkVcIjpcIicgKyBvdXRwdXQudG9TdHJpbmcoKSArICdcIn0nKVxuICAgIH1cbn1cbiIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="null" status="null" step="19">
          <post-functions>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">863867d4-643d-4e66-b4c9-79cdafbf758d</arg>
              <arg name="FIELD_NOTES">YCFgVXBkYXRlIE9QX1NVUFBMSUVSLCBPUF9JTlRFUk5BTF9URUNITklDSUFOUywgT1BfVEVDSE5JQ0lBTlMgb24gUE0gVGFza3M=</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyXG5pbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGxcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTW9kaWZpZWRWYWx1ZVxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS51dGlsLkRlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5pbmRleC5Jc3N1ZUluZGV4aW5nU2VydmljZVxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuXG5Jc3N1ZU1hbmFnZXIgaXNzdWVNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKClcbklzc3VlSW5kZXhpbmdTZXJ2aWNlIGlzc3VlSW5kZXhpbmdTZXJ2aWNlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q29tcG9uZW50KElzc3VlSW5kZXhpbmdTZXJ2aWNlKVxuLy9kZWYgaXNzdWUgPSBpc3N1ZU1hbmFnZXIuZ2V0SXNzdWVCeUtleUlnbm9yZUNhc2UoXCJBQVMtMzY0NTlcIilcbmRlZiB0a3RTdXBwbGllciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShcIk9QX1NVUFBMSUVSXCIpXG5kZWYgdGt0SW50ZXJuYWxUZWNocyA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShcIk9QX0lOVEVSTkFMX1RFQ0hOSUNJQU5TXCIpWzBdXG5kZWYgdGt0VGVjaHMgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUoXCJPUF9URUNITklDSUFOU1wiKVswXVxuZGVmIHN1YlRhc2tPYmplY3RzID0gaXNzdWUuZ2V0U3ViVGFza09iamVjdHMoKVxuXG5kZWYgY3VycmVudFN1YlRhc2tcblxuaWYgKHN1YlRhc2tPYmplY3RzKXtcbiAgICBmb3IgKHN0IGluIHN1YlRhc2tPYmplY3RzKXtcbiAgICAgICAgaWYoc3QuaXNzdWVUeXBlLm5hbWUudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snaXQucGxhbm5lZE1haW50ZW5hbmNlVGFzayddLnRvU3RyaW5nKCkpKXtcbiAgICAgICAgICAgIGZvcihzIGluIHRrdFN1cHBsaWVyKXtcbiAgICAgICAgICAgICAgICBzLnVwZGF0ZVZhbHVlKG51bGwsIHN0LCBuZXcgTW9kaWZpZWRWYWx1ZShzdC5nZXRDdXN0b21GaWVsZFZhbHVlKHMpLCBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHMpKSwgbmV3IERlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlcigpKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGt0SW50ZXJuYWxUZWNocy51cGRhdGVWYWx1ZShudWxsLCBzdCwgbmV3IE1vZGlmaWVkVmFsdWUoc3QuZ2V0Q3VzdG9tRmllbGRWYWx1ZSh0a3RJbnRlcm5hbFRlY2hzKSwgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZSh0a3RJbnRlcm5hbFRlY2hzKSksIG5ldyBEZWZhdWx0SXNzdWVDaGFuZ2VIb2xkZXIoKSlcbiAgICAgICAgICAgIHRrdFRlY2hzLnVwZGF0ZVZhbHVlKG51bGwsIHN0LCBuZXcgTW9kaWZpZWRWYWx1ZShzdC5nZXRDdXN0b21GaWVsZFZhbHVlKHRrdFRlY2hzKSwgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZSh0a3RUZWNocykpLCBuZXcgRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyKCkpXG4gICAgICAgICAgICBpc3N1ZUluZGV4aW5nU2VydmljZS5yZUluZGV4KHN0KVxuICAgICAgICB9XG4gICAgfVxufSIsInNjcmlwdFBhdGgiOm51bGx9</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
            <function type="class">
              <arg name="field.copyFieldSource2"></arg>
              <arg name="field.copyFieldSource1">customfield_23236</arg>
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="maxAllowed-integerValue"></arg>
              <arg name="field.createTargetValue1"></arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field.copyFieldMode1">OVERWRITE</arg>
              <arg name="field.copyFieldDestination1">customfield_22653</arg>
              <arg name="field.copyFieldSeparator1"></arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiescopyValueFromOtherField-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.CopyValueFromOtherFieldPostFunction</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="append.value"></arg>
              <arg name="maxAllowed-integerValue"></arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field.value">true</arg>
              <arg name="field.name">customfield_23245</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="append.value"></arg>
              <arg name="maxAllowed-integerValue"></arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field.value">%%CURRENT_DATETIME%%</arg>
              <arg name="field.name">customfield_22639</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">fd4ea68e-d068-4020-abb9-ffd46c0dd3a2</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IE5ldyBJbnN0YWxsYXRpb24gLSBDaGVjayBsaW5rZWRUaWNrZXRzICYgRmFzdC1UcmFuc2FjdCB0aGVt</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="maxAllowed-integerValue">50</arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field">customfield_22758</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
              <arg name="field3">customfield_23235</arg>
              <arg name="field2">customfield_22757</arg>
              <arg name="scopeSource-jql"></arg>
              <arg name="field4">customfield_22813</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </common-actions>
  <steps>
    <step id="1" name="Open">
      <meta name="jira.status.id">1</meta>
      <actions>
<common-action id="51" />
<common-action id="751" />
<common-action id="541" />
<common-action id="861" />
        <action id="11" name="Richiedi Preventivo" view="fieldscreen">
          <meta name="opsbar-sequence">40</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">20500</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">779b4faf-8820-4019-968f-077567668869</arg>
                <arg name="FIELD_NOTES">YCFgT1BfQVNTRVQgc2hvdWxkIGJlIG5vdCBudWxs</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJjZlZhbHVlc1snT1BfQVNTRVQnXSAhPSBudWxsIiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="8">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="append.value"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">Yes</arg>
                  <arg name="field.name">customfield_22681</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="field.type">8</arg>
                  <arg name="full.module.key">com.riadalabs.jira.plugins.insightinsight-post-function</arg>
                  <arg name="field.groovyScript">import com.atlassian.jira.component.ComponentAccessor;
import java.util.ArrayList;
import com.atlassian.jira.config.util.JiraHome
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.MutableIssue;
import com.atlassian.jira.event.type.EventDispatchOption;

Properties relativePath = new Properties()
File relativePathFile = new File('/var/atlassian/application-data/jira/insightPathToScript.properties')
relativePathFile.withInputStream {
	relativePath.load(it)
}
Properties properties = new Properties()
File propertiesFile = new File('/var/atlassian/application-data/shared/scripts/opproject.properties')
propertiesFile.withInputStream {
                properties.load(it)
}

/* Get Insight Object Facade from plugin accessor */
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(&quot;com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade&quot;); 
def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);
 
/* Get Insight Object Type Facade from plugin accessor */
Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(&quot;com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade&quot;); 
def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);
 
/* Get Insight Object Attribute Facade from plugin accessor */
Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(&quot;com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade&quot;); 
def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);

/* Get Insight IQL Facade from plugin accessor */
Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(&quot;com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade&quot;); 
def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);

Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(&quot;com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory&quot;); 
def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);

def OPAA = properties['ischema.aa.id'].toString().toInteger()
def DO = properties['ischema.dbo.id'].toString().toInteger()
def quoteLabourRatesField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.quoteLabourRates'].toString())[0];
def lumpSumOfferField = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectsByName(properties['cf.lumpSumOffer'].toString())[0];
def OnSiteRateObjects = new ArrayList();

def ONSITE_RATE_REPORT_OBJ_TYPE = properties['iobj.onSiteRateReport'].toString().toInteger()
def ONSITE_RATE_REPORT_ATTR_NAME = properties['iobj.onSiteRateReport.name.id'] ? properties['iobj.onSiteRateReport.name.id'].toString().toInteger() : 2766
def ONSITE_RATE_REPORT_ATTR_RATE_REF = properties['iobj.onSiteRateReport.rateRef.id'] ? properties['iobj.onSiteRateReport.rateRef.id'].toString().toInteger() : 4340
def ONSITE_RATE_REPORT_ATTR_APPLIED_TO = properties['iobj.onSiteRateReport.appliedTo.id'] ? properties['iobj.onSiteRateReport.appliedTo.id'].toString().toInteger() : 3194
def ONSITE_RATE_REPORT_ATTR_SAP = properties['iobj.onSiteRateReport.sap.id'] ? properties['iobj.onSiteRateReport.sap.id'].toString().toInteger() : 3196
def ONSITE_RATE_REPORT_ATTR_QUOTE_FROM_TKT = properties['iobj.onSiteRateReport.quoteFromTkt.id'] ? properties['iobj.onSiteRateReport.quoteFromTkt.id'].toString().toInteger() : 3203
def ONSITE_RATE_REPORT_ATTR_QUANTITY_CUSTOMER = properties['iobj.onSiteRateReport.qtyCustomer.id'] ? properties['iobj.onSiteRateReport.qtyCustomer.id'].toString().toInteger() : 3189

Issue issue = issue
log.info properties['cf.lumpSumOffer'].toString()
def lumpSum=&quot;false&quot;

if(issue.getCustomFieldValue(lumpSumOfferField) != null &amp;&amp; issue.getCustomFieldValue(lumpSumOfferField).toString().equals(&quot;Yes&quot;)){
    lumpSum=&quot;true&quot;
}else{
    lumpSum=&quot;false&quot;
}

log.info &quot;objectType=\&quot;Rates\&quot; AND \&quot;QUOTE_ENABLED\&quot; = true AND LUMPSUM_OFFER = &quot; + lumpSum
def objects = iqlFacade.findObjectsByIQLAndSchema(DO, &quot;objectType=\&quot;Rates\&quot; AND \&quot;QUOTE_ENABLED\&quot; = true AND LUMPSUM_OFFER = &quot; + lumpSum); // See the complete list of possible IQL on the Insight Query Language documentation page
for (obj in objects){
	log.info obj.toString()
    obj = obj.toString()
    def rateName = obj.substring(0,obj.indexOf('(')-1)
    def rateKey = obj.substring(obj.indexOf('(')+1,obj.indexOf(')'))
    
    /*Set Name*/
    def objectTypeOnSiteRateReport = objectTypeFacade.loadObjectTypeBean(ONSITE_RATE_REPORT_OBJ_TYPE);
    def newObjectBean = objectTypeOnSiteRateReport.createMutableObjectBean();
    
    def objectAttributeBeans = new ArrayList();
    log.info ONSITE_RATE_REPORT_ATTR_NAME.toString()
    def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_RATE_REPORT_ATTR_NAME); 
    
    objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, nameObjectTypeAttributeBean, rateName));
    
    newObjectBean.setObjectAttributeBeans(objectAttributeBeans);
        
    /*Set APPLIED_TO*/
    def appliedToObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_RATE_REPORT_ATTR_APPLIED_TO); 
    
    objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, appliedToObjectTypeAttributeBean, &quot;BOTH&quot;));
    
    newObjectBean.setObjectAttributeBeans(objectAttributeBeans);
    
    /*Set SAP*/
    def sapObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_RATE_REPORT_ATTR_SAP); 
    
    objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, sapObjectTypeAttributeBean, &quot;false&quot;));
    
    newObjectBean.setObjectAttributeBeans(objectAttributeBeans);
    
    /*Set QUOTE_FROM_TKT*/
    def quoteObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_RATE_REPORT_ATTR_QUOTE_FROM_TKT); 
    
    objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, quoteObjectTypeAttributeBean, &quot;true&quot;));
    
    newObjectBean.setObjectAttributeBeans(objectAttributeBeans);
    
    /*Set QUANTITY_CUSTOMER*/
    def qtyCustomerObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_RATE_REPORT_ATTR_QUANTITY_CUSTOMER); 
    
    objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, qtyCustomerObjectTypeAttributeBean, &quot;1&quot;));
    
    newObjectBean.setObjectAttributeBeans(objectAttributeBeans);
    
    
    /* Store the object into Insight. The new ObjectBean will be updated with an unique ID */
    try {
        newObjectBean = objectFacade.storeObjectBean(newObjectBean);
        log.warn(&quot;newObjectBean: &quot; + newObjectBean);
    } catch (Exception vie) {
        log.warn(&quot;Could not create issue due to validation exception:&quot; + vie.getMessage());
    }
    
    /* Update RATE_REF on the newObject */		        
    def objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(ONSITE_RATE_REPORT_ATTR_RATE_REF).createMutable() //The id of the attribute
    
    /* Create the new attribute bean based on the value */
    def newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, rateKey);
    /* Load the attribute bean */
    def objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), rateKey);
    if (objectAttributeBean != null) {
        /* If attribute exist reuse the old id for the new attribute */
        newObjectAttributeBean.setId(objectAttributeBean.getId());
    }
    /* Store the object attribute into Insight. */
    try {
        objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);
    } catch (Exception vie) {
        log.warn(&quot;Could not update object attribute due to validation exception:&quot; + vie.getMessage());
    }  
    
    OnSiteRateObjects.add(newObjectBean)
}
log.info (&quot;OnSiteRateObjects: &quot; + OnSiteRateObjects)
def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()

if (!OnSiteRateObjects.isEmpty()) {
    MutableIssue mi = (MutableIssue) issue;
    mi.setCustomFieldValue(quoteLabourRatesField, OnSiteRateObjects);
    ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);
}            </arg>
                  <arg name="field.filepath"></arg>
                  <arg name="class.name">com.riadalabs.jira.plugins.insight.services.jira.postfunction.InsightPostFunction</arg>
                  <arg name="field.description">OP: Automatically create Labour Rates for offer Tkt</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="field.copyFieldSource2"></arg>
                  <arg name="field.copyFieldSource1">customfield_22603</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="field.createTargetValue1"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyFieldMode1">OVERWRITE</arg>
                  <arg name="field.copyFieldDestination1">customfield_22656</arg>
                  <arg name="field.copyFieldSeparator1"></arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescopyValueFromOtherField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.CopyValueFromOtherFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">85f36110-414c-4e65-a9e9-d180169c41b4</arg>
                  <arg name="FIELD_ACTION">251 Richiedi Preventivo a Fornitore</arg>
                  <arg name="FIELD_NOTES">YCFgRmFzdCB0cmFuc2FjdCB0byAiV2FpdGluZyBmb3IgU3VwcGxpZXIgcXVvdGUiIGlmIFN1cHBsaWVyIGlzIGV2YWx1YXRlZCBhbmQgb2ZmZXIgaGFzIGJlZW4gZ2VuZXJhdGVkIGZyb20gYSByZXBhaXIgdGlja2V0</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.FasttrackTransition</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.FasttrackTransition</arg>
                  <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbmRlZiB0cm92YXRvPWZhbHNlXG5mb3IgKHMgaW4gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLnN1cHBsaWVyJ10udG9TdHJpbmcoKSkpe1xuICAgIGxvZy5kZWJ1ZyBcInM6IFwiICsgc1xuICAgIGlmIChpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHMpICE9IG51bGwpe1xuICAgICAgICBsb2cuZGVidWcgXCJpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHMpOiBcIiArIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUocylcbiAgICAgICAgdHJvdmF0bz10cnVlXG4gICAgfVxufVxubG9nLmRlYnVnIFwiY2ZWYWx1ZXNbJ09QX1RLVF9HRU5FUkFURURfRlJPTV9SRVBBSVInXT8udmFsdWU6IFwiICsgY2ZWYWx1ZXNbJ09QX1RLVF9HRU5FUkFURURfRlJPTV9SRVBBSVInXT8udmFsdWVcbmlmKGNmVmFsdWVzWydPUF9US1RfR0VORVJBVEVEX0ZST01fUkVQQUlSJ10/LnZhbHVlID09ICdZZXMnICYmIHRyb3ZhdG8pe1xuICAgIHRyb3ZhdG89dHJ1ZVxufWVsc2V7XG4gICAgdHJvdmF0bz1mYWxzZVxufVxubG9nLmRlYnVnIFwidHJvdmF0bzogXCIgKyB0cm92YXRvXG5yZXR1cm4gdHJvdmF0byIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_TRANSITION_OPTIONS"></arg>
                  <arg name="events"></arg>
                  <arg name="FIELD_ADDITIONAL_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvclxuaW1wb3J0IGphdmEuc3FsLlRpbWVzdGFtcFxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5pbmRleC5Jc3N1ZUluZGV4aW5nU2VydmljZVxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Nb2RpZmllZFZhbHVlXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnV0aWwuRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyXG5cbmRlZiBkYXRlQ2YgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUoXCJPUF9SRVFVRVNURURfREFURVwiKVswXVxuSXNzdWVJbmRleGluZ1NlcnZpY2UgaXNzdWVJbmRleGluZ1NlcnZpY2UgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDb21wb25lbnQoSXNzdWVJbmRleGluZ1NlcnZpY2UpXG5cbmRhdGVDZi51cGRhdGVWYWx1ZShudWxsLCBpc3N1ZSwgbmV3IE1vZGlmaWVkVmFsdWUoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShkYXRlQ2YpLCBuZXcgVGltZXN0YW1wKChuZXcgRGF0ZSgpKS50aW1lKSksIG5ldyBEZWZhdWx0SXNzdWVDaGFuZ2VIb2xkZXIoKSlcbmlzc3VlSW5kZXhpbmdTZXJ2aWNlLnJlSW5kZXgoaXNzdWUpXG5cbi8vaXNzdWUuc2V0Q3VzdG9tRmllbGRWYWx1ZShkYXRlQ2YsIG5ldyBUaW1lc3RhbXAoKG5ldyBEYXRlKCkpLnRpbWUpKSIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="21" name="Tkt Risolto Telefonicamente">
          <meta name="opsbar-sequence">30</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_NOTES">YCFgT1A6IEVuYWJsZWQgb25seSBmb3IgTWFpbnRlbmFuY2UgVGlja2V0</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ01haW50ZW5hbmNlIFRpY2tldCd8fHw=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="7">
              <post-functions>
                <function type="class">
                  <arg name="field.name">resolution</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
                  <arg name="field.value">1</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="31" name="Converti in Nuova Installazione">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">58d7281a-ca18-4098-990f-76fde0470684</arg>
                <arg name="FIELD_NOTES">YCFgQ2hhbmdlIHRvIE5ldyBJbnN0YWxsYXRpb24gaWYgaXNzdWUgdHlwZSA9IE1haW50ZW5hbmNl</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnTWFpbnRlbmFuY2UgVGlja2V0JyIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="1">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">7918c0e3-5dc6-49c1-b2dc-dac5aa760ae0</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IENoYW5nZSBpc3N1ZSB0eXBlIGZyb20gTWFpbnRlbmFuY2UgdG8gTmV3IEluc3RhbGxhdGlvbg==</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3JcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUudXRpbC5EZWZhdWx0SXNzdWVDaGFuZ2VIb2xkZXJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuaXNzdWV0eXBlLklzc3VlVHlwZVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuXG4vKiBEZWZpbmUgYSBMb2dnZXIgKi9cbmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKVxuXG5kZWYgY29uc3RhbnRzTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldENvbnN0YW50c01hbmFnZXIoKVxuXG5Jc3N1ZVR5cGUgdGFyZ2V0SXNzdWVUeXBlID0gbnVsbFxuZGVmIGlzc3VlVHlwZVxuXG5sb2cuZGVidWcgXCJJc3N1ZVR5cGUgb2xkID0gXCIgKyBpc3N1ZS5pc3N1ZVR5cGUubmFtZVxuXG5kZWYgY29sbGVjdGlvbiA9IGNvbnN0YW50c01hbmFnZXIuZ2V0QWxsSXNzdWVUeXBlT2JqZWN0cygpXG5kZWYgaXRlcmF0b3IgPSBjb2xsZWN0aW9uLml0ZXJhdG9yKClcbndoaWxlKGl0ZXJhdG9yLmhhc05leHQoKSl7XG5cdGlzc3VlVHlwZSA9IGl0ZXJhdG9yLm5leHQoKVxuXHRpZihpc3N1ZVR5cGUubmFtZSA9PSBwcm9wZXJ0aWVzWydpdC5uZXdJbnN0YWxsYXRpb24nXS50b1N0cmluZygpKXtcblx0XHR0YXJnZXRJc3N1ZVR5cGUgPSBpc3N1ZVR5cGVcblx0fVxufVxuXG5sb2cuZGVidWcgdGFyZ2V0SXNzdWVUeXBlLm5hbWVcbmlzc3VlLnNldElzc3VlVHlwZU9iamVjdCh0YXJnZXRJc3N1ZVR5cGUpXG5sb2cuZGVidWcgXCJJc3N1ZVR5cGUgbmV3ID0gXCIgKyBpc3N1ZS5pc3N1ZVR5cGUubmFtZSIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3IKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZQppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnV0aWwuRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuaXNzdWV0eXBlLklzc3VlVHlwZQppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lcgppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGwKClByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKCkKRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJykKcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHsKCXByb3BlcnRpZXMubG9hZChpdCkKfQoKLyogRGVmaW5lIGEgTG9nZ2VyICovCmRlZiBDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQpsb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRykKCmRlZiBjb25zdGFudHNNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q29uc3RhbnRzTWFuYWdlcigpCgpJc3N1ZSBpc3N1ZSA9IGlzc3VlICAvLyBUaGlzIHdoYXQgSSB3YXMgbG9va2luZyBmb3IgOi0pLiBBcyBzaW1wbGUgYXMgaXQgaXMsIGJ1dCBJIGRpZG4ndCBrbm93IHRoYXQuCgpJc3N1ZVR5cGUgdGFyZ2V0SXNzdWVUeXBlID0gbnVsbApkZWYgaXNzdWVUeXBlCgpsb2cuZGVidWcgIklzc3VlVHlwZSBvbGQgPSAiICsgaXNzdWUuaXNzdWVUeXBlLm5hbWUKCmRlZiBjb2xsZWN0aW9uID0gY29uc3RhbnRzTWFuYWdlci5nZXRBbGxJc3N1ZVR5cGVPYmplY3RzKCkKZGVmIGl0ZXJhdG9yID0gY29sbGVjdGlvbi5pdGVyYXRvcigpCndoaWxlKGl0ZXJhdG9yLmhhc05leHQoKSl7Cglpc3N1ZVR5cGUgPSBpdGVyYXRvci5uZXh0KCkKCWlmKGlzc3VlVHlwZS5uYW1lID09IHByb3BlcnRpZXNbJ2l0Lm5ld0luc3RhbGxhdGlvbiddLnRvU3RyaW5nKCkpewoJCXRhcmdldElzc3VlVHlwZSA9IGlzc3VlVHlwZQoJfQp9Cgpsb2cuZGVidWcgdGFyZ2V0SXNzdWVUeXBlLm5hbWUKaXNzdWUuc2V0SXNzdWVUeXBlT2JqZWN0KHRhcmdldElzc3VlVHlwZSkKbG9nLmRlYnVnICJJc3N1ZVR5cGUgbmV3ID0gIiArIGlzc3VlLmlzc3VlVHlwZS5uYW1l</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="fieldValue">New Installation</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="append.value"></arg>
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">New Installation Ticket</arg>
                  <arg name="field.name">summary</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="append.value"></arg>
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">New Installation Ticket</arg>
                  <arg name="field.name">customfield_22716</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="41" name="Converti in Manutenzione Riparativa">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_NOTES">YCFgQ2hhbmdlIHRvIE1haW50ZW5hbmNlIGlmIGlzc3VlIHR5cGUgPSBOZXcgSW5zdGFsbGF0aW9u</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ05ldyBJbnN0YWxsYXRpb24nfHx8</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="1">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">bee29a4ffd9e55a6f278af205f741799fc63bbef</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IENoYW5nZSBpc3N1ZSB0eXBlIGZyb20gTmV3IEluc3RhbGxhdGlvbiB0byBNYWludGVuYW5jZQ==</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3JcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUudXRpbC5EZWZhdWx0SXNzdWVDaGFuZ2VIb2xkZXJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuaXNzdWV0eXBlLklzc3VlVHlwZVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuXG4vKiBEZWZpbmUgYSBMb2dnZXIgKi9cbmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKVxuXG5kZWYgY29uc3RhbnRzTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldENvbnN0YW50c01hbmFnZXIoKVxuXG5Jc3N1ZVR5cGUgdGFyZ2V0SXNzdWVUeXBlID0gbnVsbFxuZGVmIGlzc3VlVHlwZVxuXG5sb2cuZGVidWcgXCJJc3N1ZVR5cGUgb2xkID0gXCIgKyBpc3N1ZS5pc3N1ZVR5cGUubmFtZVxubG9nLmRlYnVnIHByb3BlcnRpZXNbJ2l0Lm1haW50ZW5hbmNlJ10udG9TdHJpbmcoKVxuZGVmIGNvbGxlY3Rpb24gPSBjb25zdGFudHNNYW5hZ2VyLmdldEFsbElzc3VlVHlwZU9iamVjdHMoKVxuZGVmIGl0ZXJhdG9yID0gY29sbGVjdGlvbi5pdGVyYXRvcigpXG53aGlsZShpdGVyYXRvci5oYXNOZXh0KCkpe1xuXHRpc3N1ZVR5cGUgPSBpdGVyYXRvci5uZXh0KClcblx0aWYoaXNzdWVUeXBlLm5hbWUgPT0gKHByb3BlcnRpZXNbJ2l0Lm1haW50ZW5hbmNlJ10gPyBwcm9wZXJ0aWVzWydpdC5tYWludGVuYW5jZSddLnRvU3RyaW5nKCkgOiBcIk1haW50ZW5hbmNlIFRpY2tldFwiKSl7XG5cdFx0dGFyZ2V0SXNzdWVUeXBlID0gaXNzdWVUeXBlXG5cdH1cbn1cblxubG9nLmRlYnVnIHRhcmdldElzc3VlVHlwZS5uYW1lXG5pc3N1ZS5zZXRJc3N1ZVR5cGVPYmplY3QodGFyZ2V0SXNzdWVUeXBlKVxubG9nLmRlYnVnIFwiSXNzdWVUeXBlIG5ldyA9IFwiICsgaXNzdWUuaXNzdWVUeXBlLm5hbWUiLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3IKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZQppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnV0aWwuRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuaXNzdWV0eXBlLklzc3VlVHlwZQppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lcgppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGwKClByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKCkKRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJykKcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHsKCXByb3BlcnRpZXMubG9hZChpdCkKfQoKLyogRGVmaW5lIGEgTG9nZ2VyICovCmRlZiBDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQpsb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRykKCmRlZiBjb25zdGFudHNNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q29uc3RhbnRzTWFuYWdlcigpCgpJc3N1ZSBpc3N1ZSA9IGlzc3VlICAvLyBUaGlzIHdoYXQgSSB3YXMgbG9va2luZyBmb3IgOi0pLiBBcyBzaW1wbGUgYXMgaXQgaXMsIGJ1dCBJIGRpZG4ndCBrbm93IHRoYXQuCgpJc3N1ZVR5cGUgdGFyZ2V0SXNzdWVUeXBlID0gbnVsbApkZWYgaXNzdWVUeXBlCgpsb2cuZGVidWcgIklzc3VlVHlwZSBvbGQgPSAiICsgaXNzdWUuaXNzdWVUeXBlLm5hbWUKbG9nLmRlYnVnIHByb3BlcnRpZXNbJ2l0Lm1haW50ZW5hbmNlJ10udG9TdHJpbmcoKQpkZWYgY29sbGVjdGlvbiA9IGNvbnN0YW50c01hbmFnZXIuZ2V0QWxsSXNzdWVUeXBlT2JqZWN0cygpCmRlZiBpdGVyYXRvciA9IGNvbGxlY3Rpb24uaXRlcmF0b3IoKQp3aGlsZShpdGVyYXRvci5oYXNOZXh0KCkpewoJaXNzdWVUeXBlID0gaXRlcmF0b3IubmV4dCgpCglpZihpc3N1ZVR5cGUubmFtZSA9PSAocHJvcGVydGllc1snaXQubWFpbnRlbmFuY2UnXSA/IHByb3BlcnRpZXNbJ2l0Lm1haW50ZW5hbmNlJ10udG9TdHJpbmcoKSA6ICJNYWludGVuYW5jZSBUaWNrZXQiKSl7CgkJdGFyZ2V0SXNzdWVUeXBlID0gaXNzdWVUeXBlCgl9Cn0KCmxvZy5kZWJ1ZyB0YXJnZXRJc3N1ZVR5cGUubmFtZQppc3N1ZS5zZXRJc3N1ZVR5cGVPYmplY3QodGFyZ2V0SXNzdWVUeXBlKQpsb2cuZGVidWcgIklzc3VlVHlwZSBuZXcgPSAiICsgaXNzdWUuaXNzdWVUeXBlLm5hbWU=</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="fieldValue">Maintenance Ticket</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="append.value"></arg>
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">Maintenance Ticket</arg>
                  <arg name="field.name">customfield_22716</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="append.value"></arg>
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">Maintenance Ticket</arg>
                  <arg name="field.name">summary</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="61" name="Chiusura Massiva FAAC Service">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <results>
            <unconditional-result old-status="null" status="null" step="7">
              <post-functions>
                <function type="class">
                  <arg name="field.name">resolution</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
                  <arg name="field.value">6</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="401" name="Clona Tkt" view="fieldscreen">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">20401</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">c659704c-9678-4844-9a05-6f3497e391e7</arg>
                <arg name="FIELD_NOTES">YCFgRW5hYmxlZCBvbmx5IGZvciBSZXBhaXIgYW5kIE5ldyBJbnN0YWxsYXRpb24=</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnTWFpbnRlbmFuY2UgVGlja2V0JyB8fCAoaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ05ldyBJbnN0YWxsYXRpb24nICYmIGNmVmFsdWVzWydPUF9BU1NFVCddICE9IG51bGwpIiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="1">
              <post-functions>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="fieldValue">New Installation</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="targetIssueTypeDefinedByCfSelection"></arg>
                  <arg name="issueTypeId">12301</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">SAME</arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="transitionAttachmentsOperation">copy</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="targetProjectSelectedCustomField"></arg>
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="subFunctions">[{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_21909&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21909&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22600&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22600&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22822&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22822&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22601&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22601&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22603&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22603&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22663&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22663&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22634&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22634&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22651&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22651&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22700&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22700&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22606&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22606&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22629&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22629&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22652&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22652&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;description&quot;,&quot;destinationFieldId&quot;:&quot;description&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22627&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22627&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22620&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22620&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22668&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22668&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23602&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23203&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22814&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22814&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23237&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23237&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;issuekey&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23243&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;YES&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23238&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22702&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22702&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22703&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22703&quot;}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="fieldValue">Maintenance Ticket</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="targetIssueTypeDefinedByCfSelection"></arg>
                  <arg name="issueTypeId">13001</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">SAME</arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="transitionAttachmentsOperation">copy</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="targetProjectSelectedCustomField"></arg>
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="subFunctions">[{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_21909&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21909&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22600&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22600&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22822&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22822&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22601&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22601&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22603&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22603&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22663&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22663&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22634&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22634&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22651&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22651&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22700&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22700&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22606&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22606&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22629&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22629&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22652&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22652&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;description&quot;,&quot;destinationFieldId&quot;:&quot;description&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22627&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22627&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22620&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22620&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22668&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22668&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23602&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23203&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22814&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22814&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23237&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23237&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;issuekey&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23243&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;YES&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23238&quot;}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23602</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="521" name="Assegna Impianto" view="fieldscreen">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">20116</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">a5619fcc-6244-4bc5-929e-51021b061c98</arg>
                <arg name="FIELD_NOTES">YCFgRW5hYmxlZCBvbmx5IGZvciBuZXcgaW5zdCB0aWNrZXRzIGluIG9yZGVyIHRvIGFzc2lnbiBBU1NFVCBhbmQgZ2VuZXJhdGUgKG9yIHJlLWdlbmVyYXRlKSBEb2Nz</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiIoaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ05ldyBJbnN0YWxsYXRpb24nIHx8IGlzc3VlLmlzc3VlVHlwZS5uYW1lID09ICdNYWludGVuYW5jZSBUaWNrZXQnKSAmJiBjZlZhbHVlc1snT1BfU0FQX1NFUlZJQ0VfTk9USUZJQ0FUSU9OJ10gPT0gbnVsbCAmJiBjZlZhbHVlc1snT1BfQ0xPTkVEX1RLVCddPy52YWx1ZSA9PSAnWUVTJyIsInNjcmlwdFBhdGgiOm51bGx9</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">834be206-cd12-463a-ac63-b04b36eee40d</arg>
              <arg name="FIELD_NOTES">YCFgR2VuZXJhdGUgU04gb24gY2xvbmVkIHRrdA==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuXG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUubGluay5Jc3N1ZUxpbmtcblxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpO1xuQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpO1xuZGVmIFNOID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShcIk9QX1NBUF9TRVJWSUNFX05PVElGSUNBVElPTlwiKVswXVxuZGVmIHJlcXVlc3RNZXRob2RcbmRlZiBiYXNlVVJMXG5cblVSTCB1cmxcbkh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb25cblxuaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShTTikgPT0gbnVsbCAmJiBpc3N1ZS5pc3N1ZVR5cGUubmFtZSAhPSBcIlBsYW5uZWQgTWFpbnRlbmFuY2UgVGlja2V0XCIpe1xuICAgIHJlcXVlc3RNZXRob2QgPSBcIlBPU1RcIjtcblxuICAgIGRlZiBib2R5X3JlcSA9IFtdXG4gICAgYm9keV9yZXEgPSBbXG4gICAgICAgIFwiaXNzdWVLZXlcIjogaXNzdWUua2V5LFxuICAgICAgICBcInN0YXR1c1wiOiBcIk9QRVwiXG4gICAgXSBcblxuICAgIGJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9qaXJhL0FBL2FmdGVyL3NhbGVzL2NyZWF0ZS9zZXJ2aWNlL25vdGlmaWNhdGlvblwiXG5cbiAgICBsb2cuZGVidWcgXCJiYXNlVVJMIFNOOiBcIiArIGJhc2VVUkxcbiAgICBsb2cuZGVidWcgXCJib2R5X3JlcSBTTjogXCIgKyBib2R5X3JlcVxuICAgIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcbiAgICBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdE1ldGhvZChyZXF1ZXN0TWV0aG9kKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbiAgICBjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbiAgICBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtLndpdGhXcml0ZXIoXCJVVEYtOFwiKSB7IG5ldyBTdHJlYW1pbmdKc29uQnVpbGRlcihpdCwgYm9keV9yZXEpIH1cbiAgICBsb2cuZGVidWcgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW1cbiAgICBjb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuICAgIGRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5cbiAgICBpZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDFcIikpe1xuICAgICAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuICAgICAgICBcbiAgICAgICAgZGVmIG91dHB1dE1zZyA9ICgoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dFxuICAgICAgICBsb2cuZGVidWcgXCIoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHQ6IFwiICsgb3V0cHV0TXNnXG5cbiAgICAgICAgZGVmIGpzb25TbHVycGVyID0gbmV3IEpzb25TbHVycGVyKClcbiAgICAgICAgZGVmIGpzb25fb2JqZWN0ID0ganNvblNsdXJwZXIucGFyc2VUZXh0KG91dHB1dE1zZylcbiAgICAgICAgYXNzZXJ0IGpzb25fb2JqZWN0IGluc3RhbmNlb2YgTWFwICBcbiAgICAgICAgbG9nLmRlYnVnIFwibWVzc2FnZTogXCIgKyAganNvbl9vYmplY3QubWVzc2FnZVxuICAgICAgICBsb2cuZGVidWcgXCJlcnJvcnM6IFwiICsgIGpzb25fb2JqZWN0LmVycm9ycy50b1N0cmluZygpXG5cbiAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiRVwiKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJPUC1TQVAtU04tVVBEQVRFXCIpXG4gICAgICAgIGVycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArIFwiIFwiICsganNvbl9vYmplY3QuZXJyb3JzWzBdKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKVxuICAgICAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpXG5cbiAgICAgICAgb3V0cHV0LmFkZChlTGlzdClcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgfVxufVxuICIsInNjcmlwdFBhdGgiOm51bGx9</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">7c1b64f1-5b3a-452d-974f-03139ccb89ff</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IERvYyBUZW1wbGF0ZSBnZW5lcmF0aW9uIC0gc2UgTmV3IEluc3RhbGxhdGlvbiBPUiBGaXJzdCBUaWNrZXQgPSB0cnVl</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5Xb3JrZmxvd0V4Y2VwdGlvbjtcbmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvblxuaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyO1xuaW1wb3J0IGdyb292eS5qc29uLlN0cmVhbWluZ0pzb25CdWlsZGVyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5DdXN0b21GaWVsZE1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3I7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5NdXRhYmxlSXNzdWVcbmltcG9ydCBvcmcuYXBhY2hlLmNvbW1vbnMuY29kZWMuYmluYXJ5LkJhc2U2NDtcbmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5XG5pbXBvcnQgZ3Jvb3Z5eC5uZXQuaHR0cC5IVFRQQnVpbGRlclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcblxuZGVmIHJlcXVlc3RNZXRob2RcbmRlZiBiYXNlVVJMXG5cbmRlZiBmaXJzdFRpY2tldCA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YuZmlyc3RUa3QnXS50b1N0cmluZygpKVswXVxuXG5sb2cuZGVidWcgaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZVxubG9nLmRlYnVnIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoZmlyc3RUaWNrZXQpXG5cblxuLyogUkVTVCBBUEkgcGVyIEludmlvIE5vdGlmaWNhIEVtYWlsIE9OU0lURV9SRVBPUlQgKi9cbnJlcXVlc3RNZXRob2QgPSBcIkdFVFwiO1xuXG5pZihpc3N1ZS5nZXRJc3N1ZVR5cGUoKS5uYW1lLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2l0Lm5ld0luc3RhbGxhdGlvbiddKSB8fCBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGZpcnN0VGlja2V0KSE9bnVsbCl7XG4gICAgZGVmIGZpcnN0X3RpY2tldD1mYWxzZVxuICAgIGRlZiB0ZW1wbGF0ZT1cIlwiXG4gICAgaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShmaXJzdFRpY2tldCkhPW51bGwpe1xuICAgICAgICBmaXJzdF90aWNrZXQ9dHJ1ZVxuICAgICAgICB0ZW1wbGF0ZT1cIkZJUlNUX1RJQ0tFVCU3Q01BTlVGQUNUVVJFUlwiXG4gICAgfWVsc2V7XG4gICAgICAgIHRlbXBsYXRlPVwiTkVXX0lOU1RBTExBVElPTl9DUkVBVEVfVEtUJTdDTUFOVUZBQ1RVUkVSXCJcbiAgICB9XG4gICAgXG4gICAgaWYoaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpdC5uZXdJbnN0YWxsYXRpb24nXSkpe1xuICAgICAgICBiYXNlVVJMID0gXCJodHRwOi8vXCIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArIFwiL29wL3Jlc3QvYXV0b21hdGlvbi9kb2N1bWVudC9nZW5lcmF0aW9uL2NoZWNrP0lTU1VFX0tFWT1cIisgaXNzdWUua2V5ICtcIiZET0NfQ0FURUdPUlk9XCIgKyB0ZW1wbGF0ZSArIFwiJkVOQUJMRURfRk9SX0ZJUlNUX1RJQ0tFVD1cIitmaXJzdF90aWNrZXQrXCImSU1QT1JUX0ZST009XCJcbiAgICB9ZWxzZXtcbiAgICAgICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2F1dG9tYXRpb24vZG9jdW1lbnQvZ2VuZXJhdGlvbi9jaGVjaz9JU1NVRV9LRVk9XCIrIGlzc3VlLmtleSArXCImRE9DX0NBVEVHT1JZPVwiICsgdGVtcGxhdGUgKyBcIiZFTkFCTEVEX0ZPUl9GSVJTVF9USUNLRVQ9XCIrZmlyc3RfdGlja2V0K1wiJklNUE9SVF9GUk9NPU9QX0FTU0VUXCJcbiAgICB9XG4gICAgXG4gICAgbG9nLmRlYnVnIGJhc2VVUkxcbiAgICBVUkwgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgIEh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbiAgICBjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbiAgICBjb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuICAgIGRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5cdGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICBcbiAgICBpZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDBcIikpe1xuICAgICAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuICAgICAgICBsb2cuZGVidWcgXCJFcnJvclN0cmVhbTogXCIgKyBjb25uZWN0aW9uLmdldEVycm9yU3RyZWFtKCkudG9TdHJpbmcoKVxuICAgICAgICBsb2cuZGVidWcgXCJnZXRIZWFkZXJGaWVsZHMoKTogXCIgKyBjb25uZWN0aW9uLmdldEhlYWRlckZpZWxkcygpXG4gICAgICAgIGRlZiBvdXRwdXRNc2cgPSAoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHRcbiAgICAgICAgbG9nLmRlYnVnIFwiKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0OiBcIiArIG91dHB1dE1zZ1xuXG4gICAgICAgIGRlZiBqc29uU2x1cnBlciA9IG5ldyBKc29uU2x1cnBlcigpXG4gICAgICAgIGRlZiBqc29uX29iamVjdCA9IGpzb25TbHVycGVyLnBhcnNlVGV4dChvdXRwdXRNc2cpXG4gICAgICAgIGFzc2VydCBqc29uX29iamVjdCBpbnN0YW5jZW9mIE1hcCAgXG4gICAgICAgIGxvZy5kZWJ1ZyBcIm1lc3NhZ2U6IFwiICsgIGpzb25fb2JqZWN0Lm1lc3NhZ2VcblxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIk9QLURPQ1NcIilcbiAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5tZXNzYWdlKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKVxuICAgICAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpXG5cbiAgICAgICAgb3V0cHV0LmFkZChlTGlzdClcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgfVxufVxuIiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="1">
              <post-functions>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="531" name="Modifica Impianto" view="fieldscreen">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">20116</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">97dca225-7941-4128-9606-720aac90ae3d</arg>
                <arg name="FIELD_NOTES">YCFgRW5hYmxlZCBvbmx5IGZvciBuZXcgaW5zdCB0aWNrZXRzIGluIG9yZGVyIHRvIGFzc2lnbiBBU1NFVCBhbmQgZ2VuZXJhdGUgKG9yIHJlLWdlbmVyYXRlKSBEb2Nz</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiIoaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ05ldyBJbnN0YWxsYXRpb24nIHx8IChpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnTWFpbnRlbmFuY2UgVGlja2V0JyAmJiBjZlZhbHVlc1snT1BfRklSU1RfVElDS0VUJ10gPT0gXCJGaXJzdCBUaWNrZXRcIikpICYmIGNmVmFsdWVzWydPUF9BU1NFVCddICE9IG51bGwiLCJzY3JpcHRQYXRoIjpudWxsfQ==</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">14aa8006-ff99-4e5c-9191-91eeb349be66</arg>
              <arg name="FIELD_NOTES">YCFgRGVsZXRlIHByZXZpb3VzIGF0dGFjaG1lbnRzIHJlbGF0ZWQgdG8gTkVXIEluc3RhbGxhdGlvbiBUS1QgR2VuZXJhdGlvbg==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmluZGV4Lklzc3VlSW5kZXhpbmdTZXJ2aWNlXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5NdXRhYmxlSXNzdWVcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuZXZlbnQudHlwZS5FdmVudERpc3BhdGNoT3B0aW9uXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnV0aWwuRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk1vZGlmaWVkVmFsdWVcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuaW5kZXguSXNzdWVJbmRleGluZ1NlcnZpY2VcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyXG5pbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGxcblxuUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKVxuRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJylcbnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7XG5cdHByb3BlcnRpZXMubG9hZChpdClcbn1cbmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKVxuXG5Jc3N1ZU1hbmFnZXIgaXNzdWVNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKCk7XG5DdXN0b21GaWVsZE1hbmFnZXIgY3VzdG9tRmllbGRNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCk7XG5cbklzc3VlSW5kZXhpbmdTZXJ2aWNlIFx0aXNzdWVJbmRleGluZ1NlcnZpY2UgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDb21wb25lbnQoSXNzdWVJbmRleGluZ1NlcnZpY2UpXG5kZWYgYXV0b21hdGljYWxseUNsb3NlZCA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YuYXV0b21hdGljYWxseUNsb3NlZCddLnRvU3RyaW5nKCkpWzBdXG5cbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxuXG4vKlNjcmlwdCBWYXJpYWJsZXMqL1xuLy9QZXIgdGVzdCBkYSBjb25zb2xlXG4vL0lzc3VlIGlzc3VlID0gaXNzdWVNYW5hZ2VyLmdldElzc3VlQnlLZXlJZ25vcmVDYXNlKFwiT1BVVC0xNDA2MlwiKVxuXG5pbnQgT1BBQSA9IHByb3BlcnRpZXNbJ2lzY2hlbWEuYWEuaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5pbnQgREJPID0gcHJvcGVydGllc1snaXNjaGVtYS5kYm8uaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5cbi8qUmltb3ppb25lIGFsbGVnYXRvIHJhcHBvcnRvIGRpIGludGVydmVudG8gYXBwZW5hIGNyZWF0byovXG4vKiBHZXQgSW5zaWdodCBJUUwgRmFjYWRlIGZyb20gcGx1Z2luIGFjY2Vzc29yICovXG5DbGFzcyBpcWxGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5JUUxGYWNhZGVcIik7IFxuZGVmIGlxbEZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShpcWxGYWNhZGVDbGFzcyk7XG5cbi8qIEdldCBJbnNpZ2h0IE9iamVjdCBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdEZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdEZhY2FkZVwiKTtcbmRlZiBvYmplY3RGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0RmFjYWRlQ2xhc3MpO1xuXG4vKiBHZXQgSW5zaWdodCBPYmplY3QgVHlwZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdFR5cGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlRmFjYWRlXCIpO1xuZGVmIG9iamVjdFR5cGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUZhY2FkZUNsYXNzKTtcblxuLyogR2V0IEluc2lnaHQgT2JqZWN0IEF0dHJpYnV0ZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlXCIpO1xuZGVmIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZUNsYXNzKTtcblxuQ2xhc3Mgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LnNlcnZpY2VzLm1vZGVsLmZhY3RvcnkuT2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlcIik7XG5kZWYgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnkgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyk7XG5cbi8qIFNwZWNpZnkgdGhlIHNjaGVtYSBpZCBhcyB3ZWxsIGFzIHRoZSBJUUwgdGhhdCB3aWxsIGZldGNoIG9iamVjdHMuIEluIHRoaXMgY2FzZSBhbGwgb2JqZWN0cyB3aXRoIE5hbWUgbWF0Y2hpbmcgdGhlIHZhbHVlQ0YsIGJlIHN1cmUgdG8gaW5jbHVkZSBcIiBhcm91bmQgdmFsdWUgKi9cbmRlZiBvYmplY3RzID0gaXFsRmFjYWRlLmZpbmRPYmplY3RzQnlJUUxBbmRTY2hlbWEoREJPLCBcIlxcXCJcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmNhdGVnb3J5UmVmJ10udG9TdHJpbmcoKSArIFwiXFxcIi5cXFwiXCIgKyBwcm9wZXJ0aWVzWydpb2JqLmF0dGFjaG1lbnRDYXRlZ29yeS5uZXdJbnN0VGt0J10udG9TdHJpbmcoKSArIFwiXFxcIiA9IHRydWUgQU5EIFwiICsgcHJvcGVydGllc1snaW9iai5hdHRhY2htZW50Q2F0ZWdvcnkuZGVsZXRlZCddLnRvU3RyaW5nKCkgKyBcIiE9dHJ1ZSBBTkQgb2JqZWN0IEhBVklORyBjb25uZWN0ZWRUaWNrZXRzKGtleSA9IFwiICsgaXNzdWUua2V5LnRvU3RyaW5nKCkgKyBcIilcIik7IC8vIFNlZSB0aGUgY29tcGxldGUgbGlzdCBvZiBwb3NzaWJsZSBJUUwgb24gdGhlIEluc2lnaHQgUXVlcnkgTGFuZ3VhZ2UgZG9jdW1lbnRhdGlvbiBwYWdlXG4vKiBJZiB0aGlzIGlzIGEgbWFuZGF0b3J5IGZpZWxkIHlvdSBzaG91bGQgYmUgYWJsZSB0byBkbyB0aGlzOiAqL1xubG9nLmRlYnVnIFwiSVFMOiBcIiArIFwiXFxcIlwiICsgcHJvcGVydGllc1snaW9iai5hdHRhY2htZW50Q2F0ZWdvcnkuY2F0ZWdvcnlSZWYnXS50b1N0cmluZygpICsgXCJcXFwiLlxcXCJcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5Lm5ld0luc3RUa3QnXS50b1N0cmluZygpICsgXCJcXFwiID0gdHJ1ZSBBTkQgXCIgKyBwcm9wZXJ0aWVzWydpb2JqLmF0dGFjaG1lbnRDYXRlZ29yeS5kZWxldGVkJ10udG9TdHJpbmcoKSArIFwiIT10cnVlIEFORCBvYmplY3QgSEFWSU5HIGNvbm5lY3RlZFRpY2tldHMoa2V5ID0gXCIgKyBpc3N1ZS5rZXkudG9TdHJpbmcoKSArIFwiKVwiXG5cbmZvcihpb2JqIGluIG9iamVjdHMpe1xuICAgIC8qIFVQREFURSBPSkJFQ1QgREVMRVRFRCBWQUxVRSAqL1xuICAgIGRlZiBvYmogPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEJlYW4oaW9iai5nZXRJZCgpKTtcbiAgICAgICAgXG4gICAgaW50IGF0dGFjaG1lbnREZWxldGVkID0gcHJvcGVydGllc1snaW9iai5hdHRhY2htZW50LmRlbGV0ZWQuaWQnXSA/IHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudC5kZWxldGVkLmlkJ10udG9TdHJpbmcoKS50b0ludGVnZXIoKSA6IDMyNjVcbiAgICBcbiAgICBhdHRyaWJUeXBlID0gb2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZS5sb2FkT2JqZWN0VHlwZUF0dHJpYnV0ZUJlYW4oYXR0YWNobWVudERlbGV0ZWQpOyBcblxuICAgIG5ld0F0dHJpYiA9IG9iai5jcmVhdGVPYmplY3RBdHRyaWJ1dGVCZWFuKGF0dHJpYlR5cGUpO1xuICAgIGRlZiBuZXdBdHRyaWJWYWx1ZSA9IG5ld0F0dHJpYi5jcmVhdGVPYmplY3RBdHRyaWJ1dGVWYWx1ZUJlYW4oKTtcblxuICAgIHRyeSB7XG4gICAgXHRuZXdBdHRyaWJWYWx1ZS5zZXRWYWx1ZShhdHRyaWJUeXBlLCB0cnVlKTtcbiAgICB9IGNhdGNoIChFeGNlcHRpb24gdmllKSB7XG4gICAgIFx0bG9nLndhcm4oXCJTRVRJTlNJR0hUVkFMVUU6IFVuYWJsZSB0byBzZXQgYXR0cmlidXRlIFwiICsgYXR0cmliVHlwZSArIFwiIHRvIFwiICsgdG90YWxBbW91bnRTdXBwICsgXCIuIEV4aXRpbmcuXCIpO1xuICAgICBcdGxvZy53YXJuKFNFVElOU0lHSFRWQUxVRTogdmllLmdldE1lc3NhZ2UoKSk7XG4gICAgIFx0cmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBcbiAgICBkZWYgYXR0cmliVmFsdWVzID0gbmV3QXR0cmliLmdldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnMoKTtcbiAgICBhdHRyaWJWYWx1ZXMuYWRkKG5ld0F0dHJpYlZhbHVlKTtcbiAgICBuZXdBdHRyaWIuc2V0T2JqZWN0QXR0cmlidXRlVmFsdWVCZWFucyhhdHRyaWJWYWx1ZXMpO1xuICAgICBcbiAgICB0cnkge1xuICAgIFx0bmV3QXR0cmliID0gb2JqZWN0RmFjYWRlLnN0b3JlT2JqZWN0QXR0cmlidXRlQmVhbihuZXdBdHRyaWIpO1xuICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiB2aWUpIHtcbiAgICBcdGxvZy53YXJuKFwiU0VUSU5TSUdIVFZBTFVFOiBVbmFibGUgdG8gc2F2ZSBjaGFuZ2VzLiBFeGl0aW5nLlwiKTtcbiAgICAgXHRsb2cud2FybihTRVRJTlNJR0hUVkFMVUU6IHZpZS5nZXRNZXNzYWdlKCkpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbG9nLmluZm8oXCJTRVRJTlNJR0hUVkFMVUU6IFN1Y2Nlc3NmdWxseSBzYXZlZCB2YWx1ZVwiKTtcbn0iLCJzY3JpcHRQYXRoIjpudWxsfQ==</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">a34dae8c-1a80-462f-8514-e46dbce5000f</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IERvYyBUZW1wbGF0ZSBnZW5lcmF0aW9uIC0gc2UgTmV3IEluc3RhbGxhdGlvbiBPUiBGaXJzdCBUaWNrZXQgPSB0cnVl</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5Xb3JrZmxvd0V4Y2VwdGlvbjtcbmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvblxuaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyO1xuaW1wb3J0IGdyb292eS5qc29uLlN0cmVhbWluZ0pzb25CdWlsZGVyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5DdXN0b21GaWVsZE1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3I7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5NdXRhYmxlSXNzdWVcbmltcG9ydCBvcmcuYXBhY2hlLmNvbW1vbnMuY29kZWMuYmluYXJ5LkJhc2U2NDtcbmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5XG5pbXBvcnQgZ3Jvb3Z5eC5uZXQuaHR0cC5IVFRQQnVpbGRlclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcblxuZGVmIHJlcXVlc3RNZXRob2RcbmRlZiBiYXNlVVJMXG5cbmRlZiBmaXJzdFRpY2tldCA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YuZmlyc3RUa3QnXS50b1N0cmluZygpKVswXVxuXG5sb2cuZGVidWcgaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZVxubG9nLmRlYnVnIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoZmlyc3RUaWNrZXQpXG5cblxuLyogUkVTVCBBUEkgcGVyIEludmlvIE5vdGlmaWNhIEVtYWlsIE9OU0lURV9SRVBPUlQgKi9cbnJlcXVlc3RNZXRob2QgPSBcIkdFVFwiO1xuXG5pZihpc3N1ZS5nZXRJc3N1ZVR5cGUoKS5uYW1lLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2l0Lm5ld0luc3RhbGxhdGlvbiddKSB8fCBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGZpcnN0VGlja2V0KSE9bnVsbCl7XG4gICAgZGVmIGZpcnN0X3RpY2tldD1mYWxzZVxuICAgIGRlZiB0ZW1wbGF0ZT1cIlwiXG4gICAgaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShmaXJzdFRpY2tldCkhPW51bGwpe1xuICAgICAgICBmaXJzdF90aWNrZXQ9dHJ1ZVxuICAgICAgICB0ZW1wbGF0ZT1cIkZJUlNUX1RJQ0tFVCU3Q01BTlVGQUNUVVJFUlwiXG4gICAgfWVsc2V7XG4gICAgICAgIHRlbXBsYXRlPVwiTkVXX0lOU1RBTExBVElPTl9DUkVBVEVfVEtUJTdDTUFOVUZBQ1RVUkVSXCJcbiAgICB9XG4gICAgXG4gICAgaWYoaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpdC5uZXdJbnN0YWxsYXRpb24nXSkpe1xuICAgICAgICBiYXNlVVJMID0gXCJodHRwOi8vXCIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArIFwiL29wL3Jlc3QvYXV0b21hdGlvbi9kb2N1bWVudC9nZW5lcmF0aW9uL2NoZWNrP0lTU1VFX0tFWT1cIisgaXNzdWUua2V5ICtcIiZET0NfQ0FURUdPUlk9XCIgKyB0ZW1wbGF0ZSArIFwiJkVOQUJMRURfRk9SX0ZJUlNUX1RJQ0tFVD1cIitmaXJzdF90aWNrZXQrXCImSU1QT1JUX0ZST009XCJcbiAgICB9ZWxzZXtcbiAgICAgICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2F1dG9tYXRpb24vZG9jdW1lbnQvZ2VuZXJhdGlvbi9jaGVjaz9JU1NVRV9LRVk9XCIrIGlzc3VlLmtleSArXCImRE9DX0NBVEVHT1JZPVwiICsgdGVtcGxhdGUgKyBcIiZFTkFCTEVEX0ZPUl9GSVJTVF9USUNLRVQ9XCIrZmlyc3RfdGlja2V0K1wiJklNUE9SVF9GUk9NPU9QX0FTU0VUXCJcbiAgICB9XG4gICAgXG4gICAgbG9nLmRlYnVnIGJhc2VVUkxcbiAgICBVUkwgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgIEh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbiAgICBjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbiAgICBjb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuICAgIGRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5cdGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICBcbiAgICBpZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDBcIikpe1xuICAgICAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuICAgICAgICBsb2cuZGVidWcgXCJFcnJvclN0cmVhbTogXCIgKyBjb25uZWN0aW9uLmdldEVycm9yU3RyZWFtKCkudG9TdHJpbmcoKVxuICAgICAgICBsb2cuZGVidWcgXCJnZXRIZWFkZXJGaWVsZHMoKTogXCIgKyBjb25uZWN0aW9uLmdldEhlYWRlckZpZWxkcygpXG4gICAgICAgIGRlZiBvdXRwdXRNc2cgPSAoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHRcbiAgICAgICAgbG9nLmRlYnVnIFwiKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0OiBcIiArIG91dHB1dE1zZ1xuXG4gICAgICAgIGRlZiBqc29uU2x1cnBlciA9IG5ldyBKc29uU2x1cnBlcigpXG4gICAgICAgIGRlZiBqc29uX29iamVjdCA9IGpzb25TbHVycGVyLnBhcnNlVGV4dChvdXRwdXRNc2cpXG4gICAgICAgIGFzc2VydCBqc29uX29iamVjdCBpbnN0YW5jZW9mIE1hcCAgXG4gICAgICAgIGxvZy5kZWJ1ZyBcIm1lc3NhZ2U6IFwiICsgIGpzb25fb2JqZWN0Lm1lc3NhZ2VcblxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIk9QLURPQ1NcIilcbiAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5tZXNzYWdlKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKVxuICAgICAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpXG5cbiAgICAgICAgb3V0cHV0LmFkZChlTGlzdClcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgfVxufVxuIiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="Not Done" status="Done" step="1">
              <post-functions>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="381" name="Modifica Pianificazione" view="fieldscreen">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">20113</meta>
          <results>
            <unconditional-result old-status="null" status="null" step="1">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="551" name="Modifica fornitore" view="fieldscreen">
          <meta name="opsbar-sequence">50</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">20112</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">a9655845-bd3d-4171-ab08-fdb0c420b5d2</arg>
                <arg name="FIELD_NOTES">YCFgT1BfQVNTRVQgc2hvdWxkIGJlIGV2YWx1YXRlZCAmJiBJc3N1ZSB0eXBlIHNob3VsZCBiZSBOZXcgSW5zdGFsbGF0aW9uIG9yIE1haW50ZW5hbmNlICsgRmlyc3QgVGlja2V0</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiIoaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ05ldyBJbnN0YWxsYXRpb24nIHx8IChpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnTWFpbnRlbmFuY2UgVGlja2V0JyAmJiBjZlZhbHVlc1snT1BfRklSU1RfVElDS0VUJ10gPT0gXCJGaXJzdCBUaWNrZXRcIikpICYmIGNmVmFsdWVzWydPUF9BU1NFVCddICE9IG51bGwgfHwgaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ1BsYW5uZWQgTWFpbnRlbmFuY2UgVGlja2V0JyIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">61d0d786-0ab0-42de-98be-80dcfd67b97e</arg>
              <arg name="FIELD_NOTES">YCFgRGVsZXRlIHByZXZpb3VzIGF0dGFjaG1lbnRzIHJlbGF0ZWQgdG8gTkVXIEluc3RhbGxhdGlvbiBUS1QgR2VuZXJhdGlvbg==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">44a3bd0b-1fc7-4868-b7f5-915d55f83c97</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IERvYyBUZW1wbGF0ZSBnZW5lcmF0aW9uIC0gc2UgTmV3IEluc3RhbGxhdGlvbiBPUiBGaXJzdCBUaWNrZXQgPSB0cnVl</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5Xb3JrZmxvd0V4Y2VwdGlvbjtcbmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvblxuaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyO1xuaW1wb3J0IGdyb292eS5qc29uLlN0cmVhbWluZ0pzb25CdWlsZGVyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5DdXN0b21GaWVsZE1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3I7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5NdXRhYmxlSXNzdWVcbmltcG9ydCBvcmcuYXBhY2hlLmNvbW1vbnMuY29kZWMuYmluYXJ5LkJhc2U2NDtcbmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5XG5pbXBvcnQgZ3Jvb3Z5eC5uZXQuaHR0cC5IVFRQQnVpbGRlclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcblxuZGVmIHJlcXVlc3RNZXRob2RcbmRlZiBiYXNlVVJMXG5cbmRlZiBmaXJzdFRpY2tldCA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YuZmlyc3RUa3QnXS50b1N0cmluZygpKVswXVxuXG5sb2cuZGVidWcgaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZVxubG9nLmRlYnVnIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoZmlyc3RUaWNrZXQpXG5cbmlmKGlzc3VlLmlzc3VlVHlwZS5uYW1lICE9IFwiUGxhbm5lZCBNYWludGVuYW5jZSBUaWNrZXRcIil7XG4gICAgLyogUkVTVCBBUEkgcGVyIEludmlvIE5vdGlmaWNhIEVtYWlsIE9OU0lURV9SRVBPUlQgKi9cbiAgICByZXF1ZXN0TWV0aG9kID0gXCJHRVRcIjtcbiAgICBkZWYgcmVzY2hlZHVsaW5nID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi5yZXNjaGVkdWxpbmcnXSA/IHByb3BlcnRpZXNbJ2NmLnJlc2NoZWR1bGluZyddLnRvU3RyaW5nKCkgOiBcIk9QX0NIQU5HRV9TQ0hFRFVMSU5HXCIpWzBdXG4gICAgZGVmIHRyYW5zaXRpb25DaGVjayA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YuY2hlY2tBbmRDb25maXJtMiddLnRvU3RyaW5nKCkpWzBdXG5cblxuICAgIGRlZiBmaXJzdF90aWNrZXQ9ZmFsc2VcbiAgICBkZWYgdGVtcGxhdGU9XCJcIlxuICAgIGlmKGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoZmlyc3RUaWNrZXQpIT1udWxsKXtcbiAgICAgICAgZmlyc3RfdGlja2V0PXRydWVcbiAgICAgICAgdGVtcGxhdGU9XCJGSVJTVF9USUNLRVQlN0NNQU5VRkFDVFVSRVJcIlxuICAgIH1lbHNle1xuICAgICAgICB0ZW1wbGF0ZT1cIk5FV19JTlNUQUxMQVRJT05fQ1JFQVRFX1RLVCU3Q01BTlVGQUNUVVJFUlwiXG4gICAgfVxuXG4gICAgaWYoaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpdC5uZXdJbnN0YWxsYXRpb24nXSkpe1xuICAgICAgICBiYXNlVVJMID0gXCJodHRwOi8vXCIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArIFwiL29wL3Jlc3QvYXV0b21hdGlvbi9kb2N1bWVudC9nZW5lcmF0aW9uL2NoZWNrP0lTU1VFX0tFWT1cIisgaXNzdWUua2V5ICtcIiZET0NfQ0FURUdPUlk9XCIgKyB0ZW1wbGF0ZSArIFwiJkVOQUJMRURfRk9SX0ZJUlNUX1RJQ0tFVD1cIitmaXJzdF90aWNrZXQrXCImSU1QT1JUX0ZST009XCJcbiAgICB9ZWxzZXtcbiAgICAgICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2F1dG9tYXRpb24vZG9jdW1lbnQvZ2VuZXJhdGlvbi9jaGVjaz9JU1NVRV9LRVk9XCIrIGlzc3VlLmtleSArXCImRE9DX0NBVEVHT1JZPVwiICsgdGVtcGxhdGUgKyBcIiZFTkFCTEVEX0ZPUl9GSVJTVF9USUNLRVQ9XCIrZmlyc3RfdGlja2V0K1wiJklNUE9SVF9GUk9NPU9QX0FTU0VUXCJcbiAgICB9XG5cbiAgICBsb2cuZGVidWcgYmFzZVVSTFxuICAgIFVSTCB1cmwgPSBuZXcgVVJMKGJhc2VVUkwpXG4gICAgSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpO1xuXG4gICAgZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG5cbiAgICBpZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDBcIikpe1xuICAgICAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuICAgICAgICBsb2cuZGVidWcgXCJFcnJvclN0cmVhbTogXCIgKyBjb25uZWN0aW9uLmdldEVycm9yU3RyZWFtKCkudG9TdHJpbmcoKVxuICAgICAgICBsb2cuZGVidWcgXCJnZXRIZWFkZXJGaWVsZHMoKTogXCIgKyBjb25uZWN0aW9uLmdldEhlYWRlckZpZWxkcygpXG4gICAgICAgIGRlZiBvdXRwdXRNc2cgPSAoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHRcbiAgICAgICAgbG9nLmRlYnVnIFwiKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0OiBcIiArIG91dHB1dE1zZ1xuXG4gICAgICAgIGRlZiBqc29uU2x1cnBlciA9IG5ldyBKc29uU2x1cnBlcigpXG4gICAgICAgIGRlZiBqc29uX29iamVjdCA9IGpzb25TbHVycGVyLnBhcnNlVGV4dChvdXRwdXRNc2cpXG4gICAgICAgIGFzc2VydCBqc29uX29iamVjdCBpbnN0YW5jZW9mIE1hcCAgXG4gICAgICAgIGxvZy5kZWJ1ZyBcIm1lc3NhZ2U6IFwiICsgIGpzb25fb2JqZWN0Lm1lc3NhZ2VcblxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIk9QLURPQ1NcIilcbiAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5tZXNzYWdlKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKVxuICAgICAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpXG5cbiAgICAgICAgb3V0cHV0LmFkZChlTGlzdClcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgfVxufSIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="1">
              <post-functions>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="field.type">8</arg>
                  <arg name="full.module.key">com.riadalabs.jira.plugins.insightinsight-post-function</arg>
                  <arg name="field.groovyScript">import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.issue.fields.CustomField
import com.atlassian.jira.issue.MutableIssue;
import com.atlassian.jira.event.type.EventDispatchOption;

/* Get Insight Object Facade from plugin accessor */
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(&quot;com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade&quot;); 
def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);

/* Get Insight Object Type Facade from plugin accessor */
Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(&quot;com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade&quot;); 
def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);

/* Get Insight Object Attribute Facade from plugin accessor */
Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(&quot;com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade&quot;); 
def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);

/* Get Insight IQL Facade from plugin accessor */
Class iqlFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(&quot;com.riadalabs.jira.plugins.insight.channel.external.api.facade.IQLFacade&quot;); 
def iqlFacade = ComponentAccessor.getOSGiComponentInstanceOfType(iqlFacadeClass);

Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(&quot;com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory&quot;); 
def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);

/*Insight Schema IDs*/
def OPAA = &quot;OPAA-&quot;
def DO = &quot;DO-&quot;

def cfManager = ComponentAccessor.getCustomFieldManager()

if(issue.issueType.name == &quot;Planned Maintenance Ticket&quot;){
    def supplier = cfManager.getCustomFieldObjectsByName(&quot;OP_SUPPLIER&quot;)
    def asset = cfManager.getCustomFieldObjectsByName(&quot;OP_ASSET&quot;)[0]
    def site = cfManager.getCustomFieldObjectsByName(&quot;OP_SITE&quot;)[0]
    def customer = cfManager.getCustomFieldObjectsByName(&quot;OP_CUSTOMER&quot;)[0]
    def supplierInstallation = cfManager.getCustomFieldObject(&quot;22813&quot;.toLong())
    def supplierKey, supplierValue
    for (CustomField cf in supplier){
        if(issue.getCustomFieldValue(cf) != null){
            log.warn issue.getCustomFieldValue(cf).toString()

            supplierKey = issue.getCustomFieldValue(cf).toString().substring(issue.getCustomFieldValue(cf).toString().lastIndexOf('(')+1,issue.getCustomFieldValue(cf).toString().lastIndexOf(')'))
            def supplierObject = objectFacade.loadObjectBean(supplierKey)
            log.warn supplierObject.toString()
            supplierValue = objectFacade.loadObjectAttributeBean(supplierObject.getId(), &quot;Name&quot;).getObjectAttributeValueBeans()
            log.warn &quot;supplierValue: &quot; + supplierValue.toString()



        }
    }
    def currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()

    for (subtask in issue.getSubTaskObjects()){
        log.warn subtask.getCustomFieldValue(asset).toString()
        def assetKey = subtask.getCustomFieldValue(asset).toString().substring(subtask.getCustomFieldValue(asset).toString().lastIndexOf('(')+1,subtask.getCustomFieldValue(asset).toString().lastIndexOf(')'))
        def siteKey = subtask.getCustomFieldValue(site).toString().substring(subtask.getCustomFieldValue(site).toString().lastIndexOf('(')+1,subtask.getCustomFieldValue(site).toString().lastIndexOf(')'))
        def customerKey = subtask.getCustomFieldValue(customer).toString().substring(subtask.getCustomFieldValue(customer).toString().lastIndexOf('(')+1,subtask.getCustomFieldValue(customer).toString().lastIndexOf(')'))
        log.warn &quot;supplierKey: &quot; + supplierKey.toString()
        log.warn &quot;assetKey: &quot; + assetKey.toString()
        log.warn &quot;siteKey: &quot; + siteKey.toString()
        log.warn &quot;customerKey: &quot; + customerKey.toString()
        //verifico se esiste associazione con MAINTENANCE_ENABLED = &quot;PRIMARY SUPPLIER&quot; AND HARDWARE_REF = OP_ASSET
        def objects = iqlFacade.findObjectsByIQLAndSchema(28, &quot;objectType = \&quot;Supplier_Installation\&quot; AND DELETED!=true AND DISABLED!=true AND SELECTED=true AND \&quot;HARDWARE_REF\&quot; = &quot; + assetKey.toString() + &quot; AND \&quot;SUPPLIER_REF\&quot; = &quot; + supplierKey.toString() + &quot; AND \&quot;MAINTENANCE_ENABLED\&quot; = \&quot;PRIMARY SUPPLIER\&quot;&quot;);
        if (objects.size() &gt; 0){
            //compilo sul sub-task il corretto oggetto Supplier_Installation nel campo OP_SUPPLIER
            log.warn objects[0].toString()
            suppInstKey = objects[0].toString().substring(objects[0].toString().lastIndexOf('(')+1,objects[0].toString().lastIndexOf(')'))
            log.warn &quot;suppInstKey: &quot; + suppInstKey

            mi = (MutableIssue) subtask;
            mi.setCustomFieldValue(supplierInstallation, [objectFacade.loadObjectBean(suppInstKey)]);
            ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);

        }else{
            //verifico se esiste associazione con MAINTENANCE_ENABLED = &quot;PRIMARY SUPPLIER&quot; AND SITE_ALL = true
            objects = iqlFacade.findObjectsByIQLAndSchema(28, &quot;objectType = \&quot;Supplier_Installation\&quot; AND DELETED!=true AND DISABLED!=true AND SELECTED=true AND SITE_ALL=true AND \&quot;SITE_REF\&quot; = &quot; + siteKey.toString() + &quot; AND \&quot;SUPPLIER_REF\&quot; = &quot; + supplierKey.toString() + &quot; AND \&quot;MAINTENANCE_ENABLED\&quot; = \&quot;PRIMARY SUPPLIER\&quot;&quot;);
            if (objects.size() &gt; 0){
                //compilo sul sub-task il corretto oggetto Supplier_Installation nel campo OP_SUPPLIER
                log.warn objects[0].toString()
                suppInstKey = objects[0].toString().substring(objects[0].toString().lastIndexOf('(')+1,objects[0].toString().lastIndexOf(')'))
                log.warn &quot;suppInstKey: &quot; + suppInstKey

                mi = (MutableIssue) subtask;
                mi.setCustomFieldValue(supplierInstallation, [objectFacade.loadObjectBean(suppInstKey)]);
                ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);

            }else{
                //verifico se esiste associazione con MAINTENANCE_ENABLED = &quot;PRIMARY SUPPLIER&quot; AND CUSTOMER_ALL = true
                objects = iqlFacade.findObjectsByIQLAndSchema(28, &quot;objectType = \&quot;Supplier_Installation\&quot; AND DELETED!=true AND DISABLED!=true AND SELECTED=true AND CUSTOMER_ALL=true AND \&quot;CUSTOMER_REF\&quot; = &quot; + customerKey.toString() + &quot; AND \&quot;SUPPLIER_REF\&quot; = &quot; + supplierKey.toString() + &quot; AND \&quot;MAINTENANCE_ENABLED\&quot; = \&quot;PRIMARY SUPPLIER\&quot;&quot;);
                if (objects.size() &gt; 0){
                    //compilo sul sub-task il corretto oggetto Supplier_Installation nel campo OP_SUPPLIER
                    log.warn objects[0].toString()
                    suppInstKey = objects[0].toString().substring(objects[0].toString().lastIndexOf('(')+1,objects[0].toString().lastIndexOf(')'))
                    log.warn &quot;suppInstKey: &quot; + suppInstKey

                    mi = (MutableIssue) subtask;
                    mi.setCustomFieldValue(supplierInstallation, [objectFacade.loadObjectBean(suppInstKey)]);
                    ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);

                }else{
                    //verifico se esiste associazione con MAINTENANCE_ENABLED = &quot;BACKUP SUPPLIER&quot;
                    objects = iqlFacade.findObjectsByIQLAndSchema(28, &quot;objectType = \&quot;Supplier_Installation\&quot; AND \&quot;HARDWARE_REF\&quot; = &quot; + assetKey.toString() + &quot; AND \&quot;SUPPLIER_REF\&quot; = &quot; + supplierKey.toString() + &quot; AND \&quot;MAINTENANCE_ENABLED\&quot; = \&quot;BACKUP SUPPLIER\&quot;&quot;);
                    if (objects.size() &gt; 0){
                        //compilo sul sub-task il corretto oggetto Supplier_Installation nel campo OP_SUPPLIER
                        log.warn objects[0].toString()
                        suppInstKey = objects[0].toString().substring(objects[0].toString().lastIndexOf('(')+1,objects[0].toString().lastIndexOf(')'))
                        log.warn &quot;suppInstKey: &quot; + suppInstKey

                        mi = (MutableIssue) subtask;
                        mi.setCustomFieldValue(supplierInstallation, [objectFacade.loadObjectBean(suppInstKey)]);
                        ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);

                    }else{
                        //genero l'oggetto Supplier_Installation con MAINTENANCE_ENABLED = &quot;BACKUP SUPPLIER&quot;
                        def objectTypeSupplierInstallation = objectTypeFacade.loadObjectTypeBean(298);
                        def newObjectBean = objectTypeSupplierInstallation.createMutableObjectBean();

                        def objectAttributeBeans = new ArrayList();
                        def SupplierInstallationObjects = new ArrayList();

                        //Set Name
                        def nameObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(2682);     
                        log.warn &quot;supplierValue: &quot; + supplierValue
                        log.warn &quot;supplierValue[0]: &quot; + supplierValue[0]
                        log.warn &quot;Name: &quot; + supplierValue[0].toString().substring(supplierValue[0].toString().lastIndexOf('(')+1,supplierValue[0].toString().lastIndexOf(')'))
                        objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, nameObjectTypeAttributeBean, supplierValue[0].toString().substring(supplierValue[0].toString().lastIndexOf('(')+1,supplierValue[0].toString().lastIndexOf(')'))));
                        newObjectBean.setObjectAttributeBeans(objectAttributeBeans);

                        /*Set MAINTENANCE_ENABLED*/
                        def maintenanceObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(3033); 
                        objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, maintenanceObjectTypeAttributeBean, &quot;BACKUP SUPPLIER&quot;));
                        newObjectBean.setObjectAttributeBeans(objectAttributeBeans);

                        /*Set SAP*/
                        def sapObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(3026); 
                        objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, sapObjectTypeAttributeBean, &quot;false&quot;));
                        newObjectBean.setObjectAttributeBeans(objectAttributeBeans);

                        /*Set SELECTED*/
                        def selectedObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(3040); 
                        objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, selectedObjectTypeAttributeBean, &quot;true&quot;));
                        newObjectBean.setObjectAttributeBeans(objectAttributeBeans);

                        /*Set DISABLED*/
                        def disabledObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(3041); 
                        objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, disabledObjectTypeAttributeBean, &quot;false&quot;));
                        newObjectBean.setObjectAttributeBeans(objectAttributeBeans);

                        /*Set DELETED*/
                        def deletedObjectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(3036); 
                        objectAttributeBeans.add(objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, deletedObjectTypeAttributeBean, &quot;false&quot;));
                        newObjectBean.setObjectAttributeBeans(objectAttributeBeans);

                        /* Store the object into Insight. The new ObjectBean will be updated with an unique ID */
                        try {
                            newObjectBean = objectFacade.storeObjectBean(newObjectBean);
                            log.warn(&quot;newObjectBean: &quot; + newObjectBean);
                        } catch (Exception vie) {
                            log.warn(&quot;Could not create issue due to validation exception:&quot; + vie.getMessage());
                        }

                        /* Update SUPPLIER_REF on the newObject */		        
                        def objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(3027).createMutable() //The id of the attribute

                        /* Create the new attribute bean based on the value */
                        def newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, supplierKey);
                        /* Load the attribute bean */
                        def objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), supplierKey);
                        if (objectAttributeBean != null) {
                            /* If attribute exist reuse the old id for the new attribute */
                            newObjectAttributeBean.setId(objectAttributeBean.getId());
                        }
                        /* Store the object attribute into Insight. */
                        try {
                            objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);
                        } catch (Exception vie) {
                            log.warn(&quot;Could not update object attribute due to validation exception:&quot; + vie.getMessage());
                        }              

                        /* Update HARDWARE_REF on the newObject */		        
                        objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(3028).createMutable() //The id of the attribute

                        /* Create the new attribute bean based on the value */
                        newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, assetKey);
                        /* Load the attribute bean */
                        objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), assetKey);
                        if (objectAttributeBean != null) {
                            /* If attribute exist reuse the old id for the new attribute */
                            newObjectAttributeBean.setId(objectAttributeBean.getId());
                        }
                        /* Store the object attribute into Insight. */
                        try {
                            objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);
                        } catch (Exception vie) {
                            log.warn(&quot;Could not update object attribute due to validation exception:&quot; + vie.getMessage());
                        } 

                        /* Update SITE_REF on the newObject */		        
                        objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(3031).createMutable() //The id of the attribute

                        def assetObj = objectFacade.loadObjectBean(assetKey)
                        log.warn &quot;assetObj: &quot; + assetObj.toString()
                        siteRef = objectFacade.loadObjectAttributeBean(assetObj.getId(), &quot;SITE_REF&quot;).getObjectAttributeValueBeans()
                        log.warn &quot;siteRef: &quot; + siteRef.toString()
                        siteKey = siteRef[0].toString().substring(siteRef[0].toString().lastIndexOf('(')+1,siteRef[0].toString().lastIndexOf(')'))

                        /* Create the new attribute bean based on the value */
                        newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, siteKey);
                        /* Load the attribute bean */
                        objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), assetKey);
                        if (objectAttributeBean != null) {
                            /* If attribute exist reuse the old id for the new attribute */
                            newObjectAttributeBean.setId(objectAttributeBean.getId());
                        }
                        /* Store the object attribute into Insight. */
                        try {
                            objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);
                        } catch (Exception vie) {
                            log.warn(&quot;Could not update object attribute due to validation exception:&quot; + vie.getMessage());
                        } 

                        /* Update CUSTOMER_REF on the newObject */		        
                        objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(3032).createMutable() //The id of the attribute

                        log.warn &quot;siteKey: &quot; + siteKey
                        def siteObj = objectFacade.loadObjectBean(&quot;OPAA-&quot; + siteKey)
                        log.warn &quot;siteObj: &quot; + siteObj.toString()
                        customerRef = objectFacade.loadObjectAttributeBean(siteObj.getId(), &quot;CUSTOMER_REF&quot;).getObjectAttributeValueBeans()
                        log.warn &quot;customerRef: &quot; + customerRef.toString()
                        customerKey = customerRef[0].toString().substring(customerRef[0].toString().lastIndexOf('(')+1,customerRef[0].toString().lastIndexOf(')'))

                        /* Create the new attribute bean based on the value */
                        newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(newObjectBean, objectTypeAttributeBean, customerKey);
                        /* Load the attribute bean */
                        objectAttributeBean = objectFacade.loadObjectAttributeBean(newObjectBean.getId(), assetKey);
                        if (objectAttributeBean != null) {
                            /* If attribute exist reuse the old id for the new attribute */
                            newObjectAttributeBean.setId(objectAttributeBean.getId());
                        }
                        /* Store the object attribute into Insight. */
                        try {
                            objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);
                        } catch (Exception vie) {
                            log.warn(&quot;Could not update object attribute due to validation exception:&quot; + vie.getMessage());
                        } 

                        SupplierInstallationObjects.add(newObjectBean)

                        mi = (MutableIssue) subtask;
                        mi.setCustomFieldValue(supplierInstallation, SupplierInstallationObjects);
                        ComponentAccessor.getIssueManager().updateIssue(currentUser, mi, EventDispatchOption.DO_NOT_DISPATCH, false);

                    }
                }
            }
        }
    }
}</arg>
                  <arg name="field.filepath"></arg>
                  <arg name="class.name">com.riadalabs.jira.plugins.insight.services.jira.postfunction.InsightPostFunction</arg>
                  <arg name="field.description">Check &amp; Update OP_SUPPLIER on each sub-task</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">1a43d54e-fc3e-4fbf-912e-9d93df28367a</arg>
                  <arg name="FIELD_NOTES">YCFgUmVtb3ZlIGlzc3VlIGxpbmtzIHRvIGlzc3VlcyB3aXRoIGRpZmZlcmVudCBTdXBwbGllcg==</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">7c9fe003-2f0f-4ffb-8821-090ba6b0d811</arg>
                  <arg name="FIELD_NOTES">YCFgQ3JlYXRlIGxpbmsgd2l0aCBpc3N1ZXMgd2l0aCB0aGUgc2FtZSAobmV3KSBzdXBwbGllcg==</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="561" name="Assegna a tecnici interni e Pianifica" view="fieldscreen">
          <meta name="opsbar-sequence">50</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">20117</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">67d21477-5b8c-45a3-88f8-a691f3cb035f</arg>
                <arg name="FIELD_NOTES">YCFgT1BfQVNTRVQgc2hvdWxkIGJlIGV2YWx1YXRlZA==</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJjZlZhbHVlc1snT1BfQVNTRVQnXSAhPSBudWxsIHx8IGlzc3VlLmlzc3VlVHlwZS5uYW1lID09ICdQbGFubmVkIE1haW50ZW5hbmNlIFRpY2tldCciLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">10786a5c-e2b3-4bea-a0d1-46f9012a73e2</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIEN1c3RvbWVyIENvbnRyYWN0</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">7a272e30-dcd2-4e28-bf3b-a91abc51c017</arg>
              <arg name="FIELD_NOTES">YCFgU0FQOiB1cGRhdGUgU04gc3RhdHVzICYgQ3JlYXRlIFNP</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuSXNzdWVMaW5rXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcblxuZGVmIHNhcFNOID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShcIk9QX1NBUF9TRVJWSUNFX05PVElGSUNBVElPTlwiKVswXVxuXG5kZWYgcmVxdWVzdE1ldGhvZFxuZGVmIGJhc2VVUkxcblxuVVJMIHVybFxuSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvblxuXG5pZihpc3N1ZS5pc3N1ZVR5cGUubmFtZSAhPSBcIlBsYW5uZWQgTWFpbnRlbmFuY2UgVGlja2V0XCIgJiYgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzYXBTTikgIT0gbnVsbCl7XG4gICAgcmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuXG4gICAgZGVmIGJvZHlfcmVxID0gW11cbiAgICBib2R5X3JlcSA9IFtcbiAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXksXG4gICAgICAgIFwic3RhdHVzXCI6IFwiUExBXCJcbiAgICBdIFxuXG4gICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvYWZ0ZXIvc2FsZXMvY3JlYXRlL3NlcnZpY2Uvbm90aWZpY2F0aW9uXCJcblxuICAgIGxvZy5kZWJ1ZyBcImJhc2VVUkwgU046IFwiICsgYmFzZVVSTFxuICAgIGxvZy5kZWJ1ZyBcImJvZHlfcmVxIFNOOiBcIiArIGJvZHlfcmVxXG4gICAgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG4gICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxuICAgIGxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpO1xuXG4gICAgZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KClcblxuICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMFwiKSl7XG4gICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG4gICAgICAgIFxuICAgICAgICBkZWYgb3V0cHV0TXNnID0gKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0XG4gICAgICAgIGxvZy5kZWJ1ZyBcIigoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dDogXCIgKyBvdXRwdXRNc2dcblxuICAgICAgICBkZWYganNvblNsdXJwZXIgPSBuZXcgSnNvblNsdXJwZXIoKVxuICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgICAgICBhc3NlcnQganNvbl9vYmplY3QgaW5zdGFuY2VvZiBNYXAgIFxuICAgICAgICBsb2cuZGVidWcgXCJtZXNzYWdlOiBcIiArICBqc29uX29iamVjdC5tZXNzYWdlXG4gICAgICAgIGxvZy5kZWJ1ZyBcImVycm9yczogXCIgKyAganNvbl9vYmplY3QuZXJyb3JzLnRvU3RyaW5nKClcblxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIk9QLVNBUC1TTi1VUERBVEVcIilcbiAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5lcnJvcnNbMF0udG9TdHJpbmcoKSlcbiAgICAgICAgXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChlcnJvck1zZ3MpXG4gICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycylcblxuICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcbiAgICB9ZWxzZXtcbiAgICAgICAgLyoqIFNFUlZJQ0UgT1JERVIgQ1JFQVRJT04gKiovXG4gICAgICAgIGJvZHlfcmVxID0gW1xuICAgICAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXlcbiAgICAgICAgXSBcbiAgICAgICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvYWZ0ZXIvc2FsZXMvY3JlYXRlL29yL3VwZGF0ZS9zZXJ2aWNlL29yZGVyXCJcblxuICAgICAgICBsb2cuZGVidWcgXCJiYXNlVVJMIFNPOiBcIiArIGJhc2VVUkxcbiAgICAgICAgbG9nLmRlYnVnIFwiYm9keV9yZXEgU086IFwiICsgYm9keV9yZXFcbiAgICAgICAgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgICAgICBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xuICAgICAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG4gICAgICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xuICAgICAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbiAgICAgICAgY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbiAgICAgICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuICAgICAgICBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgICAgICBjb25uZWN0aW9uLm91dHB1dFN0cmVhbS53aXRoV3JpdGVyKFwiVVRGLThcIikgeyBuZXcgU3RyZWFtaW5nSnNvbkJ1aWxkZXIoaXQsIGJvZHlfcmVxKSB9XG4gICAgICAgIGxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgICAgICBjb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuICAgICAgICBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5cbiAgICAgICAgaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAxXCIpICYmICFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAwXCIpKXtcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZGVmIG91dHB1dE1zZyA9ICgoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dFxuICAgIFx0XHRsb2cuZGVidWcgXCIoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHQ6IFwiICsgb3V0cHV0TXNnXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGRlZiBqc29uU2x1cnBlciA9IG5ldyBKc29uU2x1cnBlcigpXG4gICAgICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgICAgICAgICAgYXNzZXJ0IGpzb25fb2JqZWN0IGluc3RhbmNlb2YgTWFwICBcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIm1lc3NhZ2U6IFwiICsgIGpzb25fb2JqZWN0Lm1lc3NhZ2VcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcImVycm9yczogXCIgKyAganNvbl9vYmplY3QuZXJyb3JzLnRvU3RyaW5nKClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiRVwiKVxuICAgICAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiT1AtU0FQLVNPLUNSRUFURVwiKVxuICAgICAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5lcnJvcnNbMF0pXG4gICAgICAgICAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKVxuICAgICAgICAgICAgZUxpc3QuYWRkKGVMaXN0RXJyb3JzKVxuXG4gICAgICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgICAgIH1cbiAgICB9XG59XG4gIiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">583df9c7-fce8-41ca-ad87-8f516b4ff5c5</arg>
              <arg name="FIELD_NOTES">YCFgRGVsZXRlIHByZXZpb3VzIGF0dGFjaG1lbnRzIHJlbGF0ZWQgdG8gTkVXIEluc3RhbGxhdGlvbiBUS1QgR2VuZXJhdGlvbg==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">ae3f3563-1b6f-4e50-a442-a0926310744c</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IERvYyBUZW1wbGF0ZSBnZW5lcmF0aW9uIC0gc2UgTmV3IEluc3RhbGxhdGlvbiBPUiBGaXJzdCBUaWNrZXQgPSB0cnVl</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5Xb3JrZmxvd0V4Y2VwdGlvbjtcbmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvblxuaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyO1xuaW1wb3J0IGdyb292eS5qc29uLlN0cmVhbWluZ0pzb25CdWlsZGVyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5DdXN0b21GaWVsZE1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3I7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5NdXRhYmxlSXNzdWVcbmltcG9ydCBvcmcuYXBhY2hlLmNvbW1vbnMuY29kZWMuYmluYXJ5LkJhc2U2NDtcbmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5XG5pbXBvcnQgZ3Jvb3Z5eC5uZXQuaHR0cC5IVFRQQnVpbGRlclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcblxuZGVmIHJlcXVlc3RNZXRob2RcbmRlZiBiYXNlVVJMXG5cbmRlZiBmaXJzdFRpY2tldCA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YuZmlyc3RUa3QnXS50b1N0cmluZygpKVswXVxuXG5sb2cuZGVidWcgaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZVxubG9nLmRlYnVnIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoZmlyc3RUaWNrZXQpXG5cblxuLyogUkVTVCBBUEkgcGVyIEludmlvIE5vdGlmaWNhIEVtYWlsIE9OU0lURV9SRVBPUlQgKi9cbnJlcXVlc3RNZXRob2QgPSBcIkdFVFwiO1xuZGVmIHJlc2NoZWR1bGluZyA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YucmVzY2hlZHVsaW5nJ10gPyBwcm9wZXJ0aWVzWydjZi5yZXNjaGVkdWxpbmcnXS50b1N0cmluZygpIDogXCJPUF9DSEFOR0VfU0NIRURVTElOR1wiKVswXVxuZGVmIHRyYW5zaXRpb25DaGVjayA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YuY2hlY2tBbmRDb25maXJtMiddLnRvU3RyaW5nKCkpWzBdXG5cblxuZGVmIGZpcnN0X3RpY2tldD1mYWxzZVxuZGVmIHRlbXBsYXRlPVwiXCJcbmlmKGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoZmlyc3RUaWNrZXQpIT1udWxsKXtcbiAgICBmaXJzdF90aWNrZXQ9dHJ1ZVxuICAgIHRlbXBsYXRlPVwiRklSU1RfVElDS0VUJTdDTUFOVUZBQ1RVUkVSXCJcbn1lbHNle1xuICAgIHRlbXBsYXRlPVwiTkVXX0lOU1RBTExBVElPTl9DUkVBVEVfVEtUJTdDTUFOVUZBQ1RVUkVSXCJcbn1cblxuaWYoaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpdC5uZXdJbnN0YWxsYXRpb24nXSkpe1xuICAgIGJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9hdXRvbWF0aW9uL2RvY3VtZW50L2dlbmVyYXRpb24vY2hlY2s/SVNTVUVfS0VZPVwiKyBpc3N1ZS5rZXkgK1wiJkRPQ19DQVRFR09SWT1cIiArIHRlbXBsYXRlICsgXCImRU5BQkxFRF9GT1JfRklSU1RfVElDS0VUPVwiK2ZpcnN0X3RpY2tldCtcIiZJTVBPUlRfRlJPTT1cIlxufWVsc2V7XG4gICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2F1dG9tYXRpb24vZG9jdW1lbnQvZ2VuZXJhdGlvbi9jaGVjaz9JU1NVRV9LRVk9XCIrIGlzc3VlLmtleSArXCImRE9DX0NBVEVHT1JZPVwiICsgdGVtcGxhdGUgKyBcIiZFTkFCTEVEX0ZPUl9GSVJTVF9USUNLRVQ9XCIrZmlyc3RfdGlja2V0K1wiJklNUE9SVF9GUk9NPU9QX0FTU0VUXCJcbn1cblxubG9nLmRlYnVnIGJhc2VVUkxcbmlmKGJhc2VVUkwgIT0gbnVsbCAmJiBiYXNlVVJMICE9IFwiXCIpe1xuICAgIFVSTCB1cmwgPSBuZXcgVVJMKGJhc2VVUkwpXG4gICAgSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpO1xuXG4gICAgZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG5cbiAgICBpZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDBcIikpe1xuICAgICAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuICAgICAgICBsb2cuZGVidWcgXCJFcnJvclN0cmVhbTogXCIgKyBjb25uZWN0aW9uLmdldEVycm9yU3RyZWFtKCkudG9TdHJpbmcoKVxuICAgICAgICBsb2cuZGVidWcgXCJnZXRIZWFkZXJGaWVsZHMoKTogXCIgKyBjb25uZWN0aW9uLmdldEhlYWRlckZpZWxkcygpXG4gICAgICAgIGRlZiBvdXRwdXRNc2cgPSAoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHRcbiAgICAgICAgbG9nLmRlYnVnIFwiKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0OiBcIiArIG91dHB1dE1zZ1xuXG4gICAgICAgIGRlZiBqc29uU2x1cnBlciA9IG5ldyBKc29uU2x1cnBlcigpXG4gICAgICAgIGRlZiBqc29uX29iamVjdCA9IGpzb25TbHVycGVyLnBhcnNlVGV4dChvdXRwdXRNc2cpXG4gICAgICAgIGFzc2VydCBqc29uX29iamVjdCBpbnN0YW5jZW9mIE1hcCAgXG4gICAgICAgIGxvZy5kZWJ1ZyBcIm1lc3NhZ2U6IFwiICsgIGpzb25fb2JqZWN0Lm1lc3NhZ2VcblxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIk9QLURPQ1NcIilcbiAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5tZXNzYWdlKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKVxuICAgICAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpXG5cbiAgICAgICAgb3V0cHV0LmFkZChlTGlzdClcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgfVxufSIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">dd185790-4471-4435-99ff-f3aca12a451c</arg>
              <arg name="FIELD_NOTES">YCFgT1AgRW1haWwgTm90aWZpY2F0aW9uOiBBU1NJR05fVE9fSU5URVJOQUxfVEVDSFM=</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmluZGV4Lklzc3VlSW5kZXhpbmdTZXJ2aWNlXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuSXNzdWVMaW5rXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuXG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcblxuZGVmIHJlcXVlc3RNZXRob2QgPSBcIlBPU1RcIjtcbmRlZiByZWxhdGVzSW5Jc3N1ZUxpbms9ZmFsc2VcbmRlZiByZWxhdGVzT3V0SXNzdWVMaW5rPWZhbHNlXG5kZWYgbGlua2VkVGlja2V0cz1uZXcgQXJyYXlMaXN0KClcblxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpO1xuQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpO1xuZGVmIGF1dG9tYXRpY2FsbHlDb25maXJtZWQgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLmF1dG9tYXRpY2FsbHlBc3NpZ25lZCddID8gcHJvcGVydGllc1snY2YuYXV0b21hdGljYWxseUFzc2lnbmVkJ10udG9TdHJpbmcoKSA6IFwiT1BfQVVUT01BVElDQUxMWV9BU1NJR05FRFwiKVswXVxuXG4vKnZlcmlmaWNhIHRpY2tldCBjb2xsZWdhdGkqL1xuTGlzdDxJc3N1ZUxpbms+IGFsbEluSXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldElud2FyZExpbmtzKGlzc3VlLmdldElkKCkpXG5mb3IgKEl0ZXJhdG9yPElzc3VlTGluaz4gb3V0SXRlcmF0b3IgPSBhbGxJbklzc3VlTGluay5pdGVyYXRvcigpOyBvdXRJdGVyYXRvci5oYXNOZXh0KCk7KSB7XG4gICAgSXNzdWVMaW5rIGlzc3VlTGluayA9IChJc3N1ZUxpbmspIG91dEl0ZXJhdG9yLm5leHQoKTtcblxuICAgIGlmKGlzc3VlTGluay5nZXRTb3VyY2VPYmplY3QoKSE9IG51bGwgJiYgaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNSZWxhdGVzJ10udG9TdHJpbmcoKSkgJiYgaXNzdWVMaW5rLmdldFNvdXJjZU9iamVjdCgpLnN0YXR1cy5uYW1lID09IFwiT3BlblwiKXtcbiAgICAgICAgcmVsYXRlc0luSXNzdWVMaW5rPXRydWVcbiAgICAgICAgbGlua2VkVGlja2V0cy5hZGQoaXNzdWVMaW5rLmdldFNvdXJjZU9iamVjdCgpLnRvU3RyaW5nKCkpXG4gICAgICAgIGxvZy5kZWJ1ZyBcIklzc3VlIGNvbiByZWxhdGVzSW5Jc3N1ZUxpbmtcIlxuICAgIH1cbn1cbkxpc3Q8SXNzdWVMaW5rPiBhbGxPdXRJc3N1ZUxpbmsgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZUxpbmtNYW5hZ2VyKCkuZ2V0T3V0d2FyZExpbmtzKGlzc3VlLmdldElkKCkpXG5mb3IgKEl0ZXJhdG9yPElzc3VlTGluaz4gb3V0SXRlcmF0b3IgPSBhbGxPdXRJc3N1ZUxpbmsuaXRlcmF0b3IoKTsgb3V0SXRlcmF0b3IuaGFzTmV4dCgpOykge1xuICAgIElzc3VlTGluayBpc3N1ZUxpbmsgPSAoSXNzdWVMaW5rKSBvdXRJdGVyYXRvci5uZXh0KCk7XG5cbiAgICBpZihpc3N1ZUxpbmsuZ2V0RGVzdGluYXRpb25PYmplY3QoKSE9IG51bGwgJiYgaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNSZWxhdGVzJ10udG9TdHJpbmcoKSkgJiYgaXNzdWVMaW5rLmdldERlc3RpbmF0aW9uT2JqZWN0KCkuc3RhdHVzLm5hbWUgPT0gXCJPcGVuXCIpe1xuICAgICAgICByZWxhdGVzT3V0SXNzdWVMaW5rPXRydWVcbiAgICAgICAgbGlua2VkVGlja2V0cy5hZGQoaXNzdWVMaW5rLmdldERlc3RpbmF0aW9uT2JqZWN0KCkudG9TdHJpbmcoKSlcbiAgICAgICAgbG9nLmRlYnVnIFwiSXNzdWUgY29uIHJlbGF0ZXNPdXRJc3N1ZUxpbmtcIlxuICAgIH1cbn1cblxuZGVmIGJvZHlfcmVxXG5pZihyZWxhdGVzSW5Jc3N1ZUxpbmsgfHwgcmVsYXRlc091dElzc3VlTGluayl7XG4gICAgYm9keV9yZXEgPSBbXG4gICAgICAgIFwidGVtcGxhdGVOYW1lXCI6IHByb3BlcnRpZXNbJ3R0LmFzc2lnblRvSW50ZXJuYWxUZWNocyddLnRvU3RyaW5nKCksXG4gICAgICAgIFwicGVjXCI6IGZhbHNlLFxuICAgICAgICBcImlzc3VlS2V5XCI6IGlzc3VlLmtleSxcbiAgICAgICAgXCJsaW5rZWRUaWNrZXRzXCI6IGxpbmtlZFRpY2tldHNcbiAgICBdXG59ZWxzZXtcbiAgICBib2R5X3JlcSA9IFtcbiAgICAgICAgXCJ0ZW1wbGF0ZU5hbWVcIjogcHJvcGVydGllc1sndHQuYXNzaWduVG9JbnRlcm5hbFRlY2hzJ10udG9TdHJpbmcoKSxcbiAgICAgICAgXCJwZWNcIjogZmFsc2UsXG4gICAgICAgIFwiaXNzdWVLZXlcIjogaXNzdWUua2V5XG4gICAgXVxufVxuXG5pZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGF1dG9tYXRpY2FsbHlDb25maXJtZWQpPT1udWxsIHx8IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoYXV0b21hdGljYWxseUNvbmZpcm1lZCkudG9TdHJpbmcoKS5lcXVhbHMoXCJOb1wiKSl7XG4gICAgZGVmIGJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9qaXJhL0FBL3RyYW5zYWN0aW9uL21haWwvc2VuZFwiXG4gICAgVVJMIHVybFxuICAgIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcblxuICAgIGxvZy5kZWJ1ZyBcImJhc2VVUkw6IFwiICsgYmFzZVVSTFxuICAgIEh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG4gICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxuICAgIGxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpO1xuXG4gICAgZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KClcblx0bG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgIFxuICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMFwiKSAmJiAhY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwNFwiKSl7XG4gICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIkVcIilcbiAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiU0VORE1BSUxcIilcbiAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKVxuICAgICAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpXG5cbiAgICAgICAgb3V0cHV0LmFkZChlTGlzdClcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgfVxufVxuIiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="4">
              <post-functions>
                <function type="class">
                  <arg name="field.copyFieldSource1"></arg>
                  <arg name="textValue">-1</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="workflowName-textValue">OPAA: PM Task Workflow</arg>
                  <arg name="performTransitionAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="scopeType">PARENT</arg>
                  <arg name="destination-scopeTarget">SUB_TASK</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitieslinkedtransition-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="integerValue">31</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.linkedtransition.LinkedTransitionFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="status"></arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="append.value"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">true</arg>
                  <arg name="field.name">customfield_23245</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="field.copyFieldSource2"></arg>
                  <arg name="field.copyFieldSource1">customfield_23236</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="field.createTargetValue1"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyFieldMode1">OVERWRITE</arg>
                  <arg name="field.copyFieldDestination1">customfield_22653</arg>
                  <arg name="field.copyFieldSeparator1"></arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescopyValueFromOtherField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.CopyValueFromOtherFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22813</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">652b3781-6f7d-418a-9e37-55121b823bd1</arg>
                  <arg name="FIELD_NOTES">YCFgVXBkYXRlIE9QX1NVUFBMSUVSLCBPUF9JTlRFUk5BTF9URUNITklDSUFOUywgT1BfVEVDSE5JQ0lBTlMgb24gUE0gVGFza3M=</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyXG5pbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGxcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTW9kaWZpZWRWYWx1ZVxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS51dGlsLkRlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5pbmRleC5Jc3N1ZUluZGV4aW5nU2VydmljZVxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuXG5Jc3N1ZU1hbmFnZXIgaXNzdWVNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKClcbklzc3VlSW5kZXhpbmdTZXJ2aWNlIGlzc3VlSW5kZXhpbmdTZXJ2aWNlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q29tcG9uZW50KElzc3VlSW5kZXhpbmdTZXJ2aWNlKVxuLy9kZWYgaXNzdWUgPSBpc3N1ZU1hbmFnZXIuZ2V0SXNzdWVCeUtleUlnbm9yZUNhc2UoXCJBQVMtMzY0NTlcIilcbmRlZiB0a3RTdXBwbGllciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShcIk9QX1NVUFBMSUVSXCIpXG5kZWYgdGt0SW50ZXJuYWxUZWNocyA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShcIk9QX0lOVEVSTkFMX1RFQ0hOSUNJQU5TXCIpWzBdXG5kZWYgdGt0VGVjaHMgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUoXCJPUF9URUNITklDSUFOU1wiKVswXVxuZGVmIHN1YlRhc2tPYmplY3RzID0gaXNzdWUuZ2V0U3ViVGFza09iamVjdHMoKVxuXG5kZWYgY3VycmVudFN1YlRhc2tcblxuaWYgKHN1YlRhc2tPYmplY3RzKXtcbiAgICBmb3IgKHN0IGluIHN1YlRhc2tPYmplY3RzKXtcbiAgICAgICAgaWYoc3QuaXNzdWVUeXBlLm5hbWUudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snaXQucGxhbm5lZE1haW50ZW5hbmNlVGFzayddLnRvU3RyaW5nKCkpKXtcbiAgICAgICAgICAgIGZvcihzIGluIHRrdFN1cHBsaWVyKXtcbiAgICAgICAgICAgICAgICBzLnVwZGF0ZVZhbHVlKG51bGwsIHN0LCBuZXcgTW9kaWZpZWRWYWx1ZShzdC5nZXRDdXN0b21GaWVsZFZhbHVlKHMpLCBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHMpKSwgbmV3IERlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlcigpKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGt0SW50ZXJuYWxUZWNocy51cGRhdGVWYWx1ZShudWxsLCBzdCwgbmV3IE1vZGlmaWVkVmFsdWUoc3QuZ2V0Q3VzdG9tRmllbGRWYWx1ZSh0a3RJbnRlcm5hbFRlY2hzKSwgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZSh0a3RJbnRlcm5hbFRlY2hzKSksIG5ldyBEZWZhdWx0SXNzdWVDaGFuZ2VIb2xkZXIoKSlcbiAgICAgICAgICAgIHRrdFRlY2hzLnVwZGF0ZVZhbHVlKG51bGwsIHN0LCBuZXcgTW9kaWZpZWRWYWx1ZShzdC5nZXRDdXN0b21GaWVsZFZhbHVlKHRrdFRlY2hzKSwgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZSh0a3RUZWNocykpLCBuZXcgRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyKCkpXG4gICAgICAgICAgICBpc3N1ZUluZGV4aW5nU2VydmljZS5yZUluZGV4KHN0KVxuICAgICAgICB9XG4gICAgfVxufSIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="append.value"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="field.name">customfield_22639</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">0ff57ef7-f8af-4689-a977-5b5f92ac4279</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IE5ldyBJbnN0YWxsYXRpb24gLSBDaGVjayBsaW5rZWRUaWNrZXRzICYgRmFzdC1UcmFuc2FjdCB0aGVt</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22758</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="field2">customfield_22757</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="691" name="Conferma e Pianifica senza notifiche" view="fieldscreen">
          <meta name="opsbar-sequence">50</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">20112</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">a9655845-bd3d-4171-ab08-fdb0c420b5d2</arg>
                <arg name="FIELD_NOTES">YCFgT1BfQVNTRVQgc2hvdWxkIGJlIGV2YWx1YXRlZCAmJiBJc3N1ZSB0eXBlIHNob3VsZCBiZSBOZXcgSW5zdGFsbGF0aW9u</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJjZlZhbHVlc1snT1BfQVNTRVQnXSAhPSBudWxsIHx8IGlzc3VlLmlzc3VlVHlwZS5uYW1lID09ICdQbGFubmVkIE1haW50ZW5hbmNlIFRpY2tldCciLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">e335982b-f860-4bed-a8cc-028022cff1ce</arg>
                <arg name="FIELD_NOTES">YCFgT1BfU1VQUExJRVIgc2hvdWxkIGJlIG5vdCBudWxs</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuXG5kZWYgdHJvdmF0bz1mYWxzZVxuZm9yIChzIGluIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi5zdXBwbGllciddLnRvU3RyaW5nKCkpKXtcbiAgICBpZiAoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzKSAhPSBudWxsKXtcbiAgICAgICAgdHJvdmF0bz10cnVlXG4gICAgfVxufVxucmV0dXJuIHRyb3ZhdG8iLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">de52ae8f-3a4f-4dd8-93de-2d990003847d</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIEN1c3RvbWVyIENvbnRyYWN0ICYmIE51bWJlciBvZiB0aWNrZXRzIGluIHRoZSBsYXN0IDYwIGRheXM=</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">a80e150a-63e9-41ea-964a-c564139e7864</arg>
              <arg name="FIELD_NOTES">YCFgU0FQOiB1cGRhdGUgU04gc3RhdHVzICYgQ3JlYXRlIFNP</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuSXNzdWVMaW5rXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcblxuZGVmIHNhcFNOID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShcIk9QX1NBUF9TRVJWSUNFX05PVElGSUNBVElPTlwiKVswXVxuXG5kZWYgcmVxdWVzdE1ldGhvZFxuZGVmIGJhc2VVUkxcblxuVVJMIHVybFxuSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvblxuXG5pZihpc3N1ZS5pc3N1ZVR5cGUubmFtZSAhPSBcIlBsYW5uZWQgTWFpbnRlbmFuY2UgVGlja2V0XCIgJiYgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzYXBTTikgIT0gbnVsbCl7XG4gICAgcmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuXG4gICAgZGVmIGJvZHlfcmVxID0gW11cbiAgICBib2R5X3JlcSA9IFtcbiAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXksXG4gICAgICAgIFwic3RhdHVzXCI6IFwiUExBXCJcbiAgICBdIFxuXG4gICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvYWZ0ZXIvc2FsZXMvY3JlYXRlL3NlcnZpY2Uvbm90aWZpY2F0aW9uXCJcblxuICAgIGxvZy5kZWJ1ZyBcImJhc2VVUkwgU046IFwiICsgYmFzZVVSTFxuICAgIGxvZy5kZWJ1ZyBcImJvZHlfcmVxIFNOOiBcIiArIGJvZHlfcmVxXG4gICAgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG4gICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxuICAgIGxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpO1xuXG4gICAgZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KClcblxuICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMFwiKSl7XG4gICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG4gICAgICAgIFxuICAgICAgICBkZWYgb3V0cHV0TXNnID0gKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0XG4gICAgICAgIGxvZy5kZWJ1ZyBcIigoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dDogXCIgKyBvdXRwdXRNc2dcblxuICAgICAgICBkZWYganNvblNsdXJwZXIgPSBuZXcgSnNvblNsdXJwZXIoKVxuICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgICAgICBhc3NlcnQganNvbl9vYmplY3QgaW5zdGFuY2VvZiBNYXAgIFxuICAgICAgICBsb2cuZGVidWcgXCJtZXNzYWdlOiBcIiArICBqc29uX29iamVjdC5tZXNzYWdlXG4gICAgICAgIGxvZy5kZWJ1ZyBcImVycm9yczogXCIgKyAganNvbl9vYmplY3QuZXJyb3JzLnRvU3RyaW5nKClcblxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIk9QLVNBUC1TTi1VUERBVEVcIilcbiAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5lcnJvcnNbMF0udG9TdHJpbmcoKSlcbiAgICAgICAgXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChlcnJvck1zZ3MpXG4gICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycylcblxuICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcbiAgICB9ZWxzZXtcbiAgICAgICAgLyoqIFNFUlZJQ0UgT1JERVIgQ1JFQVRJT04gKiovXG4gICAgICAgIGJvZHlfcmVxID0gW1xuICAgICAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXlcbiAgICAgICAgXSBcbiAgICAgICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvYWZ0ZXIvc2FsZXMvY3JlYXRlL29yL3VwZGF0ZS9zZXJ2aWNlL29yZGVyXCJcblxuICAgICAgICBsb2cuZGVidWcgXCJiYXNlVVJMIFNPOiBcIiArIGJhc2VVUkxcbiAgICAgICAgbG9nLmRlYnVnIFwiYm9keV9yZXEgU086IFwiICsgYm9keV9yZXFcbiAgICAgICAgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgICAgICBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xuICAgICAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG4gICAgICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xuICAgICAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbiAgICAgICAgY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbiAgICAgICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuICAgICAgICBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgICAgICBjb25uZWN0aW9uLm91dHB1dFN0cmVhbS53aXRoV3JpdGVyKFwiVVRGLThcIikgeyBuZXcgU3RyZWFtaW5nSnNvbkJ1aWxkZXIoaXQsIGJvZHlfcmVxKSB9XG4gICAgICAgIGxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgICAgICBjb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuICAgICAgICBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5cdFx0bG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuICAgICAgICBpZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDFcIikgJiYgIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDBcIikpe1xuICAgICAgICAgICAgbG9nLmRlYnVnIFwidXJsOiBcIiArIHVybFxuICAgICAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgICAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBkZWYgb3V0cHV0TXNnID0gKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0XG4gICAgXHRcdGxvZy5kZWJ1ZyBcIigoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dDogXCIgKyBvdXRwdXRNc2dcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZGVmIGpzb25TbHVycGVyID0gbmV3IEpzb25TbHVycGVyKClcbiAgICAgICAgICAgIGRlZiBqc29uX29iamVjdCA9IGpzb25TbHVycGVyLnBhcnNlVGV4dChvdXRwdXRNc2cpXG4gICAgICAgICAgICBhc3NlcnQganNvbl9vYmplY3QgaW5zdGFuY2VvZiBNYXAgIFxuICAgICAgICAgICAgbG9nLmRlYnVnIFwibWVzc2FnZTogXCIgKyAganNvbl9vYmplY3QubWVzc2FnZVxuICAgICAgICAgICAgbG9nLmRlYnVnIFwiZXJyb3JzOiBcIiArICBqc29uX29iamVjdC5lcnJvcnMudG9TdHJpbmcoKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJPUC1TQVAtU08tQ1JFQVRFXCIpXG4gICAgICAgICAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyBcIiBcIiArIGpzb25fb2JqZWN0LmVycm9yc1swXSlcbiAgICAgICAgICAgIGVMaXN0RXJyb3JzLmFkZChlcnJvck1zZ3MpXG4gICAgICAgICAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpXG5cbiAgICAgICAgICAgIG91dHB1dC5hZGQoZUxpc3QpXG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcbiAgICAgICAgfVxuICAgIH1cbn1cbiAiLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="4">
              <post-functions>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="append.value"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="field.name">customfield_22639</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">0db4b388-06a4-49d8-ace8-c098c9d1a5c2</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIGxpbmtlZFRpY2tldHMgJiBGYXN0LVRyYW5zYWN0IHRoZW0=</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="831" name="Completed to be Closed">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">df15a75e93b4c124a70f49e69dbcae9d48e2e8e4</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBPUCBwZXIgY29uc3VudGl2YXppb25lIHRpY2tldA==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">b734e2c5-1436-43e7-ba9d-53f2ba06c457</arg>
              <arg name="FIELD_NOTES">YCFgQ3JlYXRlIFNOICYgU08=</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuXG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUubGluay5Jc3N1ZUxpbmtcblxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpO1xuQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpO1xuXG5kZWYgU04gPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfU0FQX1NFUlZJQ0VfTk9USUZJQ0FUSU9OXCIpWzBdXG5kZWYgcmVxdWVzdE1ldGhvZFxuZGVmIGJhc2VVUkxcblxuVVJMIHVybFxuSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvblxuXG5pZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKFNOKSA9PSBudWxsICYmIGlzc3VlLmlzc3VlVHlwZS5uYW1lICE9IFwiUGxhbm5lZCBNYWludGVuYW5jZSBUaWNrZXRcIil7XG4gICAgcmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuXG4gICAgZGVmIGJvZHlfcmVxID0gW11cbiAgICBib2R5X3JlcSA9IFtcbiAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXksXG4gICAgICAgIFwic3RhdHVzXCI6IFwiSU5QXCJcbiAgICBdIFxuXG4gICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvYWZ0ZXIvc2FsZXMvY3JlYXRlL3NlcnZpY2Uvbm90aWZpY2F0aW9uXCJcblxuICAgIGxvZy5kZWJ1ZyBcImJhc2VVUkwgU046IFwiICsgYmFzZVVSTFxuICAgIGxvZy5kZWJ1ZyBcImJvZHlfcmVxIFNOOiBcIiArIGJvZHlfcmVxXG4gICAgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG4gICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxuICAgIGxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpO1xuXG4gICAgZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KClcblxuICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMVwiKSl7XG4gICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG4gICAgICAgIFxuICAgICAgICBkZWYgb3V0cHV0TXNnID0gKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0XG4gICAgICAgIGxvZy5kZWJ1ZyBcIigoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dDogXCIgKyBvdXRwdXRNc2dcblxuICAgICAgICBkZWYganNvblNsdXJwZXIgPSBuZXcgSnNvblNsdXJwZXIoKVxuICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgICAgICBhc3NlcnQganNvbl9vYmplY3QgaW5zdGFuY2VvZiBNYXAgIFxuICAgICAgICBsb2cuZGVidWcgXCJtZXNzYWdlOiBcIiArICBqc29uX29iamVjdC5tZXNzYWdlXG4gICAgICAgIGxvZy5kZWJ1ZyBcImVycm9yczogXCIgKyAganNvbl9vYmplY3QuZXJyb3JzLnRvU3RyaW5nKClcblxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIk9QLVNBUC1TTi1VUERBVEVcIilcbiAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5lcnJvcnNbMF0pXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChlcnJvck1zZ3MpXG4gICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycylcblxuICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcbiAgICB9ZWxzZXtcbiAgICAgICAgLyoqIFNFUlZJQ0UgT1JERVIgQ1JFQVRJT04gKiovXG4gICAgICAgIGJvZHlfcmVxID0gW1xuICAgICAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXlcbiAgICAgICAgXSBcbiAgICAgICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvYWZ0ZXIvc2FsZXMvY3JlYXRlL29yL3VwZGF0ZS9zZXJ2aWNlL29yZGVyXCJcblxuICAgICAgICBsb2cuZGVidWcgXCJiYXNlVVJMIFNPOiBcIiArIGJhc2VVUkxcbiAgICAgICAgbG9nLmRlYnVnIFwiYm9keV9yZXEgU086IFwiICsgYm9keV9yZXFcbiAgICAgICAgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgICAgICBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xuICAgICAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG4gICAgICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xuICAgICAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbiAgICAgICAgY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbiAgICAgICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuICAgICAgICBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgICAgICBjb25uZWN0aW9uLm91dHB1dFN0cmVhbS53aXRoV3JpdGVyKFwiVVRGLThcIikgeyBuZXcgU3RyZWFtaW5nSnNvbkJ1aWxkZXIoaXQsIGJvZHlfcmVxKSB9XG4gICAgICAgIGxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgICAgICBjb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuICAgICAgICBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5cbiAgICAgICAgaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAxXCIpICYmICFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAwXCIpKXtcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZGVmIG91dHB1dE1zZyA9ICgoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dFxuICAgIFx0XHRsb2cuZGVidWcgXCIoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHQ6IFwiICsgb3V0cHV0TXNnXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGRlZiBqc29uU2x1cnBlciA9IG5ldyBKc29uU2x1cnBlcigpXG4gICAgICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgICAgICAgICAgYXNzZXJ0IGpzb25fb2JqZWN0IGluc3RhbmNlb2YgTWFwICBcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIm1lc3NhZ2U6IFwiICsgIGpzb25fb2JqZWN0Lm1lc3NhZ2VcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcImVycm9yczogXCIgKyAganNvbl9vYmplY3QuZXJyb3JzLnRvU3RyaW5nKClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiRVwiKVxuICAgICAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiT1AtU0FQLVNPLUNSRUFURVwiKVxuICAgICAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5lcnJvcnNbMF0pXG4gICAgICAgICAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKVxuICAgICAgICAgICAgZUxpc3QuYWRkKGVMaXN0RXJyb3JzKVxuXG4gICAgICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgICAgIH1cbiAgICB9XG59Iiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="Not Done" status="Done" step="18">
              <post-functions>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="2" name="Assigned To Supplier">
      <meta name="jira.status.id">14327</meta>
      <actions>
<common-action id="81" />
<common-action id="121" />
        <action id="71" name="Accetta Intervento" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19905</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">9ea9661d5b7954626bd1f3b6b542df62f7afc3dd</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIGVycm9ycyAmIHdhcm5pbmdz</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlXG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGdyb292eS5qc29uLkpzb25CdWlsZGVyXG5pbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXG5cblByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgICBcbkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpXG5wcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0ge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFxuXHRwcm9wZXJ0aWVzLmxvYWQoaXQpXG59XG5kZWYgQ2F0ZWdvcnkgbG9nID0gQ2F0ZWdvcnkuZ2V0SW5zdGFuY2UoXCJjb20ub25yZXNvbHZlLmppcmEuZ3Jvb3Z5LlBvc3RGdW5jdGlvblwiKVxuIFxuSXNzdWUgaXNzdWUgPSBpc3N1ZVxuXG5kZWYgZXJyb3JzID0gZmFsc2VcbmRlZiB3YXJuaW5ncyA9IGZhbHNlXG5cbmRlZiBzdXBwbGllckxhYmVsID0gcHJvcGVydGllc1snY2Yuc3VwcGxpZXInXSA/IHByb3BlcnRpZXNbJ2NmLnN1cHBsaWVyJ10udG9TdHJpbmcoKSA6IFwiT1BfU1VQUExJRVJcIlxuZGVmIHN1cHBsaWVyMSA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShzdXBwbGllckxhYmVsKVswXVxuZGVmIHN1cHBsaWVyMiA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShzdXBwbGllckxhYmVsKVsxXVxuXG5kZWYgZXJyb3JNYW5kYXRvcnlGaWVsZHMgPSBuZXcgQXJyYXlMaXN0KClcbmRlZiB3YXJuaW5nRW1wdHlGaWVsZHMgPSBuZXcgQXJyYXlMaXN0KClcbiBcbi8vT1BfU1VQUExJRVJfUkVQQUlSIHZzIE9QX1NVUFBMSUVSX05FV0lOU1RcbmxvZy5kZWJ1ZyBcInN1cHBsaWVyTGFiZWw6IFwiICsgc3VwcGxpZXJMYWJlbFxubG9nLmRlYnVnIFwic3VwcGxpZXIxOiBcIiArIHN1cHBsaWVyMVxubG9nLmRlYnVnIFwic3VwcGxpZXIyOiBcIiArIHN1cHBsaWVyMlxuZGVmIHN1cHBsaWVyMWVtcHR5ID0gaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzdXBwbGllcjEpPT1udWxsIHx8IChTdHJpbmcpaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzdXBwbGllcjEpID09IFwiXCIgfHwgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzdXBwbGllcjEpLnRvU3RyaW5nKCkuZXF1YWxzKFwiXCIpXG5kZWYgc3VwcGxpZXIyZW1wdHkgPSBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHN1cHBsaWVyMik9PW51bGwgfHwgKFN0cmluZylpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHN1cHBsaWVyMikgPT0gXCJcIiB8fCBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHN1cHBsaWVyMikudG9TdHJpbmcoKS5lcXVhbHMoXCJcIilcbmxvZy5kZWJ1ZyBcInN1cHBsaWVyMWVtcHR5OiBcIiArIHN1cHBsaWVyMWVtcHR5XG5sb2cuZGVidWcgXCJzdXBwbGllcjJlbXB0eTogXCIgKyBzdXBwbGllcjJlbXB0eVxuaWYoKHN1cHBsaWVyMWVtcHR5KSAmJiAoc3VwcGxpZXIyZW1wdHkpKXtcblx0bG9nLmRlYnVnIFwic3VwcGxpZXIxZW1wdHkgJiYgc3VwcGxpZXIyZW1wdHlcIlxuICAgIGVycm9ycyA9IHRydWVcblx0ZXJyb3JNYW5kYXRvcnlGaWVsZHMuYWRkKHN1cHBsaWVyTGFiZWwpXG4gICAgbG9nLmRlYnVnIFwiZXJyb3JNYW5kYXRvcnlGaWVsZHM6IFwiICsgZXJyb3JNYW5kYXRvcnlGaWVsZHNcbn1cblxuZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKVxuXG5pZiAoIWVycm9ycyAmJiAhd2FybmluZ3Mpe1xuICAgIHJldHVybiB0cnVlXG59ZWxzZXtcbiAgICBpZighZXJyb3JzICYmIHdhcm5pbmdzKXtcbiAgICAgICAgZGVmIHdMaXN0ID0gbmV3IEFycmF5TGlzdCgpXG4gICAgICAgIFxuICAgICAgICBpZih3YXJuaW5nRW1wdHlGaWVsZHMuc2l6ZSgpID4gMCl7XG4gICAgICAgICAgICBkZWYgd0xpc3RDb25maXJtRW1wdHkgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5LmFkZChcIldcIilcbiAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5LmFkZChcIkNPTkZJUk1fRU1QVFlfRklFTERTXCIpXG4gICAgICAgICAgICB3TGlzdENvbmZpcm1FbXB0eS5hZGQobnVsbClcbiAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5LmFkZCh3YXJuaW5nRW1wdHlGaWVsZHMpXG5cbiAgICAgICAgICAgIHdMaXN0LmFkZCh3TGlzdENvbmZpcm1FbXB0eSlcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgb3V0cHV0LmFkZCh3TGlzdClcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiV1wiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbihcIldcIiwgb3V0cHV0LnRvU3RyaW5nKCkpICAgXG4gICAgfVxuICAgIGlmKGVycm9ycyAmJiAhd2FybmluZ3Mpe1xuICAgICAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgXG4gICAgICAgIGlmKGVycm9yTWFuZGF0b3J5RmllbGRzLnNpemUoKSA+IDApe1xuICAgICAgICAgICAgZGVmIGVMaXN0TWFuZGF0b3J5ID0gbmV3IEFycmF5TGlzdCgpXG4gICAgICAgICAgICBlTGlzdE1hbmRhdG9yeS5hZGQoXCJFXCIpXG4gICAgICAgICAgICBlTGlzdE1hbmRhdG9yeS5hZGQoXCJNQU5EQVRPUllfRklFTERTXCIpXG4gICAgICAgICAgICBlTGlzdE1hbmRhdG9yeS5hZGQobnVsbClcbiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZChlcnJvck1hbmRhdG9yeUZpZWxkcylcbiAgICAgICAgICAgIGVMaXN0LmFkZChlTGlzdE1hbmRhdG9yeSlcbiAgICAgICAgfVxuICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcbiAgICAgICAgLy90aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKFwiRVwiLCBvdXRwdXQudG9TdHJpbmcoKSkgICBcbiAgICB9XG4gICAgaWYoZXJyb3JzICYmIHdhcm5pbmdzKXtcbiAgICAgICAgZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpXG4gICAgICAgIGRlZiB3TGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuICAgICAgICBcbiAgICAgICAgaWYoZXJyb3JNYW5kYXRvcnlGaWVsZHMuc2l6ZSgpID4gMCl7XG4gICAgICAgICAgICBkZWYgZUxpc3RNYW5kYXRvcnkgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZChcIkVcIilcbiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZChcIk1BTkRBVE9SWV9GSUVMRFNcIilcbiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZChudWxsKVxuICAgICAgICAgICAgZUxpc3RNYW5kYXRvcnkuYWRkKGVycm9yTWFuZGF0b3J5RmllbGRzKVxuICAgICAgICAgICAgZUxpc3QuYWRkKGVMaXN0TWFuZGF0b3J5KVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZih3YXJuaW5nRW1wdHlGaWVsZHMuc2l6ZSgpID4gMCl7XG4gICAgICAgICAgICBkZWYgd0xpc3RDb25maXJtRW1wdHkgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5LmFkZChcIldcIilcbiAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5LmFkZChcIkNPTkZJUk1fRU1QVFlfRklFTERTXCIpXG4gICAgICAgICAgICB3TGlzdENvbmZpcm1FbXB0eS5hZGQobnVsbClcbiAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5LmFkZCh3YXJuaW5nRW1wdHlGaWVsZHMpXG5cbiAgICAgICAgICAgIHdMaXN0LmFkZCh3TGlzdENvbmZpcm1FbXB0eSlcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgb3V0cHV0LmFkZChlTGlzdClcbiAgICAgICAgb3V0cHV0LmFkZCh3TGlzdClcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiV0VcIjpcIicgKyBvdXRwdXQudG9TdHJpbmcoKSArICdcIn0nKVxuICAgICAgICAvL3Rocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oXCJXRVwiLCBvdXRwdXQudG9TdHJpbmcoKSkgIFxuICAgIH1cbn0iLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZQppbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb24KaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3IKaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGdyb292eS5qc29uLkpzb25CdWlsZGVyCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbAoKUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKQpGaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKQpwcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0gewoJcHJvcGVydGllcy5sb2FkKGl0KQp9CmRlZiBDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQogCklzc3VlIGlzc3VlID0gaXNzdWUKCmRlZiBlcnJvcnMgPSBmYWxzZQpkZWYgd2FybmluZ3MgPSBmYWxzZQoKZGVmIHN1cHBsaWVyTGFiZWwgPSBwcm9wZXJ0aWVzWydjZi5zdXBwbGllciddID8gcHJvcGVydGllc1snY2Yuc3VwcGxpZXInXS50b1N0cmluZygpIDogIk9QX1NVUFBMSUVSIgpkZWYgc3VwcGxpZXIgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHN1cHBsaWVyTGFiZWwpWzBdCgpkZWYgZXJyb3JNYW5kYXRvcnlGaWVsZHMgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIHdhcm5pbmdFbXB0eUZpZWxkcyA9IG5ldyBBcnJheUxpc3QoKQogCi8vT1BfU1VQUExJRVJfUkVQQUlSIHZzIE9QX1NVUFBMSUVSX05FV0lOU1QKbG9nLmRlYnVnICJzdXBwbGllckxhYmVsOiAiICsgc3VwcGxpZXJMYWJlbAppZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHN1cHBsaWVyKT09bnVsbCB8fCAoU3RyaW5nKWlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc3VwcGxpZXIpID09ICIiIHx8IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc3VwcGxpZXIpLnRvU3RyaW5nKCkuZXF1YWxzKCIiKSl7CgllcnJvcnMgPSB0cnVlCgllcnJvck1hbmRhdG9yeUZpZWxkcy5hZGQoc3VwcGxpZXJMYWJlbCkKICAgIGxvZy5kZWJ1ZyAiZXJyb3JNYW5kYXRvcnlGaWVsZHM6ICIgKyBlcnJvck1hbmRhdG9yeUZpZWxkcwp9CgoKZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKQoKaWYgKCFlcnJvcnMgJiYgIXdhcm5pbmdzKXsKICAgIHJldHVybiB0cnVlCn1lbHNlewogICAgaWYoIWVycm9ycyAmJiB3YXJuaW5ncyl7CiAgICAgICAgZGVmIHdMaXN0ID0gbmV3IEFycmF5TGlzdCgpCiAgICAgICAgCiAgICAgICAgaWYod2FybmluZ0VtcHR5RmllbGRzLnNpemUoKSA+IDApewogICAgICAgICAgICBkZWYgd0xpc3RDb25maXJtRW1wdHkgPSBuZXcgQXJyYXlMaXN0KCkKICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHkuYWRkKCJXIikKICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHkuYWRkKCJDT05GSVJNX0VNUFRZX0ZJRUxEUyIpCiAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5LmFkZChudWxsKQogICAgICAgICAgICB3TGlzdENvbmZpcm1FbXB0eS5hZGQod2FybmluZ0VtcHR5RmllbGRzKQoKICAgICAgICAgICAgd0xpc3QuYWRkKHdMaXN0Q29uZmlybUVtcHR5KQogICAgICAgIH0KICAgICAgICAKICAgICAgICBvdXRwdXQuYWRkKHdMaXN0KQogICAgICAgIHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oJ3siVyI6IicgKyBvdXRwdXQudG9TdHJpbmcoKSArICcifScpCiAgICAgICAgLy90aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCJXIiwgb3V0cHV0LnRvU3RyaW5nKCkpICAgCiAgICB9CiAgICBpZihlcnJvcnMgJiYgIXdhcm5pbmdzKXsKICAgICAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KCkKICAgICAgICAKICAgICAgICBpZihlcnJvck1hbmRhdG9yeUZpZWxkcy5zaXplKCkgPiAwKXsKICAgICAgICAgICAgZGVmIGVMaXN0TWFuZGF0b3J5ID0gbmV3IEFycmF5TGlzdCgpCiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZCgiRSIpCiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZCgiTUFOREFUT1JZX0ZJRUxEUyIpCiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZChudWxsKQogICAgICAgICAgICBlTGlzdE1hbmRhdG9yeS5hZGQoZXJyb3JNYW5kYXRvcnlGaWVsZHMpCiAgICAgICAgICAgIGVMaXN0LmFkZChlTGlzdE1hbmRhdG9yeSkKICAgICAgICB9CiAgICAgICAgb3V0cHV0LmFkZChlTGlzdCkKICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7IkUiOiInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnIn0nKQogICAgICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigiRSIsIG91dHB1dC50b1N0cmluZygpKSAgIAogICAgfQogICAgaWYoZXJyb3JzICYmIHdhcm5pbmdzKXsKICAgICAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KCkKICAgICAgICBkZWYgd0xpc3QgPSBuZXcgQXJyYXlMaXN0KCkKICAgICAgICAKICAgICAgICBpZihlcnJvck1hbmRhdG9yeUZpZWxkcy5zaXplKCkgPiAwKXsKICAgICAgICAgICAgZGVmIGVMaXN0TWFuZGF0b3J5ID0gbmV3IEFycmF5TGlzdCgpCiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZCgiRSIpCiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZCgiTUFOREFUT1JZX0ZJRUxEUyIpCiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZChudWxsKQogICAgICAgICAgICBlTGlzdE1hbmRhdG9yeS5hZGQoZXJyb3JNYW5kYXRvcnlGaWVsZHMpCiAgICAgICAgICAgIGVMaXN0LmFkZChlTGlzdE1hbmRhdG9yeSkKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgaWYod2FybmluZ0VtcHR5RmllbGRzLnNpemUoKSA+IDApewogICAgICAgICAgICBkZWYgd0xpc3RDb25maXJtRW1wdHkgPSBuZXcgQXJyYXlMaXN0KCkKICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHkuYWRkKCJXIikKICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHkuYWRkKCJDT05GSVJNX0VNUFRZX0ZJRUxEUyIpCiAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5LmFkZChudWxsKQogICAgICAgICAgICB3TGlzdENvbmZpcm1FbXB0eS5hZGQod2FybmluZ0VtcHR5RmllbGRzKQoKICAgICAgICAgICAgd0xpc3QuYWRkKHdMaXN0Q29uZmlybUVtcHR5KQogICAgICAgIH0KICAgICAgICAKICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KQogICAgICAgIG91dHB1dC5hZGQod0xpc3QpCiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigneyJXRSI6IicgKyBvdXRwdXQudG9TdHJpbmcoKSArICcifScpCiAgICAgICAgLy90aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCJXRSIsIG91dHB1dC50b1N0cmluZygpKSAgCiAgICB9Cn0=</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">ebf32ca3-2ea4-4039-9460-4705d533e401</arg>
              <arg name="FIELD_NOTES">YCFgQ3JlYXRlIFNOIGZvciBvbGQgdGlja2V0cw==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuXG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUubGluay5Jc3N1ZUxpbmtcblxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpO1xuQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpO1xuXG5kZWYgU04gPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfU0FQX1NFUlZJQ0VfTk9USUZJQ0FUSU9OXCIpWzBdXG5kZWYgcmVxdWVzdE1ldGhvZFxuZGVmIGJhc2VVUkxcblxuVVJMIHVybFxuSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvblxuXG5pZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKFNOKSA9PSBudWxsICYmIGlzc3VlLmlzc3VlVHlwZS5uYW1lICE9IFwiUGxhbm5lZCBNYWludGVuYW5jZSBUaWNrZXRcIil7XG4gICAgcmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuXG4gICAgZGVmIGJvZHlfcmVxID0gW11cbiAgICBib2R5X3JlcSA9IFtcbiAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXksXG4gICAgICAgIFwic3RhdHVzXCI6IFwiT1BFXCJcbiAgICBdIFxuXG4gICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvYWZ0ZXIvc2FsZXMvY3JlYXRlL3NlcnZpY2Uvbm90aWZpY2F0aW9uXCJcblxuICAgIGxvZy5kZWJ1ZyBcImJhc2VVUkwgU046IFwiICsgYmFzZVVSTFxuICAgIGxvZy5kZWJ1ZyBcImJvZHlfcmVxIFNOOiBcIiArIGJvZHlfcmVxXG4gICAgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG4gICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxuICAgIGxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpO1xuXG4gICAgZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KClcblxuICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMVwiKSl7XG4gICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG4gICAgICAgIFxuICAgICAgICBkZWYgb3V0cHV0TXNnID0gKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0XG4gICAgICAgIGxvZy5kZWJ1ZyBcIigoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dDogXCIgKyBvdXRwdXRNc2dcblxuICAgICAgICBkZWYganNvblNsdXJwZXIgPSBuZXcgSnNvblNsdXJwZXIoKVxuICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgICAgICBhc3NlcnQganNvbl9vYmplY3QgaW5zdGFuY2VvZiBNYXAgIFxuICAgICAgICBsb2cuZGVidWcgXCJtZXNzYWdlOiBcIiArICBqc29uX29iamVjdC5tZXNzYWdlXG4gICAgICAgIGxvZy5kZWJ1ZyBcImVycm9yczogXCIgKyAganNvbl9vYmplY3QuZXJyb3JzLnRvU3RyaW5nKClcblxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIk9QLVNBUC1TTi1VUERBVEVcIilcbiAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5lcnJvcnNbMF0pXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChlcnJvck1zZ3MpXG4gICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycylcblxuICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcbiAgICB9XG59Iiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="3">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">5c617aad-7d1a-4805-8e97-6b2c635a187e</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IE5ldyBJbnN0YWxsYXRpb24gLSBDaGVjayBsaW5rZWRUaWNrZXRzICYgRmFzdC1UcmFuc2FjdCB0aGVt</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT"></arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">c78e1ae3244cda5eddd8f7276fcd5db77569ce43</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IExpbmtlZCBUaWNrZXRzOiBjaGVjayBhbmQgbGluayByZWxhdGVkIGlzc3Vlcw==</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlXG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlclxuaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnlcbmltcG9ydCBncm9vdnkuanNvbi5Kc29uQnVpbGRlclxuaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyXG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29uZmlnLnV0aWwuSmlyYUhvbWVcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmV2ZW50LnR5cGUuRXZlbnREaXNwYXRjaE9wdGlvblxuaW1wb3J0IGphdmEudGV4dC5TaW1wbGVEYXRlRm9ybWF0XG5pbXBvcnQgamF2YS50ZXh0LlBhcnNlRXhjZXB0aW9uXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLnNlY3VyaXR5LkppcmFBdXRoZW50aWNhdGlvbkNvbnRleHRcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuYmMuaXNzdWUuSXNzdWVTZXJ2aWNlLklzc3VlUmVzdWx0XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmpxbC5wYXJzZXIuSnFsUXVlcnlQYXJzZXJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuYmMuaXNzdWUuc2VhcmNoLlNlYXJjaFNlcnZpY2VcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEudXNlci51dGlsLlVzZXJVdGlsXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLndlYi5iZWFuLlBhZ2VyRmlsdGVyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuTGlua0NvbGxlY3Rpb25JbXBsO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5saW5rLklzc3VlTGluaztcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTW9kaWZpZWRWYWx1ZVxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS51dGlsLkRlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlclxuXG5pbXBvcnQgZ3Jvb3Z5LnV0aWwubG9nZ2luZy5TbGY0alxuaW1wb3J0IGphdmEudXRpbC5jb25jdXJyZW50LkNvbmN1cnJlbnRIYXNoTWFwXG5pbXBvcnQgamF2YXguYW5ub3RhdGlvbi5Qb3N0Q29uc3RydWN0XG5pbXBvcnQgb3JnLnNwcmluZ2ZyYW1ld29yay5jYWNoZS5hbm5vdGF0aW9uLkNhY2hlYWJsZVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbi8qU2NyaXB0IFZhcmlhYmxlcyovXG4vL1BlciBQb3N0IEZ1bmN0aW9uXG5pc3N1ZSA9IGlzc3VlXG4vL1BlciB0ZXN0IGRhIGNvbnNvbGVcbi8vSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpXG4vL2lzc3VlID0gaXNzdWVNYW5hZ2VyLmdldElzc3VlQnlLZXlJZ25vcmVDYXNlKFwiT1BVVC0yNDFcIilcblxuLypJbnNpZ2h0IGNsYXNzZXMgJiBjb21wb25lbnRzKi9cbkNsYXNzIG9iamVjdEZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdEZhY2FkZVwiKTsgIFxuQ2xhc3Mgb2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVcIik7XG5vYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyk7XG5vYmplY3RGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0RmFjYWRlQ2xhc3MpO1xuLyogR2V0IEluc2lnaHQgSVFMIEZhY2FkZSBmcm9tIHBsdWdpbiBhY2Nlc3NvciAqL1xuQ2xhc3MgaXFsRmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKFwiY29tLnJpYWRhbGFicy5qaXJhLnBsdWdpbnMuaW5zaWdodC5jaGFubmVsLmV4dGVybmFsLmFwaS5mYWNhZGUuSVFMRmFjYWRlXCIpOyBcbmlxbEZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShpcWxGYWNhZGVDbGFzcyk7XG5DbGFzcyBvYmplY3RBdHRyaWJ1dGVCZWFuRmFjdG9yeUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuc2VydmljZXMubW9kZWwuZmFjdG9yeS5PYmplY3RBdHRyaWJ1dGVCZWFuRmFjdG9yeVwiKTtcbm9iamVjdEF0dHJpYnV0ZUJlYW5GYWN0b3J5ID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKG9iamVjdEF0dHJpYnV0ZUJlYW5GYWN0b3J5Q2xhc3MpO1xuLyogR2V0IEluc2lnaHQgT2JqZWN0IFR5cGUgRmFjYWRlIGZyb20gcGx1Z2luIGFjY2Vzc29yICovXG5DbGFzcyBvYmplY3RUeXBlRmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKFwiY29tLnJpYWRhbGFicy5qaXJhLnBsdWdpbnMuaW5zaWdodC5jaGFubmVsLmV4dGVybmFsLmFwaS5mYWNhZGUuT2JqZWN0VHlwZUZhY2FkZVwiKTsgXG5vYmplY3RUeXBlRmFjYWRlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKG9iamVjdFR5cGVGYWNhZGVDbGFzcyk7XG5cbi8qQ3VzdG9tZmllbGRzKi9cbmRlZiBzdXBwbGllckNGID0gcHJvcGVydGllc1snY2Yuc3VwcGxpZXInXSA/IHByb3BlcnRpZXNbJ2NmLnN1cHBsaWVyJ10udG9TdHJpbmcoKSA6IFwiT1BfU1VQUExJRVJcIlxuZGVmIHN1cHBsaWVyRmllbGQgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHN1cHBsaWVyQ0YpWzBdXG5kZWYgcGxhbm5lZERhdGUgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLnBsYW5uZWREYXRlJ10udG9TdHJpbmcoKSlbMF1cbmRlZiBzaXRlID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi5zaXRlJ10udG9TdHJpbmcoKSlbMF1cbmRlZiB3YnNQcmogPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLndic1ByaiddID8gcHJvcGVydGllc1snY2Yud2JzUHJqJ10udG9TdHJpbmcoKSA6IFwiT1BfV0JTX1BSSlwiKVswXVxubG9nLmRlYnVnIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc3VwcGxpZXJGaWVsZClcblxuSmlyYUF1dGhlbnRpY2F0aW9uQ29udGV4dCBhdXRoQ29udGV4dCA9IENvbXBvbmVudEFjY2Vzc29yLmdldEppcmFBdXRoZW50aWNhdGlvbkNvbnRleHQoKVxuZGVmIGpxbFF1ZXJ5UGFyc2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q29tcG9uZW50KEpxbFF1ZXJ5UGFyc2VyKVxuZGVmIHNlYXJjaFNlcnZpY2UgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDb21wb25lbnQoU2VhcmNoU2VydmljZSlcblVzZXJVdGlsIHVzZXJVdGlsID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0VXNlclV0aWwoKVxuZGVmIHVzZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5qaXJhQXV0aGVudGljYXRpb25Db250ZXh0LmxvZ2dlZEluVXNlclxuZGVmIHJlcXVlc3RNZXRob2RcbmRlZiBiYXNlVVJMXG5cbmRlZiBzdXBwbGllciA9IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc3VwcGxpZXJGaWVsZCkgPyBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHN1cHBsaWVyRmllbGQpLmZpcnN0KCkudG9TdHJpbmcoKSA6IG51bGxcbmxvZy5kZWJ1ZyBcInN1cHBsaWVyOiBcIiArIHN1cHBsaWVyXG5cbmlmKHN1cHBsaWVyKXtcbiAgICAvL0xpbmsgaXNzdWVzIGFzc2lnbmVkIHRvIHRoZSBzYW1lIHZlbmRvclxuICAgIHN1cHBsaWVyID0gc3VwcGxpZXIuc3Vic3RyaW5nKDEsc3VwcGxpZXIuaW5kZXhPZignKCcpLTEpXG5cbiAgICBMaXN0PElzc3VlTGluaz4gYWxsSW5DdXJyZW50SXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldElud2FyZExpbmtzKGlzc3VlLmdldElkKCkpO1xuICAgIExpc3Q8SXNzdWVMaW5rPiBhbGxPdXRDdXJyZW50SXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldE91dHdhcmRMaW5rcyhpc3N1ZS5nZXRJZCgpKTtcbiAgICBkZWYgYWxyZWFkeUxpbmtlZD1mYWxzZVxuXG4vLyAgICBkZWYganFsU2VhcmNoID0gXCJwcm9qZWN0ID0gJ1wiICsgaXNzdWUuZ2V0UHJvamVjdE9iamVjdCgpLm5hbWUgKyBcIicgQU5EIGlzc3VldHlwZSA9ICdcIiArIGlzc3VlLmdldElzc3VlVHlwZSgpLm5hbWUgKyBcIicgQU5EIGtleSAhPSAnXCIgKyBpc3N1ZS5rZXkudG9TdHJpbmcoKSArIFwiJyBBTkQgJ09QX1NVUFBMSUVSJyBpbiBpcWxGdW5jdGlvbignXCIgKyBwcm9wZXJ0aWVzWydpb2JqLnN1cHBpbnN0LnN1cHBsaWVyUmVmJ10udG9TdHJpbmcoKSArIFwiIExJS0UgXFxcIlwiICsgc3VwcGxpZXIucmVwbGFjZUFsbChcIidcIixcIlxcJ1wiKSArIFwiXFxcIicpXCIgKyBcIiBBTkQgJ1wiICsgcHJvcGVydGllc1snY2Yuc2l0ZSddLnRvU3RyaW5nKCkgKyBcIicgPSAnXCIgKyBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHNpdGUpLmZpcnN0KCkudG9TdHJpbmcoKS5yZXBsYWNlQWxsKFwiJ1wiLFwiXFwnXCIpICsgXCInIEFORCBzdGF0dXMgSU4gKCdcIiArIHByb3BlcnRpZXNbJ3dmLmFjY2VwdGVkQnlTdXBwbGllciddLnRvU3RyaW5nKCkgKyBcIicpIEFORCBcIiArIChpc3N1ZS5pc3N1ZVR5cGUubmFtZS5lcXVhbHMoXCJNYWludGVuYW5jZSBUaWNrZXRcIikgPyAocHJvcGVydGllc1snY2YucGxhbm5lZERhdGUnXS50b1N0cmluZygpICsgXCIgPj0gJ1wiICsgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShwbGFubmVkRGF0ZSkuZm9ybWF0KFwieXl5eS1NTS1kZCBISDptbVwiKSArIFwiJyBBTkQgXCIgKyBwcm9wZXJ0aWVzWydjZi5wbGFubmVkRGF0ZSddLnRvU3RyaW5nKCkgKyBcIiA8PSAnXCIgKyBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHBsYW5uZWREYXRlKS5mb3JtYXQoXCJ5eXl5LU1NLWRkXCIpLnRvU3RyaW5nKCkgKyBcIiAyMzo1OVwiICsgXCInXCIpIDogKHByb3BlcnRpZXNbJ2NmLndic1ByaiddID8gcHJvcGVydGllc1snY2Yud2JzUHJqJ10udG9TdHJpbmcoKSA6IFwiT1BfV0JTX1BSSlwiKSArIFwiID0gJ1wiICsgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZSh3YnNQcmopICsgXCInXCIpXG4gICAgZGVmIGFhU2NoZW1hSWQgPSBwcm9wZXJ0aWVzWydpc2NoZW1hLmFhLmlkJ107XG4gICAgZGVmIGpxbFNlYXJjaCA9IFwicHJvamVjdCA9ICdcIiArIGlzc3VlLmdldFByb2plY3RPYmplY3QoKS5uYW1lICsgXCInIEFORCBpc3N1ZXR5cGUgPSAnXCIgKyBpc3N1ZS5nZXRJc3N1ZVR5cGUoKS5uYW1lICsgXCInIEFORCBrZXkgIT0gJ1wiICsgaXNzdWUua2V5LnRvU3RyaW5nKCkgKyBcIicgQU5EICdPUF9TVVBQTElFUicgaW4gaXFsRnVuY3Rpb24oJ29iamVjdFNjaGVtYUlkID0gXCIgKyBhYVNjaGVtYUlkICsgXCIgQU5EIG9iamVjdFR5cGUgPSBTdXBwbGllcl9JbnN0YWxsYXRpb24gQU5EIG9iamVjdCBIQVZJTkcgaW5ib3VuZFJlZmVyZW5jZXMob2JqZWN0U2NoZW1hSWQgPSBcIiArIGFhU2NoZW1hSWQgKyBcIiBBTkQgb2JqZWN0VHlwZSA9IFN1cHBsaWVyIEFORCBOYW1lIExJS0UgXFxcIlwiICsgc3VwcGxpZXIucmVwbGFjZUFsbChcIidcIixcIlxcJ1wiKSArIFwiXFxcIiknKVwiICsgXCIgQU5EICdcIiArIHByb3BlcnRpZXNbJ2NmLnNpdGUnXS50b1N0cmluZygpICsgXCInID0gJ1wiICsgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzaXRlKS5maXJzdCgpLnRvU3RyaW5nKCkucmVwbGFjZUFsbChcIidcIixcIlxcJ1wiKSArIFwiJyBBTkQgc3RhdHVzIElOICgnXCIgKyBwcm9wZXJ0aWVzWyd3Zi5hY2NlcHRlZEJ5U3VwcGxpZXInXS50b1N0cmluZygpICsgXCInKSBBTkQgXCIgKyAoaXNzdWUuaXNzdWVUeXBlLm5hbWUuZXF1YWxzKFwiTWFpbnRlbmFuY2UgVGlja2V0XCIpID8gKHByb3BlcnRpZXNbJ2NmLnBsYW5uZWREYXRlJ10udG9TdHJpbmcoKSArIFwiID49ICdcIiArIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUocGxhbm5lZERhdGUpLmZvcm1hdChcInl5eXktTU0tZGQgSEg6bW1cIikgKyBcIicgQU5EIFwiICsgcHJvcGVydGllc1snY2YucGxhbm5lZERhdGUnXS50b1N0cmluZygpICsgXCIgPD0gJ1wiICsgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShwbGFubmVkRGF0ZSkuZm9ybWF0KFwieXl5eS1NTS1kZFwiKS50b1N0cmluZygpICsgXCIgMjM6NTlcIiArIFwiJ1wiKSA6IChwcm9wZXJ0aWVzWydjZi53YnNQcmonXSA/IHByb3BlcnRpZXNbJ2NmLndic1ByaiddLnRvU3RyaW5nKCkgOiBcIk9QX1dCU19QUkpcIikgKyBcIiA9ICdcIiArIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUod2JzUHJqKSArIFwiJ1wiKVxuICAgIGxvZy5kZWJ1ZyBcInJpY2VyY2E6IFwiICsganFsU2VhcmNoXG4gICAgZGVmIHF1ZXJ5ID0ganFsUXVlcnlQYXJzZXIucGFyc2VRdWVyeShqcWxTZWFyY2gpXG4gICAgbG9nLmRlYnVnIFwicXVlcnk6IFwiICsgcXVlcnlcbiAgICBkZWYgc2VhcmNoID0gc2VhcmNoU2VydmljZS5zZWFyY2godXNlciwgcXVlcnksIFBhZ2VyRmlsdGVyLmdldFVubGltaXRlZEZpbHRlcigpKVxuICAgIGRlZiBmb3VuZD1mYWxzZVxuICAgIGRlZiBmb3VuZE91dHdhcmQ9ZmFsc2VcbiAgICBkZWYgbGlua2VkSXNzdWVcbiAgICBpZiAoc2VhcmNoLnJlc3VsdHMpIHtcdFxuICAgICAgICBmb3IgKGkgaW4gc2VhcmNoLnJlc3VsdHMuZmlyc3QoKSl7XG4gICAgICAgICAgICAvKlBlciBvZ25pIGlzc3VlIHJlc3RpdHVpdGEgZGFsbGEgcXVlcnkgSlFMIHZlcmlmaWNvIHNlIGhhIGdpXHUwMGUwIGRlaSBsaW5rIFJlbGF0ZXMgVG8qL1xuICAgICAgICAgICAgbG9nLmRlYnVnIGkua2V5XG5cbiAgICAgICAgICAgIGRlZiBpc3N1ZVNlcnZpY2UgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZVNlcnZpY2UoKVxuXG4gICAgICAgICAgICBMaXN0PElzc3VlTGluaz4gYWxsSW5Jc3N1ZUxpbmsgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZUxpbmtNYW5hZ2VyKCkuZ2V0SW53YXJkTGlua3MoaS5nZXRJZCgpKTtcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcImFsbEluSXNzdWVMaW5rOiBcIiArIGFsbEluSXNzdWVMaW5rXG4gICAgICAgICAgICBmb3IgKEl0ZXJhdG9yPElzc3VlTGluaz4gb3V0SXRlcmF0b3IgPSBhbGxJbklzc3VlTGluay5pdGVyYXRvcigpOyBvdXRJdGVyYXRvci5oYXNOZXh0KCk7KSB7XG4gICAgICAgICAgICAgICAgSXNzdWVMaW5rIGlzc3VlTGluayA9IChJc3N1ZUxpbmspIG91dEl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgICAgICBkZWYgbGlua2VkSXNzdWVUZW1wID0gaXNzdWVMaW5rLmdldFNvdXJjZU9iamVjdCgpXG4gICAgICAgICAgICAgICAgU3RyaW5nIHR5cGUgPSBsaW5rZWRJc3N1ZVRlbXAuZ2V0SXNzdWVUeXBlKCkuZ2V0TmFtZSgpO1xuXG4gICAgICAgICAgICAgICAgbG9nLmRlYnVnIFwiaXNzdWVsaW5rIFR5cGU6IFwiICsgaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpXG4gICAgICAgICAgICAgICAgbG9nLmRlYnVnIFwic291cmNlSXNzdWU6IFwiICsgaXNzdWVMaW5rLmdldFNvdXJjZU9iamVjdCgpXG4gICAgICAgICAgICAgICAgbG9nLmRlYnVnIFwiZGVzdGluYXRpb25Jc3N1ZTogXCIgKyBpc3N1ZUxpbmsuZ2V0RGVzdGluYXRpb25PYmplY3QoKVxuXG4gICAgICAgICAgICAgICAgaWYoaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNSZWxhdGVzJ10udG9TdHJpbmcoKSkgJiYgaXNzdWVMaW5rLmdldFNvdXJjZU9iamVjdCgpLmtleSE9aXNzdWUua2V5KXtcbiAgICAgICAgICAgICAgICAgICAgbG9nLmRlYnVnIFwidHJvdmF0byBpbldhcmRMaW5rIC0gcHJlbmRvIGxhIHNvdXJjZSBpc3N1ZSBcIiArIGxpbmtlZElzc3VlVGVtcCArIFwiIGUgbGEgbGVnbyBhbGxhIGlzc3VlIGNvcnJlbnRlIHNvbG8gc2Ugbm9uIFx1MDBlOCBnaVx1MDBlMCBsaW5rYXRhXCJcbiAgICAgICAgICAgICAgICAgICAgYWxyZWFkeUxpbmtlZD1mYWxzZVxuICAgICAgICAgICAgICAgICAgICBmb3IobGkgaW4gYWxsSW5DdXJyZW50SXNzdWVMaW5rKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGxpbmtlZElzc3VlVGVtcC5nZXRJZCgpID09IGxpLmdldFNvdXJjZU9iamVjdCgpLmdldElkKCkgfHwgbGlua2VkSXNzdWVUZW1wLmdldElkKCkgPT0gbGkuZ2V0RGVzdGluYXRpb25PYmplY3QoKS5nZXRJZCgpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHJlYWR5TGlua2VkPXRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmb3IobGkgaW4gYWxsT3V0Q3VycmVudElzc3VlTGluayl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihsaW5rZWRJc3N1ZVRlbXAuZ2V0SWQoKSA9PSBsaS5nZXRTb3VyY2VPYmplY3QoKS5nZXRJZCgpIHx8IGxpbmtlZElzc3VlVGVtcC5nZXRJZCgpID09IGxpLmdldERlc3RpbmF0aW9uT2JqZWN0KCkuZ2V0SWQoKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxyZWFkeUxpbmtlZD10cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZm91bmQ9dHJ1ZVxuICAgICAgICAgICAgICAgICAgICBpZighYWxyZWFkeUxpbmtlZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2cuZGVidWcgXCJub24gXHUwMGU4IGxpbmthdGEsIGxhIGxpbmtvXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTGlua01hbmFnZXIoKS5jcmVhdGVJc3N1ZUxpbmsobGlua2VkSXNzdWVUZW1wLmdldElkKCksIGlzc3VlLmdldElkKCksIExvbmcucGFyc2VMb25nKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNSZWxhdGVzSWQnXS50b1N0cmluZygpKSwgMSwgdXNlcik7IFxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBSRVNUIEFQSSBwZXIgcHVsaXppYSBjYWNoZSBpc3N1ZSBsaW5rYXRhICovXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0TWV0aG9kID0gXCJHRVRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qU2NyaXB0IFZhcmlhYmxlcyovXG4gICAgICAgICAgICAgICAgICAgICAgICAvL1BlciB0ZXN0IGRhIGNvbnNvbGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vSXNzdWUgaXNzdWUgPSBpc3N1ZU1hbmFnZXIuZ2V0SXNzdWVCeUtleUlnbm9yZUNhc2UoXCJBQVMtMzI1MzVcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9hdXRvbWF0aW9uL2NsZWFyQ2FjaGUvdGlja2V0a2V5L1wiICsgbGlua2VkSXNzdWVUZW1wLmtleVxuICAgICAgICAgICAgICAgICAgICAgICAgVVJMIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcbiAgICAgICAgICAgICAgICAgICAgICAgIEh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAwXCIpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyBcImdpXHUwMGUwIGxpbmthdGEsIG5vbiBsYSBsaW5rbyBkaSBudW92b1wiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIExpc3Q8SXNzdWVMaW5rPiBhbGxPdXRJc3N1ZUxpbmsgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZUxpbmtNYW5hZ2VyKCkuZ2V0T3V0d2FyZExpbmtzKGkuZ2V0SWQoKSk7XG4gICAgICAgICAgICBsb2cuZGVidWcgXCJhbGxPdXRJc3N1ZUxpbms6IFwiICsgYWxsT3V0SXNzdWVMaW5rXG4gICAgICAgICAgICBmb3IgKEl0ZXJhdG9yPElzc3VlTGluaz4gb3V0SXRlcmF0b3IgPSBhbGxPdXRJc3N1ZUxpbmsuaXRlcmF0b3IoKTsgb3V0SXRlcmF0b3IuaGFzTmV4dCgpOykge1xuICAgICAgICAgICAgICAgIElzc3VlTGluayBpc3N1ZUxpbmsgPSAoSXNzdWVMaW5rKSBvdXRJdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICAgICAgZGVmIGxpbmtlZElzc3VlVGVtcCA9IGlzc3VlTGluay5nZXREZXN0aW5hdGlvbk9iamVjdCgpXG4gICAgICAgICAgICAgICAgU3RyaW5nIHR5cGUgPSBsaW5rZWRJc3N1ZVRlbXAuZ2V0SXNzdWVUeXBlKCkuZ2V0TmFtZSgpO1xuXG4gICAgICAgICAgICAgICAgbG9nLmRlYnVnIFwiaXNzdWVsaW5rIFR5cGU6IFwiICsgaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpXG4gICAgICAgICAgICAgICAgbG9nLmRlYnVnIFwic291cmNlSXNzdWU6IFwiICsgaXNzdWVMaW5rLmdldFNvdXJjZU9iamVjdCgpXG4gICAgICAgICAgICAgICAgbG9nLmRlYnVnIFwiZGVzdGluYXRpb25Jc3N1ZTogXCIgKyBpc3N1ZUxpbmsuZ2V0RGVzdGluYXRpb25PYmplY3QoKVxuXG4gICAgICAgICAgICAgICAgaWYoaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNSZWxhdGVzJ10udG9TdHJpbmcoKSkgJiYgaXNzdWVMaW5rLmdldERlc3RpbmF0aW9uT2JqZWN0KCkua2V5IT1pc3N1ZS5rZXkpe1xuICAgICAgICAgICAgICAgICAgICBmb3VuZD10cnVlXG4gICAgICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyBcInRyb3ZhdG8gb3V0V2FyZExpbmsgLSBwcmVuZG8gbGEgZGVzdGluYXRpb24gaXNzdWUgXCIgKyBsaW5rZWRJc3N1ZVRlbXAgKyBcIiBlIGxhIGxlZ28gYWxsYSBpc3N1ZSBjb3JyZW50ZSBzb2xvIHNlIG5vbiBcdTAwZTggZ2lcdTAwZTAgbGlua2F0YVwiXG5cbiAgICAgICAgICAgICAgICAgICAgYWxyZWFkeUxpbmtlZD1mYWxzZVxuICAgICAgICAgICAgICAgICAgICBmb3IobGkgaW4gYWxsSW5DdXJyZW50SXNzdWVMaW5rKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGxpbmtlZElzc3VlVGVtcC5nZXRJZCgpID09IGxpLmdldFNvdXJjZU9iamVjdCgpLmdldElkKCkgfHwgbGlua2VkSXNzdWVUZW1wLmdldElkKCkgPT0gbGkuZ2V0RGVzdGluYXRpb25PYmplY3QoKS5nZXRJZCgpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHJlYWR5TGlua2VkPXRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmb3IobGkgaW4gYWxsT3V0Q3VycmVudElzc3VlTGluayl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihsaW5rZWRJc3N1ZVRlbXAuZ2V0SWQoKSA9PSBsaS5nZXRTb3VyY2VPYmplY3QoKS5nZXRJZCgpIHx8IGxpbmtlZElzc3VlVGVtcC5nZXRJZCgpID09IGxpLmdldERlc3RpbmF0aW9uT2JqZWN0KCkuZ2V0SWQoKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxyZWFkeUxpbmtlZD10cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZm91bmQ9dHJ1ZVxuICAgICAgICAgICAgICAgICAgICBpZighYWxyZWFkeUxpbmtlZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2cuZGVidWcgXCJub24gXHUwMGU4IGxpbmthdGEsIGxhIGxpbmtvXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTGlua01hbmFnZXIoKS5jcmVhdGVJc3N1ZUxpbmsoaXNzdWUuZ2V0SWQoKSwgbGlua2VkSXNzdWVUZW1wLmdldElkKCksIExvbmcucGFyc2VMb25nKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNSZWxhdGVzSWQnXS50b1N0cmluZygpKSwgMSwgdXNlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIFJFU1QgQVBJIHBlciBwdWxpemlhIGNhY2hlIGlzc3VlIGxpbmthdGEgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RNZXRob2QgPSBcIkdFVFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgLypTY3JpcHQgVmFyaWFibGVzKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vUGVyIHRlc3QgZGEgY29uc29sZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy9Jc3N1ZSBpc3N1ZSA9IGlzc3VlTWFuYWdlci5nZXRJc3N1ZUJ5S2V5SWdub3JlQ2FzZShcIkFBUy0zMjUzNVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2F1dG9tYXRpb24vY2xlYXJDYWNoZS90aWNrZXRrZXkvXCIgKyBsaW5rZWRJc3N1ZVRlbXAua2V5XG4gICAgICAgICAgICAgICAgICAgICAgICBVUkwgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgICAgICAgICAgICAgICAgICAgICAgSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdE1ldGhvZChyZXF1ZXN0TWV0aG9kKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJBY2NlcHRcIiwgXCIqLypcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5jb25uZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZUNvZGU6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDBcIikpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZUNvZGU6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyBcImdpXHUwMGUwIGxpbmthdGEsIG5vbiBsYSBsaW5rbyBkaSBudW92b1wiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ZWxzZSBpZihpc3N1ZUxpbmsuaXNzdWVMaW5rVHlwZS5nZXROYW1lKCkudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snaWwubGlua2VkVGt0c1JlbGF0ZXMnXS50b1N0cmluZygpKSAmJiBpc3N1ZUxpbmsuZ2V0RGVzdGluYXRpb25PYmplY3QoKS5rZXk9PWlzc3VlLmtleSl7XG4gICAgICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyBcImlzc3VlIGdpXHUwMGUwIGxpbmthdGFcIlxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbG9nLmRlYnVnIFwiQ3JlbyBsaW5rIHRyYSBsYSBpc3N1ZSBvZ2dldHRvIGRpIHRyYW5zaXRpb24gZSBsYSBpc3N1ZSByaXN1bHRhbnRlIGRhbCBmaWx0cm8gc2Ugbm9uIFx1MDBlOCBnaVx1MDBlMCBsaW5rYXRhXCJcbiAgICAgICAgICAgIGFscmVhZHlMaW5rZWQ9ZmFsc2VcbiAgICAgICAgICAgIGZvcihsaSBpbiBhbGxJbkN1cnJlbnRJc3N1ZUxpbmspe1xuICAgICAgICAgICAgICAgIGlmKGkuZ2V0SWQoKSA9PSBsaS5nZXRTb3VyY2VPYmplY3QoKS5nZXRJZCgpIHx8IGkuZ2V0SWQoKSA9PSBsaS5nZXREZXN0aW5hdGlvbk9iamVjdCgpLmdldElkKCkpe1xuICAgICAgICAgICAgICAgICAgICBhbHJlYWR5TGlua2VkPXRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IobGkgaW4gYWxsT3V0Q3VycmVudElzc3VlTGluayl7XG4gICAgICAgICAgICAgICAgaWYoaS5nZXRJZCgpID09IGxpLmdldFNvdXJjZU9iamVjdCgpLmdldElkKCkgfHwgaS5nZXRJZCgpID09IGxpLmdldERlc3RpbmF0aW9uT2JqZWN0KCkuZ2V0SWQoKSl7XG4gICAgICAgICAgICAgICAgICAgIGFscmVhZHlMaW5rZWQ9dHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKCFhbHJlYWR5TGlua2VkKXtcbiAgICAgICAgICAgICAgICBsb2cuZGVidWcgXCJub24gXHUwMGU4IGxpbmthdGEsIGxhIGxpbmtvXCJcbiAgICAgICAgICAgICAgICBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZUxpbmtNYW5hZ2VyKCkuY3JlYXRlSXNzdWVMaW5rKGkuZ2V0SWQoKSwgaXNzdWUuZ2V0SWQoKSwgTG9uZy5wYXJzZUxvbmcocHJvcGVydGllc1snaWwubGlua2VkVGt0c1JlbGF0ZXNJZCddLnRvU3RyaW5nKCkpLCAxLCB1c2VyKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvKiBSRVNUIEFQSSBwZXIgcHVsaXppYSBjYWNoZSBpc3N1ZSBsaW5rYXRhICovXG4gICAgICAgICAgICAgICAgcmVxdWVzdE1ldGhvZCA9IFwiR0VUXCI7XG4gICAgICAgICAgICAgICAgLypTY3JpcHQgVmFyaWFibGVzKi9cbiAgICAgICAgICAgICAgICAvL1BlciB0ZXN0IGRhIGNvbnNvbGVcbiAgICAgICAgICAgICAgICAvL0lzc3VlIGlzc3VlID0gaXNzdWVNYW5hZ2VyLmdldElzc3VlQnlLZXlJZ25vcmVDYXNlKFwiQUFTLTMyNTM1XCIpXG4gICAgICAgICAgICAgICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2F1dG9tYXRpb24vY2xlYXJDYWNoZS90aWNrZXRrZXkvXCIgKyBpLmtleVxuICAgICAgICAgICAgICAgIFVSTCB1cmwgPSBuZXcgVVJMKGJhc2VVUkwpXG4gICAgICAgICAgICAgICAgSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLThcIik7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJBY2NlcHRcIiwgXCIqLypcIik7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5jb25uZWN0KCk7XG4gICAgICAgICAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgICAgICAgICAgICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMFwiKSl7XG4gICAgICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgICAgICAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgICAgICAgICAgICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgbG9nLmRlYnVnIFwiZ2lcdTAwZTAgbGlua2F0YSwgbm9uIGxhIGxpbmtvIGRpIG51b3ZvXCJcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZy5lcnJvcihcIkludmFsaWQgSlFMOiBcIiArIGpxbFNlYXJjaCk7XG4gICAgfSBcbn1lbHNle1xuICAgIC8vaG93IHRvIGxpbmsgaXNzdWVzIGFzc2lnbmVkIHRvIHRoZSBzYW1lIGludGVybmFsIHRlY2hzPyBkbyB3ZSB3YW50IHRvIGRvIGl0P1xufVxuIiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT"></arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">a6604d0a-af28-40f6-84ec-7a2dc32df2b0</arg>
                  <arg name="FIELD_NOTES">YCFgT1AgRW1haWwgTm90aWZpY2F0aW9uOiBBQ0NFUFRFRF9CWV9TVVBQTElFUiAtIG1hbnRlbnV0YSBjb21lIHBvc3QgZnVuY3Rpb24gcGVyIGV2aXRhcmUgZGkgZ2VuZXJhcmUgYmxvY2NoaSBhbCBmb3JuaXRvcmUgbGVnYXRpIGFsbCdpbnZpbyBkaSBub3RpZmljaGUgaW50ZXJuZQ==</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnlcbmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuZGVmIHJlcXVlc3RNZXRob2QgPSBcIlBPU1RcIjtcblxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpO1xuQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpO1xuXG5kZWYgYm9keV9yZXEgPSBbXG5cdFwidGVtcGxhdGVOYW1lXCI6IHByb3BlcnRpZXNbJ3R0LmFjY2VwdGVkQnlTdXBwbGllciddLnRvU3RyaW5nKCksXG5cdFwicGVjXCI6IGZhbHNlLFxuICAgIFwiaXNzdWVLZXlcIjogaXNzdWUua2V5XG5dXG5cbmRlZiBiYXNlVVJMID0gXCJodHRwOi8vXCIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArIFwiL29wL3Jlc3QvamlyYS9BQS90cmFuc2FjdGlvbi9tYWlsL3NlbmRcIlxuVVJMIHVybFxudXJsID0gbmV3IFVSTChiYXNlVVJMKVxuXG5IdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xuY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLThcIik7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbmNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7XG5jb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7XG5jb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxubG9nLmRlYnVnIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5jb25uZWN0aW9uLmNvbm5lY3QoKTtcblxubG9nLmRlYnVnIFwidXJsOiBcIiArIHVybFxubG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxubG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxubG9nLmRlYnVnIFwiZ2V0UmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuXG4iLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7CmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5CkNhdGVnb3J5IGxvZyA9IENhdGVnb3J5LmdldEluc3RhbmNlKCJjb20ub25yZXNvbHZlLmppcmEuZ3Jvb3Z5LlBvc3RGdW5jdGlvbiIpCmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKQppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lcgppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGwKClByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKCkKRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJykKcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHsKCXByb3BlcnRpZXMubG9hZChpdCkKfQpkZWYgcmVxdWVzdE1ldGhvZCA9ICJQT1NUIjsKCklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTsKQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpOwoKZGVmIGJvZHlfcmVxID0gWwoJInRlbXBsYXRlTmFtZSI6IHByb3BlcnRpZXNbJ3R0LmFjY2VwdGVkQnlTdXBwbGllciddLnRvU3RyaW5nKCksCgkicGVjIjogZmFsc2UsCiAgICAiaXNzdWVLZXkiOiBpc3N1ZS5rZXkKXQoKZGVmIGJhc2VVUkwgPSAiaHR0cDovLyIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArICIvb3AvcmVzdC9qaXJhL0FBL3RyYW5zYWN0aW9uL21haWwvc2VuZCIKVVJMIHVybAp1cmwgPSBuZXcgVVJMKGJhc2VVUkwpCgpIdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7CmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KCJDb250ZW50LVR5cGUiLCAiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04Iik7CmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KCJBY2NlcHQiLCAiKi8qIik7CmNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7CmNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTsKY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0KY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcigiVVRGLTgiKSB7IG5ldyBTdHJlYW1pbmdKc29uQnVpbGRlcihpdCwgYm9keV9yZXEpIH0KbG9nLmRlYnVnIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtCmNvbm5lY3Rpb24uY29ubmVjdCgpOwoKbG9nLmRlYnVnICJ1cmw6ICIgKyB1cmwKbG9nLmRlYnVnICJSZXNwb25zZUNvZGU6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkKbG9nLmRlYnVnICJSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKbG9nLmRlYnVnICJnZXRSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKCg==</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="471" name="Clona Tkt" view="fieldscreen">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">20401</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">c659704c-9678-4844-9a05-6f3497e391e7</arg>
                <arg name="FIELD_NOTES">YCFgRW5hYmxlZCBvbmx5IGZvciBSZXBhaXIgYW5kIE5ldyBJbnN0YWxsYXRpb24=</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnTWFpbnRlbmFuY2UgVGlja2V0JyB8fCAoaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ05ldyBJbnN0YWxsYXRpb24nICYmIGNmVmFsdWVzWydPUF9BU1NFVCddICE9IG51bGwpIiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="2">
              <post-functions>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="fieldValue">New Installation</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="targetIssueTypeDefinedByCfSelection"></arg>
                  <arg name="issueTypeId">12301</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">SAME</arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="transitionAttachmentsOperation">copy</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="targetProjectSelectedCustomField"></arg>
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="subFunctions">[{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_21909&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21909&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22600&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22600&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22822&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22822&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22601&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22601&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22603&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22603&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22663&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22663&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22634&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22634&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22651&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22651&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22700&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22700&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22606&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22606&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22629&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22629&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22652&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22652&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;description&quot;,&quot;destinationFieldId&quot;:&quot;description&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22627&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22627&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22620&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22620&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22668&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22668&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23602&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23203&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22814&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22814&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23237&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23237&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;issuekey&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23243&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;YES&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23238&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22702&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22702&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22703&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22703&quot;}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="fieldValue">Maintenance Ticket</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="targetIssueTypeDefinedByCfSelection"></arg>
                  <arg name="issueTypeId">13001</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">SAME</arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="transitionAttachmentsOperation">copy</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="targetProjectSelectedCustomField"></arg>
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="subFunctions">[{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_21909&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21909&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22600&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22600&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22822&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22822&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22601&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22601&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22603&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22603&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22663&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22663&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22634&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22634&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22651&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22651&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22700&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22700&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22606&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22606&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22629&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22629&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22652&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22652&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;description&quot;,&quot;destinationFieldId&quot;:&quot;description&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22627&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22627&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22620&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22620&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22668&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22668&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23602&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23203&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22814&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22814&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23237&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23237&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;issuekey&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23243&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;YES&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23238&quot;}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23602</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="391" name="Modifica Pianificazione" view="fieldscreen">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">20113</meta>
          <results>
            <unconditional-result old-status="null" status="null" step="2">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="3" name="Accepted By Supplier">
      <meta name="jira.status.id">14328</meta>
      <actions>
<common-action id="111" />
<common-action id="101" />
<common-action id="91" />
<common-action id="121" />
        <action id="481" name="Clona Tkt" view="fieldscreen">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">20401</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">c659704c-9678-4844-9a05-6f3497e391e7</arg>
                <arg name="FIELD_NOTES">YCFgRW5hYmxlZCBvbmx5IGZvciBSZXBhaXIgYW5kIE5ldyBJbnN0YWxsYXRpb24=</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnTWFpbnRlbmFuY2UgVGlja2V0JyB8fCAoaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ05ldyBJbnN0YWxsYXRpb24nICYmIGNmVmFsdWVzWydPUF9BU1NFVCddICE9IG51bGwpIiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="3">
              <post-functions>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="fieldValue">New Installation</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="targetIssueTypeDefinedByCfSelection"></arg>
                  <arg name="issueTypeId">12301</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">SAME</arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="transitionAttachmentsOperation">copy</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="targetProjectSelectedCustomField"></arg>
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="subFunctions">[{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_21909&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21909&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22600&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22600&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22822&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22822&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22601&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22601&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22603&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22603&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22663&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22663&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22634&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22634&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22651&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22651&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22700&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22700&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22606&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22606&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22629&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22629&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22652&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22652&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;description&quot;,&quot;destinationFieldId&quot;:&quot;description&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22627&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22627&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22620&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22620&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22668&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22668&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23602&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23203&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22814&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22814&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23237&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23237&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;issuekey&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23243&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;YES&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23238&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22702&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22702&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22703&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22703&quot;}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="fieldValue">Maintenance Ticket</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="targetIssueTypeDefinedByCfSelection"></arg>
                  <arg name="issueTypeId">13001</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">SAME</arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="transitionAttachmentsOperation">copy</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="targetProjectSelectedCustomField"></arg>
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="subFunctions">[{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_21909&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21909&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22600&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22600&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22822&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22822&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22601&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22601&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22603&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22603&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22663&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22663&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22634&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22634&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22651&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22651&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22700&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22700&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22606&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22606&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22629&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22629&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22652&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22652&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;description&quot;,&quot;destinationFieldId&quot;:&quot;description&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22627&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22627&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22620&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22620&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22668&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22668&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23602&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23203&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22814&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22814&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23237&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23237&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;issuekey&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23243&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;YES&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23238&quot;}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23602</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="681" name="Modifica Pianificazione" view="fieldscreen">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">20113</meta>
          <results>
            <unconditional-result old-status="null" status="null" step="3">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="4" name="Confirmed and Planned">
      <meta name="jira.status.id">14329</meta>
      <actions>
<common-action id="111" />
<common-action id="121" />
<common-action id="931" />
<common-action id="841" />
        <action id="131" name="Intervento Eseguito con Linked" view="fieldscreen">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19909</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">7bd8f307-ca58-4131-9202-7dc3a5716587</arg>
                <arg name="FIELD_NOTES">YCFgTmV3IEluc3RhbGxhdGlvbg==</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnTmV3IEluc3RhbGxhdGlvbiciLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
              <condition type="class">
                <arg name="issuesComparison">MUST_FIND_ISSUES</arg>
                <arg name="jqlQuery">issuekey={issue.issuekey} AND issueFunction in linkedIssuesOf(&quot;status='Confirmed and planned'&quot;, &quot;relates to&quot;)</arg>
                <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                <arg name="conditionValue">1</arg>
                <arg name="class.name">com.googlecode.jsu.workflow.condition.JqlCondition</arg>
                <arg name="fieldValue"></arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">3736629c-da1c-49ae-9ff2-eea923bf090d</arg>
                  <arg name="FIELD_NOTES">YCFgU2V0IEFTU0VUIElOU1RBTExBVElPTl9EQVRFID0gT1BfRVhFQ1VUSU9OX0RBVEU=</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">9b6405df-608f-4326-9959-e675d5b0c407</arg>
                  <arg name="FIELD_NOTES">YCFgIE9QIEVtYWlsIE5vdGlmaWNhdGlvbjogVEtUX0VYRUNVVEVEIC0gTWFudGVudXRhIGNvbWUgcG9zdCBmdW5jdGlvbiBwZXIgbm9uIGdlbmVyYXJlIGJsb2NjaGkgYWwgZm9ybml0b3JlIGxlZ2F0aSBhIGVycm9yaSBkaSBpbnZpbyBtYWlsIGludGVybmUg</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnlcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyXG5pbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGxcblxuUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKVxuRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJylcbnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7XG5cdHByb3BlcnRpZXMubG9hZChpdClcbn1cbmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKVxuXG5kZWYgcmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuXG5Jc3N1ZU1hbmFnZXIgaXNzdWVNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKCk7XG5DdXN0b21GaWVsZE1hbmFnZXIgY3VzdG9tRmllbGRNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCk7XG5cbmRlZiBib2R5X3JlcSA9IFtcblx0XCJ0ZW1wbGF0ZU5hbWVcIjogXCJUS1RfRVhFQ1VURURcIixcblx0XCJwZWNcIjogZmFsc2UsXG4gICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXlcbl1cblxuZGVmIGJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9qaXJhL0FBL3RyYW5zYWN0aW9uL21haWwvc2VuZFwiXG5VUkwgdXJsXG51cmwgPSBuZXcgVVJMKGJhc2VVUkwpXG5cbkh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbmNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5jb25uZWN0aW9uLm91dHB1dFN0cmVhbS53aXRoV3JpdGVyKFwiVVRGLThcIikgeyBuZXcgU3RyZWFtaW5nSnNvbkJ1aWxkZXIoaXQsIGJvZHlfcmVxKSB9XG5sb2cuZGVidWcgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW1cbmNvbm5lY3Rpb24uY29ubmVjdCgpO1xuXG5sb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG5sb2cuZGVidWcgXCJSZXNwb25zZUNvZGU6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpXG5sb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG5sb2cuZGVidWcgXCJnZXRSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG5cbiIsInNjcmlwdFBhdGgiOm51bGx9</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">64d02ce2-a8a1-49da-9ae5-dc0c74e1252c</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IE5ldyBJbnN0YWxsYXRpb24gLSBDaGVjayBsaW5rZWRUaWNrZXRzICYgRmFzdC1UcmFuc2FjdCB0aGVt</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23244</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="491" name="Clona Tkt" view="fieldscreen">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">20401</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">c659704c-9678-4844-9a05-6f3497e391e7</arg>
                <arg name="FIELD_NOTES">YCFgRW5hYmxlZCBvbmx5IGZvciBSZXBhaXIgYW5kIE5ldyBJbnN0YWxsYXRpb24=</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnTWFpbnRlbmFuY2UgVGlja2V0JyB8fCAoaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ05ldyBJbnN0YWxsYXRpb24nICYmIGNmVmFsdWVzWydPUF9BU1NFVCddICE9IG51bGwpIiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="4">
              <post-functions>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="fieldValue">New Installation</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="targetIssueTypeDefinedByCfSelection"></arg>
                  <arg name="issueTypeId">12301</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">SAME</arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="transitionAttachmentsOperation">copy</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="targetProjectSelectedCustomField"></arg>
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="subFunctions">[{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_21909&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21909&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22600&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22600&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22822&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22822&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22601&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22601&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22603&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22603&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22663&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22663&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22634&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22634&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22651&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22651&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22700&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22700&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22606&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22606&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22629&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22629&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22652&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22652&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;description&quot;,&quot;destinationFieldId&quot;:&quot;description&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22627&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22627&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22620&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22620&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22668&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22668&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23602&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23203&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22814&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22814&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23237&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23237&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;issuekey&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23243&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;YES&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23238&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22702&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22702&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22703&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22703&quot;}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="fieldValue">Maintenance Ticket</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="targetIssueTypeDefinedByCfSelection"></arg>
                  <arg name="issueTypeId">13001</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">SAME</arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="transitionAttachmentsOperation">copy</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="targetProjectSelectedCustomField"></arg>
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="subFunctions">[{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_21909&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21909&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22600&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22600&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22822&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22822&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22601&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22601&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22603&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22603&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22663&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22663&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22634&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22634&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22651&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22651&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22700&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22700&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22606&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22606&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22629&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22629&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22652&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22652&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;description&quot;,&quot;destinationFieldId&quot;:&quot;description&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22627&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22627&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22620&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22620&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22668&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22668&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23602&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23203&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22814&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22814&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23237&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23237&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;issuekey&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23243&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;YES&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23238&quot;}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23602</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="411" name="Modifica Pianificazione" view="fieldscreen">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">20113</meta>
          <results>
            <unconditional-result old-status="Not Done" status="Done" step="4">
              <post-functions>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="441" name="Modifica Impianto">
          <meta name="opsbar-sequence">50</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <results>
            <unconditional-result old-status="Not Done" status="Done" step="4">
              <post-functions>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="571" name="Intervento Completato" view="fieldscreen">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19910</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">185e2a49-1a31-4832-a832-448398454451</arg>
                <arg name="FIELD_NOTES">YCFgRGEgYWJpbGl0YXJlIHBlciBNYWludGVuYW5jZSBhIGNvcnBvID8hPw==</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJmYWxzZSIsInNjcmlwdFBhdGgiOm51bGx9</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">9c177ee6-0134-44a2-9497-0109ef2aa809</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlcXVpcmVkIEZpZWxkcyAtIHNvbG8gZXJyb3JzLCBubyB3YXJuaW5ncw==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">44d55f4b-44ce-4e70-af32-0ef4516e93e6</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBPUCBnZW5lcmF6aW9uZSBSYXBwb3J0byBkaSBpbnRlcnZlbnRv</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuQ2F0ZWdvcnkgbG9nID0gQ2F0ZWdvcnkuZ2V0SW5zdGFuY2UoXCJjb20ub25yZXNvbHZlLmppcmEuZ3Jvb3Z5LlBvc3RGdW5jdGlvblwiKVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxubG9nLmRlYnVnIFwiT25TaXRlIFJlcG9ydCBwZXIgaXNzdWU6IFwiICsgaXNzdWUua2V5XG4vKiBSRVNUIEFQSSBwZXIgR2VuZXJhemlvbmUgQWxsZWdhdG8gUmFwcG9ydG8gZGkgSW50ZXJ2ZW50byAqL1xucmVxdWVzdE1ldGhvZCA9IFwiUFVUXCI7XG5cblxuLyohIURhIHJpbXVvdmVyZSBhcHBlbmEgcmlzb2x0aSBpIGJ1ZyEhKi9cbmlmKCFpc3N1ZS5nZXRJc3N1ZVR5cGUoKS5uYW1lLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2l0LnBsYW5uZWRNYWludGVuYW5jZSddKSl7XG4gICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2F1dG9tYXRpb24vQUEvdGlja2V0L1wiICsgaXNzdWUua2V5LnRvU3RyaW5nKCkgKyBcIi9hdHRhY2htZW50L29uc2l0ZVwiXG4gICAgbG9nLmRlYnVnIFwiYmFzZVVybDogXCIgKyBiYXNlVVJMXG5cbiAgICBVUkwgdXJsXG4gICAgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgIEh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbiAgICBjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbiAgICBjb25uZWN0aW9uLmNvbm5lY3QoKTtcbiAgICBsb2cuZGVidWcgXCJSZXNwb25zZUNvZGU6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuXG4gICAgZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KClcblxuICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMFwiKSl7XG4gICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIkVcIilcbiAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiR0VORVJBVEUtT05TSVRFUkVQT1JUXCIpXG4gICAgICAgIGVycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArIFwiIFwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKSlcbiAgICAgICAgZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncylcbiAgICAgICAgZUxpc3QuYWRkKGVMaXN0RXJyb3JzKVxuXG4gICAgICAgIG91dHB1dC5hZGQoZUxpc3QpXG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oJ3tcIkVcIjpcIicgKyBvdXRwdXQudG9TdHJpbmcoKSArICdcIn0nKVxuICAgIH1cblxufVxuIiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">4982e177-86e5-4bc8-8965-b00de7d61755</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBPUCBwZXIgY29uc3VudGl2YXppb25lIHRpY2tldA==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">c6fc1cea-b26c-460d-83ef-3294126d30cf</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBPUCBFbWFpbCBOb3RpZmljYXRpb246IE9OU0lURV9SRVBPUlQgLSBvbmx5IElGIE9QQUFfQVVUT01BVElDQUxMWV9DTE9TRUQhPVllcyBBTkQgc2VuZE1haWwhPU5PIE1BSUwgQU5EIGNpIHNvbm8gdGlja2V0IGNvbGxlZ2F0aS4gLS0tLT4gRElTQUJMRUQgc3UgdHJhbnNhemlvbmUgY29tcGxldGUgLSB2aWVuZSBmYXR0byBtYW51YWxtZW50ZSBkYSBTRU5EIE9OU0lURSBSRVBPUlQ=</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="Not Done" status="Done" step="6">
              <post-functions>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">f4339be8-c25a-4951-b5bf-e4f2a6ac6e06</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIGxpbmtlZFRpY2tldHMgJiBGYXN0LVRyYW5zYWN0IHRoZW0=</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22693</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="631" name="Intervento Eseguito no Linked" view="fieldscreen">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19909</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">cd0dd24f-b782-4024-a92e-4d4074c29982</arg>
                <arg name="FIELD_NOTES">YCFgTmV3IEluc3RhbGxhdGlvbg==</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnTmV3IEluc3RhbGxhdGlvbiciLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
              <condition type="class">
                <arg name="issuesComparison">MUST_NOT_FIND_ISSUES</arg>
                <arg name="jqlQuery">issuekey={issue.issuekey} AND issueFunction in linkedIssuesOf(&quot;status='Confirmed and planned'&quot;, &quot;relates to&quot;)</arg>
                <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                <arg name="conditionValue">1</arg>
                <arg name="class.name">com.googlecode.jsu.workflow.condition.JqlCondition</arg>
                <arg name="fieldValue"></arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">886f8744-f504-454d-8533-7c8c1e78c1dd</arg>
                  <arg name="FIELD_NOTES">YCFgU2V0IEFTU0VUIElOU1RBTExBVElPTl9EQVRFID0gT1BfRVhFQ1VUSU9OX0RBVEU=</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmluZGV4Lklzc3VlSW5kZXhpbmdTZXJ2aWNlXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5NdXRhYmxlSXNzdWVcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuZXZlbnQudHlwZS5FdmVudERpc3BhdGNoT3B0aW9uXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnV0aWwuRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk1vZGlmaWVkVmFsdWVcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuaW5kZXguSXNzdWVJbmRleGluZ1NlcnZpY2VcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyXG5pbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGxcblxuUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKVxuRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJylcbnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7XG5cdHByb3BlcnRpZXMubG9hZChpdClcbn1cbmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKVxuXG5Jc3N1ZU1hbmFnZXIgaXNzdWVNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKCk7XG5DdXN0b21GaWVsZE1hbmFnZXIgY3VzdG9tRmllbGRNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCk7XG5cbklzc3VlSW5kZXhpbmdTZXJ2aWNlIFx0aXNzdWVJbmRleGluZ1NlcnZpY2UgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDb21wb25lbnQoSXNzdWVJbmRleGluZ1NlcnZpY2UpXG5kZWYgZXhlY3V0aW9uRGF0ZSA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YuZXhlY3V0aW9uRGF0ZSddLnRvU3RyaW5nKCkpWzBdXG5kZWYgYXNzZXQgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLmFzc2V0J10udG9TdHJpbmcoKSlbMF1cblxuZGVmIHJlcXVlc3RNZXRob2RcbmRlZiBiYXNlVVJMXG5cbi8qU2NyaXB0IFZhcmlhYmxlcyovXG4vL1BlciB0ZXN0IGRhIGNvbnNvbGVcbi8vSXNzdWUgaXNzdWUgPSBpc3N1ZU1hbmFnZXIuZ2V0SXNzdWVCeUtleUlnbm9yZUNhc2UoXCJBQVMtMzcxOVwiKVxuXG5pbnQgT1BBQSA9IHByb3BlcnRpZXNbJ2lzY2hlbWEuYWEuaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5pbnQgREJPID0gcHJvcGVydGllc1snaXNjaGVtYS5kYm8uaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5cbi8qUmltb3ppb25lIGFsbGVnYXRvIHJhcHBvcnRvIGRpIGludGVydmVudG8gYXBwZW5hIGNyZWF0byovXG4vKiBHZXQgSW5zaWdodCBJUUwgRmFjYWRlIGZyb20gcGx1Z2luIGFjY2Vzc29yICovXG5DbGFzcyBpcWxGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5JUUxGYWNhZGVcIik7IFxuZGVmIGlxbEZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShpcWxGYWNhZGVDbGFzcyk7XG5cbi8qIEdldCBJbnNpZ2h0IE9iamVjdCBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdEZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdEZhY2FkZVwiKTtcbmRlZiBvYmplY3RGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0RmFjYWRlQ2xhc3MpO1xuXG4vKiBHZXQgSW5zaWdodCBPYmplY3QgVHlwZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdFR5cGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlRmFjYWRlXCIpO1xuZGVmIG9iamVjdFR5cGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUZhY2FkZUNsYXNzKTtcblxuLyogR2V0IEluc2lnaHQgT2JqZWN0IEF0dHJpYnV0ZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlXCIpO1xuZGVmIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZUNsYXNzKTtcblxuQ2xhc3Mgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LnNlcnZpY2VzLm1vZGVsLmZhY3RvcnkuT2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlcIik7XG5kZWYgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnkgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyk7XG5cbmxvZy5kZWJ1ZyBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGFzc2V0KVswXS5nZXRJZCgpXG5sb2cuZGVidWcgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShleGVjdXRpb25EYXRlKVxuXG5kZWYgb2JqID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RCZWFuKGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoYXNzZXQpWzBdLmdldElkKCkpO1xuZGVmIGluc3RhbGxhdGlvbkRhdGUgPSBwcm9wZXJ0aWVzWydpb2JqLmhhcmR3YXJlLmluc3REYXRlLmlkJ10gPyBwcm9wZXJ0aWVzWydpb2JqLmhhcmR3YXJlLmluc3REYXRlLmlkJ10udG9TdHJpbmcoKS50b0ludGVnZXIoKSA6IDI5NTZcbmRlZiBhdHRyaWJUeXBlID0gb2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZS5sb2FkT2JqZWN0VHlwZUF0dHJpYnV0ZUJlYW4oaW5zdGFsbGF0aW9uRGF0ZSk7IFxuXG5kZWYgbmV3QXR0cmliID0gb2JqLmNyZWF0ZU9iamVjdEF0dHJpYnV0ZUJlYW4oYXR0cmliVHlwZSk7XG5kZWYgbmV3QXR0cmliVmFsdWUgPSBuZXdBdHRyaWIuY3JlYXRlT2JqZWN0QXR0cmlidXRlVmFsdWVCZWFuKCk7XG5cbnRyeSB7XG4gICAgbmV3QXR0cmliVmFsdWUuc2V0VmFsdWUoYXR0cmliVHlwZSwgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShleGVjdXRpb25EYXRlKSsxKTtcbn0gY2F0Y2ggKEV4Y2VwdGlvbiB2aWUpIHtcbiAgICBsb2cud2FybihcIlNFVElOU0lHSFRWQUxVRTogVW5hYmxlIHRvIHNldCBhdHRyaWJ1dGUgXCIgKyBhdHRyaWJUeXBlICsgXCIgdG8gXCIgKyBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGV4ZWN1dGlvbkRhdGUpICsgXCIuIEV4aXRpbmcuXCIpO1xuICAgIGxvZy53YXJuKFNFVElOU0lHSFRWQUxVRTogdmllLmdldE1lc3NhZ2UoKSk7XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5kZWYgYXR0cmliVmFsdWVzID0gbmV3QXR0cmliLmdldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnMoKTtcbmF0dHJpYlZhbHVlcy5hZGQobmV3QXR0cmliVmFsdWUpO1xubmV3QXR0cmliLnNldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnMoYXR0cmliVmFsdWVzKTtcblxudHJ5IHtcbiAgICBuZXdBdHRyaWIgPSBvYmplY3RGYWNhZGUuc3RvcmVPYmplY3RBdHRyaWJ1dGVCZWFuKG5ld0F0dHJpYik7XG59IGNhdGNoIChFeGNlcHRpb24gdmllKSB7XG4gICAgbG9nLndhcm4oXCJTRVRJTlNJR0hUVkFMVUU6IFVuYWJsZSB0byBzYXZlIGNoYW5nZXMuIEV4aXRpbmcuXCIpO1xuICAgIGxvZy53YXJuKFNFVElOU0lHSFRWQUxVRTogdmllLmdldE1lc3NhZ2UoKSk7XG4gICAgcmV0dXJuIGZhbHNlO1xufVxubG9nLmluZm8oXCJTRVRJTlNJR0hUVkFMVUU6IFN1Y2Nlc3NmdWxseSBzYXZlZCB2YWx1ZVwiKTtcbiIsInNjcmlwdFBhdGgiOm51bGx9</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">ecba5d38-8970-49d4-af83-757b269ecbb1</arg>
                  <arg name="FIELD_NOTES">YCFgIE9QIEVtYWlsIE5vdGlmaWNhdGlvbjogVEtUX0VYRUNVVEVEIC0gTWFudGVudXRhIGNvbWUgcG9zdCBmdW5jdGlvbiBwZXIgbm9uIGdlbmVyYXJlIGJsb2NjaGkgYWwgZm9ybml0b3JlIGxlZ2F0aSBhIGVycm9yaSBkaSBpbnZpbyBtYWlsIGludGVybmUg</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnlcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyXG5pbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGxcblxuUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKVxuRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJylcbnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7XG5cdHByb3BlcnRpZXMubG9hZChpdClcbn1cbmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKVxuXG5kZWYgcmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuXG5Jc3N1ZU1hbmFnZXIgaXNzdWVNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKCk7XG5DdXN0b21GaWVsZE1hbmFnZXIgY3VzdG9tRmllbGRNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCk7XG5cbmRlZiBib2R5X3JlcSA9IFtcblx0XCJ0ZW1wbGF0ZU5hbWVcIjogXCJUS1RfRVhFQ1VURURcIixcblx0XCJwZWNcIjogZmFsc2UsXG4gICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXlcbl1cblxuZGVmIGJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9qaXJhL0FBL3RyYW5zYWN0aW9uL21haWwvc2VuZFwiXG5VUkwgdXJsXG51cmwgPSBuZXcgVVJMKGJhc2VVUkwpXG5cbkh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbmNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5jb25uZWN0aW9uLm91dHB1dFN0cmVhbS53aXRoV3JpdGVyKFwiVVRGLThcIikgeyBuZXcgU3RyZWFtaW5nSnNvbkJ1aWxkZXIoaXQsIGJvZHlfcmVxKSB9XG5sb2cuZGVidWcgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW1cbmNvbm5lY3Rpb24uY29ubmVjdCgpO1xuXG5sb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG5sb2cuZGVidWcgXCJSZXNwb25zZUNvZGU6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpXG5sb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG5sb2cuZGVidWcgXCJnZXRSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG5cbiIsInNjcmlwdFBhdGgiOm51bGx9</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="5" name="In Progress">
      <meta name="jira.status.id">3</meta>
      <actions>
<common-action id="141" />
<common-action id="841" />
        <action id="151" name="Annulla Rapporto di Intervento">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <results>
            <unconditional-result old-status="null" status="null" step="4">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="501" name="Clona Tkt" view="fieldscreen">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">20401</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">c659704c-9678-4844-9a05-6f3497e391e7</arg>
                <arg name="FIELD_NOTES">YCFgRW5hYmxlZCBvbmx5IGZvciBSZXBhaXIgYW5kIE5ldyBJbnN0YWxsYXRpb24=</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnTWFpbnRlbmFuY2UgVGlja2V0JyB8fCAoaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ05ldyBJbnN0YWxsYXRpb24nICYmIGNmVmFsdWVzWydPUF9BU1NFVCddICE9IG51bGwpIiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="5">
              <post-functions>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="fieldValue">New Installation</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="targetIssueTypeDefinedByCfSelection"></arg>
                  <arg name="issueTypeId">12301</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">SAME</arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="transitionAttachmentsOperation">copy</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="targetProjectSelectedCustomField"></arg>
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="subFunctions">[{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_21909&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21909&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22600&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22600&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22822&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22822&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22601&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22601&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22603&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22603&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22663&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22663&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22634&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22634&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22651&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22651&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22700&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22700&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22606&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22606&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22629&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22629&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22652&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22652&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;description&quot;,&quot;destinationFieldId&quot;:&quot;description&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22627&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22627&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22620&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22620&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22668&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22668&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23602&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23203&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22814&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22814&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23237&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23237&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;issuekey&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23243&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;YES&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23238&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22702&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22702&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22703&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22703&quot;}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="fieldValue">Maintenance Ticket</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="targetIssueTypeDefinedByCfSelection"></arg>
                  <arg name="issueTypeId">13001</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">SAME</arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="transitionAttachmentsOperation">copy</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="targetProjectSelectedCustomField"></arg>
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="subFunctions">[{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_21909&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21909&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22600&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22600&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22822&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22822&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22601&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22601&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22603&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22603&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22663&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22663&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22634&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22634&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22651&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22651&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22700&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22700&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22606&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22606&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22629&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22629&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22652&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22652&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;description&quot;,&quot;destinationFieldId&quot;:&quot;description&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22627&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22627&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22620&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22620&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22668&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22668&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23602&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23203&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22814&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22814&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23237&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23237&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;issuekey&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23243&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;YES&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23238&quot;}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23602</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="451" name="Modifica Impianto">
          <meta name="opsbar-sequence">50</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">19072275-7e71-48ef-9842-e5955dbe1cd9</arg>
                <arg name="FIELD_NOTES">YCFgTm90IGVuYWJsZWQgZm9yIFBNIFRpY2tldHM=</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJjZlZhbHVlc1snT1BfQVNTRVQnXSAhPSBudWxsIiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="Not Done" status="Done" step="5">
              <post-functions>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="971" name="Intervento Completato" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19910</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">e11c2942-0754-423c-8e92-d78a6375f221</arg>
                <arg name="FIELD_NOTES">YCFgZGlzYWJsZWQ=</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="disabled">false</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSAhPSAnUGxhbm5lZCBNYWludGVuYW5jZSBUaWNrZXQnICYmIGlzc3VlLmlzc3VlVHlwZS5uYW1lICE9IFwiTWFpbnRlbmFuY2UgVGlja2V0XCIgJiYgaXNzdWUuaXNzdWVUeXBlLm5hbWUgIT0gXCJOZXcgSW5zdGFsbGF0aW9uXCIiLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
              <condition type="class">
                <arg name="RESOLUTION_FIELD_NAME">6</arg>
                <arg name="FIELD_FUNCTION_ID">fc8b9dd9-f011-4c94-85b2-3dad9c428711</arg>
                <arg name="FIELD_NOTES">YCFgRm9yIFBNIFRpY2tldHMgLSBhbGwgc3ViLXRhc2tzIG11c3QgYmUgcmVzb2x2ZWQ=</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.AllSubtasksResolvedCondition</arg>
                <arg name="disabled">true</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">fa37467a9382f8924cd169d5ba599dcb71925405</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlcXVpcmVkIEZpZWxkcyAtIHNvbG8gZXJyb3JzLCBubyB3YXJuaW5ncw==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">9fe0fa5191d4b6a91ba7485380ff8d0a9fda8fe7</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBPUCBnZW5lcmF6aW9uZSBSYXBwb3J0byBkaSBpbnRlcnZlbnRv</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxubG9nLmRlYnVnIFwiT25TaXRlIFJlcG9ydCBwZXIgaXNzdWU6IFwiICsgaXNzdWUua2V5XG4vKiBSRVNUIEFQSSBwZXIgR2VuZXJhemlvbmUgQWxsZWdhdG8gUmFwcG9ydG8gZGkgSW50ZXJ2ZW50byAqL1xucmVxdWVzdE1ldGhvZCA9IFwiUFVUXCI7XG4vKlNjcmlwdCBWYXJpYWJsZXMqL1xuLy9QZXIgdGVzdCBkYSBjb25zb2xlXG4vL0lzc3VlIGlzc3VlID0gaXNzdWVNYW5hZ2VyLmdldElzc3VlQnlLZXlJZ25vcmVDYXNlKFwiT1BVVC0xNDA2MlwiKVxuXG5pbnQgT1BBQSA9IHByb3BlcnRpZXNbJ2lzY2hlbWEuYWEuaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5pbnQgREJPID0gcHJvcGVydGllc1snaXNjaGVtYS5kYm8uaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5cbi8qUmltb3ppb25lIGFsbGVnYXRvIHJhcHBvcnRvIGRpIGludGVydmVudG8gYXBwZW5hIGNyZWF0byovXG4vKiBHZXQgSW5zaWdodCBJUUwgRmFjYWRlIGZyb20gcGx1Z2luIGFjY2Vzc29yICovXG5DbGFzcyBpcWxGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5JUUxGYWNhZGVcIik7IFxuZGVmIGlxbEZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShpcWxGYWNhZGVDbGFzcyk7XG5cbi8qIEdldCBJbnNpZ2h0IE9iamVjdCBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdEZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdEZhY2FkZVwiKTtcbmRlZiBvYmplY3RGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0RmFjYWRlQ2xhc3MpO1xuXG4vKiBHZXQgSW5zaWdodCBPYmplY3QgVHlwZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdFR5cGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlRmFjYWRlXCIpO1xuZGVmIG9iamVjdFR5cGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUZhY2FkZUNsYXNzKTtcblxuLyogR2V0IEluc2lnaHQgT2JqZWN0IEF0dHJpYnV0ZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlXCIpO1xuZGVmIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZUNsYXNzKTtcblxuQ2xhc3Mgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LnNlcnZpY2VzLm1vZGVsLmZhY3RvcnkuT2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlcIik7XG5kZWYgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnkgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyk7XG5cbi8qIFNwZWNpZnkgdGhlIHNjaGVtYSBpZCBhcyB3ZWxsIGFzIHRoZSBJUUwgdGhhdCB3aWxsIGZldGNoIG9iamVjdHMuIEluIHRoaXMgY2FzZSBhbGwgb2JqZWN0cyB3aXRoIE5hbWUgbWF0Y2hpbmcgdGhlIHZhbHVlQ0YsIGJlIHN1cmUgdG8gaW5jbHVkZSBcIiBhcm91bmQgdmFsdWUgKi9cbmRlZiBvYmplY3RzID0gaXFsRmFjYWRlLmZpbmRPYmplY3RzQnlJUUxBbmRTY2hlbWEoREJPLCBcIlxcXCJcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmNhdGVnb3J5UmVmJ10udG9TdHJpbmcoKSArIFwiXFxcIi5OYW1lIExJS0UgXFxcIlJhcHBvcnRvIGRpIGludGVydmVudG9cXFwiIEFORCBcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmRlbGV0ZWQnXS50b1N0cmluZygpICsgXCIhPXRydWUgQU5EIG9iamVjdCBIQVZJTkcgY29ubmVjdGVkVGlja2V0cyhrZXkgPSBcIiArIGlzc3VlLmtleS50b1N0cmluZygpICsgXCIpXCIpOyAvLyBTZWUgdGhlIGNvbXBsZXRlIGxpc3Qgb2YgcG9zc2libGUgSVFMIG9uIHRoZSBJbnNpZ2h0IFF1ZXJ5IExhbmd1YWdlIGRvY3VtZW50YXRpb24gcGFnZVxuLyogSWYgdGhpcyBpcyBhIG1hbmRhdG9yeSBmaWVsZCB5b3Ugc2hvdWxkIGJlIGFibGUgdG8gZG8gdGhpczogKi9cbmxvZy5kZWJ1ZyBcIklRTDogXCIgKyBcIlxcXCJcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmNhdGVnb3J5UmVmJ10udG9TdHJpbmcoKSArIFwiXFxcIi5OYW1lIExJS0UgXFxcIlJhcHBvcnRvIGRpIGludGVydmVudG9cXFwiIEFORCBcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmRlbGV0ZWQnXS50b1N0cmluZygpICsgXCIhPXRydWUgQU5EIG9iamVjdCBIQVZJTkcgY29ubmVjdGVkVGlja2V0cyhrZXkgPSBcIiArIGlzc3VlLmtleS50b1N0cmluZygpICsgXCIpXCJcblxuLyohIURhIHJpbXVvdmVyZSBhcHBlbmEgcmlzb2x0aSBpIGJ1ZyEhKi9cbmlmKChvYmplY3RzID09IG51bGwgfHwgb2JqZWN0cy5zaXplPT0wKSAmJiAhaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpdC5wbGFubmVkTWFpbnRlbmFuY2UnXSkpe1xuICAgIGJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9hdXRvbWF0aW9uL0FBL3RpY2tldC9cIiArIGlzc3VlLmtleS50b1N0cmluZygpICsgXCIvYXR0YWNobWVudC9vbnNpdGVcIlxuICAgIGxvZy5kZWJ1ZyBcImJhc2VVcmw6IFwiICsgYmFzZVVSTFxuXG4gICAgVVJMIHVybFxuICAgIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcbiAgICBIdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdE1ldGhvZChyZXF1ZXN0TWV0aG9kKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJBY2NlcHRcIiwgXCIqLypcIik7XG4gICAgY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbiAgICBjb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5jb25uZWN0KCk7XG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcblxuICAgIGRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5cbiAgICBpZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDBcIikpe1xuICAgICAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIkdFTkVSQVRFLU9OU0lURVJFUE9SVFwiKVxuICAgICAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyBcIiBcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChlcnJvck1zZ3MpXG4gICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycylcblxuICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcbiAgICB9XG5cbn1cbiIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeQppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lcgppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGwKClByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKCkKRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJykKcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHsKCXByb3BlcnRpZXMubG9hZChpdCkKfQpDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQpsb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRykKCklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTsKQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpOwpkZWYgcmVxdWVzdE1ldGhvZApkZWYgYmFzZVVSTApsb2cuZGVidWcgIk9uU2l0ZSBSZXBvcnQgcGVyIGlzc3VlOiAiICsgaXNzdWUua2V5Ci8qIFJFU1QgQVBJIHBlciBHZW5lcmF6aW9uZSBBbGxlZ2F0byBSYXBwb3J0byBkaSBJbnRlcnZlbnRvICovCnJlcXVlc3RNZXRob2QgPSAiUFVUIjsKCmJhc2VVUkwgPSAiaHR0cDovLyIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArICIvb3AvcmVzdC9hdXRvbWF0aW9uL0FBL3RpY2tldC8iICsgaXNzdWUua2V5LnRvU3RyaW5nKCkgKyAiL2F0dGFjaG1lbnQvb25zaXRlIgpsb2cuZGVidWcgImJhc2VVcmw6ICIgKyBiYXNlVVJMCgpVUkwgdXJsCnVybCA9IG5ldyBVUkwoYmFzZVVSTCkKSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eSgiQ29udGVudC1UeXBlIiwgImFwcGxpY2F0aW9uL2pzb24iKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoIkFjY2VwdCIsICIqLyoiKTsKY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTsKY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpOwpjb25uZWN0aW9uLmNvbm5lY3QoKTsKbG9nLmRlYnVnICJSZXNwb25zZUNvZGU6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkKbG9nLmRlYnVnICJSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKCmRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpCmRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKQpkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpCgppZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoIjIwMCIpKXsKICAgIGxvZy5kZWJ1ZyAidXJsOiAiICsgdXJsCiAgICBsb2cuZGVidWcgIlJlc3BvbnNlQ29kZToiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKQogICAgbG9nLmRlYnVnICJSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKICAgIGVMaXN0RXJyb3JzLmFkZCgiRSIpCiAgICBlTGlzdEVycm9ycy5hZGQoIkdFTkVSQVRFLU9OU0lURVJFUE9SVCIpCiAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyAiICIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpKQogICAgZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncykKICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycykKCiAgICBvdXRwdXQuYWRkKGVMaXN0KQogICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigneyJFIjoiJyArIG91dHB1dC50b1N0cmluZygpICsgJyJ9JykKICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigiRSIsIG91dHB1dC50b1N0cmluZygpKQp9Cg==</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">b734e2c5-1436-43e7-ba9d-53f2ba06c457</arg>
              <arg name="FIELD_NOTES">YCFgQ3JlYXRlIFNOICYgU08gZm9yIG9sZCB0aWNrZXRzICsgZm9yIENvbXBsZXRlZCBkdXJpbmcgTWFpbnRlbmFuY2U=</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuXG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUubGluay5Jc3N1ZUxpbmtcblxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpO1xuQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpO1xuXG5kZWYgU04gPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfU0FQX1NFUlZJQ0VfTk9USUZJQ0FUSU9OXCIpWzBdXG5kZWYgcmVxdWVzdE1ldGhvZFxuZGVmIGJhc2VVUkxcblxuVVJMIHVybFxuSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvblxuXG5pZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKFNOKSA9PSBudWxsICYmIGlzc3VlLmlzc3VlVHlwZS5uYW1lICE9IFwiUGxhbm5lZCBNYWludGVuYW5jZSBUaWNrZXRcIil7XG4gICAgcmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuXG4gICAgZGVmIGJvZHlfcmVxID0gW11cbiAgICBib2R5X3JlcSA9IFtcbiAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXksXG4gICAgICAgIFwic3RhdHVzXCI6IFwiSU5QXCJcbiAgICBdIFxuXG4gICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvYWZ0ZXIvc2FsZXMvY3JlYXRlL3NlcnZpY2Uvbm90aWZpY2F0aW9uXCJcblxuICAgIGxvZy5kZWJ1ZyBcImJhc2VVUkwgU046IFwiICsgYmFzZVVSTFxuICAgIGxvZy5kZWJ1ZyBcImJvZHlfcmVxIFNOOiBcIiArIGJvZHlfcmVxXG4gICAgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG4gICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxuICAgIGxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpO1xuXG4gICAgZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KClcblxuICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMVwiKSl7XG4gICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG4gICAgICAgIFxuICAgICAgICBkZWYgb3V0cHV0TXNnID0gKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0XG4gICAgICAgIGxvZy5kZWJ1ZyBcIigoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dDogXCIgKyBvdXRwdXRNc2dcblxuICAgICAgICBkZWYganNvblNsdXJwZXIgPSBuZXcgSnNvblNsdXJwZXIoKVxuICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgICAgICBhc3NlcnQganNvbl9vYmplY3QgaW5zdGFuY2VvZiBNYXAgIFxuICAgICAgICBsb2cuZGVidWcgXCJtZXNzYWdlOiBcIiArICBqc29uX29iamVjdC5tZXNzYWdlXG4gICAgICAgIGxvZy5kZWJ1ZyBcImVycm9yczogXCIgKyAganNvbl9vYmplY3QuZXJyb3JzLnRvU3RyaW5nKClcblxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIk9QLVNBUC1TTi1VUERBVEVcIilcbiAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5lcnJvcnNbMF0pXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChlcnJvck1zZ3MpXG4gICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycylcblxuICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcbiAgICB9ZWxzZXtcbiAgICAgICAgLyoqIFNFUlZJQ0UgT1JERVIgQ1JFQVRJT04gKiovXG4gICAgICAgIGJvZHlfcmVxID0gW1xuICAgICAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXlcbiAgICAgICAgXSBcbiAgICAgICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvYWZ0ZXIvc2FsZXMvY3JlYXRlL29yL3VwZGF0ZS9zZXJ2aWNlL29yZGVyXCJcblxuICAgICAgICBsb2cuZGVidWcgXCJiYXNlVVJMIFNPOiBcIiArIGJhc2VVUkxcbiAgICAgICAgbG9nLmRlYnVnIFwiYm9keV9yZXEgU086IFwiICsgYm9keV9yZXFcbiAgICAgICAgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgICAgICBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xuICAgICAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG4gICAgICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xuICAgICAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbiAgICAgICAgY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbiAgICAgICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuICAgICAgICBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgICAgICBjb25uZWN0aW9uLm91dHB1dFN0cmVhbS53aXRoV3JpdGVyKFwiVVRGLThcIikgeyBuZXcgU3RyZWFtaW5nSnNvbkJ1aWxkZXIoaXQsIGJvZHlfcmVxKSB9XG4gICAgICAgIGxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgICAgICBjb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuICAgICAgICBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5cbiAgICAgICAgaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAxXCIpICYmICFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAwXCIpKXtcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZGVmIG91dHB1dE1zZyA9ICgoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dFxuICAgIFx0XHRsb2cuZGVidWcgXCIoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHQ6IFwiICsgb3V0cHV0TXNnXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGRlZiBqc29uU2x1cnBlciA9IG5ldyBKc29uU2x1cnBlcigpXG4gICAgICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgICAgICAgICAgYXNzZXJ0IGpzb25fb2JqZWN0IGluc3RhbmNlb2YgTWFwICBcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIm1lc3NhZ2U6IFwiICsgIGpzb25fb2JqZWN0Lm1lc3NhZ2VcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcImVycm9yczogXCIgKyAganNvbl9vYmplY3QuZXJyb3JzLnRvU3RyaW5nKClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiRVwiKVxuICAgICAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiT1AtU0FQLVNPLUNSRUFURVwiKVxuICAgICAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5lcnJvcnNbMF0pXG4gICAgICAgICAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKVxuICAgICAgICAgICAgZUxpc3QuYWRkKGVMaXN0RXJyb3JzKVxuXG4gICAgICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgICAgIH1cbiAgICB9XG59Iiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">37c2d78492ac54794b8917d58342d465c219be98</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBPUCBFbWFpbCBOb3RpZmljYXRpb246IE9OU0lURV9SRVBPUlQgLSBvbmx5IElGIE9QQUFfQVVUT01BVElDQUxMWV9DTE9TRUQhPVllcyBBTkQgc2VuZE1haWwhPU5PIE1BSUwgQU5EIGNpIHNvbm8gdGlja2V0IGNvbGxlZ2F0aS4gLS0tLT4gRElTQUJMRUQgc3UgdHJhbnNhemlvbmUgY29tcGxldGUgLSB2aWVuZSBmYXR0byBtYW51YWxtZW50ZSBkYSBTRU5EIE9OU0lURSBSRVBPUlQ=</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">df15a75e93b4c124a70f49e69dbcae9d48e2e8e4</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBPUCBwZXIgY29uc3VudGl2YXppb25lIHRpY2tldA==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmluZGV4Lklzc3VlSW5kZXhpbmdTZXJ2aWNlXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5NdXRhYmxlSXNzdWVcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuZXZlbnQudHlwZS5FdmVudERpc3BhdGNoT3B0aW9uXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnV0aWwuRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk1vZGlmaWVkVmFsdWVcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuaW5kZXguSXNzdWVJbmRleGluZ1NlcnZpY2VcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyXG5pbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGxcblxuUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKVxuRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJylcbnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7XG5cdHByb3BlcnRpZXMubG9hZChpdClcbn1cbmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKVxuXG5Jc3N1ZU1hbmFnZXIgaXNzdWVNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKCk7XG5DdXN0b21GaWVsZE1hbmFnZXIgY3VzdG9tRmllbGRNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCk7XG5cbklzc3VlSW5kZXhpbmdTZXJ2aWNlIFx0aXNzdWVJbmRleGluZ1NlcnZpY2UgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDb21wb25lbnQoSXNzdWVJbmRleGluZ1NlcnZpY2UpXG5kZWYgYXV0b21hdGljYWxseUNsb3NlZCA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YuYXV0b21hdGljYWxseUNsb3NlZCddLnRvU3RyaW5nKCkpWzBdXG5cbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxuXG5pbnQgT1BBQSA9IHByb3BlcnRpZXNbJ2lzY2hlbWEuYWEuaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5pbnQgREJPID0gcHJvcGVydGllc1snaXNjaGVtYS5kYm8uaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5ib29sZWFuIHVuYXRhbnR1bT10cnVlXG5cbi8qISFEYSByaW11b3ZlcmUgYXBwZW5hIHJpc29sdGkgaSBidWchISovXG4vL2lmKCFpc3N1ZS5nZXRJc3N1ZVR5cGUoKS5uYW1lLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2l0LnBsYW5uZWRNYWludGVuYW5jZSddKSl7XG5cbiAgICAvKk9QLTEwMzg6IGxhIGNvbnRhYmlsaXp6YXppb25lIGRvdnJcdTAwZTAgcHJldmVkZXJlIGxlIHVuYXRhbnR1bSByYXRlcyBzb2xvIHNlIGlsIHRpY2tldCBub24gXHUwMGU4IHN0YXRvIGNoaXVzbyBpbiBhdXRvbWF0aWNvKi9cbiAgICBpZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGF1dG9tYXRpY2FsbHlDbG9zZWQpIT1udWxsICYmIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoYXV0b21hdGljYWxseUNsb3NlZCkudG9TdHJpbmcoKS5lcXVhbHMoXCJZZXNcIikpe1xuICAgICAgICB1bmF0YW50dW09ZmFsc2UgICAgXG4gICAgfVxuICAgIGxvZy5kZWJ1ZyBcIkNvbnN1bnRpdmF6aW9uZSB0aWNrZXQgXCIgKyBpc3N1ZS5rZXkgKyBcIiBjb24gdW5hdGFudHVtOiBcIiArIHVuYXRhbnR1bVxuXG4gICAgLyogUkVTVCBBUEkgcGVyIENvbnRhYmlsaXp6YXppb25lIEludGVydmVudG8gKi9cbiAgICByZXF1ZXN0TWV0aG9kID0gXCJHRVRcIjtcblxuICAgIGJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9BQS90aWNrZXQvaXNzdWVLZXkvXCIgKyBpc3N1ZS5rZXkudG9TdHJpbmcoKSArIFwiL2Nsb3NlP3VtPVwiK3VuYXRhbnR1bS50b1N0cmluZygpXG4gICAgbG9nLmRlYnVnIFwiYmFzZVVybDogXCIgKyBiYXNlVVJMXG5cbiAgICAvKkRlZmluaXJlIHBhcmFtZXRybyBkaSBpbnB1dCB1bmF0YW50dW09dHJ1ZXxmYWxzZSBpbiBiYXNlIGFsIHZhbG9yZSBkZWxsYSB2YXJpYWJpbGUgYm9vbGVhbmEgdW5hdGFudHVtKi9cbiAgICBVUkwgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgIEh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbiAgICBjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbiAgICBjb25uZWN0aW9uLmNvbm5lY3QoKTtcbiAgICBsb2cuZGVidWcgXCJSZXNwb25zZUNvZGU6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuXG4gICAgLy9Jc3N1ZUluZGV4aW5nU2VydmljZSBpc3N1ZUluZGV4aW5nU2VydmljZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldENvbXBvbmVudChJc3N1ZUluZGV4aW5nU2VydmljZSlcbiAgICAvL2lzc3VlSW5kZXhpbmdTZXJ2aWNlLnJlSW5kZXgoaXNzdWVNYW5hZ2VyLmdldElzc3VlT2JqZWN0KGlzc3VlLmtleS50b1N0cmluZygpKSlcblxuICAgIC8vZGVmIHVuYVRhbnR1bVJhdGVzID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShcIk9QQUFfVU5BVEFOVFVNX1JBVEVTXCIpWzBdXG4gICAgLy9sb2cud2FybiBcInVuYVRhbnR1bVJhdGVzOiBcIiArIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUodW5hVGFudHVtUmF0ZXMpXG5cbiAgICBkZWYgb3V0cHV0ID0gbmV3IEFycmF5TGlzdCgpXG4gICAgZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpXG4gICAgZGVmIGVMaXN0RXJyb3JzID0gbmV3IEFycmF5TGlzdCgpXG4gICAgZGVmIGVycm9yTXNncyA9IG5ldyBBcnJheUxpc3QoKVxuXG4gICAgaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAwXCIpKXtcbiAgICAgICAgbG9nLmRlYnVnIFwidXJsOiBcIiArIHVybFxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZUNvZGU6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2U6IFwiICsgY29ubmVjdGlvblxuXG4gICAgICAgIC8qUk9MTEJBQ0sqL1xuICAgICAgICAvKlJpbW96aW9uZSBhbGxlZ2F0byByYXBwb3J0byBkaSBpbnRlcnZlbnRvIGFwcGVuYSBjcmVhdG8qL1xuICAgICAgICAvKiBHZXQgSW5zaWdodCBJUUwgRmFjYWRlIGZyb20gcGx1Z2luIGFjY2Vzc29yICovXG4gICAgICAgIENsYXNzIGlxbEZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLklRTEZhY2FkZVwiKTsgXG4gICAgICAgIGRlZiBpcWxGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUoaXFsRmFjYWRlQ2xhc3MpO1xuXG4gICAgICAgIC8qIEdldCBJbnNpZ2h0IE9iamVjdCBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbiAgICAgICAgQ2xhc3Mgb2JqZWN0RmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKFwiY29tLnJpYWRhbGFicy5qaXJhLnBsdWdpbnMuaW5zaWdodC5jaGFubmVsLmV4dGVybmFsLmFwaS5mYWNhZGUuT2JqZWN0RmFjYWRlXCIpO1xuICAgICAgICBkZWYgb2JqZWN0RmFjYWRlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKG9iamVjdEZhY2FkZUNsYXNzKTtcblxuICAgICAgICAvKiBHZXQgSW5zaWdodCBPYmplY3QgVHlwZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbiAgICAgICAgQ2xhc3Mgb2JqZWN0VHlwZUZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdFR5cGVGYWNhZGVcIik7XG4gICAgICAgIGRlZiBvYmplY3RUeXBlRmFjYWRlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKG9iamVjdFR5cGVGYWNhZGVDbGFzcyk7XG5cbiAgICAgICAgLyogR2V0IEluc2lnaHQgT2JqZWN0IEF0dHJpYnV0ZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbiAgICAgICAgQ2xhc3Mgb2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVcIik7XG4gICAgICAgIGRlZiBvYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyk7XG5cbiAgICAgICAgQ2xhc3Mgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LnNlcnZpY2VzLm1vZGVsLmZhY3RvcnkuT2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlcIik7XG4gICAgICAgIGRlZiBvYmplY3RBdHRyaWJ1dGVCZWFuRmFjdG9yeSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShvYmplY3RBdHRyaWJ1dGVCZWFuRmFjdG9yeUNsYXNzKTtcblxuICAgICAgICAvKiBTcGVjaWZ5IHRoZSBzY2hlbWEgaWQgYXMgd2VsbCBhcyB0aGUgSVFMIHRoYXQgd2lsbCBmZXRjaCBvYmplY3RzLiBJbiB0aGlzIGNhc2UgYWxsIG9iamVjdHMgd2l0aCBOYW1lIG1hdGNoaW5nIHRoZSB2YWx1ZUNGLCBiZSBzdXJlIHRvIGluY2x1ZGUgXCIgYXJvdW5kIHZhbHVlICovXG4gICAgICAgIGRlZiBvYmplY3RzID0gaXFsRmFjYWRlLmZpbmRPYmplY3RzQnlJUUxBbmRTY2hlbWEoREJPLCBcIlxcXCJcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmNhdGVnb3J5UmVmJ10udG9TdHJpbmcoKSArIFwiXFxcIi5cXFwiXCIgKyBwcm9wZXJ0aWVzWydpb2JqLmF0dGFjaG1lbnRDYXRlZ29yeS5uYW1lJ10udG9TdHJpbmcoKSArIFwiXFxcIiA9IFxcXCJcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5Lm9ianMucmFwcEludEZBQUMnXS50b1N0cmluZygpICsgXCJcXFwiIEFORCBcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmRlbGV0ZWQnXS50b1N0cmluZygpICsgXCIhPXRydWUgQU5EIG9iamVjdCBIQVZJTkcgY29ubmVjdGVkVGlja2V0cyhrZXkgPSBcIiArIGlzc3VlLmtleS50b1N0cmluZygpICsgXCIpXCIpOyAvLyBTZWUgdGhlIGNvbXBsZXRlIGxpc3Qgb2YgcG9zc2libGUgSVFMIG9uIHRoZSBJbnNpZ2h0IFF1ZXJ5IExhbmd1YWdlIGRvY3VtZW50YXRpb24gcGFnZVxuICAgICAgICAvKiBJZiB0aGlzIGlzIGEgbWFuZGF0b3J5IGZpZWxkIHlvdSBzaG91bGQgYmUgYWJsZSB0byBkbyB0aGlzOiAqL1xuICAgICAgICBsb2cuaW5mbyhcIkluc2lnaHQgb2JqZWN0OiBcIiArIG9iamVjdHNbMF0pO1xuXG4gICAgICAgIGlmKG9iamVjdHNbMF0pe1xuICAgICAgICAgICAgLyogVVBEQVRFIE9KQkVDVCBERUxFVEVEIFZBTFVFICovXG4gICAgICAgICAgICBkZWYgb2JUcmlhZ2UgPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4ob2JqZWN0c1swXS5nZXRJZCgpLCBwcm9wZXJ0aWVzWydpb2JqLmF0dGFjaG1lbnRDYXRlZ29yeS5kZWxldGVkJ10udG9TdHJpbmcoKSkuY3JlYXRlTXV0YWJsZSgpICBcbiAgICAgICAgICAgIGRlZiB2YWx1ZSA9IG9iVHJpYWdlLmdldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnMoKVxuXG4gICAgICAgICAgICBkZWYgdmFsdWVCZWFuID0gb2JUcmlhZ2UuY3JlYXRlT2JqZWN0QXR0cmlidXRlVmFsdWVCZWFuKClcbiAgICAgICAgICAgIHZhbHVlQmVhbi5zZXRWYWx1ZShvYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlLmxvYWRPYmplY3RUeXBlQXR0cmlidXRlQmVhbihvYlRyaWFnZS5nZXRPYmplY3RUeXBlQXR0cmlidXRlSWQoKSksIHRydWUpXG4gICAgICAgICAgICAvKkNsZWFuIGFjdHVhbCB2YWx1ZSovXG4gICAgICAgICAgICB2YWx1ZS5jbGVhcigpXG4gICAgICAgICAgICB2YWx1ZS5hZGQodmFsdWVCZWFuKTtcbiAgICAgICAgICAgIG9iVHJpYWdlLnNldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnModmFsdWUpXG5cbiAgICAgICAgICAgIC8vVXBkYXRlIE9KQkVDVCBhdHRyaWJ1dGUgdmFsdWVcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgb2JUcmlhZ2UgPSBvYmplY3RGYWNhZGUuc3RvcmVPYmplY3RBdHRyaWJ1dGVCZWFuKG9iVHJpYWdlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiB2aWUpIHtcbiAgICAgICAgICAgICAgICBsb2cud2FybihcIkNvdWxkIG5vdCB1cGRhdGUgb2JqZWN0IGF0dHJpYnV0ZSBkdWUgdG8gdmFsaWRhdGlvbiBleGNlcHRpb246XCIgKyB2aWUuZ2V0TWVzc2FnZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIkVcIilcbiAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiT1AtVEtULUFDQ09VTlRJTkdcIilcbiAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKVxuICAgICAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpXG5cbiAgICAgICAgb3V0cHV0LmFkZChlTGlzdClcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgfWVsc2V7XG4gICAgICAgIC8qT1AtMTAzODogY29uc3VudGl2YXppb25lIHRlcm1pbmF0YSBjb3JyZXR0YW1lbnRlIC0gc2UgXHUwMGU4IHN0YXRhIGVzZWd1aXRhIGNvbiB1bmF0YW50dW09dHJ1ZSBzZXR0byBhIE5vIGlsIGNhbXBvIE9QQUFfQVVUT01BVElDQUxMWV9DTE9TRUQqL1xuICAgICAgICBpZih1bmF0YW50dW0pe1xuICAgICAgICAgICAgZGVmIGN1cnJlbnRVc2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SmlyYUF1dGhlbnRpY2F0aW9uQ29udGV4dCgpLmdldExvZ2dlZEluVXNlcigpXG4gICAgICAgICAgICBkZWYgbWkgPSAoTXV0YWJsZUlzc3VlKSBpc3N1ZVxuXG4gICAgICAgICAgICBkZWYgZmllbGRDb25maWcgPSBhdXRvbWF0aWNhbGx5Q2xvc2VkLmdldFJlbGV2YW50Q29uZmlnKGlzc3VlKVxuICAgICAgICAgICAgbG9nLmRlYnVnIFwiZmllbGRDb25maWc6IFwiICsgZmllbGRDb25maWdcbiAgICAgICAgICAgIGRlZiBjZk5ld1ZhbHVlID0gQ29tcG9uZW50QWNjZXNzb3Iub3B0aW9uc01hbmFnZXIuZ2V0T3B0aW9ucyhmaWVsZENvbmZpZyk/LmZpbmQgeyBpdC50b1N0cmluZygpID09IFwiTm9cIiB9XG4gICAgICAgICAgICBhdXRvbWF0aWNhbGx5Q2xvc2VkLnVwZGF0ZVZhbHVlKG51bGwsIGlzc3VlLCBuZXcgTW9kaWZpZWRWYWx1ZShpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGF1dG9tYXRpY2FsbHlDbG9zZWQpLCBjZk5ld1ZhbHVlKSwgbmV3IERlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlcigpKVxuXG4gICAgICAgICAgICBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKS51cGRhdGVJc3N1ZShjdXJyZW50VXNlciwgbWksIEV2ZW50RGlzcGF0Y2hPcHRpb24uRE9fTk9UX0RJU1BBVENILCBmYWxzZSk7XG4gICAgICAgICAgICBpc3N1ZUluZGV4aW5nU2VydmljZS5yZUluZGV4KGlzc3VlKVxuICAgICAgICAgICAgbG9nLmRlYnVnIFwiVXBkYXRlZCBjdXN0b21maWVsZCAtIGlzc3VlIHByaW5jaXBhbGUgJHtpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGF1dG9tYXRpY2FsbHlDbG9zZWQpfVwiXG4gICAgICAgIH1cbiAgICB9XG4vL30iLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmluZGV4Lklzc3VlSW5kZXhpbmdTZXJ2aWNlCmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuZXZlbnQudHlwZS5FdmVudERpc3BhdGNoT3B0aW9uCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUudXRpbC5EZWZhdWx0SXNzdWVDaGFuZ2VIb2xkZXIKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Nb2RpZmllZFZhbHVlCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuaW5kZXguSXNzdWVJbmRleGluZ1NlcnZpY2UKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KQ2F0ZWdvcnkgbG9nID0gQ2F0ZWdvcnkuZ2V0SW5zdGFuY2UoImNvbS5vbnJlc29sdmUuamlyYS5ncm9vdnkuUG9zdEZ1bmN0aW9uIikKbG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpCgpJc3N1ZU1hbmFnZXIgaXNzdWVNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKCk7CkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTsKCklzc3VlSW5kZXhpbmdTZXJ2aWNlIAlpc3N1ZUluZGV4aW5nU2VydmljZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldENvbXBvbmVudChJc3N1ZUluZGV4aW5nU2VydmljZSkKZGVmIGF1dG9tYXRpY2FsbHlDbG9zZWQgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLmF1dG9tYXRpY2FsbHlDbG9zZWQnXS50b1N0cmluZygpKVswXQoKZGVmIHJlcXVlc3RNZXRob2QKZGVmIGJhc2VVUkwKCmludCBPUEFBID0gcHJvcGVydGllc1snaXNjaGVtYS5hYS5pZCddLnRvU3RyaW5nKCkudG9JbnRlZ2VyKCkKaW50IERCTyA9IHByb3BlcnRpZXNbJ2lzY2hlbWEuZGJvLmlkJ10udG9TdHJpbmcoKS50b0ludGVnZXIoKQpib29sZWFuIHVuYXRhbnR1bT10cnVlCgovKk9QLTEwMzg6IGxhIGNvbnRhYmlsaXp6YXppb25lIGRvdnLDoCBwcmV2ZWRlcmUgbGUgdW5hdGFudHVtIHJhdGVzIHNvbG8gc2UgaWwgdGlja2V0IG5vbiDDqCBzdGF0byBjaGl1c28gaW4gYXV0b21hdGljbyovCmlmKGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoYXV0b21hdGljYWxseUNsb3NlZCkhPW51bGwgJiYgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q2xvc2VkKS50b1N0cmluZygpLmVxdWFscygiWWVzIikpewoJdW5hdGFudHVtPWZhbHNlICAgIAp9CmxvZy5kZWJ1ZyAiQ29uc3VudGl2YXppb25lIHRpY2tldCAiICsgaXNzdWUua2V5ICsgIiBjb24gdW5hdGFudHVtOiAiICsgdW5hdGFudHVtCgovKiBSRVNUIEFQSSBwZXIgQ29udGFiaWxpenphemlvbmUgSW50ZXJ2ZW50byAqLwpyZXF1ZXN0TWV0aG9kID0gIkdFVCI7CgpiYXNlVVJMID0gImh0dHA6Ly8iICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyAiL29wL3Jlc3QvQUEvdGlja2V0L2lzc3VlS2V5LyIgKyBpc3N1ZS5rZXkudG9TdHJpbmcoKSArICIvY2xvc2U/dW09Iit1bmF0YW50dW0udG9TdHJpbmcoKQpsb2cuZGVidWcgImJhc2VVcmw6ICIgKyBiYXNlVVJMCgovKkRlZmluaXJlIHBhcmFtZXRybyBkaSBpbnB1dCB1bmF0YW50dW09dHJ1ZXxmYWxzZSBpbiBiYXNlIGFsIHZhbG9yZSBkZWxsYSB2YXJpYWJpbGUgYm9vbGVhbmEgdW5hdGFudHVtKi8KVVJMIHVybCA9IG5ldyBVUkwoYmFzZVVSTCkKSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eSgiQ29udGVudC1UeXBlIiwgImFwcGxpY2F0aW9uL2pzb24iKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoIkFjY2VwdCIsICIqLyoiKTsKY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTsKY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpOwpjb25uZWN0aW9uLmNvbm5lY3QoKTsKbG9nLmRlYnVnICJSZXNwb25zZUNvZGU6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkKbG9nLmRlYnVnICJSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKCi8vSXNzdWVJbmRleGluZ1NlcnZpY2UgaXNzdWVJbmRleGluZ1NlcnZpY2UgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDb21wb25lbnQoSXNzdWVJbmRleGluZ1NlcnZpY2UpCi8vaXNzdWVJbmRleGluZ1NlcnZpY2UucmVJbmRleChpc3N1ZU1hbmFnZXIuZ2V0SXNzdWVPYmplY3QoaXNzdWUua2V5LnRvU3RyaW5nKCkpKQoKLy9kZWYgdW5hVGFudHVtUmF0ZXMgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKCJPUEFBX1VOQVRBTlRVTV9SQVRFUyIpWzBdCi8vbG9nLndhcm4gInVuYVRhbnR1bVJhdGVzOiAiICsgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZSh1bmFUYW50dW1SYXRlcykKCmRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpCmRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKQpkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpCgppZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoIjIwMCIpKXsKICAgIGxvZy5kZWJ1ZyAidXJsOiAiICsgdXJsCiAgICBsb2cuZGVidWcgIlJlc3BvbnNlQ29kZToiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKQogICAgbG9nLmRlYnVnICJSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKICAgIGxvZy5kZWJ1ZyAiUmVzcG9uc2U6ICIgKyBjb25uZWN0aW9uCgogICAgLypST0xMQkFDSyovCiAgICAvKlJpbW96aW9uZSBhbGxlZ2F0byByYXBwb3J0byBkaSBpbnRlcnZlbnRvIGFwcGVuYSBjcmVhdG8qLwogICAgLyogR2V0IEluc2lnaHQgSVFMIEZhY2FkZSBmcm9tIHBsdWdpbiBhY2Nlc3NvciAqLwogICAgQ2xhc3MgaXFsRmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5JUUxGYWNhZGUiKTsgCiAgICBkZWYgaXFsRmFjYWRlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKGlxbEZhY2FkZUNsYXNzKTsKCiAgICAvKiBHZXQgSW5zaWdodCBPYmplY3QgRmFjYWRlIGZyb20gcGx1Z2luIGFjY2Vzc29yICovCiAgICBDbGFzcyBvYmplY3RGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdEZhY2FkZSIpOwogICAgZGVmIG9iamVjdEZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShvYmplY3RGYWNhZGVDbGFzcyk7CgogICAgLyogR2V0IEluc2lnaHQgT2JqZWN0IFR5cGUgRmFjYWRlIGZyb20gcGx1Z2luIGFjY2Vzc29yICovCiAgICBDbGFzcyBvYmplY3RUeXBlRmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlRmFjYWRlIik7CiAgICBkZWYgb2JqZWN0VHlwZUZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShvYmplY3RUeXBlRmFjYWRlQ2xhc3MpOwoKICAgIC8qIEdldCBJbnNpZ2h0IE9iamVjdCBBdHRyaWJ1dGUgRmFjYWRlIGZyb20gcGx1Z2luIGFjY2Vzc29yICovCiAgICBDbGFzcyBvYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlIik7CiAgICBkZWYgb2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShvYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlQ2xhc3MpOwoKICAgIENsYXNzIG9iamVjdEF0dHJpYnV0ZUJlYW5GYWN0b3J5Q2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LnNlcnZpY2VzLm1vZGVsLmZhY3RvcnkuT2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnkiKTsKICAgIGRlZiBvYmplY3RBdHRyaWJ1dGVCZWFuRmFjdG9yeSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShvYmplY3RBdHRyaWJ1dGVCZWFuRmFjdG9yeUNsYXNzKTsKCiAgICAvKiBTcGVjaWZ5IHRoZSBzY2hlbWEgaWQgYXMgd2VsbCBhcyB0aGUgSVFMIHRoYXQgd2lsbCBmZXRjaCBvYmplY3RzLiBJbiB0aGlzIGNhc2UgYWxsIG9iamVjdHMgd2l0aCBOYW1lIG1hdGNoaW5nIHRoZSB2YWx1ZUNGLCBiZSBzdXJlIHRvIGluY2x1ZGUgIiBhcm91bmQgdmFsdWUgKi8KICAgIGRlZiBvYmplY3RzID0gaXFsRmFjYWRlLmZpbmRPYmplY3RzQnlJUUxBbmRTY2hlbWEoREJPLCAiXCIiICsgcHJvcGVydGllc1snaW9iai5hdHRhY2htZW50Q2F0ZWdvcnkuY2F0ZWdvcnlSZWYnXS50b1N0cmluZygpICsgIlwiLlwiIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5Lm5hbWUnXS50b1N0cmluZygpICsgIlwiID0gXCIiICsgcHJvcGVydGllc1snaW9iai5hdHRhY2htZW50Q2F0ZWdvcnkub2Jqcy5yYXBwSW50RkFBQyddLnRvU3RyaW5nKCkgKyAiXCIgQU5EICIgKyBwcm9wZXJ0aWVzWydpb2JqLmF0dGFjaG1lbnRDYXRlZ29yeS5kZWxldGVkJ10udG9TdHJpbmcoKSArICIhPXRydWUgQU5EIG9iamVjdCBIQVZJTkcgY29ubmVjdGVkVGlja2V0cyhrZXkgPSAiICsgaXNzdWUua2V5LnRvU3RyaW5nKCkgKyAiKSIpOyAvLyBTZWUgdGhlIGNvbXBsZXRlIGxpc3Qgb2YgcG9zc2libGUgSVFMIG9uIHRoZSBJbnNpZ2h0IFF1ZXJ5IExhbmd1YWdlIGRvY3VtZW50YXRpb24gcGFnZQogICAgLyogSWYgdGhpcyBpcyBhIG1hbmRhdG9yeSBmaWVsZCB5b3Ugc2hvdWxkIGJlIGFibGUgdG8gZG8gdGhpczogKi8KICAgIGxvZy5pbmZvKCJJbnNpZ2h0IG9iamVjdDogIiArIG9iamVjdHNbMF0pOwoKICAgIGlmKG9iamVjdHNbMF0pewogICAgICAgIC8qIFVQREFURSBPSkJFQ1QgREVMRVRFRCBWQUxVRSAqLwogICAgICAgIGRlZiBvYlRyaWFnZSA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbihvYmplY3RzWzBdLmdldElkKCksIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmRlbGV0ZWQnXS50b1N0cmluZygpKS5jcmVhdGVNdXRhYmxlKCkgIAogICAgICAgIGRlZiB2YWx1ZSA9IG9iVHJpYWdlLmdldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnMoKQoKICAgICAgICBkZWYgdmFsdWVCZWFuID0gb2JUcmlhZ2UuY3JlYXRlT2JqZWN0QXR0cmlidXRlVmFsdWVCZWFuKCkKICAgICAgICB2YWx1ZUJlYW4uc2V0VmFsdWUob2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZS5sb2FkT2JqZWN0VHlwZUF0dHJpYnV0ZUJlYW4ob2JUcmlhZ2UuZ2V0T2JqZWN0VHlwZUF0dHJpYnV0ZUlkKCkpLCB0cnVlKQogICAgICAgIC8qQ2xlYW4gYWN0dWFsIHZhbHVlKi8KICAgICAgICB2YWx1ZS5jbGVhcigpCiAgICAgICAgdmFsdWUuYWRkKHZhbHVlQmVhbik7CiAgICAgICAgb2JUcmlhZ2Uuc2V0T2JqZWN0QXR0cmlidXRlVmFsdWVCZWFucyh2YWx1ZSkKCiAgICAgICAgLy9VcGRhdGUgT0pCRUNUIGF0dHJpYnV0ZSB2YWx1ZQogICAgICAgIHRyeSB7CiAgICAgICAgICAgIG9iVHJpYWdlID0gb2JqZWN0RmFjYWRlLnN0b3JlT2JqZWN0QXR0cmlidXRlQmVhbihvYlRyaWFnZSk7CiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIHZpZSkgewogICAgICAgICAgICBsb2cud2FybigiQ291bGQgbm90IHVwZGF0ZSBvYmplY3QgYXR0cmlidXRlIGR1ZSB0byB2YWxpZGF0aW9uIGV4Y2VwdGlvbjoiICsgdmllLmdldE1lc3NhZ2UoKSk7CiAgICAgICAgfQogICAgfQoKICAgIGVMaXN0RXJyb3JzLmFkZCgiRSIpCiAgICBlTGlzdEVycm9ycy5hZGQoIk9QLVRLVC1BQ0NPVU5USU5HIikKICAgIGVycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArICIgIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkpCiAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKQogICAgZUxpc3QuYWRkKGVMaXN0RXJyb3JzKQoKICAgIG91dHB1dC5hZGQoZUxpc3QpCiAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7IkUiOiInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnIn0nKQogICAgLy90aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCJFIiwgb3V0cHV0LnRvU3RyaW5nKCkpCn1lbHNlewogICAgLypPUC0xMDM4OiBjb25zdW50aXZhemlvbmUgdGVybWluYXRhIGNvcnJldHRhbWVudGUgLSBzZSDDqCBzdGF0YSBlc2VndWl0YSBjb24gdW5hdGFudHVtPXRydWUgc2V0dG8gYSBObyBpbCBjYW1wbyBPUEFBX0FVVE9NQVRJQ0FMTFlfQ0xPU0VEKi8KICAgIGlmKHVuYXRhbnR1bSl7CiAgICAgICAgZGVmIGN1cnJlbnRVc2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SmlyYUF1dGhlbnRpY2F0aW9uQ29udGV4dCgpLmdldExvZ2dlZEluVXNlcigpCiAgICAgICAgZGVmIG1pID0gKE11dGFibGVJc3N1ZSkgaXNzdWUKCiAgICAgICAgZGVmIGZpZWxkQ29uZmlnID0gYXV0b21hdGljYWxseUNsb3NlZC5nZXRSZWxldmFudENvbmZpZyhpc3N1ZSkKICAgICAgICBsb2cuZGVidWcgImZpZWxkQ29uZmlnOiAiICsgZmllbGRDb25maWcKICAgICAgICBkZWYgY2ZOZXdWYWx1ZSA9IENvbXBvbmVudEFjY2Vzc29yLm9wdGlvbnNNYW5hZ2VyLmdldE9wdGlvbnMoZmllbGRDb25maWcpPy5maW5kIHsgaXQudG9TdHJpbmcoKSA9PSAiTm8iIH0KICAgICAgICBhdXRvbWF0aWNhbGx5Q2xvc2VkLnVwZGF0ZVZhbHVlKG51bGwsIGlzc3VlLCBuZXcgTW9kaWZpZWRWYWx1ZShpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGF1dG9tYXRpY2FsbHlDbG9zZWQpLCBjZk5ld1ZhbHVlKSwgbmV3IERlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlcigpKQoKICAgICAgICBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKS51cGRhdGVJc3N1ZShjdXJyZW50VXNlciwgbWksIEV2ZW50RGlzcGF0Y2hPcHRpb24uRE9fTk9UX0RJU1BBVENILCBmYWxzZSk7CiAgICAgICAgaXNzdWVJbmRleGluZ1NlcnZpY2UucmVJbmRleChpc3N1ZSkKICAgICAgICBsb2cuZGVidWcgIlVwZGF0ZWQgY3VzdG9tZmllbGQgLSBpc3N1ZSBwcmluY2lwYWxlICR7aXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q2xvc2VkKX0iCiAgICB9Cn0K</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="24">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">81aa9673-d0a1-4cdb-9909-19371f018388</arg>
                  <arg name="FIELD_NOTES">YCFgUE0gVGlja2V0IC0gVXBkYXRlIEhBUkRXQVJFLk1BSU5URU5BTkNFX05FWFRfVElDS0VUX0RBVEUgKyBIQVJEV0FSRS5NQUlOVEVOQU5DRV9MQVNUX1RJQ0tFVF9EQVRF</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIGxpbmtlZFRpY2tldHMgJiBGYXN0LVRyYW5zYWN0IHRoZW0=</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT"></arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22693</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="6" name="Completed to be Closed">
      <meta name="jira.status.id">14330</meta>
      <actions>
        <action id="161" name="ODV" view="fieldscreen">
          <meta name="opsbar-sequence">40</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19908</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">1428cc10-dd49-4245-bfa5-1c21e88f47e3</arg>
                <arg name="FIELD_NOTES">YCFgTWFpbnRlbmFuY2UgVGlja2V0IE9SIFBNIFRpY2tldA==</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnTWFpbnRlbmFuY2UgVGlja2V0JyB8fCBpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnUGxhbm5lZCBNYWludGVuYW5jZSBUaWNrZXQnIiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIE9QX1NBTEVTX09SREVSX0RBVEUgLSBJZiBub3QgbnVsbCAtIHRyYW5zaXRpb24gaGFzIGFscmVhZHkgYmVlbiBleGVjdXRlZA==</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KY2ZWYWx1ZXNbcHJvcGVydGllc1snY2Yuc2FsZXNPcmRlckRhdGUnXV0gPT0gbnVsbHx8fA==</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIE9QX0FVVE9NQVRJQ0FMTFlfQ0xPU0VEIC0gaWYgWWVzIGRvbid0IGFsbG93IHRyYW5zaXRpb24=</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KY2ZWYWx1ZXNbcHJvcGVydGllc1snY2YuYXV0b21hdGljYWxseUNsb3NlZCddXSA9PSBudWxsIHx8IGNmVmFsdWVzW3Byb3BlcnRpZXNbJ2NmLmF1dG9tYXRpY2FsbHlDbG9zZWQnXV0/LnZhbHVlID09ICdObyd8fHw=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">3d74ebaab228199aff706fc0e35573a6d6df31fb</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlcXVpcmVkIEZpZWxkcyAtIHNvbG8gZXJyb3JzLCBubyB3YXJuaW5ncw==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">4ff179ac-14f3-424d-9faa-d832d37c527a</arg>
              <arg name="FIELD_NOTES">YCFgQ3JlYXRlIFNOICYgU08gZm9yIG9sZCB0aWNrZXRz</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">f794e26f6a504d3cc776bd5c16d3ff518ff13b6f</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBPUCBnZW5lcmF6aW9uZSBPRFYgc3UgU0FQ</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5Xb3JrZmxvd0V4Y2VwdGlvbjtcbmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvblxuaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyO1xuaW1wb3J0IGdyb292eS5qc29uLlN0cmVhbWluZ0pzb25CdWlsZGVyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5DdXN0b21GaWVsZE1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3I7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5NdXRhYmxlSXNzdWVcbmltcG9ydCBvcmcuYXBhY2hlLmNvbW1vbnMuY29kZWMuYmluYXJ5LkJhc2U2NDtcbmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5XG5pbXBvcnQgZ3Jvb3Z5eC5uZXQuaHR0cC5IVFRQQnVpbGRlclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5saW5rLklzc3VlTGlua1xuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuXG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcblxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpO1xuQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpO1xuZGVmIG9kdiA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShcIk9QX1NBTEVTX09SREVSXCIpWzBdXG5cbmRlZiByZXF1ZXN0TWV0aG9kID0gXCJQT1NUXCJcblxuZGVmIHJlbGF0ZXNJbklzc3VlTGluaz1mYWxzZVxuZGVmIHJlbGF0ZXNPdXRJc3N1ZUxpbms9ZmFsc2VcbmRlZiBsaW5rZWRUaWNrZXRzPW5ldyBBcnJheUxpc3QoKVxuXG5MaXN0PElzc3VlTGluaz4gYWxsSW5Jc3N1ZUxpbmsgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZUxpbmtNYW5hZ2VyKCkuZ2V0SW53YXJkTGlua3MoaXNzdWUuZ2V0SWQoKSlcbiAgICBmb3IgKEl0ZXJhdG9yPElzc3VlTGluaz4gb3V0SXRlcmF0b3IgPSBhbGxJbklzc3VlTGluay5pdGVyYXRvcigpOyBvdXRJdGVyYXRvci5oYXNOZXh0KCk7KSB7XG4gICAgICAgIElzc3VlTGluayBpc3N1ZUxpbmsgPSAoSXNzdWVMaW5rKSBvdXRJdGVyYXRvci5uZXh0KCk7XG5cbiAgICAgICAgaWYoaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNSZWxhdGVzJ10udG9TdHJpbmcoKSkgJiYgaXNzdWVMaW5rLmdldFNvdXJjZU9iamVjdCgpLnN0YXR1cy5uYW1lID09IFwiQ29tcGxldGVkIHRvIGJlIENsb3NlZFwiICYmIChpc3N1ZUxpbmsuZ2V0U291cmNlT2JqZWN0KCkuZ2V0Q3VzdG9tRmllbGRWYWx1ZShvZHYpID09IG51bGwgfHwgaXNzdWVMaW5rLmdldFNvdXJjZU9iamVjdCgpLmdldEN1c3RvbUZpZWxkVmFsdWUob2R2KSA9PSBcIlwiKSl7XG4gICAgICAgICAgICByZWxhdGVzSW5Jc3N1ZUxpbms9dHJ1ZVxuICAgICAgICAgICAgbGlua2VkVGlja2V0cy5hZGQoaXNzdWVMaW5rLmdldFNvdXJjZU9iamVjdCgpLnRvU3RyaW5nKCkpXG4gICAgICAgICAgICBsb2cuZGVidWcgXCJJc3N1ZSBjb24gcmVsYXRlc0luSXNzdWVMaW5rXCJcbiAgICAgICAgfVxuICAgIH1cbiAgICBMaXN0PElzc3VlTGluaz4gYWxsT3V0SXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldE91dHdhcmRMaW5rcyhpc3N1ZS5nZXRJZCgpKVxuICAgIGZvciAoSXRlcmF0b3I8SXNzdWVMaW5rPiBvdXRJdGVyYXRvciA9IGFsbE91dElzc3VlTGluay5pdGVyYXRvcigpOyBvdXRJdGVyYXRvci5oYXNOZXh0KCk7KSB7XG4gICAgICAgIElzc3VlTGluayBpc3N1ZUxpbmsgPSAoSXNzdWVMaW5rKSBvdXRJdGVyYXRvci5uZXh0KCk7XG5cbiAgICAgICAgaWYoaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNSZWxhdGVzJ10udG9TdHJpbmcoKSkgJiYgaXNzdWVMaW5rLmdldERlc3RpbmF0aW9uT2JqZWN0KCkuc3RhdHVzLm5hbWUgPT0gXCJDb21wbGV0ZWQgdG8gYmUgQ2xvc2VkXCIgJiYgKGlzc3VlTGluay5nZXREZXN0aW5hdGlvbk9iamVjdCgpLmdldEN1c3RvbUZpZWxkVmFsdWUob2R2KSA9PSBudWxsIHx8IGlzc3VlTGluay5nZXREZXN0aW5hdGlvbk9iamVjdCgpLmdldEN1c3RvbUZpZWxkVmFsdWUob2R2KSA9PSBcIlwiKSl7XG4gICAgICAgICAgICByZWxhdGVzT3V0SXNzdWVMaW5rPXRydWVcbiAgICAgICAgICAgIGxpbmtlZFRpY2tldHMuYWRkKGlzc3VlTGluay5nZXREZXN0aW5hdGlvbk9iamVjdCgpLnRvU3RyaW5nKCkpXG4gICAgICAgICAgICBsb2cuZGVidWcgXCJJc3N1ZSBjb24gcmVsYXRlc091dElzc3VlTGlua1wiXG4gICAgICAgIH1cbiAgICB9XG5cbi8qIFJFU1QgQVBJIHBlciBJbnZpbyBOb3RpZmljYSBFbWFpbCBPTlNJVEVfUkVQT1JUICovXG5kZWYgYm9keV9yZXFcblxuaWYocmVsYXRlc0luSXNzdWVMaW5rIHx8IHJlbGF0ZXNPdXRJc3N1ZUxpbmspe1xuICAgIGJvZHlfcmVxID0gW1xuICAgICAgICBcImlzc3VlS2V5XCI6IGlzc3VlLmtleSxcbiAgICAgICAgXCJsaW5rZWRUaWNrZXRzXCI6IGxpbmtlZFRpY2tldHNcbiAgICBdXG59ZWxzZXtcbiAgICBib2R5X3JlcSA9IFtcbiAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXlcbiAgICBdXG59XG5cbmRlZiBiYXNlVVJMID0gXCJodHRwOi8vXCIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArIFwiL29wL3Jlc3QvamlyYS9BQS9zYWxlcy9vcmRlci9jcmVhdGVcIlxubG9nLmRlYnVnIGJhc2VVUkxcblVSTCB1cmwgPSBuZXcgVVJMKGJhc2VVUkwpXG5IdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xuY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLThcIik7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbmNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7XG5jb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7XG5jb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxubG9nLmRlYnVnIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5jb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKVxuZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpXG5kZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbmRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KClcblxuaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAwXCIpKXtcbiAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcbiAgICBsb2cuZGVidWcgXCJFcnJvclN0cmVhbTogXCIgKyBjb25uZWN0aW9uLmdldEVycm9yU3RyZWFtKCkudG9TdHJpbmcoKVxuICAgIGxvZy5kZWJ1ZyBcImdldEhlYWRlckZpZWxkcygpOiBcIiArIGNvbm5lY3Rpb24uZ2V0SGVhZGVyRmllbGRzKClcbiAgICBkZWYgb3V0cHV0TXNnID0gKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0XG4gICAgbG9nLmRlYnVnIFwiKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0OiBcIiArIG91dHB1dE1zZ1xuICAgIFxuICAgIGRlZiBqc29uU2x1cnBlciA9IG5ldyBKc29uU2x1cnBlcigpXG4gICAgZGVmIGpzb25fb2JqZWN0ID0ganNvblNsdXJwZXIucGFyc2VUZXh0KG91dHB1dE1zZylcbiAgICBhc3NlcnQganNvbl9vYmplY3QgaW5zdGFuY2VvZiBNYXAgIFxuICAgIGxvZy5kZWJ1ZyBcIm1lc3NhZ2U6IFwiICsgIGpzb25fb2JqZWN0Lm1lc3NhZ2VcbiAgICBcbiAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgZUxpc3RFcnJvcnMuYWRkKFwiT1AtU0FQLU9EVlwiKVxuICAgIGVycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArIFwiIFwiICsganNvbl9vYmplY3QuZXJyb3JzWzBdLnRvU3RyaW5nKCkpXG4gICAgZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncylcbiAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpXG5cbiAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgIHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oJ3tcIkVcIjpcIicgKyBvdXRwdXQudG9TdHJpbmcoKSArICdcIn0nKVxuICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbihcIkVcIiwgb3V0cHV0LnRvU3RyaW5nKCkpXG59Iiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuV29ya2Zsb3dFeGNlcHRpb247CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7CmltcG9ydCBncm9vdnkuanNvbi5TdHJlYW1pbmdKc29uQnVpbGRlcjsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5DdXN0b21GaWVsZE1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3I7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlCmltcG9ydCBvcmcuYXBhY2hlLmNvbW1vbnMuY29kZWMuYmluYXJ5LkJhc2U2NDsKaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGdyb292eXgubmV0Lmh0dHAuSFRUUEJ1aWxkZXIKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5saW5rLklzc3VlTGluawppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lcgppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGwKClByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKCkKRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJykKcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHsKCXByb3BlcnRpZXMubG9hZChpdCkKfQpDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQpsb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRykKCklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTsKQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpOwoKCmRlZiByZXF1ZXN0TWV0aG9kID0gIlBPU1QiCgpkZWYgcmVsYXRlc0luSXNzdWVMaW5rPWZhbHNlCmRlZiByZWxhdGVzT3V0SXNzdWVMaW5rPWZhbHNlCmRlZiBsaW5rZWRUaWNrZXRzPW5ldyBBcnJheUxpc3QoKQoKTGlzdDxJc3N1ZUxpbms+IGFsbEluSXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldElud2FyZExpbmtzKGlzc3VlLmdldElkKCkpCiAgICBmb3IgKEl0ZXJhdG9yPElzc3VlTGluaz4gb3V0SXRlcmF0b3IgPSBhbGxJbklzc3VlTGluay5pdGVyYXRvcigpOyBvdXRJdGVyYXRvci5oYXNOZXh0KCk7KSB7CiAgICAgICAgSXNzdWVMaW5rIGlzc3VlTGluayA9IChJc3N1ZUxpbmspIG91dEl0ZXJhdG9yLm5leHQoKTsKCiAgICAgICAgaWYoaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNSZWxhdGVzJ10udG9TdHJpbmcoKSkpewogICAgICAgICAgICByZWxhdGVzSW5Jc3N1ZUxpbms9dHJ1ZQogICAgICAgICAgICBsaW5rZWRUaWNrZXRzLmFkZChpc3N1ZUxpbmsuZ2V0U291cmNlT2JqZWN0KCkudG9TdHJpbmcoKSkKICAgICAgICAgICAgbG9nLmRlYnVnICJJc3N1ZSBjb24gcmVsYXRlc0luSXNzdWVMaW5rIgogICAgICAgIH0KICAgIH0KICAgIExpc3Q8SXNzdWVMaW5rPiBhbGxPdXRJc3N1ZUxpbmsgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZUxpbmtNYW5hZ2VyKCkuZ2V0T3V0d2FyZExpbmtzKGlzc3VlLmdldElkKCkpCiAgICBmb3IgKEl0ZXJhdG9yPElzc3VlTGluaz4gb3V0SXRlcmF0b3IgPSBhbGxPdXRJc3N1ZUxpbmsuaXRlcmF0b3IoKTsgb3V0SXRlcmF0b3IuaGFzTmV4dCgpOykgewogICAgICAgIElzc3VlTGluayBpc3N1ZUxpbmsgPSAoSXNzdWVMaW5rKSBvdXRJdGVyYXRvci5uZXh0KCk7CgogICAgICAgIGlmKGlzc3VlTGluay5pc3N1ZUxpbmtUeXBlLmdldE5hbWUoKS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpbC5saW5rZWRUa3RzUmVsYXRlcyddLnRvU3RyaW5nKCkpKXsKICAgICAgICAgICAgcmVsYXRlc091dElzc3VlTGluaz10cnVlCiAgICAgICAgICAgIGxpbmtlZFRpY2tldHMuYWRkKGlzc3VlTGluay5nZXREZXN0aW5hdGlvbk9iamVjdCgpLnRvU3RyaW5nKCkpCiAgICAgICAgICAgIGxvZy5kZWJ1ZyAiSXNzdWUgY29uIHJlbGF0ZXNPdXRJc3N1ZUxpbmsiCiAgICAgICAgfQogICAgfQoKLyogUkVTVCBBUEkgcGVyIEludmlvIE5vdGlmaWNhIEVtYWlsIE9OU0lURV9SRVBPUlQgKi8KZGVmIGJvZHlfcmVxCgppZihyZWxhdGVzSW5Jc3N1ZUxpbmsgfHwgcmVsYXRlc091dElzc3VlTGluayl7CiAgICBib2R5X3JlcSA9IFsKICAgICAgICAiaXNzdWVLZXkiOiBpc3N1ZS5rZXksCiAgICAgICAgImxpbmtlZFRpY2tldHMiOiBsaW5rZWRUaWNrZXRzCiAgICBdCn1lbHNlewogICAgYm9keV9yZXEgPSBbCiAgICAgICAgImlzc3VlS2V5IjogaXNzdWUua2V5CiAgICBdCn0KCmRlZiBiYXNlVVJMID0gImh0dHA6Ly8iICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyAiL29wL3Jlc3QvamlyYS9BQS9zYWxlcy9vcmRlci9jcmVhdGUiCmxvZy5kZWJ1ZyBiYXNlVVJMClVSTCB1cmwgPSBuZXcgVVJMKGJhc2VVUkwpCkh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7CmNvbm5lY3Rpb24uc2V0UmVxdWVzdE1ldGhvZChyZXF1ZXN0TWV0aG9kKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoIkNvbnRlbnQtVHlwZSIsICJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLTgiKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoIkFjY2VwdCIsICIqLyoiKTsKY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTsKY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpOwpjb25uZWN0aW9uLm91dHB1dFN0cmVhbQpjb25uZWN0aW9uLm91dHB1dFN0cmVhbS53aXRoV3JpdGVyKCJVVEYtOCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfQpsb2cuZGVidWcgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0KY29ubmVjdGlvbi5jb25uZWN0KCk7CgpkZWYgb3V0cHV0ID0gbmV3IEFycmF5TGlzdCgpCmRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKQpkZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIGVycm9yTXNncyA9IG5ldyBBcnJheUxpc3QoKQoKaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKCIyMDAiKSl7CiAgICBsb2cuZGVidWcgInVybDogIiArIHVybAogICAgbG9nLmRlYnVnICJSZXNwb25zZUNvZGU6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkKICAgIGxvZy5kZWJ1ZyAiUmVzcG9uc2VNZXNzYWdlOiIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpCiAgICBsb2cuZGVidWcgIkVycm9yU3RyZWFtOiAiICsgY29ubmVjdGlvbi5nZXRFcnJvclN0cmVhbSgpLnRvU3RyaW5nKCkKICAgIGxvZy5kZWJ1ZyAiZ2V0SGVhZGVyRmllbGRzKCk6ICIgKyBjb25uZWN0aW9uLmdldEhlYWRlckZpZWxkcygpCiAgICBkZWYgb3V0cHV0TXNnID0gKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0CiAgICBsb2cuZGVidWcgIigoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dDogIiArIG91dHB1dE1zZwogICAgCiAgICBkZWYganNvblNsdXJwZXIgPSBuZXcgSnNvblNsdXJwZXIoKQogICAgZGVmIGpzb25fb2JqZWN0ID0ganNvblNsdXJwZXIucGFyc2VUZXh0KG91dHB1dE1zZykKICAgIGFzc2VydCBqc29uX29iamVjdCBpbnN0YW5jZW9mIE1hcCAgCiAgICBsb2cuZGVidWcgIm1lc3NhZ2U6ICIgKyAganNvbl9vYmplY3QubWVzc2FnZQogICAgCiAgICBlTGlzdEVycm9ycy5hZGQoIkUiKQogICAgZUxpc3RFcnJvcnMuYWRkKCJPUC1TQVAtT0RWIikKICAgIGVycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArICIgIiArIGpzb25fb2JqZWN0Lm1lc3NhZ2UpCiAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKQogICAgZUxpc3QuYWRkKGVMaXN0RXJyb3JzKQoKICAgIG91dHB1dC5hZGQoZUxpc3QpCiAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7IkUiOiInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnIn0nKQogICAgLy90aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCJFIiwgb3V0cHV0LnRvU3RyaW5nKCkpCn0=</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_ACTION">181 Tkt Chiuso</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IENsb3NlIHRrdCBpZiBPRFYgYW5kIE9EQSBoYXZlIGJlZW4gY3JlYXRlZA==</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.FasttrackTransition</arg>
                  <arg name="FIELD_CONDITION">YCFgY2ZWYWx1ZXNbJ09QX1BVUkNIQVNFX09SREVSJ10gIT0gbnVsbCAmJiBjZlZhbHVlc1snT1BfUFVSQ0hBU0VfT1JERVJfREFURSddICE9IG51bGwgJiYgY2ZWYWx1ZXNbJ09QX1BVUkNIQVNFX09SREVSX1RPVEFMJ10gIT0gbnVsbHx8fA==</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_TRANSITION_OPTIONS"></arg>
                  <arg name="FIELD_ADDITIONAL_SCRIPT">YCFg</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="171" name="ODA" view="fieldscreen">
          <meta name="opsbar-sequence">50</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19908</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">edf645c7-f017-4c6b-a509-5be062f0a1cd</arg>
                <arg name="FIELD_NOTES">YCFgTWFpbnRlbmFuY2UgVGt0IE9SIFBNIFRpY2tldCAtIEFORCBTdXBwbGllciBOT1QgTlVMTA==</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xuaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnlcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyXG5pbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGxcblxuUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKVxuRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJylcbnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7XG5cdHByb3BlcnRpZXMubG9hZChpdClcbn1cblxuZGVmIHN1cHBsaWVyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLnN1cHBsaWVyJ10udG9TdHJpbmcoKSlcbmRlZiB0cm92YXRvID0gZmFsc2VcblxuZm9yIChzIGluIHN1cHBsaWVyKXtcbiAgICBpZiAoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzKSAhPSBudWxsKXtcbiAgICAgICAgdHJvdmF0byA9IHRydWVcbiAgICB9XG59XG4oaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ01haW50ZW5hbmNlIFRpY2tldCcgfHwgaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ1BsYW5uZWQgTWFpbnRlbmFuY2UgVGlja2V0JykgJiYgdHJvdmF0byA9PSB0cnVlIiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIE9QX1BVUkNIQVNFX09SREVSX0RBVEUgLSBJZiBub3QgbnVsbCAtIHRyYW5zaXRpb24gaGFzIGFscmVhZHkgYmVlbiBleGVjdXRlZA==</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KY2ZWYWx1ZXNbcHJvcGVydGllc1snY2YucHVyY2hhc2VPcmRlckRhdGUnXV0gPT0gbnVsbCAmJiBjZlZhbHVlc1twcm9wZXJ0aWVzWydjZi53ZlB1cmNoYXNlT3JkZXJUb1MnXV0gPT0gbnVsbHx8fA==</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIE9QQUFfQVVUT01BVElDQUxMWV9DTE9TRUQgLSBpZiBZZXMgZG9uJ3QgYWxsb3cgdHJhbnNpdGlvbg==</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KY2ZWYWx1ZXNbcHJvcGVydGllc1snY2YuYXV0b21hdGljYWxseUNsb3NlZCddXSA9PSBudWxsIHx8IGNmVmFsdWVzW3Byb3BlcnRpZXNbJ2NmLmF1dG9tYXRpY2FsbHlDbG9zZWQnXV0/LnZhbHVlID09ICdObyd8fHw=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">3c57210d24c112bcff020e8630134c0aaf31c353</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlcXVpcmVkIEZpZWxkcyAtIHNvbG8gZXJyb3JzLCBubyB3YXJuaW5ncw==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">fe514447-9df4-4f6e-a146-4880c721f4ec</arg>
              <arg name="FIELD_NOTES">YCFgQ3JlYXRlIFNOICYgU08gZm9yIG9sZCB0aWNrZXRz</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">3657615f14a01fb91bdcb3a532f38f81b3555fa9</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IGdlbmVyYXppb25lIE9EQSBmb3JuaXRvcmU=</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXJcbmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5XG5pbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXG5cblByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKClcbkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpXG5wcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0ge1xuXHRwcm9wZXJ0aWVzLmxvYWQoaXQpXG59XG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUubGluay5Jc3N1ZUxpbmtcblxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpO1xuLypTY3JpcHQgVmFyaWFibGVzKi9cbi8vUGVyIFBvc3QgRnVuY3Rpb25cbi8vaXNzdWUgPSBpc3N1ZVxuLy9QZXIgdGVzdCBkYSBjb25zb2xlXG4vL2lzc3VlID0gaXNzdWVNYW5hZ2VyLmdldElzc3VlQnlLZXlJZ25vcmVDYXNlKFwiQUFTLTM0ODFcIilcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiBvZGEgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUoXCJPUF9QVVJDSEFTRV9PUkRFUlwiKVswXVxuZGVmIHJlcXVlc3RNZXRob2RcbmRlZiBiYXNlVVJMXG5cblVSTCB1cmxcbkh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb25cblxuLyogUkVTVCBBUEkgcGVyIEdlbmVyYXppb25lIE9EQSAqL1xucmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuZGVmIHJlbGF0ZXNJbklzc3VlTGluaz1mYWxzZVxuZGVmIHJlbGF0ZXNPdXRJc3N1ZUxpbms9ZmFsc2VcbmRlZiBsaW5rZWRUaWNrZXRzPW5ldyBBcnJheUxpc3QoKVxuTGlzdDxJc3N1ZUxpbms+IGFsbEluSXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldElud2FyZExpbmtzKGlzc3VlLmdldElkKCkpXG5mb3IgKEl0ZXJhdG9yPElzc3VlTGluaz4gb3V0SXRlcmF0b3IgPSBhbGxJbklzc3VlTGluay5pdGVyYXRvcigpOyBvdXRJdGVyYXRvci5oYXNOZXh0KCk7KSB7XG4gICAgSXNzdWVMaW5rIGlzc3VlTGluayA9IChJc3N1ZUxpbmspIG91dEl0ZXJhdG9yLm5leHQoKTtcblxuICAgIGlmKGlzc3VlTGluay5nZXRTb3VyY2VPYmplY3QoKSE9bnVsbCAmJiBpc3N1ZUxpbmsuaXNzdWVMaW5rVHlwZS5nZXROYW1lKCkudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snaWwubGlua2VkVGt0c1JlbGF0ZXMnXS50b1N0cmluZygpKSAmJiBpc3N1ZUxpbmsuZ2V0U291cmNlT2JqZWN0KCkuc3RhdHVzLm5hbWUgPT0gXCJDb21wbGV0ZWQgdG8gYmUgQ2xvc2VkXCIgJiYgKGlzc3VlTGluay5nZXRTb3VyY2VPYmplY3QoKS5nZXRDdXN0b21GaWVsZFZhbHVlKG9kYSkgPT0gbnVsbCB8fCBpc3N1ZUxpbmsuZ2V0U291cmNlT2JqZWN0KCkuZ2V0Q3VzdG9tRmllbGRWYWx1ZShvZGEpID09IFwiXCIpKXtcbiAgICAgICAgcmVsYXRlc0luSXNzdWVMaW5rPXRydWVcbiAgICAgICAgbGlua2VkVGlja2V0cy5hZGQoaXNzdWVMaW5rLmdldFNvdXJjZU9iamVjdCgpLnRvU3RyaW5nKCkpXG4gICAgICAgIGxvZy5kZWJ1ZyBcIklzc3VlIGNvbiByZWxhdGVzSW5Jc3N1ZUxpbmtcIlxuICAgIH1cbn1cbkxpc3Q8SXNzdWVMaW5rPiBhbGxPdXRJc3N1ZUxpbmsgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZUxpbmtNYW5hZ2VyKCkuZ2V0T3V0d2FyZExpbmtzKGlzc3VlLmdldElkKCkpXG5mb3IgKEl0ZXJhdG9yPElzc3VlTGluaz4gb3V0SXRlcmF0b3IgPSBhbGxPdXRJc3N1ZUxpbmsuaXRlcmF0b3IoKTsgb3V0SXRlcmF0b3IuaGFzTmV4dCgpOykge1xuICAgIElzc3VlTGluayBpc3N1ZUxpbmsgPSAoSXNzdWVMaW5rKSBvdXRJdGVyYXRvci5uZXh0KCk7XG5cbiAgICBpZihpc3N1ZUxpbmsuZ2V0RGVzdGluYXRpb25PYmplY3QoKSE9bnVsbCAmJiBpc3N1ZUxpbmsuaXNzdWVMaW5rVHlwZS5nZXROYW1lKCkudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snaWwubGlua2VkVGt0c1JlbGF0ZXMnXS50b1N0cmluZygpKSAmJiBpc3N1ZUxpbmsuZ2V0RGVzdGluYXRpb25PYmplY3QoKS5zdGF0dXMubmFtZSA9PSBcIkNvbXBsZXRlZCB0byBiZSBDbG9zZWRcIiAmJiAoaXNzdWVMaW5rLmdldERlc3RpbmF0aW9uT2JqZWN0KCkuZ2V0Q3VzdG9tRmllbGRWYWx1ZShvZGEpID09IG51bGwgfHwgaXNzdWVMaW5rLmdldERlc3RpbmF0aW9uT2JqZWN0KCkuZ2V0Q3VzdG9tRmllbGRWYWx1ZShvZGEpID09IFwiXCIpKXtcbiAgICAgICAgcmVsYXRlc091dElzc3VlTGluaz10cnVlXG4gICAgICAgIGxpbmtlZFRpY2tldHMuYWRkKGlzc3VlTGluay5nZXREZXN0aW5hdGlvbk9iamVjdCgpLnRvU3RyaW5nKCkpXG4gICAgICAgIGxvZy5kZWJ1ZyBcIklzc3VlIGNvbiByZWxhdGVzT3V0SXNzdWVMaW5rXCJcbiAgICB9XG59XG5cbmRlZiBib2R5X3JlcVxuXG5pZihyZWxhdGVzSW5Jc3N1ZUxpbmsgfHwgcmVsYXRlc091dElzc3VlTGluayl7XG4gICAgYm9keV9yZXEgPSBbXG4gICAgICAgIFwiaXNzdWVLZXlcIjogaXNzdWUua2V5LFxuICAgICAgICBcImxpbmtlZFRpY2tldHNcIjogbGlua2VkVGlja2V0c1xuICAgIF1cbn1lbHNle1xuICAgIGJvZHlfcmVxID0gW1xuICAgICAgICBcImlzc3VlS2V5XCI6IGlzc3VlLmtleVxuICAgIF1cbn1cblxuXG5iYXNlVVJMID0gXCJodHRwOi8vXCIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArIFwiL29wL3Jlc3QvamlyYS9BQS9wdXJjaGFzZS9vcmRlci9jcmVhdGVcIlxudXJsID0gbmV3IFVSTChiYXNlVVJMKVxuY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTtcbmNvbm5lY3Rpb24uc2V0UmVxdWVzdE1ldGhvZChyZXF1ZXN0TWV0aG9kKTtcbmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xuY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJBY2NlcHRcIiwgXCIqLypcIik7XG5jb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpO1xuY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuY29ubmVjdGlvbi5vdXRwdXRTdHJlYW1cbmxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtLndpdGhXcml0ZXIoXCJVVEYtOFwiKSB7IG5ldyBTdHJlYW1pbmdKc29uQnVpbGRlcihpdCwgYm9keV9yZXEpIH1cbmxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuY29ubmVjdGlvbi5jb25uZWN0KCk7XG5cbmRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbmRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuZGVmIGVMaXN0RXJyb3JzID0gbmV3IEFycmF5TGlzdCgpXG5kZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5sb2cuZGVidWcgXCJSZXNwb25zZUNvZGU6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpXG5sb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG5cbmlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMFwiKSl7XG4gICAgbG9nLmRlYnVnIFwidXJsOiBcIiArIHVybFxuICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2U6IFwiICsgY29ubmVjdGlvblxuICAgIGRlZiBvdXRwdXRNc2cgPSAoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHRcbiAgICBsb2cuZGVidWcgXCIoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHQ6IFwiICsgb3V0cHV0TXNnXG4gICAgXG4gICAgZGVmIGpzb25TbHVycGVyID0gbmV3IEpzb25TbHVycGVyKClcbiAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgIGFzc2VydCBqc29uX29iamVjdCBpbnN0YW5jZW9mIE1hcCAgXG4gICAgbG9nLmRlYnVnIFwibWVzc2FnZTogXCIgKyAganNvbl9vYmplY3QubWVzc2FnZVxuICAgIC8vbG9nLmRlYnVnIFwibWVzc2FnZTogXCIgKyAganNvbl9vYmplY3QubWVzc2FnZS50b1N0cmluZygpLnJlcGxhY2VBbGwoJ1snLCcnKS5yZXBsYWNlQWxsKCd7JywnJykucmVwbGFjZUFsbCgnfScsJycpLnJlcGxhY2VBbGwoJ10nLCcnKS5yZXBsYWNlQWxsKCc/JywnJykucmVwbGFjZUFsbCgnPScsJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICBkZWYgZXJyb3JUeXBlID0ganNvbl9vYmplY3QubGV2ZWxcblx0bG9nLmRlYnVnIFwianNvbl9vYmplY3QubnVtYmVyOiBcIiArIGpzb25fb2JqZWN0Lm51bWJlclxuXG4gICAgLyppZiBqc29uX29iamVjdC5udW1iZXIgIT0gbnVsbCAmJiBlcnJvclR5cGUgPSBXIC0tPiBsJ09EQSBcdTAwZTggc3RhdG8gY3JlYXRvIG1hIFx1MDBlOCBuZWNlc3NhcmlvIHJpc29sdmVyZSBsZSBzZWd1ZW50aSBhbm9tYWxpZSBkaXJldHRhbWVudGUgc3UgU0FQKi9cbiAgICBpZiAoIWpzb25fb2JqZWN0Lm51bWJlcil7XG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIkVcIilcblx0XHRlTGlzdEVycm9ycy5hZGQoXCJPUC1TQVAtT0RBXCIpXG4gICAgICAgIGVycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArIFwiIFwiICsganNvbl9vYmplY3QuZXJyb3JzWzBdLnRvU3RyaW5nKCkucmVwbGFjZUFsbChcIi9bXmEtekEtWiBdL2dcIixcIlwiKS5yZXBsYWNlQWxsKCdcIicsJycpKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKVxuICAgICAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpXG5cbiAgICAgICAgb3V0cHV0LmFkZChlTGlzdClcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgfVxuICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbihcIkVcIiwgb3V0cHV0LnRvU3RyaW5nKCkpXG59Iiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXIKaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KQ2F0ZWdvcnkgbG9nID0gQ2F0ZWdvcnkuZ2V0SW5zdGFuY2UoImNvbS5vbnJlc29sdmUuamlyYS5ncm9vdnkuUG9zdEZ1bmN0aW9uIikKbG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUubGluay5Jc3N1ZUxpbmsKCklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTsKQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpOwpkZWYgcmVxdWVzdE1ldGhvZApkZWYgYmFzZVVSTAoKVVJMIHVybApIdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uCgovKiBSRVNUIEFQSSBwZXIgR2VuZXJhemlvbmUgT0RBICovCnJlcXVlc3RNZXRob2QgPSAiUE9TVCI7CmRlZiByZWxhdGVzSW5Jc3N1ZUxpbms9ZmFsc2UKZGVmIHJlbGF0ZXNPdXRJc3N1ZUxpbms9ZmFsc2UKZGVmIGxpbmtlZFRpY2tldHM9bmV3IEFycmF5TGlzdCgpCkxpc3Q8SXNzdWVMaW5rPiBhbGxJbklzc3VlTGluayA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTGlua01hbmFnZXIoKS5nZXRJbndhcmRMaW5rcyhpc3N1ZS5nZXRJZCgpKQpmb3IgKEl0ZXJhdG9yPElzc3VlTGluaz4gb3V0SXRlcmF0b3IgPSBhbGxJbklzc3VlTGluay5pdGVyYXRvcigpOyBvdXRJdGVyYXRvci5oYXNOZXh0KCk7KSB7CiAgICBJc3N1ZUxpbmsgaXNzdWVMaW5rID0gKElzc3VlTGluaykgb3V0SXRlcmF0b3IubmV4dCgpOwoKICAgIGlmKGlzc3VlTGluay5pc3N1ZUxpbmtUeXBlLmdldE5hbWUoKS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpbC5saW5rZWRUa3RzUmVsYXRlcyddLnRvU3RyaW5nKCkpKXsKICAgICAgICByZWxhdGVzSW5Jc3N1ZUxpbms9dHJ1ZQogICAgICAgIGxpbmtlZFRpY2tldHMuYWRkKGlzc3VlTGluay5nZXRTb3VyY2VPYmplY3QoKS50b1N0cmluZygpKQogICAgICAgIGxvZy5kZWJ1ZyAiSXNzdWUgY29uIHJlbGF0ZXNJbklzc3VlTGluayIKICAgIH0KfQpMaXN0PElzc3VlTGluaz4gYWxsT3V0SXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldE91dHdhcmRMaW5rcyhpc3N1ZS5nZXRJZCgpKQpmb3IgKEl0ZXJhdG9yPElzc3VlTGluaz4gb3V0SXRlcmF0b3IgPSBhbGxPdXRJc3N1ZUxpbmsuaXRlcmF0b3IoKTsgb3V0SXRlcmF0b3IuaGFzTmV4dCgpOykgewogICAgSXNzdWVMaW5rIGlzc3VlTGluayA9IChJc3N1ZUxpbmspIG91dEl0ZXJhdG9yLm5leHQoKTsKCiAgICBpZihpc3N1ZUxpbmsuaXNzdWVMaW5rVHlwZS5nZXROYW1lKCkudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snaWwubGlua2VkVGt0c1JlbGF0ZXMnXS50b1N0cmluZygpKSl7CiAgICAgICAgcmVsYXRlc091dElzc3VlTGluaz10cnVlCiAgICAgICAgbGlua2VkVGlja2V0cy5hZGQoaXNzdWVMaW5rLmdldERlc3RpbmF0aW9uT2JqZWN0KCkudG9TdHJpbmcoKSkKICAgICAgICBsb2cuZGVidWcgIklzc3VlIGNvbiByZWxhdGVzT3V0SXNzdWVMaW5rIgogICAgfQp9CgpkZWYgYm9keV9yZXEKCmlmKHJlbGF0ZXNJbklzc3VlTGluayB8fCByZWxhdGVzT3V0SXNzdWVMaW5rKXsKICAgIGJvZHlfcmVxID0gWwogICAgICAgICJpc3N1ZUtleSI6IGlzc3VlLmtleSwKICAgICAgICAibGlua2VkVGlja2V0cyI6IGxpbmtlZFRpY2tldHMKICAgIF0KfWVsc2V7CiAgICBib2R5X3JlcSA9IFsKICAgICAgICAiaXNzdWVLZXkiOiBpc3N1ZS5rZXkKICAgIF0KfQoKCmJhc2VVUkwgPSAiaHR0cDovLyIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArICIvb3AvcmVzdC9qaXJhL0FBL3B1cmNoYXNlL29yZGVyL2NyZWF0ZSIKdXJsID0gbmV3IFVSTChiYXNlVVJMKQpjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7CmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KCJDb250ZW50LVR5cGUiLCAiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04Iik7CmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KCJBY2NlcHQiLCAiKi8qIik7CmNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7CmNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTsKY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0KbG9nLmRlYnVnICJ1cmw6ICIgKyB1cmwKY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcigiVVRGLTgiKSB7IG5ldyBTdHJlYW1pbmdKc29uQnVpbGRlcihpdCwgYm9keV9yZXEpIH0KbG9nLmRlYnVnIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtCmNvbm5lY3Rpb24uY29ubmVjdCgpOwoKZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKQpkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIGVMaXN0RXJyb3JzID0gbmV3IEFycmF5TGlzdCgpCmRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KCkKCmlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscygiMjAwIikpewogICAgbG9nLmRlYnVnICJ1cmw6ICIgKyB1cmwKICAgIGxvZy5kZWJ1ZyAiUmVzcG9uc2VDb2RlOiIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpCiAgICBsb2cuZGVidWcgIlJlc3BvbnNlTWVzc2FnZToiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKQogICAgbG9nLmRlYnVnICJSZXNwb25zZTogIiArIGNvbm5lY3Rpb24KICAgIGRlZiBvdXRwdXRNc2cgPSAoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHQKICAgIGxvZy5kZWJ1ZyAiKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0OiAiICsgb3V0cHV0TXNnCiAgICAKICAgIGRlZiBqc29uU2x1cnBlciA9IG5ldyBKc29uU2x1cnBlcigpCiAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKQogICAgYXNzZXJ0IGpzb25fb2JqZWN0IGluc3RhbmNlb2YgTWFwICAKICAgIGxvZy5kZWJ1ZyAibWVzc2FnZTogIiArICBqc29uX29iamVjdC5tZXNzYWdlCiAgICAKICAgIGVMaXN0RXJyb3JzLmFkZCgiRSIpCiAgICBlTGlzdEVycm9ycy5hZGQoIk9QLVNBUC1PREEiKQogICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgIiAiICsganNvbl9vYmplY3QubWVzc2FnZSkKICAgIGVMaXN0RXJyb3JzLmFkZChlcnJvck1zZ3MpCiAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpCiAgICAKICAgIG91dHB1dC5hZGQoZUxpc3QpCiAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7IkUiOiInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnIn0nKQogICAgLy90aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCJFIiwgb3V0cHV0LnRvU3RyaW5nKCkpCn0=</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">c55994e4-af18-453a-9606-f93fde15755e</arg>
                  <arg name="FIELD_NOTES">YCFgT1AgRW1haWwgTm90aWZpY2F0aW9uOiBQVVJDSEFTRV9PUkRFUl9UT19TVVBQTElFUg==</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxuXG5VUkwgdXJsXG5IdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uXG5cbnJlcXVlc3RNZXRob2QgPSBcIlBPU1RcIjtcbmRlZiBib2R5X3JlcSA9IFtcbiAgICBcInRlbXBsYXRlTmFtZVwiOiBcIlBVUkNIQVNFX09SREVSX1RPX1NVUFBMSUVSXCIsXG4gICAgXCJwZWNcIjogZmFsc2UsXG4gICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXlcbl1cblxuYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvdHJhbnNhY3Rpb24vbWFpbC9zZW5kXCJcbnVybCA9IG5ldyBVUkwoYmFzZVVSTClcbmNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbmNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5jb25uZWN0aW9uLm91dHB1dFN0cmVhbS53aXRoV3JpdGVyKFwiVVRGLThcIikgeyBuZXcgU3RyZWFtaW5nSnNvbkJ1aWxkZXIoaXQsIGJvZHlfcmVxKSB9XG5sb2cuZGVidWcgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW1cbmNvbm5lY3Rpb24uY29ubmVjdCgpO1xuXG5kZWYgb3V0cHV0ID0gbmV3IEFycmF5TGlzdCgpXG5kZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbmRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKVxuZGVmIGVycm9yTXNncyA9IG5ldyBBcnJheUxpc3QoKVxuXG5pZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDBcIikgJiYgIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDRcIikpe1xuICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICBsb2cuZGVidWcgXCJSZXNwb25zZUNvZGU6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuICAgIGVMaXN0RXJyb3JzLmFkZChcIkVcIilcbiAgICBlTGlzdEVycm9ycy5hZGQoXCJTRU5ETUFJTFwiKVxuICAgIGVycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArIFwiIFwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKSlcbiAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKVxuICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycylcblxuICAgIG91dHB1dC5hZGQoZUxpc3QpXG4gICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbihcIkVcIiwgb3V0cHV0LnRvU3RyaW5nKCkpXG59ZWxzZXtcbiAgICBcbiAgICAvL1VwZGF0ZSBjdXN0b20gZmllbGQgT1BBQV9QVVJDSEFTRV9PUkRFUl9EQVRFXG4gICAgXG59Iiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5NdXRhYmxlSXNzdWUKaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0OwppbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeQppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lcgppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGwKClByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKCkKRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJykKcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHsKCXByb3BlcnRpZXMubG9hZChpdCkKfQpDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQpsb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRykKCklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTsKQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpOwpkZWYgcmVxdWVzdE1ldGhvZApkZWYgYmFzZVVSTAoKVVJMIHVybApIdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uCgpyZXF1ZXN0TWV0aG9kID0gIlBPU1QiOwpkZWYgYm9keV9yZXEgPSBbCiAgICAidGVtcGxhdGVOYW1lIjogIlBVUkNIQVNFX09SREVSX1RPX1NVUFBMSUVSIiwKICAgICJwZWMiOiBmYWxzZSwKICAgICJpc3N1ZUtleSI6IGlzc3VlLmtleQpdCgpiYXNlVVJMID0gImh0dHA6Ly8iICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyAiL29wL3Jlc3QvamlyYS9BQS90cmFuc2FjdGlvbi9tYWlsL3NlbmQiCnVybCA9IG5ldyBVUkwoYmFzZVVSTCkKY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eSgiQ29udGVudC1UeXBlIiwgImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOCIpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eSgiQWNjZXB0IiwgIiovKiIpOwpjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpOwpjb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7CmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtCmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtLndpdGhXcml0ZXIoIlVURi04IikgeyBuZXcgU3RyZWFtaW5nSnNvbkJ1aWxkZXIoaXQsIGJvZHlfcmVxKSB9CmxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbQpjb25uZWN0aW9uLmNvbm5lY3QoKTsKCmRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpCmRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKQpkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpCgppZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoIjIwMCIpKXsKICAgIGxvZy5kZWJ1ZyAidXJsOiAiICsgdXJsCiAgICBsb2cuZGVidWcgIlJlc3BvbnNlQ29kZToiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKQogICAgbG9nLmRlYnVnICJSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKICAgIGVMaXN0RXJyb3JzLmFkZCgiRSIpCiAgICBlTGlzdEVycm9ycy5hZGQoIlNFTkRNQUlMIikKICAgIGVycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArICIgIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkpCiAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKQogICAgZUxpc3QuYWRkKGVMaXN0RXJyb3JzKQoKICAgIG91dHB1dC5hZGQoZUxpc3QpCiAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCJFIiwgb3V0cHV0LnRvU3RyaW5nKCkpCn1lbHNlewogICAgCiAgICAvL1VwZGF0ZSBjdXN0b20gZmllbGQgT1BBQV9QVVJDSEFTRV9PUkRFUl9EQVRFCiAgICAKfQ==</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_ACTION">181 Tkt Chiuso</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IENsb3NlIHRrdCBpZiBPRFYgYW5kIE9EQSBoYXZlIGJlZW4gY3JlYXRlZA==</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.FasttrackTransition</arg>
                  <arg name="FIELD_CONDITION">YCFgY2ZWYWx1ZXNbJ09QX1NBTEVTX09SREVSJ10gIT0gbnVsbCAmJiBjZlZhbHVlc1snT1BfU0FMRVNfT1JERVJfREFURSddICE9IG51bGwgJiYgY2ZWYWx1ZXNbJ09QX1NBTEVTX09SREVSX1RPVEFMJ10gIT0gbnVsbHx8fA==</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_TRANSITION_OPTIONS"></arg>
                  <arg name="FIELD_ADDITIONAL_SCRIPT">YCFg</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="181" name="Tkt Chiuso" view="fieldscreen">
          <meta name="opsbar-sequence">70</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19925</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">e94c2b2e-e5aa-4a24-a37e-7b5d16b043f5</arg>
              <arg name="FIELD_NOTES">YCFgU0FQOiB1cGRhdGUgU04gc3RhdHVz</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">f1d1522d-5b09-4510-bcb6-abc0e5c6dbc7</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IERvYyBUZW1wbGF0ZSBnZW5lcmF0aW9uIC0gc2UgTmV3IEluc3RhbGxhdGlvbiAtIEdlbmVyYSBDRV9ET0NVTUVOVEFUSU9OIC0gcGVyIGlzc3VlIGNvcnJlbnRlIGUgY29sbGVnYXRpIHNvbG8gc2UgTUFOVUZBQ1RVUkVSID0gRkFBQw==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="7">
              <post-functions>
                <function type="class">
                  <arg name="field.copyFieldSource1"></arg>
                  <arg name="textValue">-1</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="workflowName-textValue">OPAA: PM Task Workflow</arg>
                  <arg name="performTransitionAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="scopeType">PARENT</arg>
                  <arg name="destination-scopeTarget">SUB_TASK</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitieslinkedtransition-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="integerValue">51</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.linkedtransition.LinkedTransitionFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="status"></arg>
                </function>
                <function type="class">
                  <arg name="field.name">resolution</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
                  <arg name="field.value">6</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">cb1f83508d578368bc33689cfe415057fb57da44</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IERvYyBUZW1wbGF0ZSBnZW5lcmF0aW9uIC0gc2UgTmV3IEluc3RhbGxhdGlvbiAtIEdlbmVyYSBDRV9ET0NVTUVOVEFUSU9OIC0gcGVyIGlzc3VlIGNvcnJlbnRlIGUgY29sbGVnYXRp</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuV29ya2Zsb3dFeGNlcHRpb247CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7CmltcG9ydCBncm9vdnkuanNvbi5TdHJlYW1pbmdKc29uQnVpbGRlcjsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5DdXN0b21GaWVsZE1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3I7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlCmltcG9ydCBvcmcuYXBhY2hlLmNvbW1vbnMuY29kZWMuYmluYXJ5LkJhc2U2NDsKaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGdyb292eXgubmV0Lmh0dHAuSFRUUEJ1aWxkZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KQ2F0ZWdvcnkgbG9nID0gQ2F0ZWdvcnkuZ2V0SW5zdGFuY2UoImNvbS5vbnJlc29sdmUuamlyYS5ncm9vdnkuUG9zdEZ1bmN0aW9uIikKbG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpCgpJc3N1ZU1hbmFnZXIgaXNzdWVNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKCk7CkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTsKLy9pbnNpZ2h0IGNsYXNzZXMgJiBjb21wb25lbnRzCkNsYXNzIG9iamVjdEZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcygiY29tLnJpYWRhbGFicy5qaXJhLnBsdWdpbnMuaW5zaWdodC5jaGFubmVsLmV4dGVybmFsLmFwaS5mYWNhZGUuT2JqZWN0RmFjYWRlIik7ICAKQ2xhc3Mgb2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcygiY29tLnJpYWRhbGFicy5qaXJhLnBsdWdpbnMuaW5zaWdodC5jaGFubmVsLmV4dGVybmFsLmFwaS5mYWNhZGUuT2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZSIpOwpkZWYgb2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShvYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlQ2xhc3MpOwpkZWYgb2JqZWN0RmFjYWRlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKG9iamVjdEZhY2FkZUNsYXNzKTsKCmRlZiByZXF1ZXN0TWV0aG9kCmRlZiBiYXNlVVJMCgpkZWYgZmlyc3RUaWNrZXQgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLmZpcnN0VGt0J10udG9TdHJpbmcoKSlbMF0KU3RyaW5nIGFzc2V0Q0YgPSBwcm9wZXJ0aWVzWydjZi5hc3NldCddID8gcHJvcGVydGllc1snY2YuYXNzZXQnXS50b1N0cmluZygpIDogIk9QX0FTU0VUIgpkZWYgYXNzZXQgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUoYXNzZXRDRilbMF0KZGVmIGFzc2V0VmFsdWUgPSBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGFzc2V0KQoKbG9nLmRlYnVnICJhc3NldDogIiArIGFzc2V0ICsgIiwgYXNzZXRWYWx1ZTogIiArIGFzc2V0VmFsdWVbMF0gKyAiIC0gZnJvbSAiICsgYXNzZXRWYWx1ZVswXS50b1N0cmluZygpLmluZGV4T2YoJygnKSsxCgpkZWYgYXNzZXRLZXkgPSBhc3NldFZhbHVlWzBdLnRvU3RyaW5nKCkuc3Vic3RyaW5nKGFzc2V0VmFsdWVbMF0udG9TdHJpbmcoKS5pbmRleE9mKCcoJykrMSxhc3NldFZhbHVlWzBdLnRvU3RyaW5nKCkuaW5kZXhPZignKScpKQoKZGVmIGFzc2V0T2JqZWN0ID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RCZWFuKGFzc2V0S2V5KQoKbG9nLmRlYnVnIGlzc3VlLmdldElzc3VlVHlwZSgpLm5hbWUKbG9nLmRlYnVnIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoZmlyc3RUaWNrZXQpCgoKLyogUkVTVCBBUEkgcGVyIEludmlvIE5vdGlmaWNhIEVtYWlsIE9OU0lURV9SRVBPUlQgKi8KcmVxdWVzdE1ldGhvZCA9ICJHRVQiOwoKaWYoaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpdC5uZXdJbnN0YWxsYXRpb24nXSkpewogICAgYmFzZVVSTCA9ICJodHRwOi8vIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgIi9vcC9yZXN0L2F1dG9tYXRpb24vZG9jdW1lbnQvZ2VuZXJhdGlvbi9jaGVjaz9JU1NVRV9LRVk9IisgYXNzZXRPYmplY3QuZ2V0SWQoKS50b1N0cmluZygpICsiJkRPQ19DQVRFR09SWT1DRV9ET0NVTUVOVEFUSU9OIgogICAgbG9nLmRlYnVnIGJhc2VVUkwKICAgIFVSTCB1cmwgPSBuZXcgVVJMKGJhc2VVUkwpCiAgICBIdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpOwogICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpOwogICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoIkNvbnRlbnQtVHlwZSIsICJhcHBsaWNhdGlvbi9qc29uIik7CiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eSgiQWNjZXB0IiwgIiovKiIpOwogICAgY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTsKICAgIGNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTsKICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpOwoKICAgIGRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KCkKICAgIGRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKQogICAgZGVmIGVMaXN0RXJyb3JzID0gbmV3IEFycmF5TGlzdCgpCiAgICBkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpCgogICAgaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKCIyMDAiKSl7CiAgICAgICAgbG9nLmRlYnVnICJ1cmw6ICIgKyB1cmwKICAgICAgICBsb2cuZGVidWcgIlJlc3BvbnNlQ29kZToiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKQogICAgICAgIGxvZy5kZWJ1ZyAiUmVzcG9uc2VNZXNzYWdlOiIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpCiAgICAgICAgbG9nLmRlYnVnICJFcnJvclN0cmVhbTogIiArIGNvbm5lY3Rpb24uZ2V0RXJyb3JTdHJlYW0oKS50b1N0cmluZygpCiAgICAgICAgbG9nLmRlYnVnICJnZXRIZWFkZXJGaWVsZHMoKTogIiArIGNvbm5lY3Rpb24uZ2V0SGVhZGVyRmllbGRzKCkKICAgICAgICBkZWYgb3V0cHV0TXNnID0gKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0CiAgICAgICAgbG9nLmRlYnVnICIoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHQ6ICIgKyBvdXRwdXRNc2cKCiAgICAgICAgZGVmIGpzb25TbHVycGVyID0gbmV3IEpzb25TbHVycGVyKCkKICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKQogICAgICAgIGFzc2VydCBqc29uX29iamVjdCBpbnN0YW5jZW9mIE1hcCAgCiAgICAgICAgbG9nLmRlYnVnICJtZXNzYWdlOiAiICsgIGpzb25fb2JqZWN0Lm1lc3NhZ2UKCiAgICAgICAgZUxpc3RFcnJvcnMuYWRkKCJFIikKICAgICAgICBlTGlzdEVycm9ycy5hZGQoIk9QLURPQ1MiKQogICAgICAgIGVycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArICIgIiArIGpzb25fb2JqZWN0Lm1lc3NhZ2UpCiAgICAgICAgZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncykKICAgICAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpCgogICAgICAgIG91dHB1dC5hZGQoZUxpc3QpCiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigiRSIsIG91dHB1dC50b1N0cmluZygpKQogICAgfQp9Cg==</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="disabled">true</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">d218642b-8282-4ed9-bfa6-22fd4f196c49</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IE5ldyBJbnN0YWxsYXRpb24gLSBDaGVjayBsaW5rZWRUaWNrZXRzICYgRmFzdC1UcmFuc2FjdCB0aGVt</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT"></arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="191" name="Invia Consuntivo al Cliente" view="fieldscreen">
          <meta name="opsbar-sequence">30</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19911</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">a0f5c2ba-110e-404e-99b7-f01f177a8cfe</arg>
                <arg name="FIELD_NOTES">YCFgRW5hYmxlZCBvbmx5IGZvciBSZXBhaXIgVGlja2V0</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnTWFpbnRlbmFuY2UgVGlja2V0JyIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">fada32c2-b768-4770-816d-beeac0f8e084</arg>
                <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIEZJTkFOQ0lBTF9TVEFURU1FTlRfVE9fQ1VTVE9NRVIgLSBJZiBpdCdzIG51bGwgdGhlIGVtYWlsIGhhcyBub3QgYmVlbiBzZW50IHlldA==</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXG5cblByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKClcbkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpXG5wcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0ge1xuXHRwcm9wZXJ0aWVzLmxvYWQoaXQpXG59XG5jZlZhbHVlc1twcm9wZXJ0aWVzWydjZi53ZkZpbmFuY2lhbFN0YXRtVG9DJ11dID09IG51bGwiLCJzY3JpcHRQYXRoIjpudWxsfQ==</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">e70180eb-0cf2-468c-b6c4-1eeded83980b</arg>
                <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIE9QX0FVVE9NQVRJQ0FMTFlfQ0xPU0VEIC0gaWYgWWVzIGRvbid0IGFsbG93IHRyYW5zaXRpb24=</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXG5cblByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKClcbkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpXG5wcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0ge1xuXHRwcm9wZXJ0aWVzLmxvYWQoaXQpXG59XG5jZlZhbHVlc1twcm9wZXJ0aWVzWydjZi5hdXRvbWF0aWNhbGx5Q2xvc2VkJ11dID09IG51bGwgfHwgY2ZWYWx1ZXNbcHJvcGVydGllc1snY2YuYXV0b21hdGljYWxseUNsb3NlZCddLnRvU3RyaW5nKCldPy52YWx1ZSA9PSAnTm8nIiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">8534508a-17fc-4b92-b86f-7050c11b0e0c</arg>
                <arg name="FIELD_NOTES">YCFgQXZhaWxhYmxlIG9ubHkgaWYgdGhlcmUgaXMgYXQgbGVhc3Qgb25lIENPTlNVTlRJVk8gYXR0YWNoZWQgdG8gdGhlIHRpY2tldA==</arg>
                <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxubG9nLmRlYnVnIFwiT25TaXRlIFJlcG9ydCBwZXIgaXNzdWU6IFwiICsgaXNzdWUua2V5XG4vKiBSRVNUIEFQSSBwZXIgR2VuZXJhemlvbmUgQWxsZWdhdG8gUmFwcG9ydG8gZGkgSW50ZXJ2ZW50byAqL1xucmVxdWVzdE1ldGhvZCA9IFwiUFVUXCI7XG4vKlNjcmlwdCBWYXJpYWJsZXMqL1xuLy9QZXIgdGVzdCBkYSBjb25zb2xlXG4vL0lzc3VlIGlzc3VlID0gaXNzdWVNYW5hZ2VyLmdldElzc3VlQnlLZXlJZ25vcmVDYXNlKFwiT1BVVC0xNDA2MlwiKVxuXG5pbnQgT1BBQSA9IHByb3BlcnRpZXNbJ2lzY2hlbWEuYWEuaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5pbnQgREJPID0gcHJvcGVydGllc1snaXNjaGVtYS5kYm8uaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5cbi8qUmltb3ppb25lIGFsbGVnYXRvIHJhcHBvcnRvIGRpIGludGVydmVudG8gYXBwZW5hIGNyZWF0byovXG4vKiBHZXQgSW5zaWdodCBJUUwgRmFjYWRlIGZyb20gcGx1Z2luIGFjY2Vzc29yICovXG5DbGFzcyBpcWxGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5JUUxGYWNhZGVcIik7IFxuZGVmIGlxbEZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShpcWxGYWNhZGVDbGFzcyk7XG5cbi8qIEdldCBJbnNpZ2h0IE9iamVjdCBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdEZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdEZhY2FkZVwiKTtcbmRlZiBvYmplY3RGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0RmFjYWRlQ2xhc3MpO1xuXG4vKiBHZXQgSW5zaWdodCBPYmplY3QgVHlwZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdFR5cGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlRmFjYWRlXCIpO1xuZGVmIG9iamVjdFR5cGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUZhY2FkZUNsYXNzKTtcblxuLyogR2V0IEluc2lnaHQgT2JqZWN0IEF0dHJpYnV0ZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlXCIpO1xuZGVmIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZUNsYXNzKTtcblxuQ2xhc3Mgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LnNlcnZpY2VzLm1vZGVsLmZhY3RvcnkuT2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlcIik7XG5kZWYgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnkgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyk7XG5cbi8qIFNwZWNpZnkgdGhlIHNjaGVtYSBpZCBhcyB3ZWxsIGFzIHRoZSBJUUwgdGhhdCB3aWxsIGZldGNoIG9iamVjdHMuIEluIHRoaXMgY2FzZSBhbGwgb2JqZWN0cyB3aXRoIE5hbWUgbWF0Y2hpbmcgdGhlIHZhbHVlQ0YsIGJlIHN1cmUgdG8gaW5jbHVkZSBcIiBhcm91bmQgdmFsdWUgKi9cbmRlZiBvYmplY3RzID0gaXFsRmFjYWRlLmZpbmRPYmplY3RzQnlJUUxBbmRTY2hlbWEoREJPLCBcIm9iamVjdFR5cGU9QXR0YWNobWVudCBBTkQgXFxcIlwiICsgcHJvcGVydGllc1snaW9iai5hdHRhY2htZW50Q2F0ZWdvcnkuY2F0ZWdvcnlSZWYnXS50b1N0cmluZygpICsgXCJcXFwiLk5hbWUgTElLRSBcXFwiQ29uc3VudGl2byBDbGllbnRlXFxcIiBBTkQgXCIgKyBwcm9wZXJ0aWVzWydpb2JqLmF0dGFjaG1lbnRDYXRlZ29yeS5kZWxldGVkJ10udG9TdHJpbmcoKSArIFwiIT10cnVlIEFORCBvYmplY3QgSEFWSU5HIGNvbm5lY3RlZFRpY2tldHMoa2V5ID0gXCIgKyBpc3N1ZS5rZXkudG9TdHJpbmcoKSArIFwiKVwiKTsgLy8gU2VlIHRoZSBjb21wbGV0ZSBsaXN0IG9mIHBvc3NpYmxlIElRTCBvbiB0aGUgSW5zaWdodCBRdWVyeSBMYW5ndWFnZSBkb2N1bWVudGF0aW9uIHBhZ2Vcbi8qIElmIHRoaXMgaXMgYSBtYW5kYXRvcnkgZmllbGQgeW91IHNob3VsZCBiZSBhYmxlIHRvIGRvIHRoaXM6ICovXG5sb2cuZGVidWcgXCJJUUw6IFwiICsgXCJvYmplY3RUeXBlPUF0dGFjaG1lbnQgQU5EIFxcXCJcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmNhdGVnb3J5UmVmJ10udG9TdHJpbmcoKSArIFwiXFxcIi5OYW1lIExJS0UgXFxcIkNvbnN1bnRpdm8gQ2xpZW50ZVxcXCIgQU5EIFwiICsgcHJvcGVydGllc1snaW9iai5hdHRhY2htZW50Q2F0ZWdvcnkuZGVsZXRlZCddLnRvU3RyaW5nKCkgKyBcIiE9dHJ1ZSBBTkQgb2JqZWN0IEhBVklORyBjb25uZWN0ZWRUaWNrZXRzKGtleSA9IFwiICsgaXNzdWUua2V5LnRvU3RyaW5nKCkgKyBcIilcIlxubG9nLmRlYnVnIFwib2JqZWN0czogXCIgKyBvYmplY3RzXG5sb2cuZGVidWcgXCJyaXN1bHRhdG86IFwiICsgKG9iamVjdHMgIT0gbnVsbCAmJiBvYmplY3RzLnNpemU+MCAmJiAhaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpdC5wbGFubmVkTWFpbnRlbmFuY2UnXSkpXG4vKiEhRGEgcmltdW92ZXJlIGFwcGVuYSByaXNvbHRpIGkgYnVnISEqL1xuLy9yZXR1cm4gKG9iamVjdHMgIT0gbnVsbCAmJiBvYmplY3RzLnNpemUhPTApICYmICFpc3N1ZS5nZXRJc3N1ZVR5cGUoKS5uYW1lLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2l0LnBsYW5uZWRNYWludGVuYW5jZSddKVxucGFzc2VzQ29uZGl0aW9uID0gKG9iamVjdHMgIT0gbnVsbCAmJiBvYmplY3RzLnNpemU+MCAmJiAhaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpdC5wbGFubmVkTWFpbnRlbmFuY2UnXSkpXG4iLCJzY3JpcHRQYXRoIjpudWxsfQ==</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.CustomScriptCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">7f809f6e87447e19ed7c9921bc7d6a28aed7bf3f</arg>
              <arg name="FIELD_NOTES">YCFgT1AgRW1haWwgTm90aWZpY2F0aW9uOiBGSU5BTkNJQUxfU1RBVEVNRU5UX1RPX0NVU1RPTUVS</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="6">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="append.value"></arg>
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="field.name">customfield_22644</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">8f43e1be-b7a3-4a6d-9cce-637d025ad9b4</arg>
                  <arg name="FIELD_NOTES">YCFgVXBkYXRlIEZJTkFOQ0lBTF9TVEFURU1FTlRfU0VOVF9EQVRFIG9uIGxpbmtlZCBpc3N1ZXM=</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="201" name="Riapri Rapporto di Intervento">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions type="AND">
              <conditions type="OR">
                <condition type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.condition.ValueFieldCondition</arg>
                  <arg name="fieldValue"></arg>
                  <arg name="fieldsList">customfield_23409</arg>
                </condition>
                <condition type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.condition.ValueFieldCondition</arg>
                  <arg name="fieldValue">No</arg>
                  <arg name="fieldsList">customfield_23409</arg>
                </condition>
              </conditions>
              <condition type="class">
                <arg name="FIELD_NOTES">YCFgT1BBQV9TQUxFU19PUkRFUl9EQVRFIGFuZCBPUEFBX1BVUkNIQVNFX09SREVSX0RBVEUgc2hvdWxkIGJlIG51bGwgaW4gb3JkZXIgdG8gcmVvcGVuIHRoZSB0aWNrZXQgLSBvdGhlcndpc2UgdGhlIHRpY2tldCBoYXMgYWxyZWFkeSBiZWVuIGFjY291bnRlZCBzbyBpdCBjYW5ub3QgYmUgcmVvcGVuZWQ=</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgY2ZWYWx1ZXNbJ09QX1NBTEVTX09SREVSX0RBVEUnXSA9PSBudWxsICYmIGNmVmFsdWVzWydPUF9QVVJDSEFTRV9PUkRFUl9EQVRFJ10gPT0gbnVsbHx8fA==</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">e855fbdb-cb53-4bf8-922b-167760b6e692</arg>
                <arg name="FIELD_NOTES">YCFgTWFpbnRlbmFuY2UgVGlja2V0</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnTWFpbnRlbmFuY2UgVGlja2V0JyB8fCBpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnUGxhbm5lZCBNYWludGVuYW5jZSBUaWNrZXQnIiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="5">
              <post-functions>
                <function type="class">
                  <arg name="field">customfield_22693</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22660</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22644</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22641</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user"></arg>
                  <arg name="field">customfield_22666</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="field3">customfield_23402</arg>
                  <arg name="field2">customfield_23401</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">93ee91428be862f784d2facaa9da5be13f63a66b</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IFJlbW92ZSBPblNpdGUgUmVwb3J0IEF0dGFjaG1lbnRz</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT"></arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">9750ea32-a13d-4474-8c20-074bb1967d78</arg>
                  <arg name="FIELD_NOTES">YCFgQ2xlYXIgY2FjaGU=</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxuXG4vKiBSRVNUIEFQSSBwZXIgR2VuZXJhemlvbmUgQWxsZWdhdG8gUmFwcG9ydG8gZGkgSW50ZXJ2ZW50byAqL1xucmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuLypTY3JpcHQgVmFyaWFibGVzKi9cbi8vUGVyIHRlc3QgZGEgY29uc29sZVxuLy9Jc3N1ZSBpc3N1ZSA9IGlzc3VlTWFuYWdlci5nZXRJc3N1ZUJ5S2V5SWdub3JlQ2FzZShcIk9QVVQtMTQwNjJcIilcbmJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9hdXRvbWF0aW9uL2NsZWFyQ2FjaGUvZGF0YU9iamVjdFwiXG5kZWYgYm9keV9yZXEgPSBbXVxuVVJMIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcbkh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbmNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5sb2cuZGVidWcgXCJib2R5X3JlcTogXCIgKyBib2R5X3JlcVxuY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxubG9nLmRlYnVnIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5jb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAwXCIpKXtcbiAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcbn0iLCJzY3JpcHRQYXRoIjpudWxsfQ==</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="disabled">false</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="211" name="Invia notifica ODA al Fornitore">
          <meta name="opsbar-sequence">60</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">30831edd-db6a-4254-884e-1bc1056de0ca</arg>
                <arg name="FIELD_NOTES">YCFgSWYgT1BfUFVSQ0hBU0VfT1JERVIgaXMgbm90IE5VTEwgLSB5b3UgY2FuIGFzayB0byBzZW5kIGFnYWluIFBPIG5vdGlmaWNhdGlvbg==</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXG5cblByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKClcbkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpXG5wcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0ge1xuXHRwcm9wZXJ0aWVzLmxvYWQoaXQpXG59XG5jZlZhbHVlc1twcm9wZXJ0aWVzWydjZi5wdXJjaGFzZU9yZGVyJ11dICE9IG51bGwiLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">412f2a16-10d6-4b8f-83c9-4f9d4ed9b555</arg>
                <arg name="FIELD_NOTES">YCFgTWFpbnRlbmFuY2UgVGlja2V0IE9SIFBNIFRpY2tldA==</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnTWFpbnRlbmFuY2UgVGlja2V0JyB8fCBpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnUGxhbm5lZCBNYWludGVuYW5jZSBUaWNrZXQnIiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">4e1d2427405a47dffb8300132632cf585f8677e4</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlcXVpcmVkIEZpZWxkcyAtIHNvbG8gZXJyb3JzLCBubyB3YXJuaW5ncw==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">689764320f82b76e3ae6c1de4019336fc58866cd</arg>
              <arg name="FIELD_NOTES">YCFgT1AgRW1haWwgTm90aWZpY2F0aW9uOiBQVVJDSEFTRV9PUkRFUl9UT19TVVBQTElFUg==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuXG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUubGluay5Jc3N1ZUxpbmtcblxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpO1xuQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpO1xuZGVmIHJlcXVlc3RNZXRob2RcbmRlZiBiYXNlVVJMXG5cblVSTCB1cmxcbkh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb25cblxucmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuXG5kZWYgcmVsYXRlc0luSXNzdWVMaW5rPWZhbHNlXG5kZWYgcmVsYXRlc091dElzc3VlTGluaz1mYWxzZVxuZGVmIGxpbmtlZFRpY2tldHM9bmV3IEFycmF5TGlzdCgpXG5cbkxpc3Q8SXNzdWVMaW5rPiBhbGxJbklzc3VlTGluayA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTGlua01hbmFnZXIoKS5nZXRJbndhcmRMaW5rcyhpc3N1ZS5nZXRJZCgpKVxuZm9yIChJdGVyYXRvcjxJc3N1ZUxpbms+IG91dEl0ZXJhdG9yID0gYWxsSW5Jc3N1ZUxpbmsuaXRlcmF0b3IoKTsgb3V0SXRlcmF0b3IuaGFzTmV4dCgpOykge1xuICAgIElzc3VlTGluayBpc3N1ZUxpbmsgPSAoSXNzdWVMaW5rKSBvdXRJdGVyYXRvci5uZXh0KCk7XG5cbiAgICBpZihpc3N1ZUxpbmsuZ2V0U291cmNlT2JqZWN0KCkgIT0gbnVsbCAmJiBpc3N1ZUxpbmsuaXNzdWVMaW5rVHlwZS5nZXROYW1lKCkudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snaWwubGlua2VkVGt0c1JlbGF0ZXMnXS50b1N0cmluZygpKSAmJiBpc3N1ZUxpbmsuZ2V0U291cmNlT2JqZWN0KCkuc3RhdHVzLm5hbWUgPT0gXCJDb21wbGV0ZWQgdG8gYmUgQ2xvc2VkXCIpe1xuICAgICAgICByZWxhdGVzSW5Jc3N1ZUxpbms9dHJ1ZVxuICAgICAgICBsaW5rZWRUaWNrZXRzLmFkZChpc3N1ZUxpbmsuZ2V0U291cmNlT2JqZWN0KCkpXG4gICAgICAgIGxvZy5kZWJ1ZyBcIklzc3VlIGNvbiByZWxhdGVzSW5Jc3N1ZUxpbmtcIlxuICAgIH1cbn1cbkxpc3Q8SXNzdWVMaW5rPiBhbGxPdXRJc3N1ZUxpbmsgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZUxpbmtNYW5hZ2VyKCkuZ2V0T3V0d2FyZExpbmtzKGlzc3VlLmdldElkKCkpXG5mb3IgKEl0ZXJhdG9yPElzc3VlTGluaz4gb3V0SXRlcmF0b3IgPSBhbGxPdXRJc3N1ZUxpbmsuaXRlcmF0b3IoKTsgb3V0SXRlcmF0b3IuaGFzTmV4dCgpOykge1xuICAgIElzc3VlTGluayBpc3N1ZUxpbmsgPSAoSXNzdWVMaW5rKSBvdXRJdGVyYXRvci5uZXh0KCk7XG5cbiAgICBpZihpc3N1ZUxpbmsuZ2V0RGVzdGluYXRpb25PYmplY3QoKSAhPSBudWxsICYmIGlzc3VlTGluay5pc3N1ZUxpbmtUeXBlLmdldE5hbWUoKS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpbC5saW5rZWRUa3RzUmVsYXRlcyddLnRvU3RyaW5nKCkpICYmIGlzc3VlTGluay5nZXREZXN0aW5hdGlvbk9iamVjdCgpLnN0YXR1cy5uYW1lID09IFwiQ29tcGxldGVkIHRvIGJlIENsb3NlZFwiKXtcbiAgICAgICAgcmVsYXRlc091dElzc3VlTGluaz10cnVlXG4gICAgICAgIGxpbmtlZFRpY2tldHMuYWRkKGlzc3VlTGluay5nZXREZXN0aW5hdGlvbk9iamVjdCgpKVxuICAgICAgICBsb2cuZGVidWcgXCJJc3N1ZSBjb24gcmVsYXRlc091dElzc3VlTGlua1wiXG4gICAgfVxufVxuXG5kZWYgYm9keV9yZXEgPSBbXVxuXG5pZihyZWxhdGVzSW5Jc3N1ZUxpbmsgfHwgcmVsYXRlc091dElzc3VlTGluayl7XG4gICAgYm9keV9yZXEgPSBbXG4gICAgICAgIFwidGVtcGxhdGVOYW1lXCI6IFwiUFVSQ0hBU0VfT1JERVJfVE9fU1VQUExJRVJcIixcbiAgICAgICAgXCJwZWNcIjogZmFsc2UsXG4gICAgICAgIFwiaXNzdWVLZXlcIjogaXNzdWUua2V5LFxuICAgICAgICBcImxpbmtlZFRpY2tldHNcIjogbGlua2VkVGlja2V0c1xuICAgIF0gICAgXG59ZWxzZXtcbiAgICBib2R5X3JlcSA9IFtcbiAgICAgICAgXCJ0ZW1wbGF0ZU5hbWVcIjogXCJQVVJDSEFTRV9PUkRFUl9UT19TVVBQTElFUlwiLFxuICAgICAgICBcInBlY1wiOiBmYWxzZSxcbiAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXlcbiAgICBdIFxufVxuXG5iYXNlVVJMID0gXCJodHRwOi8vXCIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArIFwiL29wL3Jlc3QvamlyYS9BQS90cmFuc2FjdGlvbi9tYWlsL3NlbmRcIlxudXJsID0gbmV3IFVSTChiYXNlVVJMKVxuY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTtcbmNvbm5lY3Rpb24uc2V0UmVxdWVzdE1ldGhvZChyZXF1ZXN0TWV0aG9kKTtcbmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xuY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJBY2NlcHRcIiwgXCIqLypcIik7XG5jb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpO1xuY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuY29ubmVjdGlvbi5vdXRwdXRTdHJlYW1cbmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtLndpdGhXcml0ZXIoXCJVVEYtOFwiKSB7IG5ldyBTdHJlYW1pbmdKc29uQnVpbGRlcihpdCwgYm9keV9yZXEpIH1cbmxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuY29ubmVjdGlvbi5jb25uZWN0KCk7XG5cbmRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbmRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuZGVmIGVMaXN0RXJyb3JzID0gbmV3IEFycmF5TGlzdCgpXG5kZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5cbmlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMFwiKSAmJiAhY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwNFwiKSl7XG4gICAgbG9nLmRlYnVnIFwidXJsOiBcIiArIHVybFxuICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG4gICAgXG4gICAgZGVmIG91dHB1dE1zZyA9ICgoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dFxuICAgIGxvZy5kZWJ1ZyBcIigoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dDogXCIgKyBvdXRwdXRNc2dcblxuICAgIGRlZiBqc29uU2x1cnBlciA9IG5ldyBKc29uU2x1cnBlcigpXG4gICAgZGVmIGpzb25fb2JqZWN0ID0ganNvblNsdXJwZXIucGFyc2VUZXh0KG91dHB1dE1zZylcbiAgICBhc3NlcnQganNvbl9vYmplY3QgaW5zdGFuY2VvZiBNYXAgIFxuICAgIGxvZy5kZWJ1ZyBcIm1lc3NhZ2U6IFwiICsgIGpzb25fb2JqZWN0Lm1lc3NhZ2VcblxuICAgIGVMaXN0RXJyb3JzLmFkZChcIkVcIilcbiAgICBlTGlzdEVycm9ycy5hZGQoXCJTRU5ETUFJTFwiKVxuICAgIGVycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArIFwiIFwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKSlcbiAgICBlTGlzdEVycm9ycy5hZGQoanNvbl9vYmplY3QubWVzc2FnZSlcbiAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpXG5cbiAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgIHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oJ3tcIkVcIjpcIicgKyBvdXRwdXQudG9TdHJpbmcoKSArICdcIn0nKVxufSIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5NdXRhYmxlSXNzdWUKaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0OwppbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeQppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lcgppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGwKClByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKCkKRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJykKcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHsKCXByb3BlcnRpZXMubG9hZChpdCkKfQpDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQpsb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRykKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5saW5rLklzc3VlTGluawoKSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpOwpDdXN0b21GaWVsZE1hbmFnZXIgY3VzdG9tRmllbGRNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCk7CmRlZiByZXF1ZXN0TWV0aG9kCmRlZiBiYXNlVVJMCgpVUkwgdXJsCkh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24KCnJlcXVlc3RNZXRob2QgPSAiUE9TVCI7CgpkZWYgcmVsYXRlc0luSXNzdWVMaW5rPWZhbHNlCmRlZiByZWxhdGVzT3V0SXNzdWVMaW5rPWZhbHNlCmRlZiBsaW5rZWRUaWNrZXRzPW5ldyBBcnJheUxpc3QoKQoKTGlzdDxJc3N1ZUxpbms+IGFsbEluSXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldElud2FyZExpbmtzKGlzc3VlLmdldElkKCkpCmZvciAoSXRlcmF0b3I8SXNzdWVMaW5rPiBvdXRJdGVyYXRvciA9IGFsbEluSXNzdWVMaW5rLml0ZXJhdG9yKCk7IG91dEl0ZXJhdG9yLmhhc05leHQoKTspIHsKICAgIElzc3VlTGluayBpc3N1ZUxpbmsgPSAoSXNzdWVMaW5rKSBvdXRJdGVyYXRvci5uZXh0KCk7CgogICAgaWYoaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNSZWxhdGVzJ10udG9TdHJpbmcoKSkpewogICAgICAgIHJlbGF0ZXNJbklzc3VlTGluaz10cnVlCiAgICAgICAgbGlua2VkVGlja2V0cy5hZGQoaXNzdWVMaW5rLmdldFNvdXJjZU9iamVjdCgpKQogICAgICAgIGxvZy5kZWJ1ZyAiSXNzdWUgY29uIHJlbGF0ZXNJbklzc3VlTGluayIKICAgIH0KfQpMaXN0PElzc3VlTGluaz4gYWxsT3V0SXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldE91dHdhcmRMaW5rcyhpc3N1ZS5nZXRJZCgpKQpmb3IgKEl0ZXJhdG9yPElzc3VlTGluaz4gb3V0SXRlcmF0b3IgPSBhbGxPdXRJc3N1ZUxpbmsuaXRlcmF0b3IoKTsgb3V0SXRlcmF0b3IuaGFzTmV4dCgpOykgewogICAgSXNzdWVMaW5rIGlzc3VlTGluayA9IChJc3N1ZUxpbmspIG91dEl0ZXJhdG9yLm5leHQoKTsKCiAgICBpZihpc3N1ZUxpbmsuaXNzdWVMaW5rVHlwZS5nZXROYW1lKCkudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snaWwubGlua2VkVGt0c1JlbGF0ZXMnXS50b1N0cmluZygpKSl7CiAgICAgICAgcmVsYXRlc091dElzc3VlTGluaz10cnVlCiAgICAgICAgbGlua2VkVGlja2V0cy5hZGQoaXNzdWVMaW5rLmdldERlc3RpbmF0aW9uT2JqZWN0KCkpCiAgICAgICAgbG9nLmRlYnVnICJJc3N1ZSBjb24gcmVsYXRlc091dElzc3VlTGluayIKICAgIH0KfQoKZGVmIGJvZHlfcmVxID0gW10KCmlmKHJlbGF0ZXNJbklzc3VlTGluayB8fCByZWxhdGVzT3V0SXNzdWVMaW5rKXsKICAgIGJvZHlfcmVxID0gWwogICAgICAgICJ0ZW1wbGF0ZU5hbWUiOiBwcm9wZXJ0aWVzWyd0dC5wdXJjaGFzZU9yZGVyVG9TJ10udG9TdHJpbmcoKSwKICAgICAgICAicGVjIjogZmFsc2UsCiAgICAgICAgImlzc3VlS2V5IjogaXNzdWUua2V5LAogICAgICAgICJsaW5rZWRUaWNrZXRzIjogbGlua2VkVGlja2V0cwogICAgXSAgICAKfWVsc2V7CiAgICBib2R5X3JlcSA9IFsKICAgICAgICAidGVtcGxhdGVOYW1lIjogcHJvcGVydGllc1sndHQucHVyY2hhc2VPcmRlclRvUyddLnRvU3RyaW5nKCksCiAgICAgICAgInBlYyI6IGZhbHNlLAogICAgICAgICJpc3N1ZUtleSI6IGlzc3VlLmtleQogICAgXSAKfQoKYmFzZVVSTCA9ICJodHRwOi8vIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgIi9vcC9yZXN0L2ppcmEvQUEvdHJhbnNhY3Rpb24vbWFpbC9zZW5kIgp1cmwgPSBuZXcgVVJMKGJhc2VVUkwpCmNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7CmNvbm5lY3Rpb24uc2V0UmVxdWVzdE1ldGhvZChyZXF1ZXN0TWV0aG9kKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoIkNvbnRlbnQtVHlwZSIsICJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLTgiKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoIkFjY2VwdCIsICIqLyoiKTsKY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTsKY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpOwpjb25uZWN0aW9uLm91dHB1dFN0cmVhbQpjb25uZWN0aW9uLm91dHB1dFN0cmVhbS53aXRoV3JpdGVyKCJVVEYtOCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfQpsb2cuZGVidWcgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0KY29ubmVjdGlvbi5jb25uZWN0KCk7CgpkZWYgb3V0cHV0ID0gbmV3IEFycmF5TGlzdCgpCmRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKQpkZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIGVycm9yTXNncyA9IG5ldyBBcnJheUxpc3QoKQoKaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKCIyMDAiKSl7CiAgICBsb2cuZGVidWcgInVybDogIiArIHVybAogICAgbG9nLmRlYnVnICJSZXNwb25zZUNvZGU6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkKICAgIGxvZy5kZWJ1ZyAiUmVzcG9uc2VNZXNzYWdlOiIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpCiAgICBlTGlzdEVycm9ycy5hZGQoIkUiKQogICAgZUxpc3RFcnJvcnMuYWRkKCJTRU5ETUFJTCIpCiAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyAiICIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpKQogICAgZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncykKICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycykKCiAgICBvdXRwdXQuYWRkKGVMaXN0KQogICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigneyJFIjoiJyArIG91dHB1dC50b1N0cmluZygpICsgJyJ9JykKICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigiRSIsIG91dHB1dC50b1N0cmluZygpKQp9</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="221" name="Invia Mail Rapporto di Intervento" view="fieldscreen">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19912</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_NOTES">YCFgT1A6IElmIHN0YXR1cz1DT01QTEVURUQgVE8gQkUgQ0xPU0VEICYmIE9OU0lURV9SRVBPUlQgPSBudWxsIC0gTm90aWZpY2F0aW9uIGhhcyBub3QgYmVlbiBzZW50</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KY2ZWYWx1ZXNbcHJvcGVydGllc1snY2Yud2ZPbnNpdGVSZXBvcnQnXV0gPT0gbnVsbHx8fA==</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">b4a54bb6-c08d-4e16-b3cf-1348807eb21a</arg>
                <arg name="FIELD_NOTES">YCFgTWFpbnRlbmFuY2UgVGlja2V0IE9SIFBNIFRpY2tldA==</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnTWFpbnRlbmFuY2UgVGlja2V0JyB8fCBpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnUGxhbm5lZCBNYWludGVuYW5jZSBUaWNrZXQnIiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">e824724d-1f75-44f4-8569-241bdc9705cd</arg>
                <arg name="FIELD_NOTES">YCFgQXZhaWxhYmxlIG9ubHkgaWYgdGhlcmUgaXMgYXQgbGVhc3Qgb25lIE9OIFNJVEUgUkVQT1JUIGF0dGFjaGVkIHRvIHRoZSB0aWNrZXQ=</arg>
                <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxubG9nLmRlYnVnIFwiT25TaXRlIFJlcG9ydCBwZXIgaXNzdWU6IFwiICsgaXNzdWUua2V5XG4vKiBSRVNUIEFQSSBwZXIgR2VuZXJhemlvbmUgQWxsZWdhdG8gUmFwcG9ydG8gZGkgSW50ZXJ2ZW50byAqL1xucmVxdWVzdE1ldGhvZCA9IFwiUFVUXCI7XG4vKlNjcmlwdCBWYXJpYWJsZXMqL1xuLy9QZXIgdGVzdCBkYSBjb25zb2xlXG4vL0lzc3VlIGlzc3VlID0gaXNzdWVNYW5hZ2VyLmdldElzc3VlQnlLZXlJZ25vcmVDYXNlKFwiT1BVVC0xNDA2MlwiKVxuXG5pbnQgT1BBQSA9IHByb3BlcnRpZXNbJ2lzY2hlbWEuYWEuaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5pbnQgREJPID0gcHJvcGVydGllc1snaXNjaGVtYS5kYm8uaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5cbi8qUmltb3ppb25lIGFsbGVnYXRvIHJhcHBvcnRvIGRpIGludGVydmVudG8gYXBwZW5hIGNyZWF0byovXG4vKiBHZXQgSW5zaWdodCBJUUwgRmFjYWRlIGZyb20gcGx1Z2luIGFjY2Vzc29yICovXG5DbGFzcyBpcWxGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5JUUxGYWNhZGVcIik7IFxuZGVmIGlxbEZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShpcWxGYWNhZGVDbGFzcyk7XG5cbi8qIEdldCBJbnNpZ2h0IE9iamVjdCBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdEZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdEZhY2FkZVwiKTtcbmRlZiBvYmplY3RGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0RmFjYWRlQ2xhc3MpO1xuXG4vKiBHZXQgSW5zaWdodCBPYmplY3QgVHlwZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdFR5cGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlRmFjYWRlXCIpO1xuZGVmIG9iamVjdFR5cGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUZhY2FkZUNsYXNzKTtcblxuLyogR2V0IEluc2lnaHQgT2JqZWN0IEF0dHJpYnV0ZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlXCIpO1xuZGVmIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZUNsYXNzKTtcblxuQ2xhc3Mgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LnNlcnZpY2VzLm1vZGVsLmZhY3RvcnkuT2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlcIik7XG5kZWYgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnkgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyk7XG5cbi8qIFNwZWNpZnkgdGhlIHNjaGVtYSBpZCBhcyB3ZWxsIGFzIHRoZSBJUUwgdGhhdCB3aWxsIGZldGNoIG9iamVjdHMuIEluIHRoaXMgY2FzZSBhbGwgb2JqZWN0cyB3aXRoIE5hbWUgbWF0Y2hpbmcgdGhlIHZhbHVlQ0YsIGJlIHN1cmUgdG8gaW5jbHVkZSBcIiBhcm91bmQgdmFsdWUgKi9cbmRlZiBvYmplY3RzID0gaXFsRmFjYWRlLmZpbmRPYmplY3RzQnlJUUxBbmRTY2hlbWEoREJPLCBcIm9iamVjdFR5cGU9QXR0YWNobWVudCBBTkQgXFxcIlwiICsgcHJvcGVydGllc1snaW9iai5hdHRhY2htZW50Q2F0ZWdvcnkuY2F0ZWdvcnlSZWYnXS50b1N0cmluZygpICsgXCJcXFwiLk5hbWUgTElLRSBcXFwiUmFwcG9ydG8gZGkgaW50ZXJ2ZW50b1xcXCIgQU5EIFwiICsgcHJvcGVydGllc1snaW9iai5hdHRhY2htZW50Q2F0ZWdvcnkuZGVsZXRlZCddLnRvU3RyaW5nKCkgKyBcIiE9dHJ1ZSBBTkQgb2JqZWN0IEhBVklORyBjb25uZWN0ZWRUaWNrZXRzKGtleSA9IFwiICsgaXNzdWUua2V5LnRvU3RyaW5nKCkgKyBcIilcIik7IC8vIFNlZSB0aGUgY29tcGxldGUgbGlzdCBvZiBwb3NzaWJsZSBJUUwgb24gdGhlIEluc2lnaHQgUXVlcnkgTGFuZ3VhZ2UgZG9jdW1lbnRhdGlvbiBwYWdlXG4vKiBJZiB0aGlzIGlzIGEgbWFuZGF0b3J5IGZpZWxkIHlvdSBzaG91bGQgYmUgYWJsZSB0byBkbyB0aGlzOiAqL1xubG9nLmRlYnVnIFwiSVFMOiBcIiArIFwib2JqZWN0VHlwZT1BdHRhY2htZW50IEFORCBcXFwiXCIgKyBwcm9wZXJ0aWVzWydpb2JqLmF0dGFjaG1lbnRDYXRlZ29yeS5jYXRlZ29yeVJlZiddLnRvU3RyaW5nKCkgKyBcIlxcXCIuTmFtZSBMSUtFIFxcXCJSYXBwb3J0byBkaSBpbnRlcnZlbnRvXFxcIiBBTkQgXCIgKyBwcm9wZXJ0aWVzWydpb2JqLmF0dGFjaG1lbnRDYXRlZ29yeS5kZWxldGVkJ10udG9TdHJpbmcoKSArIFwiIT10cnVlIEFORCBvYmplY3QgSEFWSU5HIGNvbm5lY3RlZFRpY2tldHMoa2V5ID0gXCIgKyBpc3N1ZS5rZXkudG9TdHJpbmcoKSArIFwiKVwiXG5sb2cuZGVidWcgXCJvYmplY3RzOiBcIiArIG9iamVjdHNcbmxvZy5kZWJ1ZyBcInJpc3VsdGF0bzogXCIgKyAob2JqZWN0cyAhPSBudWxsICYmIG9iamVjdHMuc2l6ZT4wKVxuLyohIURhIHJpbXVvdmVyZSBhcHBlbmEgcmlzb2x0aSBpIGJ1ZyEhKi9cbi8vcmV0dXJuIChvYmplY3RzICE9IG51bGwgJiYgb2JqZWN0cy5zaXplIT0wKSAmJiAhaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpdC5wbGFubmVkTWFpbnRlbmFuY2UnXSlcbnBhc3Nlc0NvbmRpdGlvbiA9IChvYmplY3RzICE9IG51bGwgJiYgb2JqZWN0cy5zaXplPjApXG4iLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.CustomScriptCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">dcec49d7a2f27ae7f5e1c9874ad28f99eb5fde33</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IGxpbmtlZFRpY2tldHMhPW51bGwgPT4gQ2hlY2sgd2l0aCB1c2VyIHRoZSByZXF1aXJlZCBFbWFpbCBSZWNpcGllbnRz</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlXG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGdyb292eS5qc29uLkpzb25CdWlsZGVyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuSXNzdWVMaW5rXG5pbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXG5cblByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKClcbkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpXG5wcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0ge1xuXHRwcm9wZXJ0aWVzLmxvYWQoaXQpXG59XG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcblxuXG5kZWYgZmllbGRzUmVxdWlyZWQgPSBmYWxzZVxuZGVmIGF1dG9tYXRpY2FsbHlDbG9zZWQgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLmF1dG9tYXRpY2FsbHlDbG9zZWQnXS50b1N0cmluZygpKVswXVxuZGVmIHNlbmRNYWlsVG8gPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLnNlbmRNYWlsVG9MaW5rZWQnXS50b1N0cmluZygpKVswXVxuZGVmIHJlcXVpcmVkRmllbGRzID0gbmV3IEFycmF5TGlzdCgpXG5kZWYgcmVsYXRlc0luSXNzdWVMaW5rPWZhbHNlXG5kZWYgcmVsYXRlc091dElzc3VlTGluaz1mYWxzZVxuXG4vKk9QLTEwMzg6IENoaWVkbyBhbGwndXRlbnRlIHNlIGUgYSBjaGkgdnVvbGUgaW52aWFyZSBsYSBub3RpZmljYSBkZWwgcmFwcG9ydG8gZGkgaW50ZXJ2ZW50byBjaGUgdmVyclx1MDBlMCBnZW5lcmF0by5cbkxvIGNoaWVkbyBzb2xvIHNlIGlsIHRpY2tldCBzdSBjdWkgc3RvIGVzZWd1ZW5kbyBsYSB0cmFuc2F6aW9uZSBub24gXHUwMGU4IHN0YXRvIGNoaXVzbyBpbiBhdXRvbWF0aWNvIGRhbCBzaXN0ZW1hIGUgc29sbyBzZSBub24gZ2xpIGVyYSBnaVx1MDBlMCBzdGF0byBjaGllc3RvIHByaW1hKi9cbmxvZy5kZWJ1ZyBcImlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoYXV0b21hdGljYWxseUNsb3NlZCk6IFwiICsgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q2xvc2VkKVxubG9nLmRlYnVnIFwiaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzZW5kTWFpbFRvKTogXCIgKyBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHNlbmRNYWlsVG8pXG5sb2cuZGVidWcgXCJ0cmFuc2llbnRWYXJzOiBcIiArIHRyYW5zaWVudFZhcnNcbmxvZy5kZWJ1ZyBcImlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc2VuZE1haWxUbykudG9TdHJpbmcoKTogXCIgKyBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHNlbmRNYWlsVG8pLnRvU3RyaW5nKClcblxuTGlzdDxJc3N1ZUxpbms+IGFsbEluSXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldElud2FyZExpbmtzKGlzc3VlLmdldElkKCkpXG5mb3IgKEl0ZXJhdG9yPElzc3VlTGluaz4gb3V0SXRlcmF0b3IgPSBhbGxJbklzc3VlTGluay5pdGVyYXRvcigpOyBvdXRJdGVyYXRvci5oYXNOZXh0KCk7KSB7XG4gICAgSXNzdWVMaW5rIGlzc3VlTGluayA9IChJc3N1ZUxpbmspIG91dEl0ZXJhdG9yLm5leHQoKTtcbiAgICBcbiAgICBpZihpc3N1ZUxpbmsuaXNzdWVMaW5rVHlwZS5nZXROYW1lKCkudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snaWwubGlua2VkVGt0c1JlbGF0ZXMnXS50b1N0cmluZygpKSl7XG5cdFx0cmVsYXRlc0luSXNzdWVMaW5rPXRydWVcbiAgICAgICAgbG9nLmRlYnVnIFwiSXNzdWUgY29uIHJlbGF0ZXNJbklzc3VlTGlua1wiXG4gICAgICAgIGJyZWFrXG4gICAgfVxufVxuTGlzdDxJc3N1ZUxpbms+IGFsbE91dElzc3VlTGluayA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTGlua01hbmFnZXIoKS5nZXRPdXR3YXJkTGlua3MoaXNzdWUuZ2V0SWQoKSlcbmZvciAoSXRlcmF0b3I8SXNzdWVMaW5rPiBvdXRJdGVyYXRvciA9IGFsbE91dElzc3VlTGluay5pdGVyYXRvcigpOyBvdXRJdGVyYXRvci5oYXNOZXh0KCk7KSB7XG4gICAgSXNzdWVMaW5rIGlzc3VlTGluayA9IChJc3N1ZUxpbmspIG91dEl0ZXJhdG9yLm5leHQoKTtcbiAgICBcbiAgICBpZihpc3N1ZUxpbmsuaXNzdWVMaW5rVHlwZS5nZXROYW1lKCkudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snaWwubGlua2VkVGt0c1JlbGF0ZXMnXS50b1N0cmluZygpKSl7XG5cdFx0cmVsYXRlc091dElzc3VlTGluaz10cnVlXG4gICAgICAgIGxvZy5kZWJ1ZyBcIklzc3VlIGNvbiByZWxhdGVzT3V0SXNzdWVMaW5rXCJcbiAgICAgICAgYnJlYWtcbiAgICB9XG59XG5cbmxvZy5kZWJ1ZyBpc3N1ZS5rZXkgKyBcIiAocmVsYXRlc0luSXNzdWVMaW5rIHx8IHJlbGF0ZXNPdXRJc3N1ZUxpbmspOiBcIiArIChyZWxhdGVzSW5Jc3N1ZUxpbmsgfHwgcmVsYXRlc091dElzc3VlTGluaylcbmxvZy5kZWJ1ZyBpc3N1ZS5rZXkgKyBcIiAoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q2xvc2VkKSBcIiArIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoYXV0b21hdGljYWxseUNsb3NlZClcbmxvZy5kZWJ1ZyBpc3N1ZS5rZXkgKyBcIiBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHNlbmRNYWlsVG8pPT1udWxsIFwiICsgKGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc2VuZE1haWxUbyk9PW51bGwpXG5cbmlmKChyZWxhdGVzSW5Jc3N1ZUxpbmsgfHwgcmVsYXRlc091dElzc3VlTGluaykgLyomJiAoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q2xvc2VkKT09bnVsbCB8fCAhaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q2xvc2VkKS50b1N0cmluZygpLmVxdWFscyhcIlllc1wiKSkqLyAmJiAoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzZW5kTWFpbFRvKT09bnVsbCB8fCBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHNlbmRNYWlsVG8pLnRvU3RyaW5nKCkuZXF1YWxzKFwiTm9uZVwiKSkpe1xuXHRmaWVsZHNSZXF1aXJlZCA9IHRydWVcblx0cmVxdWlyZWRGaWVsZHMuYWRkKHByb3BlcnRpZXNbJ2NmLnNlbmRNYWlsVG9MaW5rZWQnXS50b1N0cmluZygpKVxufVxuXG5sb2cuZGVidWcgXCJGaWVsZHNSZXF1aXJlZDogXCIgKyBmaWVsZHNSZXF1aXJlZFxuZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKVxuXG5pZihmaWVsZHNSZXF1aXJlZCl7XG5cdGRlZiBmTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuXG4gICAgICAgIGlmKHJlcXVpcmVkRmllbGRzLnNpemUoKSA+IDApe1xuICAgICAgICBcdGRlZiBmTGlzdERldGFpbCA9IG5ldyBBcnJheUxpc3QoKVxuICAgICAgICAgICAgICAgIGZMaXN0RGV0YWlsLmFkZChcIkZcIilcbiAgICAgICAgICAgICAgICBmTGlzdERldGFpbC5hZGQoXCJVU0VSX0lOUFVUXCIpXG4gICAgICAgICAgICBcdGZMaXN0RGV0YWlsLmFkZChudWxsKVxuICAgICAgICAgICAgICAgIGZMaXN0RGV0YWlsLmFkZChyZXF1aXJlZEZpZWxkcylcbiAgICAgICAgICAgICAgICBmTGlzdC5hZGQoZkxpc3REZXRhaWwpXG4gICAgICAgIH1cblxuICAgICAgICBvdXRwdXQuYWRkKGZMaXN0KVxuICAgIFx0dGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRlwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbihcIkZcIiwgb3V0cHV0LnRvU3RyaW5nKCkpICAgXG59ZWxzZXtcbiAgICByZXR1cm4gdHJ1ZVxufSIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZQppbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb24KaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3IKaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGdyb292eS5qc29uLkpzb25CdWlsZGVyCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUubGluay5Jc3N1ZUxpbmsKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KZGVmIENhdGVnb3J5IGxvZyA9IENhdGVnb3J5LmdldEluc3RhbmNlKCJjb20ub25yZXNvbHZlLmppcmEuZ3Jvb3Z5LlBvc3RGdW5jdGlvbiIpCmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKQoKSXNzdWUgaXNzdWUgPSBpc3N1ZQoKZGVmIGZpZWxkc1JlcXVpcmVkID0gZmFsc2UKZGVmIGF1dG9tYXRpY2FsbHlDbG9zZWQgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLmF1dG9tYXRpY2FsbHlDbG9zZWQnXS50b1N0cmluZygpKVswXQpkZWYgc2VuZE1haWxUbyA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2Yuc2VuZE1haWxUb0xpbmtlZCddLnRvU3RyaW5nKCkpWzBdCmRlZiByZXF1aXJlZEZpZWxkcyA9IG5ldyBBcnJheUxpc3QoKQpkZWYgcmVsYXRlc0luSXNzdWVMaW5rPWZhbHNlCmRlZiByZWxhdGVzT3V0SXNzdWVMaW5rPWZhbHNlCgovKk9QLTEwMzg6IENoaWVkbyBhbGwndXRlbnRlIHNlIGUgYSBjaGkgdnVvbGUgaW52aWFyZSBsYSBub3RpZmljYSBkZWwgcmFwcG9ydG8gZGkgaW50ZXJ2ZW50byBjaGUgdmVycsOgIGdlbmVyYXRvLgpMbyBjaGllZG8gc29sbyBzZSBpbCB0aWNrZXQgc3UgY3VpIHN0byBlc2VndWVuZG8gbGEgdHJhbnNhemlvbmUgbm9uIMOoIHN0YXRvIGNoaXVzbyBpbiBhdXRvbWF0aWNvIGRhbCBzaXN0ZW1hIGUgc29sbyBzZSBub24gZ2xpIGVyYSBnacOgIHN0YXRvIGNoaWVzdG8gcHJpbWEqLwpsb2cuZGVidWcgImlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoYXV0b21hdGljYWxseUNsb3NlZCk6ICIgKyBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGF1dG9tYXRpY2FsbHlDbG9zZWQpCmxvZy5kZWJ1ZyAiaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzZW5kTWFpbFRvKTogIiArIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc2VuZE1haWxUbykKbG9nLmRlYnVnICJ0cmFuc2llbnRWYXJzOiAiICsgdHJhbnNpZW50VmFycwpsb2cuZGVidWcgImlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc2VuZE1haWxUbykudG9TdHJpbmcoKTogIiArIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc2VuZE1haWxUbykudG9TdHJpbmcoKQoKTGlzdDxJc3N1ZUxpbms+IGFsbEluSXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldElud2FyZExpbmtzKGlzc3VlLmdldElkKCkpCmZvciAoSXRlcmF0b3I8SXNzdWVMaW5rPiBvdXRJdGVyYXRvciA9IGFsbEluSXNzdWVMaW5rLml0ZXJhdG9yKCk7IG91dEl0ZXJhdG9yLmhhc05leHQoKTspIHsKICAgIElzc3VlTGluayBpc3N1ZUxpbmsgPSAoSXNzdWVMaW5rKSBvdXRJdGVyYXRvci5uZXh0KCk7CiAgICAKICAgIGlmKGlzc3VlTGluay5pc3N1ZUxpbmtUeXBlLmdldE5hbWUoKS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpbC5saW5rZWRUa3RzUmVsYXRlcyddLnRvU3RyaW5nKCkpKXsKCQlyZWxhdGVzSW5Jc3N1ZUxpbms9dHJ1ZQogICAgICAgIGxvZy5kZWJ1ZyAiSXNzdWUgY29uIHJlbGF0ZXNJbklzc3VlTGluayIKICAgICAgICBicmVhawogICAgfQp9Ckxpc3Q8SXNzdWVMaW5rPiBhbGxPdXRJc3N1ZUxpbmsgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZUxpbmtNYW5hZ2VyKCkuZ2V0T3V0d2FyZExpbmtzKGlzc3VlLmdldElkKCkpCmZvciAoSXRlcmF0b3I8SXNzdWVMaW5rPiBvdXRJdGVyYXRvciA9IGFsbE91dElzc3VlTGluay5pdGVyYXRvcigpOyBvdXRJdGVyYXRvci5oYXNOZXh0KCk7KSB7CiAgICBJc3N1ZUxpbmsgaXNzdWVMaW5rID0gKElzc3VlTGluaykgb3V0SXRlcmF0b3IubmV4dCgpOwogICAgCiAgICBpZihpc3N1ZUxpbmsuaXNzdWVMaW5rVHlwZS5nZXROYW1lKCkudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snaWwubGlua2VkVGt0c1JlbGF0ZXMnXS50b1N0cmluZygpKSl7CgkJcmVsYXRlc091dElzc3VlTGluaz10cnVlCiAgICAgICAgbG9nLmRlYnVnICJJc3N1ZSBjb24gcmVsYXRlc091dElzc3VlTGluayIKICAgICAgICBicmVhawogICAgfQp9Cgpsb2cuZGVidWcgaXNzdWUua2V5ICsgIiAocmVsYXRlc0luSXNzdWVMaW5rIHx8IHJlbGF0ZXNPdXRJc3N1ZUxpbmspOiAiICsgKHJlbGF0ZXNJbklzc3VlTGluayB8fCByZWxhdGVzT3V0SXNzdWVMaW5rKQpsb2cuZGVidWcgaXNzdWUua2V5ICsgIiAoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q2xvc2VkKSAiICsgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q2xvc2VkKQpsb2cuZGVidWcgaXNzdWUua2V5ICsgIiBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHNlbmRNYWlsVG8pPT1udWxsICIgKyAoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzZW5kTWFpbFRvKT09bnVsbCkKCmlmKChyZWxhdGVzSW5Jc3N1ZUxpbmsgfHwgcmVsYXRlc091dElzc3VlTGluaykgLyomJiAoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q2xvc2VkKT09bnVsbCB8fCAhaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q2xvc2VkKS50b1N0cmluZygpLmVxdWFscygiWWVzIikpKi8gJiYgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzZW5kTWFpbFRvKT09bnVsbCl7CglmaWVsZHNSZXF1aXJlZCA9IHRydWUKCXJlcXVpcmVkRmllbGRzLmFkZChwcm9wZXJ0aWVzWydjZi5zZW5kTWFpbFRvTGlua2VkJ10udG9TdHJpbmcoKSkKfQoKbG9nLmRlYnVnICJGaWVsZHNSZXF1aXJlZDogIiArIGZpZWxkc1JlcXVpcmVkCmRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KCkKCmlmKGZpZWxkc1JlcXVpcmVkKXsKCWRlZiBmTGlzdCA9IG5ldyBBcnJheUxpc3QoKQoKICAgICAgICBpZihyZXF1aXJlZEZpZWxkcy5zaXplKCkgPiAwKXsKICAgICAgICAJZGVmIGZMaXN0RGV0YWlsID0gbmV3IEFycmF5TGlzdCgpCiAgICAgICAgICAgICAgICBmTGlzdERldGFpbC5hZGQoIkYiKQogICAgICAgICAgICAgICAgZkxpc3REZXRhaWwuYWRkKCJVU0VSX0lOUFVUIikKICAgICAgICAgICAgCWZMaXN0RGV0YWlsLmFkZChudWxsKQogICAgICAgICAgICAgICAgZkxpc3REZXRhaWwuYWRkKHJlcXVpcmVkRmllbGRzKQogICAgICAgICAgICAgICAgZkxpc3QuYWRkKGZMaXN0RGV0YWlsKQogICAgICAgIH0KCiAgICAgICAgb3V0cHV0LmFkZChmTGlzdCkKICAgIAl0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7IkYiOiInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnIn0nKQogICAgICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigiRiIsIG91dHB1dC50b1N0cmluZygpKSAgIAp9ZWxzZXsKICAgIHJldHVybiB0cnVlCn0=</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">732b852fe810d140fc2df432e5e30b7a3bed81cc</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBPUCBFbWFpbCBOb3RpZmljYXRpb246IE9OU0lURV9SRVBPUlQ=</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="6">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="append.value"></arg>
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="field.name">customfield_22641</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">8a9e10fb-e319-4826-b753-f83451d46725</arg>
                  <arg name="FIELD_NOTES">YCFgVXBkYXRlIE9OU0lURV9SRVBPUlRfU0VOVF9EQVRFIG9uIGxpbmtlZCBpc3N1ZXM=</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22666</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="511" name="Clona Tkt" view="fieldscreen">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">20401</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">c659704c-9678-4844-9a05-6f3497e391e7</arg>
                <arg name="FIELD_NOTES">YCFgRW5hYmxlZCBvbmx5IGZvciBSZXBhaXIgYW5kIE5ldyBJbnN0YWxsYXRpb24=</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnTWFpbnRlbmFuY2UgVGlja2V0JyB8fCAoaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ05ldyBJbnN0YWxsYXRpb24nICYmIGNmVmFsdWVzWydPUF9BU1NFVCddICE9IG51bGwpIiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="6">
              <post-functions>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="fieldValue">New Installation</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="targetIssueTypeDefinedByCfSelection"></arg>
                  <arg name="issueTypeId">12301</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">SAME</arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="transitionAttachmentsOperation">copy</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="targetProjectSelectedCustomField"></arg>
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="subFunctions">[{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_21909&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21909&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22600&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22600&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22822&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22822&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22601&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22601&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22603&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22603&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22663&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22663&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22634&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22634&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22651&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22651&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22700&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22700&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22606&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22606&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22629&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22629&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22652&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22652&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;description&quot;,&quot;destinationFieldId&quot;:&quot;description&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22627&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22627&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22620&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22620&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22668&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22668&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23602&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23203&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22814&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22814&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23237&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23237&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;issuekey&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23243&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;YES&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23238&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22702&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22702&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22703&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22703&quot;}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="fieldValue">Maintenance Ticket</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="targetIssueTypeDefinedByCfSelection"></arg>
                  <arg name="issueTypeId">13001</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">SAME</arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="transitionAttachmentsOperation">copy</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="targetProjectSelectedCustomField"></arg>
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="subFunctions">[{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_21909&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21909&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22600&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22600&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22822&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22822&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22601&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22601&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22603&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22603&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22663&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22663&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22634&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22634&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22651&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22651&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22700&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22700&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22606&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22606&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22629&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22629&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22652&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22652&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;description&quot;,&quot;destinationFieldId&quot;:&quot;description&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22627&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22627&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22620&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22620&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22668&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22668&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23602&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23203&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22814&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22814&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23237&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23237&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;issuekey&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23243&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;YES&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23238&quot;}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23602</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="611" name="Re-Invia Mail Rapporto di Intervento" view="fieldscreen">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19912</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">a427f3dd-5525-41b0-a491-11f378238361</arg>
                <arg name="FIELD_NOTES">YCFgT1A6IElmIHN0YXR1cz1DT01QTEVURUQgVE8gQkUgQ0xPU0VEICYmIE9OU0lURV9SRVBPUlQgPSBudWxsIC0gTm90aWZpY2F0aW9uIGhhcyBub3QgYmVlbiBzZW50</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXG5cblByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKClcbkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpXG5wcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0ge1xuXHRwcm9wZXJ0aWVzLmxvYWQoaXQpXG59XG5jZlZhbHVlc1twcm9wZXJ0aWVzWydjZi53Zk9uc2l0ZVJlcG9ydCddXSAhPSBudWxsIiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE">AAS-15446</arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">22690743-3ae3-441a-b99c-dca209b6a789</arg>
                <arg name="FIELD_NOTES">YCFgTWFpbnRlbmFuY2UgVGlja2V0IE9SIFBNIFRpY2tldA==</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnTWFpbnRlbmFuY2UgVGlja2V0JyB8fCBpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnUGxhbm5lZCBNYWludGVuYW5jZSBUaWNrZXQnIiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">dcec49d7a2f27ae7f5e1c9874ad28f99eb5fde33</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IGxpbmtlZFRpY2tldHMhPW51bGwgPT4gQ2hlY2sgd2l0aCB1c2VyIHRoZSByZXF1aXJlZCBFbWFpbCBSZWNpcGllbnRz</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlXG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGdyb292eS5qc29uLkpzb25CdWlsZGVyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuSXNzdWVMaW5rXG5pbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXG5cblByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKClcbkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpXG5wcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0ge1xuXHRwcm9wZXJ0aWVzLmxvYWQoaXQpXG59XG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcblxuZGVmIGZpZWxkc1JlcXVpcmVkID0gZmFsc2VcbmRlZiBhdXRvbWF0aWNhbGx5Q2xvc2VkID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi5hdXRvbWF0aWNhbGx5Q2xvc2VkJ10udG9TdHJpbmcoKSlbMF1cbmRlZiBzZW5kTWFpbFRvID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi5zZW5kTWFpbFRvTGlua2VkJ10udG9TdHJpbmcoKSlbMF1cbmRlZiByZXF1aXJlZEZpZWxkcyA9IG5ldyBBcnJheUxpc3QoKVxuZGVmIHJlbGF0ZXNJbklzc3VlTGluaz1mYWxzZVxuZGVmIHJlbGF0ZXNPdXRJc3N1ZUxpbms9ZmFsc2VcblxuLypPUC0xMDM4OiBDaGllZG8gYWxsJ3V0ZW50ZSBzZSBlIGEgY2hpIHZ1b2xlIGludmlhcmUgbGEgbm90aWZpY2EgZGVsIHJhcHBvcnRvIGRpIGludGVydmVudG8gY2hlIHZlcnJcdTAwZTAgZ2VuZXJhdG8uXG5MbyBjaGllZG8gc29sbyBzZSBpbCB0aWNrZXQgc3UgY3VpIHN0byBlc2VndWVuZG8gbGEgdHJhbnNhemlvbmUgbm9uIFx1MDBlOCBzdGF0byBjaGl1c28gaW4gYXV0b21hdGljbyBkYWwgc2lzdGVtYSBlIHNvbG8gc2Ugbm9uIGdsaSBlcmEgZ2lcdTAwZTAgc3RhdG8gY2hpZXN0byBwcmltYSovXG5sb2cuZGVidWcgXCJpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGF1dG9tYXRpY2FsbHlDbG9zZWQpOiBcIiArIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoYXV0b21hdGljYWxseUNsb3NlZClcbmxvZy5kZWJ1ZyBcImlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc2VuZE1haWxUbyk6IFwiICsgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzZW5kTWFpbFRvKVxubG9nLmRlYnVnIFwidHJhbnNpZW50VmFyczogXCIgKyB0cmFuc2llbnRWYXJzXG5sb2cuZGVidWcgXCJpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHNlbmRNYWlsVG8pLnRvU3RyaW5nKCk6IFwiICsgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzZW5kTWFpbFRvKS50b1N0cmluZygpXG5cbkxpc3Q8SXNzdWVMaW5rPiBhbGxJbklzc3VlTGluayA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTGlua01hbmFnZXIoKS5nZXRJbndhcmRMaW5rcyhpc3N1ZS5nZXRJZCgpKVxuZm9yIChJdGVyYXRvcjxJc3N1ZUxpbms+IG91dEl0ZXJhdG9yID0gYWxsSW5Jc3N1ZUxpbmsuaXRlcmF0b3IoKTsgb3V0SXRlcmF0b3IuaGFzTmV4dCgpOykge1xuICAgIElzc3VlTGluayBpc3N1ZUxpbmsgPSAoSXNzdWVMaW5rKSBvdXRJdGVyYXRvci5uZXh0KCk7XG4gICAgXG4gICAgaWYoaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNSZWxhdGVzJ10udG9TdHJpbmcoKSkpe1xuXHRcdHJlbGF0ZXNJbklzc3VlTGluaz10cnVlXG4gICAgICAgIGxvZy5kZWJ1ZyBcIklzc3VlIGNvbiByZWxhdGVzSW5Jc3N1ZUxpbmtcIlxuICAgICAgICBicmVha1xuICAgIH1cbn1cbkxpc3Q8SXNzdWVMaW5rPiBhbGxPdXRJc3N1ZUxpbmsgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZUxpbmtNYW5hZ2VyKCkuZ2V0T3V0d2FyZExpbmtzKGlzc3VlLmdldElkKCkpXG5mb3IgKEl0ZXJhdG9yPElzc3VlTGluaz4gb3V0SXRlcmF0b3IgPSBhbGxPdXRJc3N1ZUxpbmsuaXRlcmF0b3IoKTsgb3V0SXRlcmF0b3IuaGFzTmV4dCgpOykge1xuICAgIElzc3VlTGluayBpc3N1ZUxpbmsgPSAoSXNzdWVMaW5rKSBvdXRJdGVyYXRvci5uZXh0KCk7XG4gICAgXG4gICAgaWYoaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNSZWxhdGVzJ10udG9TdHJpbmcoKSkpe1xuXHRcdHJlbGF0ZXNPdXRJc3N1ZUxpbms9dHJ1ZVxuICAgICAgICBsb2cuZGVidWcgXCJJc3N1ZSBjb24gcmVsYXRlc091dElzc3VlTGlua1wiXG4gICAgICAgIGJyZWFrXG4gICAgfVxufVxuXG5sb2cuZGVidWcgaXNzdWUua2V5ICsgXCIgKHJlbGF0ZXNJbklzc3VlTGluayB8fCByZWxhdGVzT3V0SXNzdWVMaW5rKTogXCIgKyAocmVsYXRlc0luSXNzdWVMaW5rIHx8IHJlbGF0ZXNPdXRJc3N1ZUxpbmspXG5sb2cuZGVidWcgaXNzdWUua2V5ICsgXCIgKGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoYXV0b21hdGljYWxseUNsb3NlZCkgXCIgKyBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGF1dG9tYXRpY2FsbHlDbG9zZWQpXG5sb2cuZGVidWcgaXNzdWUua2V5ICsgXCIgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzZW5kTWFpbFRvKT09bnVsbCBcIiArIChpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHNlbmRNYWlsVG8pPT1udWxsKVxuXG5pZigocmVsYXRlc0luSXNzdWVMaW5rIHx8IHJlbGF0ZXNPdXRJc3N1ZUxpbmspIC8qJiYgKGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoYXV0b21hdGljYWxseUNsb3NlZCk9PW51bGwgfHwgIWlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoYXV0b21hdGljYWxseUNsb3NlZCkudG9TdHJpbmcoKS5lcXVhbHMoXCJZZXNcIikpKi8gJiYgKGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc2VuZE1haWxUbyk9PW51bGwgfHwgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzZW5kTWFpbFRvKS50b1N0cmluZygpLmVxdWFscyhcIk5vbmVcIikpKXtcblx0ZmllbGRzUmVxdWlyZWQgPSB0cnVlXG5cdHJlcXVpcmVkRmllbGRzLmFkZChwcm9wZXJ0aWVzWydjZi5zZW5kTWFpbFRvTGlua2VkJ10udG9TdHJpbmcoKSlcbn1cblxubG9nLmRlYnVnIFwiRmllbGRzUmVxdWlyZWQ6IFwiICsgZmllbGRzUmVxdWlyZWRcbmRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcblxuaWYoZmllbGRzUmVxdWlyZWQpe1xuXHRkZWYgZkxpc3QgPSBuZXcgQXJyYXlMaXN0KClcblxuICAgICAgICBpZihyZXF1aXJlZEZpZWxkcy5zaXplKCkgPiAwKXtcbiAgICAgICAgXHRkZWYgZkxpc3REZXRhaWwgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgICAgICAgICBmTGlzdERldGFpbC5hZGQoXCJGXCIpXG4gICAgICAgICAgICAgICAgZkxpc3REZXRhaWwuYWRkKFwiVVNFUl9JTlBVVFwiKVxuICAgICAgICAgICAgXHRmTGlzdERldGFpbC5hZGQobnVsbClcbiAgICAgICAgICAgICAgICBmTGlzdERldGFpbC5hZGQocmVxdWlyZWRGaWVsZHMpXG4gICAgICAgICAgICAgICAgZkxpc3QuYWRkKGZMaXN0RGV0YWlsKVxuICAgICAgICB9XG5cbiAgICAgICAgb3V0cHV0LmFkZChmTGlzdClcbiAgICBcdHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oJ3tcIkZcIjpcIicgKyBvdXRwdXQudG9TdHJpbmcoKSArICdcIn0nKVxuICAgICAgICAvL3Rocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oXCJGXCIsIG91dHB1dC50b1N0cmluZygpKSAgIFxufWVsc2V7XG4gICAgcmV0dXJuIHRydWVcbn0iLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZQppbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb24KaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3IKaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGdyb292eS5qc29uLkpzb25CdWlsZGVyCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUubGluay5Jc3N1ZUxpbmsKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KZGVmIENhdGVnb3J5IGxvZyA9IENhdGVnb3J5LmdldEluc3RhbmNlKCJjb20ub25yZXNvbHZlLmppcmEuZ3Jvb3Z5LlBvc3RGdW5jdGlvbiIpCmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKQoKSXNzdWUgaXNzdWUgPSBpc3N1ZQoKZGVmIGZpZWxkc1JlcXVpcmVkID0gZmFsc2UKZGVmIGF1dG9tYXRpY2FsbHlDbG9zZWQgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLmF1dG9tYXRpY2FsbHlDbG9zZWQnXS50b1N0cmluZygpKVswXQpkZWYgc2VuZE1haWxUbyA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2Yuc2VuZE1haWxUb0xpbmtlZCddLnRvU3RyaW5nKCkpWzBdCmRlZiByZXF1aXJlZEZpZWxkcyA9IG5ldyBBcnJheUxpc3QoKQpkZWYgcmVsYXRlc0luSXNzdWVMaW5rPWZhbHNlCmRlZiByZWxhdGVzT3V0SXNzdWVMaW5rPWZhbHNlCgovKk9QLTEwMzg6IENoaWVkbyBhbGwndXRlbnRlIHNlIGUgYSBjaGkgdnVvbGUgaW52aWFyZSBsYSBub3RpZmljYSBkZWwgcmFwcG9ydG8gZGkgaW50ZXJ2ZW50byBjaGUgdmVycsOgIGdlbmVyYXRvLgpMbyBjaGllZG8gc29sbyBzZSBpbCB0aWNrZXQgc3UgY3VpIHN0byBlc2VndWVuZG8gbGEgdHJhbnNhemlvbmUgbm9uIMOoIHN0YXRvIGNoaXVzbyBpbiBhdXRvbWF0aWNvIGRhbCBzaXN0ZW1hIGUgc29sbyBzZSBub24gZ2xpIGVyYSBnacOgIHN0YXRvIGNoaWVzdG8gcHJpbWEqLwpsb2cuZGVidWcgImlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoYXV0b21hdGljYWxseUNsb3NlZCk6ICIgKyBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGF1dG9tYXRpY2FsbHlDbG9zZWQpCmxvZy5kZWJ1ZyAiaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzZW5kTWFpbFRvKTogIiArIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc2VuZE1haWxUbykKbG9nLmRlYnVnICJ0cmFuc2llbnRWYXJzOiAiICsgdHJhbnNpZW50VmFycwpsb2cuZGVidWcgImlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc2VuZE1haWxUbykudG9TdHJpbmcoKTogIiArIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc2VuZE1haWxUbykudG9TdHJpbmcoKQoKTGlzdDxJc3N1ZUxpbms+IGFsbEluSXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldElud2FyZExpbmtzKGlzc3VlLmdldElkKCkpCmZvciAoSXRlcmF0b3I8SXNzdWVMaW5rPiBvdXRJdGVyYXRvciA9IGFsbEluSXNzdWVMaW5rLml0ZXJhdG9yKCk7IG91dEl0ZXJhdG9yLmhhc05leHQoKTspIHsKICAgIElzc3VlTGluayBpc3N1ZUxpbmsgPSAoSXNzdWVMaW5rKSBvdXRJdGVyYXRvci5uZXh0KCk7CiAgICAKICAgIGlmKGlzc3VlTGluay5pc3N1ZUxpbmtUeXBlLmdldE5hbWUoKS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpbC5saW5rZWRUa3RzUmVsYXRlcyddLnRvU3RyaW5nKCkpKXsKCQlyZWxhdGVzSW5Jc3N1ZUxpbms9dHJ1ZQogICAgICAgIGxvZy5kZWJ1ZyAiSXNzdWUgY29uIHJlbGF0ZXNJbklzc3VlTGluayIKICAgICAgICBicmVhawogICAgfQp9Ckxpc3Q8SXNzdWVMaW5rPiBhbGxPdXRJc3N1ZUxpbmsgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZUxpbmtNYW5hZ2VyKCkuZ2V0T3V0d2FyZExpbmtzKGlzc3VlLmdldElkKCkpCmZvciAoSXRlcmF0b3I8SXNzdWVMaW5rPiBvdXRJdGVyYXRvciA9IGFsbE91dElzc3VlTGluay5pdGVyYXRvcigpOyBvdXRJdGVyYXRvci5oYXNOZXh0KCk7KSB7CiAgICBJc3N1ZUxpbmsgaXNzdWVMaW5rID0gKElzc3VlTGluaykgb3V0SXRlcmF0b3IubmV4dCgpOwogICAgCiAgICBpZihpc3N1ZUxpbmsuaXNzdWVMaW5rVHlwZS5nZXROYW1lKCkudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snaWwubGlua2VkVGt0c1JlbGF0ZXMnXS50b1N0cmluZygpKSl7CgkJcmVsYXRlc091dElzc3VlTGluaz10cnVlCiAgICAgICAgbG9nLmRlYnVnICJJc3N1ZSBjb24gcmVsYXRlc091dElzc3VlTGluayIKICAgICAgICBicmVhawogICAgfQp9Cgpsb2cuZGVidWcgaXNzdWUua2V5ICsgIiAocmVsYXRlc0luSXNzdWVMaW5rIHx8IHJlbGF0ZXNPdXRJc3N1ZUxpbmspOiAiICsgKHJlbGF0ZXNJbklzc3VlTGluayB8fCByZWxhdGVzT3V0SXNzdWVMaW5rKQpsb2cuZGVidWcgaXNzdWUua2V5ICsgIiAoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q2xvc2VkKSAiICsgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q2xvc2VkKQpsb2cuZGVidWcgaXNzdWUua2V5ICsgIiBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHNlbmRNYWlsVG8pPT1udWxsICIgKyAoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzZW5kTWFpbFRvKT09bnVsbCkKCmlmKChyZWxhdGVzSW5Jc3N1ZUxpbmsgfHwgcmVsYXRlc091dElzc3VlTGluaykgLyomJiAoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q2xvc2VkKT09bnVsbCB8fCAhaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q2xvc2VkKS50b1N0cmluZygpLmVxdWFscygiWWVzIikpKi8gJiYgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzZW5kTWFpbFRvKT09bnVsbCl7CglmaWVsZHNSZXF1aXJlZCA9IHRydWUKCXJlcXVpcmVkRmllbGRzLmFkZChwcm9wZXJ0aWVzWydjZi5zZW5kTWFpbFRvTGlua2VkJ10udG9TdHJpbmcoKSkKfQoKbG9nLmRlYnVnICJGaWVsZHNSZXF1aXJlZDogIiArIGZpZWxkc1JlcXVpcmVkCmRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KCkKCmlmKGZpZWxkc1JlcXVpcmVkKXsKCWRlZiBmTGlzdCA9IG5ldyBBcnJheUxpc3QoKQoKICAgICAgICBpZihyZXF1aXJlZEZpZWxkcy5zaXplKCkgPiAwKXsKICAgICAgICAJZGVmIGZMaXN0RGV0YWlsID0gbmV3IEFycmF5TGlzdCgpCiAgICAgICAgICAgICAgICBmTGlzdERldGFpbC5hZGQoIkYiKQogICAgICAgICAgICAgICAgZkxpc3REZXRhaWwuYWRkKCJVU0VSX0lOUFVUIikKICAgICAgICAgICAgCWZMaXN0RGV0YWlsLmFkZChudWxsKQogICAgICAgICAgICAgICAgZkxpc3REZXRhaWwuYWRkKHJlcXVpcmVkRmllbGRzKQogICAgICAgICAgICAgICAgZkxpc3QuYWRkKGZMaXN0RGV0YWlsKQogICAgICAgIH0KCiAgICAgICAgb3V0cHV0LmFkZChmTGlzdCkKICAgIAl0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7IkYiOiInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnIn0nKQogICAgICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigiRiIsIG91dHB1dC50b1N0cmluZygpKSAgIAp9ZWxzZXsKICAgIHJldHVybiB0cnVlCn0=</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">732b852fe810d140fc2df432e5e30b7a3bed81cc</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBPUCBFbWFpbCBOb3RpZmljYXRpb246IE9OU0lURV9SRVBPUlQ=</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk1vZGlmaWVkVmFsdWVcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUudXRpbC5EZWZhdWx0SXNzdWVDaGFuZ2VIb2xkZXJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuZXZlbnQudHlwZS5FdmVudERpc3BhdGNoT3B0aW9uXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5saW5rLklzc3VlTGlua1xuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuQ2F0ZWdvcnkgbG9nID0gQ2F0ZWdvcnkuZ2V0SW5zdGFuY2UoXCJjb20ub25yZXNvbHZlLmppcmEuZ3Jvb3Z5LlBvc3RGdW5jdGlvblwiKVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxuZGVmIHNlbmRNYWlsVG8gPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLnNlbmRNYWlsVG9MaW5rZWQnXS50b1N0cmluZygpKVswXVxuZGVmIG9uc2l0ZVJlcG9ydERhdGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2Yud2ZPbnNpdGVSZXBvcnQnXS50b1N0cmluZygpKVswXVxuZGVmIHNlbmRNYWlsVG9SZWMgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLnNlbmRNYWlsVG9SZWNpcGllbnRzJ10udG9TdHJpbmcoKSlbMF1cblxuZGVmIHJlbGF0ZXNJbklzc3VlTGluaz1mYWxzZVxuZGVmIHJlbGF0ZXNPdXRJc3N1ZUxpbms9ZmFsc2VcbmRlZiBsaW5rZWRUaWNrZXRzPW5ldyBBcnJheUxpc3QoKVxubG9nLmRlYnVnIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc2VuZE1haWxUbykudG9TdHJpbmcoKVxuXG5MaXN0PElzc3VlTGluaz4gYWxsSW5Jc3N1ZUxpbmsgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZUxpbmtNYW5hZ2VyKCkuZ2V0SW53YXJkTGlua3MoaXNzdWUuZ2V0SWQoKSlcbmZvciAoSXRlcmF0b3I8SXNzdWVMaW5rPiBvdXRJdGVyYXRvciA9IGFsbEluSXNzdWVMaW5rLml0ZXJhdG9yKCk7IG91dEl0ZXJhdG9yLmhhc05leHQoKTspIHtcbiAgICBJc3N1ZUxpbmsgaXNzdWVMaW5rID0gKElzc3VlTGluaykgb3V0SXRlcmF0b3IubmV4dCgpO1xuXG4gICAgaWYoaXNzdWVMaW5rLmdldFNvdXJjZU9iamVjdCgpICE9IG51bGwgJiYgaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNSZWxhdGVzJ10udG9TdHJpbmcoKSkgJiYgaXNzdWVMaW5rLmdldFNvdXJjZU9iamVjdCgpLnN0YXR1cy5uYW1lID09IFwiQ29tcGxldGVkIHRvIGJlIENsb3NlZFwiKXtcbiAgICAgICAgcmVsYXRlc0luSXNzdWVMaW5rPXRydWVcbiAgICAgICAgbGlua2VkVGlja2V0cy5hZGQoaXNzdWVMaW5rLmdldFNvdXJjZU9iamVjdCgpLnRvU3RyaW5nKCkpXG4gICAgICAgIGxvZy5kZWJ1ZyBcIklzc3VlIGNvbiByZWxhdGVzSW5Jc3N1ZUxpbmtcIlxuICAgIH1cbn1cbkxpc3Q8SXNzdWVMaW5rPiBhbGxPdXRJc3N1ZUxpbmsgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZUxpbmtNYW5hZ2VyKCkuZ2V0T3V0d2FyZExpbmtzKGlzc3VlLmdldElkKCkpXG5mb3IgKEl0ZXJhdG9yPElzc3VlTGluaz4gb3V0SXRlcmF0b3IgPSBhbGxPdXRJc3N1ZUxpbmsuaXRlcmF0b3IoKTsgb3V0SXRlcmF0b3IuaGFzTmV4dCgpOykge1xuICAgIElzc3VlTGluayBpc3N1ZUxpbmsgPSAoSXNzdWVMaW5rKSBvdXRJdGVyYXRvci5uZXh0KCk7XG5cbiAgICBpZihpc3N1ZUxpbmsuZ2V0RGVzdGluYXRpb25PYmplY3QoKSAhPSBudWxsICYmIGlzc3VlTGluay5pc3N1ZUxpbmtUeXBlLmdldE5hbWUoKS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpbC5saW5rZWRUa3RzUmVsYXRlcyddLnRvU3RyaW5nKCkpICYmIGlzc3VlTGluay5nZXREZXN0aW5hdGlvbk9iamVjdCgpLnN0YXR1cy5uYW1lID09IFwiQ29tcGxldGVkIHRvIGJlIENsb3NlZFwiKXtcbiAgICAgICAgcmVsYXRlc091dElzc3VlTGluaz10cnVlXG4gICAgICAgIGxpbmtlZFRpY2tldHMuYWRkKGlzc3VlTGluay5nZXREZXN0aW5hdGlvbk9iamVjdCgpLnRvU3RyaW5nKCkpXG4gICAgICAgIGxvZy5kZWJ1ZyBcIklzc3VlIGNvbiByZWxhdGVzT3V0SXNzdWVMaW5rXCJcbiAgICB9XG59XG5cbmRlZiBib2R5X3JlcSA9IFtdXG5cbmlmKChyZWxhdGVzSW5Jc3N1ZUxpbmsgfHwgcmVsYXRlc091dElzc3VlTGluaykgJiYgIWlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc2VuZE1haWxUbykudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snY2Yub3B0aW9uLnNlbmRNYWlsVG8ubm9FbWFpbCddLnRvU3RyaW5nKCkpICYmIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc2VuZE1haWxUbykudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snY2Yub3B0aW9uLnNlbmRNYWlsVG8uY3VycmVudFJlcG9ydCddLnRvU3RyaW5nKCkpKXtcbiAgICAvL09QLTEwMzg6IGludmlhcmUgc29sbyBsYSBtYWlsIGNvbiBpbCByYXBwb3J0byBkaSBpbnRlcnZlbnRvIGRlbCB0aWNrZXQgY29ycmVudGVcbiAgICBib2R5X3JlcSA9IFtcbiAgICAgICAgXCJ0ZW1wbGF0ZU5hbWVcIjogcHJvcGVydGllc1sndHQub25TaXRlUmVwb3J0J10udG9TdHJpbmcoKSxcbiAgICAgICAgXCJwZWNcIjogZmFsc2UsXG4gICAgICAgIFwiaXNzdWVLZXlcIjogaXNzdWUua2V5LFxuICAgICAgICBcImFkZGl0aW9uYWxSZWNpcGllbnRzXCI6IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc2VuZE1haWxUb1JlYykudG9TdHJpbmcoKVxuICAgIF1cbiAgICBsb2cuZGVidWcgXCJpbjE6IGJvZHlfcmVxOiBcIiArIGJvZHlfcmVxXG59ZWxzZSBpZigocmVsYXRlc0luSXNzdWVMaW5rIHx8IHJlbGF0ZXNPdXRJc3N1ZUxpbmspICYmICFpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHNlbmRNYWlsVG8pLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2NmLm9wdGlvbi5zZW5kTWFpbFRvLm5vRW1haWwnXS50b1N0cmluZygpKSAmJiBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHNlbmRNYWlsVG8pLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2NmLm9wdGlvbi5zZW5kTWFpbFRvLmFsbExpbmtlZCddLnRvU3RyaW5nKCkpKXtcbiAgICAvL09QLTEwMzg6IGludmlhcmUgbGEgbWFpbCBjb24gdHV0dGkgaSByYXBwb3J0aSBkaSBpbnRlcnZlbnRvIGRlaSB0aWNrZXQgY29sbGVnYXRpXG4gICAgYm9keV9yZXEgPSBbXG4gICAgICAgIFwidGVtcGxhdGVOYW1lXCI6IHByb3BlcnRpZXNbJ3R0Lm9uU2l0ZVJlcG9ydCddLnRvU3RyaW5nKCksXG4gICAgICAgIFwicGVjXCI6IGZhbHNlLFxuICAgICAgICBcImlzc3VlS2V5XCI6IGlzc3VlLmtleSxcbiAgICAgICAgXCJsaW5rZWRUaWNrZXRzXCI6IGxpbmtlZFRpY2tldHMsXG4gICAgICAgIFwiYWRkaXRpb25hbFJlY2lwaWVudHNcIjogaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzZW5kTWFpbFRvUmVjKS50b1N0cmluZygpXG4gICAgXVxuICAgIGxvZy5kZWJ1ZyBcImluMjogYm9keV9yZXE6IFwiICsgYm9keV9yZXFcbn1lbHNlIGlmKCFyZWxhdGVzSW5Jc3N1ZUxpbmsgJiYgIXJlbGF0ZXNPdXRJc3N1ZUxpbmspe1xuICAgIGJvZHlfcmVxID0gW1xuICAgICAgICBcInRlbXBsYXRlTmFtZVwiOiBwcm9wZXJ0aWVzWyd0dC5vblNpdGVSZXBvcnQnXS50b1N0cmluZygpLFxuICAgICAgICBcInBlY1wiOiBmYWxzZSxcbiAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXksXG4gICAgICAgIFwiYWRkaXRpb25hbFJlY2lwaWVudHNcIjogaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzZW5kTWFpbFRvUmVjKS50b1N0cmluZygpXG4gICAgXVxuICAgIGxvZy5kZWJ1ZyBcImluMzogYm9keV9yZXE6IFwiICsgYm9keV9yZXFcbn1cblxuLyogUkVTVCBBUEkgcGVyIEludmlvIE5vdGlmaWNhIEVtYWlsIE9OU0lURV9SRVBPUlQgKi9cbnJlcXVlc3RNZXRob2QgPSBcIlBPU1RcIjtcbmxvZy5kZWJ1ZyBcInByZXBhcm8gbGEgY2hpYW1hdGFcIlxuYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1tcImFwaS5lbnZcIl0udG9TdHJpbmcoKSArIFwiL29wL3Jlc3QvamlyYS9BQS90cmFuc2FjdGlvbi9tYWlsL3NlbmRcIlxuVVJMIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcbkh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbmNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5jb25uZWN0aW9uLm91dHB1dFN0cmVhbS53aXRoV3JpdGVyKFwiVVRGLThcIikgeyBuZXcgU3RyZWFtaW5nSnNvbkJ1aWxkZXIoaXQsIGJvZHlfcmVxKSB9XG5sb2cuZGVidWcgXCJjb25uZWN0aW9uLm91dHB1dFN0cmVhbTogXCIgKyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuY29ubmVjdGlvbi5jb25uZWN0KCk7XG4vL2xvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbmxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbmxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcblxuZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKVxuZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpXG5kZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbmRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KClcblxuaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAwXCIpICYmICFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjA0XCIpKXtcbiAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgbG9nLmRlYnVnIFwiYm9keV9yZXE6IFwiICsgYm9keV9yZXFcbiAgICBsb2cuZGVidWcgXCJSZXNwb25zZUNvZGU6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuXG4gICAgZGVmIG91dHB1dE1zZyA9ICgoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dFxuICAgIGxvZy5kZWJ1ZyBcIigoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dDogXCIgKyBvdXRwdXRNc2dcblxuICAgIGRlZiBqc29uU2x1cnBlciA9IG5ldyBKc29uU2x1cnBlcigpXG4gICAgZGVmIGpzb25fb2JqZWN0ID0ganNvblNsdXJwZXIucGFyc2VUZXh0KG91dHB1dE1zZylcbiAgICBhc3NlcnQganNvbl9vYmplY3QgaW5zdGFuY2VvZiBNYXAgIFxuICAgIGxvZy5kZWJ1ZyBcIm1lc3NhZ2U6IFwiICsgIGpzb25fb2JqZWN0Lm1lc3NhZ2VcblxuICAgIGVMaXN0RXJyb3JzLmFkZChcIkVcIilcbiAgICBlTGlzdEVycm9ycy5hZGQoXCJTRU5ETUFJTFwiKVxuICAgIGVycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArIFwiIFwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKSlcbiAgICBlTGlzdEVycm9ycy5hZGQoanNvbl9vYmplY3QubWVzc2FnZSlcbiAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpXG5cbiAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgIHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oJ3tcIkVcIjpcIicgKyBvdXRwdXQudG9TdHJpbmcoKSArICdcIn0nKVxuICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbihcIkVcIiwgb3V0cHV0LnRvU3RyaW5nKCkpXG4gICAgXG59ZWxzZXtcbiAgICAvKkwnZW1haWwgXHUwMGU4IHN0YXRhIGludmlhdGEgY29ycmV0dGFtZW50ZSwgYWdnaW9ybm8gaWwgY2FtcG8gT05TSVRFX1JFUE9SVCBjb24gbGEgZGF0YSBjb3JyZW50ZSovXG5cbiAgICAvLyBsb2cud2FybiBcImlzc3VlIFwiK2lzc3VlLmdldEtleSgpXG4gICAgZGVmIGNmdiA9IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUob25zaXRlUmVwb3J0RGF0ZSlcbiAgICBpZiAoIWNmdikge1xuICAgICAgICBkZWYgdDAgID0gbmV3IGphdmEuc3FsLlRpbWVzdGFtcChTeXN0ZW0uY3VycmVudFRpbWVNaWxsaXMoKSlcbiAgICAgICAgbG9nLndhcm4gXCJTdGFydFRpbWUgPT4gJ1wiK3QwLnRvU3RyaW5nKCkrXCInXCJcbiAgICAgICAgZGVmIG12ID0gbmV3IE1vZGlmaWVkVmFsdWUob25zaXRlUmVwb3J0RGF0ZSwgdDApXG4gICAgICAgIGRlZiBjaCA9IG5ldyBEZWZhdWx0SXNzdWVDaGFuZ2VIb2xkZXIoKVxuICAgICAgICBvbnNpdGVSZXBvcnREYXRlLnVwZGF0ZVZhbHVlKG51bGwsIGlzc3VlLCBtdiwgY2gpIFxuICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZy53YXJuIFwiU3RhcnRUaW1lID09ICdcIitjZnYudG9TdHJpbmcoKStcIidcIlxuICAgIH1cbn0iLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk1vZGlmaWVkVmFsdWUKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS51dGlsLkRlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlcgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmV2ZW50LnR5cGUuRXZlbnREaXNwYXRjaE9wdGlvbgppbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeQppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuSXNzdWVMaW5rCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbAoKUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKQpGaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKQpwcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0gewoJcHJvcGVydGllcy5sb2FkKGl0KQp9CkNhdGVnb3J5IGxvZyA9IENhdGVnb3J5LmdldEluc3RhbmNlKCJjb20ub25yZXNvbHZlLmppcmEuZ3Jvb3Z5LlBvc3RGdW5jdGlvbiIpCmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKQoKSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpOwpDdXN0b21GaWVsZE1hbmFnZXIgY3VzdG9tRmllbGRNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCk7CmRlZiByZXF1ZXN0TWV0aG9kCmRlZiBiYXNlVVJMCmRlZiBzZW5kTWFpbFRvID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi5zZW5kTWFpbFRvTGlua2VkJ10udG9TdHJpbmcoKSlbMF0KZGVmIG9uc2l0ZVJlcG9ydERhdGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2Yud2ZPbnNpdGVSZXBvcnQnXS50b1N0cmluZygpKVswXQpkZWYgc2VuZE1haWxUb1JlYyA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2Yuc2VuZE1haWxUb1JlY2lwaWVudHMnXS50b1N0cmluZygpKVswXQoKZGVmIHJlbGF0ZXNJbklzc3VlTGluaz1mYWxzZQpkZWYgcmVsYXRlc091dElzc3VlTGluaz1mYWxzZQpkZWYgbGlua2VkVGlja2V0cz1uZXcgQXJyYXlMaXN0KCkKbG9nLmRlYnVnIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc2VuZE1haWxUbykudG9TdHJpbmcoKQoKTGlzdDxJc3N1ZUxpbms+IGFsbEluSXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldElud2FyZExpbmtzKGlzc3VlLmdldElkKCkpCmZvciAoSXRlcmF0b3I8SXNzdWVMaW5rPiBvdXRJdGVyYXRvciA9IGFsbEluSXNzdWVMaW5rLml0ZXJhdG9yKCk7IG91dEl0ZXJhdG9yLmhhc05leHQoKTspIHsKICAgIElzc3VlTGluayBpc3N1ZUxpbmsgPSAoSXNzdWVMaW5rKSBvdXRJdGVyYXRvci5uZXh0KCk7CgogICAgaWYoaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNSZWxhdGVzJ10udG9TdHJpbmcoKSkpewogICAgICAgIHJlbGF0ZXNJbklzc3VlTGluaz10cnVlCiAgICAgICAgbGlua2VkVGlja2V0cy5hZGQoaXNzdWVMaW5rLmdldFNvdXJjZU9iamVjdCgpLnRvU3RyaW5nKCkpCiAgICAgICAgbG9nLmRlYnVnICJJc3N1ZSBjb24gcmVsYXRlc0luSXNzdWVMaW5rIgogICAgfQp9Ckxpc3Q8SXNzdWVMaW5rPiBhbGxPdXRJc3N1ZUxpbmsgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZUxpbmtNYW5hZ2VyKCkuZ2V0T3V0d2FyZExpbmtzKGlzc3VlLmdldElkKCkpCmZvciAoSXRlcmF0b3I8SXNzdWVMaW5rPiBvdXRJdGVyYXRvciA9IGFsbE91dElzc3VlTGluay5pdGVyYXRvcigpOyBvdXRJdGVyYXRvci5oYXNOZXh0KCk7KSB7CiAgICBJc3N1ZUxpbmsgaXNzdWVMaW5rID0gKElzc3VlTGluaykgb3V0SXRlcmF0b3IubmV4dCgpOwoKICAgIGlmKGlzc3VlTGluay5pc3N1ZUxpbmtUeXBlLmdldE5hbWUoKS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpbC5saW5rZWRUa3RzUmVsYXRlcyddLnRvU3RyaW5nKCkpKXsKICAgICAgICByZWxhdGVzT3V0SXNzdWVMaW5rPXRydWUKICAgICAgICBsaW5rZWRUaWNrZXRzLmFkZChpc3N1ZUxpbmsuZ2V0RGVzdGluYXRpb25PYmplY3QoKS50b1N0cmluZygpKQogICAgICAgIGxvZy5kZWJ1ZyAiSXNzdWUgY29uIHJlbGF0ZXNPdXRJc3N1ZUxpbmsiCiAgICB9Cn0KCmRlZiBib2R5X3JlcSA9IFtdCgppZigocmVsYXRlc0luSXNzdWVMaW5rIHx8IHJlbGF0ZXNPdXRJc3N1ZUxpbmspICYmICFpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHNlbmRNYWlsVG8pLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2NmLm9wdGlvbi5zZW5kTWFpbFRvLm5vRW1haWwnXS50b1N0cmluZygpKSAmJiBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHNlbmRNYWlsVG8pLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2NmLm9wdGlvbi5zZW5kTWFpbFRvLmN1cnJlbnRSZXBvcnQnXS50b1N0cmluZygpKSl7CiAgICAvL09QLTEwMzg6IGludmlhcmUgc29sbyBsYSBtYWlsIGNvbiBpbCByYXBwb3J0byBkaSBpbnRlcnZlbnRvIGRlbCB0aWNrZXQgY29ycmVudGUKICAgIGJvZHlfcmVxID0gWwogICAgICAgICJ0ZW1wbGF0ZU5hbWUiOiBwcm9wZXJ0aWVzWyd0dC5vblNpdGVSZXBvcnQnXS50b1N0cmluZygpLAogICAgICAgICJwZWMiOiBmYWxzZSwKICAgICAgICAiaXNzdWVLZXkiOiBpc3N1ZS5rZXksCiAgICAgICAgImFkZGl0aW9uYWxSZWNpcGllbnRzIjogaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzZW5kTWFpbFRvUmVjKS50b1N0cmluZygpCiAgICBdCiAgICBsb2cuZGVidWcgImluMTogYm9keV9yZXE6ICIgKyBib2R5X3JlcQp9ZWxzZSBpZigocmVsYXRlc0luSXNzdWVMaW5rIHx8IHJlbGF0ZXNPdXRJc3N1ZUxpbmspICYmICFpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHNlbmRNYWlsVG8pLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2NmLm9wdGlvbi5zZW5kTWFpbFRvLm5vRW1haWwnXS50b1N0cmluZygpKSAmJiBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHNlbmRNYWlsVG8pLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2NmLm9wdGlvbi5zZW5kTWFpbFRvLmFsbExpbmtlZCddLnRvU3RyaW5nKCkpKXsKICAgIC8vT1AtMTAzODogaW52aWFyZSBsYSBtYWlsIGNvbiB0dXR0aSBpIHJhcHBvcnRpIGRpIGludGVydmVudG8gZGVpIHRpY2tldCBjb2xsZWdhdGkKICAgIGJvZHlfcmVxID0gWwogICAgICAgICJ0ZW1wbGF0ZU5hbWUiOiBwcm9wZXJ0aWVzWyd0dC5vblNpdGVSZXBvcnQnXS50b1N0cmluZygpLAogICAgICAgICJwZWMiOiBmYWxzZSwKICAgICAgICAiaXNzdWVLZXkiOiBpc3N1ZS5rZXksCiAgICAgICAgImxpbmtlZFRpY2tldHMiOiBsaW5rZWRUaWNrZXRzLAogICAgICAgICJhZGRpdGlvbmFsUmVjaXBpZW50cyI6IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc2VuZE1haWxUb1JlYykudG9TdHJpbmcoKQogICAgXQogICAgbG9nLmRlYnVnICJpbjI6IGJvZHlfcmVxOiAiICsgYm9keV9yZXEKfWVsc2UgaWYoIXJlbGF0ZXNJbklzc3VlTGluayAmJiAhcmVsYXRlc091dElzc3VlTGluayl7CiAgICBib2R5X3JlcSA9IFsKICAgICAgICAidGVtcGxhdGVOYW1lIjogcHJvcGVydGllc1sndHQub25TaXRlUmVwb3J0J10udG9TdHJpbmcoKSwKICAgICAgICAicGVjIjogZmFsc2UsCiAgICAgICAgImlzc3VlS2V5IjogaXNzdWUua2V5LAogICAgICAgICJhZGRpdGlvbmFsUmVjaXBpZW50cyI6IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc2VuZE1haWxUb1JlYykudG9TdHJpbmcoKQogICAgXQogICAgbG9nLmRlYnVnICJpbjM6IGJvZHlfcmVxOiAiICsgYm9keV9yZXEKfQoKLyogUkVTVCBBUEkgcGVyIEludmlvIE5vdGlmaWNhIEVtYWlsIE9OU0lURV9SRVBPUlQgKi8KcmVxdWVzdE1ldGhvZCA9ICJQT1NUIjsKbG9nLmRlYnVnICJwcmVwYXJvIGxhIGNoaWFtYXRhIgpiYXNlVVJMID0gImh0dHA6Ly8iICsgcHJvcGVydGllc1siYXBpLmVudiJdLnRvU3RyaW5nKCkgKyAiL29wL3Jlc3QvamlyYS9BQS90cmFuc2FjdGlvbi9tYWlsL3NlbmQiClVSTCB1cmwgPSBuZXcgVVJMKGJhc2VVUkwpCkh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7CmNvbm5lY3Rpb24uc2V0UmVxdWVzdE1ldGhvZChyZXF1ZXN0TWV0aG9kKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoIkNvbnRlbnQtVHlwZSIsICJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLTgiKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoIkFjY2VwdCIsICIqLyoiKTsKY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTsKY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpOwpjb25uZWN0aW9uLm91dHB1dFN0cmVhbQpjb25uZWN0aW9uLm91dHB1dFN0cmVhbS53aXRoV3JpdGVyKCJVVEYtOCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfQpsb2cuZGVidWcgImNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtOiAiICsgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0KY29ubmVjdGlvbi5jb25uZWN0KCk7Ci8vbG9nLmRlYnVnICJ1cmw6ICIgKyB1cmwKbG9nLmRlYnVnICJSZXNwb25zZUNvZGU6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkKbG9nLmRlYnVnICJSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKCmRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpCmRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKQpkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpCgppZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoIjIwMCIpKXsKICAgIGxvZy5kZWJ1ZyAidXJsOiAiICsgdXJsCiAgICBsb2cuZGVidWcgImJvZHlfcmVxOiAiICsgYm9keV9yZXEKICAgIGxvZy5kZWJ1ZyAiUmVzcG9uc2VDb2RlOiIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpCiAgICBsb2cuZGVidWcgIlJlc3BvbnNlTWVzc2FnZToiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKQoKICAgIGRlZiBvdXRwdXRNc2cgPSAoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHQKICAgIGxvZy5kZWJ1ZyAiKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0OiAiICsgb3V0cHV0TXNnCgogICAgZGVmIGpzb25TbHVycGVyID0gbmV3IEpzb25TbHVycGVyKCkKICAgIGRlZiBqc29uX29iamVjdCA9IGpzb25TbHVycGVyLnBhcnNlVGV4dChvdXRwdXRNc2cpCiAgICBhc3NlcnQganNvbl9vYmplY3QgaW5zdGFuY2VvZiBNYXAgIAogICAgbG9nLmRlYnVnICJtZXNzYWdlOiAiICsgIGpzb25fb2JqZWN0Lm1lc3NhZ2UKCiAgICBlTGlzdEVycm9ycy5hZGQoIkUiKQogICAgZUxpc3RFcnJvcnMuYWRkKCJTRU5ETUFJTCIpCiAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyAiICIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpKQogICAgZUxpc3RFcnJvcnMuYWRkKGpzb25fb2JqZWN0Lm1lc3NhZ2UpCiAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpCgogICAgb3V0cHV0LmFkZChlTGlzdCkKICAgIHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oJ3siRSI6IicgKyBvdXRwdXQudG9TdHJpbmcoKSArICcifScpCiAgICAvL3Rocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oIkUiLCBvdXRwdXQudG9TdHJpbmcoKSkKICAgIAp9ZWxzZXsKICAgIC8qTCdlbWFpbCDDqCBzdGF0YSBpbnZpYXRhIGNvcnJldHRhbWVudGUsIGFnZ2lvcm5vIGlsIGNhbXBvIE9OU0lURV9SRVBPUlQgY29uIGxhIGRhdGEgY29ycmVudGUqLwoKICAgIC8vIGxvZy53YXJuICJpc3N1ZSAiK2lzc3VlLmdldEtleSgpCiAgICBkZWYgY2Z2ID0gaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShvbnNpdGVSZXBvcnREYXRlKQogICAgaWYgKCFjZnYpIHsKICAgICAgICBkZWYgdDAgID0gbmV3IGphdmEuc3FsLlRpbWVzdGFtcChTeXN0ZW0uY3VycmVudFRpbWVNaWxsaXMoKSkKICAgICAgICBsb2cud2FybiAiU3RhcnRUaW1lID0+ICciK3QwLnRvU3RyaW5nKCkrIiciCiAgICAgICAgZGVmIG12ID0gbmV3IE1vZGlmaWVkVmFsdWUob25zaXRlUmVwb3J0RGF0ZSwgdDApCiAgICAgICAgZGVmIGNoID0gbmV3IERlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlcigpCiAgICAgICAgb25zaXRlUmVwb3J0RGF0ZS51cGRhdGVWYWx1ZShudWxsLCBpc3N1ZSwgbXYsIGNoKSAKICAgIH0gZWxzZSB7CiAgICAgICAgbG9nLndhcm4gIlN0YXJ0VGltZSA9PSAnIitjZnYudG9TdHJpbmcoKSsiJyIKICAgIH0KfQ==</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="6">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="append.value"></arg>
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="field.name">customfield_22641</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">309e0c3d-af4a-4dfc-a9f4-fe57e6309132</arg>
                  <arg name="FIELD_NOTES">YCFgVXBkYXRlIE9OU0lURV9SRVBPUlRfU0VOVF9EQVRFIG9uIGxpbmtlZCBpc3N1ZXM=</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22666</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="621" name="Re-Invia Consuntivo al Cliente" view="fieldscreen">
          <meta name="opsbar-sequence">30</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19911</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">dacad0dc-0b69-4718-870b-22e11398542c</arg>
                <arg name="FIELD_NOTES">YCFgTWFpbnRlbmFuY2UgVGlja2V0IE9SIFBNIFRpY2tldA==</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnTWFpbnRlbmFuY2UgVGlja2V0JyB8fCBpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnUGxhbm5lZCBNYWludGVuYW5jZSBUaWNrZXQnIiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">fada32c2-b768-4770-816d-beeac0f8e084</arg>
                <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIEZJTkFOQ0lBTF9TVEFURU1FTlRfVE9fQ1VTVE9NRVIgLSBJZiBpdCdzIG51bGwgdGhlIGVtYWlsIGhhcyBub3QgYmVlbiBzZW50IHlldA==</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXG5cblByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKClcbkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpXG5wcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0ge1xuXHRwcm9wZXJ0aWVzLmxvYWQoaXQpXG59XG5jZlZhbHVlc1twcm9wZXJ0aWVzWydjZi53ZkZpbmFuY2lhbFN0YXRtVG9DJ11dICE9IG51bGwiLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">e70180eb-0cf2-468c-b6c4-1eeded83980b</arg>
                <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIE9QX0FVVE9NQVRJQ0FMTFlfQ0xPU0VEIC0gaWYgWWVzIGRvbid0IGFsbG93IHRyYW5zaXRpb24=</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXG5cblByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKClcbkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpXG5wcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0ge1xuXHRwcm9wZXJ0aWVzLmxvYWQoaXQpXG59XG5jZlZhbHVlc1twcm9wZXJ0aWVzWydjZi5hdXRvbWF0aWNhbGx5Q2xvc2VkJ11dID09IG51bGwgfHwgY2ZWYWx1ZXNbcHJvcGVydGllc1snY2YuYXV0b21hdGljYWxseUNsb3NlZCddXT8udmFsdWUgPT0gJ05vJyIsInNjcmlwdFBhdGgiOm51bGx9</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">6c786cdf0a6d0ad4b6b1d34c1ad1598920327ad2</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlcXVpcmVkIEZpZWxkcyAtIHNvbG8gZXJyb3JzLCBubyB3YXJuaW5ncw==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">7f809f6e87447e19ed7c9921bc7d6a28aed7bf3f</arg>
              <arg name="FIELD_NOTES">YCFgT1AgRW1haWwgTm90aWZpY2F0aW9uOiBGSU5BTkNJQUxfU1RBVEVNRU5UX1RPX0NVU1RPTUVS</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="6">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="append.value"></arg>
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="field.name">customfield_22644</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">e5c66278-68bf-4160-8cc6-ca5e2c5da9cc</arg>
                  <arg name="FIELD_NOTES">YCFgVXBkYXRlIEZJTkFOQ0lBTF9TVEFURU1FTlRfU0VOVF9EQVRFIG9uIGxpbmtlZCBpc3N1ZXM=</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="671" name="Genera Offerta per Materiali da Preventivare" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">20119</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_NOTES">YCFgT1A6IEdlbmVyYXppb25lIHRpY2tldCBkaSBwcmV2ZW50aXZhemlvbmUgLSBzb2xvIHNlIGNpIHNvbm8gT1BfUkVRVUlSRURfTUFURVJJQUxTIGUgc2UgT1BBQV9RVU9URV9USUNLRVQgPSBudWxs</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KY2ZWYWx1ZXNbcHJvcGVydGllc1snY2YucmVxdWlyZWRNYXRlcmlhbHMnXV0gIT0gbnVsbCAmJiBjZlZhbHVlc1twcm9wZXJ0aWVzWydjZi5vZmZlckxpbmtlZElzc3VlJ11dID09IG51bGx8fHw=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="targetIssueTypeDefinedByCfSelection"></arg>
                  <arg name="issueTypeId">13001</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">SAME</arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="transitionAttachmentsOperation">copy</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="targetProjectSelectedCustomField"></arg>
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:INWARD</arg>
                  <arg name="field.enablingCustomFieldId">customfield_22609</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="subFunctions">[{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22609&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22658&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22600&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22600&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22822&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22822&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22601&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22601&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22602&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22602&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22813&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22813&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23235&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23235&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22651&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22651&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22700&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22700&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;priority&quot;,&quot;destinationFieldId&quot;:&quot;priority&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22814&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22814&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23203&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23203&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23401&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23237&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_21909&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21909&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22649&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22629&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Yes&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22681&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23401&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21908&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22716&quot;,&quot;destinationFieldId&quot;:&quot;summary&quot;}}]</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">4fd7d272cffa1401b740b9188cdaeaaf5185c323</arg>
                  <arg name="FIELD_NOTES">YCFgRlNNOiBVcGRhdGUgc3RhdHVzIG9uIGp1c3QgY3JlYXRlZCBSZXBhaXIgUXVvdGF0aW9uIGlzc3Vl</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZQppbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb24KaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3IKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXIKaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGdyb292eS5qc29uLkpzb25CdWlsZGVyCmltcG9ydCBncm9vdnkuanNvbi5Kc29uU2x1cnBlcgppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXIKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb25maWcudXRpbC5KaXJhSG9tZQppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmV2ZW50LnR5cGUuRXZlbnREaXNwYXRjaE9wdGlvbgppbXBvcnQgamF2YS50ZXh0LlNpbXBsZURhdGVGb3JtYXQKaW1wb3J0IGphdmEudGV4dC5QYXJzZUV4Y2VwdGlvbgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbmZpZy5wcm9wZXJ0aWVzLkFQS2V5cwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuTGlua0NvbGxlY3Rpb25JbXBsOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuSXNzdWVMaW5rOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk1vZGlmaWVkVmFsdWUKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS51dGlsLkRlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlcgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmluZGV4Lklzc3VlSW5kZXhpbmdTZXJ2aWNlCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbAoKUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKQpGaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKQpwcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0gewoJcHJvcGVydGllcy5sb2FkKGl0KQp9CmRlZiBDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQpsb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRykKSXNzdWVJbmRleGluZ1NlcnZpY2UgCWlzc3VlSW5kZXhpbmdTZXJ2aWNlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q29tcG9uZW50KElzc3VlSW5kZXhpbmdTZXJ2aWNlKQoKLypTY3JpcHQgVmFyaWFibGVzKi8KLy9QZXIgUG9zdCBGdW5jdGlvbgppc3N1ZSA9IGlzc3VlCi8vUGVyIHRlc3QgZGEgY29uc29sZQovL0lzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKQovL2lzc3VlID0gaXNzdWVNYW5hZ2VyLmdldElzc3VlQnlLZXlJZ25vcmVDYXNlKCJPUFVULTI1NyIpCmxvZy5kZWJ1ZyAiSXNzdWU6ICIgKyBpc3N1ZQpkZWYgZm91bmQ9ZmFsc2UKZGVmIGxpbmtlZElzc3VlCmRlZiBpc3N1ZVNlcnZpY2UgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZVNlcnZpY2UoKQoKTGlzdDxJc3N1ZUxpbms+IGFsbEluSXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldElud2FyZExpbmtzKGlzc3VlLmdldElkKCkpOwpsb2cuZGVidWcgImFsbEluSXNzdWVMaW5rOiAiICsgYWxsSW5Jc3N1ZUxpbmsKZm9yIChJdGVyYXRvcjxJc3N1ZUxpbms+IG91dEl0ZXJhdG9yID0gYWxsSW5Jc3N1ZUxpbmsuaXRlcmF0b3IoKTsgb3V0SXRlcmF0b3IuaGFzTmV4dCgpOykgewogICAgSXNzdWVMaW5rIGlzc3VlTGluayA9IChJc3N1ZUxpbmspIG91dEl0ZXJhdG9yLm5leHQoKTsKICAgIGRlZiBsaW5rZWRJc3N1ZVRlbXAgPSBpc3N1ZUxpbmsuZ2V0U291cmNlT2JqZWN0KCkKICAgIFN0cmluZyB0eXBlID0gbGlua2VkSXNzdWVUZW1wLmdldElzc3VlVHlwZSgpLmdldE5hbWUoKTsKCiAgICBsb2cuZGVidWcoaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpKSAKICAgIAogICAgaWYoaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNUcmlnZ2VyJ10udG9TdHJpbmcoKSkpewogICAgICAgIGZvdW5kPXRydWUKICAgICAgICBsaW5rZWRJc3N1ZT1saW5rZWRJc3N1ZVRlbXAKICAgIH0KfQpsb2cuZGVidWcgImZvdW5kOiAiICsgZm91bmQKCmlmKGZvdW5kKXsKCWRlZiBkZXN0U3RhdHVzT2JqZWN0ID0gbGlua2VkSXNzdWUuZ2V0U3RhdHVzT2JqZWN0KCkKICAgIGxvZy5kZWJ1ZyAiZGVzdFN0YXR1c09iamVjdDogIiArIGRlc3RTdGF0dXNPYmplY3QKICAgIGxvZy5kZWJ1ZyAibGlua2VkSXNzdWU6ICIgKyBsaW5rZWRJc3N1ZQogICAgZGVmIHVzZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRKaXJhQXV0aGVudGljYXRpb25Db250ZXh0KCkuZ2V0TG9nZ2VkSW5Vc2VyKCkKCS8vIElzIHRoZSBzdGF0dXMgb2YgdGhlIGxpbmtlZCBpc3N1ZSAiSW5zdGFsbGluZyIgPwogICAgCiAgICBkZWYgY3VzdG9tRmllbGRNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuY3VzdG9tRmllbGRNYW5hZ2VyCiAgICBkZWYgb2ZmZXJJc3N1ZUZpZWxkID0gY3VzdG9tRmllbGRNYW5hZ2VyLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi5vZmZlckxpbmtlZElzc3VlJ10udG9TdHJpbmcoKSkuZmlyc3QoKQogICAgZGVmIG1haW50ZW5hbmNlSXNzdWVGaWVsZCA9IGN1c3RvbUZpZWxkTWFuYWdlci5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YubWFpbnRlbmFuY2VMaW5rZWRJc3N1ZSddID8gcHJvcGVydGllc1snY2YubWFpbnRlbmFuY2VMaW5rZWRJc3N1ZSddLnRvU3RyaW5nKCkgOiAiT1BfTUFJTlRFTkFOQ0VfTElOS0VEX0lTU1VFIikuZmlyc3QoKQogICAgZGVmIG9mZmVySXNzdWVCb29sRmllbGQgPSBjdXN0b21GaWVsZE1hbmFnZXIuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLm9mZmVyVGt0J10udG9TdHJpbmcoKSkuZmlyc3QoKQogICAgCiAgICAvL1NldCBPUEFBX09GRkVSX1RLVD1ZZXMgb24ganVzdCBjcmVhdGVkIGxpbmtlZElzc3VlCiAgICBkZWYgY3VycmVudFVzZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRKaXJhQXV0aGVudGljYXRpb25Db250ZXh0KCkuZ2V0TG9nZ2VkSW5Vc2VyKCkKICAgIGRlZiBtaSA9IChNdXRhYmxlSXNzdWUpIGxpbmtlZElzc3VlCgogICAgZGVmIGZpZWxkQ29uZmlnID0gb2ZmZXJJc3N1ZUJvb2xGaWVsZC5nZXRSZWxldmFudENvbmZpZyhsaW5rZWRJc3N1ZSkKICAgIGxvZy53YXJuICJmaWVsZENvbmZpZzogIiArIGZpZWxkQ29uZmlnCiAgICBkZWYgY2ZOZXdWYWx1ZSA9IENvbXBvbmVudEFjY2Vzc29yLm9wdGlvbnNNYW5hZ2VyLmdldE9wdGlvbnMoZmllbGRDb25maWcpPy5maW5kIHsgaXQudG9TdHJpbmcoKSA9PSAiWWVzIiB9CiAgICBvZmZlcklzc3VlQm9vbEZpZWxkLnVwZGF0ZVZhbHVlKG51bGwsIGxpbmtlZElzc3VlLCBuZXcgTW9kaWZpZWRWYWx1ZShsaW5rZWRJc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKG9mZmVySXNzdWVCb29sRmllbGQpLCBjZk5ld1ZhbHVlKSwgbmV3IERlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlcigpKQoJbWFpbnRlbmFuY2VJc3N1ZUZpZWxkLnVwZGF0ZVZhbHVlKG51bGwsIGxpbmtlZElzc3VlLCBuZXcgTW9kaWZpZWRWYWx1ZShsaW5rZWRJc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKG1haW50ZW5hbmNlSXNzdWVGaWVsZCksIGlzc3VlLmtleS50b1N0cmluZygpKSwgbmV3IERlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlcigpKQogICAgCiAgICBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKS51cGRhdGVJc3N1ZShjdXJyZW50VXNlciwgbWksIEV2ZW50RGlzcGF0Y2hPcHRpb24uRE9fTk9UX0RJU1BBVENILCBmYWxzZSk7CiAgICBpc3N1ZUluZGV4aW5nU2VydmljZS5yZUluZGV4KGxpbmtlZElzc3VlKSAgICAKICAgIAogICAgbG9nLmRlYnVnICJvZmZlcklzc3VlRmllbGQ6ICIgKyBvZmZlcklzc3VlRmllbGQKICAgIGxvZy5kZWJ1ZyAibGlua2VkSXNzdWU6ICIgKyBsaW5rZWRJc3N1ZQogICAgb2ZmZXJJc3N1ZUZpZWxkLnVwZGF0ZVZhbHVlKG51bGwsIGlzc3VlLCBuZXcgTW9kaWZpZWRWYWx1ZShpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKG9mZmVySXNzdWVGaWVsZCksIGxpbmtlZElzc3VlLmtleS50b1N0cmluZygpKSwgbmV3IERlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlcigpKQogICAgbG9nLmRlYnVnICJ1cGRhdGVkOiAiICsgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShvZmZlcklzc3VlRmllbGQpCiAgICAKICAgIGlmIChkZXN0U3RhdHVzT2JqZWN0Lm5hbWUgPT0gcHJvcGVydGllc1snd2Yub3BlbiddLnRvU3RyaW5nKCkpIHsKICAgICAgICAvLyBQcmVwYXJlIG91ciBpbnB1dCBmb3IgdGhlIHRyYW5zaXRpb24KICAgICAgICBkZWYgaXNzdWVJbnB1dFBhcmFtZXRlcnMgPSBpc3N1ZVNlcnZpY2UubmV3SXNzdWVJbnB1dFBhcmFtZXRlcnMoKQogICAgICAgIGlzc3VlSW5wdXRQYXJhbWV0ZXJzLndpdGggewogICAgICAgICAgICBzZXRTa2lwU2NyZWVuQ2hlY2sodHJ1ZSkKICAgICAgICB9CiAgICAgICAgLy8gVmFsaWRhdGUgdHJhbnNpdGlvbmluZyB0aGUgbGlua2VkIGlzc3VlIHRvICJTaWducyBOZWVkZWQiCiAgICAgICAgZGVmIHZhbGlkYXRpb25SZXN1bHQgPSBpc3N1ZVNlcnZpY2UudmFsaWRhdGVUcmFuc2l0aW9uKHVzZXIsIGxpbmtlZElzc3VlLmlkLCAocHJvcGVydGllc1snd2YudHIuYXNrUXVvdGUnXSA/IHByb3BlcnRpZXNbJ3dmLnRyLmFza1F1b3RlJ10udG9JbnRlZ2VyKCkgOiAxMSksIGlzc3VlSW5wdXRQYXJhbWV0ZXJzKQogICAgICAgIGlmICh2YWxpZGF0aW9uUmVzdWx0LmlzVmFsaWQoKSkgewogICAgICAgICAgICAvLyBQZXJmb3JtIHRoZSB0cmFuc2l0aW9uCiAgICAgICAgICAgIGRlZiBpc3N1ZVJlc3VsdCA9IGlzc3VlU2VydmljZS50cmFuc2l0aW9uKHVzZXIsIHZhbGlkYXRpb25SZXN1bHQpCiAgICAgICAgICAgIGlmICghIGlzc3VlUmVzdWx0LmlzVmFsaWQoKSkgewogICAgICAgICAgICAgICAgbG9nLmRlYnVnKCJGYWlsZWQgdG8gdHJhbnNpdGlvbiB0YXNrICR7ZGVzdElzc3VlLmtleX0sIGVycm9yczogJHtpc3N1ZVJlc3VsdC5lcnJvckNvbGxlY3Rpb259IikKICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICBsb2cuZGVidWcoIlRyYW5zYXppb25lIGZhdHRhIikKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGxvZy5kZWJ1ZygiQ291bGQgbm90IHRyYW5zaXRpb24gdGFzayAke2Rlc3RJc3N1ZS5rZXl9LCBlcnJvcnM6ICR7dmFsaWRhdGlvblJlc3VsdC5lcnJvckNvbGxlY3Rpb259IikKICAgICAgICB9CiAgICB9CiAgICAKfQ==</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23401</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="791" name="Genera Rapporto di Intervento FAAC" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19910</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">da6b0975-6a4b-46f7-a46f-15e624ccc794</arg>
                <arg name="FIELD_NOTES">YCFgQXZhaWxhYmxlIG9ubHkgaWYgbm8gT05TSVRFIFJFUE9SVCBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBleGlzdHMgb24gdGhlIHRpY2tldA==</arg>
                <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxubG9nLmRlYnVnIFwiT25TaXRlIFJlcG9ydCBwZXIgaXNzdWU6IFwiICsgaXNzdWUua2V5XG4vKiBSRVNUIEFQSSBwZXIgR2VuZXJhemlvbmUgQWxsZWdhdG8gUmFwcG9ydG8gZGkgSW50ZXJ2ZW50byAqL1xucmVxdWVzdE1ldGhvZCA9IFwiUFVUXCI7XG4vKlNjcmlwdCBWYXJpYWJsZXMqL1xuLy9QZXIgdGVzdCBkYSBjb25zb2xlXG4vL0lzc3VlIGlzc3VlID0gaXNzdWVNYW5hZ2VyLmdldElzc3VlQnlLZXlJZ25vcmVDYXNlKFwiT1BVVC0xNDA2MlwiKVxuXG5pbnQgT1BBQSA9IHByb3BlcnRpZXNbJ2lzY2hlbWEuYWEuaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5pbnQgREJPID0gcHJvcGVydGllc1snaXNjaGVtYS5kYm8uaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5cbi8qUmltb3ppb25lIGFsbGVnYXRvIHJhcHBvcnRvIGRpIGludGVydmVudG8gYXBwZW5hIGNyZWF0byovXG4vKiBHZXQgSW5zaWdodCBJUUwgRmFjYWRlIGZyb20gcGx1Z2luIGFjY2Vzc29yICovXG5DbGFzcyBpcWxGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5JUUxGYWNhZGVcIik7IFxuZGVmIGlxbEZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShpcWxGYWNhZGVDbGFzcyk7XG5cbi8qIEdldCBJbnNpZ2h0IE9iamVjdCBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdEZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdEZhY2FkZVwiKTtcbmRlZiBvYmplY3RGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0RmFjYWRlQ2xhc3MpO1xuXG4vKiBHZXQgSW5zaWdodCBPYmplY3QgVHlwZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdFR5cGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlRmFjYWRlXCIpO1xuZGVmIG9iamVjdFR5cGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUZhY2FkZUNsYXNzKTtcblxuLyogR2V0IEluc2lnaHQgT2JqZWN0IEF0dHJpYnV0ZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlXCIpO1xuZGVmIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZUNsYXNzKTtcblxuQ2xhc3Mgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LnNlcnZpY2VzLm1vZGVsLmZhY3RvcnkuT2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlcIik7XG5kZWYgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnkgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyk7XG5cbi8qIFNwZWNpZnkgdGhlIHNjaGVtYSBpZCBhcyB3ZWxsIGFzIHRoZSBJUUwgdGhhdCB3aWxsIGZldGNoIG9iamVjdHMuIEluIHRoaXMgY2FzZSBhbGwgb2JqZWN0cyB3aXRoIE5hbWUgbWF0Y2hpbmcgdGhlIHZhbHVlQ0YsIGJlIHN1cmUgdG8gaW5jbHVkZSBcIiBhcm91bmQgdmFsdWUgKi9cbmRlZiBvYmplY3RzID0gaXFsRmFjYWRlLmZpbmRPYmplY3RzQnlJUUxBbmRTY2hlbWEoREJPLCBcIlxcXCJcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmNhdGVnb3J5UmVmJ10udG9TdHJpbmcoKSArIFwiXFxcIi5OYW1lIExJS0UgXFxcIlJhcHBvcnRvIGRpIGludGVydmVudG9cXFwiIEFORCBBVVRPX0dFTkVSQVRFRD10cnVlIEFORCBcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmRlbGV0ZWQnXS50b1N0cmluZygpICsgXCIhPXRydWUgQU5EIG9iamVjdCBIQVZJTkcgY29ubmVjdGVkVGlja2V0cyhrZXkgPSBcIiArIGlzc3VlLmtleS50b1N0cmluZygpICsgXCIpXCIpOyAvLyBTZWUgdGhlIGNvbXBsZXRlIGxpc3Qgb2YgcG9zc2libGUgSVFMIG9uIHRoZSBJbnNpZ2h0IFF1ZXJ5IExhbmd1YWdlIGRvY3VtZW50YXRpb24gcGFnZVxuLyogSWYgdGhpcyBpcyBhIG1hbmRhdG9yeSBmaWVsZCB5b3Ugc2hvdWxkIGJlIGFibGUgdG8gZG8gdGhpczogKi9cbmxvZy5kZWJ1ZyBcIklRTDogXCIgKyBcIlxcXCJcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmNhdGVnb3J5UmVmJ10udG9TdHJpbmcoKSArIFwiXFxcIi5OYW1lIExJS0UgXFxcIlJhcHBvcnRvIGRpIGludGVydmVudG9cXFwiIEFORCBcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmRlbGV0ZWQnXS50b1N0cmluZygpICsgXCIhPXRydWUgQU5EIG9iamVjdCBIQVZJTkcgY29ubmVjdGVkVGlja2V0cyhrZXkgPSBcIiArIGlzc3VlLmtleS50b1N0cmluZygpICsgXCIpXCJcblxuLyohIURhIHJpbXVvdmVyZSBhcHBlbmEgcmlzb2x0aSBpIGJ1ZyEhKi9cbmlmKChvYmplY3RzID09IG51bGwgfHwgb2JqZWN0cy5zaXplPT0wKSAvKiYmICFpc3N1ZS5nZXRJc3N1ZVR5cGUoKS5uYW1lLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2l0LnBsYW5uZWRNYWludGVuYW5jZSddKSovKXtcbiAgICBwYXNzZXNDb25kaXRpb24gPSB0cnVlXG59ZWxzZXtcbiAgICBwYXNzZXNDb25kaXRpb24gPSBmYWxzZVxufVxuIiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.CustomScriptCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">c83eed7c-052e-4c06-ac5e-c2925515cc02</arg>
                <arg name="FIELD_NOTES">YCFgTWFpbnRlbmFuY2UgVGlja2V0IE9SIFBNIFRpY2tldA==</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnTWFpbnRlbmFuY2UgVGlja2V0JyB8fCBpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnUGxhbm5lZCBNYWludGVuYW5jZSBUaWNrZXQnIiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">9fe0fa5191d4b6a91ba7485380ff8d0a9fda8fe7</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBPUCBnZW5lcmF6aW9uZSBSYXBwb3J0byBkaSBpbnRlcnZlbnRv</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxubG9nLmRlYnVnIFwiT25TaXRlIFJlcG9ydCBwZXIgaXNzdWU6IFwiICsgaXNzdWUua2V5XG4vKiBSRVNUIEFQSSBwZXIgR2VuZXJhemlvbmUgQWxsZWdhdG8gUmFwcG9ydG8gZGkgSW50ZXJ2ZW50byAqL1xucmVxdWVzdE1ldGhvZCA9IFwiUFVUXCI7XG4vKlNjcmlwdCBWYXJpYWJsZXMqL1xuLy9QZXIgdGVzdCBkYSBjb25zb2xlXG4vL0lzc3VlIGlzc3VlID0gaXNzdWVNYW5hZ2VyLmdldElzc3VlQnlLZXlJZ25vcmVDYXNlKFwiT1BVVC0xNDA2MlwiKVxuXG5pbnQgT1BBQSA9IHByb3BlcnRpZXNbJ2lzY2hlbWEuYWEuaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5pbnQgREJPID0gcHJvcGVydGllc1snaXNjaGVtYS5kYm8uaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5cbi8qUmltb3ppb25lIGFsbGVnYXRvIHJhcHBvcnRvIGRpIGludGVydmVudG8gYXBwZW5hIGNyZWF0byovXG4vKiBHZXQgSW5zaWdodCBJUUwgRmFjYWRlIGZyb20gcGx1Z2luIGFjY2Vzc29yICovXG5DbGFzcyBpcWxGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5JUUxGYWNhZGVcIik7IFxuZGVmIGlxbEZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShpcWxGYWNhZGVDbGFzcyk7XG5cbi8qIEdldCBJbnNpZ2h0IE9iamVjdCBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdEZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdEZhY2FkZVwiKTtcbmRlZiBvYmplY3RGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0RmFjYWRlQ2xhc3MpO1xuXG4vKiBHZXQgSW5zaWdodCBPYmplY3QgVHlwZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdFR5cGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlRmFjYWRlXCIpO1xuZGVmIG9iamVjdFR5cGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUZhY2FkZUNsYXNzKTtcblxuLyogR2V0IEluc2lnaHQgT2JqZWN0IEF0dHJpYnV0ZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlXCIpO1xuZGVmIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZUNsYXNzKTtcblxuQ2xhc3Mgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LnNlcnZpY2VzLm1vZGVsLmZhY3RvcnkuT2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlcIik7XG5kZWYgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnkgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyk7XG5cbi8qIFNwZWNpZnkgdGhlIHNjaGVtYSBpZCBhcyB3ZWxsIGFzIHRoZSBJUUwgdGhhdCB3aWxsIGZldGNoIG9iamVjdHMuIEluIHRoaXMgY2FzZSBhbGwgb2JqZWN0cyB3aXRoIE5hbWUgbWF0Y2hpbmcgdGhlIHZhbHVlQ0YsIGJlIHN1cmUgdG8gaW5jbHVkZSBcIiBhcm91bmQgdmFsdWUgKi9cbmRlZiBvYmplY3RzID0gaXFsRmFjYWRlLmZpbmRPYmplY3RzQnlJUUxBbmRTY2hlbWEoREJPLCBcIlxcXCJcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmNhdGVnb3J5UmVmJ10udG9TdHJpbmcoKSArIFwiXFxcIi5OYW1lIExJS0UgXFxcIlJhcHBvcnRvIGRpIGludGVydmVudG9cXFwiIEFORCBBVVRPX0dFTkVSQVRFRCA9IHRydWUgQU5EIFwiICsgcHJvcGVydGllc1snaW9iai5hdHRhY2htZW50Q2F0ZWdvcnkuZGVsZXRlZCddLnRvU3RyaW5nKCkgKyBcIiE9dHJ1ZSBBTkQgb2JqZWN0IEhBVklORyBjb25uZWN0ZWRUaWNrZXRzKGtleSA9IFwiICsgaXNzdWUua2V5LnRvU3RyaW5nKCkgKyBcIilcIik7IC8vIFNlZSB0aGUgY29tcGxldGUgbGlzdCBvZiBwb3NzaWJsZSBJUUwgb24gdGhlIEluc2lnaHQgUXVlcnkgTGFuZ3VhZ2UgZG9jdW1lbnRhdGlvbiBwYWdlXG4vKiBJZiB0aGlzIGlzIGEgbWFuZGF0b3J5IGZpZWxkIHlvdSBzaG91bGQgYmUgYWJsZSB0byBkbyB0aGlzOiAqL1xubG9nLmRlYnVnIFwiSVFMOiBcIiArIFwiXFxcIlwiICsgcHJvcGVydGllc1snaW9iai5hdHRhY2htZW50Q2F0ZWdvcnkuY2F0ZWdvcnlSZWYnXS50b1N0cmluZygpICsgXCJcXFwiLk5hbWUgTElLRSBcXFwiUmFwcG9ydG8gZGkgaW50ZXJ2ZW50b1xcXCIgQU5EIFwiICsgcHJvcGVydGllc1snaW9iai5hdHRhY2htZW50Q2F0ZWdvcnkuZGVsZXRlZCddLnRvU3RyaW5nKCkgKyBcIiE9dHJ1ZSBBTkQgb2JqZWN0IEhBVklORyBjb25uZWN0ZWRUaWNrZXRzKGtleSA9IFwiICsgaXNzdWUua2V5LnRvU3RyaW5nKCkgKyBcIilcIlxuXG4vKiEhRGEgcmltdW92ZXJlIGFwcGVuYSByaXNvbHRpIGkgYnVnISEqL1xuaWYoKG9iamVjdHMgPT0gbnVsbCB8fCBvYmplY3RzLnNpemU9PTApIC8qJiYgIWlzc3VlLmdldElzc3VlVHlwZSgpLm5hbWUudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snaXQucGxhbm5lZE1haW50ZW5hbmNlJ10pKi8pe1xuICAgIGJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9hdXRvbWF0aW9uL0FBL3RpY2tldC9cIiArIGlzc3VlLmtleS50b1N0cmluZygpICsgXCIvYXR0YWNobWVudC9vbnNpdGVcIlxuICAgIGxvZy5kZWJ1ZyBcImJhc2VVcmw6IFwiICsgYmFzZVVSTFxuXG4gICAgVVJMIHVybFxuICAgIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcbiAgICBIdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdE1ldGhvZChyZXF1ZXN0TWV0aG9kKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJBY2NlcHRcIiwgXCIqLypcIik7XG4gICAgY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbiAgICBjb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5jb25uZWN0KCk7XG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcblxuICAgIGRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5cbiAgICBpZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDBcIikpe1xuICAgICAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIkdFTkVSQVRFLU9OU0lURVJFUE9SVFwiKVxuICAgICAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyBcIiBcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChlcnJvck1zZ3MpXG4gICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycylcblxuICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcbiAgICB9XG5cbn1cbiIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeQppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lcgppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGwKClByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKCkKRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJykKcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHsKCXByb3BlcnRpZXMubG9hZChpdCkKfQpDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQpsb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRykKCklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTsKQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpOwpkZWYgcmVxdWVzdE1ldGhvZApkZWYgYmFzZVVSTApsb2cuZGVidWcgIk9uU2l0ZSBSZXBvcnQgcGVyIGlzc3VlOiAiICsgaXNzdWUua2V5Ci8qIFJFU1QgQVBJIHBlciBHZW5lcmF6aW9uZSBBbGxlZ2F0byBSYXBwb3J0byBkaSBJbnRlcnZlbnRvICovCnJlcXVlc3RNZXRob2QgPSAiUFVUIjsKCmJhc2VVUkwgPSAiaHR0cDovLyIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArICIvb3AvcmVzdC9hdXRvbWF0aW9uL0FBL3RpY2tldC8iICsgaXNzdWUua2V5LnRvU3RyaW5nKCkgKyAiL2F0dGFjaG1lbnQvb25zaXRlIgpsb2cuZGVidWcgImJhc2VVcmw6ICIgKyBiYXNlVVJMCgpVUkwgdXJsCnVybCA9IG5ldyBVUkwoYmFzZVVSTCkKSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eSgiQ29udGVudC1UeXBlIiwgImFwcGxpY2F0aW9uL2pzb24iKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoIkFjY2VwdCIsICIqLyoiKTsKY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTsKY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpOwpjb25uZWN0aW9uLmNvbm5lY3QoKTsKbG9nLmRlYnVnICJSZXNwb25zZUNvZGU6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkKbG9nLmRlYnVnICJSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKCmRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpCmRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKQpkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpCgppZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoIjIwMCIpKXsKICAgIGxvZy5kZWJ1ZyAidXJsOiAiICsgdXJsCiAgICBsb2cuZGVidWcgIlJlc3BvbnNlQ29kZToiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKQogICAgbG9nLmRlYnVnICJSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKICAgIGVMaXN0RXJyb3JzLmFkZCgiRSIpCiAgICBlTGlzdEVycm9ycy5hZGQoIkdFTkVSQVRFLU9OU0lURVJFUE9SVCIpCiAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyAiICIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpKQogICAgZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncykKICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycykKCiAgICBvdXRwdXQuYWRkKGVMaXN0KQogICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigneyJFIjoiJyArIG91dHB1dC50b1N0cmluZygpICsgJyJ9JykKICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigiRSIsIG91dHB1dC50b1N0cmluZygpKQp9Cg==</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">45747608-2046-4623-a20b-8410265ef0c3</arg>
              <arg name="FIELD_NOTES">YCFgUkVTVCBBUEk6IEdlbmVyYSByYXBwb3J0byBkaSBpbnRlcnZlbnRvIGNvbiB0ZW1wbGF0ZQ==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="disabled">false</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">442a396a-d2f9-4282-99b9-1de0b8f0afd4</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIGxpbmtlZFRpY2tldHMgJiBGYXN0LVRyYW5zYWN0IHRoZW0=</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT"></arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22693</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="801" name="Genera Offerta per Sostituzione Impianto" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">20119</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">342d56e7-53b3-4e78-aaa8-c68422a9773f</arg>
                <arg name="FIELD_NOTES">YCFgTk9UIFBNIFRpY2tldA==</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSAhPSAnUGxhbm5lZCBNYWludGVuYW5jZSBUaWNrZXQnIiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="targetIssueTypeDefinedByCfSelection"></arg>
                  <arg name="issueTypeId">12301</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">SAME</arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="transitionAttachmentsOperation">copy</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="targetProjectSelectedCustomField"></arg>
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:INWARD</arg>
                  <arg name="field.enablingCustomFieldId"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="subFunctions">[{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22609&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22609&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22600&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22600&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22822&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22822&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22601&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22601&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22602&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22602&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22813&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22813&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23235&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23235&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22651&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22651&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22700&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22700&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;priority&quot;,&quot;destinationFieldId&quot;:&quot;priority&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22814&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22814&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23203&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23203&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23400&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23400&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_21909&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21909&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22649&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22629&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Yes&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22681&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Nuova Installazione&quot;,&quot;destinationFieldId&quot;:&quot;summary&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23400&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21908&quot;}}]</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">4fd7d272cffa1401b740b9188cdaeaaf5185c323</arg>
                  <arg name="FIELD_NOTES">YCFgRlNNOiBVcGRhdGUgc3RhdHVzIG9uIGp1c3QgY3JlYXRlZCBOZXcgSW5zdGFsbGF0aW9uIFF1b3RhdGlvbiBpc3N1ZQ==</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZQppbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb24KaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3IKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXIKaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGdyb292eS5qc29uLkpzb25CdWlsZGVyCmltcG9ydCBncm9vdnkuanNvbi5Kc29uU2x1cnBlcgppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXIKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb25maWcudXRpbC5KaXJhSG9tZQppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmV2ZW50LnR5cGUuRXZlbnREaXNwYXRjaE9wdGlvbgppbXBvcnQgamF2YS50ZXh0LlNpbXBsZURhdGVGb3JtYXQKaW1wb3J0IGphdmEudGV4dC5QYXJzZUV4Y2VwdGlvbgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbmZpZy5wcm9wZXJ0aWVzLkFQS2V5cwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuTGlua0NvbGxlY3Rpb25JbXBsOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuSXNzdWVMaW5rOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk1vZGlmaWVkVmFsdWUKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS51dGlsLkRlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlcgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmluZGV4Lklzc3VlSW5kZXhpbmdTZXJ2aWNlCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbAoKUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKQpGaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKQpwcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0gewoJcHJvcGVydGllcy5sb2FkKGl0KQp9CmRlZiBDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQpsb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRykKSXNzdWVJbmRleGluZ1NlcnZpY2UgCWlzc3VlSW5kZXhpbmdTZXJ2aWNlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q29tcG9uZW50KElzc3VlSW5kZXhpbmdTZXJ2aWNlKQoKLypTY3JpcHQgVmFyaWFibGVzKi8KLy9QZXIgUG9zdCBGdW5jdGlvbgppc3N1ZSA9IGlzc3VlCi8vUGVyIHRlc3QgZGEgY29uc29sZQovL0lzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKQovL2lzc3VlID0gaXNzdWVNYW5hZ2VyLmdldElzc3VlQnlLZXlJZ25vcmVDYXNlKCJPUFVULTI1NyIpCmxvZy5kZWJ1ZyAiSXNzdWU6ICIgKyBpc3N1ZQpkZWYgZm91bmQ9ZmFsc2UKZGVmIGxpbmtlZElzc3VlCmRlZiBpc3N1ZVNlcnZpY2UgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZVNlcnZpY2UoKQoKTGlzdDxJc3N1ZUxpbms+IGFsbEluSXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldElud2FyZExpbmtzKGlzc3VlLmdldElkKCkpOwpsb2cuZGVidWcgImFsbEluSXNzdWVMaW5rOiAiICsgYWxsSW5Jc3N1ZUxpbmsKZm9yIChJdGVyYXRvcjxJc3N1ZUxpbms+IG91dEl0ZXJhdG9yID0gYWxsSW5Jc3N1ZUxpbmsuaXRlcmF0b3IoKTsgb3V0SXRlcmF0b3IuaGFzTmV4dCgpOykgewogICAgSXNzdWVMaW5rIGlzc3VlTGluayA9IChJc3N1ZUxpbmspIG91dEl0ZXJhdG9yLm5leHQoKTsKICAgIGRlZiBsaW5rZWRJc3N1ZVRlbXAgPSBpc3N1ZUxpbmsuZ2V0U291cmNlT2JqZWN0KCkKICAgIFN0cmluZyB0eXBlID0gbGlua2VkSXNzdWVUZW1wLmdldElzc3VlVHlwZSgpLmdldE5hbWUoKTsKCiAgICBsb2cuZGVidWcoaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpKSAKICAgIAogICAgaWYoaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNUcmlnZ2VyJ10udG9TdHJpbmcoKSkpewogICAgICAgIGZvdW5kPXRydWUKICAgICAgICBsaW5rZWRJc3N1ZT1saW5rZWRJc3N1ZVRlbXAKICAgIH0KfQpsb2cuZGVidWcgImZvdW5kOiAiICsgZm91bmQKCmlmKGZvdW5kKXsKCWRlZiBkZXN0U3RhdHVzT2JqZWN0ID0gbGlua2VkSXNzdWUuZ2V0U3RhdHVzT2JqZWN0KCkKICAgIGxvZy5kZWJ1ZyAiZGVzdFN0YXR1c09iamVjdDogIiArIGRlc3RTdGF0dXNPYmplY3QKICAgIGxvZy5kZWJ1ZyAibGlua2VkSXNzdWU6ICIgKyBsaW5rZWRJc3N1ZQogICAgZGVmIHVzZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRKaXJhQXV0aGVudGljYXRpb25Db250ZXh0KCkuZ2V0TG9nZ2VkSW5Vc2VyKCkKCS8vIElzIHRoZSBzdGF0dXMgb2YgdGhlIGxpbmtlZCBpc3N1ZSAiSW5zdGFsbGluZyIgPwogICAgCiAgICBkZWYgY3VzdG9tRmllbGRNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuY3VzdG9tRmllbGRNYW5hZ2VyCiAgICBkZWYgb2ZmZXJJc3N1ZUZpZWxkID0gY3VzdG9tRmllbGRNYW5hZ2VyLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi5vZmZlckxpbmtlZElzc3VlJ10udG9TdHJpbmcoKSkuZmlyc3QoKQogICAgZGVmIG1haW50ZW5hbmNlSXNzdWVGaWVsZCA9IGN1c3RvbUZpZWxkTWFuYWdlci5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YubWFpbnRlbmFuY2VMaW5rZWRJc3N1ZSddID8gcHJvcGVydGllc1snY2YubWFpbnRlbmFuY2VMaW5rZWRJc3N1ZSddLnRvU3RyaW5nKCkgOiAiT1BfTUFJTlRFTkFOQ0VfTElOS0VEX0lTU1VFIikuZmlyc3QoKQogICAgZGVmIG9mZmVySXNzdWVCb29sRmllbGQgPSBjdXN0b21GaWVsZE1hbmFnZXIuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLm9mZmVyVGt0J10udG9TdHJpbmcoKSkuZmlyc3QoKQogICAgCiAgICAvL1NldCBPUEFBX09GRkVSX1RLVD1ZZXMgb24ganVzdCBjcmVhdGVkIGxpbmtlZElzc3VlCiAgICBkZWYgY3VycmVudFVzZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRKaXJhQXV0aGVudGljYXRpb25Db250ZXh0KCkuZ2V0TG9nZ2VkSW5Vc2VyKCkKICAgIGRlZiBtaSA9IChNdXRhYmxlSXNzdWUpIGxpbmtlZElzc3VlCgogICAgZGVmIGZpZWxkQ29uZmlnID0gb2ZmZXJJc3N1ZUJvb2xGaWVsZC5nZXRSZWxldmFudENvbmZpZyhsaW5rZWRJc3N1ZSkKICAgIGxvZy53YXJuICJmaWVsZENvbmZpZzogIiArIGZpZWxkQ29uZmlnCiAgICBkZWYgY2ZOZXdWYWx1ZSA9IENvbXBvbmVudEFjY2Vzc29yLm9wdGlvbnNNYW5hZ2VyLmdldE9wdGlvbnMoZmllbGRDb25maWcpPy5maW5kIHsgaXQudG9TdHJpbmcoKSA9PSAiWWVzIiB9CiAgICBvZmZlcklzc3VlQm9vbEZpZWxkLnVwZGF0ZVZhbHVlKG51bGwsIGxpbmtlZElzc3VlLCBuZXcgTW9kaWZpZWRWYWx1ZShsaW5rZWRJc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKG9mZmVySXNzdWVCb29sRmllbGQpLCBjZk5ld1ZhbHVlKSwgbmV3IERlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlcigpKQoJbWFpbnRlbmFuY2VJc3N1ZUZpZWxkLnVwZGF0ZVZhbHVlKG51bGwsIGxpbmtlZElzc3VlLCBuZXcgTW9kaWZpZWRWYWx1ZShsaW5rZWRJc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKG1haW50ZW5hbmNlSXNzdWVGaWVsZCksIGlzc3VlLmtleS50b1N0cmluZygpKSwgbmV3IERlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlcigpKQogICAgCiAgICBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKS51cGRhdGVJc3N1ZShjdXJyZW50VXNlciwgbWksIEV2ZW50RGlzcGF0Y2hPcHRpb24uRE9fTk9UX0RJU1BBVENILCBmYWxzZSk7CiAgICBpc3N1ZUluZGV4aW5nU2VydmljZS5yZUluZGV4KGxpbmtlZElzc3VlKSAgICAKICAgIAogICAgbG9nLmRlYnVnICJvZmZlcklzc3VlRmllbGQ6ICIgKyBvZmZlcklzc3VlRmllbGQKICAgIGxvZy5kZWJ1ZyAibGlua2VkSXNzdWU6ICIgKyBsaW5rZWRJc3N1ZQogICAgb2ZmZXJJc3N1ZUZpZWxkLnVwZGF0ZVZhbHVlKG51bGwsIGlzc3VlLCBuZXcgTW9kaWZpZWRWYWx1ZShpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKG9mZmVySXNzdWVGaWVsZCksIGxpbmtlZElzc3VlLmtleS50b1N0cmluZygpKSwgbmV3IERlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlcigpKQogICAgbG9nLmRlYnVnICJ1cGRhdGVkOiAiICsgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShvZmZlcklzc3VlRmllbGQpCiAgICAKICAgIGlmIChkZXN0U3RhdHVzT2JqZWN0Lm5hbWUgPT0gcHJvcGVydGllc1snd2Yub3BlbiddLnRvU3RyaW5nKCkpIHsKICAgICAgICAvLyBQcmVwYXJlIG91ciBpbnB1dCBmb3IgdGhlIHRyYW5zaXRpb24KICAgICAgICBkZWYgaXNzdWVJbnB1dFBhcmFtZXRlcnMgPSBpc3N1ZVNlcnZpY2UubmV3SXNzdWVJbnB1dFBhcmFtZXRlcnMoKQogICAgICAgIGlzc3VlSW5wdXRQYXJhbWV0ZXJzLndpdGggewogICAgICAgICAgICBzZXRTa2lwU2NyZWVuQ2hlY2sodHJ1ZSkKICAgICAgICB9CiAgICAgICAgLy8gVmFsaWRhdGUgdHJhbnNpdGlvbmluZyB0aGUgbGlua2VkIGlzc3VlIHRvICJTaWducyBOZWVkZWQiCiAgICAgICAgZGVmIHZhbGlkYXRpb25SZXN1bHQgPSBpc3N1ZVNlcnZpY2UudmFsaWRhdGVUcmFuc2l0aW9uKHVzZXIsIGxpbmtlZElzc3VlLmlkLCAocHJvcGVydGllc1snd2YudHIuYXNrUXVvdGUnXSA/IHByb3BlcnRpZXNbJ3dmLnRyLmFza1F1b3RlJ10udG9JbnRlZ2VyKCkgOiAxMSksIGlzc3VlSW5wdXRQYXJhbWV0ZXJzKQogICAgICAgIGlmICh2YWxpZGF0aW9uUmVzdWx0LmlzVmFsaWQoKSkgewogICAgICAgICAgICAvLyBQZXJmb3JtIHRoZSB0cmFuc2l0aW9uCiAgICAgICAgICAgIGRlZiBpc3N1ZVJlc3VsdCA9IGlzc3VlU2VydmljZS50cmFuc2l0aW9uKHVzZXIsIHZhbGlkYXRpb25SZXN1bHQpCiAgICAgICAgICAgIGlmICghIGlzc3VlUmVzdWx0LmlzVmFsaWQoKSkgewogICAgICAgICAgICAgICAgbG9nLmRlYnVnKCJGYWlsZWQgdG8gdHJhbnNpdGlvbiB0YXNrICR7ZGVzdElzc3VlLmtleX0sIGVycm9yczogJHtpc3N1ZVJlc3VsdC5lcnJvckNvbGxlY3Rpb259IikKICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICBsb2cuZGVidWcoIlRyYW5zYXppb25lIGZhdHRhIikKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGxvZy5kZWJ1ZygiQ291bGQgbm90IHRyYW5zaXRpb24gdGFzayAke2Rlc3RJc3N1ZS5rZXl9LCBlcnJvcnM6ICR7dmFsaWRhdGlvblJlc3VsdC5lcnJvckNvbGxlY3Rpb259IikKICAgICAgICB9CiAgICB9CiAgICAKfQ==</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23400</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="811" name="Riapri Intervento">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">f02b01a1-c02e-4cd0-af93-8f4c019ac5b9</arg>
                <arg name="FIELD_NOTES">YCFgTmV3IEluc3RhbGxhdGlvbg==</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnTmV3IEluc3RhbGxhdGlvbiciLCJzY3JpcHRQYXRoIjpudWxsfQ==</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="4">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22762</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="851" name="Genera Consuntivo Cliente" view="fieldscreen">
          <meta name="opsbar-sequence">30</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19911</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">a0f5c2ba-110e-404e-99b7-f01f177a8cfe</arg>
                <arg name="FIELD_NOTES">YCFgRW5hYmxlZCBvbmx5IGZvciBSZXBhaXIgVGlja2V0</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnTWFpbnRlbmFuY2UgVGlja2V0JyIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">fada32c2-b768-4770-816d-beeac0f8e084</arg>
                <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIEZJTkFOQ0lBTF9TVEFURU1FTlRfVE9fQ1VTVE9NRVIgLSBJZiBpdCdzIG51bGwgdGhlIGVtYWlsIGhhcyBub3QgYmVlbiBzZW50IHlldA==</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXG5cblByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKClcbkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpXG5wcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0ge1xuXHRwcm9wZXJ0aWVzLmxvYWQoaXQpXG59XG5jZlZhbHVlc1twcm9wZXJ0aWVzWydjZi53ZkZpbmFuY2lhbFN0YXRtVG9DJ11dID09IG51bGwiLCJzY3JpcHRQYXRoIjpudWxsfQ==</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">e70180eb-0cf2-468c-b6c4-1eeded83980b</arg>
                <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIE9QX0FVVE9NQVRJQ0FMTFlfQ0xPU0VEIC0gaWYgWWVzIGRvbid0IGFsbG93IHRyYW5zaXRpb24=</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXG5cblByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKClcbkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpXG5wcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0ge1xuXHRwcm9wZXJ0aWVzLmxvYWQoaXQpXG59XG5jZlZhbHVlc1twcm9wZXJ0aWVzWydjZi5hdXRvbWF0aWNhbGx5Q2xvc2VkJ11dID09IG51bGwgfHwgY2ZWYWx1ZXNbcHJvcGVydGllc1snY2YuYXV0b21hdGljYWxseUNsb3NlZCddLnRvU3RyaW5nKCldPy52YWx1ZSA9PSAnTm8nIiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">dd31289a-d8bf-4841-8c4e-de322ebe1183</arg>
                <arg name="FIELD_NOTES">YCFgQXZhaWxhYmxlIG9ubHkgaWYgdGhlcmUgaXMgbm8gQ09OU1VOVElWTyBhdHRhY2hlZCB0byB0aGUgdGlja2V0</arg>
                <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxubG9nLmRlYnVnIFwiT25TaXRlIFJlcG9ydCBwZXIgaXNzdWU6IFwiICsgaXNzdWUua2V5XG4vKiBSRVNUIEFQSSBwZXIgR2VuZXJhemlvbmUgQWxsZWdhdG8gUmFwcG9ydG8gZGkgSW50ZXJ2ZW50byAqL1xucmVxdWVzdE1ldGhvZCA9IFwiUFVUXCI7XG4vKlNjcmlwdCBWYXJpYWJsZXMqL1xuLy9QZXIgdGVzdCBkYSBjb25zb2xlXG4vL0lzc3VlIGlzc3VlID0gaXNzdWVNYW5hZ2VyLmdldElzc3VlQnlLZXlJZ25vcmVDYXNlKFwiT1BVVC0xNDA2MlwiKVxuXG5pbnQgT1BBQSA9IHByb3BlcnRpZXNbJ2lzY2hlbWEuYWEuaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5pbnQgREJPID0gcHJvcGVydGllc1snaXNjaGVtYS5kYm8uaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5cbi8qUmltb3ppb25lIGFsbGVnYXRvIHJhcHBvcnRvIGRpIGludGVydmVudG8gYXBwZW5hIGNyZWF0byovXG4vKiBHZXQgSW5zaWdodCBJUUwgRmFjYWRlIGZyb20gcGx1Z2luIGFjY2Vzc29yICovXG5DbGFzcyBpcWxGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5JUUxGYWNhZGVcIik7IFxuZGVmIGlxbEZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShpcWxGYWNhZGVDbGFzcyk7XG5cbi8qIEdldCBJbnNpZ2h0IE9iamVjdCBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdEZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdEZhY2FkZVwiKTtcbmRlZiBvYmplY3RGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0RmFjYWRlQ2xhc3MpO1xuXG4vKiBHZXQgSW5zaWdodCBPYmplY3QgVHlwZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdFR5cGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlRmFjYWRlXCIpO1xuZGVmIG9iamVjdFR5cGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUZhY2FkZUNsYXNzKTtcblxuLyogR2V0IEluc2lnaHQgT2JqZWN0IEF0dHJpYnV0ZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlXCIpO1xuZGVmIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZUNsYXNzKTtcblxuQ2xhc3Mgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LnNlcnZpY2VzLm1vZGVsLmZhY3RvcnkuT2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlcIik7XG5kZWYgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnkgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyk7XG5cbi8qIFNwZWNpZnkgdGhlIHNjaGVtYSBpZCBhcyB3ZWxsIGFzIHRoZSBJUUwgdGhhdCB3aWxsIGZldGNoIG9iamVjdHMuIEluIHRoaXMgY2FzZSBhbGwgb2JqZWN0cyB3aXRoIE5hbWUgbWF0Y2hpbmcgdGhlIHZhbHVlQ0YsIGJlIHN1cmUgdG8gaW5jbHVkZSBcIiBhcm91bmQgdmFsdWUgKi9cbmRlZiBvYmplY3RzID0gaXFsRmFjYWRlLmZpbmRPYmplY3RzQnlJUUxBbmRTY2hlbWEoREJPLCBcIm9iamVjdFR5cGU9QXR0YWNobWVudCBBTkQgXFxcIlwiICsgcHJvcGVydGllc1snaW9iai5hdHRhY2htZW50Q2F0ZWdvcnkuY2F0ZWdvcnlSZWYnXS50b1N0cmluZygpICsgXCJcXFwiLk5hbWUgTElLRSBcXFwiQ29uc3VudGl2byBDbGllbnRlXFxcIiBBTkQgXCIgKyBwcm9wZXJ0aWVzWydpb2JqLmF0dGFjaG1lbnRDYXRlZ29yeS5kZWxldGVkJ10udG9TdHJpbmcoKSArIFwiIT10cnVlIEFORCBvYmplY3QgSEFWSU5HIGNvbm5lY3RlZFRpY2tldHMoa2V5ID0gXCIgKyBpc3N1ZS5rZXkudG9TdHJpbmcoKSArIFwiKVwiKTsgLy8gU2VlIHRoZSBjb21wbGV0ZSBsaXN0IG9mIHBvc3NpYmxlIElRTCBvbiB0aGUgSW5zaWdodCBRdWVyeSBMYW5ndWFnZSBkb2N1bWVudGF0aW9uIHBhZ2Vcbi8qIElmIHRoaXMgaXMgYSBtYW5kYXRvcnkgZmllbGQgeW91IHNob3VsZCBiZSBhYmxlIHRvIGRvIHRoaXM6ICovXG5sb2cuZGVidWcgXCJJUUw6IFwiICsgXCJvYmplY3RUeXBlPUF0dGFjaG1lbnQgQU5EIFxcXCJcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmNhdGVnb3J5UmVmJ10udG9TdHJpbmcoKSArIFwiXFxcIi5OYW1lIExJS0UgXFxcIkNvbnN1bnRpdm8gQ2xpZW50ZVxcXCIgQU5EIFwiICsgcHJvcGVydGllc1snaW9iai5hdHRhY2htZW50Q2F0ZWdvcnkuZGVsZXRlZCddLnRvU3RyaW5nKCkgKyBcIiE9dHJ1ZSBBTkQgb2JqZWN0IEhBVklORyBjb25uZWN0ZWRUaWNrZXRzKGtleSA9IFwiICsgaXNzdWUua2V5LnRvU3RyaW5nKCkgKyBcIilcIlxubG9nLmRlYnVnIFwib2JqZWN0czogXCIgKyBvYmplY3RzXG5sb2cuZGVidWcgXCJyaXN1bHRhdG86IFwiICsgKChvYmplY3RzID09IG51bGwgfHwgb2JqZWN0cy5zaXplPT0wKSAmJiAhaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpdC5wbGFubmVkTWFpbnRlbmFuY2UnXSkpXG4vKiEhRGEgcmltdW92ZXJlIGFwcGVuYSByaXNvbHRpIGkgYnVnISEqL1xuLy9yZXR1cm4gKG9iamVjdHMgIT0gbnVsbCAmJiBvYmplY3RzLnNpemUhPTApICYmICFpc3N1ZS5nZXRJc3N1ZVR5cGUoKS5uYW1lLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2l0LnBsYW5uZWRNYWludGVuYW5jZSddKVxucGFzc2VzQ29uZGl0aW9uID0gKChvYmplY3RzID09IG51bGwgfHwgb2JqZWN0cy5zaXplPT0wKSAmJiAhaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpdC5wbGFubmVkTWFpbnRlbmFuY2UnXSkpXG4iLCJzY3JpcHRQYXRoIjpudWxsfQ==</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.CustomScriptCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">6c786cdf0a6d0ad4b6b1d34c1ad1598920327ad2</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlcXVpcmVkIEZpZWxkcyAtIHNvbG8gZXJyb3JzLCBubyB3YXJuaW5ncw==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZQppbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb24KaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3IKaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGdyb292eS5qc29uLkpzb25CdWlsZGVyCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVNYW5hZ2VyCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbAoKUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKQpGaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKQpwcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0gewoJcHJvcGVydGllcy5sb2FkKGl0KQp9CmRlZiBDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQogCklzc3VlIGlzc3VlID0gaXNzdWUKLy9Jc3N1ZU1hbmFnZXIgaXNzdWVNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKCk7Ci8vSXNzdWUgaXNzdWUgPSBpc3N1ZU1hbmFnZXIuZ2V0SXNzdWVCeUtleUlnbm9yZUNhc2UoIk9QVVQtMzk2IikKCmRlZiBlcnJvcnMgPSBmYWxzZQpkZWYgd2FybmluZ3MgPSBmYWxzZQoKZGVmIGx1bXBTdW1QcmljZSA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YubHVtcFN1bVByaWNlJ10udG9TdHJpbmcoKSlbMF0KCi8qQ2FtcGkgY29uIGRhdGkgb2JibGlnYXRvcmkgcGVyIHRpY2tldCBub24gYSBjb3JwbyovCmRlZiByZXBNYXRlcmlhbHMgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLnJlcGxhY2VkTWF0ZXJpYWxzJ10udG9TdHJpbmcoKSlbMF0KZGVmIHVuYVRhbnR1bVJhdGVzID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi51bmF0YW50dW1SYXRlcyddLnRvU3RyaW5nKCkpWzBdCmRlZiBsYWJvdXJSYXRlcyA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YubGFib3VyUmF0ZXMnXS50b1N0cmluZygpKVswXQpkZWYgdHJhdmVsUmF0ZXMgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLnRyYXZlbFJhdGVzJ10udG9TdHJpbmcoKSlbMF0KCi8qQ2FtcGkgY29uIGRhdGkgb2JibGlnYXRvcmkgcGVyIHRpY2tldCBhIGNvcnBvKi8KZGVmIGx1bXBTdW1SYXRlcyA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YubHVtcFN1bVJhdGVzJ10udG9TdHJpbmcoKSlbMF0KCi8qQ29uZmVybWEgdXRlbnRlIHN1IHdhcm5pbmdzKi8KZGVmIHRyYW5zaXRpb25DaGVjayA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YuY2hlY2tBbmRDb25maXJtJ10udG9TdHJpbmcoKSlbMF0KCi8qSW5zaWdodCBTY2hlbWEgSURzKi8KZGVmIERCT2JqZWN0cyA9IHByb3BlcnRpZXNbJ2lzY2hlbWEuZGJvJ10udG9TdHJpbmcoKSArICItIgpkZWYgT1BBQSA9IHByb3BlcnRpZXNbJ2lzY2hlbWEuYWEnXS50b1N0cmluZygpICsgIi0iCgpkZWYgZXJyb3JNYW5kYXRvcnlGaWVsZHMgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIGVycm9ySm9iU3RhcnRlZENvbXBsZXRlZEZpZWxkcyA9IG5ldyBBcnJheUxpc3QoKQpkZWYgd2FybmluZ0VtcHR5RmllbGRzID0gbmV3IEFycmF5TGlzdCgpCmRlZiB3YXJuaW5nRW1wdHlRdW90ZU1hdEN1c3RvbWVyID0gbmV3IEFycmF5TGlzdCgpCmRlZiB3YXJuaW5nRW1wdHlRdW90ZVJhdGVDdXN0b21lciA9IG5ldyBBcnJheUxpc3QoKQoKLy90cnl7CiAgICBpZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGx1bXBTdW1QcmljZSkhPW51bGwgJiYgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShsdW1wU3VtUHJpY2UpLnRvU3RyaW5nKCkuZXF1YWxzKCJZZXMiKSl7CiAgICAgICAgLypDb250YWJpbGl6emF6aW9uZSBhIGNvcnBvKi8KICAgICAgICBsb2cuZGVidWcgIkNvbnRhYmlsaXp6YXppb25lIGEgY29ycG8iCiAgICAgICAgLy9PUEFBX0xVTVBfU1VNX1JBVEVTCiAgICAgICAgaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShsdW1wU3VtUmF0ZXMpIT1udWxsICYmIChTdHJpbmcpaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShsdW1wU3VtUmF0ZXMpICE9ICIiICYmICFpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGx1bXBTdW1SYXRlcykudG9TdHJpbmcoKS5lcXVhbHMoIiIpKXsKICAgICAgICAgICAgLypDaWNsYXJlIHR1dHRpIGdsaSBvZ2dldHRpIGFzc29jaWF0aSBhbCBjYW1wbyovCiAgICAgICAgICAgIC8vaW5zaWdodCBjbGFzc2VzICYgY29tcG9uZW50cwogICAgICAgICAgICBDbGFzcyBvYmplY3RGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdEZhY2FkZSIpOyAgCiAgICAgICAgICAgIENsYXNzIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGUiKTsKICAgICAgICAgICAgZGVmIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZUNsYXNzKTsKICAgICAgICAgICAgZGVmIG9iamVjdEZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShvYmplY3RGYWNhZGVDbGFzcyk7CgogICAgICAgICAgICBkZWYgbHNSYXRlc0xpc3QgPSBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGx1bXBTdW1SYXRlcykKCQkJbG9nLmRlYnVnIGxzUmF0ZXNMaXN0CiAgICAgICAgICAgIGZvcihscyBpbiBsc1JhdGVzTGlzdCl7CiAgICAgICAgICAgICAgICAvL2V4dHJhY3QgaW5zaWdodCBrZXkgYW5nIGdldCBvYmplY3QKICAgICAgICAgICAgICAgIGRlZiBsc1JhdGU9bHMudG9TdHJpbmcoKQogICAgICAgICAgICAgICAgbG9nLmRlYnVnICJsc1JhdGU6ICIgKyBsc1JhdGUKICAgICAgICAgICAgICAgIGRlZiBsc1JhdGVLZXkgPSBsc1JhdGUuc3Vic3RyaW5nKGxzUmF0ZS5pbmRleE9mKCcoJykrMSxsc1JhdGUuaW5kZXhPZignKScpKQogICAgICAgICAgICAgICAgbG9nLmRlYnVnICJsc1JhdGVLZXk6ICIgKyBsc1JhdGVLZXkKICAgICAgICAgICAgICAgIGRlZiBsc1JhdGVPYmplY3QgPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEJlYW4obHNSYXRlS2V5KQogICAgICAgICAgICAgICAgbG9nLmRlYnVnICJsc1JhdGVPYmplY3Q6ICIgKyBsc1JhdGVPYmplY3QKICAgICAgICAgICAgICAgIC8vZ2V0ICJBUFBMSUVEX1RPIiBmb3IgdGhhdCByYXRlCiAgICAgICAgICAgICAgICBkZWYgbHNBcHBsaWVkVG8gPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4obHNSYXRlT2JqZWN0LmdldElkKCksIHByb3BlcnRpZXNbJ2lvYmoub25TaXRlUmF0ZVJlcG9ydC5hcHBsaWVkVG8nXS50b1N0cmluZygpKS5nZXRPYmplY3RBdHRyaWJ1dGVWYWx1ZUJlYW5zKCkudG9TdHJpbmcoKQogICAgICAgICAgICAgICAgbG9nLmRlYnVnICJsc0FwcGxpZWRUbzogIiArIGxzQXBwbGllZFRvCiAgICAgICAgICAgICAgICBkZWYgbHNBcHBsaWVkVG9WYWx1ZQogICAgICAgICAgICAgICAgaWYgKGxzQXBwbGllZFRvKXsKICAgICAgICAgICAgICAgICAgICBsc0FwcGxpZWRUb1ZhbHVlID0gbHNBcHBsaWVkVG8uc3Vic3RyaW5nKGxzQXBwbGllZFRvLmluZGV4T2YoJygnKSsxLGxzQXBwbGllZFRvLmluZGV4T2YoJyknKSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyAib2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKGxzUmF0ZU9iamVjdC5nZXRJZCgpLCBSQVRFX1JFRik6ICIgKyBvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4obHNSYXRlT2JqZWN0LmdldElkKCksIHByb3BlcnRpZXNbJ2lvYmoub25TaXRlUmF0ZVJlcG9ydC5yYXRlUmVmJ10udG9TdHJpbmcoKSkKICAgICAgICAgICAgICAgIGRlZiBsc1JhdGVSZWYgPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4obHNSYXRlT2JqZWN0LmdldElkKCksIHByb3BlcnRpZXNbJ2lvYmoub25TaXRlUmF0ZVJlcG9ydC5yYXRlUmVmJ10udG9TdHJpbmcoKSkuZ2V0T2JqZWN0QXR0cmlidXRlVmFsdWVCZWFucygpLnRvU3RyaW5nKCkKICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyAibHNSYXRlUmVmOiAiICsgbHNSYXRlUmVmCiAgICAgICAgICAgICAgICBkZWYgbHNSYXRlUmVmS2V5CiAgICAgICAgICAgICAgICBkZWYgbHNSYXRlUmVmVmFsdWUKICAgICAgICAgICAgICAgIGlmKGxzUmF0ZVJlZi5zaXplKCkgPiAwKXsKICAgICAgICAgICAgICAgICAgICBsc1JhdGVSZWYgPSBsc1JhdGVSZWYudG9TdHJpbmcoKQogICAgICAgICAgICAgICAgICAgIGxzUmF0ZVJlZktleSA9IGxzUmF0ZVJlZi5zdWJzdHJpbmcobHNSYXRlUmVmLmluZGV4T2YoJygnKSsxLGxzUmF0ZVJlZi5pbmRleE9mKCcpJykpCiAgICAgICAgICAgICAgICAgICAgZGVmIGxzUmF0ZVJlZk9iamVjdCA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QmVhbihPUEFBICsgbHNSYXRlUmVmS2V5KQogICAgICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyBsc1JhdGVSZWZPYmplY3QKICAgICAgICAgICAgICAgICAgICBsc1JhdGVSZWZWYWx1ZSA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbihsc1JhdGVSZWZPYmplY3QuZ2V0SWQoKSwgcHJvcGVydGllc1snaW9iai5yYXRlLk5hbWUnXS50b1N0cmluZygpKS5nZXRPYmplY3RBdHRyaWJ1dGVWYWx1ZUJlYW5zKCkudG9TdHJpbmcoKQogICAgICAgICAgICAgICAgICAgIGxzUmF0ZVJlZlZhbHVlID0gbHNSYXRlUmVmVmFsdWUuc3Vic3RyaW5nKGxzUmF0ZVJlZlZhbHVlLmluZGV4T2YoJygnKSsxLGxzUmF0ZVJlZlZhbHVlLmluZGV4T2YoJyknKSkKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZihsc0FwcGxpZWRUb1ZhbHVlLnRvU3RyaW5nKCkuZXF1YWxzKCJCT1RIIikgfHwgbHNBcHBsaWVkVG9WYWx1ZS50b1N0cmluZygpLmVxdWFscygiQ1VTVE9NRVIiKSl7CiAgICAgICAgICAgICAgICAgICAgLy9nZXQgIlRPVEFMX0FNT1VOVF9DVVNUT01FUiIgZm9yIHRoYXQgY29tcG9uZW50CiAgICAgICAgICAgICAgICAgICAgZGVmIHRvdEN1c3RvbWVyID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKGxzUmF0ZU9iamVjdC5nZXRJZCgpLCBwcm9wZXJ0aWVzWydpb2JqLm9uU2l0ZVJhdGVSZXBvcnQudG90Q3VzdG9tZXInXS50b1N0cmluZygpKS5nZXRPYmplY3RBdHRyaWJ1dGVWYWx1ZUJlYW5zKCkKICAgICAgICAgICAgICAgICAgICBpZighdG90Q3VzdG9tZXIgfHwgdG90Q3VzdG9tZXJbMF0uZ2V0VmFsdWUoKS50b1N0cmluZygpLmVxdWFscygiMC4wIikpewogICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5ncz10cnVlCiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdFbXB0eVF1b3RlUmF0ZUN1c3RvbWVyLmFkZChsc1JhdGVSZWZWYWx1ZS50b1N0cmluZygpKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0gICAgCiAgICAgICAgfQoKICAgIH1lbHNlewogICAgICAgIC8qQ29udGFiaWxpenphemlvbmUgbm9uIGEgY29ycG8qLwogICAgICAgIGxvZy5kZWJ1ZyAiQ29udGFiaWxpenphemlvbmUgTk9OIGEgY29ycG8iCgogICAgICAgIC8vT1BBQV9SRVBMQUNFRF9NQVRFUklBTFMKICAgICAgICBpZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHJlcE1hdGVyaWFscykhPW51bGwgJiYgKFN0cmluZylpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHJlcE1hdGVyaWFscykgIT0gIiIgJiYgIWlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUocmVwTWF0ZXJpYWxzKS50b1N0cmluZygpLmVxdWFscygiIikpewogICAgICAgICAgICAvL2xvZy5kZWJ1ZyAiTWF0ZXJpYWxpOiAiICsgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShyZXBNYXRlcmlhbHMpCiAgICAgICAgICAgIC8qQ2ljbGFyZSB0dXR0aSBnbGkgb2dnZXR0aSBhc3NvY2lhdGkgYWwgY2FtcG8qLwogICAgICAgICAgICAvL2luc2lnaHQgY2xhc3NlcyAmIGNvbXBvbmVudHMKICAgICAgICAgICAgQ2xhc3Mgb2JqZWN0RmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RGYWNhZGUiKTsgIAogICAgICAgICAgICBDbGFzcyBvYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlIik7CiAgICAgICAgICAgIGRlZiBvYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyk7CiAgICAgICAgICAgIGRlZiBvYmplY3RGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0RmFjYWRlQ2xhc3MpOwoKICAgICAgICAgICAgZGVmIHJlcE1hdExpc3QgPSBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHJlcE1hdGVyaWFscykKCiAgICAgICAgICAgIGZvcihtYXQgaW4gcmVwTWF0TGlzdCl7CiAgICAgICAgICAgICAgICAvL2V4dHJhY3QgaW5zaWdodCBrZXkgYW5nIGdldCBvYmplY3QKICAgICAgICAgICAgICAgIGRlZiBjb21wb25lbnQ9bWF0LnRvU3RyaW5nKCkKICAgICAgICAgICAgICAgIGRlZiBjb21wb25lbnRLZXkgPSBjb21wb25lbnQuc3Vic3RyaW5nKGNvbXBvbmVudC5pbmRleE9mKCcoJytPUEFBKSsxLGNvbXBvbmVudC5sZW5ndGgoKS0xKQogICAgICAgICAgICAgICAgZGVmIGNvbXBvbmVudE9iamVjdCA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QmVhbihjb21wb25lbnRLZXkpCiAgICAgICAgICAgICAgICAvL2dldCAiQVBQTElFRF9UTyIgZm9yIHRoYXQgY29tcG9uZW50CiAgICAgICAgICAgICAgICBkZWYgYXBwbGllZFRvID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKGNvbXBvbmVudE9iamVjdC5nZXRJZCgpLCBwcm9wZXJ0aWVzWydpb2JqLm9uU2l0ZVJhdGVSZXBvcnQuYXBwbGllZFRvJ10udG9TdHJpbmcoKSkuZ2V0T2JqZWN0QXR0cmlidXRlVmFsdWVCZWFucygpIGFzIEFycmF5TGlzdAogICAgICAgICAgICAgICAgZGVmIGFwcGxpZWRUb1ZhbHVlCiAgICAgICAgICAgICAgICBpZihhcHBsaWVkVG8uc2l6ZSgpID4gMCl7CiAgICAgICAgICAgICAgICAgICAgYXBwbGllZFRvID0gYXBwbGllZFRvLnRvU3RyaW5nKCkKICAgICAgICAgICAgICAgICAgICBhcHBsaWVkVG9WYWx1ZSA9IGFwcGxpZWRUby5zdWJzdHJpbmcoYXBwbGllZFRvLmluZGV4T2YoJygnKSsxLGFwcGxpZWRUby5pbmRleE9mKCcpJykpCiAgICAgICAgICAgICAgICAgICAgLy9sb2cuZGVidWcgImFwcGxpZWRUb1ZhbHVlOiAiICsgYXBwbGllZFRvVmFsdWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZGVmIG1hdE51bWJlciA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbihjb21wb25lbnRPYmplY3QuZ2V0SWQoKSwgcHJvcGVydGllc1snaW9iai5jb21wb25lbnQubWF0ZXJpYWxSZWYnXS50b1N0cmluZygpKS5nZXRPYmplY3RBdHRyaWJ1dGVWYWx1ZUJlYW5zKCkgYXMgQXJyYXlMaXN0CiAgICAgICAgICAgICAgICBkZWYgbWF0TnVtYmVyS2V5CiAgICAgICAgICAgICAgICBkZWYgbWF0TnVtYmVyVmFsdWUKICAgICAgICAgICAgICAgIGlmKG1hdE51bWJlci5zaXplKCkgPiAwKXsKICAgICAgICAgICAgICAgICAgICBtYXROdW1iZXIgPSBtYXROdW1iZXIudG9TdHJpbmcoKQogICAgICAgICAgICAgICAgICAgIG1hdE51bWJlcktleSA9IG1hdE51bWJlci5zdWJzdHJpbmcobWF0TnVtYmVyLmluZGV4T2YoJygnKSsxLG1hdE51bWJlci5pbmRleE9mKCcpJykpCiAgICAgICAgICAgICAgICAgICAgZGVmIG1hdE51bWJlck9iamVjdCA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QmVhbihEQk9iamVjdHMgKyBtYXROdW1iZXJLZXkpCiAgICAgICAgICAgICAgICAgICAgbWF0TnVtYmVyVmFsdWUgPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4obWF0TnVtYmVyT2JqZWN0LmdldElkKCksIHByb3BlcnRpZXNbJ2lvYmoubWF0ZXJpYWwubmFtZSddLnRvU3RyaW5nKCkpLmdldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnMoKS50b1N0cmluZygpCiAgICAgICAgICAgICAgICAgICAgbWF0TnVtYmVyVmFsdWUgPSBtYXROdW1iZXJWYWx1ZS5zdWJzdHJpbmcobWF0TnVtYmVyVmFsdWUuaW5kZXhPZignKCcpKzEsbWF0TnVtYmVyVmFsdWUuaW5kZXhPZignKScpKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBkZWYgc2VyaWFsTnVtYmVyID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKGNvbXBvbmVudE9iamVjdC5nZXRJZCgpLCBwcm9wZXJ0aWVzWydpb2JqLmNvbXBvbmVudC5zZXJpYWxOdW1iZXInXS50b1N0cmluZygpKSA/IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbihjb21wb25lbnRPYmplY3QuZ2V0SWQoKSwgcHJvcGVydGllc1snaW9iai5jb21wb25lbnQuc2VyaWFsTnVtYmVyJ10udG9TdHJpbmcoKSkuZ2V0T2JqZWN0QXR0cmlidXRlVmFsdWVCZWFucygpIGFzIEFycmF5TGlzdCA6IG51bGwKICAgICAgICAgICAgICAgIGRlZiBzZXJpYWxOdW1iZXJWYWx1ZQogICAgICAgICAgICAgICAgaWYoc2VyaWFsTnVtYmVyICYmIHNlcmlhbE51bWJlci5zaXplKCkgPiAwKXsKICAgICAgICAgICAgICAgICAgICBzZXJpYWxOdW1iZXIgPSBzZXJpYWxOdW1iZXIudG9TdHJpbmcoKQogICAgICAgICAgICAgICAgICAgIHNlcmlhbE51bWJlclZhbHVlID0gc2VyaWFsTnVtYmVyLnN1YnN0cmluZyhzZXJpYWxOdW1iZXIuaW5kZXhPZignKCcpKzEsc2VyaWFsTnVtYmVyLmluZGV4T2YoJyknKSkKICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICBpZihhcHBsaWVkVG9WYWx1ZS50b1N0cmluZygpLmVxdWFscygiQk9USCIpIHx8IGFwcGxpZWRUb1ZhbHVlLnRvU3RyaW5nKCkuZXF1YWxzKCJDVVNUT01FUiIpKXsKICAgICAgICAgICAgICAgICAgICAvL2dldCAiVE9UQUxfQU1PVU5UX0NVU1RPTUVSIiBmb3IgdGhhdCBjb21wb25lbnQKICAgICAgICAgICAgICAgICAgICBkZWYgdG90Q3VzdG9tZXIgPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4oY29tcG9uZW50T2JqZWN0LmdldElkKCksIHByb3BlcnRpZXNbJ2lvYmouY29tcG9uZW50LnRvdEN1c3QnXS50b1N0cmluZygpKSA/IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbihjb21wb25lbnRPYmplY3QuZ2V0SWQoKSwgcHJvcGVydGllc1snaW9iai5jb21wb25lbnQudG90Q3VzdCddLnRvU3RyaW5nKCkpLmdldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnMoKSA6IG51bGwKICAgICAgICAgICAgICAgICAgICBpZighdG90Q3VzdG9tZXIgfHwgdG90Q3VzdG9tZXJbMF0uZ2V0VmFsdWUoKS50b1N0cmluZygpLmVxdWFscygiMC4wIikpewogICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5ncz10cnVlCiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdFbXB0eVF1b3RlTWF0Q3VzdG9tZXIuYWRkKG1hdE51bWJlclZhbHVlLnRvU3RyaW5nKCkgKyAoKHNlcmlhbE51bWJlciAmJiBzZXJpYWxOdW1iZXIuc2l6ZSgpID4gMCkgPyAiICgiICsgc2VyaWFsTnVtYmVyVmFsdWUudG9TdHJpbmcoKSArICIpIiA6ICIgKCkiKSkgICAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9ICAgIAogICAgICAgIH0gIAoKICAgICAgICAvL09QQUFfVU5BVEFOVFVNX1JBVEVTCiAgICAgICAgaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZSh1bmFUYW50dW1SYXRlcykhPW51bGwgJiYgKFN0cmluZylpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHVuYVRhbnR1bVJhdGVzKSAhPSAiIiAmJiAhaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZSh1bmFUYW50dW1SYXRlcykudG9TdHJpbmcoKS5lcXVhbHMoIiIpKXsKICAgICAgICAgICAgbG9nLmRlYnVnICJVbmEgdGFudHVtIHJhdGVzOiAiICsgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZSh1bmFUYW50dW1SYXRlcykKICAgICAgICAgICAgLypDaWNsYXJlIHR1dHRpIGdsaSBvZ2dldHRpIGFzc29jaWF0aSBhbCBjYW1wbyovCiAgICAgICAgICAgIC8vaW5zaWdodCBjbGFzc2VzICYgY29tcG9uZW50cwogICAgICAgICAgICBDbGFzcyBvYmplY3RGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdEZhY2FkZSIpOyAgCiAgICAgICAgICAgIENsYXNzIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGUiKTsKICAgICAgICAgICAgZGVmIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZUNsYXNzKTsKICAgICAgICAgICAgZGVmIG9iamVjdEZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShvYmplY3RGYWNhZGVDbGFzcyk7CgogICAgICAgICAgICBkZWYgdW1SYXRlc0xpc3QgPSBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHVuYVRhbnR1bVJhdGVzKQoKICAgICAgICAgICAgZm9yKHVtIGluIHVtUmF0ZXNMaXN0KXsKICAgICAgICAgICAgICAgIC8vZXh0cmFjdCBpbnNpZ2h0IGtleSBhbmcgZ2V0IG9iamVjdAogICAgICAgICAgICAgICAgZGVmIHVtUmF0ZT11bS50b1N0cmluZygpCiAgICAgICAgICAgICAgICBkZWYgdW1SYXRlS2V5ID0gdW1SYXRlLnN1YnN0cmluZyh1bVJhdGUuaW5kZXhPZignKCcpKzEsdW1SYXRlLmluZGV4T2YoJyknKSkKICAgICAgICAgICAgICAgIGRlZiB1bVJhdGVPYmplY3QgPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEJlYW4odW1SYXRlS2V5KQogICAgICAgICAgICAgICAgLy9nZXQgIkFQUExJRURfVE8iIGZvciB0aGF0IHJhdGUKICAgICAgICAgICAgICAgIGRlZiB1bUFwcGxpZWRUbyA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbih1bVJhdGVPYmplY3QuZ2V0SWQoKSwgcHJvcGVydGllc1snaW9iai5vblNpdGVSYXRlUmVwb3J0LmFwcGxpZWRUbyddLnRvU3RyaW5nKCkpLmdldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnMoKS50b1N0cmluZygpCiAgICAgICAgICAgICAgICBkZWYgdW1BcHBsaWVkVG9WYWx1ZSA9IHVtQXBwbGllZFRvLnN1YnN0cmluZyh1bUFwcGxpZWRUby5pbmRleE9mKCcoJykrMSx1bUFwcGxpZWRUby5pbmRleE9mKCcpJykpCgogICAgICAgICAgICAgICAgZGVmIHVtUmF0ZVJlZiA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbih1bVJhdGVPYmplY3QuZ2V0SWQoKSwgcHJvcGVydGllc1snaW9iai5vblNpdGVSYXRlUmVwb3J0LnJhdGVSZWYnXS50b1N0cmluZygpKS5nZXRPYmplY3RBdHRyaWJ1dGVWYWx1ZUJlYW5zKCkudG9TdHJpbmcoKQoKICAgICAgICAgICAgICAgIGRlZiB1bVJhdGVSZWZLZXkKICAgICAgICAgICAgICAgIGRlZiB1bVJhdGVSZWZWYWx1ZQogICAgICAgICAgICAgICAgaWYodW1SYXRlUmVmLnNpemUoKSA+IDApewogICAgICAgICAgICAgICAgICAgIHVtUmF0ZVJlZiA9IHVtUmF0ZVJlZi50b1N0cmluZygpCiAgICAgICAgICAgICAgICAgICAgdW1SYXRlUmVmS2V5ID0gdW1SYXRlUmVmLnN1YnN0cmluZyh1bVJhdGVSZWYuaW5kZXhPZignKCcpKzEsdW1SYXRlUmVmLmluZGV4T2YoJyknKSkKICAgICAgICAgICAgICAgICAgICBkZWYgdW1SYXRlUmVmT2JqZWN0ID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RCZWFuKE9QQUEgKyB1bVJhdGVSZWZLZXkpCiAgICAgICAgICAgICAgICAgICAgdW1SYXRlUmVmVmFsdWUgPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4odW1SYXRlUmVmT2JqZWN0LmdldElkKCksIHByb3BlcnRpZXNbJ2lvYmoucmF0ZS5OYW1lJ10udG9TdHJpbmcoKSkgPyBvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4odW1SYXRlUmVmT2JqZWN0LmdldElkKCksIHByb3BlcnRpZXNbJ2lvYmoucmF0ZS5OYW1lJ10udG9TdHJpbmcoKSkuZ2V0T2JqZWN0QXR0cmlidXRlVmFsdWVCZWFucygpLnRvU3RyaW5nKCkgOiBudWxsCiAgICAgICAgICAgICAgICAgICAgdW1SYXRlUmVmVmFsdWUgPSB1bVJhdGVSZWZWYWx1ZSA/IHVtUmF0ZVJlZlZhbHVlLnN1YnN0cmluZyh1bVJhdGVSZWZWYWx1ZS5pbmRleE9mKCcoJykrMSx1bVJhdGVSZWZWYWx1ZS5pbmRleE9mKCcpJykpIDogbnVsbAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZih1bUFwcGxpZWRUb1ZhbHVlLnRvU3RyaW5nKCkuZXF1YWxzKCJCT1RIIikgfHwgdW1BcHBsaWVkVG9WYWx1ZS50b1N0cmluZygpLmVxdWFscygiQ1VTVE9NRVIiKSl7CiAgICAgICAgICAgICAgICAgICAgLy9nZXQgIlRPVEFMX0FNT1VOVF9DVVNUT01FUiIgZm9yIHRoYXQgY29tcG9uZW50CiAgICAgICAgICAgICAgICAgICAgZGVmIHRvdEN1c3RvbWVyID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKHVtUmF0ZU9iamVjdC5nZXRJZCgpLCBwcm9wZXJ0aWVzWydpb2JqLm9uU2l0ZVJhdGVSZXBvcnQudG90Q3VzdG9tZXInXS50b1N0cmluZygpKSA/IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbih1bVJhdGVPYmplY3QuZ2V0SWQoKSwgcHJvcGVydGllc1snaW9iai5vblNpdGVSYXRlUmVwb3J0LnRvdEN1c3RvbWVyJ10udG9TdHJpbmcoKSkuZ2V0T2JqZWN0QXR0cmlidXRlVmFsdWVCZWFucygpIDogbnVsbAogICAgICAgICAgICAgICAgICAgIGlmKCF0b3RDdXN0b21lciB8fCB0b3RDdXN0b21lclswXS5nZXRWYWx1ZSgpLnRvU3RyaW5nKCkuZXF1YWxzKCIwLjAiKSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdzPXRydWUKICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ0VtcHR5UXVvdGVSYXRlQ3VzdG9tZXIuYWRkKHVtUmF0ZVJlZlZhbHVlLnRvU3RyaW5nKCkpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSAgICAKICAgICAgICB9CgogICAgICAgIC8vT1BBQV9MQUJPVVJfUkFURVMKICAgICAgICBpZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGxhYm91clJhdGVzKSE9bnVsbCAmJiAoU3RyaW5nKWlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUobGFib3VyUmF0ZXMpICE9ICIiICYmICFpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGxhYm91clJhdGVzKS50b1N0cmluZygpLmVxdWFscygiIikpewogICAgICAgICAgICBsb2cuZGVidWcgIkxhYm91ciByYXRlczogIiArIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUobGFib3VyUmF0ZXMpCiAgICAgICAgICAgIC8qQ2ljbGFyZSB0dXR0aSBnbGkgb2dnZXR0aSBhc3NvY2lhdGkgYWwgY2FtcG8qLwogICAgICAgICAgICAvL2luc2lnaHQgY2xhc3NlcyAmIGNvbXBvbmVudHMKICAgICAgICAgICAgQ2xhc3Mgb2JqZWN0RmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RGYWNhZGUiKTsgIAogICAgICAgICAgICBDbGFzcyBvYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlIik7CiAgICAgICAgICAgIGRlZiBvYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyk7CiAgICAgICAgICAgIGRlZiBvYmplY3RGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0RmFjYWRlQ2xhc3MpOwoKICAgICAgICAgICAgZGVmIGxhYm91clJhdGVzTGlzdCA9IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUobGFib3VyUmF0ZXMpCgogICAgICAgICAgICBmb3IobGIgaW4gbGFib3VyUmF0ZXNMaXN0KXsKICAgICAgICAgICAgICAgIC8vZXh0cmFjdCBpbnNpZ2h0IGtleSBhbmcgZ2V0IG9iamVjdAogICAgICAgICAgICAgICAgZGVmIGxiUmF0ZT1sYi50b1N0cmluZygpCiAgICAgICAgICAgICAgICBkZWYgbGJSYXRlS2V5ID0gbGJSYXRlLnN1YnN0cmluZyhsYlJhdGUuaW5kZXhPZignKCcpKzEsbGJSYXRlLmluZGV4T2YoJyknKSkKICAgICAgICAgICAgICAgIGRlZiBsYlJhdGVPYmplY3QgPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEJlYW4obGJSYXRlS2V5KQogICAgICAgICAgICAgICAgLy9nZXQgIkFQUExJRURfVE8iIGZvciB0aGF0IHJhdGUKICAgICAgICAgICAgICAgIGRlZiBsYkFwcGxpZWRUbyA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbihsYlJhdGVPYmplY3QuZ2V0SWQoKSwgcHJvcGVydGllc1snaW9iai5vblNpdGVSYXRlUmVwb3J0LmFwcGxpZWRUbyddLnRvU3RyaW5nKCkpLmdldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnMoKS50b1N0cmluZygpCiAgICAgICAgICAgICAgICBkZWYgbGJBcHBsaWVkVG9WYWx1ZSA9IGxiQXBwbGllZFRvLnN1YnN0cmluZyhsYkFwcGxpZWRUby5pbmRleE9mKCcoJykrMSxsYkFwcGxpZWRUby5pbmRleE9mKCcpJykpCgogICAgICAgICAgICAgICAgZGVmIGxiUmF0ZVJlZiA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbihsYlJhdGVPYmplY3QuZ2V0SWQoKSwgcHJvcGVydGllc1snaW9iai5vblNpdGVSYXRlUmVwb3J0LnJhdGVSZWYnXS50b1N0cmluZygpKS5nZXRPYmplY3RBdHRyaWJ1dGVWYWx1ZUJlYW5zKCkudG9TdHJpbmcoKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBkZWYgbGJSYXRlUmVmS2V5CiAgICAgICAgICAgICAgICBkZWYgbGJSYXRlUmVmVmFsdWUKICAgICAgICAgICAgICAgIGlmKGxiUmF0ZVJlZi5zaXplKCkgPiAwKXsKICAgICAgICAgICAgICAgICAgICBsYlJhdGVSZWYgPSBsYlJhdGVSZWYudG9TdHJpbmcoKQogICAgICAgICAgICAgICAgICAgIGxiUmF0ZVJlZktleSA9IGxiUmF0ZVJlZi5zdWJzdHJpbmcobGJSYXRlUmVmLmluZGV4T2YoJygnKSsxLGxiUmF0ZVJlZi5pbmRleE9mKCcpJykpCiAgICAgICAgICAgICAgICAgICAgZGVmIGxiUmF0ZVJlZk9iamVjdCA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QmVhbihPUEFBICsgbGJSYXRlUmVmS2V5KQogICAgICAgICAgICAgICAgICAgIGxiUmF0ZVJlZlZhbHVlID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKGxiUmF0ZVJlZk9iamVjdC5nZXRJZCgpLCBwcm9wZXJ0aWVzWydpb2JqLnJhdGUuTmFtZSddLnRvU3RyaW5nKCkpID8gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKGxiUmF0ZVJlZk9iamVjdC5nZXRJZCgpLCBwcm9wZXJ0aWVzWydpb2JqLnJhdGUuTmFtZSddLnRvU3RyaW5nKCkpLmdldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnMoKS50b1N0cmluZygpIDogbnVsbAogICAgICAgICAgICAgICAgICAgIGxiUmF0ZVJlZlZhbHVlID0gbGJSYXRlUmVmVmFsdWUgPyBsYlJhdGVSZWZWYWx1ZS5zdWJzdHJpbmcobGJSYXRlUmVmVmFsdWUuaW5kZXhPZignKCcpKzEsbGJSYXRlUmVmVmFsdWUuaW5kZXhPZignKScpKSA6IG51bGwKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZihsYkFwcGxpZWRUb1ZhbHVlLnRvU3RyaW5nKCkuZXF1YWxzKCJCT1RIIikgfHwgbGJBcHBsaWVkVG9WYWx1ZS50b1N0cmluZygpLmVxdWFscygiQ1VTVE9NRVIiKSl7CiAgICAgICAgICAgICAgICAgICAgLy9nZXQgIlRPVEFMX0FNT1VOVF9DVVNUT01FUiIgZm9yIHRoYXQgY29tcG9uZW50CiAgICAgICAgICAgICAgICAgICAgZGVmIHRvdEN1c3RvbWVyID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKGxiUmF0ZU9iamVjdC5nZXRJZCgpLCBwcm9wZXJ0aWVzWydpb2JqLm9uU2l0ZVJhdGVSZXBvcnQudG90Q3VzdG9tZXInXS50b1N0cmluZygpKSA/IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbihsYlJhdGVPYmplY3QuZ2V0SWQoKSwgcHJvcGVydGllc1snaW9iai5vblNpdGVSYXRlUmVwb3J0LnRvdEN1c3RvbWVyJ10udG9TdHJpbmcoKSkuZ2V0T2JqZWN0QXR0cmlidXRlVmFsdWVCZWFucygpIDogbnVsbAogICAgICAgICAgICAgICAgICAgIGlmKCF0b3RDdXN0b21lciB8fCB0b3RDdXN0b21lclswXS5nZXRWYWx1ZSgpLnRvU3RyaW5nKCkuZXF1YWxzKCIwLjAiKSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdzPXRydWUKICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ0VtcHR5UXVvdGVSYXRlQ3VzdG9tZXIuYWRkKGxiUmF0ZVJlZlZhbHVlLnRvU3RyaW5nKCkpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSAgICAKICAgICAgICB9CgogICAgICAgIC8vT1BBQV9UUkFWRUxfUkFURVMKICAgICAgICBpZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHRyYXZlbFJhdGVzKSE9bnVsbCAmJiAoU3RyaW5nKWlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUodHJhdmVsUmF0ZXMpICE9ICIiICYmICFpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHRyYXZlbFJhdGVzKS50b1N0cmluZygpLmVxdWFscygiIikpewogICAgICAgICAgICBsb2cuZGVidWcgIlRyYXZlbCByYXRlczogIiArIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUodHJhdmVsUmF0ZXMpCiAgICAgICAgICAgIC8qQ2ljbGFyZSB0dXR0aSBnbGkgb2dnZXR0aSBhc3NvY2lhdGkgYWwgY2FtcG8qLwogICAgICAgICAgICAvL2luc2lnaHQgY2xhc3NlcyAmIGNvbXBvbmVudHMKICAgICAgICAgICAgQ2xhc3Mgb2JqZWN0RmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RGYWNhZGUiKTsgIAogICAgICAgICAgICBDbGFzcyBvYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlIik7CiAgICAgICAgICAgIGRlZiBvYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyk7CiAgICAgICAgICAgIGRlZiBvYmplY3RGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0RmFjYWRlQ2xhc3MpOwoKICAgICAgICAgICAgZGVmIHRyYXZlbFJhdGVzTGlzdCA9IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUodHJhdmVsUmF0ZXMpCgogICAgICAgICAgICBmb3IodHIgaW4gdHJhdmVsUmF0ZXNMaXN0KXsKICAgICAgICAgICAgICAgIC8vZXh0cmFjdCBpbnNpZ2h0IGtleSBhbmcgZ2V0IG9iamVjdAogICAgICAgICAgICAgICAgZGVmIHRyUmF0ZT10ci50b1N0cmluZygpCiAgICAgICAgICAgICAgICBkZWYgdHJSYXRlS2V5ID0gdHJSYXRlLnN1YnN0cmluZyh0clJhdGUuaW5kZXhPZignKCcpKzEsdHJSYXRlLmluZGV4T2YoJyknKSkKICAgICAgICAgICAgICAgIGRlZiB0clJhdGVPYmplY3QgPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEJlYW4odHJSYXRlS2V5KQogICAgICAgICAgICAgICAgLy9nZXQgIkFQUExJRURfVE8iIGZvciB0aGF0IHJhdGUKICAgICAgICAgICAgICAgIGRlZiB0ckFwcGxpZWRUbyA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbih0clJhdGVPYmplY3QuZ2V0SWQoKSwgcHJvcGVydGllc1snaW9iai5vblNpdGVSYXRlUmVwb3J0LmFwcGxpZWRUbyddLnRvU3RyaW5nKCkpID8gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKHRyUmF0ZU9iamVjdC5nZXRJZCgpLCBwcm9wZXJ0aWVzWydpb2JqLm9uU2l0ZVJhdGVSZXBvcnQuYXBwbGllZFRvJ10udG9TdHJpbmcoKSkuZ2V0T2JqZWN0QXR0cmlidXRlVmFsdWVCZWFucygpLnRvU3RyaW5nKCkgOiBudWxsCiAgICAgICAgICAgICAgICBkZWYgdHJBcHBsaWVkVG9WYWx1ZSA9IHRyQXBwbGllZFRvID8gdHJBcHBsaWVkVG8uc3Vic3RyaW5nKHRyQXBwbGllZFRvLmluZGV4T2YoJygnKSsxLHRyQXBwbGllZFRvLmluZGV4T2YoJyknKSkgOiBudWxsCgogICAgICAgICAgICAgICAgZGVmIHRyUmF0ZVJlZiA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbih0clJhdGVPYmplY3QuZ2V0SWQoKSwgcHJvcGVydGllc1snaW9iai5vblNpdGVSYXRlUmVwb3J0LnJhdGVSZWYnXS50b1N0cmluZygpKSA/IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbih0clJhdGVPYmplY3QuZ2V0SWQoKSwgcHJvcGVydGllc1snaW9iai5vblNpdGVSYXRlUmVwb3J0LnJhdGVSZWYnXS50b1N0cmluZygpKS5nZXRPYmplY3RBdHRyaWJ1dGVWYWx1ZUJlYW5zKCkudG9TdHJpbmcoKSA6IG51bGwKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZGVmIHRyUmF0ZVJlZktleQogICAgICAgICAgICAgICAgZGVmIHRyUmF0ZVJlZlZhbHVlCiAgICAgICAgICAgICAgICBpZih0clJhdGVSZWYuc2l6ZSgpID4gMCl7CiAgICAgICAgICAgICAgICAgICAgdHJSYXRlUmVmID0gdHJSYXRlUmVmLnRvU3RyaW5nKCkKICAgICAgICAgICAgICAgICAgICB0clJhdGVSZWZLZXkgPSB0clJhdGVSZWYuc3Vic3RyaW5nKHRyUmF0ZVJlZi5pbmRleE9mKCcoJykrMSx0clJhdGVSZWYuaW5kZXhPZignKScpKQogICAgICAgICAgICAgICAgICAgIGRlZiB0clJhdGVSZWZPYmplY3QgPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEJlYW4oT1BBQSArIHRyUmF0ZVJlZktleSkKICAgICAgICAgICAgICAgICAgICB0clJhdGVSZWZWYWx1ZSA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbih0clJhdGVSZWZPYmplY3QuZ2V0SWQoKSwgcHJvcGVydGllc1snaW9iai5yYXRlLk5hbWUnXS50b1N0cmluZygpKSA/IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbih0clJhdGVSZWZPYmplY3QuZ2V0SWQoKSwgcHJvcGVydGllc1snaW9iai5yYXRlLk5hbWUnXS50b1N0cmluZygpKS5nZXRPYmplY3RBdHRyaWJ1dGVWYWx1ZUJlYW5zKCkudG9TdHJpbmcoKSA6IG51bGwKICAgICAgICAgICAgICAgICAgICB0clJhdGVSZWZWYWx1ZSA9IHRyUmF0ZVJlZlZhbHVlID8gdHJSYXRlUmVmVmFsdWUuc3Vic3RyaW5nKHRyUmF0ZVJlZlZhbHVlLmluZGV4T2YoJygnKSsxLHRyUmF0ZVJlZlZhbHVlLmluZGV4T2YoJyknKSkgOiBudWxsCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYodHJBcHBsaWVkVG9WYWx1ZS50b1N0cmluZygpLmVxdWFscygiQk9USCIpIHx8IHRyQXBwbGllZFRvVmFsdWUudG9TdHJpbmcoKS5lcXVhbHMoIkNVU1RPTUVSIikpewogICAgICAgICAgICAgICAgICAgIC8vZ2V0ICJUT1RBTF9BTU9VTlRfQ1VTVE9NRVIiIGZvciB0aGF0IGNvbXBvbmVudAogICAgICAgICAgICAgICAgICAgIGRlZiB0b3RDdXN0b21lciA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbih0clJhdGVPYmplY3QuZ2V0SWQoKSwgcHJvcGVydGllc1snaW9iai5vblNpdGVSYXRlUmVwb3J0LnRvdEN1c3RvbWVyJ10udG9TdHJpbmcoKSkgPyBvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4odHJSYXRlT2JqZWN0LmdldElkKCksIHByb3BlcnRpZXNbJ2lvYmoub25TaXRlUmF0ZVJlcG9ydC50b3RDdXN0b21lciddLnRvU3RyaW5nKCkpLmdldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnMoKSA6IG51bGwKICAgICAgICAgICAgICAgICAgICBpZighdG90Q3VzdG9tZXIgfHwgdG90Q3VzdG9tZXJbMF0uZ2V0VmFsdWUoKS50b1N0cmluZygpLmVxdWFscygiMC4wIikpewogICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5ncz10cnVlCiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdFbXB0eVF1b3RlUmF0ZUN1c3RvbWVyLmFkZCh0clJhdGVSZWZWYWx1ZS50b1N0cmluZygpKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0gICAgCiAgICAgICAgfQoKICAgIH0KCgogICAgZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKQoKICAgIGlmICghZXJyb3JzICYmICF3YXJuaW5ncyl7CiAgICAgICAgcmV0dXJuIHRydWUKICAgIH1lbHNlewogICAgICAgIGlmKCFlcnJvcnMgJiYgd2FybmluZ3MpewogICAgICAgICAgICAvL1NlIGNpIHNvbm8gc29sbyB3YXJuaW5ncyB2ZXJpZmljbyBzZSBsJ3V0ZW50ZSBoYSBnacOgIGRpY2hpYXJhdG8gZGkgdm9sZXIgcHJvc2VndWlyZSBjb211bnF1ZQogICAgICAgICAgICAvLyAtIHRyYW5zaXRpb24gZmllbGQgIk9QQUFfQ0hFQ0tfQU5EX0NPTkZJUk0iPSJZZXMiCiAgICAgICAgICAgIC8vIC0gaW4gY2FzbyBjb250cmFyaW8gaW52aW8gaSB3YXJuaW5nIGEgRkUKCiAgICAgICAgICAgIC8vbG9nLmRlYnVnICJ0cmFuc2l0aW9uQ2hlY2s6ICIgKyBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHRyYW5zaXRpb25DaGVjaykKICAgICAgICAgICAgLy9sb2cuZGVidWcgInJlc3VsdDogIiArIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUodHJhbnNpdGlvbkNoZWNrKS50b1N0cmluZygpLmVxdWFscygiWWVzIikKICAgICAgICAgICAgaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZSh0cmFuc2l0aW9uQ2hlY2spLnRvU3RyaW5nKCkuZXF1YWxzKCJZZXMiKSl7CiAgICAgICAgICAgICAgICAvL2xvZy5kZWJ1ZyAicmV0dXJuIHRydWUgLSB0cmFuc2l0aW9uQ2hlY2sgPSBZZXMiCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZQogICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgIGRlZiB3TGlzdCA9IG5ldyBBcnJheUxpc3QoKQoKICAgICAgICAgICAgICAgIGlmKHdhcm5pbmdFbXB0eVF1b3RlUmF0ZUN1c3RvbWVyLnNpemUoKSA+IDApewogICAgICAgICAgICAgICAgICAgIGRlZiB3TGlzdENvbmZpcm1FbXB0eVJhdGUgPSBuZXcgQXJyYXlMaXN0KCkKICAgICAgICAgICAgICAgICAgICB3TGlzdENvbmZpcm1FbXB0eVJhdGUuYWRkKCJXIikKICAgICAgICAgICAgICAgICAgICB3TGlzdENvbmZpcm1FbXB0eVJhdGUuYWRkKCJDVVNUT01FUl9DT05GSVJNX0VNUFRZX1JBVEVTIikKICAgICAgICAgICAgICAgICAgICB3TGlzdENvbmZpcm1FbXB0eVJhdGUuYWRkKG51bGwpCiAgICAgICAgICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHlSYXRlLmFkZCh3YXJuaW5nRW1wdHlRdW90ZVJhdGVDdXN0b21lcikKCiAgICAgICAgICAgICAgICAgICAgd0xpc3QuYWRkKHdMaXN0Q29uZmlybUVtcHR5UmF0ZSkKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZih3YXJuaW5nRW1wdHlRdW90ZU1hdEN1c3RvbWVyLnNpemUoKSA+IDApewogICAgICAgICAgICAgICAgICAgIGRlZiB3TGlzdENvbmZpcm1FbXB0eU1hdFF1b3RlID0gbmV3IEFycmF5TGlzdCgpCiAgICAgICAgICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHlNYXRRdW90ZS5hZGQoIlciKQogICAgICAgICAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5TWF0UXVvdGUuYWRkKCJDVVNUT01FUl9DT05GSVJNX0VNUFRZX01BVF9RVU9URSIpCiAgICAgICAgICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHlNYXRRdW90ZS5hZGQobnVsbCkKICAgICAgICAgICAgICAgICAgICB3TGlzdENvbmZpcm1FbXB0eU1hdFF1b3RlLmFkZCh3YXJuaW5nRW1wdHlRdW90ZU1hdEN1c3RvbWVyKQoKICAgICAgICAgICAgICAgICAgICB3TGlzdC5hZGQod0xpc3RDb25maXJtRW1wdHlNYXRRdW90ZSkKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBvdXRwdXQuYWRkKHdMaXN0KQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigneyJXIjoiJyArIG91dHB1dC50b1N0cmluZygpICsgJyJ9JykKICAgICAgICAgICAgICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigiVyIsIG91dHB1dC50b1N0cmluZygpKSAgIAogICAgICAgICAgICB9CgogICAgICAgIH0KICAgICAgICBpZihlcnJvcnMgJiYgIXdhcm5pbmdzKXsKICAgICAgICAgICAgZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpCgogICAgICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KQogICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7IkUiOiInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnIn0nKQogICAgICAgICAgICAvL3Rocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oIkUiLCBvdXRwdXQudG9TdHJpbmcoKSkgICAKICAgICAgICB9CiAgICAgICAgaWYoZXJyb3JzICYmIHdhcm5pbmdzKXsKICAgICAgICAgICAgZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpCiAgICAgICAgICAgIGRlZiB3TGlzdCA9IG5ldyBBcnJheUxpc3QoKQoKICAgICAgICAgICAgaWYod2FybmluZ0VtcHR5UXVvdGVSYXRlQ3VzdG9tZXIuc2l6ZSgpID4gMCl7CiAgICAgICAgICAgICAgICAgICAgZGVmIHdMaXN0Q29uZmlybUVtcHR5UmF0ZSA9IG5ldyBBcnJheUxpc3QoKQogICAgICAgICAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5UmF0ZS5hZGQoIlciKQogICAgICAgICAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5UmF0ZS5hZGQoIkNVU1RPTUVSX0NPTkZJUk1fRU1QVFlfUkFURVMiKQogICAgICAgICAgICAgICAgCXdMaXN0Q29uZmlybUVtcHR5UmF0ZS5hZGQobnVsbCkKICAgICAgICAgICAgICAgICAgICB3TGlzdENvbmZpcm1FbXB0eVJhdGUuYWRkKHdhcm5pbmdFbXB0eVF1b3RlUmF0ZUN1c3RvbWVyKQoKICAgICAgICAgICAgICAgICAgICB3TGlzdC5hZGQod0xpc3RDb25maXJtRW1wdHlSYXRlKQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmKHdhcm5pbmdFbXB0eVF1b3RlTWF0Q3VzdG9tZXIuc2l6ZSgpID4gMCl7CiAgICAgICAgICAgICAgICAgICAgZGVmIHdMaXN0Q29uZmlybUVtcHR5TWF0UXVvdGUgPSBuZXcgQXJyYXlMaXN0KCkKICAgICAgICAgICAgICAgICAgICB3TGlzdENvbmZpcm1FbXB0eU1hdFF1b3RlLmFkZCgiVyIpCiAgICAgICAgICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHlNYXRRdW90ZS5hZGQoIkNVU1RPTUVSX0NPTkZJUk1fRU1QVFlfTUFUX1FVT1RFIikKICAgICAgICAgICAgICAgICAgICB3TGlzdENvbmZpcm1FbXB0eU1hdFF1b3RlLmFkZChudWxsKQogICAgICAgICAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5TWF0UXVvdGUuYWRkKHdhcm5pbmdFbXB0eVF1b3RlTWF0Q3VzdG9tZXIpCgogICAgICAgICAgICAgICAgICAgIHdMaXN0LmFkZCh3TGlzdENvbmZpcm1FbXB0eU1hdFF1b3RlKQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgb3V0cHV0LmFkZChlTGlzdCkKICAgICAgICAgICAgb3V0cHV0LmFkZCh3TGlzdCkKICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigneyJXRSI6IicgKyBvdXRwdXQudG9TdHJpbmcoKSArICcifScpCiAgICAgICAgICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigiV0UiLCBvdXRwdXQudG9TdHJpbmcoKSkgIAogICAgICAgIH0KICAgIH0KLy99Y2F0Y2goRXhjZXB0aW9uIGUpewovLyAgICBsb2cuZGVidWcgIkV4Y2VwdGlvbjogIiArIGUKLy8gICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigiRXhjZXB0aW9uIiwgZS50b1N0cmluZygpKSAgCi8vfQo=</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">8a3daba2cbc0fa976eb28f598d455a84abf02ad8</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBPUCBnZW5lcmF6aW9uZSBDb25zdW50aXZv</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5saW5rLklzc3VlTGlua1xuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxuXG4vKiBSRVNUIEFQSSBwZXIgR2VuZXJhemlvbmUgQWxsZWdhdG8gQ29uc3VudGl2byAqL1xucmVxdWVzdE1ldGhvZCA9IFwiUFVUXCI7XG5cbmRlZiByZWxhdGVzSW5Jc3N1ZUxpbms9ZmFsc2VcbmRlZiByZWxhdGVzT3V0SXNzdWVMaW5rPWZhbHNlXG5kZWYgbGlua2VkVGlja2V0cz1uZXcgQXJyYXlMaXN0KClcbkxpc3Q8SXNzdWVMaW5rPiBhbGxJbklzc3VlTGluayA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTGlua01hbmFnZXIoKS5nZXRJbndhcmRMaW5rcyhpc3N1ZS5nZXRJZCgpKVxuZm9yIChJdGVyYXRvcjxJc3N1ZUxpbms+IG91dEl0ZXJhdG9yID0gYWxsSW5Jc3N1ZUxpbmsuaXRlcmF0b3IoKTsgb3V0SXRlcmF0b3IuaGFzTmV4dCgpOykge1xuICAgIElzc3VlTGluayBpc3N1ZUxpbmsgPSAoSXNzdWVMaW5rKSBvdXRJdGVyYXRvci5uZXh0KCk7XG5cbiAgICBpZihpc3N1ZUxpbmsuaXNzdWVMaW5rVHlwZS5nZXROYW1lKCkudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snaWwubGlua2VkVGt0c1JlbGF0ZXMnXS50b1N0cmluZygpKSAmJiBpc3N1ZUxpbmsuZ2V0U291cmNlT2JqZWN0KCkuc3RhdHVzLm5hbWUgPT0gXCJDb21wbGV0ZWQgdG8gYmUgQ2xvc2VkXCIpe1xuICAgICAgICByZWxhdGVzSW5Jc3N1ZUxpbms9dHJ1ZVxuICAgICAgICBsaW5rZWRUaWNrZXRzLmFkZChpc3N1ZUxpbmsuZ2V0U291cmNlT2JqZWN0KCkudG9TdHJpbmcoKSlcbiAgICAgICAgbG9nLmRlYnVnIFwiSXNzdWUgY29uIHJlbGF0ZXNJbklzc3VlTGlua1wiXG4gICAgfVxufVxuTGlzdDxJc3N1ZUxpbms+IGFsbE91dElzc3VlTGluayA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTGlua01hbmFnZXIoKS5nZXRPdXR3YXJkTGlua3MoaXNzdWUuZ2V0SWQoKSlcbmZvciAoSXRlcmF0b3I8SXNzdWVMaW5rPiBvdXRJdGVyYXRvciA9IGFsbE91dElzc3VlTGluay5pdGVyYXRvcigpOyBvdXRJdGVyYXRvci5oYXNOZXh0KCk7KSB7XG4gICAgSXNzdWVMaW5rIGlzc3VlTGluayA9IChJc3N1ZUxpbmspIG91dEl0ZXJhdG9yLm5leHQoKTtcblxuICAgIGlmKGlzc3VlTGluay5pc3N1ZUxpbmtUeXBlLmdldE5hbWUoKS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpbC5saW5rZWRUa3RzUmVsYXRlcyddLnRvU3RyaW5nKCkpICYmIGlzc3VlTGluay5nZXREZXN0aW5hdGlvbk9iamVjdCgpLnN0YXR1cy5uYW1lID09IFwiQ29tcGxldGVkIHRvIGJlIENsb3NlZFwiKXtcbiAgICAgICAgcmVsYXRlc091dElzc3VlTGluaz10cnVlXG4gICAgICAgIGxpbmtlZFRpY2tldHMuYWRkKGlzc3VlTGluay5nZXREZXN0aW5hdGlvbk9iamVjdCgpLnRvU3RyaW5nKCkpXG4gICAgICAgIGxvZy5kZWJ1ZyBcIklzc3VlIGNvbiByZWxhdGVzT3V0SXNzdWVMaW5rXCJcbiAgICB9XG59XG5cbmJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9hdXRvbWF0aW9uL0FBL3RpY2tldC9cIiArIGlzc3VlLmtleS50b1N0cmluZygpICsgXCIvYXR0YWNobWVudC9iYWxhbmNlXCJcblxuaWYocmVsYXRlc0luSXNzdWVMaW5rIHx8IHJlbGF0ZXNPdXRJc3N1ZUxpbmspe1xuICAgIGJhc2VVUkwgPSBiYXNlVVJMICsgXCI/bGlua2VkVGlja2V0cz1cIiArIGxpbmtlZFRpY2tldHMudG9TdHJpbmcoKS5yZXBsYWNlQWxsKFwiXFxcXFtcIixcIlwiKS5yZXBsYWNlQWxsKFwiXFxcXF1cIixcIlwiKS5yZXBsYWNlQWxsKFwiIFwiLFwiXCIpXG59XG5cbmxvZy5kZWJ1ZyBcImJhc2VVcmw6IFwiICsgYmFzZVVSTFxuXG5VUkwgdXJsXG51cmwgPSBuZXcgVVJMKGJhc2VVUkwpXG5IdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xuY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJBY2NlcHRcIiwgXCIqLypcIik7XG5jb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpO1xuY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuY29ubmVjdGlvbi5jb25uZWN0KCk7XG5cbmRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbmRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuZGVmIGVMaXN0RXJyb3JzID0gbmV3IEFycmF5TGlzdCgpXG5kZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5sb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG5sb2cuZGVidWcgXCJSZXNwb25zZUNvZGU6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpXG5sb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG5cbmlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMFwiKSl7XG4gICAgbG9nLmRlYnVnIFwidXJsOiBcIiArIHVybFxuICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG4gICAgZUxpc3RFcnJvcnMuYWRkKFwiRVwiKVxuICAgIGVMaXN0RXJyb3JzLmFkZChcIkdFTkVSQVRFLUFDQ09VTlRJTkdSRVBPUlRcIilcbiAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyBcIiBcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkpXG4gICAgZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncylcbiAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpXG5cbiAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgIHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oJ3tcIkVcIjpcIicgKyBvdXRwdXQudG9TdHJpbmcoKSArICdcIn0nKVxuICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbihcIkVcIiwgb3V0cHV0LnRvU3RyaW5nKCkpXG59XG4iLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeQppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuSXNzdWVMaW5rCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbAoKUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKQpGaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKQpwcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0gewoJcHJvcGVydGllcy5sb2FkKGl0KQp9CkNhdGVnb3J5IGxvZyA9IENhdGVnb3J5LmdldEluc3RhbmNlKCJjb20ub25yZXNvbHZlLmppcmEuZ3Jvb3Z5LlBvc3RGdW5jdGlvbiIpCmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKQoKSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpOwpDdXN0b21GaWVsZE1hbmFnZXIgY3VzdG9tRmllbGRNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCk7CmRlZiByZXF1ZXN0TWV0aG9kCmRlZiBiYXNlVVJMCgovKiBSRVNUIEFQSSBwZXIgR2VuZXJhemlvbmUgQWxsZWdhdG8gQ29uc3VudGl2byAqLwpyZXF1ZXN0TWV0aG9kID0gIlBVVCI7CgpkZWYgcmVsYXRlc0luSXNzdWVMaW5rPWZhbHNlCmRlZiByZWxhdGVzT3V0SXNzdWVMaW5rPWZhbHNlCmRlZiBsaW5rZWRUaWNrZXRzPW5ldyBBcnJheUxpc3QoKQpMaXN0PElzc3VlTGluaz4gYWxsSW5Jc3N1ZUxpbmsgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZUxpbmtNYW5hZ2VyKCkuZ2V0SW53YXJkTGlua3MoaXNzdWUuZ2V0SWQoKSkKZm9yIChJdGVyYXRvcjxJc3N1ZUxpbms+IG91dEl0ZXJhdG9yID0gYWxsSW5Jc3N1ZUxpbmsuaXRlcmF0b3IoKTsgb3V0SXRlcmF0b3IuaGFzTmV4dCgpOykgewogICAgSXNzdWVMaW5rIGlzc3VlTGluayA9IChJc3N1ZUxpbmspIG91dEl0ZXJhdG9yLm5leHQoKTsKCiAgICBpZihpc3N1ZUxpbmsuaXNzdWVMaW5rVHlwZS5nZXROYW1lKCkudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snaWwubGlua2VkVGt0c1JlbGF0ZXMnXS50b1N0cmluZygpKSl7CiAgICAgICAgcmVsYXRlc0luSXNzdWVMaW5rPXRydWUKICAgICAgICBsaW5rZWRUaWNrZXRzLmFkZChpc3N1ZUxpbmsuZ2V0U291cmNlT2JqZWN0KCkudG9TdHJpbmcoKSkKICAgICAgICBsb2cuZGVidWcgIklzc3VlIGNvbiByZWxhdGVzSW5Jc3N1ZUxpbmsiCiAgICB9Cn0KTGlzdDxJc3N1ZUxpbms+IGFsbE91dElzc3VlTGluayA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTGlua01hbmFnZXIoKS5nZXRPdXR3YXJkTGlua3MoaXNzdWUuZ2V0SWQoKSkKZm9yIChJdGVyYXRvcjxJc3N1ZUxpbms+IG91dEl0ZXJhdG9yID0gYWxsT3V0SXNzdWVMaW5rLml0ZXJhdG9yKCk7IG91dEl0ZXJhdG9yLmhhc05leHQoKTspIHsKICAgIElzc3VlTGluayBpc3N1ZUxpbmsgPSAoSXNzdWVMaW5rKSBvdXRJdGVyYXRvci5uZXh0KCk7CgogICAgaWYoaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNSZWxhdGVzJ10udG9TdHJpbmcoKSkpewogICAgICAgIHJlbGF0ZXNPdXRJc3N1ZUxpbms9dHJ1ZQogICAgICAgIGxpbmtlZFRpY2tldHMuYWRkKGlzc3VlTGluay5nZXREZXN0aW5hdGlvbk9iamVjdCgpLnRvU3RyaW5nKCkpCiAgICAgICAgbG9nLmRlYnVnICJJc3N1ZSBjb24gcmVsYXRlc091dElzc3VlTGluayIKICAgIH0KfQoKYmFzZVVSTCA9ICJodHRwOi8vIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgIi9vcC9yZXN0L2F1dG9tYXRpb24vQUEvdGlja2V0LyIgKyBpc3N1ZS5rZXkudG9TdHJpbmcoKSArICIvYXR0YWNobWVudC9iYWxhbmNlIgoKaWYocmVsYXRlc0luSXNzdWVMaW5rIHx8IHJlbGF0ZXNPdXRJc3N1ZUxpbmspewogICAgYmFzZVVSTCA9IGJhc2VVUkwgKyAiP2xpbmtlZFRpY2tldHM9IiArIGxpbmtlZFRpY2tldHMudG9TdHJpbmcoKS5yZXBsYWNlQWxsKCJcXFsiLCIiKS5yZXBsYWNlQWxsKCJcXF0iLCIiKS5yZXBsYWNlQWxsKCIgIiwiIikKfQoKbG9nLmRlYnVnICJiYXNlVXJsOiAiICsgYmFzZVVSTAoKVVJMIHVybAp1cmwgPSBuZXcgVVJMKGJhc2VVUkwpCkh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7CmNvbm5lY3Rpb24uc2V0UmVxdWVzdE1ldGhvZChyZXF1ZXN0TWV0aG9kKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoIkNvbnRlbnQtVHlwZSIsICJhcHBsaWNhdGlvbi9qc29uIik7CmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KCJBY2NlcHQiLCAiKi8qIik7CmNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7CmNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTsKY29ubmVjdGlvbi5jb25uZWN0KCk7CgpkZWYgb3V0cHV0ID0gbmV3IEFycmF5TGlzdCgpCmRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKQpkZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIGVycm9yTXNncyA9IG5ldyBBcnJheUxpc3QoKQoKaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKCIyMDAiKSl7CiAgICBsb2cuZGVidWcgInVybDogIiArIHVybAogICAgbG9nLmRlYnVnICJSZXNwb25zZUNvZGU6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkKICAgIGxvZy5kZWJ1ZyAiUmVzcG9uc2VNZXNzYWdlOiIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpCiAgICBlTGlzdEVycm9ycy5hZGQoIkUiKQogICAgZUxpc3RFcnJvcnMuYWRkKCJHRU5FUkFURS1BQ0NPVU5USU5HUkVQT1JUIikKICAgIGVycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArICIgIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkpCiAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKQogICAgZUxpc3QuYWRkKGVMaXN0RXJyb3JzKQoKICAgIG91dHB1dC5hZGQoZUxpc3QpCiAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7IkUiOiInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnIn0nKQogICAgLy90aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCJFIiwgb3V0cHV0LnRvU3RyaW5nKCkpCn0K</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">c3e26a81-b0c5-4e49-a913-de7bbca4705b</arg>
              <arg name="FIELD_NOTES">YCFgUkVTVCBBUEk6IEdlbmVyYXppb25lIENvbnN1bnRpdm8gQ2xpZW50ZSBkYSB0ZW1wbGF0ZQ==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="disabled">false</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="1021" name="Riapri Rapporto di Intervento">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_NOTES">YCFgT1BBQV9TQUxFU19PUkRFUl9EQVRFIGFuZCBPUEFBX1BVUkNIQVNFX09SREVSX0RBVEUgc2hvdWxkIGJlIG51bGwgaW4gb3JkZXIgdG8gcmVvcGVuIHRoZSB0aWNrZXQgLSBvdGhlcndpc2UgdGhlIHRpY2tldCBoYXMgYWxyZWFkeSBiZWVuIGFjY291bnRlZCBzbyBpdCBjYW5ub3QgYmUgcmVvcGVuZWQ=</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgY2ZWYWx1ZXNbJ09QX1NBTEVTX09SREVSX0RBVEUnXSA9PSBudWxsICYmIGNmVmFsdWVzWydPUF9QVVJDSEFTRV9PUkRFUl9EQVRFJ10gPT0gbnVsbHx8fA==</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">e855fbdb-cb53-4bf8-922b-167760b6e692</arg>
                <arg name="FIELD_NOTES">YCFgTWFpbnRlbmFuY2UgVGlja2V0</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnTWFpbnRlbmFuY2UgVGlja2V0JyB8fCBpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnUGxhbm5lZCBNYWludGVuYW5jZSBUaWNrZXQnIiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
              <condition type="class">
                <arg name="conditionList">3</arg>
                <arg name="comparisonType">1</arg>
                <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                <arg name="class.name">com.googlecode.jsu.workflow.condition.ValueFieldCondition</arg>
                <arg name="fieldValue">Yes</arg>
                <arg name="fieldsList">customfield_23409</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="18">
              <post-functions>
                <function type="class">
                  <arg name="field">customfield_22693</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22660</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22644</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22641</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user"></arg>
                  <arg name="field">customfield_22666</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="field3">customfield_23402</arg>
                  <arg name="field2">customfield_23401</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">93ee91428be862f784d2facaa9da5be13f63a66b</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IFJlbW92ZSBPblNpdGUgUmVwb3J0IEF0dGFjaG1lbnRz</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT"></arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">9750ea32-a13d-4474-8c20-074bb1967d78</arg>
                  <arg name="FIELD_NOTES">YCFgQ2xlYXIgY2FjaGU=</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxuXG4vKiBSRVNUIEFQSSBwZXIgR2VuZXJhemlvbmUgQWxsZWdhdG8gUmFwcG9ydG8gZGkgSW50ZXJ2ZW50byAqL1xucmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuLypTY3JpcHQgVmFyaWFibGVzKi9cbi8vUGVyIHRlc3QgZGEgY29uc29sZVxuLy9Jc3N1ZSBpc3N1ZSA9IGlzc3VlTWFuYWdlci5nZXRJc3N1ZUJ5S2V5SWdub3JlQ2FzZShcIk9QVVQtMTQwNjJcIilcbmJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9hdXRvbWF0aW9uL2NsZWFyQ2FjaGUvZGF0YU9iamVjdFwiXG5kZWYgYm9keV9yZXEgPSBbXVxuVVJMIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcbkh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbmNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5sb2cuZGVidWcgXCJib2R5X3JlcTogXCIgKyBib2R5X3JlcVxuY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxubG9nLmRlYnVnIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5jb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAwXCIpKXtcbiAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcbn0iLCJzY3JpcHRQYXRoIjpudWxsfQ==</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="disabled">false</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="7" name="Closed">
      <meta name="jira.status.id">6</meta>
      <actions>
        <action id="231" name="Genera Offerta per Materiali da Preventivare" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">20119</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_NOTES">YCFgT1A6IEdlbmVyYXppb25lIHRpY2tldCBkaSBwcmV2ZW50aXZhemlvbmUgLSBzb2xvIHNlIGNpIHNvbm8gT1BfUkVRVUlSRURfTUFURVJJQUxTIGUgc2UgT1BBQV9RVU9URV9USUNLRVQgPSBudWxs</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KY2ZWYWx1ZXNbcHJvcGVydGllc1snY2YucmVxdWlyZWRNYXRlcmlhbHMnXV0gIT0gbnVsbCAmJiBjZlZhbHVlc1twcm9wZXJ0aWVzWydjZi5vZmZlckxpbmtlZElzc3VlJ11dID09IG51bGx8fHw=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="7">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="targetIssueTypeDefinedByCfSelection"></arg>
                  <arg name="issueTypeId">13001</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">SAME</arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="transitionAttachmentsOperation">copy</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_ASSIGNEE</arg>
                  <arg name="targetProjectSelectedCustomField"></arg>
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:INWARD</arg>
                  <arg name="field.enablingCustomFieldId">customfield_22609</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="subFunctions">[{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22609&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22609&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22600&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22600&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22822&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22822&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22601&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22601&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22602&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22602&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22813&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22813&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23235&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23235&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22651&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22651&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22700&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22700&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;priority&quot;,&quot;destinationFieldId&quot;:&quot;priority&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22814&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22814&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23203&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23203&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23237&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23237&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_21909&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21909&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22649&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22629&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Yes&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22681&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23401&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21908&quot;}}]</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">4fd7d272cffa1401b740b9188cdaeaaf5185c323</arg>
                  <arg name="FIELD_NOTES">YCFgRlNNOiBVcGRhdGUgc3RhdHVzIG9uIGp1c3QgY3JlYXRlZCBSZXBhaXIgUXVvdGF0aW9uIGlzc3Vl</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZQppbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb24KaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3IKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXIKaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGdyb292eS5qc29uLkpzb25CdWlsZGVyCmltcG9ydCBncm9vdnkuanNvbi5Kc29uU2x1cnBlcgppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXIKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb25maWcudXRpbC5KaXJhSG9tZQppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmV2ZW50LnR5cGUuRXZlbnREaXNwYXRjaE9wdGlvbgppbXBvcnQgamF2YS50ZXh0LlNpbXBsZURhdGVGb3JtYXQKaW1wb3J0IGphdmEudGV4dC5QYXJzZUV4Y2VwdGlvbgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbmZpZy5wcm9wZXJ0aWVzLkFQS2V5cwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuTGlua0NvbGxlY3Rpb25JbXBsOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuSXNzdWVMaW5rOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk1vZGlmaWVkVmFsdWUKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS51dGlsLkRlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlcgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmluZGV4Lklzc3VlSW5kZXhpbmdTZXJ2aWNlCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbAoKUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKQpGaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKQpwcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0gewoJcHJvcGVydGllcy5sb2FkKGl0KQp9CmRlZiBDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQpsb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRykKSXNzdWVJbmRleGluZ1NlcnZpY2UgCWlzc3VlSW5kZXhpbmdTZXJ2aWNlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q29tcG9uZW50KElzc3VlSW5kZXhpbmdTZXJ2aWNlKQoKLypTY3JpcHQgVmFyaWFibGVzKi8KLy9QZXIgUG9zdCBGdW5jdGlvbgppc3N1ZSA9IGlzc3VlCi8vUGVyIHRlc3QgZGEgY29uc29sZQovL0lzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKQovL2lzc3VlID0gaXNzdWVNYW5hZ2VyLmdldElzc3VlQnlLZXlJZ25vcmVDYXNlKCJPUFVULTI1NyIpCmxvZy5kZWJ1ZyAiSXNzdWU6ICIgKyBpc3N1ZQpkZWYgZm91bmQ9ZmFsc2UKZGVmIGxpbmtlZElzc3VlCmRlZiBpc3N1ZVNlcnZpY2UgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZVNlcnZpY2UoKQoKTGlzdDxJc3N1ZUxpbms+IGFsbEluSXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldElud2FyZExpbmtzKGlzc3VlLmdldElkKCkpOwpsb2cuZGVidWcgImFsbEluSXNzdWVMaW5rOiAiICsgYWxsSW5Jc3N1ZUxpbmsKZm9yIChJdGVyYXRvcjxJc3N1ZUxpbms+IG91dEl0ZXJhdG9yID0gYWxsSW5Jc3N1ZUxpbmsuaXRlcmF0b3IoKTsgb3V0SXRlcmF0b3IuaGFzTmV4dCgpOykgewogICAgSXNzdWVMaW5rIGlzc3VlTGluayA9IChJc3N1ZUxpbmspIG91dEl0ZXJhdG9yLm5leHQoKTsKICAgIGRlZiBsaW5rZWRJc3N1ZVRlbXAgPSBpc3N1ZUxpbmsuZ2V0U291cmNlT2JqZWN0KCkKICAgIFN0cmluZyB0eXBlID0gbGlua2VkSXNzdWVUZW1wLmdldElzc3VlVHlwZSgpLmdldE5hbWUoKTsKCiAgICBsb2cuZGVidWcoaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpKSAKICAgIAogICAgaWYoaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNUcmlnZ2VyJ10udG9TdHJpbmcoKSkpewogICAgICAgIGZvdW5kPXRydWUKICAgICAgICBsaW5rZWRJc3N1ZT1saW5rZWRJc3N1ZVRlbXAKICAgIH0KfQpsb2cuZGVidWcgImZvdW5kOiAiICsgZm91bmQKCmlmKGZvdW5kKXsKCWRlZiBkZXN0U3RhdHVzT2JqZWN0ID0gbGlua2VkSXNzdWUuZ2V0U3RhdHVzT2JqZWN0KCkKICAgIGxvZy5kZWJ1ZyAiZGVzdFN0YXR1c09iamVjdDogIiArIGRlc3RTdGF0dXNPYmplY3QKICAgIGxvZy5kZWJ1ZyAibGlua2VkSXNzdWU6ICIgKyBsaW5rZWRJc3N1ZQogICAgZGVmIHVzZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRKaXJhQXV0aGVudGljYXRpb25Db250ZXh0KCkuZ2V0TG9nZ2VkSW5Vc2VyKCkKCS8vIElzIHRoZSBzdGF0dXMgb2YgdGhlIGxpbmtlZCBpc3N1ZSAiSW5zdGFsbGluZyIgPwogICAgCiAgICBkZWYgY3VzdG9tRmllbGRNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuY3VzdG9tRmllbGRNYW5hZ2VyCiAgICBkZWYgb2ZmZXJJc3N1ZUZpZWxkID0gY3VzdG9tRmllbGRNYW5hZ2VyLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi5vZmZlckxpbmtlZElzc3VlJ10udG9TdHJpbmcoKSkuZmlyc3QoKQogICAgZGVmIG1haW50ZW5hbmNlSXNzdWVGaWVsZCA9IGN1c3RvbUZpZWxkTWFuYWdlci5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YubWFpbnRlbmFuY2VMaW5rZWRJc3N1ZSddID8gcHJvcGVydGllc1snY2YubWFpbnRlbmFuY2VMaW5rZWRJc3N1ZSddLnRvU3RyaW5nKCkgOiAiT1BfTUFJTlRFTkFOQ0VfTElOS0VEX0lTU1VFIikuZmlyc3QoKQogICAgZGVmIG9mZmVySXNzdWVCb29sRmllbGQgPSBjdXN0b21GaWVsZE1hbmFnZXIuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLm9mZmVyVGt0J10udG9TdHJpbmcoKSkuZmlyc3QoKQogICAgCiAgICAvL1NldCBPUEFBX09GRkVSX1RLVD1ZZXMgb24ganVzdCBjcmVhdGVkIGxpbmtlZElzc3VlCiAgICBkZWYgY3VycmVudFVzZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRKaXJhQXV0aGVudGljYXRpb25Db250ZXh0KCkuZ2V0TG9nZ2VkSW5Vc2VyKCkKICAgIGRlZiBtaSA9IChNdXRhYmxlSXNzdWUpIGxpbmtlZElzc3VlCgogICAgZGVmIGZpZWxkQ29uZmlnID0gb2ZmZXJJc3N1ZUJvb2xGaWVsZC5nZXRSZWxldmFudENvbmZpZyhsaW5rZWRJc3N1ZSkKICAgIGxvZy53YXJuICJmaWVsZENvbmZpZzogIiArIGZpZWxkQ29uZmlnCiAgICBkZWYgY2ZOZXdWYWx1ZSA9IENvbXBvbmVudEFjY2Vzc29yLm9wdGlvbnNNYW5hZ2VyLmdldE9wdGlvbnMoZmllbGRDb25maWcpPy5maW5kIHsgaXQudG9TdHJpbmcoKSA9PSAiWWVzIiB9CiAgICBvZmZlcklzc3VlQm9vbEZpZWxkLnVwZGF0ZVZhbHVlKG51bGwsIGxpbmtlZElzc3VlLCBuZXcgTW9kaWZpZWRWYWx1ZShsaW5rZWRJc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKG9mZmVySXNzdWVCb29sRmllbGQpLCBjZk5ld1ZhbHVlKSwgbmV3IERlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlcigpKQoJbWFpbnRlbmFuY2VJc3N1ZUZpZWxkLnVwZGF0ZVZhbHVlKG51bGwsIGxpbmtlZElzc3VlLCBuZXcgTW9kaWZpZWRWYWx1ZShsaW5rZWRJc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKG1haW50ZW5hbmNlSXNzdWVGaWVsZCksIGlzc3VlLmtleS50b1N0cmluZygpKSwgbmV3IERlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlcigpKQogICAgCiAgICBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKS51cGRhdGVJc3N1ZShjdXJyZW50VXNlciwgbWksIEV2ZW50RGlzcGF0Y2hPcHRpb24uRE9fTk9UX0RJU1BBVENILCBmYWxzZSk7CiAgICBpc3N1ZUluZGV4aW5nU2VydmljZS5yZUluZGV4KGxpbmtlZElzc3VlKSAgICAKICAgIAogICAgbG9nLmRlYnVnICJvZmZlcklzc3VlRmllbGQ6ICIgKyBvZmZlcklzc3VlRmllbGQKICAgIGxvZy5kZWJ1ZyAibGlua2VkSXNzdWU6ICIgKyBsaW5rZWRJc3N1ZQogICAgb2ZmZXJJc3N1ZUZpZWxkLnVwZGF0ZVZhbHVlKG51bGwsIGlzc3VlLCBuZXcgTW9kaWZpZWRWYWx1ZShpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKG9mZmVySXNzdWVGaWVsZCksIGxpbmtlZElzc3VlLmtleS50b1N0cmluZygpKSwgbmV3IERlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlcigpKQogICAgbG9nLmRlYnVnICJ1cGRhdGVkOiAiICsgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShvZmZlcklzc3VlRmllbGQpCiAgICAKICAgIGlmIChkZXN0U3RhdHVzT2JqZWN0Lm5hbWUgPT0gcHJvcGVydGllc1snd2Yub3BlbiddLnRvU3RyaW5nKCkpIHsKICAgICAgICAvLyBQcmVwYXJlIG91ciBpbnB1dCBmb3IgdGhlIHRyYW5zaXRpb24KICAgICAgICBkZWYgaXNzdWVJbnB1dFBhcmFtZXRlcnMgPSBpc3N1ZVNlcnZpY2UubmV3SXNzdWVJbnB1dFBhcmFtZXRlcnMoKQogICAgICAgIGlzc3VlSW5wdXRQYXJhbWV0ZXJzLndpdGggewogICAgICAgICAgICBzZXRTa2lwU2NyZWVuQ2hlY2sodHJ1ZSkKICAgICAgICB9CiAgICAgICAgLy8gVmFsaWRhdGUgdHJhbnNpdGlvbmluZyB0aGUgbGlua2VkIGlzc3VlIHRvICJTaWducyBOZWVkZWQiCiAgICAgICAgZGVmIHZhbGlkYXRpb25SZXN1bHQgPSBpc3N1ZVNlcnZpY2UudmFsaWRhdGVUcmFuc2l0aW9uKHVzZXIsIGxpbmtlZElzc3VlLmlkLCAocHJvcGVydGllc1snd2YudHIuYXNrUXVvdGUnXSA/IHByb3BlcnRpZXNbJ3dmLnRyLmFza1F1b3RlJ10udG9JbnRlZ2VyKCkgOiAxMSksIGlzc3VlSW5wdXRQYXJhbWV0ZXJzKQogICAgICAgIGlmICh2YWxpZGF0aW9uUmVzdWx0LmlzVmFsaWQoKSkgewogICAgICAgICAgICAvLyBQZXJmb3JtIHRoZSB0cmFuc2l0aW9uCiAgICAgICAgICAgIGRlZiBpc3N1ZVJlc3VsdCA9IGlzc3VlU2VydmljZS50cmFuc2l0aW9uKHVzZXIsIHZhbGlkYXRpb25SZXN1bHQpCiAgICAgICAgICAgIGlmICghIGlzc3VlUmVzdWx0LmlzVmFsaWQoKSkgewogICAgICAgICAgICAgICAgbG9nLmRlYnVnKCJGYWlsZWQgdG8gdHJhbnNpdGlvbiB0YXNrICR7ZGVzdElzc3VlLmtleX0sIGVycm9yczogJHtpc3N1ZVJlc3VsdC5lcnJvckNvbGxlY3Rpb259IikKICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICBsb2cuZGVidWcoIlRyYW5zYXppb25lIGZhdHRhIikKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGxvZy5kZWJ1ZygiQ291bGQgbm90IHRyYW5zaXRpb24gdGFzayAke2Rlc3RJc3N1ZS5rZXl9LCBlcnJvcnM6ICR7dmFsaWRhdGlvblJlc3VsdC5lcnJvckNvbGxlY3Rpb259IikKICAgICAgICB9CiAgICB9CiAgICAKfQ==</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23401</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="241" name="Riapri Tkt">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">dcdea165-76ee-4240-ba52-c437fa030551</arg>
                <arg name="FIELD_NOTES">YCFgT1A6IE9QQUFfU0FMRVNfT1JERVJfREFURSBhbmQgT1BBQV9QVVJDSEFTRV9PUkRFUl9EQVRFIHNob3VsZCBiZSBudWxsIGluIG9yZGVyIHRvIHJlb3BlbiB0aGUgdGlja2V0IC0gb3RoZXJ3aXNlIHRoZSB0aWNrZXQgaGFzIGFscmVhZHkgYmVlbiBhY2NvdW50ZWQgc28gaXQgY2Fubm90IGJlIHJlb3BlbmVk</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJjZlZhbHVlc1snT1BfU0FMRVNfT1JERVJfREFURSddID09IG51bGwgfHwgY2ZWYWx1ZXNbJ09QX1BVUkNIQVNFX09SREVSX0RBVEUnXSA9PSBudWxsIiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="6">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22659</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="field.copyFieldSource1"></arg>
                  <arg name="textValue">-1</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="workflowName-textValue">OPAA: PM Task Workflow</arg>
                  <arg name="performTransitionAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="scopeType">PARENT</arg>
                  <arg name="destination-scopeTarget">SUB_TASK</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitieslinkedtransition-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="integerValue">21</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.linkedtransition.LinkedTransitionFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="status"></arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22693</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="field">resolution</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="1121" name="Genera Rapporto di Intervento FAAC" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19910</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">da6b0975-6a4b-46f7-a46f-15e624ccc794</arg>
                <arg name="FIELD_NOTES">YCFgQXZhaWxhYmxlIG9ubHkgaWYgbm8gT05TSVRFIFJFUE9SVCBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBleGlzdHMgb24gdGhlIHRpY2tldA==</arg>
                <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxubG9nLmRlYnVnIFwiT25TaXRlIFJlcG9ydCBwZXIgaXNzdWU6IFwiICsgaXNzdWUua2V5XG4vKiBSRVNUIEFQSSBwZXIgR2VuZXJhemlvbmUgQWxsZWdhdG8gUmFwcG9ydG8gZGkgSW50ZXJ2ZW50byAqL1xucmVxdWVzdE1ldGhvZCA9IFwiUFVUXCI7XG4vKlNjcmlwdCBWYXJpYWJsZXMqL1xuLy9QZXIgdGVzdCBkYSBjb25zb2xlXG4vL0lzc3VlIGlzc3VlID0gaXNzdWVNYW5hZ2VyLmdldElzc3VlQnlLZXlJZ25vcmVDYXNlKFwiT1BVVC0xNDA2MlwiKVxuXG5pbnQgT1BBQSA9IHByb3BlcnRpZXNbJ2lzY2hlbWEuYWEuaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5pbnQgREJPID0gcHJvcGVydGllc1snaXNjaGVtYS5kYm8uaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5cbi8qUmltb3ppb25lIGFsbGVnYXRvIHJhcHBvcnRvIGRpIGludGVydmVudG8gYXBwZW5hIGNyZWF0byovXG4vKiBHZXQgSW5zaWdodCBJUUwgRmFjYWRlIGZyb20gcGx1Z2luIGFjY2Vzc29yICovXG5DbGFzcyBpcWxGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5JUUxGYWNhZGVcIik7IFxuZGVmIGlxbEZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShpcWxGYWNhZGVDbGFzcyk7XG5cbi8qIEdldCBJbnNpZ2h0IE9iamVjdCBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdEZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdEZhY2FkZVwiKTtcbmRlZiBvYmplY3RGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0RmFjYWRlQ2xhc3MpO1xuXG4vKiBHZXQgSW5zaWdodCBPYmplY3QgVHlwZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdFR5cGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlRmFjYWRlXCIpO1xuZGVmIG9iamVjdFR5cGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUZhY2FkZUNsYXNzKTtcblxuLyogR2V0IEluc2lnaHQgT2JqZWN0IEF0dHJpYnV0ZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlXCIpO1xuZGVmIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZUNsYXNzKTtcblxuQ2xhc3Mgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LnNlcnZpY2VzLm1vZGVsLmZhY3RvcnkuT2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlcIik7XG5kZWYgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnkgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyk7XG5cbi8qIFNwZWNpZnkgdGhlIHNjaGVtYSBpZCBhcyB3ZWxsIGFzIHRoZSBJUUwgdGhhdCB3aWxsIGZldGNoIG9iamVjdHMuIEluIHRoaXMgY2FzZSBhbGwgb2JqZWN0cyB3aXRoIE5hbWUgbWF0Y2hpbmcgdGhlIHZhbHVlQ0YsIGJlIHN1cmUgdG8gaW5jbHVkZSBcIiBhcm91bmQgdmFsdWUgKi9cbmRlZiBvYmplY3RzID0gaXFsRmFjYWRlLmZpbmRPYmplY3RzQnlJUUxBbmRTY2hlbWEoREJPLCBcIlxcXCJcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmNhdGVnb3J5UmVmJ10udG9TdHJpbmcoKSArIFwiXFxcIi5OYW1lIExJS0UgXFxcIlJhcHBvcnRvIGRpIGludGVydmVudG9cXFwiIEFORCBBVVRPX0dFTkVSQVRFRD10cnVlIEFORCBcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmRlbGV0ZWQnXS50b1N0cmluZygpICsgXCIhPXRydWUgQU5EIG9iamVjdCBIQVZJTkcgY29ubmVjdGVkVGlja2V0cyhrZXkgPSBcIiArIGlzc3VlLmtleS50b1N0cmluZygpICsgXCIpXCIpOyAvLyBTZWUgdGhlIGNvbXBsZXRlIGxpc3Qgb2YgcG9zc2libGUgSVFMIG9uIHRoZSBJbnNpZ2h0IFF1ZXJ5IExhbmd1YWdlIGRvY3VtZW50YXRpb24gcGFnZVxuLyogSWYgdGhpcyBpcyBhIG1hbmRhdG9yeSBmaWVsZCB5b3Ugc2hvdWxkIGJlIGFibGUgdG8gZG8gdGhpczogKi9cbmxvZy5kZWJ1ZyBcIklRTDogXCIgKyBcIlxcXCJcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmNhdGVnb3J5UmVmJ10udG9TdHJpbmcoKSArIFwiXFxcIi5OYW1lIExJS0UgXFxcIlJhcHBvcnRvIGRpIGludGVydmVudG9cXFwiIEFORCBcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmRlbGV0ZWQnXS50b1N0cmluZygpICsgXCIhPXRydWUgQU5EIG9iamVjdCBIQVZJTkcgY29ubmVjdGVkVGlja2V0cyhrZXkgPSBcIiArIGlzc3VlLmtleS50b1N0cmluZygpICsgXCIpXCJcblxuLyohIURhIHJpbXVvdmVyZSBhcHBlbmEgcmlzb2x0aSBpIGJ1ZyEhKi9cbmlmKChvYmplY3RzID09IG51bGwgfHwgb2JqZWN0cy5zaXplPT0wKSAvKiYmICFpc3N1ZS5nZXRJc3N1ZVR5cGUoKS5uYW1lLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2l0LnBsYW5uZWRNYWludGVuYW5jZSddKSovKXtcbiAgICBwYXNzZXNDb25kaXRpb24gPSB0cnVlXG59ZWxzZXtcbiAgICBwYXNzZXNDb25kaXRpb24gPSBmYWxzZVxufVxuIiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.CustomScriptCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">c83eed7c-052e-4c06-ac5e-c2925515cc02</arg>
                <arg name="FIELD_NOTES">YCFgTWFpbnRlbmFuY2UgVGlja2V0IE9SIFBNIFRpY2tldA==</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnTWFpbnRlbmFuY2UgVGlja2V0JyB8fCBpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnUGxhbm5lZCBNYWludGVuYW5jZSBUaWNrZXQnIiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">9fe0fa5191d4b6a91ba7485380ff8d0a9fda8fe7</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBPUCBnZW5lcmF6aW9uZSBSYXBwb3J0byBkaSBpbnRlcnZlbnRv</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxubG9nLmRlYnVnIFwiT25TaXRlIFJlcG9ydCBwZXIgaXNzdWU6IFwiICsgaXNzdWUua2V5XG4vKiBSRVNUIEFQSSBwZXIgR2VuZXJhemlvbmUgQWxsZWdhdG8gUmFwcG9ydG8gZGkgSW50ZXJ2ZW50byAqL1xucmVxdWVzdE1ldGhvZCA9IFwiUFVUXCI7XG4vKlNjcmlwdCBWYXJpYWJsZXMqL1xuLy9QZXIgdGVzdCBkYSBjb25zb2xlXG4vL0lzc3VlIGlzc3VlID0gaXNzdWVNYW5hZ2VyLmdldElzc3VlQnlLZXlJZ25vcmVDYXNlKFwiT1BVVC0xNDA2MlwiKVxuXG5pbnQgT1BBQSA9IHByb3BlcnRpZXNbJ2lzY2hlbWEuYWEuaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5pbnQgREJPID0gcHJvcGVydGllc1snaXNjaGVtYS5kYm8uaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5cbi8qUmltb3ppb25lIGFsbGVnYXRvIHJhcHBvcnRvIGRpIGludGVydmVudG8gYXBwZW5hIGNyZWF0byovXG4vKiBHZXQgSW5zaWdodCBJUUwgRmFjYWRlIGZyb20gcGx1Z2luIGFjY2Vzc29yICovXG5DbGFzcyBpcWxGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5JUUxGYWNhZGVcIik7IFxuZGVmIGlxbEZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShpcWxGYWNhZGVDbGFzcyk7XG5cbi8qIEdldCBJbnNpZ2h0IE9iamVjdCBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdEZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdEZhY2FkZVwiKTtcbmRlZiBvYmplY3RGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0RmFjYWRlQ2xhc3MpO1xuXG4vKiBHZXQgSW5zaWdodCBPYmplY3QgVHlwZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdFR5cGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlRmFjYWRlXCIpO1xuZGVmIG9iamVjdFR5cGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUZhY2FkZUNsYXNzKTtcblxuLyogR2V0IEluc2lnaHQgT2JqZWN0IEF0dHJpYnV0ZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlXCIpO1xuZGVmIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZUNsYXNzKTtcblxuQ2xhc3Mgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LnNlcnZpY2VzLm1vZGVsLmZhY3RvcnkuT2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlcIik7XG5kZWYgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnkgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyk7XG5cbi8qIFNwZWNpZnkgdGhlIHNjaGVtYSBpZCBhcyB3ZWxsIGFzIHRoZSBJUUwgdGhhdCB3aWxsIGZldGNoIG9iamVjdHMuIEluIHRoaXMgY2FzZSBhbGwgb2JqZWN0cyB3aXRoIE5hbWUgbWF0Y2hpbmcgdGhlIHZhbHVlQ0YsIGJlIHN1cmUgdG8gaW5jbHVkZSBcIiBhcm91bmQgdmFsdWUgKi9cbmRlZiBvYmplY3RzID0gaXFsRmFjYWRlLmZpbmRPYmplY3RzQnlJUUxBbmRTY2hlbWEoREJPLCBcIlxcXCJcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmNhdGVnb3J5UmVmJ10udG9TdHJpbmcoKSArIFwiXFxcIi5OYW1lIExJS0UgXFxcIlJhcHBvcnRvIGRpIGludGVydmVudG9cXFwiIEFORCBBVVRPX0dFTkVSQVRFRCA9IHRydWUgQU5EIFwiICsgcHJvcGVydGllc1snaW9iai5hdHRhY2htZW50Q2F0ZWdvcnkuZGVsZXRlZCddLnRvU3RyaW5nKCkgKyBcIiE9dHJ1ZSBBTkQgb2JqZWN0IEhBVklORyBjb25uZWN0ZWRUaWNrZXRzKGtleSA9IFwiICsgaXNzdWUua2V5LnRvU3RyaW5nKCkgKyBcIilcIik7IC8vIFNlZSB0aGUgY29tcGxldGUgbGlzdCBvZiBwb3NzaWJsZSBJUUwgb24gdGhlIEluc2lnaHQgUXVlcnkgTGFuZ3VhZ2UgZG9jdW1lbnRhdGlvbiBwYWdlXG4vKiBJZiB0aGlzIGlzIGEgbWFuZGF0b3J5IGZpZWxkIHlvdSBzaG91bGQgYmUgYWJsZSB0byBkbyB0aGlzOiAqL1xubG9nLmRlYnVnIFwiSVFMOiBcIiArIFwiXFxcIlwiICsgcHJvcGVydGllc1snaW9iai5hdHRhY2htZW50Q2F0ZWdvcnkuY2F0ZWdvcnlSZWYnXS50b1N0cmluZygpICsgXCJcXFwiLk5hbWUgTElLRSBcXFwiUmFwcG9ydG8gZGkgaW50ZXJ2ZW50b1xcXCIgQU5EIFwiICsgcHJvcGVydGllc1snaW9iai5hdHRhY2htZW50Q2F0ZWdvcnkuZGVsZXRlZCddLnRvU3RyaW5nKCkgKyBcIiE9dHJ1ZSBBTkQgb2JqZWN0IEhBVklORyBjb25uZWN0ZWRUaWNrZXRzKGtleSA9IFwiICsgaXNzdWUua2V5LnRvU3RyaW5nKCkgKyBcIilcIlxuXG4vKiEhRGEgcmltdW92ZXJlIGFwcGVuYSByaXNvbHRpIGkgYnVnISEqL1xuaWYoKG9iamVjdHMgPT0gbnVsbCB8fCBvYmplY3RzLnNpemU9PTApIC8qJiYgIWlzc3VlLmdldElzc3VlVHlwZSgpLm5hbWUudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snaXQucGxhbm5lZE1haW50ZW5hbmNlJ10pKi8pe1xuICAgIGJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9hdXRvbWF0aW9uL0FBL3RpY2tldC9cIiArIGlzc3VlLmtleS50b1N0cmluZygpICsgXCIvYXR0YWNobWVudC9vbnNpdGVcIlxuICAgIGxvZy5kZWJ1ZyBcImJhc2VVcmw6IFwiICsgYmFzZVVSTFxuXG4gICAgVVJMIHVybFxuICAgIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcbiAgICBIdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdE1ldGhvZChyZXF1ZXN0TWV0aG9kKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJBY2NlcHRcIiwgXCIqLypcIik7XG4gICAgY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbiAgICBjb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5jb25uZWN0KCk7XG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcblxuICAgIGRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5cbiAgICBpZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDBcIikpe1xuICAgICAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIkdFTkVSQVRFLU9OU0lURVJFUE9SVFwiKVxuICAgICAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyBcIiBcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChlcnJvck1zZ3MpXG4gICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycylcblxuICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcbiAgICB9XG5cbn1cbiIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeQppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lcgppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGwKClByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKCkKRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJykKcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHsKCXByb3BlcnRpZXMubG9hZChpdCkKfQpDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQpsb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRykKCklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTsKQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpOwpkZWYgcmVxdWVzdE1ldGhvZApkZWYgYmFzZVVSTApsb2cuZGVidWcgIk9uU2l0ZSBSZXBvcnQgcGVyIGlzc3VlOiAiICsgaXNzdWUua2V5Ci8qIFJFU1QgQVBJIHBlciBHZW5lcmF6aW9uZSBBbGxlZ2F0byBSYXBwb3J0byBkaSBJbnRlcnZlbnRvICovCnJlcXVlc3RNZXRob2QgPSAiUFVUIjsKCmJhc2VVUkwgPSAiaHR0cDovLyIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArICIvb3AvcmVzdC9hdXRvbWF0aW9uL0FBL3RpY2tldC8iICsgaXNzdWUua2V5LnRvU3RyaW5nKCkgKyAiL2F0dGFjaG1lbnQvb25zaXRlIgpsb2cuZGVidWcgImJhc2VVcmw6ICIgKyBiYXNlVVJMCgpVUkwgdXJsCnVybCA9IG5ldyBVUkwoYmFzZVVSTCkKSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eSgiQ29udGVudC1UeXBlIiwgImFwcGxpY2F0aW9uL2pzb24iKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoIkFjY2VwdCIsICIqLyoiKTsKY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTsKY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpOwpjb25uZWN0aW9uLmNvbm5lY3QoKTsKbG9nLmRlYnVnICJSZXNwb25zZUNvZGU6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkKbG9nLmRlYnVnICJSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKCmRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpCmRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKQpkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpCgppZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoIjIwMCIpKXsKICAgIGxvZy5kZWJ1ZyAidXJsOiAiICsgdXJsCiAgICBsb2cuZGVidWcgIlJlc3BvbnNlQ29kZToiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKQogICAgbG9nLmRlYnVnICJSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKICAgIGVMaXN0RXJyb3JzLmFkZCgiRSIpCiAgICBlTGlzdEVycm9ycy5hZGQoIkdFTkVSQVRFLU9OU0lURVJFUE9SVCIpCiAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyAiICIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpKQogICAgZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncykKICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycykKCiAgICBvdXRwdXQuYWRkKGVMaXN0KQogICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigneyJFIjoiJyArIG91dHB1dC50b1N0cmluZygpICsgJyJ9JykKICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigiRSIsIG91dHB1dC50b1N0cmluZygpKQp9Cg==</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">45747608-2046-4623-a20b-8410265ef0c3</arg>
              <arg name="FIELD_NOTES">YCFgUkVTVCBBUEk6IEdlbmVyYSByYXBwb3J0byBkaSBpbnRlcnZlbnRvIGNvbiB0ZW1wbGF0ZQ==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="disabled">false</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="7">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">442a396a-d2f9-4282-99b9-1de0b8f0afd4</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIGxpbmtlZFRpY2tldHMgJiBGYXN0LVRyYW5zYWN0IHRoZW0=</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT"></arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22693</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="8" name="To be Quoted">
      <meta name="jira.status.id">14331</meta>
      <actions>
<common-action id="741" />
        <action id="251" name="Richiedi Preventivo a Fornitore" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19913</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">38c5effd94ec08c894a28a7995b3e38d8a3edc57</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlcXVpcmVkIEZpZWxkcyAmJiBOdW1iZXIgb2YgdGlja2V0cyBpbiB0aGUgbGFzdCA2MCBkYXlz</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">c716134f-f724-43dd-894c-5175df3d3ed7</arg>
              <arg name="FIELD_NOTES">YCFgR2VuZXJhdGUgU04gZm9yIG9mZmVyIHRrdHM=</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuXG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUubGluay5Jc3N1ZUxpbmtcblxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpO1xuQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpO1xuXG5kZWYgU04gPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfU0FQX1NFUlZJQ0VfTk9USUZJQ0FUSU9OXCIpWzBdXG5kZWYgb2ZmZXIgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfT0ZGRVJfVEtUXCIpWzBdXG5kZWYgZ2VuZXJhdGVkRnJvbVJlcGFpciA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUoXCJPUF9US1RfR0VORVJBVEVEX0ZST01fUkVQQUlSXCIpWzBdXG5kZWYgcmVxdWVzdE1ldGhvZFxuZGVmIGJhc2VVUkxcblxuVVJMIHVybFxuSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvblxuXG5sb2cuZGVidWcgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShvZmZlcilcbmxvZy5kZWJ1ZyBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKG9mZmVyKS50b1N0cmluZygpLmVxdWFscyhcIlllc1wiKVxuaWYoKGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoZ2VuZXJhdGVkRnJvbVJlcGFpcikgPT0gbnVsbCB8fCBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGdlbmVyYXRlZEZyb21SZXBhaXIpLnRvU3RyaW5nKCkuZXF1YWxzKFwiTm9cIikpICYmIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUob2ZmZXIpLnRvU3RyaW5nKCkuZXF1YWxzKFwiWWVzXCIpICYmIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoU04pID09IG51bGwgJiYgaXNzdWUuaXNzdWVUeXBlLm5hbWUgIT0gXCJQbGFubmVkIE1haW50ZW5hbmNlIFRpY2tldFwiKXtcbiAgICByZXF1ZXN0TWV0aG9kID0gXCJQT1NUXCI7XG5cbiAgICBkZWYgYm9keV9yZXEgPSBbXVxuICAgIGJvZHlfcmVxID0gW1xuICAgICAgICBcImlzc3VlS2V5XCI6IGlzc3VlLmtleSxcbiAgICAgICAgXCJzdGF0dXNcIjogXCJPUEVcIlxuICAgIF0gXG5cbiAgICBiYXNlVVJMID0gXCJodHRwOi8vXCIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArIFwiL29wL3Jlc3QvamlyYS9BQS9hZnRlci9zYWxlcy9jcmVhdGUvc2VydmljZS9ub3RpZmljYXRpb25cIlxuXG4gICAgbG9nLmRlYnVnIFwiYmFzZVVSTCBTTjogXCIgKyBiYXNlVVJMXG4gICAgbG9nLmRlYnVnIFwiYm9keV9yZXEgU046IFwiICsgYm9keV9yZXFcbiAgICB1cmwgPSBuZXcgVVJMKGJhc2VVUkwpXG4gICAgY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLThcIik7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJBY2NlcHRcIiwgXCIqLypcIik7XG4gICAgY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbiAgICBjb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW1cbiAgICBjb25uZWN0aW9uLm91dHB1dFN0cmVhbS53aXRoV3JpdGVyKFwiVVRGLThcIikgeyBuZXcgU3RyZWFtaW5nSnNvbkJ1aWxkZXIoaXQsIGJvZHlfcmVxKSB9XG4gICAgbG9nLmRlYnVnIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG4gICAgY29ubmVjdGlvbi5jb25uZWN0KCk7XG5cbiAgICBkZWYgb3V0cHV0ID0gbmV3IEFycmF5TGlzdCgpXG4gICAgZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpXG4gICAgZGVmIGVMaXN0RXJyb3JzID0gbmV3IEFycmF5TGlzdCgpXG4gICAgZGVmIGVycm9yTXNncyA9IG5ldyBBcnJheUxpc3QoKVxuXG4gICAgaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAxXCIpKXtcbiAgICAgICAgbG9nLmRlYnVnIFwidXJsOiBcIiArIHVybFxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZUNvZGU6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcbiAgICAgICAgXG4gICAgICAgIGRlZiBvdXRwdXRNc2cgPSAoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHRcbiAgICAgICAgbG9nLmRlYnVnIFwiKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0OiBcIiArIG91dHB1dE1zZ1xuXG4gICAgICAgIGRlZiBqc29uU2x1cnBlciA9IG5ldyBKc29uU2x1cnBlcigpXG4gICAgICAgIGRlZiBqc29uX29iamVjdCA9IGpzb25TbHVycGVyLnBhcnNlVGV4dChvdXRwdXRNc2cpXG4gICAgICAgIGFzc2VydCBqc29uX29iamVjdCBpbnN0YW5jZW9mIE1hcCAgXG4gICAgICAgIGxvZy5kZWJ1ZyBcIm1lc3NhZ2U6IFwiICsgIGpzb25fb2JqZWN0Lm1lc3NhZ2VcbiAgICAgICAgbG9nLmRlYnVnIFwiZXJyb3JzOiBcIiArICBqc29uX29iamVjdC5lcnJvcnMudG9TdHJpbmcoKVxuXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIkVcIilcbiAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiT1AtU0FQLVNOLVVQREFURVwiKVxuICAgICAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyBcIiBcIiArIGpzb25fb2JqZWN0LmVycm9yc1swXSlcbiAgICAgICAgZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncylcbiAgICAgICAgZUxpc3QuYWRkKGVMaXN0RXJyb3JzKVxuXG4gICAgICAgIG91dHB1dC5hZGQoZUxpc3QpXG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oJ3tcIkVcIjpcIicgKyBvdXRwdXQudG9TdHJpbmcoKSArICdcIn0nKVxuICAgIH1cbn1cbiAiLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">76c083d4-473d-4d2f-bb62-2d05ebae2bc9</arg>
              <arg name="FIELD_NOTES">YCFgT1AgRW1haWwgTm90aWZpY2F0aW9uOiBSRU1JTkRFUl9GT1JfU1VQUExJRVJfUVVPVEU=</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5saW5rLklzc3VlTGluayBcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTW9kaWZpZWRWYWx1ZVxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS51dGlsLkRlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlclxuaW1wb3J0IGphdmEuc3FsLlRpbWVzdGFtcFxuaW1wb3J0IGphdmEudGV4dC5TaW1wbGVEYXRlRm9ybWF0XG5pbXBvcnQgamF2YS50ZXh0LkRhdGVGb3JtYXRcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTW9kaWZpZWRWYWx1ZVxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS51dGlsLklzc3VlQ2hhbmdlSG9sZGVyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnV0aWwuRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmV2ZW50LnR5cGUuRXZlbnREaXNwYXRjaE9wdGlvblxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuXG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcblxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpO1xuQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpO1xuZGVmIHJlcXVlc3RNZXRob2RcbmRlZiBiYXNlVVJMXG5cblVSTCB1cmxcbkh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb25cbmRlZiBtaSA9IChNdXRhYmxlSXNzdWUpIGlzc3VlXG5kZWYgY3VycmVudFVzZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRKaXJhQXV0aGVudGljYXRpb25Db250ZXh0KCkuZ2V0TG9nZ2VkSW5Vc2VyKClcblxuZGVmIHJlbWluZGVyRGF0ZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi53ZlJlbWluZGVyRm9yU1F1b3RlJ10udG9TdHJpbmcoKSlbMF1cbmRlZiBnZW5lcmF0ZWRGcm9tUmVwYWlyID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShcIk9QX1RLVF9HRU5FUkFURURfRlJPTV9SRVBBSVJcIilbMF1cblxuaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShnZW5lcmF0ZWRGcm9tUmVwYWlyKSA9PSBudWxsIHx8IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoZ2VuZXJhdGVkRnJvbVJlcGFpcikudG9TdHJpbmcoKS5lcXVhbHMoXCJOb1wiKSl7XG4gICAgcmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuICAgIGRlZiBib2R5X3JlcSA9IFtdXG5cbiAgICBib2R5X3JlcSA9IFtcbiAgICAgICAgICAgIFwidGVtcGxhdGVOYW1lXCI6IHByb3BlcnRpZXNbJ3R0LnJlbWluZGVyVG9TJ10udG9TdHJpbmcoKSxcbiAgICAgICAgICAgIFwicGVjXCI6IGZhbHNlLFxuICAgICAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXlcbiAgICBdIFxuXG4gICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvdHJhbnNhY3Rpb24vbWFpbC9zZW5kXCJcbiAgICB1cmwgPSBuZXcgVVJMKGJhc2VVUkwpXG4gICAgY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLThcIik7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJBY2NlcHRcIiwgXCIqLypcIik7XG4gICAgY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbiAgICBjb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW1cbiAgICBjb25uZWN0aW9uLm91dHB1dFN0cmVhbS53aXRoV3JpdGVyKFwiVVRGLThcIikgeyBuZXcgU3RyZWFtaW5nSnNvbkJ1aWxkZXIoaXQsIGJvZHlfcmVxKSB9XG4gICAgbG9nLmRlYnVnIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG4gICAgY29ubmVjdGlvbi5jb25uZWN0KCk7XG5cbiAgICBkZWYgb3V0cHV0ID0gbmV3IEFycmF5TGlzdCgpXG4gICAgZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpXG4gICAgZGVmIGVMaXN0RXJyb3JzID0gbmV3IEFycmF5TGlzdCgpXG4gICAgZGVmIGVycm9yTXNncyA9IG5ldyBBcnJheUxpc3QoKVxuXG4gICAgaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAwXCIpICYmICFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjA0XCIpKXtcbiAgICAgICAgbG9nLmRlYnVnIFwidXJsOiBcIiArIHVybFxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZUNvZGU6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcblxuICAgICAgICBkZWYgb3V0cHV0TXNnID0gKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0XG4gICAgICAgIGxvZy5kZWJ1ZyBcIigoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dDogXCIgKyBvdXRwdXRNc2dcblxuICAgICAgICBkZWYganNvblNsdXJwZXIgPSBuZXcgSnNvblNsdXJwZXIoKVxuICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgICAgICBhc3NlcnQganNvbl9vYmplY3QgaW5zdGFuY2VvZiBNYXAgIFxuICAgICAgICBsb2cuZGVidWcgXCJtZXNzYWdlOiBcIiArICBqc29uX29iamVjdC5tZXNzYWdlXG5cbiAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiRVwiKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJTRU5ETUFJTFwiKVxuICAgICAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyBcIiBcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChqc29uX29iamVjdC5tZXNzYWdlKVxuICAgICAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpXG5cbiAgICAgICAgb3V0cHV0LmFkZChlTGlzdClcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgfVxufSIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="9">
              <post-functions>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="fieldValue"></arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">customfield_23402</arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="fieldValue">No</arg>
                  <arg name="preconditionMode-textValue">OR</arg>
                  <arg name="fieldsList">customfield_23402</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="append.value"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="field.name">customfield_23603</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">YCFgT1A6IFZhbG9yaXp6YXppb25lIGxpc3RpbmkgZm9ybml0b3Jl</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmluZGV4Lklzc3VlSW5kZXhpbmdTZXJ2aWNlCmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuZXZlbnQudHlwZS5FdmVudERpc3BhdGNoT3B0aW9uCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUudXRpbC5EZWZhdWx0SXNzdWVDaGFuZ2VIb2xkZXIKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Nb2RpZmllZFZhbHVlCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuaW5kZXguSXNzdWVJbmRleGluZ1NlcnZpY2UKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KQ2F0ZWdvcnkgbG9nID0gQ2F0ZWdvcnkuZ2V0SW5zdGFuY2UoImNvbS5vbnJlc29sdmUuamlyYS5ncm9vdnkuUG9zdEZ1bmN0aW9uIikKbG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpCgpJc3N1ZU1hbmFnZXIgaXNzdWVNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKCk7CkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTsKCklzc3VlSW5kZXhpbmdTZXJ2aWNlIAlpc3N1ZUluZGV4aW5nU2VydmljZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldENvbXBvbmVudChJc3N1ZUluZGV4aW5nU2VydmljZSkKCmRlZiByZXF1ZXN0TWV0aG9kCmRlZiBiYXNlVVJMCgpsb2cuZGVidWcgIlZhbG9yaXp6YXppb25lIGxpc3RpbmkiCgovKiBSRVNUIEFQSSBwZXIgQ29udGFiaWxpenphemlvbmUgSW50ZXJ2ZW50byAqLwpyZXF1ZXN0TWV0aG9kID0gIkdFVCI7CgpiYXNlVVJMID0gImh0dHA6Ly8iICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyAiL29wL3Jlc3QvQUEvdGlja2V0L2lzc3VlS2V5LyIgKyBpc3N1ZS5rZXkudG9TdHJpbmcoKSArICIvY2xvc2U/cG9wdWxhdGVSYXRlcz1mYWxzZSZtYXRlcmlhbEF0dHJpYnV0ZT0iICsgcHJvcGVydGllc1snY2YucXVvdGVNYXRlcmlhbHMnXS50b1N0cmluZygpCmxvZy5kZWJ1ZyAiYmFzZVVybDogIiArIGJhc2VVUkwKCi8qRGVmaW5pcmUgcGFyYW1ldHJvIGRpIGlucHV0IHVuYXRhbnR1bT10cnVlfGZhbHNlIGluIGJhc2UgYWwgdmFsb3JlIGRlbGxhIHZhcmlhYmlsZSBib29sZWFuYSB1bmF0YW50dW0qLwpVUkwgdXJsID0gbmV3IFVSTChiYXNlVVJMKQpIdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7CmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KCJDb250ZW50LVR5cGUiLCAiYXBwbGljYXRpb24vanNvbiIpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eSgiQWNjZXB0IiwgIiovKiIpOwpjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpOwpjb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7CmNvbm5lY3Rpb24uY29ubmVjdCgpOwpsb2cuZGVidWcgIlJlc3BvbnNlQ29kZToiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKQpsb2cuZGVidWcgIlJlc3BvbnNlTWVzc2FnZToiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKQoKLy9Jc3N1ZUluZGV4aW5nU2VydmljZSBpc3N1ZUluZGV4aW5nU2VydmljZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldENvbXBvbmVudChJc3N1ZUluZGV4aW5nU2VydmljZSkKLy9pc3N1ZUluZGV4aW5nU2VydmljZS5yZUluZGV4KGlzc3VlTWFuYWdlci5nZXRJc3N1ZU9iamVjdChpc3N1ZS5rZXkudG9TdHJpbmcoKSkpCgovL2RlZiB1bmFUYW50dW1SYXRlcyA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUoIk9QQUFfVU5BVEFOVFVNX1JBVEVTIilbMF0KLy9sb2cud2FybiAidW5hVGFudHVtUmF0ZXM6ICIgKyBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHVuYVRhbnR1bVJhdGVzKQoKZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKQpkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIGVMaXN0RXJyb3JzID0gbmV3IEFycmF5TGlzdCgpCmRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KCkKCmlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscygiMjAwIikpewogICAgbG9nLmRlYnVnICJ1cmw6ICIgKyB1cmwKICAgIGxvZy5kZWJ1ZyAiUmVzcG9uc2VDb2RlOiIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpCiAgICBsb2cuZGVidWcgIlJlc3BvbnNlTWVzc2FnZToiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKQogICAgbG9nLmRlYnVnICJSZXNwb25zZTogIiArIGNvbm5lY3Rpb24KCiAgICBlTGlzdEVycm9ycy5hZGQoIkUiKQogICAgZUxpc3RFcnJvcnMuYWRkKCJPUC1US1QtQUNDT1VOVElORyIpCiAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyAiICIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpKQogICAgZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncykKICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycykKCiAgICBvdXRwdXQuYWRkKGVMaXN0KQogICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigiRSIsIG91dHB1dC50b1N0cmluZygpKQp9</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="disabled">true</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22693</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="581" name="Converti in Manutenzione Riparativa">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_NOTES">YCFgQ2hhbmdlIHRvIE1haW50ZW5hbmNlIGlmIGlzc3VlIHR5cGUgPSBOZXcgSW5zdGFsbGF0aW9u</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ05ldyBJbnN0YWxsYXRpb24nfHx8</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="8">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">bee29a4ffd9e55a6f278af205f741799fc63bbef</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IENoYW5nZSBpc3N1ZSB0eXBlIGZyb20gTmV3IEluc3RhbGxhdGlvbiB0byBNYWludGVuYW5jZQ==</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3JcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUudXRpbC5EZWZhdWx0SXNzdWVDaGFuZ2VIb2xkZXJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuaXNzdWV0eXBlLklzc3VlVHlwZVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuXG4vKiBEZWZpbmUgYSBMb2dnZXIgKi9cbmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKVxuXG5kZWYgY29uc3RhbnRzTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldENvbnN0YW50c01hbmFnZXIoKVxuXG5Jc3N1ZVR5cGUgdGFyZ2V0SXNzdWVUeXBlID0gbnVsbFxuZGVmIGlzc3VlVHlwZVxuXG5sb2cuZGVidWcgXCJJc3N1ZVR5cGUgb2xkID0gXCIgKyBpc3N1ZS5pc3N1ZVR5cGUubmFtZVxubG9nLmRlYnVnIHByb3BlcnRpZXNbJ2l0Lm1haW50ZW5hbmNlJ10udG9TdHJpbmcoKVxuZGVmIGNvbGxlY3Rpb24gPSBjb25zdGFudHNNYW5hZ2VyLmdldEFsbElzc3VlVHlwZU9iamVjdHMoKVxuZGVmIGl0ZXJhdG9yID0gY29sbGVjdGlvbi5pdGVyYXRvcigpXG53aGlsZShpdGVyYXRvci5oYXNOZXh0KCkpe1xuXHRpc3N1ZVR5cGUgPSBpdGVyYXRvci5uZXh0KClcblx0aWYoaXNzdWVUeXBlLm5hbWUgPT0gKHByb3BlcnRpZXNbJ2l0Lm1haW50ZW5hbmNlJ10gPyBwcm9wZXJ0aWVzWydpdC5tYWludGVuYW5jZSddLnRvU3RyaW5nKCkgOiBcIk1haW50ZW5hbmNlIFRpY2tldFwiKSl7XG5cdFx0dGFyZ2V0SXNzdWVUeXBlID0gaXNzdWVUeXBlXG5cdH1cbn1cblxubG9nLmRlYnVnIHRhcmdldElzc3VlVHlwZS5uYW1lXG5pc3N1ZS5zZXRJc3N1ZVR5cGVPYmplY3QodGFyZ2V0SXNzdWVUeXBlKVxubG9nLmRlYnVnIFwiSXNzdWVUeXBlIG5ldyA9IFwiICsgaXNzdWUuaXNzdWVUeXBlLm5hbWUiLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3IKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZQppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnV0aWwuRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuaXNzdWV0eXBlLklzc3VlVHlwZQppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lcgppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGwKClByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKCkKRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJykKcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHsKCXByb3BlcnRpZXMubG9hZChpdCkKfQoKLyogRGVmaW5lIGEgTG9nZ2VyICovCmRlZiBDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQpsb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRykKCmRlZiBjb25zdGFudHNNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q29uc3RhbnRzTWFuYWdlcigpCgpJc3N1ZSBpc3N1ZSA9IGlzc3VlICAvLyBUaGlzIHdoYXQgSSB3YXMgbG9va2luZyBmb3IgOi0pLiBBcyBzaW1wbGUgYXMgaXQgaXMsIGJ1dCBJIGRpZG4ndCBrbm93IHRoYXQuCgpJc3N1ZVR5cGUgdGFyZ2V0SXNzdWVUeXBlID0gbnVsbApkZWYgaXNzdWVUeXBlCgpsb2cuZGVidWcgIklzc3VlVHlwZSBvbGQgPSAiICsgaXNzdWUuaXNzdWVUeXBlLm5hbWUKbG9nLmRlYnVnIHByb3BlcnRpZXNbJ2l0Lm1haW50ZW5hbmNlJ10udG9TdHJpbmcoKQpkZWYgY29sbGVjdGlvbiA9IGNvbnN0YW50c01hbmFnZXIuZ2V0QWxsSXNzdWVUeXBlT2JqZWN0cygpCmRlZiBpdGVyYXRvciA9IGNvbGxlY3Rpb24uaXRlcmF0b3IoKQp3aGlsZShpdGVyYXRvci5oYXNOZXh0KCkpewoJaXNzdWVUeXBlID0gaXRlcmF0b3IubmV4dCgpCglpZihpc3N1ZVR5cGUubmFtZSA9PSAocHJvcGVydGllc1snaXQubWFpbnRlbmFuY2UnXSA/IHByb3BlcnRpZXNbJ2l0Lm1haW50ZW5hbmNlJ10udG9TdHJpbmcoKSA6ICJNYWludGVuYW5jZSBUaWNrZXQiKSl7CgkJdGFyZ2V0SXNzdWVUeXBlID0gaXNzdWVUeXBlCgl9Cn0KCmxvZy5kZWJ1ZyB0YXJnZXRJc3N1ZVR5cGUubmFtZQppc3N1ZS5zZXRJc3N1ZVR5cGVPYmplY3QodGFyZ2V0SXNzdWVUeXBlKQpsb2cuZGVidWcgIklzc3VlVHlwZSBuZXcgPSAiICsgaXNzdWUuaXNzdWVUeXBlLm5hbWU=</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="fieldValue">Maintenance Ticket</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="append.value"></arg>
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">Maintenance Ticket</arg>
                  <arg name="field.name">customfield_22716</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="append.value"></arg>
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">Maintenance Ticket</arg>
                  <arg name="field.name">summary</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="591" name="Converti in Nuova Installazione">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">58d7281a-ca18-4098-990f-76fde0470684</arg>
                <arg name="FIELD_NOTES">YCFgQ2hhbmdlIHRvIE5ldyBJbnN0YWxsYXRpb24gaWYgaXNzdWUgdHlwZSA9IE1haW50ZW5hbmNl</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnTWFpbnRlbmFuY2UgVGlja2V0JyIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="8">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">7918c0e3-5dc6-49c1-b2dc-dac5aa760ae0</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IENoYW5nZSBpc3N1ZSB0eXBlIGZyb20gTWFpbnRlbmFuY2UgdG8gTmV3IEluc3RhbGxhdGlvbg==</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3JcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUudXRpbC5EZWZhdWx0SXNzdWVDaGFuZ2VIb2xkZXJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuaXNzdWV0eXBlLklzc3VlVHlwZVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuXG4vKiBEZWZpbmUgYSBMb2dnZXIgKi9cbmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKVxuXG5kZWYgY29uc3RhbnRzTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldENvbnN0YW50c01hbmFnZXIoKVxuXG5Jc3N1ZVR5cGUgdGFyZ2V0SXNzdWVUeXBlID0gbnVsbFxuZGVmIGlzc3VlVHlwZVxuXG5sb2cuZGVidWcgXCJJc3N1ZVR5cGUgb2xkID0gXCIgKyBpc3N1ZS5pc3N1ZVR5cGUubmFtZVxuXG5kZWYgY29sbGVjdGlvbiA9IGNvbnN0YW50c01hbmFnZXIuZ2V0QWxsSXNzdWVUeXBlT2JqZWN0cygpXG5kZWYgaXRlcmF0b3IgPSBjb2xsZWN0aW9uLml0ZXJhdG9yKClcbndoaWxlKGl0ZXJhdG9yLmhhc05leHQoKSl7XG5cdGlzc3VlVHlwZSA9IGl0ZXJhdG9yLm5leHQoKVxuXHRpZihpc3N1ZVR5cGUubmFtZSA9PSBwcm9wZXJ0aWVzWydpdC5uZXdJbnN0YWxsYXRpb24nXS50b1N0cmluZygpKXtcblx0XHR0YXJnZXRJc3N1ZVR5cGUgPSBpc3N1ZVR5cGVcblx0fVxufVxuXG5sb2cuZGVidWcgdGFyZ2V0SXNzdWVUeXBlLm5hbWVcbmlzc3VlLnNldElzc3VlVHlwZU9iamVjdCh0YXJnZXRJc3N1ZVR5cGUpXG5sb2cuZGVidWcgXCJJc3N1ZVR5cGUgbmV3ID0gXCIgKyBpc3N1ZS5pc3N1ZVR5cGUubmFtZSIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3IKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZQppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnV0aWwuRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuaXNzdWV0eXBlLklzc3VlVHlwZQppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lcgppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGwKClByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKCkKRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJykKcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHsKCXByb3BlcnRpZXMubG9hZChpdCkKfQoKLyogRGVmaW5lIGEgTG9nZ2VyICovCmRlZiBDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQpsb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRykKCmRlZiBjb25zdGFudHNNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q29uc3RhbnRzTWFuYWdlcigpCgpJc3N1ZSBpc3N1ZSA9IGlzc3VlICAvLyBUaGlzIHdoYXQgSSB3YXMgbG9va2luZyBmb3IgOi0pLiBBcyBzaW1wbGUgYXMgaXQgaXMsIGJ1dCBJIGRpZG4ndCBrbm93IHRoYXQuCgpJc3N1ZVR5cGUgdGFyZ2V0SXNzdWVUeXBlID0gbnVsbApkZWYgaXNzdWVUeXBlCgpsb2cuZGVidWcgIklzc3VlVHlwZSBvbGQgPSAiICsgaXNzdWUuaXNzdWVUeXBlLm5hbWUKCmRlZiBjb2xsZWN0aW9uID0gY29uc3RhbnRzTWFuYWdlci5nZXRBbGxJc3N1ZVR5cGVPYmplY3RzKCkKZGVmIGl0ZXJhdG9yID0gY29sbGVjdGlvbi5pdGVyYXRvcigpCndoaWxlKGl0ZXJhdG9yLmhhc05leHQoKSl7Cglpc3N1ZVR5cGUgPSBpdGVyYXRvci5uZXh0KCkKCWlmKGlzc3VlVHlwZS5uYW1lID09IHByb3BlcnRpZXNbJ2l0Lm5ld0luc3RhbGxhdGlvbiddLnRvU3RyaW5nKCkpewoJCXRhcmdldElzc3VlVHlwZSA9IGlzc3VlVHlwZQoJfQp9Cgpsb2cuZGVidWcgdGFyZ2V0SXNzdWVUeXBlLm5hbWUKaXNzdWUuc2V0SXNzdWVUeXBlT2JqZWN0KHRhcmdldElzc3VlVHlwZSkKbG9nLmRlYnVnICJJc3N1ZVR5cGUgbmV3ID0gIiArIGlzc3VlLmlzc3VlVHlwZS5uYW1l</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="fieldValue">New Installation</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="append.value"></arg>
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">New Installation Ticket</arg>
                  <arg name="field.name">summary</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="append.value"></arg>
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">New Installation Ticket</arg>
                  <arg name="field.name">customfield_22716</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="601" name="Clona Tkt" view="fieldscreen">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">20401</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">c659704c-9678-4844-9a05-6f3497e391e7</arg>
                <arg name="FIELD_NOTES">YCFgRW5hYmxlZCBvbmx5IGZvciBSZXBhaXIgYW5kIE5ldyBJbnN0YWxsYXRpb24=</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnTWFpbnRlbmFuY2UgVGlja2V0JyB8fCAoaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ05ldyBJbnN0YWxsYXRpb24nICYmIGNmVmFsdWVzWydPUF9BU1NFVCddICE9IG51bGwpIiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="8">
              <post-functions>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="fieldValue">New Installation</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="targetIssueTypeDefinedByCfSelection"></arg>
                  <arg name="issueTypeId">12301</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">SAME</arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="transitionAttachmentsOperation">copy</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="targetProjectSelectedCustomField"></arg>
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="subFunctions">[{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_21909&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21909&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22600&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22600&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22822&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22822&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22601&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22601&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22603&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22603&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22663&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22663&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22634&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22634&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22651&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22651&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22700&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22700&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22606&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22606&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22629&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22629&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22652&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22652&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;description&quot;,&quot;destinationFieldId&quot;:&quot;description&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22627&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22627&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22620&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22620&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22668&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22668&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23602&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23203&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22814&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22814&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23237&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23237&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;issuekey&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23243&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;YES&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23238&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22702&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22702&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22703&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22703&quot;}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="fieldValue">Maintenance Ticket</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="targetIssueTypeDefinedByCfSelection"></arg>
                  <arg name="issueTypeId">13001</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">SAME</arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="transitionAttachmentsOperation">copy</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="targetProjectSelectedCustomField"></arg>
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="subFunctions">[{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_21909&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21909&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22600&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22600&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22822&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22822&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22601&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22601&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22603&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22603&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22663&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22663&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22634&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22634&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22651&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22651&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22700&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22700&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22606&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22606&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22629&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22629&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22652&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22652&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;description&quot;,&quot;destinationFieldId&quot;:&quot;description&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22627&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22627&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22620&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22620&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22668&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22668&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23602&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23203&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22814&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22814&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23237&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23237&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;issuekey&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23243&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;YES&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23238&quot;}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23602</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="761" name="In Preventivazione - senza notifiche" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19913</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">38c5effd94ec08c894a28a7995b3e38d8a3edc57</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlcXVpcmVkIEZpZWxkcyAmJiBOdW1iZXIgb2YgdGlja2V0cyBpbiB0aGUgbGFzdCA2MCBkYXlz</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">c716134f-f724-43dd-894c-5175df3d3ed7</arg>
              <arg name="FIELD_NOTES">YCFgR2VuZXJhdGUgU04gZm9yIG9mZmVyIHRrdHM=</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuXG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUubGluay5Jc3N1ZUxpbmtcblxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpO1xuQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpO1xuXG5kZWYgU04gPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfU0FQX1NFUlZJQ0VfTk9USUZJQ0FUSU9OXCIpWzBdXG5kZWYgb2ZmZXIgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfT0ZGRVJfVEtUXCIpWzBdXG5kZWYgcmVxdWVzdE1ldGhvZFxuZGVmIGJhc2VVUkxcblxuVVJMIHVybFxuSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvblxuXG5sb2cuZGVidWcgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShvZmZlcilcbmxvZy5kZWJ1ZyBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKG9mZmVyKS50b1N0cmluZygpLmVxdWFscyhcIlllc1wiKVxuaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShvZmZlcikudG9TdHJpbmcoKS5lcXVhbHMoXCJZZXNcIikgJiYgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShTTikgPT0gbnVsbCAmJiBpc3N1ZS5pc3N1ZVR5cGUubmFtZSAhPSBcIlBsYW5uZWQgTWFpbnRlbmFuY2UgVGlja2V0XCIpe1xuICAgIHJlcXVlc3RNZXRob2QgPSBcIlBPU1RcIjtcblxuICAgIGRlZiBib2R5X3JlcSA9IFtdXG4gICAgYm9keV9yZXEgPSBbXG4gICAgICAgIFwiaXNzdWVLZXlcIjogaXNzdWUua2V5LFxuICAgICAgICBcInN0YXR1c1wiOiBcIk9QRVwiXG4gICAgXSBcblxuICAgIGJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9qaXJhL0FBL2FmdGVyL3NhbGVzL2NyZWF0ZS9zZXJ2aWNlL25vdGlmaWNhdGlvblwiXG5cbiAgICBsb2cuZGVidWcgXCJiYXNlVVJMIFNOOiBcIiArIGJhc2VVUkxcbiAgICBsb2cuZGVidWcgXCJib2R5X3JlcSBTTjogXCIgKyBib2R5X3JlcVxuICAgIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcbiAgICBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdE1ldGhvZChyZXF1ZXN0TWV0aG9kKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbiAgICBjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbiAgICBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtLndpdGhXcml0ZXIoXCJVVEYtOFwiKSB7IG5ldyBTdHJlYW1pbmdKc29uQnVpbGRlcihpdCwgYm9keV9yZXEpIH1cbiAgICBsb2cuZGVidWcgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW1cbiAgICBjb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuICAgIGRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5cbiAgICBpZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDFcIikpe1xuICAgICAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuICAgICAgICBcbiAgICAgICAgZGVmIG91dHB1dE1zZyA9ICgoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dFxuICAgICAgICBsb2cuZGVidWcgXCIoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHQ6IFwiICsgb3V0cHV0TXNnXG5cbiAgICAgICAgZGVmIGpzb25TbHVycGVyID0gbmV3IEpzb25TbHVycGVyKClcbiAgICAgICAgZGVmIGpzb25fb2JqZWN0ID0ganNvblNsdXJwZXIucGFyc2VUZXh0KG91dHB1dE1zZylcbiAgICAgICAgYXNzZXJ0IGpzb25fb2JqZWN0IGluc3RhbmNlb2YgTWFwICBcbiAgICAgICAgbG9nLmRlYnVnIFwibWVzc2FnZTogXCIgKyAganNvbl9vYmplY3QubWVzc2FnZVxuICAgICAgICBsb2cuZGVidWcgXCJlcnJvcnM6IFwiICsgIGpzb25fb2JqZWN0LmVycm9ycy50b1N0cmluZygpXG5cbiAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiRVwiKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJPUC1TQVAtU04tVVBEQVRFXCIpXG4gICAgICAgIGVycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArIFwiIFwiICsganNvbl9vYmplY3QuZXJyb3JzWzBdKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKVxuICAgICAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpXG5cbiAgICAgICAgb3V0cHV0LmFkZChlTGlzdClcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgfVxufVxuICIsInNjcmlwdFBhdGgiOm51bGx9</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="9">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">YCFgT1A6IFZhbG9yaXp6YXppb25lIGxpc3RpbmkgZm9ybml0b3Jl</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmluZGV4Lklzc3VlSW5kZXhpbmdTZXJ2aWNlCmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuZXZlbnQudHlwZS5FdmVudERpc3BhdGNoT3B0aW9uCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUudXRpbC5EZWZhdWx0SXNzdWVDaGFuZ2VIb2xkZXIKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Nb2RpZmllZFZhbHVlCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuaW5kZXguSXNzdWVJbmRleGluZ1NlcnZpY2UKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KQ2F0ZWdvcnkgbG9nID0gQ2F0ZWdvcnkuZ2V0SW5zdGFuY2UoImNvbS5vbnJlc29sdmUuamlyYS5ncm9vdnkuUG9zdEZ1bmN0aW9uIikKbG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpCgpJc3N1ZU1hbmFnZXIgaXNzdWVNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKCk7CkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTsKCklzc3VlSW5kZXhpbmdTZXJ2aWNlIAlpc3N1ZUluZGV4aW5nU2VydmljZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldENvbXBvbmVudChJc3N1ZUluZGV4aW5nU2VydmljZSkKCmRlZiByZXF1ZXN0TWV0aG9kCmRlZiBiYXNlVVJMCgpsb2cuZGVidWcgIlZhbG9yaXp6YXppb25lIGxpc3RpbmkiCgovKiBSRVNUIEFQSSBwZXIgQ29udGFiaWxpenphemlvbmUgSW50ZXJ2ZW50byAqLwpyZXF1ZXN0TWV0aG9kID0gIkdFVCI7CgpiYXNlVVJMID0gImh0dHA6Ly8iICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyAiL29wL3Jlc3QvQUEvdGlja2V0L2lzc3VlS2V5LyIgKyBpc3N1ZS5rZXkudG9TdHJpbmcoKSArICIvY2xvc2U/cG9wdWxhdGVSYXRlcz1mYWxzZSZtYXRlcmlhbEF0dHJpYnV0ZT0iICsgcHJvcGVydGllc1snY2YucXVvdGVNYXRlcmlhbHMnXS50b1N0cmluZygpCmxvZy5kZWJ1ZyAiYmFzZVVybDogIiArIGJhc2VVUkwKCi8qRGVmaW5pcmUgcGFyYW1ldHJvIGRpIGlucHV0IHVuYXRhbnR1bT10cnVlfGZhbHNlIGluIGJhc2UgYWwgdmFsb3JlIGRlbGxhIHZhcmlhYmlsZSBib29sZWFuYSB1bmF0YW50dW0qLwpVUkwgdXJsID0gbmV3IFVSTChiYXNlVVJMKQpIdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7CmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KCJDb250ZW50LVR5cGUiLCAiYXBwbGljYXRpb24vanNvbiIpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eSgiQWNjZXB0IiwgIiovKiIpOwpjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpOwpjb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7CmNvbm5lY3Rpb24uY29ubmVjdCgpOwpsb2cuZGVidWcgIlJlc3BvbnNlQ29kZToiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKQpsb2cuZGVidWcgIlJlc3BvbnNlTWVzc2FnZToiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKQoKLy9Jc3N1ZUluZGV4aW5nU2VydmljZSBpc3N1ZUluZGV4aW5nU2VydmljZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldENvbXBvbmVudChJc3N1ZUluZGV4aW5nU2VydmljZSkKLy9pc3N1ZUluZGV4aW5nU2VydmljZS5yZUluZGV4KGlzc3VlTWFuYWdlci5nZXRJc3N1ZU9iamVjdChpc3N1ZS5rZXkudG9TdHJpbmcoKSkpCgovL2RlZiB1bmFUYW50dW1SYXRlcyA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUoIk9QQUFfVU5BVEFOVFVNX1JBVEVTIilbMF0KLy9sb2cud2FybiAidW5hVGFudHVtUmF0ZXM6ICIgKyBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHVuYVRhbnR1bVJhdGVzKQoKZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKQpkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIGVMaXN0RXJyb3JzID0gbmV3IEFycmF5TGlzdCgpCmRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KCkKCmlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscygiMjAwIikpewogICAgbG9nLmRlYnVnICJ1cmw6ICIgKyB1cmwKICAgIGxvZy5kZWJ1ZyAiUmVzcG9uc2VDb2RlOiIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpCiAgICBsb2cuZGVidWcgIlJlc3BvbnNlTWVzc2FnZToiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKQogICAgbG9nLmRlYnVnICJSZXNwb25zZTogIiArIGNvbm5lY3Rpb24KCiAgICBlTGlzdEVycm9ycy5hZGQoIkUiKQogICAgZUxpc3RFcnJvcnMuYWRkKCJPUC1US1QtQUNDT1VOVElORyIpCiAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyAiICIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpKQogICAgZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncykKICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycykKCiAgICBvdXRwdXQuYWRkKGVMaXN0KQogICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigiRSIsIG91dHB1dC50b1N0cmluZygpKQp9</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="append.value"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="field.name">customfield_22603</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22693</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="9" name="Waiting for Supplier Quote">
      <meta name="jira.status.id">14332</meta>
      <actions>
<common-action id="741" />
        <action id="261" name="Preventivo Fornitore Inserito" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19914</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">23e761954d70d711d1ee5515aaf85f7738768dd8</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIG1hbmRhdG9yeSBhdHRhY2htZW50czogUHJldmVudGl2byBGb3JuaXRvcmU=</arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">53480a627af4b00abaf5fd025ed6c011dab7e21e</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlcXVpcmVkIEZpZWxkcyA=</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">ac4c9242-8ad3-4e5a-bddb-3e8e9e75fe1a</arg>
              <arg name="FIELD_NOTES">YCFgR2VuZXJhdGUgU04gZm9yIG9mZmVyIHRrdHMgLSBPUF9US1RfR0VORVJBVEVEX0ZST01fUkVQQUlSID0gWWVz</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuXG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUubGluay5Jc3N1ZUxpbmtcblxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpO1xuQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpO1xuXG5kZWYgU04gPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfU0FQX1NFUlZJQ0VfTk9USUZJQ0FUSU9OXCIpWzBdXG5kZWYgb2ZmZXIgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfT0ZGRVJfVEtUXCIpWzBdXG5kZWYgZ2VuZXJhdGVkRnJvbVJlcGFpciA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUoXCJPUF9US1RfR0VORVJBVEVEX0ZST01fUkVQQUlSXCIpWzBdXG5kZWYgcmVxdWVzdE1ldGhvZFxuZGVmIGJhc2VVUkxcblxuVVJMIHVybFxuSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvblxuXG5sb2cuZGVidWcgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShvZmZlcilcbmxvZy5kZWJ1ZyBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKG9mZmVyKS50b1N0cmluZygpLmVxdWFscyhcIlllc1wiKVxuaWYoKGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoZ2VuZXJhdGVkRnJvbVJlcGFpcikgIT0gbnVsbCAmJiBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGdlbmVyYXRlZEZyb21SZXBhaXIpLnRvU3RyaW5nKCkuZXF1YWxzKFwiWWVzXCIpKSAmJiBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKG9mZmVyKS50b1N0cmluZygpLmVxdWFscyhcIlllc1wiKSAmJiBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKFNOKSA9PSBudWxsICYmIGlzc3VlLmlzc3VlVHlwZS5uYW1lICE9IFwiUGxhbm5lZCBNYWludGVuYW5jZSBUaWNrZXRcIil7XG4gICAgcmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuXG4gICAgZGVmIGJvZHlfcmVxID0gW11cbiAgICBib2R5X3JlcSA9IFtcbiAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXksXG4gICAgICAgIFwic3RhdHVzXCI6IFwiT1BFXCJcbiAgICBdIFxuXG4gICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvYWZ0ZXIvc2FsZXMvY3JlYXRlL3NlcnZpY2Uvbm90aWZpY2F0aW9uXCJcblxuICAgIGxvZy5kZWJ1ZyBcImJhc2VVUkwgU046IFwiICsgYmFzZVVSTFxuICAgIGxvZy5kZWJ1ZyBcImJvZHlfcmVxIFNOOiBcIiArIGJvZHlfcmVxXG4gICAgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG4gICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxuICAgIGxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpO1xuXG4gICAgZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KClcblxuICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMVwiKSl7XG4gICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG4gICAgICAgIFxuICAgICAgICBkZWYgb3V0cHV0TXNnID0gKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0XG4gICAgICAgIGxvZy5kZWJ1ZyBcIigoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dDogXCIgKyBvdXRwdXRNc2dcblxuICAgICAgICBkZWYganNvblNsdXJwZXIgPSBuZXcgSnNvblNsdXJwZXIoKVxuICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgICAgICBhc3NlcnQganNvbl9vYmplY3QgaW5zdGFuY2VvZiBNYXAgIFxuICAgICAgICBsb2cuZGVidWcgXCJtZXNzYWdlOiBcIiArICBqc29uX29iamVjdC5tZXNzYWdlXG4gICAgICAgIGxvZy5kZWJ1ZyBcImVycm9yczogXCIgKyAganNvbl9vYmplY3QuZXJyb3JzLnRvU3RyaW5nKClcblxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIk9QLVNBUC1TTi1VUERBVEVcIilcbiAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5lcnJvcnNbMF0pXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChlcnJvck1zZ3MpXG4gICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycylcblxuICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcbiAgICB9XG59XG4gIiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="10">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="field.type">8</arg>
                  <arg name="full.module.key">com.riadalabs.jira.plugins.insightinsight-post-function</arg>
                  <arg name="field.groovyScript">import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.MutableIssue;
import com.atlassian.jira.event.type.EventDispatchOption;
import org.apache.log4j.Level

Properties relativePath = new Properties()
File relativePathFile = new File('/var/atlassian/application-data/jira/insightPathToScript.properties')
relativePathFile.withInputStream {
	relativePath.load(it)
}

Properties properties = new Properties()
File propertiesFile = new File('/var/atlassian/application-data/shared/scripts/opproject.properties')
propertiesFile.withInputStream {
                properties.load(it)
}

/* Get Insight Object Facade from plugin accessor */
Class objectFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(&quot;com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectFacade&quot;); 
def objectFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectFacadeClass);
  
/* Get Insight Object Type Facade from plugin accessor */
Class objectTypeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(&quot;com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeFacade&quot;); 
def objectTypeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeFacadeClass);
  
/* Get Insight Object Attribute Facade from plugin accessor */
Class objectTypeAttributeFacadeClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(&quot;com.riadalabs.jira.plugins.insight.channel.external.api.facade.ObjectTypeAttributeFacade&quot;); 
def objectTypeAttributeFacade = ComponentAccessor.getOSGiComponentInstanceOfType(objectTypeAttributeFacadeClass);
  
Class objectAttributeBeanFactoryClass = ComponentAccessor.getPluginAccessor().getClassLoader().findClass(&quot;com.riadalabs.jira.plugins.insight.services.model.factory.ObjectAttributeBeanFactory&quot;); 
def objectAttributeBeanFactory = ComponentAccessor.getOSGiComponentInstanceOfType(objectAttributeBeanFactoryClass);

Issue issue = issue

def laborRates = issue.getCustomFieldValue(ComponentAccessor.getCustomFieldManager().getCustomFieldObjectByName(properties['cf.quoteLabourRates'].toString()))

def SUPPLIER_QTY=properties['iobj.onSiteRateReport.suppQty'].toString()
def SUPPLIER_QTY_ID=properties['iobj.onSiteRateReport.suppQty.id'].toString().toInteger()
def CUSTOMER_QTY=properties['iobj.onSiteRateReport.custQty'].toString()
def CUSTOMER_QTY_ID=properties['iobj.onSiteRateReport.custQty.id'].toString().toInteger()
def TECH_NUMBER=properties['iobj.onSiteRateReport.techNum'].toString()
def TECH_NUMBER_ID=properties['iobj.onSiteRateReport.techNum.id'].toString().toInteger()

if(laborRates){
    
    for(rate in laborRates){
        log.info rate.toString()
        def obTriage, quantity, techs
        if(objectFacade.loadObjectAttributeBean(rate.getId(), SUPPLIER_QTY)){
			obTriage = objectFacade.loadObjectAttributeBean(rate.getId(), SUPPLIER_QTY).createMutable()
			quantity = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()
		}
        log.info &quot;quantity: &quot; + quantity
        
        if(objectFacade.loadObjectAttributeBean(rate.getId(), TECH_NUMBER)){
			obTriage = objectFacade.loadObjectAttributeBean(rate.getId(), TECH_NUMBER).createMutable()
			techs = obTriage.getObjectAttributeValueBeans()[0].getValue().toString()
		}
        log.info &quot;techs: &quot; + techs
        
        if(techs != null &amp;&amp; techs &gt; 0){        	
            
            def objectTypeAttributeBean = objectTypeAttributeFacade.loadObjectTypeAttributeBean(CUSTOMER_QTY_ID).createMutable() //The id of the attribute

            /* Create the new attribute bean based on the value */
            def newObjectAttributeBean = objectAttributeBeanFactory.createObjectAttributeBeanForObject(rate, objectTypeAttributeBean, quantity);
            /* Load the attribute bean */
            def objectAttributeBean = objectFacade.loadObjectAttributeBean(rate.getId(), quantity);
            if (objectAttributeBean != null) {
                /* If attribute exist reuse the old id for the new attribute */
                newObjectAttributeBean.setId(objectAttributeBean.getId());
            }
            /* Store the object attribute into Insight. */
            try {
                objectTypeAttributeBean = objectFacade.storeObjectAttributeBean(newObjectAttributeBean);
            } catch (Exception vie) {
                log.warn(&quot;Could not update object attribute due to validation exception:&quot; + vie.getMessage());
            }  
            
        }   
        
    }
}
   </arg>
                  <arg name="field.filepath"></arg>
                  <arg name="class.name">com.riadalabs.jira.plugins.insight.services.jira.postfunction.InsightPostFunction</arg>
                  <arg name="field.description">Copy QUANTITY_SUPPLIER to QUANTITY_CUSTOMER for Labour Rates (TECH_NUMBER != 0)</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">e77878de-a7ba-4bff-b4dd-17dc2ad17bbb</arg>
                  <arg name="FIELD_NOTES">YCFgQ2xlYXIgY2FjaGU=</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxuXG4vKiBSRVNUIEFQSSBwZXIgR2VuZXJhemlvbmUgQWxsZWdhdG8gUmFwcG9ydG8gZGkgSW50ZXJ2ZW50byAqL1xucmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuLypTY3JpcHQgVmFyaWFibGVzKi9cbi8vUGVyIHRlc3QgZGEgY29uc29sZVxuLy9Jc3N1ZSBpc3N1ZSA9IGlzc3VlTWFuYWdlci5nZXRJc3N1ZUJ5S2V5SWdub3JlQ2FzZShcIk9QVVQtMTQwNjJcIilcbmJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9hdXRvbWF0aW9uL2NsZWFyQ2FjaGUvZGF0YU9iamVjdFwiXG5kZWYgYm9keV9yZXEgPSBbXVxuVVJMIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcbkh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbmNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5sb2cuZGVidWcgXCJib2R5X3JlcTogXCIgKyBib2R5X3JlcVxuY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxubG9nLmRlYnVnIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5jb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAwXCIpKXtcbiAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcbn0iLCJzY3JpcHRQYXRoIjpudWxsfQ==</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">a6604d0a-af28-40f6-84ec-7a2dc32df2b0</arg>
                  <arg name="FIELD_NOTES">YCFgT1AgRW1haWwgTm90aWZpY2F0aW9uOiBRVU9URV9GUk9NX1NVUFBMSUVSIC0gbWFudGVudXRhIGNvbWUgcG9zdCBmdW5jdGlvbiBwZXIgZXZpdGFyZSBkaSBnZW5lcmFyZSBibG9jY2hpIGFsIGZvcm5pdG9yZSBsZWdhdGkgYWxsJ2ludmlvIGRpIG5vdGlmaWNoZSBpbnRlcm5l</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnlcbmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuZGVmIHJlcXVlc3RNZXRob2QgPSBcIlBPU1RcIjtcblxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpO1xuQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpO1xuXG5kZWYgYm9keV9yZXEgPSBbXG5cdFwidGVtcGxhdGVOYW1lXCI6IHByb3BlcnRpZXNbJ3R0LnF1b3RlRnJvbVN1cHBsaWVyJ10udG9TdHJpbmcoKSxcblx0XCJwZWNcIjogZmFsc2UsXG4gICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXlcbl1cblxuZGVmIGJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9qaXJhL0FBL3RyYW5zYWN0aW9uL21haWwvc2VuZFwiXG5VUkwgdXJsXG51cmwgPSBuZXcgVVJMKGJhc2VVUkwpXG5cbkh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbmNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5jb25uZWN0aW9uLm91dHB1dFN0cmVhbS53aXRoV3JpdGVyKFwiVVRGLThcIikgeyBuZXcgU3RyZWFtaW5nSnNvbkJ1aWxkZXIoaXQsIGJvZHlfcmVxKSB9XG5sb2cuZGVidWcgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW1cbmNvbm5lY3Rpb24uY29ubmVjdCgpO1xuXG5sb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG5sb2cuZGVidWcgXCJSZXNwb25zZUNvZGU6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpXG5sb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG5sb2cuZGVidWcgXCJnZXRSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG5cbiIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7CmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5CkNhdGVnb3J5IGxvZyA9IENhdGVnb3J5LmdldEluc3RhbmNlKCJjb20ub25yZXNvbHZlLmppcmEuZ3Jvb3Z5LlBvc3RGdW5jdGlvbiIpCmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKQppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lcgppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGwKClByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKCkKRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJykKcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHsKCXByb3BlcnRpZXMubG9hZChpdCkKfQpkZWYgcmVxdWVzdE1ldGhvZCA9ICJQT1NUIjsKCklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTsKQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpOwoKZGVmIGJvZHlfcmVxID0gWwoJInRlbXBsYXRlTmFtZSI6IHByb3BlcnRpZXNbJ3R0LmFjY2VwdGVkQnlTdXBwbGllciddLnRvU3RyaW5nKCksCgkicGVjIjogZmFsc2UsCiAgICAiaXNzdWVLZXkiOiBpc3N1ZS5rZXkKXQoKZGVmIGJhc2VVUkwgPSAiaHR0cDovLyIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArICIvb3AvcmVzdC9qaXJhL0FBL3RyYW5zYWN0aW9uL21haWwvc2VuZCIKVVJMIHVybAp1cmwgPSBuZXcgVVJMKGJhc2VVUkwpCgpIdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7CmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KCJDb250ZW50LVR5cGUiLCAiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04Iik7CmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KCJBY2NlcHQiLCAiKi8qIik7CmNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7CmNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTsKY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0KY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcigiVVRGLTgiKSB7IG5ldyBTdHJlYW1pbmdKc29uQnVpbGRlcihpdCwgYm9keV9yZXEpIH0KbG9nLmRlYnVnIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtCmNvbm5lY3Rpb24uY29ubmVjdCgpOwoKbG9nLmRlYnVnICJ1cmw6ICIgKyB1cmwKbG9nLmRlYnVnICJSZXNwb25zZUNvZGU6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkKbG9nLmRlYnVnICJSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKbG9nLmRlYnVnICJnZXRSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKCg==</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">006d56d8-dd5b-4b7a-9db1-0b469bd12c47</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IENhbGN1bGF0ZSBPRkZFUl9DVVNUT01FUl9UT1RBTF9BTU9VTlQsIE9GRkVSX1NVUFBMSUVSX1RPVEFMX0FNT1VOVCArIF9NQVRFUklBTCBlIF9MQUJPVVI=</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22693</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="field2">customfield_22647</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="271" name="Quote Reminder">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <results>
            <unconditional-result old-status="null" status="null" step="9">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">0937d5c2-63f9-4330-9f2b-60f37a763628</arg>
                  <arg name="FIELD_NOTES">YCFgT1AgRW1haWwgTm90aWZpY2F0aW9uOiBSRU1JTkRFUl9GT1JfU1VQUExJRVJfUVVPVEUgKyBVcGRhdGUgZmllbGQgUkVNSU5ERVJfRk9SX1NVUFBMSUVSX1FVT1RFIHdpdGggbmV3IGR1ZSBkYXRl</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuXG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUubGluay5Jc3N1ZUxpbmsgXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk1vZGlmaWVkVmFsdWVcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUudXRpbC5EZWZhdWx0SXNzdWVDaGFuZ2VIb2xkZXJcbmltcG9ydCBqYXZhLnNxbC5UaW1lc3RhbXBcbmltcG9ydCBqYXZhLnRleHQuU2ltcGxlRGF0ZUZvcm1hdFxuaW1wb3J0IGphdmEudGV4dC5EYXRlRm9ybWF0XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk1vZGlmaWVkVmFsdWVcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUudXRpbC5Jc3N1ZUNoYW5nZUhvbGRlclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS51dGlsLkRlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5ldmVudC50eXBlLkV2ZW50RGlzcGF0Y2hPcHRpb25cbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyXG5pbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGxcblxuUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKVxuRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJylcbnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7XG5cdHByb3BlcnRpZXMubG9hZChpdClcbn1cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxuXG5VUkwgdXJsXG5IdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uXG5kZWYgbWkgPSAoTXV0YWJsZUlzc3VlKSBpc3N1ZVxuZGVmIGN1cnJlbnRVc2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SmlyYUF1dGhlbnRpY2F0aW9uQ29udGV4dCgpLmdldExvZ2dlZEluVXNlcigpXG5cbmRlZiByZW1pbmRlckRhdGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2Yud2ZSZW1pbmRlckZvclNRdW90ZSddLnRvU3RyaW5nKCkpWzBdXG5cbnJlcXVlc3RNZXRob2QgPSBcIlBPU1RcIjtcbmRlZiBib2R5X3JlcSA9IFtdXG5cbmJvZHlfcmVxID0gW1xuICAgICAgICBcInRlbXBsYXRlTmFtZVwiOiBwcm9wZXJ0aWVzWyd0dC5yZW1pbmRlclRvUyddLnRvU3RyaW5nKCksXG4gICAgICAgIFwicGVjXCI6IGZhbHNlLFxuICAgICAgICBcImlzc3VlS2V5XCI6IGlzc3VlLmtleVxuXSBcblxuYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvdHJhbnNhY3Rpb24vbWFpbC9zZW5kXCJcbnVybCA9IG5ldyBVUkwoYmFzZVVSTClcbmNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbmNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5jb25uZWN0aW9uLm91dHB1dFN0cmVhbS53aXRoV3JpdGVyKFwiVVRGLThcIikgeyBuZXcgU3RyZWFtaW5nSnNvbkJ1aWxkZXIoaXQsIGJvZHlfcmVxKSB9XG5sb2cuZGVidWcgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW1cbmNvbm5lY3Rpb24uY29ubmVjdCgpO1xuXG5kZWYgb3V0cHV0ID0gbmV3IEFycmF5TGlzdCgpXG5kZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbmRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKVxuZGVmIGVycm9yTXNncyA9IG5ldyBBcnJheUxpc3QoKVxuXG5pZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDBcIikgJiYgIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDRcIikpe1xuICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICBsb2cuZGVidWcgXCJSZXNwb25zZUNvZGU6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuXG4gICAgZGVmIG91dHB1dE1zZyA9ICgoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dFxuICAgIGxvZy5kZWJ1ZyBcIigoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dDogXCIgKyBvdXRwdXRNc2dcblxuICAgIGRlZiBqc29uU2x1cnBlciA9IG5ldyBKc29uU2x1cnBlcigpXG4gICAgZGVmIGpzb25fb2JqZWN0ID0ganNvblNsdXJwZXIucGFyc2VUZXh0KG91dHB1dE1zZylcbiAgICBhc3NlcnQganNvbl9vYmplY3QgaW5zdGFuY2VvZiBNYXAgIFxuICAgIGxvZy5kZWJ1ZyBcIm1lc3NhZ2U6IFwiICsgIGpzb25fb2JqZWN0Lm1lc3NhZ2VcblxuICAgIGVMaXN0RXJyb3JzLmFkZChcIkVcIilcbiAgICBlTGlzdEVycm9ycy5hZGQoXCJTRU5ETUFJTFwiKVxuICAgIGVycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArIFwiIFwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKSlcbiAgICBlTGlzdEVycm9ycy5hZGQoanNvbl9vYmplY3QubWVzc2FnZSlcbiAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpXG4gICAgXG4gICAgb3V0cHV0LmFkZChlTGlzdClcbiAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9Jylcbn1lbHNle1xuXG4gICAgZGVmIGRhdGUgPSBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHJlbWluZGVyRGF0ZSlcbiAgICBEYXRlIG5ld1REViA9IG5ldyBEYXRlKClcbiAgICBcbiAgICBkZWYgbmV3RGF0ZWZvcm1hdCA9IG5ld1REVi5mb3JtYXQoJ01NL2RkL3l5eXknKVxuICAgIFNpbXBsZURhdGVGb3JtYXQgc2RmID0gbmV3IFNpbXBsZURhdGVGb3JtYXQoXCJNTS9kZC95eXl5XCIpO1xuXHRkZWYgY2FsID0gQ2FsZW5kYXIuZ2V0SW5zdGFuY2UoKVxuICAgIGNhbC5zZXRUaW1lKHNkZi5wYXJzZShuZXdEYXRlZm9ybWF0KSk7XG4gICAgY2FsLmFkZChDYWxlbmRhci5EQVRFLCArMik7IFxuXG4gICAgVGltZXN0YW1wIERlZlRERCA9IG5ldyBUaW1lc3RhbXAoY2FsLmdldFRpbWVJbk1pbGxpcygpKVxuIFxuICAgIG1pLnNldEN1c3RvbUZpZWxkVmFsdWUocmVtaW5kZXJEYXRlLCBEZWZUREQpO1xuXHRDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKS51cGRhdGVJc3N1ZShjdXJyZW50VXNlciwgbWksIEV2ZW50RGlzcGF0Y2hPcHRpb24uRE9fTk9UX0RJU1BBVENILCBmYWxzZSk7IFxufSIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5NdXRhYmxlSXNzdWUKaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0OwppbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeQpDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQpsb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRykKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5saW5rLklzc3VlTGluayAKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Nb2RpZmllZFZhbHVlCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUudXRpbC5EZWZhdWx0SXNzdWVDaGFuZ2VIb2xkZXIKaW1wb3J0IGphdmEuc3FsLlRpbWVzdGFtcAppbXBvcnQgamF2YS50ZXh0LlNpbXBsZURhdGVGb3JtYXQKaW1wb3J0IGphdmEudGV4dC5EYXRlRm9ybWF0CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTW9kaWZpZWRWYWx1ZQppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnV0aWwuSXNzdWVDaGFuZ2VIb2xkZXIKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS51dGlsLkRlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlcgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmV2ZW50LnR5cGUuRXZlbnREaXNwYXRjaE9wdGlvbgppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lcgppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGwKClByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKCkKRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJykKcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHsKCXByb3BlcnRpZXMubG9hZChpdCkKfQpJc3N1ZU1hbmFnZXIgaXNzdWVNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKCk7CkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTsKZGVmIHJlcXVlc3RNZXRob2QKZGVmIGJhc2VVUkwKClVSTCB1cmwKSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvbgpkZWYgbWkgPSAoTXV0YWJsZUlzc3VlKSBpc3N1ZQpkZWYgY3VycmVudFVzZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRKaXJhQXV0aGVudGljYXRpb25Db250ZXh0KCkuZ2V0TG9nZ2VkSW5Vc2VyKCkKCmRlZiByZW1pbmRlckRhdGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2Yud2ZSZW1pbmRlckZvclNRdW90ZSddLnRvU3RyaW5nKCkpWzBdCgpyZXF1ZXN0TWV0aG9kID0gIlBPU1QiOwpkZWYgYm9keV9yZXEgPSBbXQoKYm9keV9yZXEgPSBbCiAgICAgICAgInRlbXBsYXRlTmFtZSI6IHByb3BlcnRpZXNbJ3R0LnJlbWluZGVyVG9TJ10udG9TdHJpbmcoKSwKICAgICAgICAicGVjIjogZmFsc2UsCiAgICAgICAgImlzc3VlS2V5IjogaXNzdWUua2V5Cl0gCgpiYXNlVVJMID0gImh0dHA6Ly8iICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyAiL29wL3Jlc3QvamlyYS9BQS90cmFuc2FjdGlvbi9tYWlsL3NlbmQiCnVybCA9IG5ldyBVUkwoYmFzZVVSTCkKY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eSgiQ29udGVudC1UeXBlIiwgImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOCIpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eSgiQWNjZXB0IiwgIiovKiIpOwpjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpOwpjb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7CmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtCmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtLndpdGhXcml0ZXIoIlVURi04IikgeyBuZXcgU3RyZWFtaW5nSnNvbkJ1aWxkZXIoaXQsIGJvZHlfcmVxKSB9CmxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbQpjb25uZWN0aW9uLmNvbm5lY3QoKTsKCmRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpCmRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKQpkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpCgppZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoIjIwMCIpKXsKICAgIGxvZy5kZWJ1ZyAidXJsOiAiICsgdXJsCiAgICBsb2cuZGVidWcgIlJlc3BvbnNlQ29kZToiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKQogICAgbG9nLmRlYnVnICJSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKICAgIGVMaXN0RXJyb3JzLmFkZCgiRSIpCiAgICBlTGlzdEVycm9ycy5hZGQoIlNFTkRNQUlMIikKICAgIGVycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArICIgIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkpCiAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKQogICAgZUxpc3QuYWRkKGVMaXN0RXJyb3JzKQoKICAgIG91dHB1dC5hZGQoZUxpc3QpCiAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCJFIiwgb3V0cHV0LnRvU3RyaW5nKCkpCn1lbHNlewoKICAgIGRlZiBkYXRlID0gaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShyZW1pbmRlckRhdGUpCiAgICBEYXRlIG5ld1REViA9IG5ldyBEYXRlKCkKICAgIAogICAgZGVmIG5ld0RhdGVmb3JtYXQgPSBuZXdURFYuZm9ybWF0KCdNTS9kZC95eXl5JykKICAgIFNpbXBsZURhdGVGb3JtYXQgc2RmID0gbmV3IFNpbXBsZURhdGVGb3JtYXQoIk1NL2RkL3l5eXkiKTsKCWRlZiBjYWwgPSBDYWxlbmRhci5nZXRJbnN0YW5jZSgpCiAgICBjYWwuc2V0VGltZShzZGYucGFyc2UobmV3RGF0ZWZvcm1hdCkpOwogICAgY2FsLmFkZChDYWxlbmRhci5EQVRFLCArMik7IAoKICAgIFRpbWVzdGFtcCBEZWZUREQgPSBuZXcgVGltZXN0YW1wKGNhbC5nZXRUaW1lSW5NaWxsaXMoKSkKIAogICAgbWkuc2V0Q3VzdG9tRmllbGRWYWx1ZShyZW1pbmRlckRhdGUsIERlZlRERCk7CglDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKS51cGRhdGVJc3N1ZShjdXJyZW50VXNlciwgbWksIEV2ZW50RGlzcGF0Y2hPcHRpb24uRE9fTk9UX0RJU1BBVENILCBmYWxzZSk7IAp9</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="10" name="Supplier Quote Received">
      <meta name="jira.status.id">14333</meta>
      <actions>
        <action id="281" name="Invia Offerta al Cliente" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19926</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">87c923e5bb5b4e6303d9b8ce896495c53f9b7957</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlcXVpcmVkIEZpZWxkcw==</arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="11">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">8df6d33b-0bf0-4116-b25c-f8be3f3e11c8</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IENhbGN1bGF0ZSBPRkZFUl9DVVNUT01FUl9UT1RBTF9BTU9VTlQsIE9GRkVSX1NVUFBMSUVSX1RPVEFMX0FNT1VOVCArIF9NQVRFUklBTCBlIF9MQUJPVVI=</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22693</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="291" name="Genera Offerta - PDF" view="fieldscreen">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19926</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">87c923e5bb5b4e6303d9b8ce896495c53f9b7957</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlcXVpcmVkIEZpZWxkcw==</arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">f0e886b6a38b4c375023c581670d7765927ee07a</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBnZW5lcmF0ZSBPZmZlciBhdHRhY2htZW50</arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="10">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22693</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="301" name="Genera Offerta - Word" view="fieldscreen">
          <meta name="opsbar-sequence">30</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19926</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">87c923e5bb5b4e6303d9b8ce896495c53f9b7957</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlcXVpcmVkIEZpZWxkcw==</arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">0ed547676d78f1b77b55fb654d1a258e09977399</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBnZW5lcmF0ZSBPZmZlciBhdHRhY2htZW50IC0gV29yZA==</arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="10">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22693</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="721" name="Riapri Preventivo Fornitore">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <results>
            <unconditional-result old-status="null" status="null" step="9">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22673</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field6">customfield_22678</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="field3">customfield_22674</arg>
                  <arg name="field2">customfield_22676</arg>
                  <arg name="field5">customfield_22675</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="field4">customfield_22677</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="11" name="Waiting for Customer Feedback">
      <meta name="jira.status.id">14334</meta>
      <actions>
        <action id="311" name="Offerta Accettata da Cliente">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">aa89ccbd-313b-4123-bde9-a6c67360c801</arg>
              <arg name="FIELD_NOTES">YCFgU0FQOiB1cGRhdGUgU04gc3RhdHVzICYgY3JlYXRlIFNP</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuSXNzdWVMaW5rXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcblxuZGVmIHNhcFNOID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShcIk9QX1NBUF9TRVJWSUNFX05PVElGSUNBVElPTlwiKVswXVxuZGVmIHJlcXVlc3RNZXRob2RcbmRlZiBiYXNlVVJMXG5cblVSTCB1cmxcbkh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb25cblxuaWYoaXNzdWUuaXNzdWVUeXBlLm5hbWUgIT0gXCJQbGFubmVkIE1haW50ZW5hbmNlIFRpY2tldFwiICYmIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc2FwU04pICE9IG51bGwpe1xuICAgIHJlcXVlc3RNZXRob2QgPSBcIlBPU1RcIjtcblxuICAgIGRlZiBib2R5X3JlcSA9IFtdXG4gICAgYm9keV9yZXEgPSBbXG4gICAgICAgIFwiaXNzdWVLZXlcIjogaXNzdWUua2V5LFxuICAgICAgICBcInN0YXR1c1wiOiBcIlBMQVwiXG4gICAgXSBcblxuICAgIGJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9qaXJhL0FBL2FmdGVyL3NhbGVzL2NyZWF0ZS9zZXJ2aWNlL25vdGlmaWNhdGlvblwiXG5cbiAgICBsb2cuZGVidWcgXCJiYXNlVVJMIFNOOiBcIiArIGJhc2VVUkxcbiAgICBsb2cuZGVidWcgXCJib2R5X3JlcSBTTjogXCIgKyBib2R5X3JlcVxuICAgIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcbiAgICBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdE1ldGhvZChyZXF1ZXN0TWV0aG9kKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbiAgICBjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbiAgICBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtLndpdGhXcml0ZXIoXCJVVEYtOFwiKSB7IG5ldyBTdHJlYW1pbmdKc29uQnVpbGRlcihpdCwgYm9keV9yZXEpIH1cbiAgICBsb2cuZGVidWcgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW1cbiAgICBjb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuICAgIGRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5cbiAgICBpZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDBcIikpe1xuICAgICAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuICAgICAgICBcbiAgICAgICAgZGVmIG91dHB1dE1zZyA9ICgoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dFxuICAgICAgICBsb2cuZGVidWcgXCIoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHQ6IFwiICsgb3V0cHV0TXNnXG5cbiAgICAgICAgZGVmIGpzb25TbHVycGVyID0gbmV3IEpzb25TbHVycGVyKClcbiAgICAgICAgZGVmIGpzb25fb2JqZWN0ID0ganNvblNsdXJwZXIucGFyc2VUZXh0KG91dHB1dE1zZylcbiAgICAgICAgYXNzZXJ0IGpzb25fb2JqZWN0IGluc3RhbmNlb2YgTWFwICBcbiAgICAgICAgbG9nLmRlYnVnIFwibWVzc2FnZTogXCIgKyAganNvbl9vYmplY3QubWVzc2FnZVxuICAgICAgICBsb2cuZGVidWcgXCJlcnJvcnM6IFwiICsgIGpzb25fb2JqZWN0LmVycm9ycy50b1N0cmluZygpXG5cbiAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiRVwiKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJPUC1TQVAtU04tVVBEQVRFXCIpXG4gICAgICAgIGVycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArIFwiIFwiICsganNvbl9vYmplY3QuZXJyb3JzWzBdKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKVxuICAgICAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpXG5cbiAgICAgICAgb3V0cHV0LmFkZChlTGlzdClcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgfWVsc2V7XG4gICAgICAgIC8qKiBTRVJWSUNFIE9SREVSIENSRUFUSU9OICoqL1xuICAgICAgICBib2R5X3JlcSA9IFtcbiAgICAgICAgICAgIFwiaXNzdWVLZXlcIjogaXNzdWUua2V5XG4gICAgICAgIF0gXG4gICAgICAgIGJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9qaXJhL0FBL2FmdGVyL3NhbGVzL2NyZWF0ZS9vci91cGRhdGUvc2VydmljZS9vcmRlclwiXG5cbiAgICAgICAgbG9nLmRlYnVnIFwiYmFzZVVSTCBTTzogXCIgKyBiYXNlVVJMXG4gICAgICAgIGxvZy5kZWJ1ZyBcImJvZHlfcmVxIFNPOiBcIiArIGJvZHlfcmVxXG4gICAgICAgIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcbiAgICAgICAgY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTtcbiAgICAgICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuICAgICAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbiAgICAgICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJBY2NlcHRcIiwgXCIqLypcIik7XG4gICAgICAgIGNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7XG4gICAgICAgIGNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbiAgICAgICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW1cbiAgICAgICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxuICAgICAgICBsb2cuZGVidWcgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW1cbiAgICAgICAgY29ubmVjdGlvbi5jb25uZWN0KCk7XG5cbiAgICAgICAgb3V0cHV0ID0gbmV3IEFycmF5TGlzdCgpXG4gICAgICAgIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpXG4gICAgICAgIGVMaXN0RXJyb3JzID0gbmV3IEFycmF5TGlzdCgpXG4gICAgICAgIGVycm9yTXNncyA9IG5ldyBBcnJheUxpc3QoKVxuXG4gICAgICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMVwiKSAmJiAhY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMFwiKSl7XG4gICAgICAgICAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZUNvZGU6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpXG4gICAgICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGRlZiBvdXRwdXRNc2cgPSAoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHRcbiAgICBcdFx0bG9nLmRlYnVnIFwiKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0OiBcIiArIG91dHB1dE1zZ1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBkZWYganNvblNsdXJwZXIgPSBuZXcgSnNvblNsdXJwZXIoKVxuICAgICAgICAgICAgZGVmIGpzb25fb2JqZWN0ID0ganNvblNsdXJwZXIucGFyc2VUZXh0KG91dHB1dE1zZylcbiAgICAgICAgICAgIGFzc2VydCBqc29uX29iamVjdCBpbnN0YW5jZW9mIE1hcCAgXG4gICAgICAgICAgICBsb2cuZGVidWcgXCJtZXNzYWdlOiBcIiArICBqc29uX29iamVjdC5tZXNzYWdlXG4gICAgICAgICAgICBsb2cuZGVidWcgXCJlcnJvcnM6IFwiICsgIGpzb25fb2JqZWN0LmVycm9ycy50b1N0cmluZygpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIkVcIilcbiAgICAgICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIk9QLVNBUC1TTy1DUkVBVEVcIilcbiAgICAgICAgICAgIGVycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArIFwiIFwiICsganNvbl9vYmplY3QuZXJyb3JzWzBdKVxuICAgICAgICAgICAgZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncylcbiAgICAgICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycylcblxuICAgICAgICAgICAgb3V0cHV0LmFkZChlTGlzdClcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oJ3tcIkVcIjpcIicgKyBvdXRwdXQudG9TdHJpbmcoKSArICdcIn0nKVxuICAgICAgICB9XG4gICAgfVxufVxuICIsInNjcmlwdFBhdGgiOm51bGx9</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="12">
              <post-functions>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="fieldValue">Yes</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">customfield_22681</arg>
                </function>
                <function type="class">
                  <arg name="field.copyFieldSource2"></arg>
                  <arg name="field.copyFieldSource1">customfield_22683</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="field.createTargetValue1"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyFieldMode1">OVERWRITE</arg>
                  <arg name="field.copyFieldDestination1">customfield_22635</arg>
                  <arg name="field.copyFieldSeparator1"></arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescopyValueFromOtherField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.CopyValueFromOtherFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">38100fbf-8abd-4951-82c2-3defd3481f99</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IENhbGN1bGF0ZSBPRkZFUl9DVVNUT01FUl9UT1RBTF9BTU9VTlQsIE9GRkVSX1NVUFBMSUVSX1RPVEFMX0FNT1VOVCArIF9NQVRFUklBTCBlIF9MQUJPVVI=</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT"></arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">f66a5f06-1465-410f-b85d-1622703520c0</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IEdlbmVyYXRlIENvbXBvbmVudHMgJiBwb3B1bGF0ZSBPUEFBX1JFUExBQ0VEX01BVEVSSUFMUw==</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT"></arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="321" name="Offerta Rifiutata da Cliente">
          <meta name="opsbar-sequence">20</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <results>
            <unconditional-result old-status="null" status="null" step="13">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="331" name="Richiesta Preventivo Scaduta">
          <meta name="opsbar-sequence">30</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <results>
            <unconditional-result old-status="null" status="null" step="14">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="781" name="Riapri Offerta">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <results>
            <unconditional-result old-status="null" status="null" step="10">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22673</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="field3">customfield_22675</arg>
                  <arg name="field2">customfield_22674</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="12" name="Required">
      <meta name="jira.status.id">14335</meta>
      <actions>
<common-action id="51" />
<common-action id="751" />
<common-action id="541" />
<common-action id="861" />
        <action id="711" name="Riapri Offerta">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <results>
            <unconditional-result old-status="null" status="null" step="11">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22635</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="731" name="Modifica Impianto" view="fieldscreen">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">20116</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">1675639b-1b66-4d8e-ba9b-3d496754f415</arg>
                <arg name="FIELD_NOTES">YCFgRW5hYmxlZCBvbmx5IGZvciBuZXcgaW5zdCB0aWNrZXRzIGluIG9yZGVyIHRvIGFzc2lnbiBBU1NFVCBhbmQgZ2VuZXJhdGUgKG9yIHJlLWdlbmVyYXRlKSBEb2Nz</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiIoaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ05ldyBJbnN0YWxsYXRpb24nIHx8IChpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnTWFpbnRlbmFuY2UgVGlja2V0JyAmJiBjZlZhbHVlc1snT1BfRklSU1RfVElDS0VUJ10gPT0gXCJGaXJzdCBUaWNrZXRcIikpICYmIGNmVmFsdWVzWydPUF9BU1NFVCddICE9IG51bGwiLCJzY3JpcHRQYXRoIjpudWxsfQ==</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">3039511e-90dd-490d-99ef-f8487b209eba</arg>
              <arg name="FIELD_NOTES">YCFgRGVsZXRlIHByZXZpb3VzIGF0dGFjaG1lbnRzIHJlbGF0ZWQgdG8gTkVXIEluc3RhbGxhdGlvbiBUS1QgR2VuZXJhdGlvbg==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">8d35339f-f6d9-4134-9c7e-8df9cec0081e</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IERvYyBUZW1wbGF0ZSBnZW5lcmF0aW9uIC0gc2UgTmV3IEluc3RhbGxhdGlvbiBPUiBGaXJzdCBUaWNrZXQgPSB0cnVl</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5Xb3JrZmxvd0V4Y2VwdGlvbjtcbmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvblxuaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyO1xuaW1wb3J0IGdyb292eS5qc29uLlN0cmVhbWluZ0pzb25CdWlsZGVyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5DdXN0b21GaWVsZE1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3I7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5NdXRhYmxlSXNzdWVcbmltcG9ydCBvcmcuYXBhY2hlLmNvbW1vbnMuY29kZWMuYmluYXJ5LkJhc2U2NDtcbmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5XG5pbXBvcnQgZ3Jvb3Z5eC5uZXQuaHR0cC5IVFRQQnVpbGRlclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcblxuZGVmIHJlcXVlc3RNZXRob2RcbmRlZiBiYXNlVVJMXG5cbmRlZiBmaXJzdFRpY2tldCA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YuZmlyc3RUa3QnXS50b1N0cmluZygpKVswXVxuXG5sb2cuZGVidWcgaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZVxubG9nLmRlYnVnIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoZmlyc3RUaWNrZXQpXG5cblxuLyogUkVTVCBBUEkgcGVyIEludmlvIE5vdGlmaWNhIEVtYWlsIE9OU0lURV9SRVBPUlQgKi9cbnJlcXVlc3RNZXRob2QgPSBcIkdFVFwiO1xuXG5pZihpc3N1ZS5nZXRJc3N1ZVR5cGUoKS5uYW1lLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2l0Lm5ld0luc3RhbGxhdGlvbiddKSB8fCBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGZpcnN0VGlja2V0KSE9bnVsbCl7XG4gICAgZGVmIGZpcnN0X3RpY2tldD1mYWxzZVxuICAgIGRlZiB0ZW1wbGF0ZT1cIlwiXG4gICAgaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShmaXJzdFRpY2tldCkhPW51bGwpe1xuICAgICAgICBmaXJzdF90aWNrZXQ9dHJ1ZVxuICAgICAgICB0ZW1wbGF0ZT1cIkZJUlNUX1RJQ0tFVCU3Q01BTlVGQUNUVVJFUlwiXG4gICAgfWVsc2V7XG4gICAgICAgIHRlbXBsYXRlPVwiTkVXX0lOU1RBTExBVElPTl9DUkVBVEVfVEtUJTdDTUFOVUZBQ1RVUkVSXCJcbiAgICB9XG4gICAgXG4gICAgaWYoaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpdC5uZXdJbnN0YWxsYXRpb24nXSkpe1xuICAgICAgICBiYXNlVVJMID0gXCJodHRwOi8vXCIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArIFwiL29wL3Jlc3QvYXV0b21hdGlvbi9kb2N1bWVudC9nZW5lcmF0aW9uL2NoZWNrP0lTU1VFX0tFWT1cIisgaXNzdWUua2V5ICtcIiZET0NfQ0FURUdPUlk9XCIgKyB0ZW1wbGF0ZSArIFwiJkVOQUJMRURfRk9SX0ZJUlNUX1RJQ0tFVD1cIitmaXJzdF90aWNrZXQrXCImSU1QT1JUX0ZST009XCJcbiAgICB9ZWxzZXtcbiAgICAgICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2F1dG9tYXRpb24vZG9jdW1lbnQvZ2VuZXJhdGlvbi9jaGVjaz9JU1NVRV9LRVk9XCIrIGlzc3VlLmtleSArXCImRE9DX0NBVEVHT1JZPVwiICsgdGVtcGxhdGUgKyBcIiZFTkFCTEVEX0ZPUl9GSVJTVF9USUNLRVQ9XCIrZmlyc3RfdGlja2V0K1wiJklNUE9SVF9GUk9NPU9QX0FTU0VUXCJcbiAgICB9XG4gICAgXG4gICAgbG9nLmRlYnVnIGJhc2VVUkxcbiAgICBVUkwgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgIEh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbiAgICBjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbiAgICBjb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuICAgIGRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5cdGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICBcbiAgICBpZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDBcIikpe1xuICAgICAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuICAgICAgICBsb2cuZGVidWcgXCJFcnJvclN0cmVhbTogXCIgKyBjb25uZWN0aW9uLmdldEVycm9yU3RyZWFtKCkudG9TdHJpbmcoKVxuICAgICAgICBsb2cuZGVidWcgXCJnZXRIZWFkZXJGaWVsZHMoKTogXCIgKyBjb25uZWN0aW9uLmdldEhlYWRlckZpZWxkcygpXG4gICAgICAgIGRlZiBvdXRwdXRNc2cgPSAoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHRcbiAgICAgICAgbG9nLmRlYnVnIFwiKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0OiBcIiArIG91dHB1dE1zZ1xuXG4gICAgICAgIGRlZiBqc29uU2x1cnBlciA9IG5ldyBKc29uU2x1cnBlcigpXG4gICAgICAgIGRlZiBqc29uX29iamVjdCA9IGpzb25TbHVycGVyLnBhcnNlVGV4dChvdXRwdXRNc2cpXG4gICAgICAgIGFzc2VydCBqc29uX29iamVjdCBpbnN0YW5jZW9mIE1hcCAgXG4gICAgICAgIGxvZy5kZWJ1ZyBcIm1lc3NhZ2U6IFwiICsgIGpzb25fb2JqZWN0Lm1lc3NhZ2VcblxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIk9QLURPQ1NcIilcbiAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5tZXNzYWdlKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKVxuICAgICAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpXG5cbiAgICAgICAgb3V0cHV0LmFkZChlTGlzdClcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgfVxufVxuIiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="12">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="13" name="Rejected">
      <meta name="jira.status.id">11436</meta>
      <actions>
        <action id="771" name="indietro">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <results>
            <unconditional-result old-status="null" status="null" step="10">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="14" name="Quote Expired">
      <meta name="jira.status.id">14336</meta>
    </step>
    <step id="16" name="Suspended">
      <meta name="jira.status.id">14337</meta>
      <actions>
<common-action id="371" />
      </actions>
    </step>
    <step id="17" name="Canceled">
      <meta name="jira.status.id">11728</meta>
      <actions>
<common-action id="371" />
      </actions>
    </step>
    <step id="18" name="Completed during Maintenance">
      <meta name="jira.status.id">14827</meta>
      <actions>
<common-action id="141" />
      </actions>
    </step>
    <step id="19" name="Assigned to Technician">
      <meta name="jira.status.id">14927</meta>
      <actions>
<common-action id="81" />
<common-action id="121" />
        <action id="871" name="Accetta Intervento" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19905</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">9ea9661d5b7954626bd1f3b6b542df62f7afc3dd</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIGVycm9ycyAmIHdhcm5pbmdz</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlXG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGdyb292eS5qc29uLkpzb25CdWlsZGVyXG5pbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXG5cblByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgICBcbkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpXG5wcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0ge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFxuXHRwcm9wZXJ0aWVzLmxvYWQoaXQpXG59XG5kZWYgQ2F0ZWdvcnkgbG9nID0gQ2F0ZWdvcnkuZ2V0SW5zdGFuY2UoXCJjb20ub25yZXNvbHZlLmppcmEuZ3Jvb3Z5LlBvc3RGdW5jdGlvblwiKVxuIFxuSXNzdWUgaXNzdWUgPSBpc3N1ZVxuXG5kZWYgZXJyb3JzID0gZmFsc2VcbmRlZiB3YXJuaW5ncyA9IGZhbHNlXG5cbmRlZiBzdXBwbGllckxhYmVsID0gcHJvcGVydGllc1snY2Yuc3VwcGxpZXInXSA/IHByb3BlcnRpZXNbJ2NmLnN1cHBsaWVyJ10udG9TdHJpbmcoKSA6IFwiT1BfU1VQUExJRVJcIlxuZGVmIHN1cHBsaWVyMSA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShzdXBwbGllckxhYmVsKVswXVxuZGVmIHN1cHBsaWVyMiA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShzdXBwbGllckxhYmVsKVsxXVxuXG5kZWYgZXJyb3JNYW5kYXRvcnlGaWVsZHMgPSBuZXcgQXJyYXlMaXN0KClcbmRlZiB3YXJuaW5nRW1wdHlGaWVsZHMgPSBuZXcgQXJyYXlMaXN0KClcbiBcbi8vT1BfU1VQUExJRVJfUkVQQUlSIHZzIE9QX1NVUFBMSUVSX05FV0lOU1RcbmxvZy5kZWJ1ZyBcInN1cHBsaWVyTGFiZWw6IFwiICsgc3VwcGxpZXJMYWJlbFxubG9nLmRlYnVnIFwic3VwcGxpZXIxOiBcIiArIHN1cHBsaWVyMVxubG9nLmRlYnVnIFwic3VwcGxpZXIyOiBcIiArIHN1cHBsaWVyMlxuZGVmIHN1cHBsaWVyMWVtcHR5ID0gaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzdXBwbGllcjEpPT1udWxsIHx8IChTdHJpbmcpaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzdXBwbGllcjEpID09IFwiXCIgfHwgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzdXBwbGllcjEpLnRvU3RyaW5nKCkuZXF1YWxzKFwiXCIpXG5kZWYgc3VwcGxpZXIyZW1wdHkgPSBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHN1cHBsaWVyMik9PW51bGwgfHwgKFN0cmluZylpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHN1cHBsaWVyMikgPT0gXCJcIiB8fCBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHN1cHBsaWVyMikudG9TdHJpbmcoKS5lcXVhbHMoXCJcIilcbmxvZy5kZWJ1ZyBcInN1cHBsaWVyMWVtcHR5OiBcIiArIHN1cHBsaWVyMWVtcHR5XG5sb2cuZGVidWcgXCJzdXBwbGllcjJlbXB0eTogXCIgKyBzdXBwbGllcjJlbXB0eVxuaWYoKHN1cHBsaWVyMWVtcHR5KSAmJiAoc3VwcGxpZXIyZW1wdHkpKXtcblx0bG9nLmRlYnVnIFwic3VwcGxpZXIxZW1wdHkgJiYgc3VwcGxpZXIyZW1wdHlcIlxuICAgIGVycm9ycyA9IHRydWVcblx0ZXJyb3JNYW5kYXRvcnlGaWVsZHMuYWRkKHN1cHBsaWVyTGFiZWwpXG4gICAgbG9nLmRlYnVnIFwiZXJyb3JNYW5kYXRvcnlGaWVsZHM6IFwiICsgZXJyb3JNYW5kYXRvcnlGaWVsZHNcbn1cblxuZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKVxuXG5pZiAoIWVycm9ycyAmJiAhd2FybmluZ3Mpe1xuICAgIHJldHVybiB0cnVlXG59ZWxzZXtcbiAgICBpZighZXJyb3JzICYmIHdhcm5pbmdzKXtcbiAgICAgICAgZGVmIHdMaXN0ID0gbmV3IEFycmF5TGlzdCgpXG4gICAgICAgIFxuICAgICAgICBpZih3YXJuaW5nRW1wdHlGaWVsZHMuc2l6ZSgpID4gMCl7XG4gICAgICAgICAgICBkZWYgd0xpc3RDb25maXJtRW1wdHkgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5LmFkZChcIldcIilcbiAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5LmFkZChcIkNPTkZJUk1fRU1QVFlfRklFTERTXCIpXG4gICAgICAgICAgICB3TGlzdENvbmZpcm1FbXB0eS5hZGQobnVsbClcbiAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5LmFkZCh3YXJuaW5nRW1wdHlGaWVsZHMpXG5cbiAgICAgICAgICAgIHdMaXN0LmFkZCh3TGlzdENvbmZpcm1FbXB0eSlcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgb3V0cHV0LmFkZCh3TGlzdClcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiV1wiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbihcIldcIiwgb3V0cHV0LnRvU3RyaW5nKCkpICAgXG4gICAgfVxuICAgIGlmKGVycm9ycyAmJiAhd2FybmluZ3Mpe1xuICAgICAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgXG4gICAgICAgIGlmKGVycm9yTWFuZGF0b3J5RmllbGRzLnNpemUoKSA+IDApe1xuICAgICAgICAgICAgZGVmIGVMaXN0TWFuZGF0b3J5ID0gbmV3IEFycmF5TGlzdCgpXG4gICAgICAgICAgICBlTGlzdE1hbmRhdG9yeS5hZGQoXCJFXCIpXG4gICAgICAgICAgICBlTGlzdE1hbmRhdG9yeS5hZGQoXCJNQU5EQVRPUllfRklFTERTXCIpXG4gICAgICAgICAgICBlTGlzdE1hbmRhdG9yeS5hZGQobnVsbClcbiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZChlcnJvck1hbmRhdG9yeUZpZWxkcylcbiAgICAgICAgICAgIGVMaXN0LmFkZChlTGlzdE1hbmRhdG9yeSlcbiAgICAgICAgfVxuICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcbiAgICAgICAgLy90aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKFwiRVwiLCBvdXRwdXQudG9TdHJpbmcoKSkgICBcbiAgICB9XG4gICAgaWYoZXJyb3JzICYmIHdhcm5pbmdzKXtcbiAgICAgICAgZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpXG4gICAgICAgIGRlZiB3TGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuICAgICAgICBcbiAgICAgICAgaWYoZXJyb3JNYW5kYXRvcnlGaWVsZHMuc2l6ZSgpID4gMCl7XG4gICAgICAgICAgICBkZWYgZUxpc3RNYW5kYXRvcnkgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZChcIkVcIilcbiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZChcIk1BTkRBVE9SWV9GSUVMRFNcIilcbiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZChudWxsKVxuICAgICAgICAgICAgZUxpc3RNYW5kYXRvcnkuYWRkKGVycm9yTWFuZGF0b3J5RmllbGRzKVxuICAgICAgICAgICAgZUxpc3QuYWRkKGVMaXN0TWFuZGF0b3J5KVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZih3YXJuaW5nRW1wdHlGaWVsZHMuc2l6ZSgpID4gMCl7XG4gICAgICAgICAgICBkZWYgd0xpc3RDb25maXJtRW1wdHkgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5LmFkZChcIldcIilcbiAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5LmFkZChcIkNPTkZJUk1fRU1QVFlfRklFTERTXCIpXG4gICAgICAgICAgICB3TGlzdENvbmZpcm1FbXB0eS5hZGQobnVsbClcbiAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5LmFkZCh3YXJuaW5nRW1wdHlGaWVsZHMpXG5cbiAgICAgICAgICAgIHdMaXN0LmFkZCh3TGlzdENvbmZpcm1FbXB0eSlcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgb3V0cHV0LmFkZChlTGlzdClcbiAgICAgICAgb3V0cHV0LmFkZCh3TGlzdClcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiV0VcIjpcIicgKyBvdXRwdXQudG9TdHJpbmcoKSArICdcIn0nKVxuICAgICAgICAvL3Rocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oXCJXRVwiLCBvdXRwdXQudG9TdHJpbmcoKSkgIFxuICAgIH1cbn0iLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZQppbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb24KaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3IKaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGdyb292eS5qc29uLkpzb25CdWlsZGVyCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbAoKUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKQpGaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKQpwcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0gewoJcHJvcGVydGllcy5sb2FkKGl0KQp9CmRlZiBDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQogCklzc3VlIGlzc3VlID0gaXNzdWUKCmRlZiBlcnJvcnMgPSBmYWxzZQpkZWYgd2FybmluZ3MgPSBmYWxzZQoKZGVmIHN1cHBsaWVyTGFiZWwgPSBwcm9wZXJ0aWVzWydjZi5zdXBwbGllciddID8gcHJvcGVydGllc1snY2Yuc3VwcGxpZXInXS50b1N0cmluZygpIDogIk9QX1NVUFBMSUVSIgpkZWYgc3VwcGxpZXIgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHN1cHBsaWVyTGFiZWwpWzBdCgpkZWYgZXJyb3JNYW5kYXRvcnlGaWVsZHMgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIHdhcm5pbmdFbXB0eUZpZWxkcyA9IG5ldyBBcnJheUxpc3QoKQogCi8vT1BfU1VQUExJRVJfUkVQQUlSIHZzIE9QX1NVUFBMSUVSX05FV0lOU1QKbG9nLmRlYnVnICJzdXBwbGllckxhYmVsOiAiICsgc3VwcGxpZXJMYWJlbAppZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHN1cHBsaWVyKT09bnVsbCB8fCAoU3RyaW5nKWlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc3VwcGxpZXIpID09ICIiIHx8IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc3VwcGxpZXIpLnRvU3RyaW5nKCkuZXF1YWxzKCIiKSl7CgllcnJvcnMgPSB0cnVlCgllcnJvck1hbmRhdG9yeUZpZWxkcy5hZGQoc3VwcGxpZXJMYWJlbCkKICAgIGxvZy5kZWJ1ZyAiZXJyb3JNYW5kYXRvcnlGaWVsZHM6ICIgKyBlcnJvck1hbmRhdG9yeUZpZWxkcwp9CgoKZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKQoKaWYgKCFlcnJvcnMgJiYgIXdhcm5pbmdzKXsKICAgIHJldHVybiB0cnVlCn1lbHNlewogICAgaWYoIWVycm9ycyAmJiB3YXJuaW5ncyl7CiAgICAgICAgZGVmIHdMaXN0ID0gbmV3IEFycmF5TGlzdCgpCiAgICAgICAgCiAgICAgICAgaWYod2FybmluZ0VtcHR5RmllbGRzLnNpemUoKSA+IDApewogICAgICAgICAgICBkZWYgd0xpc3RDb25maXJtRW1wdHkgPSBuZXcgQXJyYXlMaXN0KCkKICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHkuYWRkKCJXIikKICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHkuYWRkKCJDT05GSVJNX0VNUFRZX0ZJRUxEUyIpCiAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5LmFkZChudWxsKQogICAgICAgICAgICB3TGlzdENvbmZpcm1FbXB0eS5hZGQod2FybmluZ0VtcHR5RmllbGRzKQoKICAgICAgICAgICAgd0xpc3QuYWRkKHdMaXN0Q29uZmlybUVtcHR5KQogICAgICAgIH0KICAgICAgICAKICAgICAgICBvdXRwdXQuYWRkKHdMaXN0KQogICAgICAgIHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oJ3siVyI6IicgKyBvdXRwdXQudG9TdHJpbmcoKSArICcifScpCiAgICAgICAgLy90aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCJXIiwgb3V0cHV0LnRvU3RyaW5nKCkpICAgCiAgICB9CiAgICBpZihlcnJvcnMgJiYgIXdhcm5pbmdzKXsKICAgICAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KCkKICAgICAgICAKICAgICAgICBpZihlcnJvck1hbmRhdG9yeUZpZWxkcy5zaXplKCkgPiAwKXsKICAgICAgICAgICAgZGVmIGVMaXN0TWFuZGF0b3J5ID0gbmV3IEFycmF5TGlzdCgpCiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZCgiRSIpCiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZCgiTUFOREFUT1JZX0ZJRUxEUyIpCiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZChudWxsKQogICAgICAgICAgICBlTGlzdE1hbmRhdG9yeS5hZGQoZXJyb3JNYW5kYXRvcnlGaWVsZHMpCiAgICAgICAgICAgIGVMaXN0LmFkZChlTGlzdE1hbmRhdG9yeSkKICAgICAgICB9CiAgICAgICAgb3V0cHV0LmFkZChlTGlzdCkKICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7IkUiOiInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnIn0nKQogICAgICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigiRSIsIG91dHB1dC50b1N0cmluZygpKSAgIAogICAgfQogICAgaWYoZXJyb3JzICYmIHdhcm5pbmdzKXsKICAgICAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KCkKICAgICAgICBkZWYgd0xpc3QgPSBuZXcgQXJyYXlMaXN0KCkKICAgICAgICAKICAgICAgICBpZihlcnJvck1hbmRhdG9yeUZpZWxkcy5zaXplKCkgPiAwKXsKICAgICAgICAgICAgZGVmIGVMaXN0TWFuZGF0b3J5ID0gbmV3IEFycmF5TGlzdCgpCiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZCgiRSIpCiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZCgiTUFOREFUT1JZX0ZJRUxEUyIpCiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZChudWxsKQogICAgICAgICAgICBlTGlzdE1hbmRhdG9yeS5hZGQoZXJyb3JNYW5kYXRvcnlGaWVsZHMpCiAgICAgICAgICAgIGVMaXN0LmFkZChlTGlzdE1hbmRhdG9yeSkKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgaWYod2FybmluZ0VtcHR5RmllbGRzLnNpemUoKSA+IDApewogICAgICAgICAgICBkZWYgd0xpc3RDb25maXJtRW1wdHkgPSBuZXcgQXJyYXlMaXN0KCkKICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHkuYWRkKCJXIikKICAgICAgICAgICAgd0xpc3RDb25maXJtRW1wdHkuYWRkKCJDT05GSVJNX0VNUFRZX0ZJRUxEUyIpCiAgICAgICAgICAgIHdMaXN0Q29uZmlybUVtcHR5LmFkZChudWxsKQogICAgICAgICAgICB3TGlzdENvbmZpcm1FbXB0eS5hZGQod2FybmluZ0VtcHR5RmllbGRzKQoKICAgICAgICAgICAgd0xpc3QuYWRkKHdMaXN0Q29uZmlybUVtcHR5KQogICAgICAgIH0KICAgICAgICAKICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KQogICAgICAgIG91dHB1dC5hZGQod0xpc3QpCiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigneyJXRSI6IicgKyBvdXRwdXQudG9TdHJpbmcoKSArICcifScpCiAgICAgICAgLy90aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCJXRSIsIG91dHB1dC50b1N0cmluZygpKSAgCiAgICB9Cn0=</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">ebf32ca3-2ea4-4039-9460-4705d533e401</arg>
              <arg name="FIELD_NOTES">YCFgQ3JlYXRlIFNOIGZvciBvbGQgdGlja2V0cw==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuXG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUubGluay5Jc3N1ZUxpbmtcblxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpO1xuQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpO1xuXG5kZWYgU04gPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfU0FQX1NFUlZJQ0VfTk9USUZJQ0FUSU9OXCIpWzBdXG5kZWYgcmVxdWVzdE1ldGhvZFxuZGVmIGJhc2VVUkxcblxuVVJMIHVybFxuSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvblxuXG5pZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKFNOKSA9PSBudWxsICYmIGlzc3VlLmlzc3VlVHlwZS5uYW1lICE9IFwiUGxhbm5lZCBNYWludGVuYW5jZSBUaWNrZXRcIil7XG4gICAgcmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuXG4gICAgZGVmIGJvZHlfcmVxID0gW11cbiAgICBib2R5X3JlcSA9IFtcbiAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXksXG4gICAgICAgIFwic3RhdHVzXCI6IFwiT1BFXCJcbiAgICBdIFxuXG4gICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvYWZ0ZXIvc2FsZXMvY3JlYXRlL3NlcnZpY2Uvbm90aWZpY2F0aW9uXCJcblxuICAgIGxvZy5kZWJ1ZyBcImJhc2VVUkwgU046IFwiICsgYmFzZVVSTFxuICAgIGxvZy5kZWJ1ZyBcImJvZHlfcmVxIFNOOiBcIiArIGJvZHlfcmVxXG4gICAgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG4gICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxuICAgIGxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpO1xuXG4gICAgZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KClcblxuICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMVwiKSl7XG4gICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG4gICAgICAgIFxuICAgICAgICBkZWYgb3V0cHV0TXNnID0gKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0XG4gICAgICAgIGxvZy5kZWJ1ZyBcIigoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dDogXCIgKyBvdXRwdXRNc2dcblxuICAgICAgICBkZWYganNvblNsdXJwZXIgPSBuZXcgSnNvblNsdXJwZXIoKVxuICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgICAgICBhc3NlcnQganNvbl9vYmplY3QgaW5zdGFuY2VvZiBNYXAgIFxuICAgICAgICBsb2cuZGVidWcgXCJtZXNzYWdlOiBcIiArICBqc29uX29iamVjdC5tZXNzYWdlXG4gICAgICAgIGxvZy5kZWJ1ZyBcImVycm9yczogXCIgKyAganNvbl9vYmplY3QuZXJyb3JzLnRvU3RyaW5nKClcblxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIk9QLVNBUC1TTi1VUERBVEVcIilcbiAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5lcnJvcnNbMF0pXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChlcnJvck1zZ3MpXG4gICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycylcblxuICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcbiAgICB9XG59Iiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="20">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">5c617aad-7d1a-4805-8e97-6b2c635a187e</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IE5ldyBJbnN0YWxsYXRpb24gLSBDaGVjayBsaW5rZWRUaWNrZXRzICYgRmFzdC1UcmFuc2FjdCB0aGVt</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT"></arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">c78e1ae3244cda5eddd8f7276fcd5db77569ce43</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IExpbmtlZCBUaWNrZXRzOiBjaGVjayBhbmQgbGluayByZWxhdGVkIGlzc3Vlcw==</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZQppbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb24KaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3IKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXIKaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnkKaW1wb3J0IGdyb292eS5qc29uLkpzb25CdWlsZGVyCmltcG9ydCBncm9vdnkuanNvbi5Kc29uU2x1cnBlcgppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXIKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb25maWcudXRpbC5KaXJhSG9tZQppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmV2ZW50LnR5cGUuRXZlbnREaXNwYXRjaE9wdGlvbgppbXBvcnQgamF2YS50ZXh0LlNpbXBsZURhdGVGb3JtYXQKaW1wb3J0IGphdmEudGV4dC5QYXJzZUV4Y2VwdGlvbgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLnNlY3VyaXR5LkppcmFBdXRoZW50aWNhdGlvbkNvbnRleHQKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5iYy5pc3N1ZS5Jc3N1ZVNlcnZpY2UuSXNzdWVSZXN1bHQKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5qcWwucGFyc2VyLkpxbFF1ZXJ5UGFyc2VyCmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuYmMuaXNzdWUuc2VhcmNoLlNlYXJjaFNlcnZpY2UKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS51c2VyLnV0aWwuVXNlclV0aWwKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS53ZWIuYmVhbi5QYWdlckZpbHRlcgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuTGlua0NvbGxlY3Rpb25JbXBsOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuSXNzdWVMaW5rOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk1vZGlmaWVkVmFsdWUKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS51dGlsLkRlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlcgoKaW1wb3J0IGdyb292eS51dGlsLmxvZ2dpbmcuU2xmNGoKaW1wb3J0IGphdmEudXRpbC5jb25jdXJyZW50LkNvbmN1cnJlbnRIYXNoTWFwCmltcG9ydCBqYXZheC5hbm5vdGF0aW9uLlBvc3RDb25zdHJ1Y3QKaW1wb3J0IG9yZy5zcHJpbmdmcmFtZXdvcmsuY2FjaGUuYW5ub3RhdGlvbi5DYWNoZWFibGUKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXIKaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsCgpQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpCkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpCnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7Cglwcm9wZXJ0aWVzLmxvYWQoaXQpCn0KZGVmIENhdGVnb3J5IGxvZyA9IENhdGVnb3J5LmdldEluc3RhbmNlKCJjb20ub25yZXNvbHZlLmppcmEuZ3Jvb3Z5LlBvc3RGdW5jdGlvbiIpCmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKQoKLypTY3JpcHQgVmFyaWFibGVzKi8KLy9QZXIgUG9zdCBGdW5jdGlvbgppc3N1ZSA9IGlzc3VlCi8vUGVyIHRlc3QgZGEgY29uc29sZQovL0lzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKQovL2lzc3VlID0gaXNzdWVNYW5hZ2VyLmdldElzc3VlQnlLZXlJZ25vcmVDYXNlKCJPUFVULTI0MSIpCgovKkluc2lnaHQgY2xhc3NlcyAmIGNvbXBvbmVudHMqLwpDbGFzcyBvYmplY3RGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdEZhY2FkZSIpOyAgCkNsYXNzIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGUiKTsKb2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShvYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlQ2xhc3MpOwpvYmplY3RGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0RmFjYWRlQ2xhc3MpOwovKiBHZXQgSW5zaWdodCBJUUwgRmFjYWRlIGZyb20gcGx1Z2luIGFjY2Vzc29yICovCkNsYXNzIGlxbEZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcygiY29tLnJpYWRhbGFicy5qaXJhLnBsdWdpbnMuaW5zaWdodC5jaGFubmVsLmV4dGVybmFsLmFwaS5mYWNhZGUuSVFMRmFjYWRlIik7IAppcWxGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUoaXFsRmFjYWRlQ2xhc3MpOwpDbGFzcyBvYmplY3RBdHRyaWJ1dGVCZWFuRmFjdG9yeUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcygiY29tLnJpYWRhbGFicy5qaXJhLnBsdWdpbnMuaW5zaWdodC5zZXJ2aWNlcy5tb2RlbC5mYWN0b3J5Lk9iamVjdEF0dHJpYnV0ZUJlYW5GYWN0b3J5Iik7Cm9iamVjdEF0dHJpYnV0ZUJlYW5GYWN0b3J5ID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKG9iamVjdEF0dHJpYnV0ZUJlYW5GYWN0b3J5Q2xhc3MpOwovKiBHZXQgSW5zaWdodCBPYmplY3QgVHlwZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi8KQ2xhc3Mgb2JqZWN0VHlwZUZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcygiY29tLnJpYWRhbGFicy5qaXJhLnBsdWdpbnMuaW5zaWdodC5jaGFubmVsLmV4dGVybmFsLmFwaS5mYWNhZGUuT2JqZWN0VHlwZUZhY2FkZSIpOyAKb2JqZWN0VHlwZUZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShvYmplY3RUeXBlRmFjYWRlQ2xhc3MpOwoKLypDdXN0b21maWVsZHMqLwpkZWYgc3VwcGxpZXJJbnN0YWxsYXRpb24gPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLnN1cHBsaWVyUmVwYWlyJ10udG9TdHJpbmcoKSlbMF0KZGVmIHN1cHBsaWVyTmV3SW5zdGFsbGF0aW9uID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi5zdXBwbGllck5ld0luc3RhbGxhdGlvbiddLnRvU3RyaW5nKCkpWzBdCmRlZiBwbGFubmVkRGF0ZSA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YucGxhbm5lZERhdGUnXS50b1N0cmluZygpKVswXQpkZWYgc2l0ZSA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2Yuc2l0ZSddLnRvU3RyaW5nKCkpWzBdCmRlZiB3YnNQcmogPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLndic1ByaiddID8gcHJvcGVydGllc1snY2Yud2JzUHJqJ10udG9TdHJpbmcoKSA6ICJPUF9XQlNfUFJKIilbMF0KbG9nLmRlYnVnIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc3VwcGxpZXJJbnN0YWxsYXRpb24pCgpKaXJhQXV0aGVudGljYXRpb25Db250ZXh0IGF1dGhDb250ZXh0ID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SmlyYUF1dGhlbnRpY2F0aW9uQ29udGV4dCgpCmRlZiBqcWxRdWVyeVBhcnNlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldENvbXBvbmVudChKcWxRdWVyeVBhcnNlcikKZGVmIHNlYXJjaFNlcnZpY2UgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDb21wb25lbnQoU2VhcmNoU2VydmljZSkKVXNlclV0aWwgdXNlclV0aWwgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRVc2VyVXRpbCgpCmRlZiB1c2VyID0gQ29tcG9uZW50QWNjZXNzb3IuamlyYUF1dGhlbnRpY2F0aW9uQ29udGV4dC5sb2dnZWRJblVzZXIKCmRlZiBzdXBwbGllciA9IChpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHN1cHBsaWVySW5zdGFsbGF0aW9uKSA/IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc3VwcGxpZXJJbnN0YWxsYXRpb24pLmZpcnN0KCkudG9TdHJpbmcoKSA6IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc3VwcGxpZXJOZXdJbnN0YWxsYXRpb24pLmZpcnN0KCkudG9TdHJpbmcoKSkKbG9nLmRlYnVnICJzdXBwbGllcjogIiArIHN1cHBsaWVyCnN1cHBsaWVyID0gc3VwcGxpZXIuc3Vic3RyaW5nKDEsc3VwcGxpZXIuaW5kZXhPZignKCcpLTEpCgpMaXN0PElzc3VlTGluaz4gYWxsSW5DdXJyZW50SXNzdWVMaW5rID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmdldElud2FyZExpbmtzKGlzc3VlLmdldElkKCkpOwpMaXN0PElzc3VlTGluaz4gYWxsT3V0Q3VycmVudElzc3VlTGluayA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTGlua01hbmFnZXIoKS5nZXRPdXR3YXJkTGlua3MoaXNzdWUuZ2V0SWQoKSk7CmRlZiBhbHJlYWR5TGlua2VkPWZhbHNlCgpkZWYganFsU2VhcmNoID0gInByb2plY3QgPSAnIiArIGlzc3VlLmdldFByb2plY3RPYmplY3QoKS5uYW1lICsgIicgQU5EIGlzc3VldHlwZSA9ICciICsgaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZSArICInIEFORCBrZXkgIT0gJyIgKyBpc3N1ZS5rZXkudG9TdHJpbmcoKSArICInIEFORCAnIiArIChpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHN1cHBsaWVySW5zdGFsbGF0aW9uKSA/IHByb3BlcnRpZXNbJ2NmLnN1cHBsaWVyUmVwYWlyJ10udG9TdHJpbmcoKSA6IHByb3BlcnRpZXNbJ2NmLnN1cHBsaWVyTmV3SW5zdGFsbGF0aW9uJ10udG9TdHJpbmcoKSkgKyAiJyBpbiBpcWxGdW5jdGlvbignIiArIHByb3BlcnRpZXNbJ2lvYmouc3VwcGluc3Quc3VwcGxpZXJSZWYnXS50b1N0cmluZygpICsgIiBMSUtFIFwiIiArIHN1cHBsaWVyLnJlcGxhY2VBbGwoIiciLCJcJyIpICsgIlwiJykiICsgIiBBTkQgJyIgKyBwcm9wZXJ0aWVzWydjZi5zaXRlJ10udG9TdHJpbmcoKSArICInID0gJyIgKyBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHNpdGUpLmZpcnN0KCkudG9TdHJpbmcoKS5yZXBsYWNlQWxsKCInIiwiXCciKSArICInIEFORCBzdGF0dXMgSU4gKCciICsgcHJvcGVydGllc1snd2YuYWNjZXB0ZWRCeVN1cHBsaWVyJ10udG9TdHJpbmcoKSArICInKSBBTkQgIiArIChpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHN1cHBsaWVySW5zdGFsbGF0aW9uKSA/IChwcm9wZXJ0aWVzWydjZi5wbGFubmVkRGF0ZSddLnRvU3RyaW5nKCkgKyAiID49ICciICsgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShwbGFubmVkRGF0ZSkuZm9ybWF0KCJ5eXl5LU1NLWRkIEhIOm1tIikgKyAiJyBBTkQgIiArIHByb3BlcnRpZXNbJ2NmLnBsYW5uZWREYXRlJ10udG9TdHJpbmcoKSArICIgPD0gJyIgKyBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHBsYW5uZWREYXRlKS5mb3JtYXQoInl5eXktTU0tZGQiKS50b1N0cmluZygpICsgIiAyMzo1OSIgKyAiJyIpIDogKHByb3BlcnRpZXNbJ2NmLndic1ByaiddID8gcHJvcGVydGllc1snY2Yud2JzUHJqJ10udG9TdHJpbmcoKSA6ICJPUF9XQlNfUFJKIikgKyAiID0gJyIgKyBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHdic1ByaikgKyAiJyIpCmxvZy5kZWJ1ZyAicmljZXJjYTogIiArIGpxbFNlYXJjaApkZWYgcXVlcnkgPSBqcWxRdWVyeVBhcnNlci5wYXJzZVF1ZXJ5KGpxbFNlYXJjaCkKbG9nLmRlYnVnICJxdWVyeTogIiArIHF1ZXJ5CmRlZiBzZWFyY2ggPSBzZWFyY2hTZXJ2aWNlLnNlYXJjaCh1c2VyLCBxdWVyeSwgUGFnZXJGaWx0ZXIuZ2V0VW5saW1pdGVkRmlsdGVyKCkpCmRlZiBmb3VuZD1mYWxzZQpkZWYgZm91bmRPdXR3YXJkPWZhbHNlCmRlZiBsaW5rZWRJc3N1ZQppZiAoc2VhcmNoLnJlc3VsdHMpIHsJCiAgICBmb3IgKGkgaW4gc2VhcmNoLnJlc3VsdHMpewogICAgICAgIC8qUGVyIG9nbmkgaXNzdWUgcmVzdGl0dWl0YSBkYWxsYSBxdWVyeSBKUUwgdmVyaWZpY28gc2UgaGEgZ2nDoCBkZWkgbGluayBSZWxhdGVzIFRvKi8KICAgICAgICBsb2cuZGVidWcgaS5rZXkKCiAgICAgICAgZGVmIGlzc3VlU2VydmljZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlU2VydmljZSgpCgogICAgICAgIExpc3Q8SXNzdWVMaW5rPiBhbGxJbklzc3VlTGluayA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTGlua01hbmFnZXIoKS5nZXRJbndhcmRMaW5rcyhpLmdldElkKCkpOwogICAgICAgIGxvZy5kZWJ1ZyAiYWxsSW5Jc3N1ZUxpbms6ICIgKyBhbGxJbklzc3VlTGluawogICAgICAgIGZvciAoSXRlcmF0b3I8SXNzdWVMaW5rPiBvdXRJdGVyYXRvciA9IGFsbEluSXNzdWVMaW5rLml0ZXJhdG9yKCk7IG91dEl0ZXJhdG9yLmhhc05leHQoKTspIHsKICAgICAgICAgICAgSXNzdWVMaW5rIGlzc3VlTGluayA9IChJc3N1ZUxpbmspIG91dEl0ZXJhdG9yLm5leHQoKTsKICAgICAgICAgICAgZGVmIGxpbmtlZElzc3VlVGVtcCA9IGlzc3VlTGluay5nZXRTb3VyY2VPYmplY3QoKQogICAgICAgICAgICBTdHJpbmcgdHlwZSA9IGxpbmtlZElzc3VlVGVtcC5nZXRJc3N1ZVR5cGUoKS5nZXROYW1lKCk7CgogICAgICAgICAgICBsb2cuZGVidWcgImlzc3VlbGluayBUeXBlOiAiICsgaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpCgkJCWxvZy5kZWJ1ZyAic291cmNlSXNzdWU6ICIgKyBpc3N1ZUxpbmsuZ2V0U291cmNlT2JqZWN0KCkKICAgICAgICAgICAgbG9nLmRlYnVnICJkZXN0aW5hdGlvbklzc3VlOiAiICsgaXNzdWVMaW5rLmdldERlc3RpbmF0aW9uT2JqZWN0KCkKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmKGlzc3VlTGluay5pc3N1ZUxpbmtUeXBlLmdldE5hbWUoKS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpbC5saW5rZWRUa3RzUmVsYXRlcyddLnRvU3RyaW5nKCkpICYmIGlzc3VlTGluay5nZXRTb3VyY2VPYmplY3QoKS5rZXkhPWlzc3VlLmtleSl7CiAgICAgICAgICAgICAgICBsb2cuZGVidWcgInRyb3ZhdG8gaW5XYXJkTGluayAtIHByZW5kbyBsYSBzb3VyY2UgaXNzdWUgIiArIGxpbmtlZElzc3VlVGVtcCArICIgZSBsYSBsZWdvIGFsbGEgaXNzdWUgY29ycmVudGUgc29sbyBzZSBub24gw6ggZ2nDoCBsaW5rYXRhIgogICAgICAgICAgICAgICAgYWxyZWFkeUxpbmtlZD1mYWxzZQogICAgICAgICAgICAgICAgZm9yKGxpIGluIGFsbEluQ3VycmVudElzc3VlTGluayl7CiAgICAgICAgICAgICAgICAgICAgaWYobGlua2VkSXNzdWVUZW1wLmdldElkKCkgPT0gbGkuZ2V0U291cmNlT2JqZWN0KCkuZ2V0SWQoKSB8fCBsaW5rZWRJc3N1ZVRlbXAuZ2V0SWQoKSA9PSBsaS5nZXREZXN0aW5hdGlvbk9iamVjdCgpLmdldElkKCkpewogICAgICAgICAgICAgICAgICAgICAgICBhbHJlYWR5TGlua2VkPXRydWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBmb3IobGkgaW4gYWxsT3V0Q3VycmVudElzc3VlTGluayl7CiAgICAgICAgICAgICAgICAgICAgaWYobGlua2VkSXNzdWVUZW1wLmdldElkKCkgPT0gbGkuZ2V0U291cmNlT2JqZWN0KCkuZ2V0SWQoKSB8fCBsaW5rZWRJc3N1ZVRlbXAuZ2V0SWQoKSA9PSBsaS5nZXREZXN0aW5hdGlvbk9iamVjdCgpLmdldElkKCkpewogICAgICAgICAgICAgICAgICAgICAgICBhbHJlYWR5TGlua2VkPXRydWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBmb3VuZD10cnVlCiAgICAgICAgICAgICAgICBpZighYWxyZWFkeUxpbmtlZCl7CiAgICAgICAgICAgICAgICAgICAgbG9nLmRlYnVnICJub24gw6ggbGlua2F0YSwgbGEgbGlua28iCiAgICAgICAgICAgICAgICAgCUNvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTGlua01hbmFnZXIoKS5jcmVhdGVJc3N1ZUxpbmsobGlua2VkSXNzdWVUZW1wLmdldElkKCksIGlzc3VlLmdldElkKCksIExvbmcucGFyc2VMb25nKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNSZWxhdGVzSWQnXS50b1N0cmluZygpKSwgMSwgdXNlcik7ICAgCiAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICBsb2cuZGVidWcgImdpw6AgbGlua2F0YSwgbm9uIGxhIGxpbmtvIGRpIG51b3ZvIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIAogICAgICAgIExpc3Q8SXNzdWVMaW5rPiBhbGxPdXRJc3N1ZUxpbmsgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZUxpbmtNYW5hZ2VyKCkuZ2V0T3V0d2FyZExpbmtzKGkuZ2V0SWQoKSk7CiAgICAgICAgbG9nLmRlYnVnICJhbGxPdXRJc3N1ZUxpbms6ICIgKyBhbGxPdXRJc3N1ZUxpbmsKICAgICAgICBmb3IgKEl0ZXJhdG9yPElzc3VlTGluaz4gb3V0SXRlcmF0b3IgPSBhbGxPdXRJc3N1ZUxpbmsuaXRlcmF0b3IoKTsgb3V0SXRlcmF0b3IuaGFzTmV4dCgpOykgewogICAgICAgICAgICBJc3N1ZUxpbmsgaXNzdWVMaW5rID0gKElzc3VlTGluaykgb3V0SXRlcmF0b3IubmV4dCgpOwogICAgICAgICAgICBkZWYgbGlua2VkSXNzdWVUZW1wID0gaXNzdWVMaW5rLmdldERlc3RpbmF0aW9uT2JqZWN0KCkKICAgICAgICAgICAgU3RyaW5nIHR5cGUgPSBsaW5rZWRJc3N1ZVRlbXAuZ2V0SXNzdWVUeXBlKCkuZ2V0TmFtZSgpOwoKICAgICAgICAgICAgbG9nLmRlYnVnICJpc3N1ZWxpbmsgVHlwZTogIiArIGlzc3VlTGluay5pc3N1ZUxpbmtUeXBlLmdldE5hbWUoKQoJCQlsb2cuZGVidWcgInNvdXJjZUlzc3VlOiAiICsgaXNzdWVMaW5rLmdldFNvdXJjZU9iamVjdCgpCiAgICAgICAgICAgIGxvZy5kZWJ1ZyAiZGVzdGluYXRpb25Jc3N1ZTogIiArIGlzc3VlTGluay5nZXREZXN0aW5hdGlvbk9iamVjdCgpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZihpc3N1ZUxpbmsuaXNzdWVMaW5rVHlwZS5nZXROYW1lKCkudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snaWwubGlua2VkVGt0c1JlbGF0ZXMnXS50b1N0cmluZygpKSAmJiBpc3N1ZUxpbmsuZ2V0RGVzdGluYXRpb25PYmplY3QoKS5rZXkhPWlzc3VlLmtleSl7CiAgICAgICAgICAgICAgICBmb3VuZD10cnVlCiAgICAgICAgICAgICAgICBsb2cuZGVidWcgInRyb3ZhdG8gb3V0V2FyZExpbmsgLSBwcmVuZG8gbGEgZGVzdGluYXRpb24gaXNzdWUgIiArIGxpbmtlZElzc3VlVGVtcCArICIgZSBsYSBsZWdvIGFsbGEgaXNzdWUgY29ycmVudGUgc29sbyBzZSBub24gw6ggZ2nDoCBsaW5rYXRhIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBhbHJlYWR5TGlua2VkPWZhbHNlCiAgICAgICAgICAgICAgICBmb3IobGkgaW4gYWxsSW5DdXJyZW50SXNzdWVMaW5rKXsKICAgICAgICAgICAgICAgICAgICBpZihsaW5rZWRJc3N1ZVRlbXAuZ2V0SWQoKSA9PSBsaS5nZXRTb3VyY2VPYmplY3QoKS5nZXRJZCgpIHx8IGxpbmtlZElzc3VlVGVtcC5nZXRJZCgpID09IGxpLmdldERlc3RpbmF0aW9uT2JqZWN0KCkuZ2V0SWQoKSl7CiAgICAgICAgICAgICAgICAgICAgICAgIGFscmVhZHlMaW5rZWQ9dHJ1ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvcihsaSBpbiBhbGxPdXRDdXJyZW50SXNzdWVMaW5rKXsKICAgICAgICAgICAgICAgICAgICBpZihsaW5rZWRJc3N1ZVRlbXAuZ2V0SWQoKSA9PSBsaS5nZXRTb3VyY2VPYmplY3QoKS5nZXRJZCgpIHx8IGxpbmtlZElzc3VlVGVtcC5nZXRJZCgpID09IGxpLmdldERlc3RpbmF0aW9uT2JqZWN0KCkuZ2V0SWQoKSl7CiAgICAgICAgICAgICAgICAgICAgICAgIGFscmVhZHlMaW5rZWQ9dHJ1ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvdW5kPXRydWUKICAgICAgICAgICAgICAgIGlmKCFhbHJlYWR5TGlua2VkKXsKICAgICAgICAgICAgICAgICAgICBsb2cuZGVidWcgIm5vbiDDqCBsaW5rYXRhLCBsYSBsaW5rbyIKICAgICAgICAgICAgICAgICAJQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmNyZWF0ZUlzc3VlTGluayhpc3N1ZS5nZXRJZCgpLCBsaW5rZWRJc3N1ZVRlbXAuZ2V0SWQoKSwgTG9uZy5wYXJzZUxvbmcocHJvcGVydGllc1snaWwubGlua2VkVGt0c1JlbGF0ZXNJZCddLnRvU3RyaW5nKCkpLCAxLCB1c2VyKTsKICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyAiZ2nDoCBsaW5rYXRhLCBub24gbGEgbGlua28gZGkgbnVvdm8iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH1lbHNlIGlmKGlzc3VlTGluay5pc3N1ZUxpbmtUeXBlLmdldE5hbWUoKS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpbC5saW5rZWRUa3RzUmVsYXRlcyddLnRvU3RyaW5nKCkpICYmIGlzc3VlTGluay5nZXREZXN0aW5hdGlvbk9iamVjdCgpLmtleT09aXNzdWUua2V5KXsKICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyAiaXNzdWUgZ2nDoCBsaW5rYXRhIgogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgbG9nLmRlYnVnICJDcmVvIGxpbmsgdHJhIGxhIGlzc3VlIG9nZ2V0dG8gZGkgdHJhbnNpdGlvbiBlIGxhIGlzc3VlIHJpc3VsdGFudGUgZGFsIGZpbHRybyBzZSBub24gw6ggZ2nDoCBsaW5rYXRhIgogICAgICAgIGFscmVhZHlMaW5rZWQ9ZmFsc2UKICAgICAgICBmb3IobGkgaW4gYWxsSW5DdXJyZW50SXNzdWVMaW5rKXsKICAgICAgICAgICAgaWYoaS5nZXRJZCgpID09IGxpLmdldFNvdXJjZU9iamVjdCgpLmdldElkKCkgfHwgaS5nZXRJZCgpID09IGxpLmdldERlc3RpbmF0aW9uT2JqZWN0KCkuZ2V0SWQoKSl7CiAgICAgICAgICAgICAgICBhbHJlYWR5TGlua2VkPXRydWUKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBmb3IobGkgaW4gYWxsT3V0Q3VycmVudElzc3VlTGluayl7CiAgICAgICAgICAgIGlmKGkuZ2V0SWQoKSA9PSBsaS5nZXRTb3VyY2VPYmplY3QoKS5nZXRJZCgpIHx8IGkuZ2V0SWQoKSA9PSBsaS5nZXREZXN0aW5hdGlvbk9iamVjdCgpLmdldElkKCkpewogICAgICAgICAgICAgICAgYWxyZWFkeUxpbmtlZD10cnVlCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYoIWFscmVhZHlMaW5rZWQpewogICAgICAgICAgICBsb2cuZGVidWcgIm5vbiDDqCBsaW5rYXRhLCBsYSBsaW5rbyIKICAgICAgICAgICAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVMaW5rTWFuYWdlcigpLmNyZWF0ZUlzc3VlTGluayhpLmdldElkKCksIGlzc3VlLmdldElkKCksIExvbmcucGFyc2VMb25nKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNSZWxhdGVzSWQnXS50b1N0cmluZygpKSwgMSwgdXNlcik7CiAgICAgICAgfWVsc2V7CiAgICAgICAgICAgIGxvZy5kZWJ1ZyAiZ2nDoCBsaW5rYXRhLCBub24gbGEgbGlua28gZGkgbnVvdm8iCiAgICAgICAgfQogICAgICAgIAogICAgICAgICAgICAgIAogICAgfQogICAgCn0gZWxzZSB7CiAgICBsb2cuZXJyb3IoIkludmFsaWQgSlFMOiAiICsganFsU2VhcmNoKTsKfSA=</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">a6604d0a-af28-40f6-84ec-7a2dc32df2b0</arg>
                  <arg name="FIELD_NOTES">YCFgT1AgRW1haWwgTm90aWZpY2F0aW9uOiBBQ0NFUFRFRF9CWV9TVVBQTElFUiAtIG1hbnRlbnV0YSBjb21lIHBvc3QgZnVuY3Rpb24gcGVyIGV2aXRhcmUgZGkgZ2VuZXJhcmUgYmxvY2NoaSBhbCBmb3JuaXRvcmUgbGVnYXRpIGFsbCdpbnZpbyBkaSBub3RpZmljaGUgaW50ZXJuZQ==</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IG9yZy5hcGFjaGUubG9nNGouQ2F0ZWdvcnlcbmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuZGVmIHJlcXVlc3RNZXRob2QgPSBcIlBPU1RcIjtcblxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpO1xuQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpO1xuXG5kZWYgYm9keV9yZXEgPSBbXG5cdFwidGVtcGxhdGVOYW1lXCI6IHByb3BlcnRpZXNbJ3R0LmFjY2VwdGVkQnlTdXBwbGllciddLnRvU3RyaW5nKCksXG5cdFwicGVjXCI6IGZhbHNlLFxuICAgIFwiaXNzdWVLZXlcIjogaXNzdWUua2V5XG5dXG5cbmRlZiBiYXNlVVJMID0gXCJodHRwOi8vXCIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArIFwiL29wL3Jlc3QvamlyYS9BQS90cmFuc2FjdGlvbi9tYWlsL3NlbmRcIlxuVVJMIHVybFxudXJsID0gbmV3IFVSTChiYXNlVVJMKVxuXG5IdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xuY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLThcIik7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbmNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7XG5jb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7XG5jb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxubG9nLmRlYnVnIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5jb25uZWN0aW9uLmNvbm5lY3QoKTtcblxubG9nLmRlYnVnIFwidXJsOiBcIiArIHVybFxubG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxubG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxubG9nLmRlYnVnIFwiZ2V0UmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuXG4iLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7CmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5CkNhdGVnb3J5IGxvZyA9IENhdGVnb3J5LmdldEluc3RhbmNlKCJjb20ub25yZXNvbHZlLmppcmEuZ3Jvb3Z5LlBvc3RGdW5jdGlvbiIpCmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKQppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lcgppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGwKClByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKCkKRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJykKcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHsKCXByb3BlcnRpZXMubG9hZChpdCkKfQpkZWYgcmVxdWVzdE1ldGhvZCA9ICJQT1NUIjsKCklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTsKQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpOwoKZGVmIGJvZHlfcmVxID0gWwoJInRlbXBsYXRlTmFtZSI6IHByb3BlcnRpZXNbJ3R0LmFjY2VwdGVkQnlTdXBwbGllciddLnRvU3RyaW5nKCksCgkicGVjIjogZmFsc2UsCiAgICAiaXNzdWVLZXkiOiBpc3N1ZS5rZXkKXQoKZGVmIGJhc2VVUkwgPSAiaHR0cDovLyIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArICIvb3AvcmVzdC9qaXJhL0FBL3RyYW5zYWN0aW9uL21haWwvc2VuZCIKVVJMIHVybAp1cmwgPSBuZXcgVVJMKGJhc2VVUkwpCgpIdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7CmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KCJDb250ZW50LVR5cGUiLCAiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04Iik7CmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KCJBY2NlcHQiLCAiKi8qIik7CmNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7CmNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTsKY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0KY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcigiVVRGLTgiKSB7IG5ldyBTdHJlYW1pbmdKc29uQnVpbGRlcihpdCwgYm9keV9yZXEpIH0KbG9nLmRlYnVnIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtCmNvbm5lY3Rpb24uY29ubmVjdCgpOwoKbG9nLmRlYnVnICJ1cmw6ICIgKyB1cmwKbG9nLmRlYnVnICJSZXNwb25zZUNvZGU6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkKbG9nLmRlYnVnICJSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKbG9nLmRlYnVnICJnZXRSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKCg==</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="1041" name="Modifica Pianificazione" view="fieldscreen">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">20113</meta>
          <results>
            <unconditional-result old-status="null" status="null" step="19">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="1051" name="Clona Tkt" view="fieldscreen">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">20401</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">c659704c-9678-4844-9a05-6f3497e391e7</arg>
                <arg name="FIELD_NOTES">YCFgRW5hYmxlZCBvbmx5IGZvciBSZXBhaXIgYW5kIE5ldyBJbnN0YWxsYXRpb24=</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnTWFpbnRlbmFuY2UgVGlja2V0JyB8fCAoaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ05ldyBJbnN0YWxsYXRpb24nICYmIGNmVmFsdWVzWydPUF9BU1NFVCddICE9IG51bGwpIiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="19">
              <post-functions>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="fieldValue">New Installation</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="targetIssueTypeDefinedByCfSelection"></arg>
                  <arg name="issueTypeId">12301</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">SAME</arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="transitionAttachmentsOperation">copy</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="targetProjectSelectedCustomField"></arg>
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="subFunctions">[{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_21909&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21909&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22600&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22600&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22822&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22822&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22601&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22601&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22603&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22603&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22663&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22663&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22634&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22634&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22651&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22651&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22700&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22700&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22606&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22606&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22629&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22629&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22652&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22652&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;description&quot;,&quot;destinationFieldId&quot;:&quot;description&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22627&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22627&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22620&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22620&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22668&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22668&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23602&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23203&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22814&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22814&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23237&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23237&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;issuekey&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23243&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;YES&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23238&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22702&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22702&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22703&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22703&quot;}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="fieldValue">Maintenance Ticket</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="targetIssueTypeDefinedByCfSelection"></arg>
                  <arg name="issueTypeId">13001</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">SAME</arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="transitionAttachmentsOperation">copy</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="targetProjectSelectedCustomField"></arg>
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="subFunctions">[{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_21909&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21909&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22600&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22600&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22822&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22822&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22601&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22601&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22603&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22603&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22663&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22663&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22634&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22634&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22651&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22651&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22700&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22700&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22606&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22606&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22629&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22629&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22652&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22652&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;description&quot;,&quot;destinationFieldId&quot;:&quot;description&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22627&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22627&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22620&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22620&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22668&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22668&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23602&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23203&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22814&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22814&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23237&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23237&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;issuekey&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23243&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;YES&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23238&quot;}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23602</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="20" name="Accepted by Technician">
      <meta name="jira.status.id">14928</meta>
      <actions>
<common-action id="111" />
<common-action id="101" />
<common-action id="91" />
<common-action id="121" />
<common-action id="931" />
        <action id="881" name="Clona Tkt" view="fieldscreen">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">20401</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">c659704c-9678-4844-9a05-6f3497e391e7</arg>
                <arg name="FIELD_NOTES">YCFgRW5hYmxlZCBvbmx5IGZvciBSZXBhaXIgYW5kIE5ldyBJbnN0YWxsYXRpb24=</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnTWFpbnRlbmFuY2UgVGlja2V0JyB8fCAoaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ05ldyBJbnN0YWxsYXRpb24nICYmIGNmVmFsdWVzWydPUF9BU1NFVCddICE9IG51bGwpIiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="20">
              <post-functions>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="fieldValue">New Installation</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="targetIssueTypeDefinedByCfSelection"></arg>
                  <arg name="issueTypeId">12301</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">SAME</arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="transitionAttachmentsOperation">copy</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="targetProjectSelectedCustomField"></arg>
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="subFunctions">[{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_21909&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21909&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22600&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22600&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22822&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22822&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22601&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22601&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22603&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22603&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22663&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22663&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22634&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22634&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22651&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22651&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22700&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22700&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22606&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22606&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22629&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22629&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22652&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22652&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;description&quot;,&quot;destinationFieldId&quot;:&quot;description&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22627&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22627&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22620&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22620&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22668&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22668&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23602&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23203&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22814&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22814&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23237&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23237&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;issuekey&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23243&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;YES&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23238&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22702&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22702&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22703&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22703&quot;}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="fieldValue">Maintenance Ticket</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">issuetype</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="targetIssueTypeDefinedByCfSelection"></arg>
                  <arg name="issueTypeId">13001</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">SAME</arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="transitionAttachmentsOperation">copy</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="targetProjectSelectedCustomField"></arg>
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">10003:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="subFunctions">[{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_21909&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21909&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22600&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22600&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22822&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22822&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22601&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22601&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22603&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22603&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22663&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22663&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22634&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22634&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22651&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22651&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22700&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22700&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22606&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22606&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22629&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22629&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22652&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22652&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;description&quot;,&quot;destinationFieldId&quot;:&quot;description&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22627&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22627&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22620&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22620&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22668&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22668&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23602&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23203&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22814&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22814&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23237&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23237&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;issuekey&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23243&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;YES&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23238&quot;}}]</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23602</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="891" name="Modifica Pianificazione" view="fieldscreen">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">20113</meta>
          <results>
            <unconditional-result old-status="null" status="null" step="20">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="21" name="Traveling">
      <meta name="jira.status.id">14929</meta>
      <actions>
        <action id="941" name="End Traveling">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <results>
            <unconditional-result old-status="null" status="null" step="22">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="22" name="Technician OnSite">
      <meta name="jira.status.id">14930</meta>
      <actions>
        <action id="1061" name="Start Working">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <results>
            <unconditional-result old-status="null" status="null" step="25">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="23" name="Asset Confirmed">
      <meta name="jira.status.id">14931</meta>
      <actions>
<common-action id="111" />
      </actions>
    </step>
    <step id="24" name="Finalizing Work">
      <meta name="jira.status.id">14932</meta>
      <actions>
        <action id="981" name="Chiudi Rapporto di Intervento" view="fieldscreen">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19910</meta>
          <restrict-to>
            <conditions type="OR">
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">e11c2942-0754-423c-8e92-d78a6375f221</arg>
                <arg name="FIELD_NOTES">YCFgTk9UIFBNIFRpY2tldA==</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="disabled">true</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSAhPSAnUGxhbm5lZCBNYWludGVuYW5jZSBUaWNrZXQnIiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
              <condition type="class">
                <arg name="RESOLUTION_FIELD_NAME">6</arg>
                <arg name="FIELD_FUNCTION_ID">fc8b9dd9-f011-4c94-85b2-3dad9c428711</arg>
                <arg name="FIELD_NOTES">YCFgRm9yIFBNIFRpY2tldHMgLSBhbGwgc3ViLXRhc2tzIG11c3QgYmUgcmVzb2x2ZWQ=</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.AllSubtasksResolvedCondition</arg>
                <arg name="disabled">true</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">fa37467a9382f8924cd169d5ba599dcb71925405</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlcXVpcmVkIEZpZWxkcyAtIHNvbG8gZXJyb3JzLCBubyB3YXJuaW5ncw==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">9fe0fa5191d4b6a91ba7485380ff8d0a9fda8fe7</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBPUCBnZW5lcmF6aW9uZSBSYXBwb3J0byBkaSBpbnRlcnZlbnRv</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxubG9nLmRlYnVnIFwiT25TaXRlIFJlcG9ydCBwZXIgaXNzdWU6IFwiICsgaXNzdWUua2V5XG4vKiBSRVNUIEFQSSBwZXIgR2VuZXJhemlvbmUgQWxsZWdhdG8gUmFwcG9ydG8gZGkgSW50ZXJ2ZW50byAqL1xucmVxdWVzdE1ldGhvZCA9IFwiUFVUXCI7XG4vKlNjcmlwdCBWYXJpYWJsZXMqL1xuLy9QZXIgdGVzdCBkYSBjb25zb2xlXG4vL0lzc3VlIGlzc3VlID0gaXNzdWVNYW5hZ2VyLmdldElzc3VlQnlLZXlJZ25vcmVDYXNlKFwiT1BVVC0xNDA2MlwiKVxuXG5pbnQgT1BBQSA9IHByb3BlcnRpZXNbJ2lzY2hlbWEuYWEuaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5pbnQgREJPID0gcHJvcGVydGllc1snaXNjaGVtYS5kYm8uaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXG5cbi8qUmltb3ppb25lIGFsbGVnYXRvIHJhcHBvcnRvIGRpIGludGVydmVudG8gYXBwZW5hIGNyZWF0byovXG4vKiBHZXQgSW5zaWdodCBJUUwgRmFjYWRlIGZyb20gcGx1Z2luIGFjY2Vzc29yICovXG5DbGFzcyBpcWxGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5JUUxGYWNhZGVcIik7IFxuZGVmIGlxbEZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShpcWxGYWNhZGVDbGFzcyk7XG5cbi8qIEdldCBJbnNpZ2h0IE9iamVjdCBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdEZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdEZhY2FkZVwiKTtcbmRlZiBvYmplY3RGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0RmFjYWRlQ2xhc3MpO1xuXG4vKiBHZXQgSW5zaWdodCBPYmplY3QgVHlwZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdFR5cGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlRmFjYWRlXCIpO1xuZGVmIG9iamVjdFR5cGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUZhY2FkZUNsYXNzKTtcblxuLyogR2V0IEluc2lnaHQgT2JqZWN0IEF0dHJpYnV0ZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cbkNsYXNzIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlXCIpO1xuZGVmIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZUNsYXNzKTtcblxuQ2xhc3Mgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LnNlcnZpY2VzLm1vZGVsLmZhY3RvcnkuT2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlcIik7XG5kZWYgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnkgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyk7XG5cbi8qIFNwZWNpZnkgdGhlIHNjaGVtYSBpZCBhcyB3ZWxsIGFzIHRoZSBJUUwgdGhhdCB3aWxsIGZldGNoIG9iamVjdHMuIEluIHRoaXMgY2FzZSBhbGwgb2JqZWN0cyB3aXRoIE5hbWUgbWF0Y2hpbmcgdGhlIHZhbHVlQ0YsIGJlIHN1cmUgdG8gaW5jbHVkZSBcIiBhcm91bmQgdmFsdWUgKi9cbmRlZiBvYmplY3RzID0gaXFsRmFjYWRlLmZpbmRPYmplY3RzQnlJUUxBbmRTY2hlbWEoREJPLCBcIlxcXCJcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmNhdGVnb3J5UmVmJ10udG9TdHJpbmcoKSArIFwiXFxcIi5OYW1lIExJS0UgXFxcIlJhcHBvcnRvIGRpIGludGVydmVudG9cXFwiIEFORCBcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmRlbGV0ZWQnXS50b1N0cmluZygpICsgXCIhPXRydWUgQU5EIG9iamVjdCBIQVZJTkcgY29ubmVjdGVkVGlja2V0cyhrZXkgPSBcIiArIGlzc3VlLmtleS50b1N0cmluZygpICsgXCIpXCIpOyAvLyBTZWUgdGhlIGNvbXBsZXRlIGxpc3Qgb2YgcG9zc2libGUgSVFMIG9uIHRoZSBJbnNpZ2h0IFF1ZXJ5IExhbmd1YWdlIGRvY3VtZW50YXRpb24gcGFnZVxuLyogSWYgdGhpcyBpcyBhIG1hbmRhdG9yeSBmaWVsZCB5b3Ugc2hvdWxkIGJlIGFibGUgdG8gZG8gdGhpczogKi9cbmxvZy5kZWJ1ZyBcIklRTDogXCIgKyBcIlxcXCJcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmNhdGVnb3J5UmVmJ10udG9TdHJpbmcoKSArIFwiXFxcIi5OYW1lIExJS0UgXFxcIlJhcHBvcnRvIGRpIGludGVydmVudG9cXFwiIEFORCBcIiArIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmRlbGV0ZWQnXS50b1N0cmluZygpICsgXCIhPXRydWUgQU5EIG9iamVjdCBIQVZJTkcgY29ubmVjdGVkVGlja2V0cyhrZXkgPSBcIiArIGlzc3VlLmtleS50b1N0cmluZygpICsgXCIpXCJcblxuLyohIURhIHJpbXVvdmVyZSBhcHBlbmEgcmlzb2x0aSBpIGJ1ZyEhKi9cbmlmKChvYmplY3RzID09IG51bGwgfHwgb2JqZWN0cy5zaXplPT0wKSAmJiAhaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpdC5wbGFubmVkTWFpbnRlbmFuY2UnXSkpe1xuICAgIGJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9hdXRvbWF0aW9uL0FBL3RpY2tldC9cIiArIGlzc3VlLmtleS50b1N0cmluZygpICsgXCIvYXR0YWNobWVudC9vbnNpdGVcIlxuICAgIGxvZy5kZWJ1ZyBcImJhc2VVcmw6IFwiICsgYmFzZVVSTFxuXG4gICAgVVJMIHVybFxuICAgIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcbiAgICBIdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdE1ldGhvZChyZXF1ZXN0TWV0aG9kKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJBY2NlcHRcIiwgXCIqLypcIik7XG4gICAgY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbiAgICBjb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5jb25uZWN0KCk7XG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcblxuICAgIGRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5cbiAgICBpZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDBcIikpe1xuICAgICAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIkdFTkVSQVRFLU9OU0lURVJFUE9SVFwiKVxuICAgICAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyBcIiBcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChlcnJvck1zZ3MpXG4gICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycylcblxuICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcbiAgICB9XG5cbn1cbiIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeQppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lcgppbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGwKClByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKCkKRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJykKcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHsKCXByb3BlcnRpZXMubG9hZChpdCkKfQpDYXRlZ29yeSBsb2cgPSBDYXRlZ29yeS5nZXRJbnN0YW5jZSgiY29tLm9ucmVzb2x2ZS5qaXJhLmdyb292eS5Qb3N0RnVuY3Rpb24iKQpsb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRykKCklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTsKQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpOwpkZWYgcmVxdWVzdE1ldGhvZApkZWYgYmFzZVVSTApsb2cuZGVidWcgIk9uU2l0ZSBSZXBvcnQgcGVyIGlzc3VlOiAiICsgaXNzdWUua2V5Ci8qIFJFU1QgQVBJIHBlciBHZW5lcmF6aW9uZSBBbGxlZ2F0byBSYXBwb3J0byBkaSBJbnRlcnZlbnRvICovCnJlcXVlc3RNZXRob2QgPSAiUFVUIjsKCmJhc2VVUkwgPSAiaHR0cDovLyIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArICIvb3AvcmVzdC9hdXRvbWF0aW9uL0FBL3RpY2tldC8iICsgaXNzdWUua2V5LnRvU3RyaW5nKCkgKyAiL2F0dGFjaG1lbnQvb25zaXRlIgpsb2cuZGVidWcgImJhc2VVcmw6ICIgKyBiYXNlVVJMCgpVUkwgdXJsCnVybCA9IG5ldyBVUkwoYmFzZVVSTCkKSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpOwpjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eSgiQ29udGVudC1UeXBlIiwgImFwcGxpY2F0aW9uL2pzb24iKTsKY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoIkFjY2VwdCIsICIqLyoiKTsKY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTsKY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpOwpjb25uZWN0aW9uLmNvbm5lY3QoKTsKbG9nLmRlYnVnICJSZXNwb25zZUNvZGU6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkKbG9nLmRlYnVnICJSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKCmRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KCkKZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpCmRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKQpkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpCgppZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoIjIwMCIpKXsKICAgIGxvZy5kZWJ1ZyAidXJsOiAiICsgdXJsCiAgICBsb2cuZGVidWcgIlJlc3BvbnNlQ29kZToiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKQogICAgbG9nLmRlYnVnICJSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKICAgIGVMaXN0RXJyb3JzLmFkZCgiRSIpCiAgICBlTGlzdEVycm9ycy5hZGQoIkdFTkVSQVRFLU9OU0lURVJFUE9SVCIpCiAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyAiICIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpKQogICAgZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncykKICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycykKCiAgICBvdXRwdXQuYWRkKGVMaXN0KQogICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigneyJFIjoiJyArIG91dHB1dC50b1N0cmluZygpICsgJyJ9JykKICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigiRSIsIG91dHB1dC50b1N0cmluZygpKQp9Cg==</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">b734e2c5-1436-43e7-ba9d-53f2ba06c457</arg>
              <arg name="FIELD_NOTES">YCFgQ3JlYXRlIFNOICYgU08gZm9yIG9sZCB0aWNrZXRzICsgZm9yIENvbXBsZXRlZCBkdXJpbmcgTWFpbnRlbmFuY2U=</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxuXG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUubGluay5Jc3N1ZUxpbmtcblxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpO1xuQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpO1xuXG5kZWYgU04gPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfU0FQX1NFUlZJQ0VfTk9USUZJQ0FUSU9OXCIpWzBdXG5kZWYgcmVxdWVzdE1ldGhvZFxuZGVmIGJhc2VVUkxcblxuVVJMIHVybFxuSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvblxuXG5pZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKFNOKSA9PSBudWxsICYmIGlzc3VlLmlzc3VlVHlwZS5uYW1lICE9IFwiUGxhbm5lZCBNYWludGVuYW5jZSBUaWNrZXRcIil7XG4gICAgcmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuXG4gICAgZGVmIGJvZHlfcmVxID0gW11cbiAgICBib2R5X3JlcSA9IFtcbiAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXksXG4gICAgICAgIFwic3RhdHVzXCI6IFwiSU5QXCJcbiAgICBdIFxuXG4gICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvYWZ0ZXIvc2FsZXMvY3JlYXRlL3NlcnZpY2Uvbm90aWZpY2F0aW9uXCJcblxuICAgIGxvZy5kZWJ1ZyBcImJhc2VVUkwgU046IFwiICsgYmFzZVVSTFxuICAgIGxvZy5kZWJ1ZyBcImJvZHlfcmVxIFNOOiBcIiArIGJvZHlfcmVxXG4gICAgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG4gICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxuICAgIGxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpO1xuXG4gICAgZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KClcblxuICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMVwiKSl7XG4gICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG4gICAgICAgIFxuICAgICAgICBkZWYgb3V0cHV0TXNnID0gKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0XG4gICAgICAgIGxvZy5kZWJ1ZyBcIigoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dDogXCIgKyBvdXRwdXRNc2dcblxuICAgICAgICBkZWYganNvblNsdXJwZXIgPSBuZXcgSnNvblNsdXJwZXIoKVxuICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgICAgICBhc3NlcnQganNvbl9vYmplY3QgaW5zdGFuY2VvZiBNYXAgIFxuICAgICAgICBsb2cuZGVidWcgXCJtZXNzYWdlOiBcIiArICBqc29uX29iamVjdC5tZXNzYWdlXG4gICAgICAgIGxvZy5kZWJ1ZyBcImVycm9yczogXCIgKyAganNvbl9vYmplY3QuZXJyb3JzLnRvU3RyaW5nKClcblxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIk9QLVNBUC1TTi1VUERBVEVcIilcbiAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5lcnJvcnNbMF0pXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChlcnJvck1zZ3MpXG4gICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycylcblxuICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcbiAgICB9ZWxzZXtcbiAgICAgICAgLyoqIFNFUlZJQ0UgT1JERVIgQ1JFQVRJT04gKiovXG4gICAgICAgIGJvZHlfcmVxID0gW1xuICAgICAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXlcbiAgICAgICAgXSBcbiAgICAgICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvYWZ0ZXIvc2FsZXMvY3JlYXRlL29yL3VwZGF0ZS9zZXJ2aWNlL29yZGVyXCJcblxuICAgICAgICBsb2cuZGVidWcgXCJiYXNlVVJMIFNPOiBcIiArIGJhc2VVUkxcbiAgICAgICAgbG9nLmRlYnVnIFwiYm9keV9yZXEgU086IFwiICsgYm9keV9yZXFcbiAgICAgICAgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgICAgICBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xuICAgICAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG4gICAgICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xuICAgICAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbiAgICAgICAgY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbiAgICAgICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuICAgICAgICBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgICAgICBjb25uZWN0aW9uLm91dHB1dFN0cmVhbS53aXRoV3JpdGVyKFwiVVRGLThcIikgeyBuZXcgU3RyZWFtaW5nSnNvbkJ1aWxkZXIoaXQsIGJvZHlfcmVxKSB9XG4gICAgICAgIGxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgICAgICBjb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuICAgICAgICBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5cbiAgICAgICAgaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAxXCIpICYmICFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAwXCIpKXtcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZGVmIG91dHB1dE1zZyA9ICgoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dFxuICAgIFx0XHRsb2cuZGVidWcgXCIoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHQ6IFwiICsgb3V0cHV0TXNnXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGRlZiBqc29uU2x1cnBlciA9IG5ldyBKc29uU2x1cnBlcigpXG4gICAgICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgICAgICAgICAgYXNzZXJ0IGpzb25fb2JqZWN0IGluc3RhbmNlb2YgTWFwICBcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIm1lc3NhZ2U6IFwiICsgIGpzb25fb2JqZWN0Lm1lc3NhZ2VcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcImVycm9yczogXCIgKyAganNvbl9vYmplY3QuZXJyb3JzLnRvU3RyaW5nKClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiRVwiKVxuICAgICAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiT1AtU0FQLVNPLUNSRUFURVwiKVxuICAgICAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5lcnJvcnNbMF0pXG4gICAgICAgICAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKVxuICAgICAgICAgICAgZUxpc3QuYWRkKGVMaXN0RXJyb3JzKVxuXG4gICAgICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgICAgIH1cbiAgICB9XG59Iiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">37c2d78492ac54794b8917d58342d465c219be98</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBPUCBFbWFpbCBOb3RpZmljYXRpb246IE9OU0lURV9SRVBPUlQgLSBvbmx5IElGIE9QQUFfQVVUT01BVElDQUxMWV9DTE9TRUQhPVllcyBBTkQgc2VuZE1haWwhPU5PIE1BSUwgQU5EIGNpIHNvbm8gdGlja2V0IGNvbGxlZ2F0aS4gLS0tLT4gRElTQUJMRUQgc3UgdHJhbnNhemlvbmUgY29tcGxldGUgLSB2aWVuZSBmYXR0byBtYW51YWxtZW50ZSBkYSBTRU5EIE9OU0lURSBSRVBPUlQ=</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="FIELD_INLINE_SCRIPT">YCFgaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyOwppbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDsKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7CmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlOwppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7CmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvbgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk1vZGlmaWVkVmFsdWUKaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS51dGlsLkRlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlcgppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmV2ZW50LnR5cGUuRXZlbnREaXNwYXRjaE9wdGlvbgppbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeQppbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuSXNzdWVMaW5rCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyCmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbAoKUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKQpGaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKQpwcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0gewoJcHJvcGVydGllcy5sb2FkKGl0KQp9CkNhdGVnb3J5IGxvZyA9IENhdGVnb3J5LmdldEluc3RhbmNlKCJjb20ub25yZXNvbHZlLmppcmEuZ3Jvb3Z5LlBvc3RGdW5jdGlvbiIpCmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKQoKSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpOwpDdXN0b21GaWVsZE1hbmFnZXIgY3VzdG9tRmllbGRNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCk7CmRlZiBhdXRvbWF0aWNhbGx5Q2xvc2VkID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi5hdXRvbWF0aWNhbGx5Q2xvc2VkJ10udG9TdHJpbmcoKSlbMF0KZGVmIHNlbmRNYWlsVG8gPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLnNlbmRNYWlsVG8nXS50b1N0cmluZygpKVswXQpkZWYgc2VuZE1haWxUb1JlYyA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2Yuc2VuZE1haWxUb1JlY2lwaWVudHMnXS50b1N0cmluZygpKVswXQpkZWYgb25zaXRlUmVwb3J0RGF0ZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi53Zk9uc2l0ZVJlcG9ydCddLnRvU3RyaW5nKCkpWzBdCgpkZWYgcmVxdWVzdE1ldGhvZApkZWYgYmFzZVVSTAoKaW50IE9QQUEgPSBwcm9wZXJ0aWVzWydpc2NoZW1hLmFhLmlkJ10udG9TdHJpbmcoKS50b0ludGVnZXIoKQppbnQgREJPID0gcHJvcGVydGllc1snaXNjaGVtYS5kYm8uaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpCmRlZiByZWxhdGVzSW5Jc3N1ZUxpbms9ZmFsc2UKZGVmIHJlbGF0ZXNPdXRJc3N1ZUxpbms9ZmFsc2UKZGVmIGxpbmtlZFRpY2tldHM9bmV3IEFycmF5TGlzdCgpCmRlZiBib2R5X3JlcQpkZWYgc2VuZG1haWw9dHJ1ZQoKaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q2xvc2VkKT09bnVsbCB8fCAhaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhdXRvbWF0aWNhbGx5Q2xvc2VkKS50b1N0cmluZygpLmVxdWFscygiWWVzIikpewoKICAgIC8qT1AtMTAzODogdmVyaWZpY2EgdGlja2V0IGNvbGxlZ2F0aSovCiAgICBMaXN0PElzc3VlTGluaz4gYWxsSW5Jc3N1ZUxpbmsgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZUxpbmtNYW5hZ2VyKCkuZ2V0SW53YXJkTGlua3MoaXNzdWUuZ2V0SWQoKSkKICAgIGZvciAoSXRlcmF0b3I8SXNzdWVMaW5rPiBvdXRJdGVyYXRvciA9IGFsbEluSXNzdWVMaW5rLml0ZXJhdG9yKCk7IG91dEl0ZXJhdG9yLmhhc05leHQoKTspIHsKICAgICAgICBJc3N1ZUxpbmsgaXNzdWVMaW5rID0gKElzc3VlTGluaykgb3V0SXRlcmF0b3IubmV4dCgpOwoKICAgICAgICBpZihpc3N1ZUxpbmsuaXNzdWVMaW5rVHlwZS5nZXROYW1lKCkudG9TdHJpbmcoKS5lcXVhbHMocHJvcGVydGllc1snaWwubGlua2VkVGt0c1JlbGF0ZXMnXS50b1N0cmluZygpKSl7CiAgICAgICAgICAgIHJlbGF0ZXNJbklzc3VlTGluaz10cnVlCiAgICAgICAgICAgIGxpbmtlZFRpY2tldHMuYWRkKGlzc3VlTGluay5nZXRTb3VyY2VPYmplY3QoKS50b1N0cmluZygpKQogICAgICAgICAgICBsb2cuZGVidWcgIklzc3VlIGNvbiByZWxhdGVzSW5Jc3N1ZUxpbmsiCiAgICAgICAgfQogICAgfQogICAgTGlzdDxJc3N1ZUxpbms+IGFsbE91dElzc3VlTGluayA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTGlua01hbmFnZXIoKS5nZXRPdXR3YXJkTGlua3MoaXNzdWUuZ2V0SWQoKSkKICAgIGZvciAoSXRlcmF0b3I8SXNzdWVMaW5rPiBvdXRJdGVyYXRvciA9IGFsbE91dElzc3VlTGluay5pdGVyYXRvcigpOyBvdXRJdGVyYXRvci5oYXNOZXh0KCk7KSB7CiAgICAgICAgSXNzdWVMaW5rIGlzc3VlTGluayA9IChJc3N1ZUxpbmspIG91dEl0ZXJhdG9yLm5leHQoKTsKCiAgICAgICAgaWYoaXNzdWVMaW5rLmlzc3VlTGlua1R5cGUuZ2V0TmFtZSgpLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2lsLmxpbmtlZFRrdHNSZWxhdGVzJ10udG9TdHJpbmcoKSkpewogICAgICAgICAgICByZWxhdGVzT3V0SXNzdWVMaW5rPXRydWUKICAgICAgICAgICAgbGlua2VkVGlja2V0cy5hZGQoaXNzdWVMaW5rLmdldERlc3RpbmF0aW9uT2JqZWN0KCkudG9TdHJpbmcoKSkKICAgICAgICAgICAgbG9nLmRlYnVnICJJc3N1ZSBjb24gcmVsYXRlc091dElzc3VlTGluayIKICAgICAgICB9CiAgICB9CiAgICAKICAgIGxvZy5kZWJ1ZyAiaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzZW5kTWFpbFRvKS50b1N0cmluZygpOiAiICsgaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzZW5kTWFpbFRvKS50b1N0cmluZygpCiAgICBpZigocmVsYXRlc0luSXNzdWVMaW5rIHx8IHJlbGF0ZXNPdXRJc3N1ZUxpbmspICYmICFpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHNlbmRNYWlsVG8pLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2NmLm9wdGlvbi5zZW5kTWFpbFRvLm5vRW1haWwnXS50b1N0cmluZygpKSAmJiBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHNlbmRNYWlsVG8pLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2NmLm9wdGlvbi5zZW5kTWFpbFRvLmN1cnJlbnRSZXBvcnQnXS50b1N0cmluZygpKSl7CiAgICAgICAgLy9PUC0xMDM4OiBpbnZpYXJlIHNvbG8gbGEgbWFpbCBjb24gaWwgcmFwcG9ydG8gZGkgaW50ZXJ2ZW50byBkZWwgdGlja2V0IGNvcnJlbnRlCiAgICAgICAgYm9keV9yZXEgPSBbCiAgICAgICAgICAgICJ0ZW1wbGF0ZU5hbWUiOiBwcm9wZXJ0aWVzWyd0dC5vblNpdGVSZXBvcnQnXS50b1N0cmluZygpLAogICAgICAgICAgICAicGVjIjogZmFsc2UsCiAgICAgICAgICAgICJpc3N1ZUtleSI6IGlzc3VlLmtleSwKICAgICAgICAgICAgImFkZGl0aW9uYWxSZWNpcGllbnRzIjogaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzZW5kTWFpbFRvUmVjKS50b1N0cmluZygpCiAgICAgICAgXQogICAgICAgIC8qMzEuMDcuMjAyMCBBRjogbmVsbGEgdHJhbnNhemlvbmUgY29tcGxldGUgTk9OIGludmlhcmUgbWFpbCBsYSBtYWlsIHBlciBpIHRpY2tldCBjb24gY29sbGVnYXRpIC0gaWwgcmFwcG9ydG8gZGkgaW50ZXJ2ZW50byBkZWkgdGlja2V0ICJmaWdsaSIgdmllbmUgZ2VuZXJhdG8gZG9wbyBsJ2ludmlvIGRlbGxhIG1haWwgc3VsICJwYWRyZSIgcXVpbmRpIG5vbiB2ZXJyZWJiZSBpbmNsdXNvIG5lbGxhIG1haWwqLwogICAgICAgIC8qTCdpbnZpbyBkZWxsYSBtYWlsIHZlcnLDoCBmYXR0byBzdWNjZXNzaXZhbWVudGUgcmlzcGV0dG8gYWxsYSBjaGl1c3VyYSBjb24gIlNlbmQgT25TaXRlIFJlcG9ydCIqLwogICAgICAgIHNlbmRtYWlsPWZhbHNlCiAgICB9ZWxzZSBpZigocmVsYXRlc0luSXNzdWVMaW5rIHx8IHJlbGF0ZXNPdXRJc3N1ZUxpbmspICYmICFpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHNlbmRNYWlsVG8pLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2NmLm9wdGlvbi5zZW5kTWFpbFRvLm5vRW1haWwnXS50b1N0cmluZygpKSAmJiBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHNlbmRNYWlsVG8pLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2NmLm9wdGlvbi5zZW5kTWFpbFRvLmN1cnJlbnRSZXBvcnQnXS50b1N0cmluZygpKSl7CiAgICAgICAgLy9PUC0xMDM4OiBpbnZpYXJlIGxhIG1haWwgY29uIHR1dHRpIGkgcmFwcG9ydGkgZGkgaW50ZXJ2ZW50byBkZWkgdGlja2V0IGNvbGxlZ2F0aQogICAgICAgIGJvZHlfcmVxID0gWwogICAgICAgICAgICAidGVtcGxhdGVOYW1lIjogcHJvcGVydGllc1sndHQub25TaXRlUmVwb3J0J10udG9TdHJpbmcoKSwKICAgICAgICAgICAgInBlYyI6IGZhbHNlLAogICAgICAgICAgICAiaXNzdWVLZXkiOiBpc3N1ZS5rZXksCiAgICAgICAgICAgICJsaW5rZWRUaWNrZXRzIjogbGlua2VkVGlja2V0cywKICAgICAgICAgICAgImFkZGl0aW9uYWxSZWNpcGllbnRzIjogaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzZW5kTWFpbFRvUmVjKS50b1N0cmluZygpCiAgICAgICAgXQogICAgICAgIC8qMzEuMDcuMjAyMCBBRjogbmVsbGEgdHJhbnNhemlvbmUgY29tcGxldGUgTk9OIGludmlhcmUgbWFpbCBsYSBtYWlsIHBlciBpIHRpY2tldCBjb24gY29sbGVnYXRpIC0gaWwgcmFwcG9ydG8gZGkgaW50ZXJ2ZW50byBkZWkgdGlja2V0ICJmaWdsaSIgdmllbmUgZ2VuZXJhdG8gZG9wbyBsJ2ludmlvIGRlbGxhIG1haWwgc3VsICJwYWRyZSIgcXVpbmRpIG5vbiB2ZXJyZWJiZSBpbmNsdXNvIG5lbGxhIG1haWwqLwogICAgICAgIC8qTCdpbnZpbyBkZWxsYSBtYWlsIHZlcnLDoCBmYXR0byBzdWNjZXNzaXZhbWVudGUgcmlzcGV0dG8gYWxsYSBjaGl1c3VyYSBjb24gIlNlbmQgT25TaXRlIFJlcG9ydCIqLwogICAgICAgIHNlbmRtYWlsPWZhbHNlCiAgICB9ZWxzZSBpZighcmVsYXRlc0luSXNzdWVMaW5rICYmICFyZWxhdGVzT3V0SXNzdWVMaW5rKXsKICAgICAgICAvKkFGIDIwMjAwNzI5IC0gc3UgRkFBQyBTZXJ2aWNlIGxhIG5vdGlmaWNhIGNvbiBpbCByYXBwb3J0byBkaSBpbnRlcnZlbnRvIHZpZW5lIGludmlhdGEgc29sbyBzdSBlc3BsaWNpdGEgZGVjaXNpb25lIGRlbGwndXRlbnRlIC0gY2hlIHNwaW5nZXLDoCBTRU5EIE9OU0lURSBSRVBPUlQgZG9wbyBhdmVyIGNoaXVzbyBpbCB0aWNrZXQuIFF1aW5kaSBzZSBub24gY2kgc29ubyB0aWNrZXQgY29sbGVnYXRpIHNldHRpYW1vIHNlbmRtYWlsPWZhbHNlKi8KICAgICAgICBzZW5kbWFpbD1mYWxzZQogICAgICAgIGJvZHlfcmVxID0gWwogICAgICAgICAgICAidGVtcGxhdGVOYW1lIjogcHJvcGVydGllc1sndHQub25TaXRlUmVwb3J0J10udG9TdHJpbmcoKSwKICAgICAgICAgICAgInBlYyI6IGZhbHNlLAogICAgICAgICAgICAiaXNzdWVLZXkiOiBpc3N1ZS5rZXksCiAgICAgICAgICAgICJhZGRpdGlvbmFsUmVjaXBpZW50cyI6IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoc2VuZE1haWxUb1JlYykudG9TdHJpbmcoKQogICAgICAgIF0KICAgIH1lbHNlewogICAgICAgIC8vT1AtMTAzODogbm9uIGludmlhcmUgbGEgbWFpbAogICAgICAgIHNlbmRtYWlsPWZhbHNlCiAgICB9CiAgICAKICAgIGxvZy5kZWJ1ZyAic2VuZG1haWw6ICIgKyBzZW5kbWFpbAogICAgaWYoc2VuZG1haWwpewogICAgICAgIC8qIFJFU1QgQVBJIHBlciBJbnZpbyBOb3RpZmljYSBFbWFpbCBPTlNJVEVfUkVQT1JUICovCiAgICAgICAgcmVxdWVzdE1ldGhvZCA9ICJQT1NUIjsKCiAgICAgICAgYmFzZVVSTCA9ICJodHRwOi8vIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgIi9vcC9yZXN0L2ppcmEvQUEvdHJhbnNhY3Rpb24vbWFpbC9zZW5kIgogICAgICAgIFVSTCB1cmwgPSBuZXcgVVJMKGJhc2VVUkwpCiAgICAgICAgSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTsKICAgICAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7CiAgICAgICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoIkNvbnRlbnQtVHlwZSIsICJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLTgiKTsKICAgICAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eSgiQWNjZXB0IiwgIiovKiIpOwogICAgICAgIGNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7CiAgICAgICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpOwogICAgICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtCiAgICAgICAgbG9nLmRlYnVnICJib2R5X3JlcTogIiArIGJvZHlfcmVxCiAgICAgICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcigiVVRGLTgiKSB7IG5ldyBTdHJlYW1pbmdKc29uQnVpbGRlcihpdCwgYm9keV9yZXEpIH0KICAgICAgICBsb2cuZGVidWcgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0KICAgICAgICBjb25uZWN0aW9uLmNvbm5lY3QoKTsKICAgICAgICAKICAgICAgICBsb2cuZGVidWcgInVybDogIiArIHVybAogICAgICAgIGxvZy5kZWJ1ZyAiUmVzcG9uc2VDb2RlOiIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpCiAgICAgICAgLy9sb2cuZGVidWcgIlJlc3BvbnNlTWVzc2FnZToiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKQoKICAgICAgICBkZWYgb3V0cHV0ID0gbmV3IEFycmF5TGlzdCgpCiAgICAgICAgZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpCiAgICAgICAgZGVmIGVMaXN0RXJyb3JzID0gbmV3IEFycmF5TGlzdCgpCiAgICAgICAgZGVmIGVycm9yTXNncyA9IG5ldyBBcnJheUxpc3QoKQoKICAgICAgICBpZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoIjIwMCIpKXsKICAgICAgICAgICAgbG9nLmRlYnVnICJ1cmw6ICIgKyB1cmwKICAgICAgICAgICAgbG9nLmRlYnVnICJSZXNwb25zZUNvZGU6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkKICAgICAgICAgICAgbG9nLmRlYnVnICJSZXNwb25zZU1lc3NhZ2U6IiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkKCiAgICAgICAgICAgIAogICAgICAgICAgICAvKiBHZXQgSW5zaWdodCBJUUwgRmFjYWRlIGZyb20gcGx1Z2luIGFjY2Vzc29yICovCiAgICAgICAgICAgIENsYXNzIGlxbEZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcygiY29tLnJpYWRhbGFicy5qaXJhLnBsdWdpbnMuaW5zaWdodC5jaGFubmVsLmV4dGVybmFsLmFwaS5mYWNhZGUuSVFMRmFjYWRlIik7IAogICAgICAgICAgICBkZWYgaXFsRmFjYWRlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKGlxbEZhY2FkZUNsYXNzKTsKCiAgICAgICAgICAgIC8qIEdldCBJbnNpZ2h0IE9iamVjdCBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi8KICAgICAgICAgICAgQ2xhc3Mgb2JqZWN0RmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RGYWNhZGUiKTsKICAgICAgICAgICAgZGVmIG9iamVjdEZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShvYmplY3RGYWNhZGVDbGFzcyk7CgogICAgICAgICAgICAvKiBHZXQgSW5zaWdodCBPYmplY3QgVHlwZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi8KICAgICAgICAgICAgQ2xhc3Mgb2JqZWN0VHlwZUZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcygiY29tLnJpYWRhbGFicy5qaXJhLnBsdWdpbnMuaW5zaWdodC5jaGFubmVsLmV4dGVybmFsLmFwaS5mYWNhZGUuT2JqZWN0VHlwZUZhY2FkZSIpOwogICAgICAgICAgICBkZWYgb2JqZWN0VHlwZUZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShvYmplY3RUeXBlRmFjYWRlQ2xhc3MpOwoKICAgICAgICAgICAgLyogR2V0IEluc2lnaHQgT2JqZWN0IEF0dHJpYnV0ZSBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi8KICAgICAgICAgICAgQ2xhc3Mgb2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcygiY29tLnJpYWRhbGFicy5qaXJhLnBsdWdpbnMuaW5zaWdodC5jaGFubmVsLmV4dGVybmFsLmFwaS5mYWNhZGUuT2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZSIpOwogICAgICAgICAgICBkZWYgb2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShvYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlQ2xhc3MpOwoKICAgICAgICAgICAgQ2xhc3Mgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuc2VydmljZXMubW9kZWwuZmFjdG9yeS5PYmplY3RBdHRyaWJ1dGVCZWFuRmFjdG9yeSIpOwogICAgICAgICAgICBkZWYgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnkgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyk7CgogICAgICAgICAgICAvKiBTcGVjaWZ5IHRoZSBzY2hlbWEgaWQgYXMgd2VsbCBhcyB0aGUgSVFMIHRoYXQgd2lsbCBmZXRjaCBvYmplY3RzLiBJbiB0aGlzIGNhc2UgYWxsIG9iamVjdHMgd2l0aCBOYW1lIG1hdGNoaW5nIHRoZSB2YWx1ZUNGLCBiZSBzdXJlIHRvIGluY2x1ZGUgIiBhcm91bmQgdmFsdWUgKi8KICAgICAgICAgICAgLypST0xMQkFDSyovCiAgICAgICAgICAgIC8qUmltb3ppb25lIGFsbGVnYXRvIHJhcHBvcnRvIGRpIGludGVydmVudG8gYXBwZW5hIGNyZWF0byovCiAgICAgICAgICAgIGRlZiBvYmplY3RzID0gaXFsRmFjYWRlLmZpbmRPYmplY3RzQnlJUUxBbmRTY2hlbWEoREJPLCAiXCIiICsgcHJvcGVydGllc1snaW9iai5hdHRhY2htZW50Q2F0ZWdvcnkuY2F0ZWdvcnlSZWYnXS50b1N0cmluZygpICsgIlwiLlwiTmFtZVwiID0gXCIiICsgcHJvcGVydGllc1snaW9iai5hdHRhY2htZW50Q2F0ZWdvcnkub2Jqcy5yYXBwSW50RkFBQyddLnRvU3RyaW5nKCkgKyAiXCIgQU5EICIgKyBwcm9wZXJ0aWVzWydpb2JqLmF0dGFjaG1lbnRDYXRlZ29yeS5kZWxldGVkJ10udG9TdHJpbmcoKSArICIhPXRydWUgQU5EIG9iamVjdCBIQVZJTkcgY29ubmVjdGVkVGlja2V0cyhrZXkgPSAiICsgaXNzdWUua2V5LnRvU3RyaW5nKCkgKyAiKSIpOyAvLyBTZWUgdGhlIGNvbXBsZXRlIGxpc3Qgb2YgcG9zc2libGUgSVFMIG9uIHRoZSBJbnNpZ2h0IFF1ZXJ5IExhbmd1YWdlIGRvY3VtZW50YXRpb24gcGFnZQogICAgICAgICAgICAvKiBJZiB0aGlzIGlzIGEgbWFuZGF0b3J5IGZpZWxkIHlvdSBzaG91bGQgYmUgYWJsZSB0byBkbyB0aGlzOiAqLwogICAgICAgICAgICAvL2xvZy5pbmZvKCJJbnNpZ2h0IG9iamVjdDogIiArIG9iamVjdHNbMF0pOwoKICAgICAgICAgICAgaWYob2JqZWN0c1swXSl7CiAgICAgICAgICAgICAgICAvKiBVUERBVEUgT0pCRUNUIERFTEVURUQgVkFMVUUgKi8KICAgICAgICAgICAgICAgIGRlZiBvYlRyaWFnZSA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbihvYmplY3RzWzBdLmdldElkKCksIHByb3BlcnRpZXNbJ2lvYmouYXR0YWNobWVudENhdGVnb3J5LmRlbGV0ZWQnXS50b1N0cmluZygpKS5jcmVhdGVNdXRhYmxlKCkgIAogICAgICAgICAgICAgICAgZGVmIHZhbHVlID0gb2JUcmlhZ2UuZ2V0T2JqZWN0QXR0cmlidXRlVmFsdWVCZWFucygpCgogICAgICAgICAgICAgICAgZGVmIHZhbHVlQmVhbiA9IG9iVHJpYWdlLmNyZWF0ZU9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbigpCiAgICAgICAgICAgICAgICB2YWx1ZUJlYW4uc2V0VmFsdWUob2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZS5sb2FkT2JqZWN0VHlwZUF0dHJpYnV0ZUJlYW4ob2JUcmlhZ2UuZ2V0T2JqZWN0VHlwZUF0dHJpYnV0ZUlkKCkpLCB0cnVlKQogICAgICAgICAgICAgICAgLypDbGVhbiBhY3R1YWwgdmFsdWUqLwogICAgICAgICAgICAgICAgdmFsdWUuY2xlYXIoKQogICAgICAgICAgICAgICAgdmFsdWUuYWRkKHZhbHVlQmVhbik7CiAgICAgICAgICAgICAgICBvYlRyaWFnZS5zZXRPYmplY3RBdHRyaWJ1dGVWYWx1ZUJlYW5zKHZhbHVlKQoKICAgICAgICAgICAgICAgIC8vVXBkYXRlIE9KQkVDVCBhdHRyaWJ1dGUgdmFsdWUKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgb2JUcmlhZ2UgPSBvYmplY3RGYWNhZGUuc3RvcmVPYmplY3RBdHRyaWJ1dGVCZWFuKG9iVHJpYWdlKTsKICAgICAgICAgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiB2aWUpIHsKICAgICAgICAgICAgICAgICAgICBsb2cud2FybigiMS4gQ291bGQgbm90IHVwZGF0ZSBvYmplY3QgYXR0cmlidXRlIGR1ZSB0byB2YWxpZGF0aW9uIGV4Y2VwdGlvbjoiICsgdmllLmdldE1lc3NhZ2UoKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8qUm9sbGJhY2sgY29udGFiaWxpenphemlvbmUgaW50ZXJ2ZW50byovCiAgICAgICAgICAgIC8qQ2FuY2VsbGFyZSB0dXR0aSBnbGkgb2dnZXR0aSBPblNpdGVfUmF0ZV9SZXBvcnQgcmVnaXN0cmF0aSBuZWkgY2FtcGkgT1BBQV9MVU1QX1NVTV9SQVRFUywgT1BBQV9VTkFfVEFOVFVNX1JBVEVTLCBPUEFBX1RSQVZFTF9SQVRFUywgT1BBQV9MQUJPVVJfUkFURVMqLwogICAgICAgICAgICAvKkNpY2xhcmUgdHV0dGkgZ2xpIG9nZ2V0dGkgYXNzb2NpYXRpIGFsIGNhbXBvKi8KCiAgICAgICAgICAgIC8qIFNwZWNpZnkgdGhlIHNjaGVtYSBpZCBhcyB3ZWxsIGFzIHRoZSBJUUwgdGhhdCB3aWxsIGZldGNoIG9iamVjdHMuIEluIHRoaXMgY2FzZSBhbGwgb2JqZWN0cyB3aXRoIE5hbWUgbWF0Y2hpbmcgdGhlIHZhbHVlQ0YsIGJlIHN1cmUgdG8gaW5jbHVkZSAiIGFyb3VuZCB2YWx1ZSAqLwogICAgICAgICAgICBvYmplY3RzID0gaXFsRmFjYWRlLmZpbmRPYmplY3RzQnlJUUxBbmRTY2hlbWEoT1BBQSwgIm9iamVjdFR5cGUgPSAiICsgcHJvcGVydGllc1snaW9iai5vblNpdGVSYXRlUmVwb3J0J10udG9TdHJpbmcoKSArICIgQU5EIG9iamVjdCBIQVZJTkcgY29ubmVjdGVkVGlja2V0cyhrZXk9IiArIGlzc3VlLmtleS50b1N0cmluZygpICsgIikgQU5EIFwiIiArIHByb3BlcnRpZXNbJ2lvYmoub25TaXRlUmF0ZVJlcG9ydC5kZWxldGVkJ10udG9TdHJpbmcoKSArICJcIiAhPSB0cnVlIik7IC8vIFNlZSB0aGUgY29tcGxldGUgbGlzdCBvZiBwb3NzaWJsZSBJUUwgb24gdGhlIEluc2lnaHQgUXVlcnkgTGFuZ3VhZ2UgZG9jdW1lbnRhdGlvbiBwYWdlCiAgICAgICAgICAgIC8qIElmIHRoaXMgaXMgYSBtYW5kYXRvcnkgZmllbGQgeW91IHNob3VsZCBiZSBhYmxlIHRvIGRvIHRoaXM6ICovCiAgICAgICAgICAgIC8vbG9nLmluZm8oIkluc2lnaHQgb2JqZWN0cyBkYSBjYW5jZWxsYXJlOiAiICsgb2JqZWN0cyk7CgogICAgICAgICAgICBmb3Iob2JqIGluIG9iamVjdHMpewogICAgICAgICAgICAgICAgLyogREVMRVRFIENPTk5FQ1RFRCBPQkpFQ1RTICovCiAgICAgICAgICAgICAgICBvYmplY3RGYWNhZGUuZGVsZXRlT2JqZWN0QmVhbihvYmouZ2V0SWQoKSk7ICAKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLypDYW5jZWxsYXJlIGdsaSBpbXBvcnRpIGZvcm5pdG9yZSwgY2xpZW50ZSBlIGkgdG90YWxpIHN1IHR1dHRpIGdsaSBvZ2dldHRpIENvbXBvbmVudCBpbiBPUEFBX1JFUExBQ0VEX01BVEVSSUFMUyovCiAgICAgICAgICAgIGRlZiByZXBNYXRlcmlhbHMgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLnJlcGxhY2VkTWF0ZXJpYWxzJ10udG9TdHJpbmcoKSlbMF0KICAgICAgICAgICAgZGVmIHJlcE1hdExpc3QgPSBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHJlcE1hdGVyaWFscykKCiAgICAgICAgICAgIGZvcihtYXQgaW4gcmVwTWF0TGlzdCl7CiAgICAgICAgICAgICAgICAvL2V4dHJhY3QgaW5zaWdodCBrZXkgYW5kIGdldCBvYmplY3QKICAgICAgICAgICAgICAgIGRlZiBjb21wb25lbnQ9bWF0LnRvU3RyaW5nKCkKICAgICAgICAgICAgICAgIGRlZiBjb21wb25lbnRLZXkgPSBjb21wb25lbnQuc3Vic3RyaW5nKGNvbXBvbmVudC5pbmRleE9mKCcoJykrMSxjb21wb25lbnQuaW5kZXhPZignKScpKQogICAgICAgICAgICAgICAgZGVmIGNvbXBvbmVudE9iamVjdCA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QmVhbihjb21wb25lbnRLZXkpCiAgICAgICAgICAgICAgICAvL3NldCAiQVBQTElFRF9UTyIsICJBQ0NPVU5USU5HX1NVUFBMSUVSX01BVEVSSUFMX1JFRiIsICJBQ0NPVU5USU5HX0NVU1RPTUVSX01BVEVSSUFMX1JFRiIsICJUT1RBTF9BTU9VTlRfU1VQUExJRVIiLCAiVE9UQUxfQU1PVU5UX0NVU1RPTUVSIiB0byBudWxsIGZvciB0aGF0IGNvbXBvbmVudAoKICAgICAgICAgICAgICAgIC8vQVBQTElFRF9UTwogICAgICAgICAgICAgICAgaWYob2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKGNvbXBvbmVudE9iamVjdC5nZXRJZCgpLCBwcm9wZXJ0aWVzWydpb2JqLmNvbXBvbmVudC5hcHBsaWVkVG8nXS50b1N0cmluZygpKSl7CiAgICAgICAgICAgICAgICAgICAgZGVmIG9iVHJpYWdlQXBwbGllZFRvID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKGNvbXBvbmVudE9iamVjdC5nZXRJZCgpLCBwcm9wZXJ0aWVzWydpb2JqLmNvbXBvbmVudC5hcHBsaWVkVG8nXS50b1N0cmluZygpKS5jcmVhdGVNdXRhYmxlKCkKICAgICAgICAgICAgICAgICAgICBkZWYgdmFsdWVBcHBsaWVkVG8gPSBvYlRyaWFnZUFwcGxpZWRUby5nZXRPYmplY3RBdHRyaWJ1dGVWYWx1ZUJlYW5zKCkKICAgICAgICAgICAgICAgICAgICBsb2cud2FybiAidmFsdWVBcHBsaWVkVG86ICIgKyB2YWx1ZUFwcGxpZWRUbwogICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZUFwcGxpZWRUby5zaXplKCkgPiAwKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVBcHBsaWVkVG8uY2xlYXIoKSAKCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYlRyaWFnZUFwcGxpZWRUbyA9IG9iamVjdEZhY2FkZS5kZWxldGVPYmplY3RBdHRyaWJ1dGVCZWFuKG9iVHJpYWdlQXBwbGllZFRvLmlkKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIHZpZSl7IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nLmVycm9yKCJDb3VsZCBub3QgdXBkYXRlIG9iamVjdCBhdHRyaWJ1dGUgZHVlIHRvIHZhbGlkYXRpb24gZXhjZXB0aW9uOiIgKyB2aWUuZ2V0TWVzc2FnZSgpKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvL0FDQ09VTlRJTkdfU1VQUExJRVJfTUFURVJJQUxfUkVGCiAgICAgICAgICAgICAgICBpZihvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4oY29tcG9uZW50T2JqZWN0LmdldElkKCksIHByb3BlcnRpZXNbJ2lvYmouY29tcG9uZW50LmFjY291bnRpbmdTdXBwTWF0ZXJpYWwnXS50b1N0cmluZygpKSl7CiAgICAgICAgICAgICAgICAgICAgZGVmIG9iVHJpYWdlTWF0UyA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbihjb21wb25lbnRPYmplY3QuZ2V0SWQoKSwgcHJvcGVydGllc1snaW9iai5jb21wb25lbnQuYWNjb3VudGluZ1N1cHBNYXRlcmlhbCddLnRvU3RyaW5nKCkpLmNyZWF0ZU11dGFibGUoKQogICAgICAgICAgICAgICAgICAgIGRlZiB2YWx1ZU1hdFMgPSBvYlRyaWFnZU1hdFMuZ2V0T2JqZWN0QXR0cmlidXRlVmFsdWVCZWFucygpCiAgICAgICAgICAgICAgICAgICAgbG9nLndhcm4gInZhbHVlTWF0UzogIiArIHZhbHVlTWF0UwogICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZU1hdFMuc2l6ZSgpID4gMCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlTWF0Uy5jbGVhcigpIAoKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iVHJpYWdlTWF0UyA9IG9iamVjdEZhY2FkZS5kZWxldGVPYmplY3RBdHRyaWJ1dGVCZWFuKG9iVHJpYWdlTWF0Uy5pZCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiB2aWUpeyAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZy5lcnJvcigiQ291bGQgbm90IHVwZGF0ZSBvYmplY3QgYXR0cmlidXRlIGR1ZSB0byB2YWxpZGF0aW9uIGV4Y2VwdGlvbjoiICsgdmllLmdldE1lc3NhZ2UoKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy9BQ0NPVU5USU5HX0NVU1RPTUVSX01BVEVSSUFMX1JFRgogICAgICAgICAgICAgICAgaWYob2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKGNvbXBvbmVudE9iamVjdC5nZXRJZCgpLCBwcm9wZXJ0aWVzWydpb2JqLmNvbXBvbmVudC5hY2NvdW50aW5nQ3VzdE1hdGVyaWFsJ10udG9TdHJpbmcoKSkpewogICAgICAgICAgICAgICAgICAgIGRlZiBvYlRyaWFnZU1hdEMgPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4oY29tcG9uZW50T2JqZWN0LmdldElkKCksIHByb3BlcnRpZXNbJ2lvYmouY29tcG9uZW50LmFjY291bnRpbmdDdXN0TWF0ZXJpYWwnXS50b1N0cmluZygpKS5jcmVhdGVNdXRhYmxlKCkKICAgICAgICAgICAgICAgICAgICBkZWYgdmFsdWVNYXRDID0gb2JUcmlhZ2VNYXRDLmdldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnMoKQogICAgICAgICAgICAgICAgICAgIGxvZy53YXJuICJ2YWx1ZU1hdEM6ICIgKyB2YWx1ZU1hdEMKICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVNYXRDLnNpemUoKSA+IDApewogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZU1hdEMuY2xlYXIoKSAKCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYlRyaWFnZU1hdEMgPSBvYmplY3RGYWNhZGUuZGVsZXRlT2JqZWN0QXR0cmlidXRlQmVhbihvYlRyaWFnZU1hdEMuaWQpOwogICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gdmllKXsgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2cuZXJyb3IoIkNvdWxkIG5vdCB1cGRhdGUgb2JqZWN0IGF0dHJpYnV0ZSBkdWUgdG8gdmFsaWRhdGlvbiBleGNlcHRpb246IiArIHZpZS5nZXRNZXNzYWdlKCkpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAvL1RPVEFMX0FNT1VOVF9TVVBQTElFUgogICAgICAgICAgICAgICAgaWYob2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKGNvbXBvbmVudE9iamVjdC5nZXRJZCgpLCBwcm9wZXJ0aWVzWydpb2JqLmNvbXBvbmVudC50b3RTdXBwJ10udG9TdHJpbmcoKSkpewogICAgICAgICAgICAgICAgICAgIGRlZiBvYlRyaWFnZVRvdFMgPSBvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4oY29tcG9uZW50T2JqZWN0LmdldElkKCksIHByb3BlcnRpZXNbJ2lvYmouY29tcG9uZW50LnRvdFN1cHAnXS50b1N0cmluZygpKS5jcmVhdGVNdXRhYmxlKCkKICAgICAgICAgICAgICAgICAgICBkZWYgdmFsdWVUb3RTID0gb2JUcmlhZ2VUb3RTLmdldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnMoKQogICAgICAgICAgICAgICAgICAgIGxvZy53YXJuICJ2YWx1ZVRvdFM6ICIgKyB2YWx1ZVRvdFMKICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVUb3RTLnNpemUoKSA+IDApewogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVRvdFMuY2xlYXIoKSAKCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYlRyaWFnZVRvdFMgPSBvYmplY3RGYWNhZGUuZGVsZXRlT2JqZWN0QXR0cmlidXRlQmVhbihvYlRyaWFnZVRvdFMuaWQpOwogICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gdmllKXsgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2cuZXJyb3IoIkNvdWxkIG5vdCB1cGRhdGUgb2JqZWN0IGF0dHJpYnV0ZSBkdWUgdG8gdmFsaWRhdGlvbiBleGNlcHRpb246IiArIHZpZS5nZXRNZXNzYWdlKCkpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgLy9UT1RBTF9BTU9VTlRfQ1VTVE9NRVIKICAgICAgICAgICAgICAgIGlmKG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbihjb21wb25lbnRPYmplY3QuZ2V0SWQoKSwgcHJvcGVydGllc1snaW9iai5jb21wb25lbnQudG90Q3VzdCddLnRvU3RyaW5nKCkpKXsKICAgICAgICAgICAgICAgICAgICBkZWYgb2JUcmlhZ2VUb3RDID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKGNvbXBvbmVudE9iamVjdC5nZXRJZCgpLCBwcm9wZXJ0aWVzWydpb2JqLmNvbXBvbmVudC50b3RDdXN0J10udG9TdHJpbmcoKSkuY3JlYXRlTXV0YWJsZSgpCiAgICAgICAgICAgICAgICAgICAgZGVmIHZhbHVlVG90QyA9IG9iVHJpYWdlVG90Qy5nZXRPYmplY3RBdHRyaWJ1dGVWYWx1ZUJlYW5zKCkKICAgICAgICAgICAgICAgICAgICBsb2cud2FybiAidmFsdWVUb3RDOiAiICsgdmFsdWVUb3RDCiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlVG90Qy5zaXplKCkgPiAwKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVUb3RDLmNsZWFyKCkgCgogICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JUcmlhZ2VUb3RDID0gb2JqZWN0RmFjYWRlLmRlbGV0ZU9iamVjdEF0dHJpYnV0ZUJlYW4ob2JUcmlhZ2VUb3RDLmlkKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIHZpZSl7IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nLmVycm9yKCJDb3VsZCBub3QgdXBkYXRlIG9iamVjdCBhdHRyaWJ1dGUgZHVlIHRvIHZhbGlkYXRpb24gZXhjZXB0aW9uOiIgKyB2aWUuZ2V0TWVzc2FnZSgpKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSAgICAKCiAgICAgICAgICAgIGRlZiBvdXRwdXRNc2cgPSAoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHQKICAgICAgICAgICAgbG9nLmRlYnVnICIoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHQ6ICIgKyBvdXRwdXRNc2cKCiAgICAgICAgICAgIGRlZiBqc29uU2x1cnBlciA9IG5ldyBKc29uU2x1cnBlcigpCiAgICAgICAgICAgIGRlZiBqc29uX29iamVjdCA9IGpzb25TbHVycGVyLnBhcnNlVGV4dChvdXRwdXRNc2cpCiAgICAgICAgICAgIGFzc2VydCBqc29uX29iamVjdCBpbnN0YW5jZW9mIE1hcCAgCiAgICAgICAgICAgIGxvZy5kZWJ1ZyAibWVzc2FnZTogIiArICBqc29uX29iamVjdC5tZXNzYWdlCiAgICAgICAgICAgIAogICAgICAgICAgICBlTGlzdEVycm9ycy5hZGQoIkUiKQogICAgICAgICAgICBlTGlzdEVycm9ycy5hZGQoIlNFTkRNQUlMIikKICAgICAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgIiAiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKSkKICAgICAgICAgICAgZUxpc3RFcnJvcnMuYWRkKGpzb25fb2JqZWN0Lm1lc3NhZ2UpCiAgICAgICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycykKCiAgICAgICAgICAgIG91dHB1dC5hZGQoZUxpc3QpCiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oJ3siRSI6IicgKyBvdXRwdXQudG9TdHJpbmcoKSArICcifScpCiAgICAgICAgICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigiRSIsIG91dHB1dC50b1N0cmluZygpKQogICAgICAgIH1lbHNlewogICAgICAgICAgICAvKkwnZW1haWwgw6ggc3RhdGEgaW52aWF0YSBjb3JyZXR0YW1lbnRlLCBhZ2dpb3JubyBpbCBjYW1wbyBPTlNJVEVfUkVQT1JUIGNvbiBsYSBkYXRhIGNvcnJlbnRlKi8KCiAgICAgICAgICAgIC8vIGxvZy53YXJuICJpc3N1ZSAiK2lzc3VlLmdldEtleSgpCiAgICAgICAgICAgIGRlZiBjZnYgPSBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKG9uc2l0ZVJlcG9ydERhdGUpCiAgICAgICAgICAgIGlmICghY2Z2KSB7CiAgICAgICAgICAgICAgZGVmIHQwICA9IG5ldyBqYXZhLnNxbC5UaW1lc3RhbXAoU3lzdGVtLmN1cnJlbnRUaW1lTWlsbGlzKCkpCiAgICAgICAgICAgICAgbG9nLndhcm4gIlN0YXJ0VGltZSA9PiAnIit0MC50b1N0cmluZygpKyInIgogICAgICAgICAgICAgIGRlZiBtdiA9IG5ldyBNb2RpZmllZFZhbHVlKG9uc2l0ZVJlcG9ydERhdGUsIHQwKQogICAgICAgICAgICAgIGRlZiBjaCA9IG5ldyBEZWZhdWx0SXNzdWVDaGFuZ2VIb2xkZXIoKQogICAgICAgICAgICAgIG9uc2l0ZVJlcG9ydERhdGUudXBkYXRlVmFsdWUobnVsbCwgaXNzdWUsIG12LCBjaCkgCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgbG9nLndhcm4gIlN0YXJ0VGltZSA9PSAnIitjZnYudG9TdHJpbmcoKSsiJyIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQ==</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">df15a75e93b4c124a70f49e69dbcae9d48e2e8e4</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IFJFU1QgQVBJOiBPUCBwZXIgY29uc3VudGl2YXppb25lIHRpY2tldA==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="FIELD_INLINE_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
              <arg name="FIELD_SCRIPT_FILE"></arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">81aa9673-d0a1-4cdb-9909-19371f018388</arg>
                  <arg name="FIELD_NOTES">YCFgUE0gVGlja2V0IC0gVXBkYXRlIEhBUkRXQVJFLk1BSU5URU5BTkNFX05FWFRfVElDS0VUX0RBVEUgKyBIQVJEV0FSRS5NQUlOVEVOQU5DRV9MQVNUX1RJQ0tFVF9EQVRF</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIGxpbmtlZFRpY2tldHMgJiBGYXN0LVRyYW5zYWN0IHRoZW0=</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT"></arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_22693</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="1001" name="ReOpen Job">
          <meta name="opsbar-sequence">10</meta>
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="FIELD_NOTES">YCFgT1BBQV9TQUxFU19PUkRFUl9EQVRFIGFuZCBPUEFBX1BVUkNIQVNFX09SREVSX0RBVEUgc2hvdWxkIGJlIG51bGwgaW4gb3JkZXIgdG8gcmVvcGVuIHRoZSB0aWNrZXQgLSBvdGhlcndpc2UgdGhlIHRpY2tldCBoYXMgYWxyZWFkeSBiZWVuIGFjY291bnRlZCBzbyBpdCBjYW5ub3QgYmUgcmVvcGVuZWQ=</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgY2ZWYWx1ZXNbJ09QX1NBTEVTX09SREVSX0RBVEUnXSA9PSBudWxsICYmIGNmVmFsdWVzWydPUF9QVVJDSEFTRV9PUkRFUl9EQVRFJ10gPT0gbnVsbHx8fA==</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">e855fbdb-cb53-4bf8-922b-167760b6e692</arg>
                <arg name="FIELD_NOTES">YCFgTWFpbnRlbmFuY2UgVGlja2V0</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnTWFpbnRlbmFuY2UgVGlja2V0JyB8fCBpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnUGxhbm5lZCBNYWludGVuYW5jZSBUaWNrZXQnIiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_PREVIEW_ISSUE"></arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="5">
              <post-functions>
                <function type="class">
                  <arg name="field">customfield_22693</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22660</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22644</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22641</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="field">customfield_22666</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.15.1</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">93ee91428be862f784d2facaa9da5be13f63a66b</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IFJlbW92ZSBPblNpdGUgUmVwb3J0IEF0dGFjaG1lbnRz</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerrungroovy-function</arg>
                  <arg name="FIELD_INLINE_SCRIPT"></arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_SCRIPT_FILE"></arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">9750ea32-a13d-4474-8c20-074bb1967d78</arg>
                  <arg name="FIELD_NOTES">YCFgQ2xlYXIgY2FjaGU=</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxuXG4vKiBSRVNUIEFQSSBwZXIgR2VuZXJhemlvbmUgQWxsZWdhdG8gUmFwcG9ydG8gZGkgSW50ZXJ2ZW50byAqL1xucmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuLypTY3JpcHQgVmFyaWFibGVzKi9cbi8vUGVyIHRlc3QgZGEgY29uc29sZVxuLy9Jc3N1ZSBpc3N1ZSA9IGlzc3VlTWFuYWdlci5nZXRJc3N1ZUJ5S2V5SWdub3JlQ2FzZShcIk9QVVQtMTQwNjJcIilcbmJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9hdXRvbWF0aW9uL2NsZWFyQ2FjaGUvZGF0YU9iamVjdFwiXG5kZWYgYm9keV9yZXEgPSBbXVxuVVJMIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcbkh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbmNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5sb2cuZGVidWcgXCJib2R5X3JlcTogXCIgKyBib2R5X3JlcVxuY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxubG9nLmRlYnVnIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5jb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAwXCIpKXtcbiAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcbn0iLCJzY3JpcHRQYXRoIjpudWxsfQ==</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="disabled">false</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="25" name="Asset Check">
      <meta name="jira.status.id">14730</meta>
      <actions>
        <action id="951" name="Confirm Asset">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <results>
            <unconditional-result old-status="null" status="null" step="23">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="1111" name="Modifica Impianto" view="fieldscreen">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">20116</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">97dca225-7941-4128-9606-720aac90ae3d</arg>
                <arg name="FIELD_NOTES">YCFgRW5hYmxlZCBvbmx5IGZvciBuZXcgaW5zdCB0aWNrZXRzIGluIG9yZGVyIHRvIGFzc2lnbiBBU1NFVCBhbmQgZ2VuZXJhdGUgKG9yIHJlLWdlbmVyYXRlKSBEb2Nz</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiIoaXNzdWUuaXNzdWVUeXBlLm5hbWUgPT0gJ05ldyBJbnN0YWxsYXRpb24nIHx8IChpc3N1ZS5pc3N1ZVR5cGUubmFtZSA9PSAnTWFpbnRlbmFuY2UgVGlja2V0JyAmJiBjZlZhbHVlc1snT1BfRklSU1RfVElDS0VUJ10gPT0gXCJGaXJzdCBUaWNrZXRcIikpICYmIGNmVmFsdWVzWydPUF9BU1NFVCddICE9IG51bGwiLCJzY3JpcHRQYXRoIjpudWxsfQ==</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">14aa8006-ff99-4e5c-9191-91eeb349be66</arg>
              <arg name="FIELD_NOTES">YCFgRGVsZXRlIHByZXZpb3VzIGF0dGFjaG1lbnRzIHJlbGF0ZWQgdG8gTkVXIEluc3RhbGxhdGlvbiBUS1QgR2VuZXJhdGlvbg==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">a34dae8c-1a80-462f-8514-e46dbce5000f</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IERvYyBUZW1wbGF0ZSBnZW5lcmF0aW9uIC0gc2UgTmV3IEluc3RhbGxhdGlvbiBPUiBGaXJzdCBUaWNrZXQgPSB0cnVl</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5Xb3JrZmxvd0V4Y2VwdGlvbjtcbmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvblxuaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyO1xuaW1wb3J0IGdyb292eS5qc29uLlN0cmVhbWluZ0pzb25CdWlsZGVyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5DdXN0b21GaWVsZE1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3I7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5NdXRhYmxlSXNzdWVcbmltcG9ydCBvcmcuYXBhY2hlLmNvbW1vbnMuY29kZWMuYmluYXJ5LkJhc2U2NDtcbmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5XG5pbXBvcnQgZ3Jvb3Z5eC5uZXQuaHR0cC5IVFRQQnVpbGRlclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcblxuZGVmIHJlcXVlc3RNZXRob2RcbmRlZiBiYXNlVVJMXG5cbmRlZiBmaXJzdFRpY2tldCA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YuZmlyc3RUa3QnXS50b1N0cmluZygpKVswXVxuXG5sb2cuZGVidWcgaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZVxubG9nLmRlYnVnIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoZmlyc3RUaWNrZXQpXG5cblxuLyogUkVTVCBBUEkgcGVyIEludmlvIE5vdGlmaWNhIEVtYWlsIE9OU0lURV9SRVBPUlQgKi9cbnJlcXVlc3RNZXRob2QgPSBcIkdFVFwiO1xuXG5pZihpc3N1ZS5nZXRJc3N1ZVR5cGUoKS5uYW1lLnRvU3RyaW5nKCkuZXF1YWxzKHByb3BlcnRpZXNbJ2l0Lm5ld0luc3RhbGxhdGlvbiddKSB8fCBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGZpcnN0VGlja2V0KSE9bnVsbCl7XG4gICAgZGVmIGZpcnN0X3RpY2tldD1mYWxzZVxuICAgIGRlZiB0ZW1wbGF0ZT1cIlwiXG4gICAgaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShmaXJzdFRpY2tldCkhPW51bGwpe1xuICAgICAgICBmaXJzdF90aWNrZXQ9dHJ1ZVxuICAgICAgICB0ZW1wbGF0ZT1cIkZJUlNUX1RJQ0tFVCU3Q01BTlVGQUNUVVJFUlwiXG4gICAgfWVsc2V7XG4gICAgICAgIHRlbXBsYXRlPVwiTkVXX0lOU1RBTExBVElPTl9DUkVBVEVfVEtUJTdDTUFOVUZBQ1RVUkVSXCJcbiAgICB9XG4gICAgXG4gICAgaWYoaXNzdWUuZ2V0SXNzdWVUeXBlKCkubmFtZS50b1N0cmluZygpLmVxdWFscyhwcm9wZXJ0aWVzWydpdC5uZXdJbnN0YWxsYXRpb24nXSkpe1xuICAgICAgICBiYXNlVVJMID0gXCJodHRwOi8vXCIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArIFwiL29wL3Jlc3QvYXV0b21hdGlvbi9kb2N1bWVudC9nZW5lcmF0aW9uL2NoZWNrP0lTU1VFX0tFWT1cIisgaXNzdWUua2V5ICtcIiZET0NfQ0FURUdPUlk9XCIgKyB0ZW1wbGF0ZSArIFwiJkVOQUJMRURfRk9SX0ZJUlNUX1RJQ0tFVD1cIitmaXJzdF90aWNrZXQrXCImSU1QT1JUX0ZST009XCJcbiAgICB9ZWxzZXtcbiAgICAgICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2F1dG9tYXRpb24vZG9jdW1lbnQvZ2VuZXJhdGlvbi9jaGVjaz9JU1NVRV9LRVk9XCIrIGlzc3VlLmtleSArXCImRE9DX0NBVEVHT1JZPVwiICsgdGVtcGxhdGUgKyBcIiZFTkFCTEVEX0ZPUl9GSVJTVF9USUNLRVQ9XCIrZmlyc3RfdGlja2V0K1wiJklNUE9SVF9GUk9NPU9QX0FTU0VUXCJcbiAgICB9XG4gICAgXG4gICAgbG9nLmRlYnVnIGJhc2VVUkxcbiAgICBVUkwgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgIEh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbiAgICBjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbiAgICBjb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuICAgIGRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBkZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5cdGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICBcbiAgICBpZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDBcIikpe1xuICAgICAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuICAgICAgICBsb2cuZGVidWcgXCJFcnJvclN0cmVhbTogXCIgKyBjb25uZWN0aW9uLmdldEVycm9yU3RyZWFtKCkudG9TdHJpbmcoKVxuICAgICAgICBsb2cuZGVidWcgXCJnZXRIZWFkZXJGaWVsZHMoKTogXCIgKyBjb25uZWN0aW9uLmdldEhlYWRlckZpZWxkcygpXG4gICAgICAgIGRlZiBvdXRwdXRNc2cgPSAoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHRcbiAgICAgICAgbG9nLmRlYnVnIFwiKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0OiBcIiArIG91dHB1dE1zZ1xuXG4gICAgICAgIGRlZiBqc29uU2x1cnBlciA9IG5ldyBKc29uU2x1cnBlcigpXG4gICAgICAgIGRlZiBqc29uX29iamVjdCA9IGpzb25TbHVycGVyLnBhcnNlVGV4dChvdXRwdXRNc2cpXG4gICAgICAgIGFzc2VydCBqc29uX29iamVjdCBpbnN0YW5jZW9mIE1hcCAgXG4gICAgICAgIGxvZy5kZWJ1ZyBcIm1lc3NhZ2U6IFwiICsgIGpzb25fb2JqZWN0Lm1lc3NhZ2VcblxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIk9QLURPQ1NcIilcbiAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5tZXNzYWdlKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKVxuICAgICAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpXG5cbiAgICAgICAgb3V0cHV0LmFkZChlTGlzdClcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgfVxufVxuIiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="25">
              <post-functions>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
  </steps>
</workflow>
