<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE workflow PUBLIC "-//OpenSymphony Group//DTD OSWorkflow 2.8//EN" "http://www.opensymphony.com/osworkflow/workflow_2_8.dtd">
<workflow>
  <meta name="jira.description"></meta>
  <meta name="jira.update.author.key">JIRAUSER66010</meta>
  <meta name="jira.updated.date">1743532557775</meta>
  <initial-actions>
    <action id="1" name="Create">
      <validators>
        <validator name="" type="class">
          <arg name="permission">Create Issue</arg>
          <arg name="class.name">com.atlassian.jira.workflow.validator.PermissionValidator</arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="null" status="open" step="6">
          <post-functions>
            <function type="class">
              <arg name="field.copyFieldSource2"></arg>
              <arg name="field.copyFieldSource1">customfield_24200</arg>
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="maxAllowed-integerValue"></arg>
              <arg name="field.createTargetValue1"></arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field.copyFieldMode1">OVERWRITE</arg>
              <arg name="uuid">27deef27-5d37-4109-9af0-2ddb6fd43e39</arg>
              <arg name="field.copyFieldDestination1">customfield_24200</arg>
              <arg name="field.copyFieldSeparator1"></arg>
              <arg name="scopeType">PARENT</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiescopyValueFromOtherField-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="source-scopeTarget">PARENT</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.CopyValueFromOtherFieldPostFunction</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
            <function type="class">
              <arg name="FIELD_SECURITY_LEVEL_ID">11600</arg>
              <arg name="FIELD_FUNCTION_ID">b147e317-65f4-48be-b1ac-48c5afcd21bd</arg>
              <arg name="FIELD_NOTES">YCFgU2V0ICJPcGVyYXRpb24gUG9ydGFsIC0gRkFBQyBTZXJ2aWNlIiBJc3N1ZSBTZWN1cml0eSBMZXZlbA==</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
              <arg name="FIELD_CONDITION"></arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="scopeSource-linkEnd"></arg>
              <arg name="append.value"></arg>
              <arg name="maxAllowed-integerValue"></arg>
              <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
              <arg name="field.value">MAINTENANCE_ENABLED</arg>
              <arg name="field.name">customfield_22814</arg>
              <arg name="scopeType">SAME</arg>
              <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
              <arg name="scopeDestination-linkEnd"></arg>
              <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
              <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
              <arg name="scopeDestination-jql"></arg>
              <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
              <arg name="scopeSource-jql"></arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueCreateFunction</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">60128cc4-e32f-420c-91a3-919a2271e93f</arg>
              <arg name="FIELD_NOTES">YCFgQ3JlYXRlIG9iaiAiRHluYW1pYyBSaXNrIEFzc2Vzc21lbnQi</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiIgaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3JcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZVxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZTtcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5ldmVudC50eXBlLkV2ZW50RGlzcGF0Y2hPcHRpb247XHJcbmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkxldmVsXHJcblxyXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXHJcbkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZSgnL3Zhci9hdGxhc3NpYW4vYXBwbGljYXRpb24tZGF0YS9zaGFyZWQvc2NyaXB0cy9vcHByb2plY3QucHJvcGVydGllcycpXHJcbnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7XHJcblx0cHJvcGVydGllcy5sb2FkKGl0KVxyXG59XHJcbi8qIEdldCBJbnNpZ2h0IE9iamVjdCBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cclxuQ2xhc3Mgb2JqZWN0RmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKFwiY29tLnJpYWRhbGFicy5qaXJhLnBsdWdpbnMuaW5zaWdodC5jaGFubmVsLmV4dGVybmFsLmFwaS5mYWNhZGUuT2JqZWN0RmFjYWRlXCIpOyBcclxuZGVmIG9iamVjdEZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShvYmplY3RGYWNhZGVDbGFzcyk7XHJcbiAgXHJcbi8qIEdldCBJbnNpZ2h0IE9iamVjdCBUeXBlIEZhY2FkZSBmcm9tIHBsdWdpbiBhY2Nlc3NvciAqL1xyXG5DbGFzcyBvYmplY3RUeXBlRmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKFwiY29tLnJpYWRhbGFicy5qaXJhLnBsdWdpbnMuaW5zaWdodC5jaGFubmVsLmV4dGVybmFsLmFwaS5mYWNhZGUuT2JqZWN0VHlwZUZhY2FkZVwiKTsgXHJcbmRlZiBvYmplY3RUeXBlRmFjYWRlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKG9iamVjdFR5cGVGYWNhZGVDbGFzcyk7XHJcbiAgXHJcbi8qIEdldCBJbnNpZ2h0IE9iamVjdCBBdHRyaWJ1dGUgRmFjYWRlIGZyb20gcGx1Z2luIGFjY2Vzc29yICovXHJcbkNsYXNzIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlXCIpOyBcclxuZGVmIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZUNsYXNzKTtcclxuICBcclxuQ2xhc3Mgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LnNlcnZpY2VzLm1vZGVsLmZhY3RvcnkuT2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlcIik7IFxyXG5kZWYgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnkgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyk7XHJcblxyXG5Jc3N1ZSBpc3N1ZSA9IGlzc3VlXHJcblxyXG5kZWYgdGlja2V0VmlzS2V5ID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RCeU5hbWUoXCJPUF9US1RfVklTSUJJTElUWV9LRVlcIilcclxuXHJcbi8vMzAuMDMuMjAyMiAtIG9yYSBtZXNzYSBjb25kaXppb25lIGZpc3NhIGluIGJhc2UgYWxsYSBjb21wYW55IGNvZGUsIGFnZ2l1bmdlcmUgZmxhZyBzdWxsJ29nZ2V0dG8gQ29tcGFueSBjaGUgbGEgYWJpbGl0aSBvIG1lbm8gYWxsYSBkeW5hbWljIHJpc2sgYXNzZXNzbWVudC4gU29sbyBzZSBsYSBjb21wYW55IHJlZmVyZW56aWF0YSBuZWxsYSB2aXNpYmlsaXR5IGtleSBcclxuLy9oYSBsYSBkeW5hbWljIHJpc2sgYXNzZXNzbWVudCBhdHRpdmEgZmFyZSBxdWFudG8gc290dG9cclxuaWYoIWlzc3VlLmdldElzc3VlVHlwZSgpLm5hbWUudG9TdHJpbmcoKS5lcXVhbHMoXCJQbGFubmVkIE1haW50ZW5hbmNlIFRpY2tldFwiKSAmJiAoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZSh0aWNrZXRWaXNLZXkpWzBdLnRvU3RyaW5nKCkuY29udGFpbnMoXCIxMTA4XCIpIHx8IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUodGlja2V0VmlzS2V5KVswXS50b1N0cmluZygpLmNvbnRhaW5zKFwiMTE3OVwiKSB8fCBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHRpY2tldFZpc0tleSlbMF0udG9TdHJpbmcoKS5jb250YWlucyhcIjEwNzhcIikpKXtcclxuICAgIFxyXG4gICAgZGVmIGR5bmFtaWNSaXNrRmllbGQgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdEJ5TmFtZShcIk9QX0FTU0VUX1JJU0tTX0FTU0VTU01FTlRcIilcclxuICAgIGRlZiBkeW5hbWljUmlzayA9IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RCeU5hbWUoXCJPUF9BU1NFVF9SSVNLU19BU1NFU1NNRU5UXCIpKVxyXG4gICAgZGVmIGR5bmFtaWNSaXNrT2JqZWN0cyA9IG5ldyBBcnJheUxpc3QoKTtcclxuICAgIFxyXG4gICAgZGVmIERZTkFNSUNfUklTS19PQkpfVFlQRT1wcm9wZXJ0aWVzWydpb2JqLmR5bmFtaWNSaXNrJ10udG9TdHJpbmcoKS50b0ludGVnZXIoKVxyXG4gICAgZGVmIERZTkFNSUNfUklTS19BVFRSX05BTUU9cHJvcGVydGllc1snaW9iai5keW5hbWljUmlzay5uYW1lLmlkJ10udG9TdHJpbmcoKS50b0ludGVnZXIoKVxyXG4gICAgZGVmIERZTkFNSUNfUklTS19BVFRSX0NPTVBMRVRFRD1wcm9wZXJ0aWVzWydpb2JqLmR5bmFtaWNSaXNrLmNvbXBsZXRlZC5pZCddLnRvU3RyaW5nKCkudG9JbnRlZ2VyKClcclxuICAgIFxyXG4gICAgZGVmIG9iamVjdEF0dHJpYnV0ZUJlYW5zID0gbmV3IEFycmF5TGlzdCgpO1xyXG4gICAgZGVmIG5hbWVPYmplY3RUeXBlQXR0cmlidXRlQmVhbiA9IG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGUubG9hZE9iamVjdFR5cGVBdHRyaWJ1dGVCZWFuKERZTkFNSUNfUklTS19BVFRSX05BTUUpOyBcclxuICAgIGRlZiBjb21wbGV0ZWRPYmplY3RUeXBlQXR0cmlidXRlQmVhbiA9IG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGUubG9hZE9iamVjdFR5cGVBdHRyaWJ1dGVCZWFuKERZTkFNSUNfUklTS19BVFRSX0NPTVBMRVRFRCk7IFxyXG4gICAgXHJcbiAgICBkZWYgb2JqZWN0VHlwZUR5bmFtaWNSaXNrID0gb2JqZWN0VHlwZUZhY2FkZS5sb2FkT2JqZWN0VHlwZUJlYW4oRFlOQU1JQ19SSVNLX09CSl9UWVBFKTtcclxuICAgIGRlZiBuZXdPYmplY3RCZWFuID0gb2JqZWN0VHlwZUR5bmFtaWNSaXNrLmNyZWF0ZU11dGFibGVPYmplY3RCZWFuKCk7XHJcbiAgICBcclxuICAgIG9iamVjdEF0dHJpYnV0ZUJlYW5zLmFkZChvYmplY3RBdHRyaWJ1dGVCZWFuRmFjdG9yeS5jcmVhdGVPYmplY3RBdHRyaWJ1dGVCZWFuRm9yT2JqZWN0KG5ld09iamVjdEJlYW4sIG5hbWVPYmplY3RUeXBlQXR0cmlidXRlQmVhbiwgaXNzdWUua2V5LnRvU3RyaW5nKCkpKTtcclxuICAgIG9iamVjdEF0dHJpYnV0ZUJlYW5zLmFkZChvYmplY3RBdHRyaWJ1dGVCZWFuRmFjdG9yeS5jcmVhdGVPYmplY3RBdHRyaWJ1dGVCZWFuRm9yT2JqZWN0KG5ld09iamVjdEJlYW4sIGNvbXBsZXRlZE9iamVjdFR5cGVBdHRyaWJ1dGVCZWFuLCBcImZhbHNlXCIpKTtcclxuICAgIFxyXG4gICAgbmV3T2JqZWN0QmVhbi5zZXRPYmplY3RBdHRyaWJ1dGVCZWFucyhvYmplY3RBdHRyaWJ1dGVCZWFucyk7XHJcbiAgICAvKiBTdG9yZSB0aGUgb2JqZWN0IGludG8gSW5zaWdodC4gVGhlIG5ldyBPYmplY3RCZWFuIHdpbGwgYmUgdXBkYXRlZCB3aXRoIGFuIHVuaXF1ZSBJRCAqL1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBuZXdPYmplY3RCZWFuID0gb2JqZWN0RmFjYWRlLnN0b3JlT2JqZWN0QmVhbihuZXdPYmplY3RCZWFuKTtcclxuICAgICAgICBsb2cud2FybihcIm5ld09iamVjdEJlYW46IFwiICsgbmV3T2JqZWN0QmVhbik7XHJcbiAgICB9IGNhdGNoIChFeGNlcHRpb24gdmllKSB7XHJcbiAgICAgICAgbG9nLndhcm4oXCJDb3VsZCBub3QgY3JlYXRlIGlzc3VlIGR1ZSB0byB2YWxpZGF0aW9uIGV4Y2VwdGlvbjpcIiArIHZpZS5nZXRNZXNzYWdlKCkpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBkeW5hbWljUmlza09iamVjdHMuYWRkKG5ld09iamVjdEJlYW4pXHJcbiAgICBcclxuICAgIGxvZy5pbmZvIChcImR5bmFtaWNSaXNrT2JqZWN0czogXCIgKyBkeW5hbWljUmlza09iamVjdHMpXHJcbiAgICBkZWYgY3VycmVudFVzZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRKaXJhQXV0aGVudGljYXRpb25Db250ZXh0KCkuZ2V0TG9nZ2VkSW5Vc2VyKClcclxuICAgIFxyXG4gICAgaWYgKCFkeW5hbWljUmlza09iamVjdHMuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgTXV0YWJsZUlzc3VlIG1pID0gKE11dGFibGVJc3N1ZSkgaXNzdWU7XHJcbiAgICAgICAgbWkuc2V0Q3VzdG9tRmllbGRWYWx1ZShkeW5hbWljUmlza0ZpZWxkLCBkeW5hbWljUmlza09iamVjdHMpO1xyXG4gICAgICAgIENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpLnVwZGF0ZUlzc3VlKGN1cnJlbnRVc2VyLCBtaSwgRXZlbnREaXNwYXRjaE9wdGlvbi5ET19OT1RfRElTUEFUQ0gsIGZhbHNlKTtcclxuICAgIH1cclxufSAgICAgIiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">1</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">5eec2e6a-a9b1-4b1b-bbfc-a379ffb2a7fa</arg>
              <arg name="FIELD_NOTES">YCFgVXBkYXRlIFBhcmVudCBUaWNrZXQgT1BfUE1fSU5WT0xWRURfSU5TVEFMTEFUSU9OU19OVU1CRVIgZmllbGQgd2l0aCB0b3QgbnVtYiBvZiBzdWItdGFza3M=</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmluZGV4Lklzc3VlSW5kZXhpbmdTZXJ2aWNlXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5NdXRhYmxlSXNzdWVcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuZXZlbnQudHlwZS5FdmVudERpc3BhdGNoT3B0aW9uXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnV0aWwuRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk1vZGlmaWVkVmFsdWVcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUubGluay5Jc3N1ZUxpbmtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuaW5kZXguSXNzdWVJbmRleGluZ1NlcnZpY2VcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyXG5pbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGxcblxuUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKVxuRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJylcbnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7XG5cdHByb3BlcnRpZXMubG9hZChpdClcbn1cbmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKVxuXG5Jc3N1ZU1hbmFnZXIgaXNzdWVNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKCk7XG5DdXN0b21GaWVsZE1hbmFnZXIgY3VzdG9tRmllbGRNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCk7XG5kZWYgc3ViVGFza3NOdW0gPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfUE1fSU5WT0xWRURfSU5TVEFMTEFUSU9OU19OVU1CRVJcIilbMF1cblxuLy9QZXIgdGVzdCBkYSBjb25zb2xlXG4vL2RlZiBpc3N1ZSA9IGlzc3VlTWFuYWdlci5nZXRJc3N1ZUJ5S2V5SWdub3JlQ2FzZShcIkFBUy0xNjU3NzZcIilcblxuZGVmIHBhcmVudFRrdCA9IGlzc3VlLmdldFBhcmVudE9iamVjdCgpXG5cbnN1YlRhc2tzTnVtLnVwZGF0ZVZhbHVlKG51bGwsIHBhcmVudFRrdCwgbmV3IE1vZGlmaWVkVmFsdWUocGFyZW50VGt0LmdldEN1c3RvbUZpZWxkVmFsdWUoc3ViVGFza3NOdW0pLCAoaXNzdWUuZ2V0UGFyZW50T2JqZWN0KCkuZ2V0U3ViVGFza09iamVjdHMoKS5maW5kQWxseyFpdC5nZXRTdGF0dXMoKS5uYW1lLnRvU3RyaW5nKCkuZXF1YWxzKFwiUmVtb3ZlZFwiKX0uc2l6ZSgpKzEpLnRvRG91YmxlKCkpLCBuZXcgRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyKCkpXG5sb2cuZGVidWcgaXNzdWUuZ2V0UGFyZW50T2JqZWN0KCkuZ2V0U3ViVGFza09iamVjdHMoKS5maW5kQWxseyFpdC5nZXRTdGF0dXMoKS5uYW1lLnRvU3RyaW5nKCkuZXF1YWxzKFwiUmVtb3ZlZFwiKX0uc2l6ZSgpXG4iLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </initial-actions>
  <global-actions>
    <action id="141" name="Eseguita con cartaceo">
      <meta name="jira.description"></meta>
      <meta name="jira.fieldscreen.id"></meta>
      <validators>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">32a67932-b290-4d96-9333-4b1480b4c5c8</arg>
          <arg name="FIELD_NOTES">YCFgU0FQOiB1cGRhdGUgU04gc3RhdHVzICYgVXBkYXRlIFNPICsgQ29uZmlybWF0aW9uIC0gRG8gbm90IHVwZGF0ZSBpZiBsYXN0IFBNIFRhc2sgY2xvc2Vk</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb25maWcuU3ViVGFza01hbmFnZXJcblxuUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKVxuRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJylcbnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7XG5cdHByb3BlcnRpZXMubG9hZChpdClcbn1cbmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKVxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5saW5rLklzc3VlTGlua1xuXG5Jc3N1ZU1hbmFnZXIgaXNzdWVNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKClcbi8vSXNzdWUgaXNzdWUgPSBpc3N1ZU1hbmFnZXIuZ2V0SXNzdWVCeUtleUlnbm9yZUNhc2UoXCJBQVMtNTI4MjFcIilcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiBzdXBwbGllciA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2Yuc3VwcGxpZXInXSA/IHByb3BlcnRpZXNbJ2NmLnN1cHBsaWVyJ10udG9TdHJpbmcoKSA6IFwiT1BfU1VQUExJRVJcIilbMF1cbmRlZiBzYXBTTyA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUoXCJPUF9TQVBfU0VSVklDRV9PUkRFUlwiKVswXVxuZGVmIHJlcXVlc3RNZXRob2RcbmRlZiBiYXNlVVJMXG5kZWYgYm9keV9yZXFcbmRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbmRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuZGVmIGVMaXN0RXJyb3JzID0gbmV3IEFycmF5TGlzdCgpXG5kZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5cblN1YlRhc2tNYW5hZ2VyIHN1YlRhc2tNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0U3ViVGFza01hbmFnZXIoKTtcbkNvbGxlY3Rpb24gc3ViVGFza3MgPSBpc3N1ZS5nZXRQYXJlbnRPYmplY3QoKS5nZXRTdWJUYXNrT2JqZWN0cygpXG5kZWYgbGFzdCA9IHRydWVcbmlmICghc3ViVGFza3MuZW1wdHkpIHtcbiAgICBzdWJUYXNrcy5lYWNoIHtcbiAgICAgICAgaWYoIWl0LmdldFN0YXR1cygpLm5hbWUudG9TdHJpbmcoKS5lcXVhbHMoXCJEb25lXCIpICYmIGl0LmtleSAhPSBpc3N1ZS5rZXkpe1xuICAgICAgICAgICAgbGFzdD1mYWxzZVxuICAgICAgICAgICAgbG9nLmluZm8gXCJsYXN0XCJcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZighbGFzdCl7XG5cbiAgICAgICAgcmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuXG4gICAgICAgIGJvZHlfcmVxID0gW11cbiAgICAgICAgYm9keV9yZXEgPSBbXG4gICAgICAgICAgICBcImlzc3VlS2V5XCI6IGlzc3VlLmtleSxcbiAgICAgICAgICAgIFwic3RhdHVzXCI6IFwiSU5QXCJcbiAgICAgICAgXSBcblxuICAgICAgICBiYXNlVVJMID0gXCJodHRwOi8vXCIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArIFwiL29wL3Jlc3QvamlyYS9BQS9hZnRlci9zYWxlcy9jcmVhdGUvc2VydmljZS9ub3RpZmljYXRpb25cIlxuXG4gICAgICAgIGxvZy5kZWJ1ZyBcImJhc2VVUkwgU046IFwiICsgYmFzZVVSTFxuICAgICAgICBsb2cuZGVidWcgXCJib2R5X3JlcSBTTjogXCIgKyBib2R5X3JlcVxuICAgICAgICB1cmwgPSBuZXcgVVJMKGJhc2VVUkwpXG4gICAgICAgIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG4gICAgICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdE1ldGhvZChyZXF1ZXN0TWV0aG9kKTtcbiAgICAgICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLThcIik7XG4gICAgICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuICAgICAgICBjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpO1xuICAgICAgICBjb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7XG4gICAgICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG4gICAgICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtLndpdGhXcml0ZXIoXCJVVEYtOFwiKSB7IG5ldyBTdHJlYW1pbmdKc29uQnVpbGRlcihpdCwgYm9keV9yZXEpIH1cbiAgICAgICAgbG9nLmRlYnVnIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG4gICAgICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpO1xuXG4gICAgICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMFwiKSAmJiAhY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMVwiKSl7XG4gICAgICAgICAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZUNvZGU6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpXG4gICAgICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG4gICAgICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJTTl9VUERBVEVcIilcbiAgICAgICAgICAgIGVycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArIFwiIFwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKSlcbiAgICAgICAgICAgIGVMaXN0RXJyb3JzLmFkZChlcnJvck1zZ3MpXG4gICAgICAgICAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpXG5cbiAgICAgICAgICAgIG91dHB1dC5hZGQoZUxpc3QpXG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAvKiogU0VSVklDRSBPUkRFUiBVUERBVEUgKiovXG4gICAgICAgICAgICBVUkwgdXJsXG4gICAgICAgICAgICBIdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uXG5cbiAgICAgICAgICAgIGJvZHlfcmVxID0gW11cbiAgICAgICAgICAgIHJlcXVlc3RNZXRob2QgPSBcIlBPU1RcIjtcbiAgICAgICAgICAgIGJvZHlfcmVxID0gW1xuICAgICAgICAgICAgICAgIFwiaXNzdWVLZXlcIjogaXNzdWUua2V5LFxuICAgICAgICAgICAgICAgIFwiaW5jbHVkZVwiOiBcIkxBQk9VUlwiXG4gICAgICAgICAgICBdIFxuICAgICAgICAgICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvYWZ0ZXIvc2FsZXMvY3JlYXRlL29yL3VwZGF0ZS9zZXJ2aWNlL29yZGVyXCJcblxuICAgICAgICAgICAgbG9nLmRlYnVnIFwiYmFzZVVSTCBTTzogXCIgKyBiYXNlVVJMXG4gICAgICAgICAgICBsb2cuZGVidWcgXCJib2R5X3JlcSBTTzogXCIgKyBib2R5X3JlcVxuICAgICAgICAgICAgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuICAgICAgICAgICAgY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdE1ldGhvZChyZXF1ZXN0TWV0aG9kKTtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xuICAgICAgICAgICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJBY2NlcHRcIiwgXCIqLypcIik7XG4gICAgICAgICAgICBjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpO1xuICAgICAgICAgICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuICAgICAgICAgICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW1cbiAgICAgICAgICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtLndpdGhXcml0ZXIoXCJVVEYtOFwiKSB7IG5ldyBTdHJlYW1pbmdKc29uQnVpbGRlcihpdCwgYm9keV9yZXEpIH1cbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgICAgICAgICAgY29ubmVjdGlvbi5jb25uZWN0KCk7XG5cbiAgICAgICAgICAgIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKVxuICAgICAgICAgICAgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgICAgIGVMaXN0RXJyb3JzID0gbmV3IEFycmF5TGlzdCgpXG4gICAgICAgICAgICBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIlNPIFJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMVwiKSAmJiAhY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMFwiKSl7XG4gICAgICAgICAgICAgICAgbG9nLmRlYnVnIFwidXJsOiBcIiArIHVybFxuICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG5cbiAgICAgICAgICAgICAgICBkZWYgb3V0cHV0TXNnID0gKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0XG4gICAgICAgICAgICAgICAgbG9nLmRlYnVnIFwiKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0OiBcIiArIG91dHB1dE1zZ1xuXG4gICAgICAgICAgICAgICAgZGVmIGpzb25TbHVycGVyID0gbmV3IEpzb25TbHVycGVyKClcbiAgICAgICAgICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgICAgICAgICAgICAgIGFzc2VydCBqc29uX29iamVjdCBpbnN0YW5jZW9mIE1hcCAgXG4gICAgICAgICAgICAgICAgbG9nLmRlYnVnIFwibWVzc2FnZTogXCIgKyAganNvbl9vYmplY3QubWVzc2FnZVxuICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyBcImVycm9yczogXCIgKyAganNvbl9vYmplY3QuZXJyb3JzLnRvU3RyaW5nKClcblxuICAgICAgICAgICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIkVcIilcbiAgICAgICAgICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJPUC1TQVAtU08tQ1JFQVRFXCIpXG4gICAgICAgICAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5lcnJvcnNbMF0pXG4gICAgICAgICAgICAgICAgZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncylcbiAgICAgICAgICAgICAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpXG5cbiAgICAgICAgICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oJ3tcIkVcIjpcIicgKyBvdXRwdXQudG9TdHJpbmcoKSArICdcIn0nKVxuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgLyoqIERBIEZBUkUgU0MgU09MTyBJTiBDQVNPIERJIFRFQ05JQ0kgSU5URVJOSSAqKi9cbiAgICAgICAgICAgICAgICBpZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHN1cHBsaWVyKT09bnVsbCl7IC8qKiBzZSBPUF9TVVBQTElFUiA9IE5VTEwgaWwgdGlja2V0IGhhIHByb3NlZ3VpdG8gc3VsIGZsdXNzbyB0ZWNuaWNpIGludGVybmkgKiovXG5cbiAgICAgICAgICAgICAgICAgICAgYm9keV9yZXEgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICBcImlzc3VlS2V5XCI6IGlzc3VlLmtleVxuICAgICAgICAgICAgICAgICAgICBdIFxuXG4gICAgICAgICAgICAgICAgICAgIGJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9qaXJhL0FBL2FmdGVyL3NhbGVzL2NyZWF0ZS9zZXJ2aWNlL29yZGVyL2NvbmZpcm1hdGlvblwiXG4gICAgICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyBcImJvZHlfcmVxIFNDOiBcIiArIGJvZHlfcmVxXG4gICAgICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyBcImJhc2VVUkwgU0M6IFwiICsgYmFzZVVSTFxuICAgICAgICAgICAgICAgICAgICB1cmwgPSBuZXcgVVJMKGJhc2VVUkwpXG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdE1ldGhvZChyZXF1ZXN0TWV0aG9kKTtcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLThcIik7XG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtLndpdGhXcml0ZXIoXCJVVEYtOFwiKSB7IG5ldyBTdHJlYW1pbmdKc29uQnVpbGRlcihpdCwgYm9keV9yZXEpIH1cbiAgICAgICAgICAgICAgICAgICAgbG9nLmRlYnVnIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKVxuICAgICAgICAgICAgICAgICAgICBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuICAgICAgICAgICAgICAgICAgICBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKVxuICAgICAgICAgICAgICAgICAgICBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgICAgICAgICAgICAgbG9nLmRlYnVnIFwiU0MgUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDFcIikgJiYgIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDBcIikpe1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nLmRlYnVnIFwidXJsOiBcIiArIHVybFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWYgb3V0cHV0TXNnID0gKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2cuZGVidWcgXCIoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHQ6IFwiICsgb3V0cHV0TXNnXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZiBqc29uU2x1cnBlciA9IG5ldyBKc29uU2x1cnBlcigpXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXJ0IGpzb25fb2JqZWN0IGluc3RhbmNlb2YgTWFwICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIm1lc3NhZ2U6IFwiICsgIGpzb25fb2JqZWN0Lm1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyBcImVycm9yczogXCIgKyAganNvbl9vYmplY3QuZXJyb3JzLnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiRVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiT1AtU0FQLVNDLUNSRUFURVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5lcnJvcnNbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKVxuICAgICAgICAgICAgICAgICAgICAgICAgZUxpc3QuYWRkKGVMaXN0RXJyb3JzKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9ZWxzZXtcbiAgICAgICAgaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShzYXBTTykgPT0gbnVsbCl7XG4gICAgICAgICAgICAvKiogU0VSVklDRSBPUkRFUiBDUkVBVElPTiAqKi9cbiAgICAgICAgICAgIFVSTCB1cmxcbiAgICAgICAgICAgIEh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb25cblxuICAgICAgICAgICAgYm9keV9yZXEgPSBbXVxuICAgICAgICAgICAgcmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuICAgICAgICAgICAgYm9keV9yZXEgPSBbXG4gICAgICAgICAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXksXG4gICAgICAgICAgICAgICAgXCJpbmNsdWRlXCI6IFwiTUFURVJJQUxTXCJcbiAgICAgICAgICAgIF0gXG4gICAgICAgICAgICBiYXNlVVJMID0gXCJodHRwOi8vXCIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArIFwiL29wL3Jlc3QvamlyYS9BQS9hZnRlci9zYWxlcy9jcmVhdGUvb3IvdXBkYXRlL3NlcnZpY2Uvb3JkZXJcIlxuXG4gICAgICAgICAgICBsb2cuZGVidWcgXCJiYXNlVVJMIFNPOiBcIiArIGJhc2VVUkxcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcImJvZHlfcmVxIFNPOiBcIiArIGJvZHlfcmVxXG4gICAgICAgICAgICB1cmwgPSBuZXcgVVJMKGJhc2VVUkwpXG4gICAgICAgICAgICBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xuICAgICAgICAgICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuICAgICAgICAgICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLThcIik7XG4gICAgICAgICAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7XG4gICAgICAgICAgICBjb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7XG4gICAgICAgICAgICBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuICAgICAgICAgICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxuICAgICAgICAgICAgbG9nLmRlYnVnIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG4gICAgICAgICAgICBjb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuICAgICAgICAgICAgb3V0cHV0ID0gbmV3IEFycmF5TGlzdCgpXG4gICAgICAgICAgICBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuICAgICAgICAgICAgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgICAgIGVycm9yTXNncyA9IG5ldyBBcnJheUxpc3QoKVxuXG4gICAgICAgICAgICBpZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDFcIikgJiYgIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDBcIikpe1xuICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZUNvZGU6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpXG4gICAgICAgICAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGRlZiBvdXRwdXRNc2cgPSAoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHRcbiAgICAgICAgICAgICAgICBsb2cuZGVidWcgXCIoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHQ6IFwiICsgb3V0cHV0TXNnXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZGVmIGpzb25TbHVycGVyID0gbmV3IEpzb25TbHVycGVyKClcbiAgICAgICAgICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgICAgICAgICAgICAgIGFzc2VydCBqc29uX29iamVjdCBpbnN0YW5jZW9mIE1hcCAgXG4gICAgICAgICAgICAgICAgbG9nLmRlYnVnIFwibWVzc2FnZTogXCIgKyAganNvbl9vYmplY3QubWVzc2FnZVxuICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZyBcImVycm9yczogXCIgKyAganNvbl9vYmplY3QuZXJyb3JzLnRvU3RyaW5nKClcblxuICAgICAgICAgICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIkVcIilcbiAgICAgICAgICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJTT19DUkVBVEVcIilcbiAgICAgICAgICAgICAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyBcIiBcIiArIGpzb25fb2JqZWN0LmVycm9yc1swXSlcbiAgICAgICAgICAgICAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKVxuICAgICAgICAgICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycylcblxuICAgICAgICAgICAgICAgIG91dHB1dC5hZGQoZUxpc3QpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59Iiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="null" status="null" step="5">
          <post-functions>
            <function type="class">
              <arg name="field.name">resolution</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
              <arg name="field.value">6</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="161" name="Canceled">
      <meta name="jira.description"></meta>
      <meta name="jira.fieldscreen.id"></meta>
      <results>
        <unconditional-result old-status="null" status="null" step="8">
          <post-functions>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">81773586-8020-4dd5-a0db-9b6a5eb4edbb</arg>
              <arg name="FIELD_NOTES">YCFgTG9nIFRpbWVzdGFtcCBmb3IgVGVjaCBhY3Rpdml0eSAmIFVwZGF0ZSBKb2IgQ29tcGxldGVkIC0gRG8gbm90IHVwZGF0ZSBKb2IgQ29tcGxldGVkIGZvciB0aGUgTEFTVCBQTSBUYXNrIGV4ZWN1dGVk</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="field.name">resolution</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
              <arg name="field.value">10103</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="171" name="Rejected">
      <meta name="jira.description"></meta>
      <meta name="jira.fieldscreen.id"></meta>
      <results>
        <unconditional-result old-status="null" status="null" step="9">
          <post-functions>
            <function type="class">
              <arg name="field.name">resolution</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
              <arg name="field.value">10103</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">8d09b726-03cc-4515-bffe-8a5f6410435d</arg>
              <arg name="FIELD_NOTES">YCFgTG9nIFRpbWVzdGFtcCBmb3IgVGVjaCBhY3Rpdml0eSAmIFVwZGF0ZSBKb2IgQ29tcGxldGVkIC0gRG8gbm90IHVwZGF0ZSBKb2IgQ29tcGxldGVkIGZvciB0aGUgTEFTVCBQTSBUYXNrIGV4ZWN1dGVk</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="261" name="Removed">
      <meta name="jira.description"></meta>
      <meta name="jira.fieldscreen.id"></meta>
      <restrict-to>
        <conditions>
          <condition type="class">
            <arg name="FIELD_FUNCTION_ID">774f95a6-6a1f-40c0-bbda-dba593051be9</arg>
            <arg name="FIELD_INVERT_CONDITION"></arg>
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
            <arg name="FIELD_USER_IDS">arianna.fabbri|||atlassian_faac_service_desk</arg>
          </condition>
        </conditions>
      </restrict-to>
      <results>
        <unconditional-result old-status="null" status="null" step="11">
          <post-functions>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">cbd57251-e455-4a52-8a5f-a5bd31941d93</arg>
              <arg name="FIELD_NOTES">YCFgTG9nIFRpbWVzdGFtcCBmb3IgVGVjaCBhY3Rpdml0eSAmIFVwZGF0ZSBKb2IgQ29tcGxldGVkIC0gRG8gbm90IHVwZGF0ZSBKb2IgQ29tcGxldGVkIGZvciB0aGUgTEFTVCBQTSBUYXNrIGV4ZWN1dGVk</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="field.name">resolution</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
              <arg name="field.value">10103</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </global-actions>
  <common-actions>
    <action id="41" name="Start Progress" view="fieldscreen">
      <meta name="jira.description"></meta>
      <meta name="jira.fieldscreen.id">19910</meta>
      <restrict-to>
        <conditions type="AND">
          <conditions type="OR">
            <condition type="class">
              <arg name="conditionList">3</arg>
              <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
              <arg name="comparisonType">1</arg>
              <arg name="class.name">com.googlecode.jsu.workflow.condition.ValueFieldCondition</arg>
              <arg name="uuid">f78b5e13-a779-44f3-bc72-27a44c6ee749</arg>
              <arg name="fieldValue"></arg>
              <arg name="fieldsList">customfield_23929</arg>
            </condition>
            <condition type="class">
              <arg name="FIELD_FUNCTION_ID">169f9e32-777e-4c33-ba96-d598a11d602e</arg>
              <arg name="FIELD_NOTES">YCFgQ3VycmVudCBzdGF0dXMgaXMgUmlza3MgQXNzZXNzbWVudA==</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
              <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5nZXRTdGF0dXMoKS5uYW1lID09IFwiUmlza3MgQXNzZXNzbWVudFwiIiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
            </condition>
          </conditions>
          <condition type="class">
            <arg name="FIELD_FUNCTION_ID">519e584f-1e24-4d74-bbb9-ec343c3be7f1</arg>
            <arg name="FIELD_NOTES">YCFgRW5hYmxlZCBvbmx5IGlmIHBhcmVudCB0YXNrIGlzICJJbiBQcm9ncmVzcyIgYW5kIE9QX1RLVF9BU1NJR05FRF9UTyAhPSBBU1NJU1RBTlQ=</arg>
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
            <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlXHJcbmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvblxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvclxyXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxyXG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvbkJ1aWxkZXJcclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVNYW5hZ2VyXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTW9kaWZpZWRWYWx1ZVxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnV0aWwuRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyXHJcbmltcG9ydCBqYXZhLnRleHQuU2ltcGxlRGF0ZUZvcm1hdDtcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5pbmRleC5Jc3N1ZUluZGV4aW5nU2VydmljZVxyXG5cclxuZGVmIGFzc2lnbmVkVG8gPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfVEtUX0FTU0lHTkVEX1RPXCIpWzBdXHJcbmxvZy5kZWJ1ZyBcImlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoYXNzaWduZWRUbyk6IFwiICsgaXNzdWUuZ2V0UGFyZW50T2JqZWN0KCkuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhc3NpZ25lZFRvKVxyXG5cclxuKChpc3N1ZS5wYXJlbnRPYmplY3Q/LnN0YXR1cz8ubmFtZSA9PSBcIkZpbmFsaXppbmcgV29ya1wiIHx8IGlzc3VlLnBhcmVudE9iamVjdD8uc3RhdHVzPy5uYW1lID09IFwiSW4gUHJvZ3Jlc3NcIikgJiYgIWlzc3VlLmdldFBhcmVudE9iamVjdCgpLmdldEN1c3RvbUZpZWxkVmFsdWUoYXNzaWduZWRUbykudG9TdHJpbmcoKS5lcXVhbHMoXCJBU1NJU1RBTlRcIikpIiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
          </condition>
        </conditions>
      </restrict-to>
      <validators>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">da95600f-b12d-41a9-ba8a-97f002bd20c1</arg>
          <arg name="FIELD_NOTES">YCFgQ2hlY2sgUE0gb3BlcmF0aW9ucyBvbiBQTSB0YXNrICYmIFJlcXVpcmVkIGZpZWxkcyBpZiBSSVNLU19BU1NFU1NNRU5UIE5PVCBOVUxM</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="disabled">true</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">b24b77fd-c8bd-438e-bfca-049838725b25</arg>
          <arg name="FIELD_NOTES">YCFgU0FQOiB1cGRhdGUgU04gc3RhdHVz</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuSXNzdWVMaW5rXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxuXG5VUkwgdXJsXG5IdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uXG5cbnJlcXVlc3RNZXRob2QgPSBcIlBPU1RcIjtcblxuZGVmIGJvZHlfcmVxID0gW11cbmJvZHlfcmVxID0gW1xuICAgIFwiaXNzdWVLZXlcIjogaXNzdWUua2V5LFxuICAgIFwic3RhdHVzXCI6IFwiSU5QXCJcbl0gXG5cbiAgICBcbmJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9qaXJhL0FBL2FmdGVyL3NhbGVzL2NyZWF0ZS9zZXJ2aWNlL25vdGlmaWNhdGlvblwiXG5cbmxvZy5kZWJ1ZyBcImJhc2VVUkwgU046IFwiICsgYmFzZVVSTFxubG9nLmRlYnVnIFwiYm9keV9yZXEgU046IFwiICsgYm9keV9yZXFcbnVybCA9IG5ldyBVUkwoYmFzZVVSTClcbmNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbmNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5jb25uZWN0aW9uLm91dHB1dFN0cmVhbS53aXRoV3JpdGVyKFwiVVRGLThcIikgeyBuZXcgU3RyZWFtaW5nSnNvbkJ1aWxkZXIoaXQsIGJvZHlfcmVxKSB9XG5sb2cuZGVidWcgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW1cbmNvbm5lY3Rpb24uY29ubmVjdCgpO1xuXG5kZWYgb3V0cHV0ID0gbmV3IEFycmF5TGlzdCgpXG5kZWYgZUxpc3QgPSBuZXcgQXJyYXlMaXN0KClcbmRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKVxuZGVmIGVycm9yTXNncyA9IG5ldyBBcnJheUxpc3QoKVxuXG5pZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDBcIikgJiYgIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDFcIikpe1xuICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICBsb2cuZGVidWcgXCJSZXNwb25zZUNvZGU6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuICAgIGVMaXN0RXJyb3JzLmFkZChcIkVcIilcbiAgICBlTGlzdEVycm9ycy5hZGQoXCJTTl9VUERBVEVcIilcbiAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyBcIiBcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkpXG4gICAgZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncylcbiAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpXG5cbiAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgIHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oJ3tcIkVcIjpcIicgKyBvdXRwdXQudG9TdHJpbmcoKSArICdcIn0nKVxufWVsc2V7XG4gICAgLyoqIFNFUlZJQ0UgT1JERVIgQ1JFQVRJT04gKiovXG4gICAgYm9keV9yZXEgPSBbXG4gICAgICAgIFwiaXNzdWVLZXlcIjogaXNzdWUua2V5XG4gICAgXSBcbiAgICBiYXNlVVJMID0gXCJodHRwOi8vXCIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArIFwiL29wL3Jlc3QvamlyYS9BQS9hZnRlci9zYWxlcy9jcmVhdGUvb3IvdXBkYXRlL3NlcnZpY2Uvb3JkZXJcIlxuXG4gICAgbG9nLmRlYnVnIFwiYmFzZVVSTCBTTzogXCIgKyBiYXNlVVJMXG4gICAgbG9nLmRlYnVnIFwiYm9keV9yZXEgU086IFwiICsgYm9keV9yZXFcbiAgICB1cmwgPSBuZXcgVVJMKGJhc2VVUkwpXG4gICAgY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLThcIik7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJBY2NlcHRcIiwgXCIqLypcIik7XG4gICAgY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbiAgICBjb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW1cbiAgICBjb25uZWN0aW9uLm91dHB1dFN0cmVhbS53aXRoV3JpdGVyKFwiVVRGLThcIikgeyBuZXcgU3RyZWFtaW5nSnNvbkJ1aWxkZXIoaXQsIGJvZHlfcmVxKSB9XG4gICAgbG9nLmRlYnVnIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG4gICAgY29ubmVjdGlvbi5jb25uZWN0KCk7XG5cbiAgICBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbiAgICBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuICAgIGVMaXN0RXJyb3JzID0gbmV3IEFycmF5TGlzdCgpXG4gICAgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5cbiAgICBpZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDFcIikgJiYgIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDBcIikpe1xuICAgICAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuICAgICAgICBcbiAgICAgICAgZGVmIG91dHB1dE1zZyA9ICgoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dFxuICAgICAgICBsb2cuZGVidWcgXCIoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHQ6IFwiICsgb3V0cHV0TXNnXG4gICAgICAgIFxuICAgICAgICBkZWYganNvblNsdXJwZXIgPSBuZXcgSnNvblNsdXJwZXIoKVxuICAgICAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgICAgICBhc3NlcnQganNvbl9vYmplY3QgaW5zdGFuY2VvZiBNYXAgIFxuICAgICAgICBsb2cuZGVidWcgXCJtZXNzYWdlOiBcIiArICBqc29uX29iamVjdC5tZXNzYWdlXG4gICAgICAgIGxvZy5kZWJ1ZyBcImVycm9yczogXCIgKyAganNvbl9vYmplY3QuZXJyb3JzLnRvU3RyaW5nKClcblxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIlNPX0NSRUFURVwiKVxuICAgICAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyBcIiBcIiArIGpzb25fb2JqZWN0LmVycm9yc1swXSlcbiAgICAgICAgZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncylcbiAgICAgICAgZUxpc3QuYWRkKGVMaXN0RXJyb3JzKVxuXG4gICAgICAgIG91dHB1dC5hZGQoZUxpc3QpXG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oJ3tcIkVcIjpcIicgKyBvdXRwdXQudG9TdHJpbmcoKSArICdcIn0nKVxuICAgIH1cbn0iLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="disabled">true</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">0beaf9db-411f-4805-a98b-8af2e6f07abc</arg>
          <arg name="FIELD_NOTES">YCFgT1AgOiB2YWxpZGF0b3IgYmFja2VuZCBjYWxs</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGRcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5DdXN0b21GaWVsZE1hbmFnZXJcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS53b3JrZmxvdy5KaXJhV29ya2Zsb3dcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuc2NyZWVuLkZpZWxkU2NyZWVuTGF5b3V0SXRlbVxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5zY3JlZW4uRmllbGRTY3JlZW5UYWJcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuRmllbGRNYW5hZ2VyXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLnNjcmVlbi5GaWVsZFNjcmVlblxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5zY3JlZW4uRmllbGRTY3JlZW5NYW5hZ2VyXHJcbmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LmxvYWRlci5BY3Rpb25EZXNjcmlwdG9yXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEud29ya2Zsb3cuV29ya2Zsb3dNYW5hZ2VyXHJcbmltcG9ydCBncm9vdnkuanNvbi5TdHJlYW1pbmdKc29uQnVpbGRlclxyXG5pbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lclxyXG5pbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGxcclxuXHJcbmRlZiBiYXNlVVJMXHJcbmRlZiByZXNwb25zZUJvZHlcclxuXHJcbnRyeSB7XHJcbiAgICBQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXHJcbiAgICBGaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxyXG4gICAgcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcclxuICAgICAgICBwcm9wZXJ0aWVzLmxvYWQoaXQpXHJcbiAgICB9XHJcblxyXG4gICAgZGVmIHNlcnZlckJhc2UgPSBTdHJpbmcuZm9ybWF0KFwiaHR0cDovLyVzL29wXCIsIHByb3BlcnRpZXNbJ2FwaS5lbnYnXSlcclxuICAgIGRlZiB0cmFuc2FjdGlvbkFjdGlvbiA9IFwidmFsaWRhdG9yc1wiXHJcblxyXG4gICAgVVJMIHVybFxyXG4gICAgZGVmIHJlcXVlc3RNZXRob2QgPSBcIlBPU1RcIlxyXG5cclxuICAgIGJhc2VVUkwgPSBTdHJpbmcuZm9ybWF0KFwiJXMvcmVzdC9qaXJhL3dvcmtmbG93cy8lcy8lc1wiLCBzZXJ2ZXJCYXNlLCB0cmFuc2llbnRWYXJzLmFjdGlvbklkLCB0cmFuc2FjdGlvbkFjdGlvbilcclxuXHJcbiAgICBsb2cuZGVidWcoXCJDb21wb3NpbmcgYmFzZVVSTCBhcyAnJHtiYXNlVVJMfSdcIilcclxuXHJcbiAgICBXb3JrZmxvd01hbmFnZXIgd29ya2Zsb3dNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0V29ya2Zsb3dNYW5hZ2VyKClcclxuICAgIEppcmFXb3JrZmxvdyBqaXJhV29ya2Zsb3cgPSB3b3JrZmxvd01hbmFnZXIuZ2V0V29ya2Zsb3codHJhbnNpZW50VmFycy5pc3N1ZSlcclxuXHJcbiAgICBDdXN0b21GaWVsZE1hbmFnZXIgY3VzdG9tRmllbGRNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKClcclxuXHJcbiAgICBsb2cuZGVidWcoamlyYVdvcmtmbG93LmdldE5hbWUoKSlcclxuXHJcbiAgICBBY3Rpb25EZXNjcmlwdG9yIGFkID0gd29ya2Zsb3dNYW5hZ2VyLmdldEFjdGlvbkRlc2NyaXB0b3IodHJhbnNpZW50VmFycy5pc3N1ZSwgdHJhbnNpZW50VmFycy5hY3Rpb25JZClcclxuXHJcbiAgICBsb2cuZGVidWcoXCJBY3Rpb25EZXNjcmlwdG9yIE5hbWU6ICR7YWQuZ2V0TmFtZSgpfVwiKSAvLyBHZW5lcmEgUmFwcG9ydG8gZGkgSW50ZXJ2ZW50byBGQUFDXHJcbiAgICBsb2cuZGVidWcoXCJBY3Rpb25EZXNjcmlwdG9yIE1ldGFBdHRyczogJHthZC5nZXRNZXRhQXR0cmlidXRlcygpfVwiKSAvLyB7b3BzYmFyLXNlcXVlbmNlPTEwLCBqaXJhLmRlc2NyaXB0aW9uPSwgamlyYS5maWVsZHNjcmVlbi5pZD0xOTkxMH1cclxuXHJcbiAgICBkZWYgYWRNZXRhID0gYWQuZ2V0TWV0YUF0dHJpYnV0ZXMoKVxyXG4gICAgU3RyaW5nIGZpZWxkU2NyZWVuSWQgPSBhZE1ldGEuZ2V0KFwiamlyYS5maWVsZHNjcmVlbi5pZFwiKTtcclxuICAgIGxvZy5kZWJ1ZyhcIkZpZWxkIHNjcmVlbiBpZDogJHtmaWVsZFNjcmVlbklkfVwiKVxyXG5cclxuICAgIE1hcDxTdHJpbmcsIE9iamVjdD4gY3VzdG9tRmllbGRNYXAgPSBuZXcgSGFzaE1hcDw+KClcclxuICAgIGlmIChmaWVsZFNjcmVlbklkKSB7XHJcbiAgICAgICAgRmllbGRTY3JlZW5NYW5hZ2VyIGZpZWxkU2NyZWVuTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldENvbXBvbmVudChGaWVsZFNjcmVlbk1hbmFnZXIuY2xhc3MpO1xyXG4gICAgICAgIEZpZWxkU2NyZWVuIGZpZWxkU2NyZWVuID0gZmllbGRTY3JlZW5NYW5hZ2VyLmdldEZpZWxkU2NyZWVuKExvbmcudmFsdWVPZihmaWVsZFNjcmVlbklkLnRvU3RyaW5nKCkpKTtcclxuICAgICAgICBMaXN0PEZpZWxkU2NyZWVuVGFiPiBmc3RzID0gZmllbGRTY3JlZW4uZ2V0VGFicygpO1xyXG4gICAgICAgIGZvciAoRmllbGRTY3JlZW5UYWIgZnN0OiBmc3RzKSB7XHJcbiAgICAgICAgICAgIExpc3Q8RmllbGRTY3JlZW5MYXlvdXRJdGVtPiBxd2UgPSBmc3QuZ2V0RmllbGRTY3JlZW5MYXlvdXRJdGVtcygpO1xyXG4gICAgICAgICAgICBmb3IgKEZpZWxkU2NyZWVuTGF5b3V0SXRlbSBmc2xpOiBxd2UpIHtcclxuICAgICAgICAgICAgICAgIGlmIChmc2xpLmdldEZpZWxkSWQoKSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBDdXN0b21GaWVsZCBjdXN0b21GaWVsZCA9IGN1c3RvbUZpZWxkTWFuYWdlci5nZXRDdXN0b21GaWVsZE9iamVjdChmc2xpLmdldEZpZWxkSWQoKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VzdG9tRmllbGQgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZGVmIGN1c3RvbUZpZWxkVmFsdWUgPSBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGN1c3RvbUZpZWxkKTtcclxuICAgICAgICAgICAgICAgIGN1c3RvbUZpZWxkTWFwLnB1dChmc2xpLmdldEZpZWxkSWQoKSwgY3VzdG9tRmllbGRWYWx1ZSA9PSBudWxsID8gbnVsbCA6IGN1c3RvbUZpZWxkVmFsdWUudG9TdHJpbmcoKSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGxvZy5kZWJ1ZyhcImN1c3RvbUZpZWxkTWFwOiAke2N1c3RvbUZpZWxkTWFwfVwiKVxyXG5cclxuICAgIGRlZiBib2R5UmVxID0gW1xyXG4gICAgICAgIFwiaXNzdWVUeXBlSWRcIjogaXNzdWUuaXNzdWVUeXBlSWQsXHJcbiAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXksXHJcbiAgICAgICAgXCJhY3Rpb25OYW1lXCI6IGFkLmdldE5hbWUoKSxcclxuICAgICAgICBcImppcmFXb3JrZmxvd05hbWVcIjogamlyYVdvcmtmbG93LmdldE5hbWUoKSxcclxuICAgICAgICBcImN1c3RvbUZpZWxkTWFwXCI6IGN1c3RvbUZpZWxkTWFwLFxyXG4gICAgICAgIFwicHJvcGVydGllc1wiOiBwcm9wZXJ0aWVzXHJcbiAgICBdXHJcblxyXG4gICAgbG9nLmRlYnVnKFwiQ2FsbGluZyBbJHtyZXF1ZXN0TWV0aG9kfV0gJHtiYXNlVVJMfSB3aXRoIGJvZHkgJHtib2R5UmVxfVwiKVxyXG5cclxuICAgIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcclxuICAgIEh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pIHVybC5vcGVuQ29ubmVjdGlvbigpXHJcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZClcclxuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpXHJcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKVxyXG4gICAgY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKVxyXG4gICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpXHJcbiAgICBjb25uZWN0aW9uLm91dHB1dFN0cmVhbS53aXRoV3JpdGVyKFwiVVRGLThcIikge1xyXG4gICAgICAgIG5ldyBTdHJlYW1pbmdKc29uQnVpbGRlcihpdCwgYm9keVJlcSlcclxuICAgIH1cclxuXHJcbiAgICBjb25uZWN0aW9uLmNvbm5lY3QoKVxyXG4gICAgZGVmIHJlc3BvbnNlQ29kZSA9IGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKVxyXG5cclxuICAgIGxvZy5kZWJ1ZyhcIlJlc3BvbnNlIEh0dHBTdGF0dXNDb2RlOiAke3Jlc3BvbnNlQ29kZX1cIilcclxuXHJcbiAgICAvLyBJZiBiYWNrZW5kIHJlcGxpZXMgd2l0aCAyMDAgdGhlbiB0aGUgY29uZGl0aW9uIGlzIHBhc3NlZFxyXG4gICAgaWYgKFwiMjAwXCIuZXF1YWxzKHJlc3BvbnNlQ29kZSkpIHtcclxuICAgICAgICBsb2cuZGVidWcoXCJWYWxpZGF0b3IgcGFzc2VkIVwiKVxyXG4gICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgcmVzcG9uc2VCb2R5ID0gKChIdHRwVVJMQ29ubmVjdGlvbikgY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dFxyXG4gICAgICAgIGxvZy5kZWJ1ZyhcIlZhbGlkYXRvciBub3QgcGFzc2VkLCByZXNwb25zZUJvZHk6ICR7cmVzcG9uc2VCb2R5fVwiKVxyXG5cclxuICAgICAgICAvLyB0ZXN0aW5nIHdpdGhvdXQgcmVkZXBsb3lpbmcgZWFjaCB0aW1lXHJcbiAgICAgICAgLy9yZXNwb25zZUJvZHkgPSAne1wiV1wiOiBcIltbW1csIENPTkZJUk1fUklTS19BTkFMWVNJUywgbnVsbF1dXVwifSdcclxuXHJcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbihyZXNwb25zZUJvZHkpXHJcbiAgICB9XHJcbn0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XHJcbiAgICAvL1RoaXMgaXMgYW4gZXhjZXB0aW9uIGluIHRoZSBzY3JpcHRcclxuICAgIGxvZy5kZWJ1ZyhcIkV4Y2VwdGlvbiByYWlzZWQgY2FsbGluZyBlbmRwb2ludCAke2Jhc2VVUkx9XCIpXHJcbiAgICBsb2cuZXJyb3IoZSlcclxuICAgIGlmIChlIGluc3RhbmNlb2YgSW52YWxpZElucHV0RXhjZXB0aW9uKSB7XHJcbiAgICAgICAgdGhyb3cgZVxyXG4gICAgfVxyXG4gICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOiBcIltbWyBWYWxpZGF0b3IgZmFpbGVkIF1dXVwiIH0nKVxyXG59Iiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="Not Done" status="Done" step="7">
          <post-functions>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">e6bbfb07-a70c-482d-b861-b5ad194fda33</arg>
              <arg name="FIELD_NOTES">YCFgQ3JlYXRlIG9iaiAiQ2hlY2tsaXN0IiAtIE5PVCBmb3IgQVNTSVNUQU5UIHRpY2tldHM=</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">83147c97-077d-4f1d-a5e0-b46805373d48</arg>
              <arg name="FIELD_ACTION">141 Eseguita con cartaceo</arg>
              <arg name="FIELD_NOTES">YCFgQXV0b21hdGljYWxseSBSZWplY3QgdGt0cyBiYXNlZCBvbiBEeW5hbWljIFJpc2tzIEFzc2Vzc21lbnQgcmVzdWx0</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.FasttrackTransition</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.FasttrackTransition</arg>
              <arg name="disabled">true</arg>
              <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlXHJcbmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvblxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvclxyXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxyXG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvbkJ1aWxkZXJcclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVNYW5hZ2VyXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTW9kaWZpZWRWYWx1ZVxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnV0aWwuRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyXHJcbmltcG9ydCBqYXZhLnRleHQuU2ltcGxlRGF0ZUZvcm1hdDtcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5pbmRleC5Jc3N1ZUluZGV4aW5nU2VydmljZVxyXG5cclxuUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKVxyXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxyXG5wcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0ge1xyXG4gICAgcHJvcGVydGllcy5sb2FkKGl0KVxyXG59XHJcbmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKVxyXG5cclxuLy9Jc3N1ZU1hbmFnZXIgaXNzdWVNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKClcclxuLy9Jc3N1ZSBpc3N1ZSA9IGlzc3VlTWFuYWdlci5nZXRJc3N1ZUJ5S2V5SWdub3JlQ2FzZShcIkFBUy00MTc1NVwiKVxyXG5cclxubG9nLmRlYnVnIFwiVHJhbnNhemlvbmUgQ09ORklSTSBBU1NFVCAtIElzc3VlOiBcIiArIGlzc3VlXHJcblxyXG5kZWYgZXJyb3JzID0gZmFsc2VcclxuZGVmIHdhcm5pbmdzID0gZmFsc2VcclxuXHJcbmRlZiB0cmFuc2l0aW9uQ2hlY2sgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLmNoZWNrQW5kQ29uZmlybSddLnRvU3RyaW5nKCkpWzBdXHJcbmRlZiBkeW5hbWljUmlza3NBc3MgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfQVNTRVRfUklTS1NfQVNTRVNTTUVOVFwiKVswXVxyXG5cclxuZGVmIGVycm9yTWFuZGF0b3J5RmllbGRzID0gbmV3IEFycmF5TGlzdCgpXHJcbmRlZiBlcnJvclJlamVjdGVkVGt0ID0gZmFsc2VcclxuXHJcbmlmKGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoZHluYW1pY1Jpc2tzQXNzKSE9bnVsbCAmJiAoU3RyaW5nKWlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoZHluYW1pY1Jpc2tzQXNzKSAhPSBcIlwiICYmICFpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGR5bmFtaWNSaXNrc0FzcykudG9TdHJpbmcoKS5lcXVhbHMoXCJcIikpe1xyXG4gICAgLypDaWNsYXJlIHR1dHRpIGdsaSBvZ2dldHRpIGFzc29jaWF0aSBhbCBjYW1wbyovXHJcbiAgICAvL2luc2lnaHQgY2xhc3NlcyAmIGNvbXBvbmVudHNcclxuICAgIENsYXNzIG9iamVjdEZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdEZhY2FkZVwiKTsgIFxyXG4gICAgQ2xhc3Mgb2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVcIik7XHJcbiAgICBkZWYgb2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShvYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlQ2xhc3MpO1xyXG4gICAgZGVmIG9iamVjdEZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShvYmplY3RGYWNhZGVDbGFzcyk7XHJcblxyXG4gICAgZGVmIHJpc2tzQXNzZXNzbWVudCA9IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoZHluYW1pY1Jpc2tzQXNzKVxyXG4gICAgZGVmIGRyYTUsIGRyYTZcclxuXHJcbiAgICBmb3IoaSBpbiByaXNrc0Fzc2Vzc21lbnQpe1xyXG4gICAgICAgIC8vZXh0cmFjdCBpbnNpZ2h0IGtleSBhbmcgZ2V0IG9iamVjdFxyXG4gICAgICAgIGRlZiByaXNrPWkudG9TdHJpbmcoKVxyXG4gICAgICAgIGRlZiByaXNrS2V5ID0gcmlzay5zdWJzdHJpbmcocmlzay5sYXN0SW5kZXhPZignKCcpKzEscmlzay5sYXN0SW5kZXhPZignKScpKVxyXG4gICAgICAgIGRlZiByaXNrT2JqZWN0ID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RCZWFuKHJpc2tLZXkpXHJcblxyXG4gICAgICAgIGRlZiBvYlRyaWFnZVxyXG4gICAgICAgIFxyXG5cclxuICAgICAgICBpZihvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4ocmlza09iamVjdC5nZXRJZCgpLCBcIkRSQTVcIikhPW51bGwpe1xyXG4gICAgICAgICAgICBvYlRyaWFnZSA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbihyaXNrT2JqZWN0LmdldElkKCksIFwiRFJBNVwiKS5jcmVhdGVNdXRhYmxlKClcclxuICAgICAgICAgICAgZHJhNSA9IG9iVHJpYWdlLmdldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnMoKVswXS52YWx1ZS50b1N0cmluZygpXHJcbiAgICAgICAgICAgIGlmKGRyYTUuZXF1YWxzKFwiTk9cIikpe1xyXG4gICAgICAgICAgICAgICAgZXJyb3JSZWplY3RlZFRrdD10cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbihyaXNrT2JqZWN0LmdldElkKCksIFwiRFJBNlwiKSE9bnVsbCl7XHJcbiAgICAgICAgICAgIG9iVHJpYWdlID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKHJpc2tPYmplY3QuZ2V0SWQoKSwgXCJEUkE2XCIpLmNyZWF0ZU11dGFibGUoKVxyXG4gICAgICAgICAgICBkcmE2ID0gb2JUcmlhZ2UuZ2V0T2JqZWN0QXR0cmlidXRlVmFsdWVCZWFucygpWzBdLnZhbHVlLnRvU3RyaW5nKClcclxuICAgICAgICAgICAgaWYoZHJhNi5lcXVhbHMoXCJOT1wiKSl7XHJcbiAgICAgICAgICAgICAgICBlcnJvclJlamVjdGVkVGt0PXRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZXJyb3JSZWplY3RlZFRrdFxyXG59ZWxzZXtcclxuICAgIHJldHVybiBmYWxzZVxyXG59XHJcbiIsInNjcmlwdFBhdGgiOm51bGx9</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_TRANSITION_OPTIONS"></arg>
              <arg name="events"></arg>
              <arg name="FIELD_ADDITIONAL_SCRIPT"></arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
    <action id="201" name="Start Maintenance">
      <meta name="jira.description"></meta>
      <meta name="jira.fieldscreen.id"></meta>
      <restrict-to>
        <conditions>
          <condition type="class">
            <arg name="FIELD_FUNCTION_ID">a0e36b7d-84dd-4008-9e6c-fb58e808a064</arg>
            <arg name="FIELD_NOTES">YCFgRW5hYmxlZCBvbmx5IGlmIHBhcmVudCB0YXNrIGlzICJJbiBQcm9ncmVzcyIgQU5EIE9QX1RLVF9BU1NJR05FRF9UTyA9IEFTU0lTVEFOVCBBTkQgTk8gUmlza3MgQXNzZXNzbWVudCByZXF1aXJlZCAtLSBPUiBpZiBjdXJyZW50IHN0YXR1cyBpcyBSaXNrcyBBc3Nlc3NtZW50IEFORCBPUF9US1RfQVNTSUdORURfVE8gPSBBU1NJU1RBTlQgLS0gLypPUiBpZiBwYXJlbnQgdGFzayBpcyAiSW4gUHJvZ3Jlc3MiIEFORCBOTyBSaXNrcyBBc3Nlc3NtZW50IHJlcXVpcmVkKi8=</arg>
            <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
            <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlXHJcbmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvblxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvclxyXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxyXG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvbkJ1aWxkZXJcclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVNYW5hZ2VyXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTW9kaWZpZWRWYWx1ZVxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnV0aWwuRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyXHJcbmltcG9ydCBqYXZhLnRleHQuU2ltcGxlRGF0ZUZvcm1hdDtcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5pbmRleC5Jc3N1ZUluZGV4aW5nU2VydmljZVxyXG5cclxuZGVmIGFzc2lnbmVkVG8gPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfVEtUX0FTU0lHTkVEX1RPXCIpWzBdXHJcbmRlZiBwbU9wZXJhdGlvbnMgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfUE1fT1BFUkFUSU9OU19PRFNcIilbMF1cclxuZGVmIHJpc2tzQXNzZXNzbWVudCA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShcIk9QX0FTU0VUX1JJU0tTX0FTU0VTU01FTlRcIilbMF1cclxuLy9sb2cuZGVidWcgXCJpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGFzc2lnbmVkVG8pOiBcIiArIGlzc3VlLmdldFBhcmVudE9iamVjdCgpLmdldEN1c3RvbUZpZWxkVmFsdWUoYXNzaWduZWRUbylcclxuXHJcbi8vbG9nLmRlYnVnICgoaXNzdWUucGFyZW50T2JqZWN0Py5zdGF0dXM/Lm5hbWUudG9TdHJpbmcoKS5lcXVhbHMoXCJGaW5hbGl6aW5nIFdvcmtcIikgfHwgaXNzdWUucGFyZW50T2JqZWN0Py5zdGF0dXM/Lm5hbWUudG9TdHJpbmcoKS5lcXVhbHMoXCJJbiBQcm9ncmVzc1wiKSkgJiYgaXNzdWUuZ2V0UGFyZW50T2JqZWN0KCkuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhc3NpZ25lZFRvKSAhPSBudWxsICYmIGlzc3VlLmdldFBhcmVudE9iamVjdCgpLmdldEN1c3RvbUZpZWxkVmFsdWUoYXNzaWduZWRUbykudG9TdHJpbmcoKS5lcXVhbHMoXCJBU1NJU1RBTlRcIikpXHJcblxyXG4oaXNzdWUuc3RhdHVzLm5hbWUgPT0gXCJSaXNrcyBBc3Nlc3NtZW50XCIgJiYgaXNzdWUuZ2V0UGFyZW50T2JqZWN0KCkuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhc3NpZ25lZFRvKSAhPSBudWxsICYmIGlzc3VlLmdldFBhcmVudE9iamVjdCgpLmdldEN1c3RvbUZpZWxkVmFsdWUoYXNzaWduZWRUbykudG9TdHJpbmcoKS5lcXVhbHMoXCJBU1NJU1RBTlRcIikpIHx8XHJcbi8qKChpc3N1ZS5wYXJlbnRPYmplY3Q/LnN0YXR1cz8ubmFtZS50b1N0cmluZygpLmVxdWFscyhcIkZpbmFsaXppbmcgV29ya1wiKSB8fCBpc3N1ZS5wYXJlbnRPYmplY3Q/LnN0YXR1cz8ubmFtZS50b1N0cmluZygpLmVxdWFscyhcIkluIFByb2dyZXNzXCIpKSAmJiBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHJpc2tzQXNzZXNzbWVudCkgPT0gbnVsbCkgfHwgKi9cclxuKChpc3N1ZS5wYXJlbnRPYmplY3Q/LnN0YXR1cz8ubmFtZS50b1N0cmluZygpLmVxdWFscyhcIkZpbmFsaXppbmcgV29ya1wiKSB8fCBpc3N1ZS5wYXJlbnRPYmplY3Q/LnN0YXR1cz8ubmFtZS50b1N0cmluZygpLmVxdWFscyhcIkluIFByb2dyZXNzXCIpKSAmJiBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHJpc2tzQXNzZXNzbWVudCkgPT0gbnVsbCAmJiBpc3N1ZS5nZXRQYXJlbnRPYmplY3QoKS5nZXRDdXN0b21GaWVsZFZhbHVlKGFzc2lnbmVkVG8pICE9IG51bGwgJiYgaXNzdWUuZ2V0UGFyZW50T2JqZWN0KCkuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhc3NpZ25lZFRvKS50b1N0cmluZygpLmVxdWFscyhcIkFTU0lTVEFOVFwiKSkiLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
            <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
            <arg name="FIELD_PREVIEW_ISSUE">AAS-153459</arg>
          </condition>
        </conditions>
      </restrict-to>
      <validators>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">1e7898cd-ceab-4ba0-955d-6b0604bf8c9b</arg>
          <arg name="FIELD_NOTES">YCFgQ2hlY2sgUE0gb3BlcmF0aW9ucyBvbiBQTSB0YXNrICYmIFJlcXVpcmVkIGZpZWxkcyBpZiBSSVNLU19BU1NFU1NNRU5UIE5PVCBOVUxM</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="disabled">true</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">e8c6556e-6560-4bee-8b97-fc1f556f1d4a</arg>
          <arg name="FIELD_NOTES">YCFgU0FQOiB1cGRhdGUgU04gc3RhdHVz</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XHJcbmltcG9ydCBncm9vdnkuanNvbi5TdHJlYW1pbmdKc29uQnVpbGRlcjtcclxuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyO1xyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDtcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlO1xyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxyXG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XHJcbmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5XHJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyXHJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxyXG5cclxuUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKVxyXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxyXG5wcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0ge1xyXG5cdHByb3BlcnRpZXMubG9hZChpdClcclxufVxyXG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5saW5rLklzc3VlTGlua1xyXG5cclxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpO1xyXG5DdXN0b21GaWVsZE1hbmFnZXIgY3VzdG9tRmllbGRNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCk7XHJcbmRlZiByZXF1ZXN0TWV0aG9kXHJcbmRlZiBiYXNlVVJMXHJcblxyXG5VUkwgdXJsXHJcbkh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb25cclxuXHJcbnJlcXVlc3RNZXRob2QgPSBcIlBPU1RcIjtcclxuXHJcbmRlZiBib2R5X3JlcSA9IFtdXHJcbmJvZHlfcmVxID0gW1xyXG4gICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXksXHJcbiAgICBcInN0YXR1c1wiOiBcIklOUFwiXHJcbl0gXHJcblxyXG4gICAgXHJcbmJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9qaXJhL0FBL2FmdGVyL3NhbGVzL2NyZWF0ZS9zZXJ2aWNlL25vdGlmaWNhdGlvblwiXHJcblxyXG5sb2cuZGVidWcgXCJiYXNlVVJMIFNOOiBcIiArIGJhc2VVUkxcclxubG9nLmRlYnVnIFwiYm9keV9yZXEgU046IFwiICsgYm9keV9yZXFcclxudXJsID0gbmV3IFVSTChiYXNlVVJMKVxyXG5jb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xyXG5jb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XHJcbmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xyXG5jb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcclxuY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcclxuY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xyXG5jb25uZWN0aW9uLm91dHB1dFN0cmVhbVxyXG5jb25uZWN0aW9uLm91dHB1dFN0cmVhbS53aXRoV3JpdGVyKFwiVVRGLThcIikgeyBuZXcgU3RyZWFtaW5nSnNvbkJ1aWxkZXIoaXQsIGJvZHlfcmVxKSB9XHJcbmxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxyXG5jb25uZWN0aW9uLmNvbm5lY3QoKTtcclxuXHJcbmRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcclxuZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpXHJcbmRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKVxyXG5kZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXHJcblxyXG5pZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDBcIikgJiYgIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDFcIikpe1xyXG4gICAgbG9nLmRlYnVnIFwidXJsOiBcIiArIHVybFxyXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxyXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxyXG4gICAgZUxpc3RFcnJvcnMuYWRkKFwiRVwiKVxyXG4gICAgZUxpc3RFcnJvcnMuYWRkKFwiU05fVVBEQVRFXCIpXHJcbiAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyBcIiBcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkpXHJcbiAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKVxyXG4gICAgZUxpc3QuYWRkKGVMaXN0RXJyb3JzKVxyXG5cclxuICAgIG91dHB1dC5hZGQoZUxpc3QpXHJcbiAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcclxufWVsc2V7XHJcbiAgICAvKiogU0VSVklDRSBPUkRFUiBDUkVBVElPTiAqKi9cclxuICAgIGJvZHlfcmVxID0gW1xyXG4gICAgICAgIFwiaXNzdWVLZXlcIjogaXNzdWUua2V5XHJcbiAgICBdIFxyXG4gICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvYWZ0ZXIvc2FsZXMvY3JlYXRlL29yL3VwZGF0ZS9zZXJ2aWNlL29yZGVyXCJcclxuXHJcbiAgICBsb2cuZGVidWcgXCJiYXNlVVJMIFNPOiBcIiArIGJhc2VVUkxcclxuICAgIGxvZy5kZWJ1ZyBcImJvZHlfcmVxIFNPOiBcIiArIGJvZHlfcmVxXHJcbiAgICB1cmwgPSBuZXcgVVJMKGJhc2VVUkwpXHJcbiAgICBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xyXG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xyXG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLThcIik7XHJcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcclxuICAgIGNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7XHJcbiAgICBjb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7XHJcbiAgICBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxyXG4gICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxyXG4gICAgbG9nLmRlYnVnIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXHJcbiAgICBjb25uZWN0aW9uLmNvbm5lY3QoKTtcclxuXHJcbiAgICBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcclxuICAgIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpXHJcbiAgICBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKVxyXG4gICAgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXHJcblxyXG4gICAgaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAxXCIpICYmICFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAwXCIpKXtcclxuICAgICAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXHJcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxyXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcclxuICAgICAgICBcclxuICAgICAgICBkZWYgb3V0cHV0TXNnID0gKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0XHJcbiAgICAgICAgbG9nLmRlYnVnIFwiKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0OiBcIiArIG91dHB1dE1zZ1xyXG4gICAgICAgIFxyXG4gICAgICAgIGRlZiBqc29uU2x1cnBlciA9IG5ldyBKc29uU2x1cnBlcigpXHJcbiAgICAgICAgZGVmIGpzb25fb2JqZWN0ID0ganNvblNsdXJwZXIucGFyc2VUZXh0KG91dHB1dE1zZylcclxuICAgICAgICBhc3NlcnQganNvbl9vYmplY3QgaW5zdGFuY2VvZiBNYXAgIFxyXG4gICAgICAgIGxvZy5kZWJ1ZyBcIm1lc3NhZ2U6IFwiICsgIGpzb25fb2JqZWN0Lm1lc3NhZ2VcclxuICAgICAgICBsb2cuZGVidWcgXCJlcnJvcnM6IFwiICsgIGpzb25fb2JqZWN0LmVycm9ycy50b1N0cmluZygpXHJcblxyXG4gICAgICAgIGVMaXN0RXJyb3JzLmFkZChcIkVcIilcclxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJTT19DUkVBVEVcIilcclxuICAgICAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyBcIiBcIiArIGpzb25fb2JqZWN0LmVycm9yc1swXSlcclxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKVxyXG4gICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycylcclxuXHJcbiAgICAgICAgb3V0cHV0LmFkZChlTGlzdClcclxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcclxuICAgIH1cclxufSIsInNjcmlwdFBhdGgiOm51bGx9</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="disabled">true</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
        <validator name="" type="class">
          <arg name="FIELD_FUNCTION_ID">07a8cfa1-a0bb-40df-90b6-40fdefc1ac46</arg>
          <arg name="FIELD_NOTES">YCFgT3BlcmF0aW9uUG9ydGFsIC0gQ2FsbCB0byBCRSB2YWxpZGF0b3I=</arg>
          <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGRcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5DdXN0b21GaWVsZE1hbmFnZXJcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS53b3JrZmxvdy5KaXJhV29ya2Zsb3dcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuc2NyZWVuLkZpZWxkU2NyZWVuTGF5b3V0SXRlbVxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5zY3JlZW4uRmllbGRTY3JlZW5UYWJcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuRmllbGRNYW5hZ2VyXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLnNjcmVlbi5GaWVsZFNjcmVlblxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5zY3JlZW4uRmllbGRTY3JlZW5NYW5hZ2VyXHJcbmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LmxvYWRlci5BY3Rpb25EZXNjcmlwdG9yXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEud29ya2Zsb3cuV29ya2Zsb3dNYW5hZ2VyXHJcbmltcG9ydCBncm9vdnkuanNvbi5TdHJlYW1pbmdKc29uQnVpbGRlclxyXG5pbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lclxyXG5pbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGxcclxuXHJcbmRlZiBiYXNlVVJMXHJcbmRlZiByZXNwb25zZUJvZHlcclxuXHJcbnRyeSB7XHJcbiAgICBQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXHJcbiAgICBGaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxyXG4gICAgcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcclxuICAgICAgICBwcm9wZXJ0aWVzLmxvYWQoaXQpXHJcbiAgICB9XHJcblxyXG4gICAgZGVmIHNlcnZlckJhc2UgPSBTdHJpbmcuZm9ybWF0KFwiaHR0cDovLyVzL29wXCIsIHByb3BlcnRpZXNbJ2FwaS5lbnYnXSlcclxuICAgIGRlZiB0cmFuc2FjdGlvbkFjdGlvbiA9IFwidmFsaWRhdG9yc1wiXHJcblxyXG4gICAgVVJMIHVybFxyXG4gICAgZGVmIHJlcXVlc3RNZXRob2QgPSBcIlBPU1RcIlxyXG5cclxuICAgIGJhc2VVUkwgPSBTdHJpbmcuZm9ybWF0KFwiJXMvcmVzdC9qaXJhL3dvcmtmbG93cy8lcy8lc1wiLCBzZXJ2ZXJCYXNlLCB0cmFuc2llbnRWYXJzLmFjdGlvbklkLCB0cmFuc2FjdGlvbkFjdGlvbilcclxuXHJcbiAgICBsb2cuZGVidWcoXCJDb21wb3NpbmcgYmFzZVVSTCBhcyAnJHtiYXNlVVJMfSdcIilcclxuXHJcbiAgICBXb3JrZmxvd01hbmFnZXIgd29ya2Zsb3dNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0V29ya2Zsb3dNYW5hZ2VyKClcclxuICAgIEppcmFXb3JrZmxvdyBqaXJhV29ya2Zsb3cgPSB3b3JrZmxvd01hbmFnZXIuZ2V0V29ya2Zsb3codHJhbnNpZW50VmFycy5pc3N1ZSlcclxuXHJcbiAgICBDdXN0b21GaWVsZE1hbmFnZXIgY3VzdG9tRmllbGRNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKClcclxuXHJcbiAgICBsb2cuZGVidWcoamlyYVdvcmtmbG93LmdldE5hbWUoKSlcclxuXHJcbiAgICBBY3Rpb25EZXNjcmlwdG9yIGFkID0gd29ya2Zsb3dNYW5hZ2VyLmdldEFjdGlvbkRlc2NyaXB0b3IodHJhbnNpZW50VmFycy5pc3N1ZSwgdHJhbnNpZW50VmFycy5hY3Rpb25JZClcclxuXHJcbiAgICBsb2cuZGVidWcoXCJBY3Rpb25EZXNjcmlwdG9yIE5hbWU6ICR7YWQuZ2V0TmFtZSgpfVwiKSAvLyBHZW5lcmEgUmFwcG9ydG8gZGkgSW50ZXJ2ZW50byBGQUFDXHJcbiAgICBsb2cuZGVidWcoXCJBY3Rpb25EZXNjcmlwdG9yIE1ldGFBdHRyczogJHthZC5nZXRNZXRhQXR0cmlidXRlcygpfVwiKSAvLyB7b3BzYmFyLXNlcXVlbmNlPTEwLCBqaXJhLmRlc2NyaXB0aW9uPSwgamlyYS5maWVsZHNjcmVlbi5pZD0xOTkxMH1cclxuXHJcbiAgICBkZWYgYWRNZXRhID0gYWQuZ2V0TWV0YUF0dHJpYnV0ZXMoKVxyXG4gICAgU3RyaW5nIGZpZWxkU2NyZWVuSWQgPSBhZE1ldGEuZ2V0KFwiamlyYS5maWVsZHNjcmVlbi5pZFwiKTtcclxuICAgIGxvZy5kZWJ1ZyhcIkZpZWxkIHNjcmVlbiBpZDogJHtmaWVsZFNjcmVlbklkfVwiKVxyXG5cclxuICAgIE1hcDxTdHJpbmcsIE9iamVjdD4gY3VzdG9tRmllbGRNYXAgPSBuZXcgSGFzaE1hcDw+KClcclxuICAgIGlmIChmaWVsZFNjcmVlbklkKSB7XHJcbiAgICAgICAgRmllbGRTY3JlZW5NYW5hZ2VyIGZpZWxkU2NyZWVuTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldENvbXBvbmVudChGaWVsZFNjcmVlbk1hbmFnZXIuY2xhc3MpO1xyXG4gICAgICAgIEZpZWxkU2NyZWVuIGZpZWxkU2NyZWVuID0gZmllbGRTY3JlZW5NYW5hZ2VyLmdldEZpZWxkU2NyZWVuKExvbmcudmFsdWVPZihmaWVsZFNjcmVlbklkLnRvU3RyaW5nKCkpKTtcclxuICAgICAgICBMaXN0PEZpZWxkU2NyZWVuVGFiPiBmc3RzID0gZmllbGRTY3JlZW4uZ2V0VGFicygpO1xyXG4gICAgICAgIGZvciAoRmllbGRTY3JlZW5UYWIgZnN0OiBmc3RzKSB7XHJcbiAgICAgICAgICAgIExpc3Q8RmllbGRTY3JlZW5MYXlvdXRJdGVtPiBxd2UgPSBmc3QuZ2V0RmllbGRTY3JlZW5MYXlvdXRJdGVtcygpO1xyXG4gICAgICAgICAgICBmb3IgKEZpZWxkU2NyZWVuTGF5b3V0SXRlbSBmc2xpOiBxd2UpIHtcclxuICAgICAgICAgICAgICAgIGlmIChmc2xpLmdldEZpZWxkSWQoKSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBDdXN0b21GaWVsZCBjdXN0b21GaWVsZCA9IGN1c3RvbUZpZWxkTWFuYWdlci5nZXRDdXN0b21GaWVsZE9iamVjdChmc2xpLmdldEZpZWxkSWQoKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VzdG9tRmllbGQgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZGVmIGN1c3RvbUZpZWxkVmFsdWUgPSBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGN1c3RvbUZpZWxkKTtcclxuICAgICAgICAgICAgICAgIGN1c3RvbUZpZWxkTWFwLnB1dChmc2xpLmdldEZpZWxkSWQoKSwgY3VzdG9tRmllbGRWYWx1ZSA9PSBudWxsID8gbnVsbCA6IGN1c3RvbUZpZWxkVmFsdWUudG9TdHJpbmcoKSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGxvZy5kZWJ1ZyhcImN1c3RvbUZpZWxkTWFwOiAke2N1c3RvbUZpZWxkTWFwfVwiKVxyXG5cclxuICAgIGRlZiBib2R5UmVxID0gW1xyXG4gICAgICAgIFwiaXNzdWVLZXlcIjogaXNzdWUua2V5LFxyXG4gICAgICAgIFwiYWN0aW9uTmFtZVwiOiBhZC5nZXROYW1lKCksXHJcbiAgICAgICAgXCJqaXJhV29ya2Zsb3dOYW1lXCI6IGppcmFXb3JrZmxvdy5nZXROYW1lKCksXHJcbiAgICAgICAgXCJjdXN0b21GaWVsZE1hcFwiOiBjdXN0b21GaWVsZE1hcCxcclxuICAgICAgICBcInByb3BlcnRpZXNcIjogcHJvcGVydGllc1xyXG4gICAgXVxyXG5cclxuICAgIGxvZy5kZWJ1ZyhcIkNhbGxpbmcgWyR7cmVxdWVzdE1ldGhvZH1dICR7YmFzZVVSTH0gd2l0aCBib2R5ICR7Ym9keVJlcX1cIilcclxuXHJcbiAgICB1cmwgPSBuZXcgVVJMKGJhc2VVUkwpXHJcbiAgICBIdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKSB1cmwub3BlbkNvbm5lY3Rpb24oKVxyXG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpXHJcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKVxyXG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJBY2NlcHRcIiwgXCIqLypcIilcclxuICAgIGNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSlcclxuICAgIGNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKVxyXG4gICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHtcclxuICAgICAgICBuZXcgU3RyZWFtaW5nSnNvbkJ1aWxkZXIoaXQsIGJvZHlSZXEpXHJcbiAgICB9XHJcblxyXG4gICAgY29ubmVjdGlvbi5jb25uZWN0KClcclxuICAgIGRlZiByZXNwb25zZUNvZGUgPSBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKClcclxuXHJcbiAgICBsb2cuZGVidWcoXCJSZXNwb25zZSBIdHRwU3RhdHVzQ29kZTogJHtyZXNwb25zZUNvZGV9XCIpXHJcblxyXG4gICAgLy8gSWYgYmFja2VuZCByZXBsaWVzIHdpdGggMjAwIHRoZW4gdGhlIGNvbmRpdGlvbiBpcyBwYXNzZWRcclxuICAgIGlmIChcIjIwMFwiLmVxdWFscyhyZXNwb25zZUNvZGUpKSB7XHJcbiAgICAgICAgbG9nLmRlYnVnKFwiVmFsaWRhdG9yIHBhc3NlZCFcIilcclxuICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgIHJlc3BvbnNlQm9keSA9ICgoSHR0cFVSTENvbm5lY3Rpb24pIGNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHRcclxuICAgICAgICBsb2cuZGVidWcoXCJWYWxpZGF0b3Igbm90IHBhc3NlZCwgcmVzcG9uc2VCb2R5OiAke3Jlc3BvbnNlQm9keX1cIilcclxuXHJcbiAgICAgICAgLy8gdGVzdGluZyB3aXRob3V0IHJlZGVwbG95aW5nIGVhY2ggdGltZVxyXG4gICAgICAgIC8vcmVzcG9uc2VCb2R5ID0gJ3tcIldcIjogXCJbW1tXLCBDT05GSVJNX1JJU0tfQU5BTFlTSVMsIG51bGxdXV1cIn0nXHJcblxyXG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24ocmVzcG9uc2VCb2R5KVxyXG4gICAgfVxyXG59IGNhdGNoIChFeGNlcHRpb24gZSkge1xyXG4gICAgLy9UaGlzIGlzIGFuIGV4Y2VwdGlvbiBpbiB0aGUgc2NyaXB0XHJcbiAgICBsb2cuZGVidWcoXCJFeGNlcHRpb24gcmFpc2VkIGNhbGxpbmcgZW5kcG9pbnQgJHtiYXNlVVJMfVwiKVxyXG4gICAgbG9nLmVycm9yKGUpXHJcbiAgICBpZiAoZSBpbnN0YW5jZW9mIEludmFsaWRJbnB1dEV4Y2VwdGlvbikge1xyXG4gICAgICAgIHRocm93IGVcclxuICAgIH1cclxuICAgIHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oJ3tcIkVcIjogXCJbW1sgVmFsaWRhdG9yIGZhaWxlZCBdXV1cIiB9JylcclxufSIsInNjcmlwdFBhdGgiOm51bGx9</arg>
          <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
          <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
        </validator>
      </validators>
      <results>
        <unconditional-result old-status="Not Done" status="Done" step="4">
          <post-functions>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">214ff8cf-8a1b-49c7-b960-9195e3954c57</arg>
              <arg name="FIELD_NOTES">YCFgQ3JlYXRlIG9iaiAiQ2hlY2tsaXN0IiAtIE5PVCBmb3IgQVNTSVNUQU5UIHRpY2tldHM=</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
            </function>
            <function type="class">
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
            </function>
            <function type="class">
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
            </function>
            <function type="class">
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
            </function>
            <function type="class">
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
            </function>
            <function type="class">
              <arg name="eventTypeId">13</arg>
              <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
              <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
            </function>
            <function type="class">
              <arg name="FIELD_FUNCTION_ID">0beb416e-cd06-497d-8927-d550c9363082</arg>
              <arg name="FIELD_ACTION">141 Eseguita con cartaceo</arg>
              <arg name="FIELD_NOTES">YCFgQXV0b21hdGljYWxseSBSZWplY3QgdGt0cyBiYXNlZCBvbiBEeW5hbWljIFJpc2tzIEFzc2Vzc21lbnQgcmVzdWx0</arg>
              <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.FasttrackTransition</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.FasttrackTransition</arg>
              <arg name="disabled">true</arg>
              <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlXHJcbmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvblxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvclxyXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxyXG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvbkJ1aWxkZXJcclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVNYW5hZ2VyXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTW9kaWZpZWRWYWx1ZVxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnV0aWwuRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyXHJcbmltcG9ydCBqYXZhLnRleHQuU2ltcGxlRGF0ZUZvcm1hdDtcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5pbmRleC5Jc3N1ZUluZGV4aW5nU2VydmljZVxyXG5cclxuUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKVxyXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxyXG5wcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0ge1xyXG4gICAgcHJvcGVydGllcy5sb2FkKGl0KVxyXG59XHJcbmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKVxyXG5cclxuLy9Jc3N1ZU1hbmFnZXIgaXNzdWVNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKClcclxuLy9Jc3N1ZSBpc3N1ZSA9IGlzc3VlTWFuYWdlci5nZXRJc3N1ZUJ5S2V5SWdub3JlQ2FzZShcIkFBUy00MTc1NVwiKVxyXG5cclxubG9nLmRlYnVnIFwiVHJhbnNhemlvbmUgQ09ORklSTSBBU1NFVCAtIElzc3VlOiBcIiArIGlzc3VlXHJcblxyXG5kZWYgZXJyb3JzID0gZmFsc2VcclxuZGVmIHdhcm5pbmdzID0gZmFsc2VcclxuXHJcbmRlZiB0cmFuc2l0aW9uQ2hlY2sgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLmNoZWNrQW5kQ29uZmlybSddLnRvU3RyaW5nKCkpWzBdXHJcbmRlZiBkeW5hbWljUmlza3NBc3MgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfQVNTRVRfUklTS1NfQVNTRVNTTUVOVFwiKVswXVxyXG5cclxuZGVmIGVycm9yTWFuZGF0b3J5RmllbGRzID0gbmV3IEFycmF5TGlzdCgpXHJcbmRlZiBlcnJvclJlamVjdGVkVGt0ID0gZmFsc2VcclxuXHJcbmlmKGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoZHluYW1pY1Jpc2tzQXNzKSE9bnVsbCAmJiAoU3RyaW5nKWlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoZHluYW1pY1Jpc2tzQXNzKSAhPSBcIlwiICYmICFpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKGR5bmFtaWNSaXNrc0FzcykudG9TdHJpbmcoKS5lcXVhbHMoXCJcIikpe1xyXG4gICAgLypDaWNsYXJlIHR1dHRpIGdsaSBvZ2dldHRpIGFzc29jaWF0aSBhbCBjYW1wbyovXHJcbiAgICAvL2luc2lnaHQgY2xhc3NlcyAmIGNvbXBvbmVudHNcclxuICAgIENsYXNzIG9iamVjdEZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdEZhY2FkZVwiKTsgIFxyXG4gICAgQ2xhc3Mgb2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLk9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVcIik7XHJcbiAgICBkZWYgb2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShvYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlQ2xhc3MpO1xyXG4gICAgZGVmIG9iamVjdEZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShvYmplY3RGYWNhZGVDbGFzcyk7XHJcblxyXG4gICAgZGVmIHJpc2tzQXNzZXNzbWVudCA9IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoZHluYW1pY1Jpc2tzQXNzKVxyXG4gICAgZGVmIGRyYTUsIGRyYTZcclxuXHJcbiAgICBmb3IoaSBpbiByaXNrc0Fzc2Vzc21lbnQpe1xyXG4gICAgICAgIC8vZXh0cmFjdCBpbnNpZ2h0IGtleSBhbmcgZ2V0IG9iamVjdFxyXG4gICAgICAgIGRlZiByaXNrPWkudG9TdHJpbmcoKVxyXG4gICAgICAgIGRlZiByaXNrS2V5ID0gcmlzay5zdWJzdHJpbmcocmlzay5sYXN0SW5kZXhPZignKCcpKzEscmlzay5sYXN0SW5kZXhPZignKScpKVxyXG4gICAgICAgIGRlZiByaXNrT2JqZWN0ID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RCZWFuKHJpc2tLZXkpXHJcblxyXG4gICAgICAgIGRlZiBvYlRyaWFnZVxyXG4gICAgICAgIFxyXG5cclxuICAgICAgICBpZihvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4ocmlza09iamVjdC5nZXRJZCgpLCBcIkRSQTVcIikhPW51bGwpe1xyXG4gICAgICAgICAgICBvYlRyaWFnZSA9IG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbihyaXNrT2JqZWN0LmdldElkKCksIFwiRFJBNVwiKS5jcmVhdGVNdXRhYmxlKClcclxuICAgICAgICAgICAgZHJhNSA9IG9iVHJpYWdlLmdldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnMoKVswXS52YWx1ZS50b1N0cmluZygpXHJcbiAgICAgICAgICAgIGlmKGRyYTUuZXF1YWxzKFwiTk9cIikpe1xyXG4gICAgICAgICAgICAgICAgZXJyb3JSZWplY3RlZFRrdD10cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbihyaXNrT2JqZWN0LmdldElkKCksIFwiRFJBNlwiKSE9bnVsbCl7XHJcbiAgICAgICAgICAgIG9iVHJpYWdlID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKHJpc2tPYmplY3QuZ2V0SWQoKSwgXCJEUkE2XCIpLmNyZWF0ZU11dGFibGUoKVxyXG4gICAgICAgICAgICBkcmE2ID0gb2JUcmlhZ2UuZ2V0T2JqZWN0QXR0cmlidXRlVmFsdWVCZWFucygpWzBdLnZhbHVlLnRvU3RyaW5nKClcclxuICAgICAgICAgICAgaWYoZHJhNi5lcXVhbHMoXCJOT1wiKSl7XHJcbiAgICAgICAgICAgICAgICBlcnJvclJlamVjdGVkVGt0PXRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZXJyb3JSZWplY3RlZFRrdFxyXG59ZWxzZXtcclxuICAgIHJldHVybiBmYWxzZVxyXG59XHJcbiIsInNjcmlwdFBhdGgiOm51bGx9</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
              <arg name="FIELD_TRANSITION_OPTIONS"></arg>
              <arg name="events"></arg>
              <arg name="FIELD_ADDITIONAL_SCRIPT"></arg>
            </function>
          </post-functions>
        </unconditional-result>
      </results>
    </action>
  </common-actions>
  <steps>
    <step id="3" name="Confirmed and Planned">
      <meta name="jira.status.id">14329</meta>
      <actions>
<common-action id="41" />
<common-action id="201" />
        <action id="111" name="Genera Operazioni di Manutenzione ODS">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">56d285d0-3b7f-4146-a3ed-b1319013939d</arg>
                <arg name="FIELD_NOTES">YCFgUE0gVGFzayBzZW56YSBQTSBvcGVyYXRpb25zIE5PTiBBU1NJU1RBTlQgKGkgdGt0IGFzc2lzdGFudCBOT04gZGV2b25vIHJpcGV0ZXJlIGxlIFBNIE9wZXJhdGlvbnMp</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="disabled">false</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlXHJcbmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvblxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvclxyXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxyXG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvbkJ1aWxkZXJcclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVNYW5hZ2VyXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTW9kaWZpZWRWYWx1ZVxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnV0aWwuRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyXHJcbmltcG9ydCBqYXZhLnRleHQuU2ltcGxlRGF0ZUZvcm1hdDtcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5pbmRleC5Jc3N1ZUluZGV4aW5nU2VydmljZVxyXG5cclxuZGVmIGFzc2lnbmVkVG8gPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfVEtUX0FTU0lHTkVEX1RPXCIpWzBdXHJcbmRlZiBwbU9wZXJhdGlvbnMgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfUE1fT1BFUkFUSU9OU19PRFNcIilbMF1cclxubG9nLmRlYnVnIFwiaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhc3NpZ25lZFRvKTogXCIgKyBpc3N1ZS5nZXRQYXJlbnRPYmplY3QoKS5nZXRDdXN0b21GaWVsZFZhbHVlKGFzc2lnbmVkVG8pXHJcblxyXG5pc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHBtT3BlcmF0aW9ucykgPT0gbnVsbCAmJiAoaXNzdWUuZ2V0UGFyZW50T2JqZWN0KCkuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhc3NpZ25lZFRvKSA9PSBudWxsIHx8ICFpc3N1ZS5nZXRQYXJlbnRPYmplY3QoKS5nZXRDdXN0b21GaWVsZFZhbHVlKGFzc2lnbmVkVG8pLnRvU3RyaW5nKCkuZXF1YWxzKFwiQVNTSVNUQU5UXCIpKSIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">36237cda-1b88-49eb-8e62-354285079ef6</arg>
              <arg name="FIELD_NOTES">YCFgUE0gVGFzazogZ2VuZXJhIG9wZXJhemlvbmkgZGkgbWFudXRlbnppb25l</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5pbmRleC5Jc3N1ZUluZGV4aW5nU2VydmljZVxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxuXG5kZWYgcG1PcGVyYXRpb25zID0gaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUoXCJPUF9QTV9PUEVSQVRJT05TX09EU1wiKVswXSlcbmlmKHBtT3BlcmF0aW9ucyA9PSBudWxsKXtcblxuICAgIC8qIFJFU1QgQVBJIHBlciBwdWxpemlhIGNhY2hlIGlzc3VlIGxpbmthdGEgKi9cbiAgICByZXF1ZXN0TWV0aG9kID0gXCJQVVRcIjtcbiAgICAvKlNjcmlwdCBWYXJpYWJsZXMqL1xuICAgIC8vUGVyIHRlc3QgZGEgY29uc29sZVxuICAgIC8vSXNzdWUgaXNzdWUgPSBpc3N1ZU1hbmFnZXIuZ2V0SXNzdWVCeUtleUlnbm9yZUNhc2UoXCJBQVMtMzI1MzVcIilcbiAgICBiYXNlVVJMID0gXCJodHRwOi8vXCIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArIFwiL29wL3Jlc3QvamlyYS9BQS9wbS1zdWJ0YXNrL1wiICsgaXNzdWUua2V5ICsgXCIvb3BlcmF0aW9uc1wiXG4gICAgVVJMIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcbiAgICBIdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdE1ldGhvZChyZXF1ZXN0TWV0aG9kKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbiAgICBjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpO1xuICAgIGNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbiAgICBjb25uZWN0aW9uLmNvbm5lY3QoKTtcbiAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcblxuICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMFwiKSl7XG4gICAgICAgIGxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbiAgICAgICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG4gICAgfVxuICAgIElzc3VlSW5kZXhpbmdTZXJ2aWNlIFx0aXNzdWVJbmRleGluZ1NlcnZpY2UgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDb21wb25lbnQoSXNzdWVJbmRleGluZ1NlcnZpY2UpXG4gICAgaXNzdWVJbmRleGluZ1NlcnZpY2UucmVJbmRleChpc3N1ZSlcbn0iLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">6c1c89cf-5218-4613-a288-008b311ebe3c</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXJcclxuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEud29ya2Zsb3cuSmlyYVdvcmtmbG93XHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLnNjcmVlbi5GaWVsZFNjcmVlbkxheW91dEl0ZW1cclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuc2NyZWVuLkZpZWxkU2NyZWVuVGFiXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkZpZWxkTWFuYWdlclxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5zY3JlZW4uRmllbGRTY3JlZW5cclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuc2NyZWVuLkZpZWxkU2NyZWVuTWFuYWdlclxyXG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5sb2FkZXIuQWN0aW9uRGVzY3JpcHRvclxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvclxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLndvcmtmbG93LldvcmtmbG93TWFuYWdlclxyXG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XHJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyO1xyXG5pbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGw7XHJcblxyXG5kZWYgcmVxdWVzdE1ldGhvZFxyXG5kZWYgYmFzZVVSTFxyXG5kZWYgcmVzcG9uc2VDb2RlXHJcbmRlZiByZXNwb25zZU1lc3NhZ2VcclxuZGVmIGJvZHlSZXEgPSBbXVxyXG5kZWYgYnJcclxuTWFwPFN0cmluZywgT2JqZWN0PiBjdXN0b21GaWVsZE1hcCA9IG5ldyBIYXNoTWFwPFN0cmluZyxPYmplY3Q+KCk7XHJcblxyXG50cnkge1xyXG4gICAgUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKVxyXG4gICAgRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJylcclxuICAgIHByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7XHJcbiAgICAgICAgcHJvcGVydGllcy5sb2FkKGl0KVxyXG4gICAgfVxyXG5cclxuICAgIGRlZiBzZXJ2ZXJCYXNlID0gU3RyaW5nLmZvcm1hdChcImh0dHA6Ly8lcy9vcFwiLCBwcm9wZXJ0aWVzWydhcGkuZW52J10pXHJcbiAgICBkZWYgdHJhbnNhY3Rpb25BY3Rpb24gPSBcInZhbGlkYXRvcnNcIlxyXG5cclxuICAgIFVSTCB1cmxcclxuICAgIEh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb25cclxuICAgIHJlcXVlc3RNZXRob2QgPSBcIlBPU1RcIjtcclxuXHJcbiAgICBiYXNlVVJMID0gU3RyaW5nLmZvcm1hdChcIiVzL3Jlc3QvamlyYS93b3JrZmxvd3MvJXMvJXNcIiwgc2VydmVyQmFzZSwgdHJhbnNpZW50VmFycy5hY3Rpb25JZCwgdHJhbnNhY3Rpb25BY3Rpb24pO1xyXG5cclxuICAgIGxvZy5kZWJ1ZyBiYXNlVVJMO1xyXG5cclxuICAgIFdvcmtmbG93TWFuYWdlciB3b3JrZmxvd01hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRXb3JrZmxvd01hbmFnZXIoKTtcclxuICAgIEppcmFXb3JrZmxvdyBqaXJhV29ya2Zsb3cgPSB3b3JrZmxvd01hbmFnZXIuZ2V0V29ya2Zsb3codHJhbnNpZW50VmFycy5pc3N1ZSk7XHJcblxyXG4gICAgQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpO1xyXG4gICAgXHJcbiAgICBsb2cuZGVidWcgamlyYVdvcmtmbG93LmdldE5hbWUoKTtcclxuICAgIFxyXG4gICAgQWN0aW9uRGVzY3JpcHRvciBhZCA9IHdvcmtmbG93TWFuYWdlci5nZXRBY3Rpb25EZXNjcmlwdG9yKHRyYW5zaWVudFZhcnMuaXNzdWUsIHRyYW5zaWVudFZhcnMuYWN0aW9uSWQpO1xyXG5cclxuICAgIGxvZy5kZWJ1ZyBhZC5nZXROYW1lKCkgICAgICAgICAgICAgIC8vR2VuZXJhIE9wZXJhemlvbmkgZGkgTWFudXRlbnppb25lIE9EU1xyXG4gICAgbG9nLmRlYnVnIGFkLmdldE1ldGFBdHRyaWJ1dGVzKCkgICAgLy97b3BzYmFyLXNlcXVlbmNlPTEwLCBqaXJhLmRlc2NyaXB0aW9uPSwgamlyYS5maWVsZHNjcmVlbi5pZD0xOTkxMH1cclxuXHJcbiAgICBkZWYgYWRNZXRhID0gYWQuZ2V0TWV0YUF0dHJpYnV0ZXMoKTtcclxuICAgIGRlZiBmaWVsZFNjcmVlbklkID0gYWRNZXRhLmdldChcImppcmEuZmllbGRzY3JlZW4uaWRcIik7XHJcbiAgICBsb2cuZGVidWcgXCJGaWVsZCBzY3JlZW4gaWQ6IFwiICsgZmllbGRTY3JlZW5JZFxyXG5cclxuICAgIGlmKGZpZWxkU2NyZWVuSWQgIT0gbnVsbCAmJiBmaWVsZFNjcmVlbklkICE9IFwiXCIpIHtcclxuICAgICAgICBGaWVsZFNjcmVlbk1hbmFnZXIgZmllbGRTY3JlZW5NYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q29tcG9uZW50KEZpZWxkU2NyZWVuTWFuYWdlci5jbGFzcyk7XHJcbiAgICAgICAgRmllbGRTY3JlZW4gZmllbGRTY3JlZW4gPSBmaWVsZFNjcmVlbk1hbmFnZXIuZ2V0RmllbGRTY3JlZW4oTG9uZy52YWx1ZU9mKGZpZWxkU2NyZWVuSWQudG9TdHJpbmcoKSkpO1xyXG4gICAgICAgIExpc3Q8RmllbGRTY3JlZW5UYWI+IGZzdHMgPSBmaWVsZFNjcmVlbi5nZXRUYWJzKCk7XHJcbiAgICAgICAgZm9yIChGaWVsZFNjcmVlblRhYiBmc3QgOiBmc3RzKSB7XHJcbiAgICAgICAgICAgIExpc3Q8RmllbGRTY3JlZW5MYXlvdXRJdGVtPiBxd2UgPSBmc3QuZ2V0RmllbGRTY3JlZW5MYXlvdXRJdGVtcygpO1xyXG4gICAgICAgICAgICBmb3IgKEZpZWxkU2NyZWVuTGF5b3V0SXRlbSBmc2xpIDogcXdlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZnNsaS5nZXRGaWVsZElkKCkgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgQ3VzdG9tRmllbGQgY3VzdG9tRmllbGQgPSBjdXN0b21GaWVsZE1hbmFnZXIuZ2V0Q3VzdG9tRmllbGRPYmplY3QoZnNsaS5nZXRGaWVsZElkKCkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1c3RvbUZpZWxkID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRlZiBjdXN0b21GaWVsZFZhbHVlID0gaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShjdXN0b21GaWVsZCk7XHJcbiAgICAgICAgICAgICAgICBjdXN0b21GaWVsZE1hcC5wdXQoZnNsaS5nZXRGaWVsZElkKCksIGN1c3RvbUZpZWxkVmFsdWUgPT0gbnVsbCA/IG51bGwgOiBjdXN0b21GaWVsZFZhbHVlLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY3VzdG9tRmllbGRNYXAgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgbG9nLmRlYnVnIGN1c3RvbUZpZWxkTWFwXHJcblxyXG4gICAgYm9keVJlcSA9IFsgXHJcbiAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXksXHJcbiAgICAgICAgXCJhY3Rpb25OYW1lXCI6IGFkLmdldE5hbWUoKSxcclxuICAgICAgICBcImppcmFXb3JrZmxvd05hbWVcIjogamlyYVdvcmtmbG93LmdldE5hbWUoKSxcclxuICAgICAgICBcImN1c3RvbUZpZWxkTWFwXCI6IGN1c3RvbUZpZWxkTWFwLFxyXG4gICAgICAgIFwicHJvcGVydGllc1wiOiBwcm9wZXJ0aWVzXHJcbiAgICBdIFxyXG5cclxuICAgIGxvZy5kZWJ1ZyBcImJhc2VVUkwgU046IFwiICsgYmFzZVVSTFxyXG4gICAgbG9nLmRlYnVnIFwiYm9keVJlcSBTTjogXCIgKyBib2R5UmVxXHJcblxyXG4gICAgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxyXG4gICAgY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTtcclxuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdE1ldGhvZChyZXF1ZXN0TWV0aG9kKTtcclxuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xyXG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJBY2NlcHRcIiwgXCIqLypcIik7XHJcbiAgICBjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpO1xyXG4gICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xyXG4gICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5UmVxKSB9XHJcbiAgICBcclxuICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpO1xyXG4gICAgcmVzcG9uc2VDb2RlID0gY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpICAgIFxyXG4gICAgICAgIFxyXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2UgSHR0cFN0YXR1c0NvZGU6IFwiICsgcmVzcG9uc2VDb2RlXHJcbiAgICAgICAgXHJcbiAgICAvLyBJZiBiYWNrZW5kIHJlcGxpZXMgd2l0aCAyMDAgdGhlbiB0aGUgY29uZGl0aW9uIGlzIHBhc3NlZCAgICBcclxuICAgIGlmKFwiMjAwXCIuZXF1YWxzKHJlc3BvbnNlQ29kZSkpe1xyXG4gICAgICAgIGxvZy5kZWJ1ZyBcIk9LXCJcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy9UaGlzIGlzIGEgYmFja2VuZCBlcnJvci4uIGxvZ1xyXG4gICAgICAgIGxvZy5kZWJ1ZyBcIkJhY2tlbmQgZXJyb3JcIlxyXG5cclxuICAgICAgICBkZWYgb3V0cHV0ID0gbmV3IEFycmF5TGlzdCgpXHJcbiAgICAgICAgZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpXHJcbiAgICAgICAgZGVmIGVMaXN0RXJyb3JzID0gbmV3IEFycmF5TGlzdCgpXHJcbiAgICAgICAgZGVmIGVycm9yTXNncyA9IG5ldyBBcnJheUxpc3QoKVxyXG5cclxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXHJcbiAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiRVJST1JcIikgLy9pZiBkeW5hbWljLCBiZXR0ZXJcclxuICAgICAgICBlTGlzdEVycm9ycy5hZGQobnVsbCkgICAvL2l0IHNvdW5kcyBpdCBpcyB1c2VkIGFzIHNlcGFyYXRvclxyXG5cclxuICAgICAgICBkZWYgb3V0cHV0TXNnID0gKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0XHJcbiAgICAgICAgbG9nLmRlYnVnIFwiKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0OiBcIiArIG91dHB1dE1zZ1xyXG5cclxuICAgICAgICBkZWYganNvblNsdXJwZXIgPSBuZXcgSnNvblNsdXJwZXIoKVxyXG4gICAgICAgIGRlZiBqc29uX29iamVjdCA9IGpzb25TbHVycGVyLnBhcnNlVGV4dChvdXRwdXRNc2cpXHJcbiAgICAgICAgaWYoanNvbl9vYmplY3QgaW5zdGFuY2VvZiBNYXApe1xyXG4gICAgICAgICAgICAvL2Vycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArIFwiIFwiICsganNvbl9vYmplY3QubWVzc2FnZSlcclxuICAgICAgICAgICAgaWYoanNvbl9vYmplY3QuZXJyb3JzIGluc3RhbmNlb2YgTGlzdCl7XHJcbiAgICAgICAgICAgICAgICBmb3IoZGVmIGN1ciA6IChMaXN0KWpzb25fb2JqZWN0LmVycm9ycyl7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JNc2dzLmFkZChjdXIudG9TdHJpbmcoKSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGVycm9yTXNncy5hZGQoanNvbl9vYmplY3QuZXJyb3JzLnRvU3RyaW5nKCkpXHJcbiAgICAgICAgICAgIH0gICAgICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICAgICAgZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncylcclxuICAgICAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpXHJcblxyXG4gICAgICAgIG91dHB1dC5hZGQoZUxpc3QpXHJcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXHJcbiAgICB9XHJcbn0gY2F0Y2ggKEV4Y2VwdGlvbiBlKXtcclxuICAgIC8vVGhpcyBpcyBhbiBleGNlcHRpb24gaW4gdGhlIHNjcmlwdFxyXG4gICAgbG9nLmRlYnVnIFwiRXhjZXB0aW9uIHJhaXNlZFwiXHJcbiAgICBsb2cuZXJyb3IgZVxyXG4gICAgaWYoZSBpbnN0YW5jZW9mIEludmFsaWRJbnB1dEV4Y2VwdGlvbil7XHJcbiAgICAgICAgdGhyb3cgZTtcclxuICAgIH1cclxuICAgIHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oXCJWYWxpZGF0b3JzIGZhaWxlZFwiKTtcclxufVxyXG4iLCJzY3JpcHRQYXRoIjpudWxsfQ==</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="3">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="131" name="Back to Open">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">bd043487-de88-4d19-be05-d40a8c6c131b</arg>
                <arg name="FIELD_INVERT_CONDITION"></arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_USER_IDS">arianna.fabbri</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="181" name="Risks Assessment" view="fieldscreen">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">19910</meta>
          <restrict-to>
            <conditions type="AND">
              <condition type="class">
                <arg name="conditionList">6</arg>
                <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
                <arg name="comparisonType">1</arg>
                <arg name="class.name">com.googlecode.jsu.workflow.condition.ValueFieldCondition</arg>
                <arg name="uuid">f78b5e13-a779-44f3-bc72-27a44c6ee749</arg>
                <arg name="fieldValue"></arg>
                <arg name="fieldsList">customfield_23929</arg>
              </condition>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">519e584f-1e24-4d74-bbb9-ec343c3be7f1</arg>
                <arg name="FIELD_NOTES">YCFgRW5hYmxlZCBvbmx5IGlmIHBhcmVudCB0YXNrIGlzICJJbiBQcm9ncmVzcyIgb3IgIkZpbmFsaXppbmcgV29yayI=</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpc3N1ZS5wYXJlbnRPYmplY3Q/LnN0YXR1cz8ubmFtZSA9PSBcIkluIFByb2dyZXNzXCIgfHwgaXNzdWUucGFyZW50T2JqZWN0Py5zdGF0dXM/Lm5hbWUgPT0gXCJGaW5hbGl6aW5nIFdvcmtcIiIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">da95600f-b12d-41a9-ba8a-97f002bd20c1</arg>
              <arg name="FIELD_NOTES">YCFgQ2hlY2sgUE0gb3BlcmF0aW9ucyBvbiBQTSB0YXNr</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlXG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGdyb292eS5qc29uLkpzb25CdWlsZGVyXG5pbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Nb2RpZmllZFZhbHVlXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnV0aWwuRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyXG5pbXBvcnQgamF2YS50ZXh0LlNpbXBsZURhdGVGb3JtYXQ7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmluZGV4Lklzc3VlSW5kZXhpbmdTZXJ2aWNlXG5cblByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKClcbkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpXG5wcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0ge1xuXHRwcm9wZXJ0aWVzLmxvYWQoaXQpXG59XG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcblxuLy9Jc3N1ZU1hbmFnZXIgaXNzdWVNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKClcbi8vSXNzdWUgaXNzdWUgPSBpc3N1ZU1hbmFnZXIuZ2V0SXNzdWVCeUtleUlnbm9yZUNhc2UoXCJBQVMtNDE1OVwiKVxuXG5sb2cuZGVidWcgXCJUcmFuc2F6aW9uZSBDb21wbGV0ZSAtIFByaW1vIHZhbGlkYXRvclwiXG5sb2cuZGVidWcgXCJUcmFuc2F6aW9uZSBDb21wbGV0ZSAtIFByaW1vIHZhbGlkYXRvciAtIElzc3VlOiBcIiArIGlzc3VlXG5cbmRlZiBlcnJvcnMgPSBmYWxzZVxuZGVmIHdhcm5pbmdzID0gZmFsc2VcblxuZGVmIHBtT3BlcmF0aW9ucyA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUoXCJPUF9QTV9PUEVSQVRJT05TX09EU1wiKVswXVxuZGVmIGFzc2lnbmVkVG8gPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfVEtUX0FTU0lHTkVEX1RPXCIpWzBdXG5cbmxvZy5kZWJ1ZyBcImlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUocG1PcGVyYXRpb25zKTogXCIgKyBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHBtT3BlcmF0aW9ucylcbmxvZy5kZWJ1ZyBcImlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoYXNzaWduZWRUbyk6IFwiICsgaXNzdWUuZ2V0UGFyZW50T2JqZWN0KCkuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhc3NpZ25lZFRvKVxuaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShwbU9wZXJhdGlvbnMpPT1udWxsICYmICFpc3N1ZS5nZXRQYXJlbnRPYmplY3QoKS5nZXRDdXN0b21GaWVsZFZhbHVlKGFzc2lnbmVkVG8pLnRvU3RyaW5nKCkuZXF1YWxzKFwiQVNTSVNUQU5UXCIpKXtcbiAgICBlcnJvcnM9dHJ1ZVxufVxuXG5kZWYgb3V0cHV0ID0gbmV3IEFycmF5TGlzdCgpXG5cbmlmICghZXJyb3JzKXtcbiAgICByZXR1cm4gdHJ1ZVxufWVsc2V7XG4gICAgZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpICAgICAgICAgICBcbiAgICBkZWYgZUxpc3RTdWJUYXNrQ29tcGxldGVkID0gbmV3IEFycmF5TGlzdCgpXG4gICAgZUxpc3RTdWJUYXNrQ29tcGxldGVkLmFkZChcIkVcIilcbiAgICBlTGlzdFN1YlRhc2tDb21wbGV0ZWQuYWRkKFwiTUlTU0lOR19QTV9PUEVSQVRJT05TXCIpXG4gICAgZUxpc3RTdWJUYXNrQ29tcGxldGVkLmFkZChudWxsKVxuICAgIGVMaXN0LmFkZChlTGlzdFN1YlRhc2tDb21wbGV0ZWQpXG5cbiAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgIGxvZy5kZWJ1ZyBcInRocm93IGV4Y2VwdGlvbjogXCIgKyBvdXRwdXQudG9TdHJpbmcoKVxuICAgIHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oJ3tcIkVcIjpcIicgKyBvdXRwdXQudG9TdHJpbmcoKSArICdcIn0nKVxuICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbihcIkVcIiwgb3V0cHV0LnRvU3RyaW5nKCkpICAgXG59XG4iLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">b24b77fd-c8bd-438e-bfca-049838725b25</arg>
              <arg name="FIELD_NOTES">YCFgU0FQOiB1cGRhdGUgU04gc3RhdHVz</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuSXNzdWVMaW5rXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxuXG5VUkwgdXJsXG5IdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uXG5cbnJlcXVlc3RNZXRob2QgPSBcIlBPU1RcIjtcblxuZGVmIGJvZHlfcmVxID0gW11cbmJvZHlfcmVxID0gW1xuICAgIFwiaXNzdWVLZXlcIjogaXNzdWUua2V5LFxuICAgIFwic3RhdHVzXCI6IFwiSU5QXCJcbl0gXG5cbmJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9qaXJhL0FBL2FmdGVyL3NhbGVzL2NyZWF0ZS9zZXJ2aWNlL25vdGlmaWNhdGlvblwiXG51cmwgPSBuZXcgVVJMKGJhc2VVUkwpXG5jb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xuY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLThcIik7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbmNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7XG5jb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7XG5jb25uZWN0aW9uLm91dHB1dFN0cmVhbVxuY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxubG9nLmRlYnVnIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5jb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuZGVmIG91dHB1dCA9IG5ldyBBcnJheUxpc3QoKVxuZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpXG5kZWYgZUxpc3RFcnJvcnMgPSBuZXcgQXJyYXlMaXN0KClcbmRlZiBlcnJvck1zZ3MgPSBuZXcgQXJyYXlMaXN0KClcblxuaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuc3RhcnRzV2l0aChcIjIwXCIpKXtcbiAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcbiAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgZUxpc3RFcnJvcnMuYWRkKFwiU05fVVBEQVRFXCIpXG4gICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpKVxuICAgIGVMaXN0RXJyb3JzLmFkZChlcnJvck1zZ3MpXG4gICAgZUxpc3QuYWRkKGVMaXN0RXJyb3JzKVxuXG4gICAgb3V0cHV0LmFkZChlTGlzdClcbiAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9Jylcbn1cblxuIiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">0465e2d8-92f8-467a-abce-bd2394e9db31</arg>
              <arg name="FIELD_NOTES">YCFgQ2FsbCBGU00gYmFja2VuZA==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGRcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5DdXN0b21GaWVsZE1hbmFnZXJcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS53b3JrZmxvdy5KaXJhV29ya2Zsb3dcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuc2NyZWVuLkZpZWxkU2NyZWVuTGF5b3V0SXRlbVxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5zY3JlZW4uRmllbGRTY3JlZW5UYWJcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuRmllbGRNYW5hZ2VyXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLnNjcmVlbi5GaWVsZFNjcmVlblxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5zY3JlZW4uRmllbGRTY3JlZW5NYW5hZ2VyXHJcbmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LmxvYWRlci5BY3Rpb25EZXNjcmlwdG9yXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEud29ya2Zsb3cuV29ya2Zsb3dNYW5hZ2VyXHJcbmltcG9ydCBncm9vdnkuanNvbi5TdHJlYW1pbmdKc29uQnVpbGRlcjtcclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXI7XHJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbDtcclxuXHJcbmRlZiBiYXNlVVJMXHJcbmRlZiByZXNwb25zZUJvZHlcclxuXHJcbnRyeSB7XHJcbiAgICBQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXHJcbiAgICBGaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxyXG4gICAgcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcclxuICAgICAgICBwcm9wZXJ0aWVzLmxvYWQoaXQpXHJcbiAgICB9XHJcblxyXG4gICAgZGVmIHNlcnZlckJhc2UgPSBTdHJpbmcuZm9ybWF0KFwiaHR0cDovLyVzL29wXCIsIHByb3BlcnRpZXNbJ2FwaS5lbnYnXSlcclxuICAgIGRlZiB0cmFuc2FjdGlvbkFjdGlvbiA9IFwidmFsaWRhdG9yc1wiXHJcblxyXG4gICAgVVJMIHVybFxyXG4gICAgZGVmIHJlcXVlc3RNZXRob2QgPSBcIlBPU1RcIjtcclxuXHJcbiAgICBiYXNlVVJMID0gU3RyaW5nLmZvcm1hdChcIiVzL3Jlc3QvamlyYS93b3JrZmxvd3MvJXMvJXNcIiwgc2VydmVyQmFzZSwgdHJhbnNpZW50VmFycy5hY3Rpb25JZCwgdHJhbnNhY3Rpb25BY3Rpb24pO1xyXG5cclxuICAgIGxvZy5kZWJ1ZyhcIkNvbXBvc2luZyBiYXNlVVJMIGFzICcke2Jhc2VVUkx9J1wiKTtcclxuXHJcbiAgICBXb3JrZmxvd01hbmFnZXIgd29ya2Zsb3dNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0V29ya2Zsb3dNYW5hZ2VyKCk7XHJcbiAgICBKaXJhV29ya2Zsb3cgamlyYVdvcmtmbG93ID0gd29ya2Zsb3dNYW5hZ2VyLmdldFdvcmtmbG93KHRyYW5zaWVudFZhcnMuaXNzdWUpO1xyXG5cclxuICAgIEN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcclxuICAgIFxyXG4gICAgbG9nLmRlYnVnKCBqaXJhV29ya2Zsb3cuZ2V0TmFtZSgpKVxyXG4gICAgXHJcbiAgICBBY3Rpb25EZXNjcmlwdG9yIGFkID0gd29ya2Zsb3dNYW5hZ2VyLmdldEFjdGlvbkRlc2NyaXB0b3IodHJhbnNpZW50VmFycy5pc3N1ZSwgdHJhbnNpZW50VmFycy5hY3Rpb25JZCk7XHJcblxyXG4gICAgbG9nLmRlYnVnKFwiQWN0aW9uRGVzY3JpcHRvciBOYW1lOiAke2FkLmdldE5hbWUoKX1cIikgICAgICAgICAgICAgICAgICAgICAvLyBHZW5lcmEgUmFwcG9ydG8gZGkgSW50ZXJ2ZW50byBGQUFDXHJcbiAgICBsb2cuZGVidWcoXCJBY3Rpb25EZXNjcmlwdG9yIE1ldGFBdHRyczogJHthZC5nZXRNZXRhQXR0cmlidXRlcygpfVwiKSAgICAgIC8vIHtvcHNiYXItc2VxdWVuY2U9MTAsIGppcmEuZGVzY3JpcHRpb249LCBqaXJhLmZpZWxkc2NyZWVuLmlkPTE5OTEwfVxyXG5cclxuICAgIGRlZiBhZE1ldGEgPSBhZC5nZXRNZXRhQXR0cmlidXRlcygpO1xyXG4gICAgZGVmIGZpZWxkU2NyZWVuSWQgPSBMb25nLnZhbHVlT2YoYWRNZXRhLmdldChcImppcmEuZmllbGRzY3JlZW4uaWRcIikudG9TdHJpbmcoKSk7XHJcbiAgICBsb2cuZGVidWcoXCJGaWVsZCBzY3JlZW4gaWQ6ICR7ZmllbGRTY3JlZW5JZH1cIilcclxuXHJcbiAgICBNYXA8U3RyaW5nLCBPYmplY3Q+IGN1c3RvbUZpZWxkTWFwID0gbmV3IEhhc2hNYXA8U3RyaW5nLE9iamVjdD4oKTtcclxuXHJcbiAgICBGaWVsZFNjcmVlbk1hbmFnZXIgZmllbGRTY3JlZW5NYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q29tcG9uZW50KEZpZWxkU2NyZWVuTWFuYWdlci5jbGFzcyk7XHJcbiAgICBGaWVsZFNjcmVlbiBmaWVsZFNjcmVlbiA9IGZpZWxkU2NyZWVuTWFuYWdlci5nZXRGaWVsZFNjcmVlbihmaWVsZFNjcmVlbklkKTtcclxuICAgIGZvcihGaWVsZFNjcmVlblRhYiBmc3QgOiBmaWVsZFNjcmVlbi5nZXRUYWJzKCkpe1xyXG4gICAgICAgIExpc3Q8RmllbGRTY3JlZW5MYXlvdXRJdGVtPiBxd2UgPSBmc3QuZ2V0RmllbGRTY3JlZW5MYXlvdXRJdGVtcygpO1xyXG4gICAgICAgIGZvciAoRmllbGRTY3JlZW5MYXlvdXRJdGVtIGZzbGk6IHF3ZSl7XHJcbiAgICAgICAgICAgIGlmIChmc2xpLmdldEZpZWxkSWQoKSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBDdXN0b21GaWVsZCBjdXN0b21GaWVsZCA9IGN1c3RvbUZpZWxkTWFuYWdlci5nZXRDdXN0b21GaWVsZE9iamVjdChmc2xpLmdldEZpZWxkSWQoKSk7XHJcbiAgICAgICAgICAgIGlmIChjdXN0b21GaWVsZCA9PSBudWxsKXtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlZiBjdXN0b21GaWVsZFZhbHVlID0gaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShjdXN0b21GaWVsZCk7XHJcbiAgICAgICAgICAgIGN1c3RvbUZpZWxkTWFwLnB1dChmc2xpLmdldEZpZWxkSWQoKSwgY3VzdG9tRmllbGRWYWx1ZSA9PSBudWxsID8gbnVsbCA6IGN1c3RvbUZpZWxkVmFsdWUudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgfSAgICBcclxuICAgIH1cclxuXHJcbiAgICBsb2cuZGVidWcoXCJjdXN0b21GaWVsZE1hcDogJHtjdXN0b21GaWVsZE1hcH1cIilcclxuXHJcbiAgICBkZWYgYm9keVJlcSA9IFsgXHJcbiAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXksXHJcbiAgICAgICAgXCJhY3Rpb25OYW1lXCI6IGFkLmdldE5hbWUoKSxcclxuICAgICAgICBcImppcmFXb3JrZmxvd05hbWVcIjogamlyYVdvcmtmbG93LmdldE5hbWUoKSxcclxuICAgICAgICBcImN1c3RvbUZpZWxkTWFwXCI6IGN1c3RvbUZpZWxkTWFwLFxyXG4gICAgICAgIFwicHJvcGVydGllc1wiOiBwcm9wZXJ0aWVzXHJcbiAgICBdO1xyXG5cclxuICAgIGxvZy5kZWJ1ZyhcIkNhbGxpbmcgWyR7cmVxdWVzdE1ldGhvZH1dICR7YmFzZVVSTH0gd2l0aCBib2R5ICR7Ym9keVJlcX1cIik7XHJcblxyXG4gICAgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxyXG4gICAgSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbikgdXJsLm9wZW5Db25uZWN0aW9uKCk7XHJcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XHJcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcclxuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xyXG4gICAgY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcclxuICAgIGNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcclxuICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtLndpdGhXcml0ZXIoXCJVVEYtOFwiKSB7IG5ldyBTdHJlYW1pbmdKc29uQnVpbGRlcihpdCwgYm9keVJlcSkgfVxyXG4gICAgXHJcbiAgICBjb25uZWN0aW9uLmNvbm5lY3QoKTtcclxuICAgIGRlZiByZXNwb25zZUNvZGUgPSBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkgICAgXHJcbiAgICAgICAgXHJcbiAgICBsb2cuZGVidWcoXCJSZXNwb25zZSBIdHRwU3RhdHVzQ29kZTogJHtyZXNwb25zZUNvZGV9XCIpXHJcbiAgICAgICAgXHJcbiAgICAvLyBJZiBiYWNrZW5kIHJlcGxpZXMgd2l0aCAyMDAgdGhlbiB0aGUgY29uZGl0aW9uIGlzIHBhc3NlZCAgICBcclxuICAgIGlmKFwiMjAwXCIuZXF1YWxzKHJlc3BvbnNlQ29kZSkpe1xyXG4gICAgICAgIGxvZy5kZWJ1ZyhcIlZhbGlkYXRvciBwYXNzZWQhXCIpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBMaXN0PFN0cmluZz4gb3V0cHV0RXJyb3JzID0gbmV3IEFycmF5TGlzdDw+KCk7XHJcbiAgICAgICAgTGlzdDxTdHJpbmc+IG91dHB1dFdhcm5pbmdzID0gbmV3IEFycmF5TGlzdDw+KCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmVzcG9uc2VCb2R5ID0gKChIdHRwVVJMQ29ubmVjdGlvbikgY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dDtcclxuICAgICAgICBsb2cuZGVidWcoXCJWYWxpZGF0b3Igbm90IHBhc3NlZCwgcmVzcG9uc2VCb2R5OiAke3Jlc3BvbnNlQm9keX1cIik7XHJcblxyXG4gICAgICAgIC8vIHRlc3Rpbmcgd2l0aG91dCByZWRlcGxveWluZyBlYWNoIHRpbWVcclxuICAgICAgICAvL3Jlc3BvbnNlQm9keSA9ICd7XCJXXCI6IFwiW1tbVywgQ09ORklSTV9SSVNLX0FOQUxZU0lTLCBudWxsXV1dXCJ9J1xyXG5cclxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKHJlc3BvbnNlQm9keSk7XHJcbiAgICB9XHJcbn0gY2F0Y2ggKEV4Y2VwdGlvbiBlKXtcclxuICAgIC8vVGhpcyBpcyBhbiBleGNlcHRpb24gaW4gdGhlIHNjcmlwdFxyXG4gICAgbG9nLmRlYnVnKFwiRXhjZXB0aW9uIHJhaXNlZCBjYWxsaW5nIGVuZHBvaW50ICR7YmFzZVVSTH1cIilcclxuICAgIGxvZy5lcnJvcihlKVxyXG4gICAgaWYgKGUgaW5zdGFuY2VvZiBJbnZhbGlkSW5wdXRFeGNlcHRpb24pe1xyXG4gICAgICAgIHRocm93IGU7XHJcbiAgICB9XHJcbiAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6IFwiW1tbIFZhbGlkYXRvciBmYWlsZWQgXV1dXCIgfScpO1xyXG59Iiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="10">
              <post-functions>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">5227bd43-2025-46c0-9798-81f69a361004</arg>
                  <arg name="FIELD_NOTES">YCFgQ3JlYXRlIG9iaiAiQ2hlY2tsaXN0IiAtIE5PVCBmb3IgQVNTSVNUQU5UIHRpY2tldHM=</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="disabled">true</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="append.value"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">%%CURRENT_DATETIME%%</arg>
                  <arg name="uuid">3c8b59b8-8f1c-42c4-80b7-e41c4489cf6a</arg>
                  <arg name="field.name">customfield_22628</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="221" name="Clear OP_SUPPLIER">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">92c7bf91-5f62-49c4-bba0-b13767297b6d</arg>
                <arg name="FIELD_INVERT_CONDITION"></arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_USER_IDS">arianna.fabbri</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="3">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="uuid">bc2c77b9-422d-4c36-9198-94c3d5bcc1cb</arg>
                  <arg name="field">customfield_23235</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="field2">customfield_22813</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="281" name="Set Security">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">1b7d5faf-f701-433b-bfff-28879be13db0</arg>
                <arg name="FIELD_INVERT_CONDITION"></arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_USER_IDS">arianna.fabbri|||JIRAUSER58800</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="3">
              <post-functions>
                <function type="class">
                  <arg name="FIELD_SECURITY_LEVEL_ID">11600</arg>
                  <arg name="FIELD_FUNCTION_ID">006f388b-2114-4b75-aba7-ff0b7afc0cb2</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
                  <arg name="FIELD_CONDITION"></arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="4" name="In Progress">
      <meta name="jira.status.id">3</meta>
      <actions>
        <action id="51" name="Maintenance Completed" view="fieldscreen">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">20204</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">4c38acf4-2d87-4197-a86b-51b844dcbe39</arg>
              <arg name="FIELD_NOTES">YCFgQ2hlY2sgUklTS19ERVNDUklQVElPTiBpZiBSSVNLIEZPVU5EID0gdHJ1ZSBBTkQgZmllbGRzIHJlcXVpcmVkIGFuZCBtb2Rlcm5pemF0aW9uIG1hdGVyaWFscw==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVcbmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvblxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3JcbmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvbkJ1aWxkZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyXG5pbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGxcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVNYW5hZ2VyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk1vZGlmaWVkVmFsdWVcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUudXRpbC5EZWZhdWx0SXNzdWVDaGFuZ2VIb2xkZXJcbmltcG9ydCBqYXZhLnRleHQuU2ltcGxlRGF0ZUZvcm1hdDtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuaW5kZXguSXNzdWVJbmRleGluZ1NlcnZpY2VcbmltcG9ydCBqYXZhLnV0aWwuTWFwO1xuXG5cblByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKClcbkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpXG5wcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0ge1xuICAgIHByb3BlcnRpZXMubG9hZChpdClcbn1cbmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKVxuXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKVxuLy9Jc3N1ZSBpc3N1ZSA9IGlzc3VlTWFuYWdlci5nZXRJc3N1ZUJ5S2V5SWdub3JlQ2FzZShcIkFBUy02NTcxNjFcIilcblxuQ2xhc3Mgb2JqZWN0RmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKFwiY29tLnJpYWRhbGFicy5qaXJhLnBsdWdpbnMuaW5zaWdodC5jaGFubmVsLmV4dGVybmFsLmFwaS5mYWNhZGUuT2JqZWN0RmFjYWRlXCIpO1xuZGVmIG9iamVjdEZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShvYmplY3RGYWNhZGVDbGFzcyk7XG5cbmRlZiBlcnJvcnMgPSBmYWxzZVxuZGVmIHdhcm5pbmdzID0gZmFsc2VcbmRlZiByaXNrRm91bmQgPSBmYWxzZVxuZGVmIGpvYkNvbXBsZXRlZCA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUoXCJPUF9QTV9KT0JfUkVTT0xVVElPTlwiKVswXVxuZGVmIHJlcU1hdGVyaWFscyA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUocHJvcGVydGllc1snY2YucmVxdWlyZWRNYXRlcmlhbHMnXS50b1N0cmluZygpKVswXVxuZGVmIG1vZE1hdGVyaWFscyA9ICBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUoXCJPUF9NT0RFUk5JWkFUSU9OX01BVEVSSUFMU1wiKVswXVxuZGVmIGVycm9yRmllbGRzVG9CZUVtcHR5ID0gbmV3IEFycmF5TGlzdCgpXG5kZWYgcmVxQW5kTW9kZXJyb3IgPSBmYWxzZVxuZGVmIGVycm9yTWFuZGF0b3J5RmllbGRzID0gZmFsc2VcblxuXG5kZWYgcmVxdWVzdE1ldGhvZCA9IFwiR0VUXCJcbmRlZiBiYXNlVVJMID0gXCJodHRwOi8vXCIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArIFwiL29wL3Jlc3QvYXV0b21hdGlvbi9BQS90aWNrZXQvXCIrIGlzc3VlICtcIi9nZXRSaXNrRm91bmRXaXRoRGVzY3JpcHRpb25cIlxuXG5cbmxvZy5kZWJ1ZyBiYXNlVVJMXG5VUkwgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxuSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTtcbmNvbm5lY3Rpb24uc2V0UmVxdWVzdE1ldGhvZChyZXF1ZXN0TWV0aG9kKTtcbmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcbmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbmNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbmNvbm5lY3Rpb24uY29ubmVjdCgpO1xuXG5cbmRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbmRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuZGVmIGVMaXN0RXJyb3JzID0gbmV3IEFycmF5TGlzdCgpXG5kZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5sb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG5cblxuaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAwXCIpKXtcbiAgICBsb2cuZGVidWcgXCJSZXNwb25zZUNvZGU6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxuICAgIGxvZy5kZWJ1ZyBcIkVycm9yU3RyZWFtOiBcIiArIGNvbm5lY3Rpb24uZ2V0RXJyb3JTdHJlYW0oKS50b1N0cmluZygpXG4gICAgbG9nLmRlYnVnIFwiZ2V0SGVhZGVyRmllbGRzKCk6IFwiICsgY29ubmVjdGlvbi5nZXRIZWFkZXJGaWVsZHMoKVxuICAgIGRlZiBvdXRwdXRNc2cgPSAoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHRcbiAgICBsb2cuZGVidWcgXCIoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHQ6IFwiICsgb3V0cHV0TXNnXG5cblxuICAgIGRlZiBqc29uU2x1cnBlciA9IG5ldyBKc29uU2x1cnBlcigpXG4gICAgZGVmIGpzb25fb2JqZWN0ID0ganNvblNsdXJwZXIucGFyc2VUZXh0KG91dHB1dE1zZylcbiAgICBhc3NlcnQganNvbl9vYmplY3QgaW5zdGFuY2VvZiBNYXAgIFxuICAgIGxvZy5kZWJ1ZyBcIm1lc3NhZ2U6IFwiICsgIGpzb25fb2JqZWN0Lm1lc3NhZ2VcblxuXG4gICAgZUxpc3RFcnJvcnMuYWRkKFwiRVwiKVxuICAgIGVMaXN0RXJyb3JzLmFkZChcIk1BTkRBVE9SWV9SSVNLX0RFVEFJTFNcIilcbiAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyBcIiBcIiArIGpzb25fb2JqZWN0Lm1lc3NhZ2UpXG4gICAgZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncylcbiAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpXG5cblxuICAgIG91dHB1dC5hZGQoZUxpc3QpXG4gICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbihcIkVcIiwgb3V0cHV0LnRvU3RyaW5nKCkpXG59XG5cblxuZGVmIGpzb25TbHVycGVyID0gbmV3IEpzb25TbHVycGVyKClcbmRlZiBqc29uX29iamVjdF9yZXNwID0ganNvblNsdXJwZXIucGFyc2UoY29ubmVjdGlvbi5nZXRJbnB1dFN0cmVhbSgpKVxuXG5cbnJpc2tGb3VuZCA9ICgoTWFwPFN0cmluZyxTdHJpbmc+KWpzb25fb2JqZWN0X3Jlc3ApLmdldChcIlJJU0tGT1VORFwiKTtcblxuXG5cbmlmKHJpc2tGb3VuZCA9PSBcInRydWVcIil7XG4gICAgZXJyb3JzID0gdHJ1ZVxuICAgIGVycm9yTWFuZGF0b3J5RmllbGRzID0gdHJ1ZVxufVxuXG4vL0pPQl9DT01QTEVURURcbiAvKkFGIDIxLjAzLjIwMjMgU29sbyBpbiBjYXNvIGRpIE9QX1BNX0pPQl9SRVNPTFVUSU9OID0gSk9CX0NPTVBMRVRFRCB2ZXJpZmljbyBjaGUgbm9uIGNpIHNpYW5vIG1hdGVyaWFsaSBuZWxsZSBcbnNlemlvbmkgUkVRVUlSRUQgTUFURVJJQUxTIGUgTU9ERVJOSVpBVElPTiovXG4gaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShqb2JDb21wbGV0ZWQpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMV9KT0JfQ09NUExFVEVEXCIpKXtcbiAgICAvL09QX1JFUVVJUkVEX01BVEVSSUFMUyBNVVNUIEJFIEVNUFRZXG4gICAgaWYoKGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUocmVxTWF0ZXJpYWxzKSE9bnVsbCAmJiAoU3RyaW5nKWlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUocmVxTWF0ZXJpYWxzKSAhPSBcIlwiICYmICFpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHJlcU1hdGVyaWFscykudG9TdHJpbmcoKS5lcXVhbHMoXCJcIikpKXtcbiAgICAgICAgZm9yKHJlcSBpbiBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHJlcU1hdGVyaWFscykpe1xuICAgICAgICAgICAgLypjaGVjayBERUxFVEVEIC0gSUYgQVQgTEVBU1QgMSBPQkogV0lUSCBERUxFVEVEPWZhbHNlIC0tPiBFUlJPUiovXG4gICAgICAgICAgICBpZihvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4ocmVxLmdldElkKCksIFwiREVMRVRFRFwiKSl7XG4gICAgICAgICAgICAgICAgaWYob2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKHJlcS5nZXRJZCgpLCBcIkRFTEVURURcIikuZ2V0T2JqZWN0QXR0cmlidXRlVmFsdWVCZWFucygpWzBdLnZhbHVlIT10cnVlKXtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICBlcnJvckZpZWxkc1RvQmVFbXB0eS5hZGQocHJvcGVydGllc1snY2YucmVxdWlyZWRNYXRlcmlhbHMnXS50b1N0cmluZygpKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGVycm9ycyA9IHRydWVcbiAgICAgICAgICAgICAgICBlcnJvckZpZWxkc1RvQmVFbXB0eS5hZGQocHJvcGVydGllc1snY2YucmVxdWlyZWRNYXRlcmlhbHMnXS50b1N0cmluZygpKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vT1BfTU9ERVJOSVpBVElPTl9NQVRFUklBTFMgTVVTVCBCRSBFTVBUWVxuICAgIGlmKChpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKG1vZE1hdGVyaWFscykhPW51bGwgJiYgKFN0cmluZylpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKG1vZE1hdGVyaWFscykgIT0gXCJcIiAmJiAhaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShtb2RNYXRlcmlhbHMpLnRvU3RyaW5nKCkuZXF1YWxzKFwiXCIpKSl7XG4gICAgICAgIGZvcihyZXEgaW4gaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShtb2RNYXRlcmlhbHMpKXtcbiAgICAgICAgICAgIC8qY2hlY2sgREVMRVRFRCAtIElGIEFUIExFQVNUIDEgT0JKIFdJVEggREVMRVRFRD1mYWxzZSAtLT4gRVJST1IqL1xuICAgICAgICAgICAgaWYob2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKHJlcS5nZXRJZCgpLCBcIkRFTEVURURcIikpe1xuICAgICAgICAgICAgICAgIGlmKG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbihyZXEuZ2V0SWQoKSwgXCJERUxFVEVEXCIpLmdldE9iamVjdEF0dHJpYnV0ZVZhbHVlQmVhbnMoKVswXS52YWx1ZSE9dHJ1ZSl7XG4gICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBlcnJvcnMgPSB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYoZXJyb3JzKXtcbiAgICAgICAgICAgIGVycm9yRmllbGRzVG9CZUVtcHR5LmFkZChcIk9QX01PREVSTklaQVRJT05fTUFURVJJQUxTXCIpXG4gICAgICAgIH1cbiAgICB9XG4gfSAgIFxuaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShqb2JDb21wbGV0ZWQpLnRvU3RyaW5nKCkuZXF1YWxzKFwiM19RVU9UQVRJT05cIikpe1xuICAgIC8vMjEuMDMuMjAyMyBBRiBTZSBzZWxlemlvbm8gM19RVU9UQVRJT04gcG9zc286XG4gICAgLy8gLSBub24gY29tcGlsYXJlIG5lc3N1bmEgc2V6aW9uZSBkaSBtYXRlcmlhbGkgLS0+IHBlciBnZW5lcmFyZSBxdW90ZWQgd29yayBkaSBzb2xhIG1hbm9kb3BlcmFcbiAgICAvLyAtIGNvbXBpbGFyZSBsYSBzZXppb25lIHJlcSBtYXRlcmlhbHMgLS0+IHBlciBnZW5lcmFyZSBxdW90ZWQgd29yayBkaSBtYXRlcmlhbGkgZSBtYW5vZG9wZXJhXG4gICAgLy8gLSBjb21waWxhcmUgbGEgc2V6aW9uZSBtb2Rlcm5pemF0aW9uIC0tPiBwZXIgZ2VuZXJhcmUgcXVvdGVkIHdvcmsgZGkgdGlwbyBtb2Rlcm5pemF0aW9uXG4gICAgLy8gTk9OIFx1MDBlOCBwb3NzaWJpbGUgY29tcGlsYXJlIHNpYSBtb2Rlcm5pemF0aW9uIGNoZSByZXEgbWF0ZXJpYWxzXG4gICAgZGVmIGFsbERlbGV0ZWQ9dHJ1ZSwgYWxsRGVsZXRlZE1vZD10cnVlXG4gICAgaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShyZXFNYXRlcmlhbHMpIT1udWxsICYmIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUobW9kTWF0ZXJpYWxzKSE9bnVsbCl7XG4gICAgICAgIC8vMjguMDIuMjAyMyAtIEVycm9yZSBzZSBjaSBzb25vIHNpYSByZXEgY2hlIG1vZCBtYXRlcmlhbHMgbm9uIGRlbGV0ZWQgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICBmb3IocmVxIGluIGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUocmVxTWF0ZXJpYWxzKSl7XG4gICAgICAgICAgICAvKmNoZWNrIERFTEVURUQgLSBJRiBBVCBMRUFTVCAxIE9CSiBXSVRIIERFTEVURUQ9ZmFsc2UgLS0+IEVSUk9SKi9cbiAgICAgICAgICAgIGlmKG9iamVjdEZhY2FkZS5sb2FkT2JqZWN0QXR0cmlidXRlQmVhbihyZXEuZ2V0SWQoKSwgXCJERUxFVEVEXCIpKXtcbiAgICAgICAgICAgICAgICBpZihvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4ocmVxLmdldElkKCksIFwiREVMRVRFRFwiKS5nZXRPYmplY3RBdHRyaWJ1dGVWYWx1ZUJlYW5zKClbMF0udmFsdWUhPXRydWUpe1xuICAgICAgICAgICAgICAgICAgICBhbGxEZWxldGVkPWZhbHNlXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgYWxsRGVsZXRlZD1mYWxzZVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yKG1vZCBpbiBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKG1vZE1hdGVyaWFscykpe1xuICAgICAgICAgICAgLypjaGVjayBERUxFVEVEIC0gSUYgQVQgTEVBU1QgMSBPQkogV0lUSCBERUxFVEVEPWZhbHNlIC0tPiBFUlJPUiovXG4gICAgICAgICAgICBpZihvYmplY3RGYWNhZGUubG9hZE9iamVjdEF0dHJpYnV0ZUJlYW4obW9kLmdldElkKCksIFwiREVMRVRFRFwiKSl7XG4gICAgICAgICAgICAgICAgaWYob2JqZWN0RmFjYWRlLmxvYWRPYmplY3RBdHRyaWJ1dGVCZWFuKG1vZC5nZXRJZCgpLCBcIkRFTEVURURcIikuZ2V0T2JqZWN0QXR0cmlidXRlVmFsdWVCZWFucygpWzBdLnZhbHVlIT10cnVlKXtcbiAgICAgICAgICAgICAgICAgICAgYWxsRGVsZXRlZE1vZD1mYWxzZVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGFsbERlbGV0ZWRNb2Q9ZmFsc2VcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmKCFhbGxEZWxldGVkICYmICFhbGxEZWxldGVkTW9kKXtcbiAgICAgICAgICAgIGVycm9ycyA9IHRydWVcbiAgICAgICAgICAgIHJlcUFuZE1vZGVycm9yID0gdHJ1ZVxuICAgICAgICB9XG4gICAgfVxuIH1cblxuIGlmICghZXJyb3JzICYmICF3YXJuaW5ncyl7XG4gICAgcmV0dXJuIHRydWVcbiB9ZWxzZXtcbiAgICBpZihlcnJvcnMgJiYgIXdhcm5pbmdzKXtcbiAgICAgICAgaWYoZXJyb3JGaWVsZHNUb0JlRW1wdHkuc2l6ZSgpID4gMCl7XG4gICAgICAgICAgICBkZWYgZUxpc3RFbXB0eSA9IG5ldyBBcnJheUxpc3QoKVxuICAgICAgICAgICAgZUxpc3RFbXB0eS5hZGQoXCJFXCIpXG4gICAgICAgICAgICBlTGlzdEVtcHR5LmFkZChcIlFVT1RBVElPTl9GSUVMRFNfVE9fQkVfRU1QVFlcIilcbiAgICAgICAgICAgIGVMaXN0RW1wdHkuYWRkKG51bGwpXG4gICAgICAgICAgICBlTGlzdEVtcHR5LmFkZChlcnJvckZpZWxkc1RvQmVFbXB0eSlcbiAgICAgICAgICAgIGVMaXN0LmFkZChlTGlzdEVtcHR5KVxuICAgICAgICB9XG4gICAgICAgIGlmKHJlcUFuZE1vZGVycm9yKXtcbiAgICAgICAgICAgIGRlZiBlTGlzdEVycm9yUmVxQW5kTW9kZXJyb3IgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgICAgIGVMaXN0RXJyb3JSZXFBbmRNb2RlcnJvci5hZGQoXCJFXCIpXG4gICAgICAgICAgICBlTGlzdEVycm9yUmVxQW5kTW9kZXJyb3IuYWRkKFwiU0VMRUNUX1JFUVVJUkVEX09SX01PREVSTklaQVRJT05fUEFSVFNcIilcbiAgICAgICAgICAgIGVMaXN0RXJyb3JSZXFBbmRNb2RlcnJvci5hZGQobnVsbClcbiAgICAgICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9yUmVxQW5kTW9kZXJyb3IpXG4gICAgICAgIH1cbiAgICAgICAgaWYoZXJyb3JNYW5kYXRvcnlGaWVsZHMpe1xuICAgICAgICAgICAgZGVmIGVMaXN0TWFuZGF0b3J5ID0gbmV3IEFycmF5TGlzdCgpXG4gICAgICAgICAgICBlTGlzdE1hbmRhdG9yeS5hZGQoXCJFXCIpXG4gICAgICAgICAgICBlTGlzdE1hbmRhdG9yeS5hZGQoXCJNQU5EQVRPUllfUklTS19ERVRBSUxTXCIpXG4gICAgICAgICAgICBlTGlzdE1hbmRhdG9yeS5hZGQobnVsbClcbiAgICAgICAgICAgIGVMaXN0LmFkZChlTGlzdE1hbmRhdG9yeSlcbiAgICAgICAgfVxuICAgICAgICBvdXRwdXQuYWRkKGVMaXN0KVxuICAgICAgICBsb2cuZGVidWcgXCJ0aHJvdyBleGNlcHRpb246IFwiICsgb3V0cHV0LnRvU3RyaW5nKClcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbihcIkVcIiwgb3V0cHV0LnRvU3RyaW5nKCkpICAgXG4gICAgfVxuICAgIGlmKGVycm9ycyAmJiB3YXJuaW5ncyl7XG4gICAgICAgIGRlZiB3TGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuICAgICAgICBpZihlcnJvckZpZWxkc1RvQmVFbXB0eS5zaXplKCkgPiAwKXtcbiAgICAgICAgICAgIGRlZiBlTGlzdEVtcHR5ID0gbmV3IEFycmF5TGlzdCgpXG4gICAgICAgICAgICBlTGlzdEVtcHR5LmFkZChcIkVcIilcbiAgICAgICAgICAgIGVMaXN0RW1wdHkuYWRkKFwiUVVPVEFUSU9OX0ZJRUxEU19UT19CRV9FTVBUWVwiKVxuICAgICAgICAgICAgZUxpc3RFbXB0eS5hZGQobnVsbClcbiAgICAgICAgICAgIGVMaXN0RW1wdHkuYWRkKGVycm9yRmllbGRzVG9CZUVtcHR5KVxuICAgICAgICAgICAgZUxpc3QuYWRkKGVMaXN0RW1wdHkpXG4gICAgICAgIH1cbiAgICAgICAgaWYocmVxQW5kTW9kZXJyb3Ipe1xuICAgICAgICAgICAgZGVmIGVMaXN0RXJyb3JSZXFBbmRNb2RlcnJvciA9IG5ldyBBcnJheUxpc3QoKVxuICAgICAgICAgICAgZUxpc3RFcnJvclJlcUFuZE1vZGVycm9yLmFkZChcIkVcIilcbiAgICAgICAgICAgIGVMaXN0RXJyb3JSZXFBbmRNb2RlcnJvci5hZGQoXCJTRUxFQ1RfUkVRVUlSRURfT1JfTU9ERVJOSVpBVElPTl9QQVJUU1wiKVxuICAgICAgICAgICAgZUxpc3RFcnJvclJlcUFuZE1vZGVycm9yLmFkZChudWxsKVxuICAgICAgICAgICAgZUxpc3QuYWRkKGVMaXN0RXJyb3JSZXFBbmRNb2RlcnJvcilcbiAgICAgICAgfVxuICAgICAgICBpZihlcnJvck1hbmRhdG9yeUZpZWxkcyl7XG4gICAgICAgICAgICBkZWYgZUxpc3RNYW5kYXRvcnkgPSBuZXcgQXJyYXlMaXN0KClcbiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZChcIkVcIilcbiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZChcIk1BTkRBVE9SWV9SSVNLX0RFVEFJTFNcIilcbiAgICAgICAgICAgIGVMaXN0TWFuZGF0b3J5LmFkZChudWxsKVxuICAgICAgICAgICAgZUxpc3QuYWRkKGVMaXN0TWFuZGF0b3J5KVxuICAgICAgICB9XG4gICAgICAgIG91dHB1dC5hZGQoZUxpc3QpXG4gICAgICAgIG91dHB1dC5hZGQod0xpc3QpXG4gICAgICAgIGxvZy5kZWJ1ZyBcInRocm93IGV4Y2VwdGlvbjogXCIgKyBvdXRwdXQudG9TdHJpbmcoKVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJXRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgICAgIC8vdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbihcIldFXCIsIG91dHB1dC50b1N0cmluZygpKSAgXG4gICAgfVxuIH0iLCJzY3JpcHRQYXRoIjpudWxsLCJwYXJhbWV0ZXJzIjp7fX0=</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">3cfcef78-5d10-4849-85dd-55c3e0e0b17a</arg>
              <arg name="FIELD_NOTES">YCFgTG9nIFRpbWVzdGFtcCBmb3IgVGVjaCBhY3Rpdml0eSAmIFVwZGF0ZSBKb2IgQ29tcGxldGVkIC0gRG8gbm90IHVwZGF0ZSBKb2IgQ29tcGxldGVkIGZvciB0aGUgTEFTVCBQTSBUYXNrIGV4ZWN1dGVk</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">5da0be63-d7e9-42df-b2d7-82f837a60fb5</arg>
              <arg name="FIELD_NOTES">YCFgU0FQOiB1cGRhdGUgU04gc3RhdHVzICYgVXBkYXRlIFNPICsgQ29uZmlybWF0aW9uIC0gSWYgbGFzdCBQTSBUYXNrIGNsb3NlZDogZG8gbm90IHVwZGF0ZSBTQVAgU08gZm9yIExBQk9VUiwgdXBkYXRlIFNBUCBTTyBzZW5kaW5nIG9ubHkgTUFURVJJQUxT</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="disabled">false</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="5">
              <post-functions>
                <function type="class">
                  <arg name="field.name">resolution</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
                  <arg name="field.value">6</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">3d910af6-4e19-48fc-91c2-ef43a546b15e</arg>
                  <arg name="FIELD_NOTES">YCFgVXBkYXRlIENPTVBMRVRFRCBvbiBSaXNrIEFzc2Vzc21lbnQ=</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiIgIGltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5NdXRhYmxlSXNzdWU7XHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuZXZlbnQudHlwZS5FdmVudERpc3BhdGNoT3B0aW9uO1xyXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5MZXZlbFxyXG5pbXBvcnQgamF2YS5zcWwuVGltZXN0YW1wXHJcblxyXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXHJcbkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZSgnL3Zhci9hdGxhc3NpYW4vYXBwbGljYXRpb24tZGF0YS9zaGFyZWQvc2NyaXB0cy9vcHByb2plY3QucHJvcGVydGllcycpXHJcbnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7XHJcblx0cHJvcGVydGllcy5sb2FkKGl0KVxyXG59XHJcbi8qIEdldCBJbnNpZ2h0IE9iamVjdCBGYWNhZGUgZnJvbSBwbHVnaW4gYWNjZXNzb3IgKi9cclxuQ2xhc3Mgb2JqZWN0RmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKFwiY29tLnJpYWRhbGFicy5qaXJhLnBsdWdpbnMuaW5zaWdodC5jaGFubmVsLmV4dGVybmFsLmFwaS5mYWNhZGUuT2JqZWN0RmFjYWRlXCIpOyBcclxuZGVmIG9iamVjdEZhY2FkZSA9IENvbXBvbmVudEFjY2Vzc29yLmdldE9TR2lDb21wb25lbnRJbnN0YW5jZU9mVHlwZShvYmplY3RGYWNhZGVDbGFzcyk7XHJcbiAgXHJcbi8qIEdldCBJbnNpZ2h0IE9iamVjdCBUeXBlIEZhY2FkZSBmcm9tIHBsdWdpbiBhY2Nlc3NvciAqL1xyXG5DbGFzcyBvYmplY3RUeXBlRmFjYWRlQ2xhc3MgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRQbHVnaW5BY2Nlc3NvcigpLmdldENsYXNzTG9hZGVyKCkuZmluZENsYXNzKFwiY29tLnJpYWRhbGFicy5qaXJhLnBsdWdpbnMuaW5zaWdodC5jaGFubmVsLmV4dGVybmFsLmFwaS5mYWNhZGUuT2JqZWN0VHlwZUZhY2FkZVwiKTsgXHJcbmRlZiBvYmplY3RUeXBlRmFjYWRlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0T1NHaUNvbXBvbmVudEluc3RhbmNlT2ZUeXBlKG9iamVjdFR5cGVGYWNhZGVDbGFzcyk7XHJcbiAgXHJcbi8qIEdldCBJbnNpZ2h0IE9iamVjdCBBdHRyaWJ1dGUgRmFjYWRlIGZyb20gcGx1Z2luIGFjY2Vzc29yICovXHJcbkNsYXNzIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGVDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LmNoYW5uZWwuZXh0ZXJuYWwuYXBpLmZhY2FkZS5PYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlXCIpOyBcclxuZGVmIG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0VHlwZUF0dHJpYnV0ZUZhY2FkZUNsYXNzKTtcclxuICBcclxuQ2xhc3Mgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyA9IENvbXBvbmVudEFjY2Vzc29yLmdldFBsdWdpbkFjY2Vzc29yKCkuZ2V0Q2xhc3NMb2FkZXIoKS5maW5kQ2xhc3MoXCJjb20ucmlhZGFsYWJzLmppcmEucGx1Z2lucy5pbnNpZ2h0LnNlcnZpY2VzLm1vZGVsLmZhY3RvcnkuT2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlcIik7IFxyXG5kZWYgb2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnkgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUob2JqZWN0QXR0cmlidXRlQmVhbkZhY3RvcnlDbGFzcyk7XHJcbkNsYXNzIGlxbEZhY2FkZUNsYXNzID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0UGx1Z2luQWNjZXNzb3IoKS5nZXRDbGFzc0xvYWRlcigpLmZpbmRDbGFzcyhcImNvbS5yaWFkYWxhYnMuamlyYS5wbHVnaW5zLmluc2lnaHQuY2hhbm5lbC5leHRlcm5hbC5hcGkuZmFjYWRlLklRTEZhY2FkZVwiKTsgXHJcbmRlZiBpcWxGYWNhZGUgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRPU0dpQ29tcG9uZW50SW5zdGFuY2VPZlR5cGUoaXFsRmFjYWRlQ2xhc3MpO1xyXG5cclxuSXNzdWUgaXNzdWUgPSBpc3N1ZVxyXG5cclxuZGVmIGN1cnJlbnRVc2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfQ1VSUkVOVF9VU0VSXCIpWzBdXHJcbmRlZiByaXNrQXNzRmllbGQgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUoXCJPUF9BU1NFVF9SSVNLU19BU1NFU1NNRU5UXCIpWzBdO1xyXG5kZWYgY2hlY2tsaXN0RmllbGQgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUoXCJPUF9BU1NFVF9DSEVDS0xJU1RcIilbMF07XHJcblxyXG5pbnQgT1BBQSA9IHByb3BlcnRpZXNbJ2lzY2hlbWEuYWEuaWQnXS50b1N0cmluZygpLnRvSW50ZWdlcigpXHJcbmludCBEQk8gPSBwcm9wZXJ0aWVzWydpc2NoZW1hLmRiby5pZCddLnRvU3RyaW5nKCkudG9JbnRlZ2VyKClcclxuXHJcbmxvZy53YXJuIFwiKioqKioqKioqKioqKioqKioqKioqKiBSSVNLUyBBU1NFU1NNRU5UICoqKioqKioqKioqKioqKioqKioqKipcIlxyXG5sb2cuaW5mbyBpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHJpc2tBc3NGaWVsZCkudG9TdHJpbmcoKSBcclxucmlza0Fzc09iaiA9IGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUocmlza0Fzc0ZpZWxkKVxyXG5cclxuaWYoaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShyaXNrQXNzRmllbGQpICE9IG51bGwpe1xyXG4gICAgLy9kZWYgb2JqID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RCZWFuKG9iamVjdHNbMF0uZ2V0SWQoKSk7XHJcbiAgICBkZWYgcj1yaXNrQXNzT2JqLnRvU3RyaW5nKClcclxuICAgIGRlZiByS2V5ID0gci5zdWJzdHJpbmcoci5sYXN0SW5kZXhPZignKCcpKzEsci5sYXN0SW5kZXhPZignKScpKVxyXG4gICAgZGVmIHJOYW1lID0gci5zdWJzdHJpbmcoMCxyLmxhc3RJbmRleE9mKCcoJyktMSlcclxuICAgIGRlZiByT2JqZWN0ID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RCZWFuKHJLZXkpICAgIFxyXG4gICAgaW50IGF0dHJpYnV0ZUlEIFxyXG4gICAgcmlza0Fzc09iai5vYmplY3RBdHRyaWJ1dGVCZWFucy5lYWNoIHtcclxuICAgICAgICBpdC5vYmplY3RUeXBlQXR0cmlidXRlSWQuZWFjaHtcclxuICAgICAgICAgICAgbG9nLmluZm8gXCJpdDogXCIgKyBpdFxyXG4gICAgICAgICAgICBpZihvYmplY3RUeXBlQXR0cmlidXRlRmFjYWRlLmxvYWRPYmplY3RUeXBlQXR0cmlidXRlQmVhbihpdCkubmFtZSA9PSBcIkNPTVBMRVRFRFwiKXtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZUlEID0gaXRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBkZWYgYXR0cmliVHlwZSA9IG9iamVjdFR5cGVBdHRyaWJ1dGVGYWNhZGUubG9hZE9iamVjdFR5cGVBdHRyaWJ1dGVCZWFuKGF0dHJpYnV0ZUlEKTsgXHJcbiAgICBsb2cuaW5mbyBcImF0dHJpYlR5cGU6IFwiICsgYXR0cmliVHlwZS50b1N0cmluZygpXHJcbiAgICBkZWYgb2JqID0gb2JqZWN0RmFjYWRlLmxvYWRPYmplY3RCZWFuKHJPYmplY3QuZ2V0SWQoKSk7XHJcbiAgICBkZWYgbmV3QXR0cmliID0gb2JqLmNyZWF0ZU9iamVjdEF0dHJpYnV0ZUJlYW4oYXR0cmliVHlwZSk7XHJcbiAgICBkZWYgbmV3QXR0cmliVmFsdWUgPSBuZXdBdHRyaWIuY3JlYXRlT2JqZWN0QXR0cmlidXRlVmFsdWVCZWFuKCk7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgICBuZXdBdHRyaWJWYWx1ZS5zZXRCb29sZWFuVmFsdWUodHJ1ZSk7XHJcbiAgICB9IGNhdGNoIChFeGNlcHRpb24gdmllKSB7XHJcbiAgICAgICAgbG9nLndhcm4oXCJTRVRJTlNJR0hUVkFMVUU6IFVuYWJsZSB0byBzZXQgYXR0cmlidXRlIFwiICsgYXR0cmliVHlwZS50b1N0cmluZygpICsgXCIgdG8gdHJ1ZS4gRXhpdGluZy5cIik7XHJcbiAgICAgICAgbG9nLndhcm4oXCJTRVRJTlNJR0hUVkFMVUU6IFwiICsgdmllLmdldE1lc3NhZ2UoKS50b1N0cmluZygpKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZGVmIGF0dHJpYlZhbHVlcyA9IG5ld0F0dHJpYi5nZXRPYmplY3RBdHRyaWJ1dGVWYWx1ZUJlYW5zKCk7XHJcbiAgICBhdHRyaWJWYWx1ZXMuYWRkKG5ld0F0dHJpYlZhbHVlKTtcclxuICAgIG5ld0F0dHJpYi5zZXRPYmplY3RBdHRyaWJ1dGVWYWx1ZUJlYW5zKGF0dHJpYlZhbHVlcyk7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgICBuZXdBdHRyaWIgPSBvYmplY3RGYWNhZGUuc3RvcmVPYmplY3RBdHRyaWJ1dGVCZWFuKG5ld0F0dHJpYik7XHJcbiAgICB9IGNhdGNoIChFeGNlcHRpb24gdmllKSB7XHJcbiAgICAgICAgbG9nLndhcm4oXCJTRVRJTlNJR0hUVkFMVUU6IFVuYWJsZSB0byBzYXZlIGNoYW5nZXMuIEV4aXRpbmcuXCIpO1xyXG4gICAgICAgIGxvZy53YXJuKFwiU0VUSU5TSUdIVFZBTFVFOiBcIiArIHZpZS5nZXRNZXNzYWdlKCkudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSBcclxufSIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">d0ff0e0c-0d1c-4309-b2d2-89ce8055a4a1</arg>
                  <arg name="FIELD_NOTES">YCFgQ2hlY2sgYW5kIGZpbGwgaW4gT1BfUE1fQVNTRVRfUklTS1NfUkVTVUxUIC0gT1BfQVNTRVRfVE9fQkVfU1RPUFBFRA==</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">1124ddc0-cc6a-4547-83f0-1f4955ae1cac</arg>
                  <arg name="FIELD_NOTES">YCFgQ2hlY2sgYW5kIGZpbGwgaW4gT1BfUE1fQVNTRVRfUkVTVUxU</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlXG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGdyb292eS5qc29uLkpzb25CdWlsZGVyXG5pbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Nb2RpZmllZFZhbHVlXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnV0aWwuRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmluZGV4Lklzc3VlSW5kZXhpbmdTZXJ2aWNlXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IGdyb292eS5qc29uLkpzb25TbHVycGVyO1xuaW1wb3J0IGphdmEudXRpbC5NYXA7XG5cblByb3BlcnRpZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKClcbkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpXG5wcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0ge1xuXHRwcm9wZXJ0aWVzLmxvYWQoaXQpXG59XG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcblxuLy9Jc3N1ZU1hbmFnZXIgaXNzdWVNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SXNzdWVNYW5hZ2VyKClcbi8vSXNzdWUgaXNzdWUgPSBpc3N1ZU1hbmFnZXIuZ2V0SXNzdWVCeUtleUlnbm9yZUNhc2UoXCJBQVMtMjI2MTg2XCIpXG5cbmRlZiByaXNrID0gZmFsc2VcbmRlZiBjaGVjayA9IGZhbHNlXG5kZWYgY29tcGxldGVkID0gdHJ1ZVxuZGVmIG5vdF9jb21wbGV0ZWQgPSAwXG5cbklzc3VlSW5kZXhpbmdTZXJ2aWNlIFx0aXNzdWVJbmRleGluZ1NlcnZpY2UgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDb21wb25lbnQoSXNzdWVJbmRleGluZ1NlcnZpY2UpXG5kZWYgcG1zdGF0dXMgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUoXCJPUF9QTV9BU1NFVF9SRVNVTFRcIilbMF1cblxuZGVmIHJlcXVlc3RNZXRob2QgPSBcIkdFVFwiXG5kZWYgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2F1dG9tYXRpb24vQUEvdGlja2V0L1wiKyBpc3N1ZSArXCIvZ2V0Umlza0RldGVjdGVkXCJcblxubG9nLmRlYnVnIGJhc2VVUkxcblVSTCB1cmwgPSBuZXcgVVJMKGJhc2VVUkwpXG5IdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xuY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJBY2NlcHRcIiwgXCIqLypcIik7XG5jb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpO1xuY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xuY29ubmVjdGlvbi5jb25uZWN0KCk7XG5cbmRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcbmRlZiBlTGlzdCA9IG5ldyBBcnJheUxpc3QoKVxuZGVmIGVMaXN0RXJyb3JzID0gbmV3IEFycmF5TGlzdCgpXG5kZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXG5sb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG5cbmlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMFwiKSl7XG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcbiAgICBsb2cuZGVidWcgXCJFcnJvclN0cmVhbTogXCIgKyBjb25uZWN0aW9uLmdldEVycm9yU3RyZWFtKCkudG9TdHJpbmcoKVxuICAgIGxvZy5kZWJ1ZyBcImdldEhlYWRlckZpZWxkcygpOiBcIiArIGNvbm5lY3Rpb24uZ2V0SGVhZGVyRmllbGRzKClcbiAgICBkZWYgb3V0cHV0TXNnID0gKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0XG4gICAgbG9nLmRlYnVnIFwiKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0OiBcIiArIG91dHB1dE1zZ1xuXG4gICAgZGVmIGpzb25TbHVycGVyID0gbmV3IEpzb25TbHVycGVyKClcbiAgICBkZWYganNvbl9vYmplY3QgPSBqc29uU2x1cnBlci5wYXJzZVRleHQob3V0cHV0TXNnKVxuICAgIGFzc2VydCBqc29uX29iamVjdCBpbnN0YW5jZW9mIE1hcCAgXG4gICAgbG9nLmRlYnVnIFwibWVzc2FnZTogXCIgKyAganNvbl9vYmplY3QubWVzc2FnZVxuXG4gICAgZUxpc3RFcnJvcnMuYWRkKFwiRVwiKVxuICAgIGVMaXN0RXJyb3JzLmFkZChcIk9QLVNFVC1QTS1SRVNVTFRTXCIpXG4gICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBqc29uX29iamVjdC5tZXNzYWdlKVxuICAgIGVMaXN0RXJyb3JzLmFkZChlcnJvck1zZ3MpXG4gICAgZUxpc3QuYWRkKGVMaXN0RXJyb3JzKVxuXG4gICAgb3V0cHV0LmFkZChlTGlzdClcbiAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKFwiRVwiLCBvdXRwdXQudG9TdHJpbmcoKSlcbn1cblxuZGVmIHN0YXR1c1xuZGVmIGpzb25TbHVycGVyID0gbmV3IEpzb25TbHVycGVyKClcbmRlZiBqc29uX29iamVjdF9yZXNwID0ganNvblNsdXJwZXIucGFyc2UoY29ubmVjdGlvbi5nZXRJbnB1dFN0cmVhbSgpKVxuXG5yaXNrID0gKChNYXA8U3RyaW5nLFN0cmluZz4panNvbl9vYmplY3RfcmVzcCkuZ2V0KFwiREFOR0VST1VTXCIpO1xuaWYgKHJpc2sgPT0gXCJ0cnVlXCIpe1xuICAgIGxvZy5kZWJ1ZyBcIlJpc2sgdmFsdWU6XCIgKyByaXNrXG4gICAgc3RhdHVzID0gXCJSSVNLX0RFVEVDVEVEXCJcbn1lbHNle1xuICAgIGNvbXBsZXRlZCA9ICgoTWFwPFN0cmluZyxTdHJpbmc+KWpzb25fb2JqZWN0X3Jlc3ApLmdldChcIkNPTVBMRVRFRFwiKTtcbiAgICBsb2cuZGVidWcgXCJDb21wbGV0ZWQgdmFsdWU6XCIgKyBjb21wbGV0ZWRcbiAgICBpZihjb21wbGV0ZWQgPT0gXCJmYWxzZVwiKXtcbiAgICAgICAgc3RhdHVzID0gXCJNQUlOVEVOQU5DRV9LT1wiXG4gICAgfWVsc2V7XG4gICAgICAgIHN0YXR1cyA9IFwiTUFJTlRFTkFOQ0VfT0tcIlxuICAgIH1cbn1cblxuZGVmIGN1cnJlbnRVc2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0SmlyYUF1dGhlbnRpY2F0aW9uQ29udGV4dCgpLmdldExvZ2dlZEluVXNlcigpXG5kZWYgbWkgPSAoTXV0YWJsZUlzc3VlKSBpc3N1ZVxuXG5kZWYgZmllbGRDb25maWcgPSBwbXN0YXR1cy5nZXRSZWxldmFudENvbmZpZyhpc3N1ZSlcbi8vbG9nLndhcm4gXCJmaWVsZENvbmZpZzogXCIgKyBmaWVsZENvbmZpZ1xuZGVmIGNmTmV3VmFsdWUgPSBDb21wb25lbnRBY2Nlc3Nvci5vcHRpb25zTWFuYWdlci5nZXRPcHRpb25zKGZpZWxkQ29uZmlnKT8uZmluZCB7IGl0LnRvU3RyaW5nKCkgPT0gc3RhdHVzIH1cblxucG1zdGF0dXMudXBkYXRlVmFsdWUobnVsbCwgaXNzdWUsIG5ldyBNb2RpZmllZFZhbHVlKGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUocG1zdGF0dXMpLCBjZk5ld1ZhbHVlKSwgbmV3IERlZmF1bHRJc3N1ZUNoYW5nZUhvbGRlcigpKVxuaXNzdWVJbmRleGluZ1NlcnZpY2UucmVJbmRleChpc3N1ZSkgICAgIiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_COPY_ORGANIZATIONS"></arg>
                  <arg name="FIELD_COPY_SUBTASKS"></arg>
                  <arg name="FIELD_NOTES">YCFgRlNNOiBjcmVhdGUgbmV3IFJlcGFpciBpZiBjaGFyZ2FibGUgc3BhcmVzIGhhdmUgYmVlbiBhZGRlZA==</arg>
                  <arg name="FIELD_COPY_COMMENTS"></arg>
                  <arg name="FIELD_COPY_FIELDS">COPY_CUSTOM_FIELDS</arg>
                  <arg name="FIELD_LINK_TYPE">10801</arg>
                  <arg name="FIELD_FUNCTION_ID">48439710-eeb7-4e16-8b91-724f16735dd3</arg>
                  <arg name="FIELD_TARGET_ISSUE_TYPE">13001</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CloneIssue</arg>
                  <arg name="FIELD_USER_KEY"></arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CloneIssue</arg>
                  <arg name="FIELD_CONDITION"></arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                  <arg name="FIELD_TARGET_PROJECT">AAS</arg>
                  <arg name="FIELD_SELECTED_FIELDS">customfield_22607|||customfield_22602|||customfield_23237|||customfield_22600|||customfield_22822|||customfield_22629|||customfield_22814|||customfield_22601|||customfield_22813|||customfield_22613|||customfield_23203|||customfield_21909|||customfield_22700|||customfield_23918</arg>
                  <arg name="FIELD_ADDITIONAL_SCRIPT"></arg>
                  <arg name="events"></arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">f4557d40-9640-47ad-ad04-1972ca6b2217</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IFVwZGF0ZSBzdGF0dXMgb24ganVzdCBjcmVhdGVkIFJlcGFpciBpc3N1ZQ==</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">de214eee-f1d5-4b5e-9d94-e4aed63a38e7</arg>
                  <arg name="FIELD_NOTES">YCFgQ2xlYXIgY2FjaGU=</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XHJcbmltcG9ydCBncm9vdnkuanNvbi5TdHJlYW1pbmdKc29uQnVpbGRlcjtcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5DdXN0b21GaWVsZE1hbmFnZXI7XHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3I7XHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXHJcbmltcG9ydCBvcmcuYXBhY2hlLmNvbW1vbnMuY29kZWMuYmluYXJ5LkJhc2U2NDtcclxuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXHJcbmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5XHJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyXHJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxyXG5cclxuUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKVxyXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxyXG5wcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0ge1xyXG5cdHByb3BlcnRpZXMubG9hZChpdClcclxufVxyXG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcclxuXHJcbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcclxuQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpO1xyXG5kZWYgcmVxdWVzdE1ldGhvZFxyXG5kZWYgYmFzZVVSTFxyXG5cclxuLyogUkVTVCBBUEkgcGVyIEdlbmVyYXppb25lIEFsbGVnYXRvIFJhcHBvcnRvIGRpIEludGVydmVudG8gKi9cclxucmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xyXG4vKlNjcmlwdCBWYXJpYWJsZXMqL1xyXG4vL1BlciB0ZXN0IGRhIGNvbnNvbGVcclxuLy9Jc3N1ZSBpc3N1ZSA9IGlzc3VlTWFuYWdlci5nZXRJc3N1ZUJ5S2V5SWdub3JlQ2FzZShcIk9QVVQtMTQwNjJcIilcclxuYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2F1dG9tYXRpb24vY2xlYXJDYWNoZS9kYXRhT2JqZWN0XCJcclxuZGVmIGJvZHlfcmVxID0gW11cclxuVVJMIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcclxuSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTtcclxuY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xyXG5jb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcclxuY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJBY2NlcHRcIiwgXCIqLypcIik7XHJcbmNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7XHJcbmNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcclxuY29ubmVjdGlvbi5vdXRwdXRTdHJlYW1cclxubG9nLmRlYnVnIFwiYm9keV9yZXE6IFwiICsgYm9keV9yZXFcclxuY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxyXG5sb2cuZGVidWcgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW1cclxuY29ubmVjdGlvbi5jb25uZWN0KCk7XHJcblxyXG5pZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDBcIikpe1xyXG4gICAgbG9nLmRlYnVnIFwidXJsOiBcIiArIHVybFxyXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxyXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxyXG59Iiwic2NyaXB0UGF0aCI6bnVsbH0=</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="conditionList">6</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.43.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="uuid">f6159d3c-3503-47be-9a74-1e049850b0c1</arg>
                  <arg name="fieldValue"></arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">customfield_22609</arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.43.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="uuid">5a3e276c-208b-4dd3-b234-0ee4c8543081</arg>
                  <arg name="fieldValue"></arg>
                  <arg name="preconditionMode-textValue">AND</arg>
                  <arg name="fieldsList">customfield_22657</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="targetIssueTypeDefinedByCfSelection"></arg>
                  <arg name="uuid">ede3c31a-1c8e-406b-bb01-6cfb4159d0f1</arg>
                  <arg name="issueTypeId">13001</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.43.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">SAME</arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="transitionAttachmentsOperation">copy</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="targetProjectSelectedCustomField"></arg>
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">11100:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId">customfield_22609</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="subFunctions">[{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:false,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22609&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22658&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22600&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22600&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22822&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22822&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22601&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22601&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22602&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22602&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22813&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22813&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23235&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23235&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22651&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22651&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22700&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22700&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;priority&quot;,&quot;destinationFieldId&quot;:&quot;priority&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23203&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23203&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23237&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23237&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_21909&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21909&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Yes&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22681&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23401&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21908&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Maintenance Ticket&quot;,&quot;destinationFieldId&quot;:&quot;summary&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Yes&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23409&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22649&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22629&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_25704&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23906&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_25703&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23907&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_25705&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23908&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_25706&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23909&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_25707&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22689&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_25708&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22691&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22690&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22690&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Yes&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23409&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Maintenance Ticket&quot;,&quot;destinationFieldId&quot;:&quot;summary&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23401&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23237&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;REPAIR_ENABLED&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22814&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22614&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22614&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22635&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22635&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Yes&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23402&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_25709&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23917&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Key&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22763&quot;}}]</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">22601</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">71a4764e-ec7c-4759-97f5-5775b6c349ed</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IFVwZGF0ZSBzdGF0dXMgb24ganVzdCBjcmVhdGVkIFJlcGFpciBRdW90YXRpb24gaXNzdWUgJiYgR2VuZXJhdGUgT1BfUVVPVEVfTUFURVJJQUxTIGZyb20gT1BfUkVRVUlSRURfTUFURVJJQUxT</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.43.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="uuid">272c2d8d-f060-4f14-8338-da156805b688</arg>
                  <arg name="fieldValue">3_QUOTATION</arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">customfield_26601</arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.43.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="uuid">862f38a4-ef1c-49a0-8ab3-544e80586b36</arg>
                  <arg name="fieldValue"></arg>
                  <arg name="preconditionMode-textValue">AND</arg>
                  <arg name="fieldsList">customfield_22609</arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.43.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="uuid">b76f1d4f-63b0-415b-bcfc-af422cf9b00b</arg>
                  <arg name="fieldValue"></arg>
                  <arg name="preconditionMode-textValue">AND</arg>
                  <arg name="fieldsList">customfield_23923</arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.43.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="uuid">1d7ba252-ce05-414c-95d0-33000263f5bd</arg>
                  <arg name="fieldValue"></arg>
                  <arg name="preconditionMode-textValue">AND</arg>
                  <arg name="fieldsList">customfield_22657</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="targetIssueTypeDefinedByCfSelection"></arg>
                  <arg name="uuid">ede3c31a-1c8e-406b-bb01-6cfb4159d0f1</arg>
                  <arg name="issueTypeId">13001</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.43.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">SAME</arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="transitionAttachmentsOperation">copy</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="targetProjectSelectedCustomField"></arg>
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">11100:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId">customfield_22609</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="subFunctions">[{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:false,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22609&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22658&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22600&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22600&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22822&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22822&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22601&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22601&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22602&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22602&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22813&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22813&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23235&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23235&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22651&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22651&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22700&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22700&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;priority&quot;,&quot;destinationFieldId&quot;:&quot;priority&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23203&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23203&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23237&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23237&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_21909&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21909&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Yes&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22681&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23401&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21908&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Maintenance Ticket&quot;,&quot;destinationFieldId&quot;:&quot;summary&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Yes&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23409&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22649&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22629&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_25704&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23906&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_25703&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23907&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_25705&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23908&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_25706&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23909&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_25707&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22689&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_25708&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22691&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22690&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22690&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Yes&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23409&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Maintenance Ticket&quot;,&quot;destinationFieldId&quot;:&quot;summary&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23401&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23237&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;REPAIR_ENABLED&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22814&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22614&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22614&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22635&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22635&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Yes&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23402&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_25709&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23917&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Key&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22763&quot;}}]</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">22601</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">71a4764e-ec7c-4759-97f5-5775b6c349ed</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IFVwZGF0ZSBzdGF0dXMgb24ganVzdCBjcmVhdGVkIFJlcGFpciBRdW90YXRpb24gaXNzdWUgJiYgR2VuZXJhdGUgT1BfUVVPVEVfTUFURVJJQUxTIGZyb20gT1BfUkVRVUlSRURfTUFURVJJQUxT</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="uuid">5a3e276c-208b-4dd3-b234-0ee4c8543081</arg>
                  <arg name="fieldValue"></arg>
                  <arg name="preconditionMode-textValue">DISCARD</arg>
                  <arg name="fieldsList">customfield_23922</arg>
                </function>
                <function type="class">
                  <arg name="conditionList">3</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesvalueField-precondition-function</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.43.0</arg>
                  <arg name="comparisonType">1</arg>
                  <arg name="precondition">true</arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.valuefield.ValueFieldPreconditionFunction</arg>
                  <arg name="preconditionNegateResult-booleanValue"></arg>
                  <arg name="uuid">c7a5a898-34e6-4ea9-8eac-1f99ac5d1d27</arg>
                  <arg name="fieldValue">3_QUOTATION</arg>
                  <arg name="preconditionMode-textValue">AND</arg>
                  <arg name="fieldsList">customfield_26601</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">00edbe12-4a7a-49dc-b5c0-c3f556043537</arg>
                  <arg name="FIELD_NOTES">YCFgQ2xlYXIgY2FjaGU=</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxuXG4vKiBSRVNUIEFQSSBwZXIgR2VuZXJhemlvbmUgQWxsZWdhdG8gUmFwcG9ydG8gZGkgSW50ZXJ2ZW50byAqL1xucmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuLypTY3JpcHQgVmFyaWFibGVzKi9cbi8vUGVyIHRlc3QgZGEgY29uc29sZVxuLy9Jc3N1ZSBpc3N1ZSA9IGlzc3VlTWFuYWdlci5nZXRJc3N1ZUJ5S2V5SWdub3JlQ2FzZShcIk9QVVQtMTQwNjJcIilcbmJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9hdXRvbWF0aW9uL2NsZWFyQ2FjaGUvZGF0YU9iamVjdFwiXG5kZWYgYm9keV9yZXEgPSBbXVxuVVJMIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcbkh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbmNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5sb2cuZGVidWcgXCJib2R5X3JlcTogXCIgKyBib2R5X3JlcVxuY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxubG9nLmRlYnVnIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5jb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAwXCIpKXtcbiAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcbn0iLCJzY3JpcHRQYXRoIjpudWxsfQ==</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="targetIssueTypeDefinedByCfSelection"></arg>
                  <arg name="uuid">ede3c31a-1c8e-406b-bb01-6cfb4159d0f1</arg>
                  <arg name="issueTypeId">13401</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.43.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">SAME</arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="transitionAttachmentsOperation">copy</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="targetProjectSelectedCustomField"></arg>
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">11100:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId">customfield_23923</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">TRUE</arg>
                  <arg name="subFunctions">[{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:false,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23923&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22658&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22600&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22600&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22822&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22822&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22601&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22601&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22602&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22602&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22813&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22813&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23235&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23235&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22651&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22651&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22700&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22700&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;priority&quot;,&quot;destinationFieldId&quot;:&quot;priority&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22814&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22814&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23203&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23203&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23237&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23237&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_21909&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21909&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;issuekey&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22629&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Yes&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22681&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23401&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21908&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Maintenance Ticket&quot;,&quot;destinationFieldId&quot;:&quot;summary&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Yes&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23409&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22649&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22629&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23237&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23401&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23237&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21908&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_25704&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23906&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_25703&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23907&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_25705&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23908&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_25706&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23909&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_25707&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22689&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_25708&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22691&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22690&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22690&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Yes&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23409&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Maintenance Ticket&quot;,&quot;destinationFieldId&quot;:&quot;summary&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23401&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23237&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;REPAIR_ENABLED&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22814&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22635&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22635&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Yes&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23402&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_25709&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23917&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Key&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22763&quot;}}]</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">22601</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">71a4764e-ec7c-4759-97f5-5775b6c349ed</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IFVwZGF0ZSBzdGF0dXMgb24ganVzdCBjcmVhdGVkIFJlcGFpciBRdW90YXRpb24gKE1vZGVybml6YXRpb24pIGlzc3VlICYmIEdlbmVyYXRlIE9QX1FVT1RFX01BVEVSSUFMUyAgZnJvbSBPUF9NT0RFUk5JWkFUSU9OX01BVEVSSUFMUw==</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">00edbe12-4a7a-49dc-b5c0-c3f556043537</arg>
                  <arg name="FIELD_NOTES">YCFgQ2xlYXIgY2FjaGU=</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxuXG4vKiBSRVNUIEFQSSBwZXIgR2VuZXJhemlvbmUgQWxsZWdhdG8gUmFwcG9ydG8gZGkgSW50ZXJ2ZW50byAqL1xucmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuLypTY3JpcHQgVmFyaWFibGVzKi9cbi8vUGVyIHRlc3QgZGEgY29uc29sZVxuLy9Jc3N1ZSBpc3N1ZSA9IGlzc3VlTWFuYWdlci5nZXRJc3N1ZUJ5S2V5SWdub3JlQ2FzZShcIk9QVVQtMTQwNjJcIilcbmJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9hdXRvbWF0aW9uL2NsZWFyQ2FjaGUvZGF0YU9iamVjdFwiXG5kZWYgYm9keV9yZXEgPSBbXVxuVVJMIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcbkh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbmNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5sb2cuZGVidWcgXCJib2R5X3JlcTogXCIgKyBib2R5X3JlcVxuY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxubG9nLmRlYnVnIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5jb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAwXCIpKXtcbiAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcbn0iLCJzY3JpcHRQYXRoIjpudWxsfQ==</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23401</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="81" name="Modifica Analisi dei Rischi">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">545a177d-7402-4393-ad16-ddacdcc93582</arg>
                <arg name="FIELD_NOTES">YCFgT1BfVEtUX0FTU0lHTkVEX1RPICE9IEFTU0lTVEFOVA==</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlXHJcbmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvblxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvclxyXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxyXG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvbkJ1aWxkZXJcclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVNYW5hZ2VyXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTW9kaWZpZWRWYWx1ZVxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnV0aWwuRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyXHJcbmltcG9ydCBqYXZhLnRleHQuU2ltcGxlRGF0ZUZvcm1hdDtcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5pbmRleC5Jc3N1ZUluZGV4aW5nU2VydmljZVxyXG5cclxuZGVmIGFzc2lnbmVkVG8gPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfVEtUX0FTU0lHTkVEX1RPXCIpWzBdXHJcbmxvZy5kZWJ1ZyBcImlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUoYXNzaWduZWRUbyk6IFwiICsgaXNzdWUuZ2V0UGFyZW50T2JqZWN0KCkuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhc3NpZ25lZFRvKVxyXG5cclxuIWlzc3VlLmdldFBhcmVudE9iamVjdCgpLmdldEN1c3RvbUZpZWxkVmFsdWUoYXNzaWduZWRUbykudG9TdHJpbmcoKS5lcXVhbHMoXCJBU1NJU1RBTlRcIikiLCJzY3JpcHRQYXRoIjpudWxsfQ==</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="7">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field">customfield_23411</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.25.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="field3">customfield_23601</arg>
                  <arg name="field2">customfield_23600</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="field4">customfield_22693</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="241" name="Clear OP_SUPPLIER">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">92c7bf91-5f62-49c4-bba0-b13767297b6d</arg>
                <arg name="FIELD_INVERT_CONDITION"></arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_USER_IDS">arianna.fabbri</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="4">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="uuid">bc2c77b9-422d-4c36-9198-94c3d5bcc1cb</arg>
                  <arg name="field">customfield_23235</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="field2">customfield_22813</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="331" name="Genera Operazioni di Manutenzione ODS">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">a7f76fba-0345-4820-a2e4-606ba2b00e30</arg>
                <arg name="FIELD_NOTES">YCFgUE0gVGFzayBzZW56YSBQTSBvcGVyYXRpb25zIE5PTiBBU1NJU1RBTlQgKGkgdGt0IGFzc2lzdGFudCBOT04gZGV2b25vIHJpcGV0ZXJlIGxlIFBNIE9wZXJhdGlvbnMp</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="disabled">false</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlXHJcbmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvblxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvclxyXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxyXG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvbkJ1aWxkZXJcclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVNYW5hZ2VyXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTW9kaWZpZWRWYWx1ZVxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnV0aWwuRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyXHJcbmltcG9ydCBqYXZhLnRleHQuU2ltcGxlRGF0ZUZvcm1hdDtcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5pbmRleC5Jc3N1ZUluZGV4aW5nU2VydmljZVxyXG5cclxuZGVmIGFzc2lnbmVkVG8gPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfVEtUX0FTU0lHTkVEX1RPXCIpWzBdXHJcbmRlZiBwbU9wZXJhdGlvbnMgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfUE1fT1BFUkFUSU9OU19PRFNcIilbMF1cclxubG9nLmRlYnVnIFwiaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhc3NpZ25lZFRvKTogXCIgKyBpc3N1ZS5nZXRQYXJlbnRPYmplY3QoKS5nZXRDdXN0b21GaWVsZFZhbHVlKGFzc2lnbmVkVG8pXHJcblxyXG5pc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHBtT3BlcmF0aW9ucykgPT0gbnVsbCAmJiAoaXNzdWUuZ2V0UGFyZW50T2JqZWN0KCkuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhc3NpZ25lZFRvKSA9PSBudWxsIHx8ICFpc3N1ZS5nZXRQYXJlbnRPYmplY3QoKS5nZXRDdXN0b21GaWVsZFZhbHVlKGFzc2lnbmVkVG8pLnRvU3RyaW5nKCkuZXF1YWxzKFwiQVNTSVNUQU5UXCIpKSIsInNjcmlwdFBhdGgiOm51bGx9</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">8b47115e-3d2f-45b3-8019-a9a7d45a9ae4</arg>
              <arg name="FIELD_NOTES">YCFgUE0gVGFzazogZ2VuZXJhIG9wZXJhemlvbmkgZGkgbWFudXRlbnppb25l</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XHJcbmltcG9ydCBncm9vdnkuanNvbi5TdHJlYW1pbmdKc29uQnVpbGRlcjtcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5DdXN0b21GaWVsZE1hbmFnZXI7XHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3I7XHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXHJcbmltcG9ydCBvcmcuYXBhY2hlLmNvbW1vbnMuY29kZWMuYmluYXJ5LkJhc2U2NDtcclxuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXHJcbmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5XHJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyXHJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmluZGV4Lklzc3VlSW5kZXhpbmdTZXJ2aWNlXHJcblxyXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXHJcbkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpXHJcbnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7XHJcblx0cHJvcGVydGllcy5sb2FkKGl0KVxyXG59XHJcbmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKVxyXG5cclxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpO1xyXG5DdXN0b21GaWVsZE1hbmFnZXIgY3VzdG9tRmllbGRNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCk7XHJcbmRlZiByZXF1ZXN0TWV0aG9kXHJcbmRlZiBiYXNlVVJMXHJcblxyXG5kZWYgcG1PcGVyYXRpb25zID0gaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUoXCJPUF9QTV9PUEVSQVRJT05TX09EU1wiKVswXSlcclxuaWYocG1PcGVyYXRpb25zID09IG51bGwpe1xyXG5cclxuICAgIC8qIFJFU1QgQVBJIHBlciBwdWxpemlhIGNhY2hlIGlzc3VlIGxpbmthdGEgKi9cclxuICAgIHJlcXVlc3RNZXRob2QgPSBcIlBVVFwiO1xyXG4gICAgLypTY3JpcHQgVmFyaWFibGVzKi9cclxuICAgIC8vUGVyIHRlc3QgZGEgY29uc29sZVxyXG4gICAgLy9Jc3N1ZSBpc3N1ZSA9IGlzc3VlTWFuYWdlci5nZXRJc3N1ZUJ5S2V5SWdub3JlQ2FzZShcIkFBUy0zMjUzNVwiKVxyXG4gICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvcG0tc3VidGFzay9cIiArIGlzc3VlLmtleSArIFwiL29wZXJhdGlvbnNcIlxyXG4gICAgVVJMIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcclxuICAgIEh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XHJcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XHJcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcclxuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xyXG4gICAgY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcclxuICAgIGNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcclxuICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpO1xyXG4gICAgbG9nLmRlYnVnIFwidXJsOiBcIiArIHVybFxyXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxyXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxyXG5cclxuICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMFwiKSl7XHJcbiAgICAgICAgbG9nLmRlYnVnIFwidXJsOiBcIiArIHVybFxyXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcclxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXHJcbiAgICB9XHJcbiAgICBJc3N1ZUluZGV4aW5nU2VydmljZSBcdGlzc3VlSW5kZXhpbmdTZXJ2aWNlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q29tcG9uZW50KElzc3VlSW5kZXhpbmdTZXJ2aWNlKVxyXG4gICAgaXNzdWVJbmRleGluZ1NlcnZpY2UucmVJbmRleChpc3N1ZSlcclxufSIsInNjcmlwdFBhdGgiOm51bGx9</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">3f04f6dd-7343-490f-aa00-b6c36291a7d0</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="Not Done" status="Done" step="4">
              <post-functions>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="5" name="Done">
      <meta name="jira.status.id">10007</meta>
      <actions>
        <action id="71" name="Riapri Manutenzione" view="fieldscreen">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">20400</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">7d8ccd98-77a0-4688-93c3-e444762d6232</arg>
                <arg name="FIELD_NOTES">YCFgTm90IGF2YWlsYWJsZSBpZiBwYXJlbnQgdGlja2V0IGhhcyBiZWVuIGNsb3NlZCBvciBjb21wbGV0ZWQgb3Igc3VzcGVuZGVkIG9yIGNhbmNlbGVk</arg>
                <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJkZWYgc3RhdHVzVG9CbG9jayA9IFsgXCJDb21wbGV0ZWQgdG8gYmUgQ2xvc2VkXCIsIFwiQ2xvc2VkXCIsIFwiU3VzcGVuZGVkXCIsIFwiQ2FuY2VsZWRcIl07XHJcblN0cmluZyBwYXJlbnRPYmpTdGF0dXNOYW1lID0gaXNzdWUucGFyZW50T2JqZWN0Py5zdGF0dXM/Lm5hbWU7XHJcbmxvZy5pbmZvKFwicGFyZW50T2JqU3RhdHVzTmFtZSA9ICR7cGFyZW50T2JqU3RhdHVzTmFtZX1cIilcclxucGFzc2VzQ29uZGl0aW9uID0gIXN0YXR1c1RvQmxvY2suY29udGFpbnMocGFyZW50T2JqU3RhdHVzTmFtZSk7Iiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.CustomScriptCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">b608faa9-b27a-4578-b2c5-21e4edfab8fb</arg>
              <arg name="FIELD_NOTES">YCFgQ29uZmlybSBSZW9wZW4=</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlXHJcbmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvblxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvclxyXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxyXG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvbkJ1aWxkZXJcclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVNYW5hZ2VyXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTW9kaWZpZWRWYWx1ZVxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnV0aWwuRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyXHJcbmltcG9ydCBqYXZhLnRleHQuU2ltcGxlRGF0ZUZvcm1hdDtcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5pbmRleC5Jc3N1ZUluZGV4aW5nU2VydmljZVxyXG5cclxuUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKVxyXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxyXG5wcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0ge1xyXG5cdHByb3BlcnRpZXMubG9hZChpdClcclxufVxyXG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcclxuXHJcbmRlZiB3TGlzdCA9IG5ldyBBcnJheUxpc3QoKVxyXG5kZWYgdHJhbnNpdGlvbkNoZWNrID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi5jaGVja0FuZENvbmZpcm0nXS50b1N0cmluZygpKVswXVxyXG5kZWYgd2FybmluZ0VtcHR5RmllbGRzID0gbmV3IEFycmF5TGlzdCgpXHJcbmRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcclxuZGVmIHJlcXVpcmVkRmllbGRzID0gbmV3IEFycmF5TGlzdCgpXHJcblxyXG5sb2cuZGVidWcgcHJvcGVydGllc0ZpbGVcclxubG9nLmRlYnVnIHByb3BlcnRpZXNbJ2NmLnN1cHBsaWVyJ10udG9TdHJpbmcoKVxyXG5kZWYgdHJvdmF0bz1mYWxzZVxyXG5mb3IgKHMgaW4gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKHByb3BlcnRpZXNbJ2NmLnN1cHBsaWVyJ10udG9TdHJpbmcoKSkpe1xyXG4gICAgaWYgKGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUocykgIT0gbnVsbCl7XHJcbiAgICAgICAgdHJvdmF0bz10cnVlXHJcbiAgICB9XHJcbn1cclxuXHJcbi8vU2UgaWwgdGlja2V0IFx1MDBlOCBzdGF0byBlc2VndWl0byBkYSBmb3JuaXRvcmUgbGEgcmlhcGVydHVyYSBub24gZGV0ZXJtaW5hIGFsY3VuIHdhcm5pbmcuXHJcbmlmKGlzc3VlLmdldEN1c3RvbUZpZWxkVmFsdWUodHJhbnNpdGlvbkNoZWNrKS50b1N0cmluZygpLmVxdWFscyhcIlllc1wiKSB8fCB0cm92YXRvKXtcclxuICAgIC8vbG9nLmRlYnVnIFwicmV0dXJuIHRydWVcIlxyXG4gICAgcmV0dXJuIHRydWVcclxufWVsc2V7XHJcbiAgICAgICAgZGVmIHdMaXN0Q29uZmlybUVtcHR5ID0gbmV3IEFycmF5TGlzdCgpXHJcbiAgICAgICAgd0xpc3RDb25maXJtRW1wdHkuYWRkKFwiV1wiKVxyXG4gICAgICAgIHdMaXN0Q29uZmlybUVtcHR5LmFkZChcIkNPTkZJUk1fUkVPUEVOXCIpXHJcbiAgICAgICAgd0xpc3RDb25maXJtRW1wdHkuYWRkKG51bGwpXHJcblxyXG4gICAgICAgIHdMaXN0LmFkZCh3TGlzdENvbmZpcm1FbXB0eSlcclxuXHJcbiAgICAgICAgb3V0cHV0LmFkZCh3TGlzdClcclxuICAgICAgICBsb2cuZGVidWcgXCJ0aHJvdyBleGNlcHRpb246IFwiICsgb3V0cHV0LnRvU3RyaW5nKClcclxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJXXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcclxufSIsInNjcmlwdFBhdGgiOm51bGx9</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">55b452ad-e5af-46ca-a948-dfb76b57fa1b</arg>
              <arg name="FIELD_NOTES">YCFgU0FQOiB1cGRhdGUgU04gc3RhdHVzIHRvIElOUA==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XHJcbmltcG9ydCBncm9vdnkuanNvbi5TdHJlYW1pbmdKc29uQnVpbGRlcjtcclxuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyO1xyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5DdXN0b21GaWVsZDtcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlO1xyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxyXG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XHJcbmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5XHJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyXHJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbmZpZy5TdWJUYXNrTWFuYWdlclxyXG5cclxuUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKVxyXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxyXG5wcm9wZXJ0aWVzRmlsZS53aXRoSW5wdXRTdHJlYW0ge1xyXG5cdHByb3BlcnRpZXMubG9hZChpdClcclxufVxyXG5sb2cuc2V0TGV2ZWwob3JnLmFwYWNoZS5sb2c0ai5MZXZlbC5ERUJVRylcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5saW5rLklzc3VlTGlua1xyXG5cclxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpXHJcbi8vSXNzdWUgaXNzdWUgPSBpc3N1ZU1hbmFnZXIuZ2V0SXNzdWVCeUtleUlnbm9yZUNhc2UoXCJBQVMtMjM5ODI0XCIpXHJcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcclxuZGVmIHN1cHBsaWVyID0gIENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpLmdldEN1c3RvbUZpZWxkT2JqZWN0c0J5TmFtZShwcm9wZXJ0aWVzWydjZi5zdXBwbGllciddID8gcHJvcGVydGllc1snY2Yuc3VwcGxpZXInXS50b1N0cmluZygpIDogXCJPUF9TVVBQTElFUlwiKVswXVxyXG5kZWYgcmVxdWVzdE1ldGhvZFxyXG5kZWYgYmFzZVVSTFxyXG5VUkwgdXJsXHJcbkh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb25cclxuXHJcbmRlZiBib2R5X3JlcSA9IFtdXHJcbnJlcXVlc3RNZXRob2QgPSBcIlBPU1RcIjtcclxuXHJcbmJvZHlfcmVxID0gW1xyXG4gICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXksXHJcbiAgICBcInN0YXR1c1wiOiBcIklOUFwiXHJcbl0gXHJcblxyXG5iYXNlVVJMID0gXCJodHRwOi8vXCIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArIFwiL29wL3Jlc3QvamlyYS9BQS9hZnRlci9zYWxlcy9jcmVhdGUvc2VydmljZS9ub3RpZmljYXRpb25cIlxyXG5sb2cuZGVidWcgXCJib2R5X3JlcSBTTjogXCIgKyBib2R5X3JlcVxyXG5sb2cuZGVidWcgXCJiYXNlVVJMIFNOOiBcIiArIGJhc2VVUkxcclxudXJsID0gbmV3IFVSTChiYXNlVVJMKVxyXG5jb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xyXG5jb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XHJcbmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xyXG5jb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcclxuY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcclxuY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xyXG5jb25uZWN0aW9uLm91dHB1dFN0cmVhbVxyXG5jb25uZWN0aW9uLm91dHB1dFN0cmVhbS53aXRoV3JpdGVyKFwiVVRGLThcIikgeyBuZXcgU3RyZWFtaW5nSnNvbkJ1aWxkZXIoaXQsIGJvZHlfcmVxKSB9XHJcbmxvZy5kZWJ1ZyBjb25uZWN0aW9uLm91dHB1dFN0cmVhbVxyXG5jb25uZWN0aW9uLmNvbm5lY3QoKTtcclxuXHJcbmRlZiBvdXRwdXQgPSBuZXcgQXJyYXlMaXN0KClcclxuZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpXHJcbmRlZiBlTGlzdEVycm9ycyA9IG5ldyBBcnJheUxpc3QoKVxyXG5kZWYgZXJyb3JNc2dzID0gbmV3IEFycmF5TGlzdCgpXHJcblxyXG5pZiAoIWNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkudG9TdHJpbmcoKS5lcXVhbHMoXCIyMDBcIikpe1xyXG4gICAgbG9nLmRlYnVnIFwidXJsOiBcIiArIHVybFxyXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxyXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxyXG4gICAgZUxpc3RFcnJvcnMuYWRkKFwiRVwiKVxyXG4gICAgZUxpc3RFcnJvcnMuYWRkKFwiU05fVVBEQVRFXCIpXHJcbiAgICBlcnJvck1zZ3MuYWRkKGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCkgKyBcIiBcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKCkpXHJcbiAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKVxyXG4gICAgZUxpc3QuYWRkKGVMaXN0RXJyb3JzKVxyXG5cclxuICAgIG91dHB1dC5hZGQoZUxpc3QpXHJcbiAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6XCInICsgb3V0cHV0LnRvU3RyaW5nKCkgKyAnXCJ9JylcclxufSIsInNjcmlwdFBhdGgiOm51bGx9</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="4">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="append.value"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.value">Yes</arg>
                  <arg name="uuid">672cccb0-e1e5-4af5-9fda-db824d27d198</arg>
                  <arg name="field.name">customfield_23925</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesupdateIssueCustomField-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.43.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.UpdateIssueCustomFieldPostFunction</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">abdc5f30-4e69-401f-b00b-a66eb9ce6634</arg>
                  <arg name="FIELD_NOTES">YCFgSGlkZSBpc3N1ZXMgZXZlbnR1YWxseSBjcmVhdGVkIGZvciByZXBsYWNlZCBtYXRlcmlhbHMgYW5kIHJlcXVpcmVkIG1hdGVyaWFscw==</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="disabled">true</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">0a6b8edc-fe5d-475d-ad18-c45d3ab183eb</arg>
                  <arg name="FIELD_NOTES">YCFgQ2xlYXIgY2FjaGU=</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxuXG4vKiBSRVNUIEFQSSBwZXIgR2VuZXJhemlvbmUgQWxsZWdhdG8gUmFwcG9ydG8gZGkgSW50ZXJ2ZW50byAqL1xucmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuLypTY3JpcHQgVmFyaWFibGVzKi9cbi8vUGVyIHRlc3QgZGEgY29uc29sZVxuLy9Jc3N1ZSBpc3N1ZSA9IGlzc3VlTWFuYWdlci5nZXRJc3N1ZUJ5S2V5SWdub3JlQ2FzZShcIk9QVVQtMTQwNjJcIilcbmJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9hdXRvbWF0aW9uL2NsZWFyQ2FjaGUvZGF0YU9iamVjdFwiXG5kZWYgYm9keV9yZXEgPSBbXVxuVVJMIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcbkh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbmNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5sb2cuZGVidWcgXCJib2R5X3JlcTogXCIgKyBib2R5X3JlcVxuY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxubG9nLmRlYnVnIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5jb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAwXCIpKXtcbiAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcbn0iLCJzY3JpcHRQYXRoIjpudWxsfQ==</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="disabled">true</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue">50</arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="uuid">7f450205-af42-43f8-b48f-99d8bf922011</arg>
                  <arg name="field">customfield_23410</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.43.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="field3">resolution</arg>
                  <arg name="field2">customfield_23411</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="field4">customfield_22693</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="151" name="Update SN/SO">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">966eceb6-5b0d-4823-9779-1c13ed57eee9</arg>
                <arg name="FIELD_INVERT_CONDITION"></arg>
                <arg name="FIELD_NOTES">YCFgRW5hYmxlZCBmb3IgYXJpYW5uYS5mYWJicmk=</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_USER_IDS">arianna.fabbri</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">830e4fa6-bc1b-4339-b964-3db55e8b236b</arg>
              <arg name="FIELD_NOTES">YCFgU0FQOiB1cGRhdGUgU04gc3RhdHVzICYgVXBkYXRlIFNPICsgQ29uZmlybWF0aW9uIC0gRG8gbm90IHVwZGF0ZSBpZiBsYXN0IFBNIFRhc2sgY2xvc2Vk</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="5">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="211" name="Clear OP_SUPPLIER">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">92c7bf91-5f62-49c4-bba0-b13767297b6d</arg>
                <arg name="FIELD_INVERT_CONDITION"></arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_USER_IDS">arianna.fabbri</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="5">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="uuid">bc2c77b9-422d-4c36-9198-94c3d5bcc1cb</arg>
                  <arg name="field">customfield_23235</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="field2">customfield_22813</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="271" name="Maintenance Completed - Rifai" view="fieldscreen">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">20204</meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">6478ebc1-073e-417a-9a74-f32b52233da8</arg>
                <arg name="FIELD_INVERT_CONDITION"></arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_USER_IDS">arianna.fabbri</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="5">
              <post-functions>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="targetIssueTypeDefinedByCfSelection"></arg>
                  <arg name="uuid">ede3c31a-1c8e-406b-bb01-6cfb4159d0f1</arg>
                  <arg name="issueTypeId">13001</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">SAME</arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="transitionAttachmentsOperation">copy</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="targetProjectSelectedCustomField"></arg>
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">11100:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId">customfield_22609</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="subFunctions">[{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22609&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22658&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22600&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22600&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22822&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22822&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22601&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22601&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22602&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22602&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22813&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22813&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23235&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23235&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22651&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22651&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22700&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22700&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;priority&quot;,&quot;destinationFieldId&quot;:&quot;priority&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23203&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23203&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23237&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23237&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_21909&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21909&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Yes&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22681&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23401&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21908&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Maintenance Ticket&quot;,&quot;destinationFieldId&quot;:&quot;summary&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Yes&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23409&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22649&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22629&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23906&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23906&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23907&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23907&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23908&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23908&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23909&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23909&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22689&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22689&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22691&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22691&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22690&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22690&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Yes&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23409&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Maintenance Ticket&quot;,&quot;destinationFieldId&quot;:&quot;summary&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23401&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23237&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;REPAIR_ENABLED&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22814&quot;}}]</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">71a4764e-ec7c-4759-97f5-5775b6c349ed</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IFVwZGF0ZSBzdGF0dXMgb24ganVzdCBjcmVhdGVkIFJlcGFpciBRdW90YXRpb24gaXNzdWU=</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">00edbe12-4a7a-49dc-b5c0-c3f556043537</arg>
                  <arg name="FIELD_NOTES">YCFgQ2xlYXIgY2FjaGU=</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxuXG4vKiBSRVNUIEFQSSBwZXIgR2VuZXJhemlvbmUgQWxsZWdhdG8gUmFwcG9ydG8gZGkgSW50ZXJ2ZW50byAqL1xucmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuLypTY3JpcHQgVmFyaWFibGVzKi9cbi8vUGVyIHRlc3QgZGEgY29uc29sZVxuLy9Jc3N1ZSBpc3N1ZSA9IGlzc3VlTWFuYWdlci5nZXRJc3N1ZUJ5S2V5SWdub3JlQ2FzZShcIk9QVVQtMTQwNjJcIilcbmJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9hdXRvbWF0aW9uL2NsZWFyQ2FjaGUvZGF0YU9iamVjdFwiXG5kZWYgYm9keV9yZXEgPSBbXVxuVVJMIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcbkh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbmNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5sb2cuZGVidWcgXCJib2R5X3JlcTogXCIgKyBib2R5X3JlcVxuY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxubG9nLmRlYnVnIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5jb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAwXCIpKXtcbiAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcbn0iLCJzY3JpcHRQYXRoIjpudWxsfQ==</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="field.existingAttachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="targetIssueTypeDefinedByCfSelection"></arg>
                  <arg name="uuid">ede3c31a-1c8e-406b-bb01-6cfb4159d0f1</arg>
                  <arg name="issueTypeId">13401</arg>
                  <arg name="scopeType">ISSUE_LINKING</arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="field.attachmentEnablingCustomFieldId">NEVER</arg>
                  <arg name="targetIssueType">SELECTED_ISSUE_TYPE</arg>
                  <arg name="scopeSource-jql"></arg>
                  <arg name="createIssueAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="field.copyTransitionComment">false</arg>
                  <arg name="targetProjectType">SAME</arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="transitionAttachmentsOperation">copy</arg>
                  <arg name="field.issueAssignTo">ASSIGN_TO_UNASSIGNED</arg>
                  <arg name="targetProjectSelectedCustomField"></arg>
                  <arg name="destination-scopeTarget">LINK_END</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiescreatelinkedissue-function</arg>
                  <arg name="scopeDestination-linkEnd">11100:OUTWARD</arg>
                  <arg name="field.enablingCustomFieldId">customfield_23923</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="subFunctions">[{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22609&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22658&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22600&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22600&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22822&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22822&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22601&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22601&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22602&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22602&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22813&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22813&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23235&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23235&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22651&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22651&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22700&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22700&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;priority&quot;,&quot;destinationFieldId&quot;:&quot;priority&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22814&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22814&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23203&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23203&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23237&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23237&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_21909&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21909&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;issuekey&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22629&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Yes&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22681&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23401&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21908&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Maintenance Ticket&quot;,&quot;destinationFieldId&quot;:&quot;summary&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Yes&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23409&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22649&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22629&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23237&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23401&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23607&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23607&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23237&quot;,&quot;destinationFieldId&quot;:&quot;customfield_21908&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23906&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23906&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23907&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23907&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23908&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23908&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_23909&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23909&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22689&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22689&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22691&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22691&quot;}},{&quot;type&quot;:&quot;CopyFieldFromOriginToNew&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceFieldId&quot;:&quot;customfield_22690&quot;,&quot;destinationFieldId&quot;:&quot;customfield_22690&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Yes&quot;,&quot;destinationFieldId&quot;:&quot;customfield_23409&quot;}},{&quot;type&quot;:&quot;SetField&quot;,&quot;enabled&quot;:true,&quot;config&quot;:{&quot;concatenationMode&quot;:&quot;OVERWRITE&quot;,&quot;sourceValue&quot;:&quot;Maintenance Ticket&quot;,&quot;destinationFieldId&quot;:&quot;summary&quot;}}]</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">ch.beecom.jira.jsu.workflow.function.createlinkedissue.CreateLinkedIssueFunction</arg>
                  <arg name="projectId">11228</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">71a4764e-ec7c-4759-97f5-5775b6c349ed</arg>
                  <arg name="FIELD_NOTES">YCFgT1A6IFVwZGF0ZSBzdGF0dXMgb24ganVzdCBjcmVhdGVkIFJlcGFpciBRdW90YXRpb24gaXNzdWU=</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">00edbe12-4a7a-49dc-b5c0-c3f556043537</arg>
                  <arg name="FIELD_NOTES">YCFgQ2xlYXIgY2FjaGU=</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxuXG4vKiBSRVNUIEFQSSBwZXIgR2VuZXJhemlvbmUgQWxsZWdhdG8gUmFwcG9ydG8gZGkgSW50ZXJ2ZW50byAqL1xucmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuLypTY3JpcHQgVmFyaWFibGVzKi9cbi8vUGVyIHRlc3QgZGEgY29uc29sZVxuLy9Jc3N1ZSBpc3N1ZSA9IGlzc3VlTWFuYWdlci5nZXRJc3N1ZUJ5S2V5SWdub3JlQ2FzZShcIk9QVVQtMTQwNjJcIilcbmJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9hdXRvbWF0aW9uL2NsZWFyQ2FjaGUvZGF0YU9iamVjdFwiXG5kZWYgYm9keV9yZXEgPSBbXVxuVVJMIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcbkh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbmNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5sb2cuZGVidWcgXCJib2R5X3JlcTogXCIgKyBib2R5X3JlcVxuY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxubG9nLmRlYnVnIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5jb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAwXCIpKXtcbiAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcbn0iLCJzY3JpcHRQYXRoIjpudWxsfQ==</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="291" name="Set Security">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">1b7d5faf-f701-433b-bfff-28879be13db0</arg>
                <arg name="FIELD_INVERT_CONDITION"></arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_USER_IDS">arianna.fabbri|||JIRAUSER58800</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="5">
              <post-functions>
                <function type="class">
                  <arg name="FIELD_SECURITY_LEVEL_ID">11600</arg>
                  <arg name="FIELD_FUNCTION_ID">006f388b-2114-4b75-aba7-ff0b7afc0cb2</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
                  <arg name="FIELD_CONDITION"></arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="6" name="Open">
      <meta name="jira.status.id">1</meta>
      <actions>
        <action id="31" name="Confirm and Plan">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">f831b08d-05d9-4e70-bd3c-40fbd9da208c</arg>
              <arg name="FIELD_NOTES">YCFgU0FQOiB1cGRhdGUgU04gc3RhdHVz</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGQ7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZTtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXG5pbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQ7XG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmxpbmsuSXNzdWVMaW5rXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxuXG5VUkwgdXJsXG5IdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uXG5cbnJlcXVlc3RNZXRob2QgPSBcIlBPU1RcIjtcblxuZGVmIGJvZHlfcmVxID0gW11cbmJvZHlfcmVxID0gW1xuICAgIFwiaXNzdWVLZXlcIjogaXNzdWUua2V5LFxuICAgIFwic3RhdHVzXCI6IFwiUExBXCJcbl0gXG5cbmRlZiBzZXJ2aWNlTm90aWZpY2F0aW9uID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfU0FQX1NFUlZJQ0VfTk9USUZJQ0FUSU9OXCIpWzBdXG5pZihpc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHNlcnZpY2VOb3RpZmljYXRpb24pICE9IG51bGwpe1xuICAgICAgICBcbiAgICBiYXNlVVJMID0gXCJodHRwOi8vXCIgKyBwcm9wZXJ0aWVzWydhcGkuZW52J10udG9TdHJpbmcoKSArIFwiL29wL3Jlc3QvamlyYS9BQS9hZnRlci9zYWxlcy9jcmVhdGUvc2VydmljZS9ub3RpZmljYXRpb25cIlxuXG4gICAgbG9nLmRlYnVnIFwiYmFzZVVSTCBTTjogXCIgKyBiYXNlVVJMXG4gICAgbG9nLmRlYnVnIFwiYm9keV9yZXEgU046IFwiICsgYm9keV9yZXFcbiAgICB1cmwgPSBuZXcgVVJMKGJhc2VVUkwpXG4gICAgY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTtcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLThcIik7XG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJBY2NlcHRcIiwgXCIqLypcIik7XG4gICAgY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbiAgICBjb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7XG4gICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW1cbiAgICBjb25uZWN0aW9uLm91dHB1dFN0cmVhbS53aXRoV3JpdGVyKFwiVVRGLThcIikgeyBuZXcgU3RyZWFtaW5nSnNvbkJ1aWxkZXIoaXQsIGJvZHlfcmVxKSB9XG4gICAgbG9nLmRlYnVnIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG4gICAgY29ubmVjdGlvbi5jb25uZWN0KCk7XG5cbiAgICBkZWYgb3V0cHV0ID0gbmV3IEFycmF5TGlzdCgpXG4gICAgZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpXG4gICAgZGVmIGVMaXN0RXJyb3JzID0gbmV3IEFycmF5TGlzdCgpXG4gICAgZGVmIGVycm9yTXNncyA9IG5ldyBBcnJheUxpc3QoKVxuXG4gICAgaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAwXCIpICYmICFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAxXCIpKXtcbiAgICAgICAgbG9nLmRlYnVnIFwidXJsOiBcIiArIHVybFxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZUNvZGU6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcbiAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiRVwiKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJTTl9VUERBVEVcIilcbiAgICAgICAgZXJyb3JNc2dzLmFkZChjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpICsgXCIgXCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpKVxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoZXJyb3JNc2dzKVxuICAgICAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpXG5cbiAgICAgICAgb3V0cHV0LmFkZChlTGlzdClcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXG4gICAgfWVsc2V7XG4gICAgICAgIC8qKiBTRVJWSUNFIE9SREVSIENSRUFUSU9OICoqL1xuICAgICAgICBib2R5X3JlcSA9IFtcbiAgICAgICAgICAgIFwiaXNzdWVLZXlcIjogaXNzdWUua2V5XG4gICAgICAgIF0gXG4gICAgICAgIGJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9qaXJhL0FBL2FmdGVyL3NhbGVzL2NyZWF0ZS9vci91cGRhdGUvc2VydmljZS9vcmRlclwiXG5cbiAgICAgICAgbG9nLmRlYnVnIFwiYmFzZVVSTCBTTzogXCIgKyBiYXNlVVJMXG4gICAgICAgIGxvZy5kZWJ1ZyBcImJvZHlfcmVxIFNPOiBcIiArIGJvZHlfcmVxXG4gICAgICAgIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcbiAgICAgICAgY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTtcbiAgICAgICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuICAgICAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbiAgICAgICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJBY2NlcHRcIiwgXCIqLypcIik7XG4gICAgICAgIGNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7XG4gICAgICAgIGNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbiAgICAgICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW1cbiAgICAgICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxuICAgICAgICBsb2cuZGVidWcgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW1cbiAgICAgICAgY29ubmVjdGlvbi5jb25uZWN0KCk7XG5cbiAgICAgICAgb3V0cHV0ID0gbmV3IEFycmF5TGlzdCgpXG4gICAgICAgIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpXG4gICAgICAgIGVMaXN0RXJyb3JzID0gbmV3IEFycmF5TGlzdCgpXG4gICAgICAgIGVycm9yTXNncyA9IG5ldyBBcnJheUxpc3QoKVxuXG4gICAgICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMVwiKSAmJiAhY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMFwiKSl7XG4gICAgICAgICAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZUNvZGU6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpXG4gICAgICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGRlZiBvdXRwdXRNc2cgPSAoKEh0dHBVUkxDb25uZWN0aW9uKWNvbm5lY3Rpb24pLmVycm9yU3RyZWFtLnRleHRcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyBcIigoSHR0cFVSTENvbm5lY3Rpb24pY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dDogXCIgKyBvdXRwdXRNc2dcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZGVmIGpzb25TbHVycGVyID0gbmV3IEpzb25TbHVycGVyKClcbiAgICAgICAgICAgIGRlZiBqc29uX29iamVjdCA9IGpzb25TbHVycGVyLnBhcnNlVGV4dChvdXRwdXRNc2cpXG4gICAgICAgICAgICBhc3NlcnQganNvbl9vYmplY3QgaW5zdGFuY2VvZiBNYXAgIFxuICAgICAgICAgICAgbG9nLmRlYnVnIFwibWVzc2FnZTogXCIgKyAganNvbl9vYmplY3QubWVzc2FnZVxuICAgICAgICAgICAgbG9nLmRlYnVnIFwiZXJyb3JzOiBcIiArICBqc29uX29iamVjdC5lcnJvcnMudG9TdHJpbmcoKVxuXG4gICAgICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXG4gICAgICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJTT19DUkVBVEVcIilcbiAgICAgICAgICAgIGVycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArIFwiIFwiICsganNvbl9vYmplY3QuZXJyb3JzWzBdKVxuICAgICAgICAgICAgZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncylcbiAgICAgICAgICAgIGVMaXN0LmFkZChlTGlzdEVycm9ycylcblxuICAgICAgICAgICAgb3V0cHV0LmFkZChlTGlzdClcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oJ3tcIkVcIjpcIicgKyBvdXRwdXQudG9TdHJpbmcoKSArICdcIn0nKVxuICAgICAgICB9XG4gICAgfVxufSIsInNjcmlwdFBhdGgiOm51bGwsInBhcmFtZXRlcnMiOnt9fQ==</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="Not Done" status="Done" step="3">
              <post-functions>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">e05070cf-b7e1-4333-a13e-22d55ac3d7d1</arg>
                  <arg name="FIELD_NOTES">YCFgQ2xlYXIgY2FjaGU=</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxuXG4vKiBSRVNUIEFQSSBwZXIgR2VuZXJhemlvbmUgQWxsZWdhdG8gUmFwcG9ydG8gZGkgSW50ZXJ2ZW50byAqL1xucmVxdWVzdE1ldGhvZCA9IFwiUE9TVFwiO1xuLypTY3JpcHQgVmFyaWFibGVzKi9cbi8vUGVyIHRlc3QgZGEgY29uc29sZVxuLy9Jc3N1ZSBpc3N1ZSA9IGlzc3VlTWFuYWdlci5nZXRJc3N1ZUJ5S2V5SWdub3JlQ2FzZShcIk9QVVQtMTQwNjJcIilcbmJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9hdXRvbWF0aW9uL2NsZWFyQ2FjaGUvZGF0YU9iamVjdFwiXG5kZWYgYm9keV9yZXEgPSBbXVxuVVJMIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcbkh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbmNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcbmNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcbmNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5sb2cuZGVidWcgXCJib2R5X3JlcTogXCIgKyBib2R5X3JlcVxuY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5X3JlcSkgfVxubG9nLmRlYnVnIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtXG5jb25uZWN0aW9uLmNvbm5lY3QoKTtcblxuaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAwXCIpKXtcbiAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcbn0iLCJzY3JpcHRQYXRoIjpudWxsfQ==</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="101" name="Genera Operazioni di Manutenzione">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">56d285d0-3b7f-4146-a3ed-b1319013939d</arg>
                <arg name="FIELD_NOTES">YCFgUE0gVGFzayBzZW56YSBQTSBvcGVyYXRpb25z</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="disabled">false</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJjZlZhbHVlc1snT1BfUE1fT1BFUkFUSU9OU19PRFMnXSA9PSBudWxsIiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">36237cda-1b88-49eb-8e62-354285079ef6</arg>
              <arg name="FIELD_NOTES">YCFgUE0gVGFzazogZ2VuZXJhIG9wZXJhemlvbmkgZGkgbWFudXRlbnppb25l</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLkN1c3RvbUZpZWxkTWFuYWdlcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5Jc3N1ZU1hbmFnZXI7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvcjtcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLk11dGFibGVJc3N1ZVxuaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5jb2RlYy5iaW5hcnkuQmFzZTY0O1xuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxuXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXG5GaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxucHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcblx0cHJvcGVydGllcy5sb2FkKGl0KVxufVxubG9nLnNldExldmVsKG9yZy5hcGFjaGUubG9nNGouTGV2ZWwuREVCVUcpXG5cbklzc3VlTWFuYWdlciBpc3N1ZU1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRJc3N1ZU1hbmFnZXIoKTtcbkN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcbmRlZiByZXF1ZXN0TWV0aG9kXG5kZWYgYmFzZVVSTFxuXG4vKiBSRVNUIEFQSSBwZXIgcHVsaXppYSBjYWNoZSBpc3N1ZSBsaW5rYXRhICovXG5yZXF1ZXN0TWV0aG9kID0gXCJQVVRcIjtcbi8qU2NyaXB0IFZhcmlhYmxlcyovXG4vL1BlciB0ZXN0IGRhIGNvbnNvbGVcbi8vSXNzdWUgaXNzdWUgPSBpc3N1ZU1hbmFnZXIuZ2V0SXNzdWVCeUtleUlnbm9yZUNhc2UoXCJBQVMtMzI1MzVcIilcbmJhc2VVUkwgPSBcImh0dHA6Ly9cIiArIHByb3BlcnRpZXNbJ2FwaS5lbnYnXS50b1N0cmluZygpICsgXCIvb3AvcmVzdC9qaXJhL0FBL3BtLXN1YnRhc2svXCIgKyBpc3N1ZS5rZXkgKyBcIi9vcGVyYXRpb25zXCJcblVSTCB1cmwgPSBuZXcgVVJMKGJhc2VVUkwpXG5IdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKXVybC5vcGVuQ29ubmVjdGlvbigpO1xuY29ubmVjdGlvbi5zZXRSZXF1ZXN0TWV0aG9kKHJlcXVlc3RNZXRob2QpO1xuY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLThcIik7XG5jb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkFjY2VwdFwiLCBcIiovKlwiKTtcbmNvbm5lY3Rpb24uc2V0RG9PdXRwdXQodHJ1ZSk7XG5jb25uZWN0aW9uLnNldERvSW5wdXQodHJ1ZSk7XG5jb25uZWN0aW9uLmNvbm5lY3QoKTtcbmxvZy5kZWJ1ZyBcInVybDogXCIgKyB1cmxcbmxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcbmxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcblxuaWYgKCFjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkuZXF1YWxzKFwiMjAwXCIpKXtcbiAgICBsb2cuZGVidWcgXCJ1cmw6IFwiICsgdXJsXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxuICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlTWVzc2FnZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VNZXNzYWdlKClcbn0iLCJzY3JpcHRQYXRoIjpudWxsfQ==</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">56673115-3813-4abf-96a6-27892999a488</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="6">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="231" name="Clear OP_SUPPLIER">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">92c7bf91-5f62-49c4-bba0-b13767297b6d</arg>
                <arg name="FIELD_INVERT_CONDITION"></arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_USER_IDS">arianna.fabbri</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="6">
              <post-functions>
                <function type="class">
                  <arg name="scopeSource-linkEnd"></arg>
                  <arg name="maxAllowed-integerValue"></arg>
                  <arg name="runAsUser-user">atlassian_faac_service_desk</arg>
                  <arg name="uuid">bc2c77b9-422d-4c36-9198-94c3d5bcc1cb</arg>
                  <arg name="field">customfield_23235</arg>
                  <arg name="scopeType">SAME</arg>
                  <arg name="destination-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="full.module.key">com.googlecode.jira-suite-utilitiesclearFieldValue-function</arg>
                  <arg name="scopeDestination-linkEnd"></arg>
                  <arg name="jsuWorkflowParamsVersion-textValue">2.33.0</arg>
                  <arg name="preconditionAwareFunctionMode-textValue">ALWAYS</arg>
                  <arg name="source-scopeTarget">ISSUE_IN_TRANSITION</arg>
                  <arg name="scopeDestination-jql"></arg>
                  <arg name="class.name">com.googlecode.jsu.workflow.function.ClearFieldValuePostFunction</arg>
                  <arg name="field2">customfield_22813</arg>
                  <arg name="scopeSource-jql"></arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="7" name="Asset Check">
      <meta name="jira.status.id">14730</meta>
      <actions>
        <action id="61" name="Check Completed" view="fieldscreen">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id">20400</meta>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">d776b1a4-116c-43ec-b6a8-f2045af9fc90</arg>
              <arg name="FIELD_NOTES">YCFgT1A6IENoZWNrIFJlcXVpcmVkIEZpZWxkcw==</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">8ab72aa0-1422-40dd-9c13-8008a9e2b0dd</arg>
              <arg name="FIELD_NOTES">YCFgQ29uZmlybSBSaXNrIEFuYWx5c2lz</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">b3b3e533-3478-4dec-85eb-5fed7a6f02ec</arg>
              <arg name="FIELD_NOTES">YCFgT3BlcmF0aW9uUG9ydGFsIC0gQ2FsbCB0byBCRSB2YWxpZGF0b3I=</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5JbnZhbGlkSW5wdXRFeGNlcHRpb25cclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuQ3VzdG9tRmllbGRcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5DdXN0b21GaWVsZE1hbmFnZXJcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS53b3JrZmxvdy5KaXJhV29ya2Zsb3dcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuc2NyZWVuLkZpZWxkU2NyZWVuTGF5b3V0SXRlbVxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5zY3JlZW4uRmllbGRTY3JlZW5UYWJcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuRmllbGRNYW5hZ2VyXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLnNjcmVlbi5GaWVsZFNjcmVlblxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5zY3JlZW4uRmllbGRTY3JlZW5NYW5hZ2VyXHJcbmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LmxvYWRlci5BY3Rpb25EZXNjcmlwdG9yXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuY29tcG9uZW50LkNvbXBvbmVudEFjY2Vzc29yXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEud29ya2Zsb3cuV29ya2Zsb3dNYW5hZ2VyXHJcbmltcG9ydCBncm9vdnkuanNvbi5TdHJlYW1pbmdKc29uQnVpbGRlcjtcclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXI7XHJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbDtcclxuXHJcbmRlZiBiYXNlVVJMXHJcbmRlZiByZXNwb25zZUJvZHlcclxuXHJcbnRyeSB7XHJcbiAgICBQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXHJcbiAgICBGaWxlIHByb3BlcnRpZXNGaWxlID0gbmV3IEZpbGUoU2NyaXB0UnVubmVySW1wbC5nZXRQbHVnaW5Db21wb25lbnQoU2NyaXB0UnVubmVyKS5nZXRSb290c0ZvckRpc3BsYXkoKSArICcvb3Bwcm9qZWN0LnByb3BlcnRpZXMnKVxyXG4gICAgcHJvcGVydGllc0ZpbGUud2l0aElucHV0U3RyZWFtIHtcclxuICAgICAgICBwcm9wZXJ0aWVzLmxvYWQoaXQpXHJcbiAgICB9XHJcblxyXG4gICAgZGVmIHNlcnZlckJhc2UgPSBTdHJpbmcuZm9ybWF0KFwiaHR0cDovLyVzL29wXCIsIHByb3BlcnRpZXNbJ2FwaS5lbnYnXSlcclxuICAgIGRlZiB0cmFuc2FjdGlvbkFjdGlvbiA9IFwidmFsaWRhdG9yc1wiXHJcblxyXG4gICAgVVJMIHVybFxyXG4gICAgZGVmIHJlcXVlc3RNZXRob2QgPSBcIlBPU1RcIjtcclxuXHJcbiAgICBiYXNlVVJMID0gU3RyaW5nLmZvcm1hdChcIiVzL3Jlc3QvamlyYS93b3JrZmxvd3MvJXMvJXNcIiwgc2VydmVyQmFzZSwgdHJhbnNpZW50VmFycy5hY3Rpb25JZCwgdHJhbnNhY3Rpb25BY3Rpb24pO1xyXG5cclxuICAgIGxvZy5kZWJ1ZyhcIkNvbXBvc2luZyBiYXNlVVJMIGFzICcke2Jhc2VVUkx9J1wiKTtcclxuXHJcbiAgICBXb3JrZmxvd01hbmFnZXIgd29ya2Zsb3dNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0V29ya2Zsb3dNYW5hZ2VyKCk7XHJcbiAgICBKaXJhV29ya2Zsb3cgamlyYVdvcmtmbG93ID0gd29ya2Zsb3dNYW5hZ2VyLmdldFdvcmtmbG93KHRyYW5zaWVudFZhcnMuaXNzdWUpO1xyXG5cclxuICAgIEN1c3RvbUZpZWxkTWFuYWdlciBjdXN0b21GaWVsZE1hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKTtcclxuICAgIFxyXG4gICAgbG9nLmRlYnVnKCBqaXJhV29ya2Zsb3cuZ2V0TmFtZSgpKVxyXG4gICAgXHJcbiAgICBBY3Rpb25EZXNjcmlwdG9yIGFkID0gd29ya2Zsb3dNYW5hZ2VyLmdldEFjdGlvbkRlc2NyaXB0b3IodHJhbnNpZW50VmFycy5pc3N1ZSwgdHJhbnNpZW50VmFycy5hY3Rpb25JZCk7XHJcblxyXG4gICAgbG9nLmRlYnVnKFwiQWN0aW9uRGVzY3JpcHRvciBOYW1lOiAke2FkLmdldE5hbWUoKX1cIikgICAgICAgICAgICAgICAgICAgICAvLyBHZW5lcmEgUmFwcG9ydG8gZGkgSW50ZXJ2ZW50byBGQUFDXHJcbiAgICBsb2cuZGVidWcoXCJBY3Rpb25EZXNjcmlwdG9yIE1ldGFBdHRyczogJHthZC5nZXRNZXRhQXR0cmlidXRlcygpfVwiKSAgICAgIC8vIHtvcHNiYXItc2VxdWVuY2U9MTAsIGppcmEuZGVzY3JpcHRpb249LCBqaXJhLmZpZWxkc2NyZWVuLmlkPTE5OTEwfVxyXG5cclxuICAgIGRlZiBhZE1ldGEgPSBhZC5nZXRNZXRhQXR0cmlidXRlcygpO1xyXG4gICAgZGVmIGZpZWxkU2NyZWVuSWQgPSBMb25nLnZhbHVlT2YoYWRNZXRhLmdldChcImppcmEuZmllbGRzY3JlZW4uaWRcIikudG9TdHJpbmcoKSk7XHJcbiAgICBsb2cuZGVidWcoXCJGaWVsZCBzY3JlZW4gaWQ6ICR7ZmllbGRTY3JlZW5JZH1cIilcclxuXHJcbiAgICBNYXA8U3RyaW5nLCBPYmplY3Q+IGN1c3RvbUZpZWxkTWFwID0gbmV3IEhhc2hNYXA8U3RyaW5nLE9iamVjdD4oKTtcclxuXHJcbiAgICBGaWVsZFNjcmVlbk1hbmFnZXIgZmllbGRTY3JlZW5NYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q29tcG9uZW50KEZpZWxkU2NyZWVuTWFuYWdlci5jbGFzcyk7XHJcbiAgICBGaWVsZFNjcmVlbiBmaWVsZFNjcmVlbiA9IGZpZWxkU2NyZWVuTWFuYWdlci5nZXRGaWVsZFNjcmVlbihmaWVsZFNjcmVlbklkKTtcclxuICAgIGZvcihGaWVsZFNjcmVlblRhYiBmc3QgOiBmaWVsZFNjcmVlbi5nZXRUYWJzKCkpe1xyXG4gICAgICAgIExpc3Q8RmllbGRTY3JlZW5MYXlvdXRJdGVtPiBxd2UgPSBmc3QuZ2V0RmllbGRTY3JlZW5MYXlvdXRJdGVtcygpO1xyXG4gICAgICAgIGZvciAoRmllbGRTY3JlZW5MYXlvdXRJdGVtIGZzbGk6IHF3ZSl7XHJcbiAgICAgICAgICAgIGlmIChmc2xpLmdldEZpZWxkSWQoKSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBDdXN0b21GaWVsZCBjdXN0b21GaWVsZCA9IGN1c3RvbUZpZWxkTWFuYWdlci5nZXRDdXN0b21GaWVsZE9iamVjdChmc2xpLmdldEZpZWxkSWQoKSk7XHJcbiAgICAgICAgICAgIGlmIChjdXN0b21GaWVsZCA9PSBudWxsKXtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlZiBjdXN0b21GaWVsZFZhbHVlID0gaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShjdXN0b21GaWVsZCk7XHJcbiAgICAgICAgICAgIGN1c3RvbUZpZWxkTWFwLnB1dChmc2xpLmdldEZpZWxkSWQoKSwgY3VzdG9tRmllbGRWYWx1ZSA9PSBudWxsID8gbnVsbCA6IGN1c3RvbUZpZWxkVmFsdWUudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgfSAgICBcclxuICAgIH1cclxuXHJcbiAgICBsb2cuZGVidWcoXCJjdXN0b21GaWVsZE1hcDogJHtjdXN0b21GaWVsZE1hcH1cIilcclxuXHJcbiAgICBkZWYgYm9keVJlcSA9IFsgXHJcbiAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXksXHJcbiAgICAgICAgXCJhY3Rpb25OYW1lXCI6IGFkLmdldE5hbWUoKSxcclxuICAgICAgICBcImppcmFXb3JrZmxvd05hbWVcIjogamlyYVdvcmtmbG93LmdldE5hbWUoKSxcclxuICAgICAgICBcImN1c3RvbUZpZWxkTWFwXCI6IGN1c3RvbUZpZWxkTWFwLFxyXG4gICAgICAgIFwicHJvcGVydGllc1wiOiBwcm9wZXJ0aWVzXHJcbiAgICBdO1xyXG5cclxuICAgIGxvZy5kZWJ1ZyhcIkNhbGxpbmcgWyR7cmVxdWVzdE1ldGhvZH1dICR7YmFzZVVSTH0gd2l0aCBib2R5ICR7Ym9keVJlcX1cIik7XHJcblxyXG4gICAgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxyXG4gICAgSHR0cFVSTENvbm5lY3Rpb24gY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbikgdXJsLm9wZW5Db25uZWN0aW9uKCk7XHJcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XHJcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcclxuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xyXG4gICAgY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcclxuICAgIGNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcclxuICAgIGNvbm5lY3Rpb24ub3V0cHV0U3RyZWFtLndpdGhXcml0ZXIoXCJVVEYtOFwiKSB7IG5ldyBTdHJlYW1pbmdKc29uQnVpbGRlcihpdCwgYm9keVJlcSkgfVxyXG4gICAgXHJcbiAgICBjb25uZWN0aW9uLmNvbm5lY3QoKTtcclxuICAgIGRlZiByZXNwb25zZUNvZGUgPSBjb25uZWN0aW9uLmdldFJlc3BvbnNlQ29kZSgpLnRvU3RyaW5nKCkgICAgXHJcbiAgICAgICAgXHJcbiAgICBsb2cuZGVidWcoXCJSZXNwb25zZSBIdHRwU3RhdHVzQ29kZTogJHtyZXNwb25zZUNvZGV9XCIpXHJcbiAgICAgICAgXHJcbiAgICAvLyBJZiBiYWNrZW5kIHJlcGxpZXMgd2l0aCAyMDAgdGhlbiB0aGUgY29uZGl0aW9uIGlzIHBhc3NlZCAgICBcclxuICAgIGlmKFwiMjAwXCIuZXF1YWxzKHJlc3BvbnNlQ29kZSkpe1xyXG4gICAgICAgIGxvZy5kZWJ1ZyhcIlZhbGlkYXRvciBwYXNzZWQhXCIpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBMaXN0PFN0cmluZz4gb3V0cHV0RXJyb3JzID0gbmV3IEFycmF5TGlzdDw+KCk7XHJcbiAgICAgICAgTGlzdDxTdHJpbmc+IG91dHB1dFdhcm5pbmdzID0gbmV3IEFycmF5TGlzdDw+KCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmVzcG9uc2VCb2R5ID0gKChIdHRwVVJMQ29ubmVjdGlvbikgY29ubmVjdGlvbikuZXJyb3JTdHJlYW0udGV4dDtcclxuICAgICAgICBsb2cuZGVidWcoXCJWYWxpZGF0b3Igbm90IHBhc3NlZCwgcmVzcG9uc2VCb2R5OiAke3Jlc3BvbnNlQm9keX1cIik7XHJcblxyXG4gICAgICAgIC8vIHRlc3Rpbmcgd2l0aG91dCByZWRlcGxveWluZyBlYWNoIHRpbWVcclxuICAgICAgICAvL3Jlc3BvbnNlQm9keSA9ICd7XCJXXCI6IFwiW1tbVywgQ09ORklSTV9SSVNLX0FOQUxZU0lTLCBudWxsXV1dXCJ9J1xyXG5cclxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKHJlc3BvbnNlQm9keSk7XHJcbiAgICB9XHJcbn0gY2F0Y2ggKEV4Y2VwdGlvbiBlKXtcclxuICAgIC8vVGhpcyBpcyBhbiBleGNlcHRpb24gaW4gdGhlIHNjcmlwdFxyXG4gICAgbG9nLmRlYnVnKFwiRXhjZXB0aW9uIHJhaXNlZCBjYWxsaW5nIGVuZHBvaW50ICR7YmFzZVVSTH1cIilcclxuICAgIGxvZy5lcnJvcihlKVxyXG4gICAgaWYgKGUgaW5zdGFuY2VvZiBJbnZhbGlkSW5wdXRFeGNlcHRpb24pe1xyXG4gICAgICAgIHRocm93IGU7XHJcbiAgICB9XHJcbiAgICB0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCd7XCJFXCI6IFwiW1tbIFZhbGlkYXRvciBmYWlsZWQgXV1dXCIgfScpO1xyXG59Iiwic2NyaXB0UGF0aCI6bnVsbCwicGFyYW1ldGVycyI6e319</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="null" status="null" step="4">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="FIELD_FUNCTION_ID">d0ff0e0c-0d1c-4309-b2d2-89ce8055a4a1</arg>
                  <arg name="FIELD_NOTES">YCFgQ2hlY2sgYW5kIGZpbGwgaW4gT1BfUE1fQVNTRVRfUklTS1NfUkVTVUxUIC0gT1BfQVNTRVRfVE9fQkVfU1RPUFBFRA==</arg>
                  <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.CustomScriptFunction</arg>
                  <arg name="disabled">true</arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="121" name="Back to Conf&amp;Planned">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <results>
            <unconditional-result old-status="null" status="null" step="3">
              <post-functions>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="341" name="Genera Operazioni di Manutenzione ODS">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">7837ddc9-2bc7-4753-a1ad-2f15075bbddc</arg>
                <arg name="FIELD_NOTES">YCFgUE0gVGFzayBzZW56YSBQTSBvcGVyYXRpb25zIE5PTiBBU1NJU1RBTlQgKGkgdGt0IGFzc2lzdGFudCBOT04gZGV2b25vIHJpcGV0ZXJlIGxlIFBNIE9wZXJhdGlvbnMp</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="disabled">false</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlXHJcbmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvblxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvclxyXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxyXG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvbkJ1aWxkZXJcclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVNYW5hZ2VyXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTW9kaWZpZWRWYWx1ZVxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnV0aWwuRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyXHJcbmltcG9ydCBqYXZhLnRleHQuU2ltcGxlRGF0ZUZvcm1hdDtcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5pbmRleC5Jc3N1ZUluZGV4aW5nU2VydmljZVxyXG5cclxuZGVmIGFzc2lnbmVkVG8gPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfVEtUX0FTU0lHTkVEX1RPXCIpWzBdXHJcbmRlZiBwbU9wZXJhdGlvbnMgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfUE1fT1BFUkFUSU9OU19PRFNcIilbMF1cclxubG9nLmRlYnVnIFwiaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhc3NpZ25lZFRvKTogXCIgKyBpc3N1ZS5nZXRQYXJlbnRPYmplY3QoKS5nZXRDdXN0b21GaWVsZFZhbHVlKGFzc2lnbmVkVG8pXHJcblxyXG5pc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHBtT3BlcmF0aW9ucykgPT0gbnVsbCAmJiAoaXNzdWUuZ2V0UGFyZW50T2JqZWN0KCkuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhc3NpZ25lZFRvKSA9PSBudWxsIHx8ICFpc3N1ZS5nZXRQYXJlbnRPYmplY3QoKS5nZXRDdXN0b21GaWVsZFZhbHVlKGFzc2lnbmVkVG8pLnRvU3RyaW5nKCkuZXF1YWxzKFwiQVNTSVNUQU5UXCIpKSIsInNjcmlwdFBhdGgiOm51bGx9</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">8b9939c3-4e05-46fa-a583-7e053e5251af</arg>
              <arg name="FIELD_NOTES">YCFgUE0gVGFzazogZ2VuZXJhIG9wZXJhemlvbmkgZGkgbWFudXRlbnppb25l</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XHJcbmltcG9ydCBncm9vdnkuanNvbi5TdHJlYW1pbmdKc29uQnVpbGRlcjtcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5DdXN0b21GaWVsZE1hbmFnZXI7XHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3I7XHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXHJcbmltcG9ydCBvcmcuYXBhY2hlLmNvbW1vbnMuY29kZWMuYmluYXJ5LkJhc2U2NDtcclxuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXHJcbmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5XHJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyXHJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmluZGV4Lklzc3VlSW5kZXhpbmdTZXJ2aWNlXHJcblxyXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXHJcbkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpXHJcbnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7XHJcblx0cHJvcGVydGllcy5sb2FkKGl0KVxyXG59XHJcbmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKVxyXG5cclxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpO1xyXG5DdXN0b21GaWVsZE1hbmFnZXIgY3VzdG9tRmllbGRNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCk7XHJcbmRlZiByZXF1ZXN0TWV0aG9kXHJcbmRlZiBiYXNlVVJMXHJcblxyXG5kZWYgcG1PcGVyYXRpb25zID0gaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUoXCJPUF9QTV9PUEVSQVRJT05TX09EU1wiKVswXSlcclxuaWYocG1PcGVyYXRpb25zID09IG51bGwpe1xyXG5cclxuICAgIC8qIFJFU1QgQVBJIHBlciBwdWxpemlhIGNhY2hlIGlzc3VlIGxpbmthdGEgKi9cclxuICAgIHJlcXVlc3RNZXRob2QgPSBcIlBVVFwiO1xyXG4gICAgLypTY3JpcHQgVmFyaWFibGVzKi9cclxuICAgIC8vUGVyIHRlc3QgZGEgY29uc29sZVxyXG4gICAgLy9Jc3N1ZSBpc3N1ZSA9IGlzc3VlTWFuYWdlci5nZXRJc3N1ZUJ5S2V5SWdub3JlQ2FzZShcIkFBUy0zMjUzNVwiKVxyXG4gICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvcG0tc3VidGFzay9cIiArIGlzc3VlLmtleSArIFwiL29wZXJhdGlvbnNcIlxyXG4gICAgVVJMIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcclxuICAgIEh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XHJcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XHJcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcclxuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xyXG4gICAgY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcclxuICAgIGNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcclxuICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpO1xyXG4gICAgbG9nLmRlYnVnIFwidXJsOiBcIiArIHVybFxyXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxyXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxyXG5cclxuICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMFwiKSl7XHJcbiAgICAgICAgbG9nLmRlYnVnIFwidXJsOiBcIiArIHVybFxyXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcclxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXHJcbiAgICB9XHJcbiAgICBJc3N1ZUluZGV4aW5nU2VydmljZSBcdGlzc3VlSW5kZXhpbmdTZXJ2aWNlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q29tcG9uZW50KElzc3VlSW5kZXhpbmdTZXJ2aWNlKVxyXG4gICAgaXNzdWVJbmRleGluZ1NlcnZpY2UucmVJbmRleChpc3N1ZSlcclxufSIsInNjcmlwdFBhdGgiOm51bGx9</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">0870052d-fbad-4ee4-aa1a-8d4cacc9726e</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXJcclxuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuQ3VzdG9tRmllbGRNYW5hZ2VyXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEud29ya2Zsb3cuSmlyYVdvcmtmbG93XHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLnNjcmVlbi5GaWVsZFNjcmVlbkxheW91dEl0ZW1cclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuc2NyZWVuLkZpZWxkU2NyZWVuVGFiXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkZpZWxkTWFuYWdlclxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmZpZWxkcy5zY3JlZW4uRmllbGRTY3JlZW5cclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5maWVsZHMuc2NyZWVuLkZpZWxkU2NyZWVuTWFuYWdlclxyXG5pbXBvcnQgY29tLm9wZW5zeW1waG9ueS53b3JrZmxvdy5sb2FkZXIuQWN0aW9uRGVzY3JpcHRvclxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvclxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLndvcmtmbG93LldvcmtmbG93TWFuYWdlclxyXG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uU3RyZWFtaW5nSnNvbkJ1aWxkZXI7XHJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyO1xyXG5pbXBvcnQgY29tLm9ucmVzb2x2ZS5zY3JpcHRydW5uZXIucnVubmVyLlNjcmlwdFJ1bm5lckltcGw7XHJcblxyXG5kZWYgcmVxdWVzdE1ldGhvZFxyXG5kZWYgYmFzZVVSTFxyXG5kZWYgcmVzcG9uc2VDb2RlXHJcbmRlZiByZXNwb25zZU1lc3NhZ2VcclxuZGVmIGJvZHlSZXEgPSBbXVxyXG5kZWYgYnJcclxuTWFwPFN0cmluZywgT2JqZWN0PiBjdXN0b21GaWVsZE1hcCA9IG5ldyBIYXNoTWFwPFN0cmluZyxPYmplY3Q+KCk7XHJcblxyXG50cnkge1xyXG4gICAgUHJvcGVydGllcyBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnRpZXMoKVxyXG4gICAgRmlsZSBwcm9wZXJ0aWVzRmlsZSA9IG5ldyBGaWxlKFNjcmlwdFJ1bm5lckltcGwuZ2V0UGx1Z2luQ29tcG9uZW50KFNjcmlwdFJ1bm5lcikuZ2V0Um9vdHNGb3JEaXNwbGF5KCkgKyAnL29wcHJvamVjdC5wcm9wZXJ0aWVzJylcclxuICAgIHByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7XHJcbiAgICAgICAgcHJvcGVydGllcy5sb2FkKGl0KVxyXG4gICAgfVxyXG5cclxuICAgIGRlZiBzZXJ2ZXJCYXNlID0gU3RyaW5nLmZvcm1hdChcImh0dHA6Ly8lcy9vcFwiLCBwcm9wZXJ0aWVzWydhcGkuZW52J10pXHJcbiAgICBkZWYgdHJhbnNhY3Rpb25BY3Rpb24gPSBcInZhbGlkYXRvcnNcIlxyXG5cclxuICAgIFVSTCB1cmxcclxuICAgIEh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb25cclxuICAgIHJlcXVlc3RNZXRob2QgPSBcIlBPU1RcIjtcclxuXHJcbiAgICBiYXNlVVJMID0gU3RyaW5nLmZvcm1hdChcIiVzL3Jlc3QvamlyYS93b3JrZmxvd3MvJXMvJXNcIiwgc2VydmVyQmFzZSwgdHJhbnNpZW50VmFycy5hY3Rpb25JZCwgdHJhbnNhY3Rpb25BY3Rpb24pO1xyXG5cclxuICAgIGxvZy5kZWJ1ZyBiYXNlVVJMO1xyXG5cclxuICAgIFdvcmtmbG93TWFuYWdlciB3b3JrZmxvd01hbmFnZXIgPSBDb21wb25lbnRBY2Nlc3Nvci5nZXRXb3JrZmxvd01hbmFnZXIoKTtcclxuICAgIEppcmFXb3JrZmxvdyBqaXJhV29ya2Zsb3cgPSB3b3JrZmxvd01hbmFnZXIuZ2V0V29ya2Zsb3codHJhbnNpZW50VmFycy5pc3N1ZSk7XHJcblxyXG4gICAgQ3VzdG9tRmllbGRNYW5hZ2VyIGN1c3RvbUZpZWxkTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldEN1c3RvbUZpZWxkTWFuYWdlcigpO1xyXG4gICAgXHJcbiAgICBsb2cuZGVidWcgamlyYVdvcmtmbG93LmdldE5hbWUoKTtcclxuICAgIFxyXG4gICAgQWN0aW9uRGVzY3JpcHRvciBhZCA9IHdvcmtmbG93TWFuYWdlci5nZXRBY3Rpb25EZXNjcmlwdG9yKHRyYW5zaWVudFZhcnMuaXNzdWUsIHRyYW5zaWVudFZhcnMuYWN0aW9uSWQpO1xyXG5cclxuICAgIGxvZy5kZWJ1ZyBhZC5nZXROYW1lKCkgICAgICAgICAgICAgIC8vR2VuZXJhIE9wZXJhemlvbmkgZGkgTWFudXRlbnppb25lIE9EU1xyXG4gICAgbG9nLmRlYnVnIGFkLmdldE1ldGFBdHRyaWJ1dGVzKCkgICAgLy97b3BzYmFyLXNlcXVlbmNlPTEwLCBqaXJhLmRlc2NyaXB0aW9uPSwgamlyYS5maWVsZHNjcmVlbi5pZD0xOTkxMH1cclxuXHJcbiAgICBkZWYgYWRNZXRhID0gYWQuZ2V0TWV0YUF0dHJpYnV0ZXMoKTtcclxuICAgIGRlZiBmaWVsZFNjcmVlbklkID0gYWRNZXRhLmdldChcImppcmEuZmllbGRzY3JlZW4uaWRcIik7XHJcbiAgICBsb2cuZGVidWcgXCJGaWVsZCBzY3JlZW4gaWQ6IFwiICsgZmllbGRTY3JlZW5JZFxyXG5cclxuICAgIGlmKGZpZWxkU2NyZWVuSWQgIT0gbnVsbCAmJiBmaWVsZFNjcmVlbklkICE9IFwiXCIpIHtcclxuICAgICAgICBGaWVsZFNjcmVlbk1hbmFnZXIgZmllbGRTY3JlZW5NYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q29tcG9uZW50KEZpZWxkU2NyZWVuTWFuYWdlci5jbGFzcyk7XHJcbiAgICAgICAgRmllbGRTY3JlZW4gZmllbGRTY3JlZW4gPSBmaWVsZFNjcmVlbk1hbmFnZXIuZ2V0RmllbGRTY3JlZW4oTG9uZy52YWx1ZU9mKGZpZWxkU2NyZWVuSWQudG9TdHJpbmcoKSkpO1xyXG4gICAgICAgIExpc3Q8RmllbGRTY3JlZW5UYWI+IGZzdHMgPSBmaWVsZFNjcmVlbi5nZXRUYWJzKCk7XHJcbiAgICAgICAgZm9yIChGaWVsZFNjcmVlblRhYiBmc3QgOiBmc3RzKSB7XHJcbiAgICAgICAgICAgIExpc3Q8RmllbGRTY3JlZW5MYXlvdXRJdGVtPiBxd2UgPSBmc3QuZ2V0RmllbGRTY3JlZW5MYXlvdXRJdGVtcygpO1xyXG4gICAgICAgICAgICBmb3IgKEZpZWxkU2NyZWVuTGF5b3V0SXRlbSBmc2xpIDogcXdlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZnNsaS5nZXRGaWVsZElkKCkgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgQ3VzdG9tRmllbGQgY3VzdG9tRmllbGQgPSBjdXN0b21GaWVsZE1hbmFnZXIuZ2V0Q3VzdG9tRmllbGRPYmplY3QoZnNsaS5nZXRGaWVsZElkKCkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1c3RvbUZpZWxkID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRlZiBjdXN0b21GaWVsZFZhbHVlID0gaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShjdXN0b21GaWVsZCk7XHJcbiAgICAgICAgICAgICAgICBjdXN0b21GaWVsZE1hcC5wdXQoZnNsaS5nZXRGaWVsZElkKCksIGN1c3RvbUZpZWxkVmFsdWUgPT0gbnVsbCA/IG51bGwgOiBjdXN0b21GaWVsZFZhbHVlLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY3VzdG9tRmllbGRNYXAgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgbG9nLmRlYnVnIGN1c3RvbUZpZWxkTWFwXHJcblxyXG4gICAgYm9keVJlcSA9IFsgXHJcbiAgICAgICAgXCJpc3N1ZUtleVwiOiBpc3N1ZS5rZXksXHJcbiAgICAgICAgXCJhY3Rpb25OYW1lXCI6IGFkLmdldE5hbWUoKSxcclxuICAgICAgICBcImppcmFXb3JrZmxvd05hbWVcIjogamlyYVdvcmtmbG93LmdldE5hbWUoKSxcclxuICAgICAgICBcImN1c3RvbUZpZWxkTWFwXCI6IGN1c3RvbUZpZWxkTWFwLFxyXG4gICAgICAgIFwicHJvcGVydGllc1wiOiBwcm9wZXJ0aWVzXHJcbiAgICBdIFxyXG5cclxuICAgIGxvZy5kZWJ1ZyBcImJhc2VVUkwgU046IFwiICsgYmFzZVVSTFxyXG4gICAgbG9nLmRlYnVnIFwiYm9keVJlcSBTTjogXCIgKyBib2R5UmVxXHJcblxyXG4gICAgdXJsID0gbmV3IFVSTChiYXNlVVJMKVxyXG4gICAgY29ubmVjdGlvbiA9IChIdHRwVVJMQ29ubmVjdGlvbil1cmwub3BlbkNvbm5lY3Rpb24oKTtcclxuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdE1ldGhvZChyZXF1ZXN0TWV0aG9kKTtcclxuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xyXG4gICAgY29ubmVjdGlvbi5zZXRSZXF1ZXN0UHJvcGVydHkoXCJBY2NlcHRcIiwgXCIqLypcIik7XHJcbiAgICBjb25uZWN0aW9uLnNldERvT3V0cHV0KHRydWUpO1xyXG4gICAgY29ubmVjdGlvbi5zZXREb0lucHV0KHRydWUpO1xyXG4gICAgY29ubmVjdGlvbi5vdXRwdXRTdHJlYW0ud2l0aFdyaXRlcihcIlVURi04XCIpIHsgbmV3IFN0cmVhbWluZ0pzb25CdWlsZGVyKGl0LCBib2R5UmVxKSB9XHJcbiAgICBcclxuICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpO1xyXG4gICAgcmVzcG9uc2VDb2RlID0gY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpICAgIFxyXG4gICAgICAgIFxyXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2UgSHR0cFN0YXR1c0NvZGU6IFwiICsgcmVzcG9uc2VDb2RlXHJcbiAgICAgICAgXHJcbiAgICAvLyBJZiBiYWNrZW5kIHJlcGxpZXMgd2l0aCAyMDAgdGhlbiB0aGUgY29uZGl0aW9uIGlzIHBhc3NlZCAgICBcclxuICAgIGlmKFwiMjAwXCIuZXF1YWxzKHJlc3BvbnNlQ29kZSkpe1xyXG4gICAgICAgIGxvZy5kZWJ1ZyBcIk9LXCJcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy9UaGlzIGlzIGEgYmFja2VuZCBlcnJvci4uIGxvZ1xyXG4gICAgICAgIGxvZy5kZWJ1ZyBcIkJhY2tlbmQgZXJyb3JcIlxyXG5cclxuICAgICAgICBkZWYgb3V0cHV0ID0gbmV3IEFycmF5TGlzdCgpXHJcbiAgICAgICAgZGVmIGVMaXN0ID0gbmV3IEFycmF5TGlzdCgpXHJcbiAgICAgICAgZGVmIGVMaXN0RXJyb3JzID0gbmV3IEFycmF5TGlzdCgpXHJcbiAgICAgICAgZGVmIGVycm9yTXNncyA9IG5ldyBBcnJheUxpc3QoKVxyXG5cclxuICAgICAgICBlTGlzdEVycm9ycy5hZGQoXCJFXCIpXHJcbiAgICAgICAgZUxpc3RFcnJvcnMuYWRkKFwiRVJST1JcIikgLy9pZiBkeW5hbWljLCBiZXR0ZXJcclxuICAgICAgICBlTGlzdEVycm9ycy5hZGQobnVsbCkgICAvL2l0IHNvdW5kcyBpdCBpcyB1c2VkIGFzIHNlcGFyYXRvclxyXG5cclxuICAgICAgICBkZWYgb3V0cHV0TXNnID0gKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0XHJcbiAgICAgICAgbG9nLmRlYnVnIFwiKChIdHRwVVJMQ29ubmVjdGlvbiljb25uZWN0aW9uKS5lcnJvclN0cmVhbS50ZXh0OiBcIiArIG91dHB1dE1zZ1xyXG5cclxuICAgICAgICBkZWYganNvblNsdXJwZXIgPSBuZXcgSnNvblNsdXJwZXIoKVxyXG4gICAgICAgIGRlZiBqc29uX29iamVjdCA9IGpzb25TbHVycGVyLnBhcnNlVGV4dChvdXRwdXRNc2cpXHJcbiAgICAgICAgaWYoanNvbl9vYmplY3QgaW5zdGFuY2VvZiBNYXApe1xyXG4gICAgICAgICAgICAvL2Vycm9yTXNncy5hZGQoY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKSArIFwiIFwiICsganNvbl9vYmplY3QubWVzc2FnZSlcclxuICAgICAgICAgICAgaWYoanNvbl9vYmplY3QuZXJyb3JzIGluc3RhbmNlb2YgTGlzdCl7XHJcbiAgICAgICAgICAgICAgICBmb3IoZGVmIGN1ciA6IChMaXN0KWpzb25fb2JqZWN0LmVycm9ycyl7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JNc2dzLmFkZChjdXIudG9TdHJpbmcoKSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGVycm9yTXNncy5hZGQoanNvbl9vYmplY3QuZXJyb3JzLnRvU3RyaW5nKCkpXHJcbiAgICAgICAgICAgIH0gICAgICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICAgICAgZUxpc3RFcnJvcnMuYWRkKGVycm9yTXNncylcclxuICAgICAgICBlTGlzdC5hZGQoZUxpc3RFcnJvcnMpXHJcblxyXG4gICAgICAgIG91dHB1dC5hZGQoZUxpc3QpXHJcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigne1wiRVwiOlwiJyArIG91dHB1dC50b1N0cmluZygpICsgJ1wifScpXHJcbiAgICB9XHJcbn0gY2F0Y2ggKEV4Y2VwdGlvbiBlKXtcclxuICAgIC8vVGhpcyBpcyBhbiBleGNlcHRpb24gaW4gdGhlIHNjcmlwdFxyXG4gICAgbG9nLmRlYnVnIFwiRXhjZXB0aW9uIHJhaXNlZFwiXHJcbiAgICBsb2cuZXJyb3IgZVxyXG4gICAgaWYoZSBpbnN0YW5jZW9mIEludmFsaWRJbnB1dEV4Y2VwdGlvbil7XHJcbiAgICAgICAgdGhyb3cgZTtcclxuICAgIH1cclxuICAgIHRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oXCJWYWxpZGF0b3JzIGZhaWxlZFwiKTtcclxufVxyXG4iLCJzY3JpcHRQYXRoIjpudWxsfQ==</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="Not Done" status="Done" step="7">
              <post-functions>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="8" name="Canceled">
      <meta name="jira.status.id">11728</meta>
      <actions>
        <action id="251" name="Recupera Ticket">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <results>
            <unconditional-result old-status="null" status="null" step="6">
              <post-functions>
                <function type="class">
                  <arg name="field.name">resolution</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdate-issue-field-function</arg>
                  <arg name="field.value"></arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueFieldFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
        <action id="321" name="Set Security">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">1b7d5faf-f701-433b-bfff-28879be13db0</arg>
                <arg name="FIELD_INVERT_CONDITION"></arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_USER_IDS">arianna.fabbri|||JIRAUSER58800</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="8">
              <post-functions>
                <function type="class">
                  <arg name="FIELD_SECURITY_LEVEL_ID">11600</arg>
                  <arg name="FIELD_FUNCTION_ID">006f388b-2114-4b75-aba7-ff0b7afc0cb2</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
                  <arg name="FIELD_CONDITION"></arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="9" name="Rejected">
      <meta name="jira.status.id">11436</meta>
      <actions>
        <action id="301" name="Set Security">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">1b7d5faf-f701-433b-bfff-28879be13db0</arg>
                <arg name="FIELD_INVERT_CONDITION"></arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_USER_IDS">arianna.fabbri|||JIRAUSER58800</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="9">
              <post-functions>
                <function type="class">
                  <arg name="FIELD_SECURITY_LEVEL_ID">11600</arg>
                  <arg name="FIELD_FUNCTION_ID">006f388b-2114-4b75-aba7-ff0b7afc0cb2</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
                  <arg name="FIELD_CONDITION"></arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="10" name="Risks Assessment">
      <meta name="jira.status.id">15228</meta>
      <actions>
<common-action id="41" />
<common-action id="201" />
        <action id="351" name="Genera Operazioni di Manutenzione ODS">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">552ba1da-de56-4386-aba4-d68c6b072866</arg>
                <arg name="FIELD_NOTES">YCFgUE0gVGFzayBzZW56YSBQTSBvcGVyYXRpb25zIE5PTiBBU1NJU1RBTlQgKGkgdGt0IGFzc2lzdGFudCBOT04gZGV2b25vIHJpcGV0ZXJlIGxlIFBNIE9wZXJhdGlvbnMp</arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.SimpleScriptedCondition</arg>
                <arg name="disabled">false</arg>
                <arg name="FIELD_CONDITION">YCFgeyJzY3JpcHQiOiJpbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlXHJcbmltcG9ydCBjb20ub3BlbnN5bXBob255LndvcmtmbG93LkludmFsaWRJbnB1dEV4Y2VwdGlvblxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmNvbXBvbmVudC5Db21wb25lbnRBY2Nlc3NvclxyXG5pbXBvcnQgb3JnLmFwYWNoZS5sb2c0ai5DYXRlZ29yeVxyXG5pbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvbkJ1aWxkZXJcclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJcclxuaW1wb3J0IGNvbS5vbnJlc29sdmUuc2NyaXB0cnVubmVyLnJ1bm5lci5TY3JpcHRSdW5uZXJJbXBsXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWVNYW5hZ2VyXHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTW9kaWZpZWRWYWx1ZVxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLnV0aWwuRGVmYXVsdElzc3VlQ2hhbmdlSG9sZGVyXHJcbmltcG9ydCBqYXZhLnRleHQuU2ltcGxlRGF0ZUZvcm1hdDtcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5pbmRleC5Jc3N1ZUluZGV4aW5nU2VydmljZVxyXG5cclxuZGVmIGFzc2lnbmVkVG8gPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfVEtUX0FTU0lHTkVEX1RPXCIpWzBdXHJcbmRlZiBwbU9wZXJhdGlvbnMgPSAgQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCkuZ2V0Q3VzdG9tRmllbGRPYmplY3RzQnlOYW1lKFwiT1BfUE1fT1BFUkFUSU9OU19PRFNcIilbMF1cclxubG9nLmRlYnVnIFwiaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhc3NpZ25lZFRvKTogXCIgKyBpc3N1ZS5nZXRQYXJlbnRPYmplY3QoKS5nZXRDdXN0b21GaWVsZFZhbHVlKGFzc2lnbmVkVG8pXHJcblxyXG5pc3N1ZS5nZXRDdXN0b21GaWVsZFZhbHVlKHBtT3BlcmF0aW9ucykgPT0gbnVsbCAmJiAoaXNzdWUuZ2V0UGFyZW50T2JqZWN0KCkuZ2V0Q3VzdG9tRmllbGRWYWx1ZShhc3NpZ25lZFRvKSA9PSBudWxsIHx8ICFpc3N1ZS5nZXRQYXJlbnRPYmplY3QoKS5nZXRDdXN0b21GaWVsZFZhbHVlKGFzc2lnbmVkVG8pLnRvU3RyaW5nKCkuZXF1YWxzKFwiQVNTSVNUQU5UXCIpKSIsInNjcmlwdFBhdGgiOm51bGx9</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
              </condition>
            </conditions>
          </restrict-to>
          <validators>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">108a0c19-913e-4bc0-b3cc-ca4f9f18411f</arg>
              <arg name="FIELD_NOTES">YCFgUE0gVGFzazogZ2VuZXJhIG9wZXJhemlvbmkgZGkgbWFudXRlbnppb25l</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT">YCFgeyJzY3JpcHQiOiJpbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXI7XHJcbmltcG9ydCBncm9vdnkuanNvbi5TdHJlYW1pbmdKc29uQnVpbGRlcjtcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5pc3N1ZS5DdXN0b21GaWVsZE1hbmFnZXI7XHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuZmllbGRzLkN1c3RvbUZpZWxkO1xyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLklzc3VlTWFuYWdlcjtcclxuaW1wb3J0IGNvbS5hdGxhc3NpYW4uamlyYS5jb21wb25lbnQuQ29tcG9uZW50QWNjZXNzb3I7XHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuSXNzdWU7XHJcbmltcG9ydCBjb20uYXRsYXNzaWFuLmppcmEuaXNzdWUuTXV0YWJsZUlzc3VlXHJcbmltcG9ydCBvcmcuYXBhY2hlLmNvbW1vbnMuY29kZWMuYmluYXJ5LkJhc2U2NDtcclxuaW1wb3J0IGNvbS5vcGVuc3ltcGhvbnkud29ya2Zsb3cuSW52YWxpZElucHV0RXhjZXB0aW9uXHJcbmltcG9ydCBvcmcuYXBhY2hlLmxvZzRqLkNhdGVnb3J5XHJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVyXHJcbmltcG9ydCBjb20ub25yZXNvbHZlLnNjcmlwdHJ1bm5lci5ydW5uZXIuU2NyaXB0UnVubmVySW1wbFxyXG5pbXBvcnQgY29tLmF0bGFzc2lhbi5qaXJhLmlzc3VlLmluZGV4Lklzc3VlSW5kZXhpbmdTZXJ2aWNlXHJcblxyXG5Qcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpXHJcbkZpbGUgcHJvcGVydGllc0ZpbGUgPSBuZXcgRmlsZShTY3JpcHRSdW5uZXJJbXBsLmdldFBsdWdpbkNvbXBvbmVudChTY3JpcHRSdW5uZXIpLmdldFJvb3RzRm9yRGlzcGxheSgpICsgJy9vcHByb2plY3QucHJvcGVydGllcycpXHJcbnByb3BlcnRpZXNGaWxlLndpdGhJbnB1dFN0cmVhbSB7XHJcblx0cHJvcGVydGllcy5sb2FkKGl0KVxyXG59XHJcbmxvZy5zZXRMZXZlbChvcmcuYXBhY2hlLmxvZzRqLkxldmVsLkRFQlVHKVxyXG5cclxuSXNzdWVNYW5hZ2VyIGlzc3VlTWFuYWdlciA9IENvbXBvbmVudEFjY2Vzc29yLmdldElzc3VlTWFuYWdlcigpO1xyXG5DdXN0b21GaWVsZE1hbmFnZXIgY3VzdG9tRmllbGRNYW5hZ2VyID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q3VzdG9tRmllbGRNYW5hZ2VyKCk7XHJcbmRlZiByZXF1ZXN0TWV0aG9kXHJcbmRlZiBiYXNlVVJMXHJcblxyXG5kZWYgcG1PcGVyYXRpb25zID0gaXNzdWUuZ2V0Q3VzdG9tRmllbGRWYWx1ZShDb21wb25lbnRBY2Nlc3Nvci5nZXRDdXN0b21GaWVsZE1hbmFnZXIoKS5nZXRDdXN0b21GaWVsZE9iamVjdHNCeU5hbWUoXCJPUF9QTV9PUEVSQVRJT05TX09EU1wiKVswXSlcclxuaWYocG1PcGVyYXRpb25zID09IG51bGwpe1xyXG5cclxuICAgIC8qIFJFU1QgQVBJIHBlciBwdWxpemlhIGNhY2hlIGlzc3VlIGxpbmthdGEgKi9cclxuICAgIHJlcXVlc3RNZXRob2QgPSBcIlBVVFwiO1xyXG4gICAgLypTY3JpcHQgVmFyaWFibGVzKi9cclxuICAgIC8vUGVyIHRlc3QgZGEgY29uc29sZVxyXG4gICAgLy9Jc3N1ZSBpc3N1ZSA9IGlzc3VlTWFuYWdlci5nZXRJc3N1ZUJ5S2V5SWdub3JlQ2FzZShcIkFBUy0zMjUzNVwiKVxyXG4gICAgYmFzZVVSTCA9IFwiaHR0cDovL1wiICsgcHJvcGVydGllc1snYXBpLmVudiddLnRvU3RyaW5nKCkgKyBcIi9vcC9yZXN0L2ppcmEvQUEvcG0tc3VidGFzay9cIiArIGlzc3VlLmtleSArIFwiL29wZXJhdGlvbnNcIlxyXG4gICAgVVJMIHVybCA9IG5ldyBVUkwoYmFzZVVSTClcclxuICAgIEh0dHBVUkxDb25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSHR0cFVSTENvbm5lY3Rpb24pdXJsLm9wZW5Db25uZWN0aW9uKCk7XHJcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QocmVxdWVzdE1ldGhvZCk7XHJcbiAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RQcm9wZXJ0eShcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcclxuICAgIGNvbm5lY3Rpb24uc2V0UmVxdWVzdFByb3BlcnR5KFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xyXG4gICAgY29ubmVjdGlvbi5zZXREb091dHB1dCh0cnVlKTtcclxuICAgIGNvbm5lY3Rpb24uc2V0RG9JbnB1dCh0cnVlKTtcclxuICAgIGNvbm5lY3Rpb24uY29ubmVjdCgpO1xyXG4gICAgbG9nLmRlYnVnIFwidXJsOiBcIiArIHVybFxyXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VDb2RlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKVxyXG4gICAgbG9nLmRlYnVnIFwiUmVzcG9uc2VNZXNzYWdlOlwiICsgY29ubmVjdGlvbi5nZXRSZXNwb25zZU1lc3NhZ2UoKVxyXG5cclxuICAgIGlmICghY29ubmVjdGlvbi5nZXRSZXNwb25zZUNvZGUoKS50b1N0cmluZygpLmVxdWFscyhcIjIwMFwiKSl7XHJcbiAgICAgICAgbG9nLmRlYnVnIFwidXJsOiBcIiArIHVybFxyXG4gICAgICAgIGxvZy5kZWJ1ZyBcIlJlc3BvbnNlQ29kZTpcIiArIGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKClcclxuICAgICAgICBsb2cuZGVidWcgXCJSZXNwb25zZU1lc3NhZ2U6XCIgKyBjb25uZWN0aW9uLmdldFJlc3BvbnNlTWVzc2FnZSgpXHJcbiAgICB9XHJcbiAgICBJc3N1ZUluZGV4aW5nU2VydmljZSBcdGlzc3VlSW5kZXhpbmdTZXJ2aWNlID0gQ29tcG9uZW50QWNjZXNzb3IuZ2V0Q29tcG9uZW50KElzc3VlSW5kZXhpbmdTZXJ2aWNlKVxyXG4gICAgaXNzdWVJbmRleGluZ1NlcnZpY2UucmVJbmRleChpc3N1ZSlcclxufSIsInNjcmlwdFBhdGgiOm51bGx9</arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="disabled">true</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
            <validator name="" type="class">
              <arg name="FIELD_FUNCTION_ID">2a6bb4a1-8923-479f-a196-7b64e7901962</arg>
              <arg name="FIELD_SCRIPT_FILE_OR_SCRIPT"></arg>
              <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.validators.CustomScriptValidator</arg>
              <arg name="class.name">com.onresolve.jira.groovy.GroovyValidator</arg>
            </validator>
          </validators>
          <results>
            <unconditional-result old-status="Not Done" status="Done" step="10">
              <post-functions>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowupdateissuestatus-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowcreatecomment-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowgeneratechangehistory-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowreindexissue-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="full.module.key">com.atlassian.jira.plugin.system.workflowfireevent-function</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
    <step id="11" name="Removed">
      <meta name="jira.status.id">15327</meta>
      <actions>
        <action id="311" name="Set Security">
          <meta name="jira.description"></meta>
          <meta name="jira.fieldscreen.id"></meta>
          <restrict-to>
            <conditions>
              <condition type="class">
                <arg name="FIELD_FUNCTION_ID">1b7d5faf-f701-433b-bfff-28879be13db0</arg>
                <arg name="FIELD_INVERT_CONDITION"></arg>
                <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.conditions.UserCondition</arg>
                <arg name="class.name">com.onresolve.jira.groovy.GroovyCondition</arg>
                <arg name="FIELD_USER_IDS">arianna.fabbri|||JIRAUSER58800</arg>
              </condition>
            </conditions>
          </restrict-to>
          <results>
            <unconditional-result old-status="null" status="null" step="11">
              <post-functions>
                <function type="class">
                  <arg name="FIELD_SECURITY_LEVEL_ID">11600</arg>
                  <arg name="FIELD_FUNCTION_ID">006f388b-2114-4b75-aba7-ff0b7afc0cb2</arg>
                  <arg name="full.module.key">com.onresolve.jira.groovy.groovyrunnerscriptrunner-workflow-function-com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
                  <arg name="canned-script">com.onresolve.scriptrunner.canned.jira.workflow.postfunctions.SetIssueSecurity</arg>
                  <arg name="FIELD_CONDITION"></arg>
                  <arg name="class.name">com.onresolve.jira.groovy.GroovyFunctionPlugin</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>
                </function>
                <function type="class">
                  <arg name="class.name">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>
                </function>
                <function type="class">
                  <arg name="eventTypeId">13</arg>
                  <arg name="class.name">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>
                </function>
              </post-functions>
            </unconditional-result>
          </results>
        </action>
      </actions>
    </step>
  </steps>
</workflow>
